
PierceStat_F407VET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e02c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  0800e1c0  0800e1c0  0001e1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8a8  0800e8a8  0002110c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8a8  0800e8a8  0001e8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8b0  0800e8b0  0002110c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8b0  0800e8b0  0001e8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8b4  0800e8b4  0001e8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000110c  20000000  0800e8b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002110c  2**0
                  CONTENTS
 10 .bss          00000aec  2000110c  2000110c  0002110c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001bf8  20001bf8  0002110c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002110c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f8b  00000000  00000000  0002113c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000281c  00000000  00000000  000340c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  000368e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011a0  00000000  00000000  00037b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e1b  00000000  00000000  00038d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013641  00000000  00000000  0005cb4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da3d7  00000000  00000000  0007018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a563  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067fc  00000000  00000000  0014a5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000110c 	.word	0x2000110c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e1a4 	.word	0x0800e1a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001110 	.word	0x20001110
 80001cc:	0800e1a4 	.word	0x0800e1a4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <InitParams>:
                            .value.val_float = 1.0,
                            .valueAbsMin.val_float = 0.0,
                            .valueAbsMax.val_float = 1000000000.0};


void InitParams() {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	71bb      	strb	r3, [r7, #6]
	params[i++] = &ParamList;
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	1c5a      	adds	r2, r3, #1
 8001026:	71ba      	strb	r2, [r7, #6]
 8001028:	4619      	mov	r1, r3
 800102a:	4bb8      	ldr	r3, [pc, #736]	; (800130c <InitParams+0x2f4>)
 800102c:	4ab8      	ldr	r2, [pc, #736]	; (8001310 <InitParams+0x2f8>)
 800102e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_PowerSet;
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	71ba      	strb	r2, [r7, #6]
 8001038:	4619      	mov	r1, r3
 800103a:	4bb4      	ldr	r3, [pc, #720]	; (800130c <InitParams+0x2f4>)
 800103c:	4ab5      	ldr	r2, [pc, #724]	; (8001314 <InitParams+0x2fc>)
 800103e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_PowerMin;
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	71ba      	strb	r2, [r7, #6]
 8001048:	4619      	mov	r1, r3
 800104a:	4bb0      	ldr	r3, [pc, #704]	; (800130c <InitParams+0x2f4>)
 800104c:	4ab2      	ldr	r2, [pc, #712]	; (8001318 <InitParams+0x300>)
 800104e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_PowerMax;
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	71ba      	strb	r2, [r7, #6]
 8001058:	4619      	mov	r1, r3
 800105a:	4bac      	ldr	r3, [pc, #688]	; (800130c <InitParams+0x2f4>)
 800105c:	4aaf      	ldr	r2, [pc, #700]	; (800131c <InitParams+0x304>)
 800105e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_PowerOnOff;
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	71ba      	strb	r2, [r7, #6]
 8001068:	4619      	mov	r1, r3
 800106a:	4ba8      	ldr	r3, [pc, #672]	; (800130c <InitParams+0x2f4>)
 800106c:	4aac      	ldr	r2, [pc, #688]	; (8001320 <InitParams+0x308>)
 800106e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_24Vmeas;
 8001072:	79bb      	ldrb	r3, [r7, #6]
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	71ba      	strb	r2, [r7, #6]
 8001078:	4619      	mov	r1, r3
 800107a:	4ba4      	ldr	r3, [pc, #656]	; (800130c <InitParams+0x2f4>)
 800107c:	4aa9      	ldr	r2, [pc, #676]	; (8001324 <InitParams+0x30c>)
 800107e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_24Vcoeff;
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	71ba      	strb	r2, [r7, #6]
 8001088:	4619      	mov	r1, r3
 800108a:	4ba0      	ldr	r3, [pc, #640]	; (800130c <InitParams+0x2f4>)
 800108c:	4aa6      	ldr	r2, [pc, #664]	; (8001328 <InitParams+0x310>)
 800108e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_PowerMeas;
 8001092:	79bb      	ldrb	r3, [r7, #6]
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	71ba      	strb	r2, [r7, #6]
 8001098:	4619      	mov	r1, r3
 800109a:	4b9c      	ldr	r3, [pc, #624]	; (800130c <InitParams+0x2f4>)
 800109c:	4aa3      	ldr	r2, [pc, #652]	; (800132c <InitParams+0x314>)
 800109e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_PowerCoeff;
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	71ba      	strb	r2, [r7, #6]
 80010a8:	4619      	mov	r1, r3
 80010aa:	4b98      	ldr	r3, [pc, #608]	; (800130c <InitParams+0x2f4>)
 80010ac:	4aa0      	ldr	r2, [pc, #640]	; (8001330 <InitParams+0x318>)
 80010ae:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1A;
 80010b2:	79bb      	ldrb	r3, [r7, #6]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	71ba      	strb	r2, [r7, #6]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4b94      	ldr	r3, [pc, #592]	; (800130c <InitParams+0x2f4>)
 80010bc:	4a9d      	ldr	r2, [pc, #628]	; (8001334 <InitParams+0x31c>)
 80010be:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1B;
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	1c5a      	adds	r2, r3, #1
 80010c6:	71ba      	strb	r2, [r7, #6]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4b90      	ldr	r3, [pc, #576]	; (800130c <InitParams+0x2f4>)
 80010cc:	4a9a      	ldr	r2, [pc, #616]	; (8001338 <InitParams+0x320>)
 80010ce:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2A;
 80010d2:	79bb      	ldrb	r3, [r7, #6]
 80010d4:	1c5a      	adds	r2, r3, #1
 80010d6:	71ba      	strb	r2, [r7, #6]
 80010d8:	4619      	mov	r1, r3
 80010da:	4b8c      	ldr	r3, [pc, #560]	; (800130c <InitParams+0x2f4>)
 80010dc:	4a97      	ldr	r2, [pc, #604]	; (800133c <InitParams+0x324>)
 80010de:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2B;
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	71ba      	strb	r2, [r7, #6]
 80010e8:	4619      	mov	r1, r3
 80010ea:	4b88      	ldr	r3, [pc, #544]	; (800130c <InitParams+0x2f4>)
 80010ec:	4a94      	ldr	r2, [pc, #592]	; (8001340 <InitParams+0x328>)
 80010ee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1A_Coeff;
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	71ba      	strb	r2, [r7, #6]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4b84      	ldr	r3, [pc, #528]	; (800130c <InitParams+0x2f4>)
 80010fc:	4a91      	ldr	r2, [pc, #580]	; (8001344 <InitParams+0x32c>)
 80010fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1B_Coeff;
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	71ba      	strb	r2, [r7, #6]
 8001108:	4619      	mov	r1, r3
 800110a:	4b80      	ldr	r3, [pc, #512]	; (800130c <InitParams+0x2f4>)
 800110c:	4a8e      	ldr	r2, [pc, #568]	; (8001348 <InitParams+0x330>)
 800110e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2A_Coeff;
 8001112:	79bb      	ldrb	r3, [r7, #6]
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	71ba      	strb	r2, [r7, #6]
 8001118:	4619      	mov	r1, r3
 800111a:	4b7c      	ldr	r3, [pc, #496]	; (800130c <InitParams+0x2f4>)
 800111c:	4a8b      	ldr	r2, [pc, #556]	; (800134c <InitParams+0x334>)
 800111e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2B_Coeff;
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	71ba      	strb	r2, [r7, #6]
 8001128:	4619      	mov	r1, r3
 800112a:	4b78      	ldr	r3, [pc, #480]	; (800130c <InitParams+0x2f4>)
 800112c:	4a88      	ldr	r2, [pc, #544]	; (8001350 <InitParams+0x338>)
 800112e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Temp1;
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	71ba      	strb	r2, [r7, #6]
 8001138:	4619      	mov	r1, r3
 800113a:	4b74      	ldr	r3, [pc, #464]	; (800130c <InitParams+0x2f4>)
 800113c:	4a85      	ldr	r2, [pc, #532]	; (8001354 <InitParams+0x33c>)
 800113e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp2;
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	71ba      	strb	r2, [r7, #6]
 8001148:	4619      	mov	r1, r3
 800114a:	4b70      	ldr	r3, [pc, #448]	; (800130c <InitParams+0x2f4>)
 800114c:	4a82      	ldr	r2, [pc, #520]	; (8001358 <InitParams+0x340>)
 800114e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp3;
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	71ba      	strb	r2, [r7, #6]
 8001158:	4619      	mov	r1, r3
 800115a:	4b6c      	ldr	r3, [pc, #432]	; (800130c <InitParams+0x2f4>)
 800115c:	4a7f      	ldr	r2, [pc, #508]	; (800135c <InitParams+0x344>)
 800115e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp4;
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	71ba      	strb	r2, [r7, #6]
 8001168:	4619      	mov	r1, r3
 800116a:	4b68      	ldr	r3, [pc, #416]	; (800130c <InitParams+0x2f4>)
 800116c:	4a7c      	ldr	r2, [pc, #496]	; (8001360 <InitParams+0x348>)
 800116e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp1_coeff;
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	1c5a      	adds	r2, r3, #1
 8001176:	71ba      	strb	r2, [r7, #6]
 8001178:	4619      	mov	r1, r3
 800117a:	4b64      	ldr	r3, [pc, #400]	; (800130c <InitParams+0x2f4>)
 800117c:	4a79      	ldr	r2, [pc, #484]	; (8001364 <InitParams+0x34c>)
 800117e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp2_coeff;
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	71ba      	strb	r2, [r7, #6]
 8001188:	4619      	mov	r1, r3
 800118a:	4b60      	ldr	r3, [pc, #384]	; (800130c <InitParams+0x2f4>)
 800118c:	4a76      	ldr	r2, [pc, #472]	; (8001368 <InitParams+0x350>)
 800118e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp3_coeff;
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	71ba      	strb	r2, [r7, #6]
 8001198:	4619      	mov	r1, r3
 800119a:	4b5c      	ldr	r3, [pc, #368]	; (800130c <InitParams+0x2f4>)
 800119c:	4a73      	ldr	r2, [pc, #460]	; (800136c <InitParams+0x354>)
 800119e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp4_coeff;
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	71ba      	strb	r2, [r7, #6]
 80011a8:	4619      	mov	r1, r3
 80011aa:	4b58      	ldr	r3, [pc, #352]	; (800130c <InitParams+0x2f4>)
 80011ac:	4a70      	ldr	r2, [pc, #448]	; (8001370 <InitParams+0x358>)
 80011ae:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &LoadSelect1;
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	71ba      	strb	r2, [r7, #6]
 80011b8:	4619      	mov	r1, r3
 80011ba:	4b54      	ldr	r3, [pc, #336]	; (800130c <InitParams+0x2f4>)
 80011bc:	4a6d      	ldr	r2, [pc, #436]	; (8001374 <InitParams+0x35c>)
 80011be:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &LoadSelect2;
 80011c2:	79bb      	ldrb	r3, [r7, #6]
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	71ba      	strb	r2, [r7, #6]
 80011c8:	4619      	mov	r1, r3
 80011ca:	4b50      	ldr	r3, [pc, #320]	; (800130c <InitParams+0x2f4>)
 80011cc:	4a6a      	ldr	r2, [pc, #424]	; (8001378 <InitParams+0x360>)
 80011ce:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &ModeSelect1;
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	71ba      	strb	r2, [r7, #6]
 80011d8:	4619      	mov	r1, r3
 80011da:	4b4c      	ldr	r3, [pc, #304]	; (800130c <InitParams+0x2f4>)
 80011dc:	4a67      	ldr	r2, [pc, #412]	; (800137c <InitParams+0x364>)
 80011de:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &ModeSelect2;
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	1c5a      	adds	r2, r3, #1
 80011e6:	71ba      	strb	r2, [r7, #6]
 80011e8:	4619      	mov	r1, r3
 80011ea:	4b48      	ldr	r3, [pc, #288]	; (800130c <InitParams+0x2f4>)
 80011ec:	4a64      	ldr	r2, [pc, #400]	; (8001380 <InitParams+0x368>)
 80011ee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Ch1_OnOff;
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	71ba      	strb	r2, [r7, #6]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4b44      	ldr	r3, [pc, #272]	; (800130c <InitParams+0x2f4>)
 80011fc:	4a61      	ldr	r2, [pc, #388]	; (8001384 <InitParams+0x36c>)
 80011fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Ch2_OnOff;
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	71ba      	strb	r2, [r7, #6]
 8001208:	4619      	mov	r1, r3
 800120a:	4b40      	ldr	r3, [pc, #256]	; (800130c <InitParams+0x2f4>)
 800120c:	4a5e      	ldr	r2, [pc, #376]	; (8001388 <InitParams+0x370>)
 800120e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &SourceSelect1;
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	71ba      	strb	r2, [r7, #6]
 8001218:	4619      	mov	r1, r3
 800121a:	4b3c      	ldr	r3, [pc, #240]	; (800130c <InitParams+0x2f4>)
 800121c:	4a5b      	ldr	r2, [pc, #364]	; (800138c <InitParams+0x374>)
 800121e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &SourceSelect2;
 8001222:	79bb      	ldrb	r3, [r7, #6]
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	71ba      	strb	r2, [r7, #6]
 8001228:	4619      	mov	r1, r3
 800122a:	4b38      	ldr	r3, [pc, #224]	; (800130c <InitParams+0x2f4>)
 800122c:	4a58      	ldr	r2, [pc, #352]	; (8001390 <InitParams+0x378>)
 800122e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Pcoeff1Temp;
 8001232:	79bb      	ldrb	r3, [r7, #6]
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	71ba      	strb	r2, [r7, #6]
 8001238:	4619      	mov	r1, r3
 800123a:	4b34      	ldr	r3, [pc, #208]	; (800130c <InitParams+0x2f4>)
 800123c:	4a55      	ldr	r2, [pc, #340]	; (8001394 <InitParams+0x37c>)
 800123e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Pcoeff2Temp;
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	71ba      	strb	r2, [r7, #6]
 8001248:	4619      	mov	r1, r3
 800124a:	4b30      	ldr	r3, [pc, #192]	; (800130c <InitParams+0x2f4>)
 800124c:	4a52      	ldr	r2, [pc, #328]	; (8001398 <InitParams+0x380>)
 800124e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Icoeff1Temp;
 8001252:	79bb      	ldrb	r3, [r7, #6]
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	71ba      	strb	r2, [r7, #6]
 8001258:	4619      	mov	r1, r3
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <InitParams+0x2f4>)
 800125c:	4a4f      	ldr	r2, [pc, #316]	; (800139c <InitParams+0x384>)
 800125e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Icoeff2Temp;
 8001262:	79bb      	ldrb	r3, [r7, #6]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	71ba      	strb	r2, [r7, #6]
 8001268:	4619      	mov	r1, r3
 800126a:	4b28      	ldr	r3, [pc, #160]	; (800130c <InitParams+0x2f4>)
 800126c:	4a4c      	ldr	r2, [pc, #304]	; (80013a0 <InitParams+0x388>)
 800126e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Dcoeff1Temp;
 8001272:	79bb      	ldrb	r3, [r7, #6]
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	71ba      	strb	r2, [r7, #6]
 8001278:	4619      	mov	r1, r3
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <InitParams+0x2f4>)
 800127c:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <InitParams+0x38c>)
 800127e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Dcoeff2Temp;
 8001282:	79bb      	ldrb	r3, [r7, #6]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	71ba      	strb	r2, [r7, #6]
 8001288:	4619      	mov	r1, r3
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <InitParams+0x2f4>)
 800128c:	4a46      	ldr	r2, [pc, #280]	; (80013a8 <InitParams+0x390>)
 800128e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Pcoeff1Freq;
 8001292:	79bb      	ldrb	r3, [r7, #6]
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	71ba      	strb	r2, [r7, #6]
 8001298:	4619      	mov	r1, r3
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <InitParams+0x2f4>)
 800129c:	4a43      	ldr	r2, [pc, #268]	; (80013ac <InitParams+0x394>)
 800129e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Pcoeff2Freq;
 80012a2:	79bb      	ldrb	r3, [r7, #6]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	71ba      	strb	r2, [r7, #6]
 80012a8:	4619      	mov	r1, r3
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <InitParams+0x2f4>)
 80012ac:	4a40      	ldr	r2, [pc, #256]	; (80013b0 <InitParams+0x398>)
 80012ae:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Icoeff1Freq;
 80012b2:	79bb      	ldrb	r3, [r7, #6]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	71ba      	strb	r2, [r7, #6]
 80012b8:	4619      	mov	r1, r3
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <InitParams+0x2f4>)
 80012bc:	4a3d      	ldr	r2, [pc, #244]	; (80013b4 <InitParams+0x39c>)
 80012be:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Icoeff2Freq;
 80012c2:	79bb      	ldrb	r3, [r7, #6]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	71ba      	strb	r2, [r7, #6]
 80012c8:	4619      	mov	r1, r3
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <InitParams+0x2f4>)
 80012cc:	4a3a      	ldr	r2, [pc, #232]	; (80013b8 <InitParams+0x3a0>)
 80012ce:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Dcoeff1Freq;
 80012d2:	79bb      	ldrb	r3, [r7, #6]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	71ba      	strb	r2, [r7, #6]
 80012d8:	4619      	mov	r1, r3
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <InitParams+0x2f4>)
 80012dc:	4a37      	ldr	r2, [pc, #220]	; (80013bc <InitParams+0x3a4>)
 80012de:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Dcoeff2Freq;
 80012e2:	79bb      	ldrb	r3, [r7, #6]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	71ba      	strb	r2, [r7, #6]
 80012e8:	4619      	mov	r1, r3
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <InitParams+0x2f4>)
 80012ec:	4a34      	ldr	r2, [pc, #208]	; (80013c0 <InitParams+0x3a8>)
 80012ee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &I1Set;
 80012f2:	79bb      	ldrb	r3, [r7, #6]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	71ba      	strb	r2, [r7, #6]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <InitParams+0x2f4>)
 80012fc:	4a31      	ldr	r2, [pc, #196]	; (80013c4 <InitParams+0x3ac>)
 80012fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I2Set;
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	71ba      	strb	r2, [r7, #6]
 8001308:	4619      	mov	r1, r3
 800130a:	e05d      	b.n	80013c8 <InitParams+0x3b0>
 800130c:	200011a8 	.word	0x200011a8
 8001310:	20000020 	.word	0x20000020
 8001314:	2000005c 	.word	0x2000005c
 8001318:	20000098 	.word	0x20000098
 800131c:	200000d4 	.word	0x200000d4
 8001320:	20000110 	.word	0x20000110
 8001324:	2000014c 	.word	0x2000014c
 8001328:	20000188 	.word	0x20000188
 800132c:	200001c4 	.word	0x200001c4
 8001330:	20000200 	.word	0x20000200
 8001334:	2000023c 	.word	0x2000023c
 8001338:	20000278 	.word	0x20000278
 800133c:	200002b4 	.word	0x200002b4
 8001340:	200002f0 	.word	0x200002f0
 8001344:	2000032c 	.word	0x2000032c
 8001348:	20000368 	.word	0x20000368
 800134c:	200003a4 	.word	0x200003a4
 8001350:	200003e0 	.word	0x200003e0
 8001354:	2000041c 	.word	0x2000041c
 8001358:	20000458 	.word	0x20000458
 800135c:	20000494 	.word	0x20000494
 8001360:	200004d0 	.word	0x200004d0
 8001364:	2000050c 	.word	0x2000050c
 8001368:	20000548 	.word	0x20000548
 800136c:	20000584 	.word	0x20000584
 8001370:	200005c0 	.word	0x200005c0
 8001374:	200005fc 	.word	0x200005fc
 8001378:	20000638 	.word	0x20000638
 800137c:	20000674 	.word	0x20000674
 8001380:	200006b0 	.word	0x200006b0
 8001384:	200006ec 	.word	0x200006ec
 8001388:	20000728 	.word	0x20000728
 800138c:	20000764 	.word	0x20000764
 8001390:	200007a0 	.word	0x200007a0
 8001394:	200007dc 	.word	0x200007dc
 8001398:	20000818 	.word	0x20000818
 800139c:	20000854 	.word	0x20000854
 80013a0:	20000890 	.word	0x20000890
 80013a4:	200008cc 	.word	0x200008cc
 80013a8:	20000908 	.word	0x20000908
 80013ac:	20000944 	.word	0x20000944
 80013b0:	20000980 	.word	0x20000980
 80013b4:	200009bc 	.word	0x200009bc
 80013b8:	200009f8 	.word	0x200009f8
 80013bc:	20000a34 	.word	0x20000a34
 80013c0:	20000a70 	.word	0x20000a70
 80013c4:	20000aac 	.word	0x20000aac
 80013c8:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <InitParams+0x4c0>)
 80013ca:	4a44      	ldr	r2, [pc, #272]	; (80014dc <InitParams+0x4c4>)
 80013cc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Gate1A_OnOff;
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	71ba      	strb	r2, [r7, #6]
 80013d6:	4619      	mov	r1, r3
 80013d8:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <InitParams+0x4c0>)
 80013da:	4a41      	ldr	r2, [pc, #260]	; (80014e0 <InitParams+0x4c8>)
 80013dc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Gate1B_OnOff;
 80013e0:	79bb      	ldrb	r3, [r7, #6]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	71ba      	strb	r2, [r7, #6]
 80013e6:	4619      	mov	r1, r3
 80013e8:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <InitParams+0x4c0>)
 80013ea:	4a3e      	ldr	r2, [pc, #248]	; (80014e4 <InitParams+0x4cc>)
 80013ec:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Gate2A_OnOff;
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	71ba      	strb	r2, [r7, #6]
 80013f6:	4619      	mov	r1, r3
 80013f8:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <InitParams+0x4c0>)
 80013fa:	4a3b      	ldr	r2, [pc, #236]	; (80014e8 <InitParams+0x4d0>)
 80013fc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Gate2B_OnOff;
 8001400:	79bb      	ldrb	r3, [r7, #6]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	71ba      	strb	r2, [r7, #6]
 8001406:	4619      	mov	r1, r3
 8001408:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <InitParams+0x4c0>)
 800140a:	4a38      	ldr	r2, [pc, #224]	; (80014ec <InitParams+0x4d4>)
 800140c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &GateH1A;
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	71ba      	strb	r2, [r7, #6]
 8001416:	4619      	mov	r1, r3
 8001418:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <InitParams+0x4c0>)
 800141a:	4a35      	ldr	r2, [pc, #212]	; (80014f0 <InitParams+0x4d8>)
 800141c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &GateH1B;
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	71ba      	strb	r2, [r7, #6]
 8001426:	4619      	mov	r1, r3
 8001428:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <InitParams+0x4c0>)
 800142a:	4a32      	ldr	r2, [pc, #200]	; (80014f4 <InitParams+0x4dc>)
 800142c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &GateH2A;
 8001430:	79bb      	ldrb	r3, [r7, #6]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	71ba      	strb	r2, [r7, #6]
 8001436:	4619      	mov	r1, r3
 8001438:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <InitParams+0x4c0>)
 800143a:	4a2f      	ldr	r2, [pc, #188]	; (80014f8 <InitParams+0x4e0>)
 800143c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &GateH2B;
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	71ba      	strb	r2, [r7, #6]
 8001446:	4619      	mov	r1, r3
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <InitParams+0x4c0>)
 800144a:	4a2c      	ldr	r2, [pc, #176]	; (80014fc <InitParams+0x4e4>)
 800144c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &PWM_CH1;
 8001450:	79bb      	ldrb	r3, [r7, #6]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	71ba      	strb	r2, [r7, #6]
 8001456:	4619      	mov	r1, r3
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <InitParams+0x4c0>)
 800145a:	4a29      	ldr	r2, [pc, #164]	; (8001500 <InitParams+0x4e8>)
 800145c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &PWM_CH2;
 8001460:	79bb      	ldrb	r3, [r7, #6]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	71ba      	strb	r2, [r7, #6]
 8001466:	4619      	mov	r1, r3
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <InitParams+0x4c0>)
 800146a:	4a26      	ldr	r2, [pc, #152]	; (8001504 <InitParams+0x4ec>)
 800146c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &CH1_Polarity;
 8001470:	79bb      	ldrb	r3, [r7, #6]
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	71ba      	strb	r2, [r7, #6]
 8001476:	4619      	mov	r1, r3
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <InitParams+0x4c0>)
 800147a:	4a23      	ldr	r2, [pc, #140]	; (8001508 <InitParams+0x4f0>)
 800147c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &CH2_Polarity;
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	71ba      	strb	r2, [r7, #6]
 8001486:	4619      	mov	r1, r3
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <InitParams+0x4c0>)
 800148a:	4a20      	ldr	r2, [pc, #128]	; (800150c <InitParams+0x4f4>)
 800148c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Freq;
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	71ba      	strb	r2, [r7, #6]
 8001496:	4619      	mov	r1, r3
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <InitParams+0x4c0>)
 800149a:	4a1d      	ldr	r2, [pc, #116]	; (8001510 <InitParams+0x4f8>)
 800149c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]


	for(uint8_t j = 0; j < PARAMS_COUNT; j++) {
 80014a0:	2300      	movs	r3, #0
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	e00d      	b.n	80014c2 <InitParams+0x4aa>
		paramTable[params[j]->commandNumber] = j+1;
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <InitParams+0x4c0>)
 80014aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	3301      	adds	r3, #1
 80014b6:	b2d9      	uxtb	r1, r3
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <InitParams+0x4fc>)
 80014ba:	5499      	strb	r1, [r3, r2]
	for(uint8_t j = 0; j < PARAMS_COUNT; j++) {
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	3301      	adds	r3, #1
 80014c0:	71fb      	strb	r3, [r7, #7]
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b63      	cmp	r3, #99	; 0x63
 80014c6:	d9ee      	bls.n	80014a6 <InitParams+0x48e>
	}
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	200011a8 	.word	0x200011a8
 80014dc:	20000ae8 	.word	0x20000ae8
 80014e0:	20000b24 	.word	0x20000b24
 80014e4:	20000b60 	.word	0x20000b60
 80014e8:	20000b9c 	.word	0x20000b9c
 80014ec:	20000bd8 	.word	0x20000bd8
 80014f0:	20000c14 	.word	0x20000c14
 80014f4:	20000c50 	.word	0x20000c50
 80014f8:	20000c8c 	.word	0x20000c8c
 80014fc:	20000cc8 	.word	0x20000cc8
 8001500:	20000d04 	.word	0x20000d04
 8001504:	20000d40 	.word	0x20000d40
 8001508:	20000d7c 	.word	0x20000d7c
 800150c:	20000db8 	.word	0x20000db8
 8001510:	20000df4 	.word	0x20000df4
 8001514:	20001338 	.word	0x20001338

08001518 <setU_PowerSet>:

bool setU_PowerSet(valueTypes value) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
    if(value.val_float >= U_PowerSet.valueAbsMax.val_float ||
 8001520:	ed97 7a01 	vldr	s14, [r7, #4]
 8001524:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <setU_PowerSet+0xa8>)
 8001526:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800152a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	da09      	bge.n	8001548 <setU_PowerSet+0x30>
       value.val_float <= U_PowerSet.valueAbsMin.val_float) {
 8001534:	ed97 7a01 	vldr	s14, [r7, #4]
 8001538:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <setU_PowerSet+0xa8>)
 800153a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= U_PowerSet.valueAbsMax.val_float ||
 800153e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001546:	d801      	bhi.n	800154c <setU_PowerSet+0x34>
       return false;
 8001548:	2300      	movs	r3, #0
 800154a:	e02c      	b.n	80015a6 <setU_PowerSet+0x8e>
    } else {
    	//Set_U_Heater PWM (10 kHz, 16800)
    	extern TIM_HandleTypeDef htim8;
    	int16_t counterSet = 16800*(1.20 - 0.05 * value.val_float);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f80a 	bl	8000568 <__aeabi_f2d>
 8001554:	a316      	add	r3, pc, #88	; (adr r3, 80015b0 <setU_PowerSet+0x98>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7ff f85d 	bl	8000618 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	f04f 3033 	mov.w	r0, #858993459	; 0x33333333
 8001566:	4917      	ldr	r1, [pc, #92]	; (80015c4 <setU_PowerSet+0xac>)
 8001568:	f7fe fe9e 	bl	80002a8 <__aeabi_dsub>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	a310      	add	r3, pc, #64	; (adr r3, 80015b8 <setU_PowerSet+0xa0>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7ff f84d 	bl	8000618 <__aeabi_dmul>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff faf7 	bl	8000b78 <__aeabi_d2iz>
 800158a:	4603      	mov	r3, r0
 800158c:	81fb      	strh	r3, [r7, #14]
    	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, counterSet > 0 ? counterSet : 0);
 800158e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001592:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001596:	b21a      	sxth	r2, r3
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <setU_PowerSet+0xb0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	63da      	str	r2, [r3, #60]	; 0x3c
        U_PowerSet.value = value;
 800159e:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <setU_PowerSet+0xa8>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80015a4:	2301      	movs	r3, #1
    }
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	9999999a 	.word	0x9999999a
 80015b4:	3fa99999 	.word	0x3fa99999
 80015b8:	00000000 	.word	0x00000000
 80015bc:	40d06800 	.word	0x40d06800
 80015c0:	2000005c 	.word	0x2000005c
 80015c4:	3ff33333 	.word	0x3ff33333
 80015c8:	20001aac 	.word	0x20001aac

080015cc <getU_PowerSet>:
valueTypes getU_PowerSet(void) {
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
    return U_PowerSet.value;
 80015d0:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <getU_PowerSet+0x14>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	2000005c 	.word	0x2000005c

080015e4 <setU_PowerOnOff>:

bool setU_PowerOnOff(valueTypes state) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Disable_DC_DC_GPIO_Port, Disable_DC_DC_Pin, state.val_bool);
 80015ec:	793b      	ldrb	r3, [r7, #4]
 80015ee:	461a      	mov	r2, r3
 80015f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <setU_PowerOnOff+0x28>)
 80015f6:	f004 fda5 	bl	8006144 <HAL_GPIO_WritePin>
    U_PowerOnOff.value = state;
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <setU_PowerOnOff+0x2c>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001600:	2301      	movs	r3, #1
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40020800 	.word	0x40020800
 8001610:	20000110 	.word	0x20000110

08001614 <getU_PowerOnOff>:
valueTypes getU_PowerOnOff(void) {
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
    return U_PowerOnOff.value;
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <getU_PowerOnOff+0x14>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000110 	.word	0x20000110

0800162c <setU_PowerMin>:

bool setU_PowerMin(valueTypes value) {
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	if(value.val_float >= U_PowerMin.valueAbsMax.val_float ||
 8001634:	ed97 7a01 	vldr	s14, [r7, #4]
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <setU_PowerMin+0x48>)
 800163a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800163e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001646:	da09      	bge.n	800165c <setU_PowerMin+0x30>
	   value.val_float <= U_PowerMin.valueAbsMin.val_float) {
 8001648:	ed97 7a01 	vldr	s14, [r7, #4]
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <setU_PowerMin+0x48>)
 800164e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= U_PowerMin.valueAbsMax.val_float ||
 8001652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165a:	d801      	bhi.n	8001660 <setU_PowerMin+0x34>
	   return false;
 800165c:	2300      	movs	r3, #0
 800165e:	e003      	b.n	8001668 <setU_PowerMin+0x3c>
	} else {
		U_PowerMin.value = value;
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <setU_PowerMin+0x48>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8001666:	2301      	movs	r3, #1
	}
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	20000098 	.word	0x20000098

08001678 <getU_PowerMin>:
valueTypes getU_PowerMin(void) {
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
    return U_PowerMin.value;
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <getU_PowerMin+0x14>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000098 	.word	0x20000098

08001690 <setU_PowerMax>:

bool setU_PowerMax(valueTypes value) {
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	if(value.val_float >= U_PowerMax.valueAbsMax.val_float ||
 8001698:	ed97 7a01 	vldr	s14, [r7, #4]
 800169c:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <setU_PowerMax+0x48>)
 800169e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80016a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016aa:	da09      	bge.n	80016c0 <setU_PowerMax+0x30>
	   value.val_float <= U_PowerMax.valueAbsMin.val_float) {
 80016ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <setU_PowerMax+0x48>)
 80016b2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= U_PowerMax.valueAbsMax.val_float ||
 80016b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016be:	d801      	bhi.n	80016c4 <setU_PowerMax+0x34>
	   return false;
 80016c0:	2300      	movs	r3, #0
 80016c2:	e003      	b.n	80016cc <setU_PowerMax+0x3c>
	} else {
		U_PowerMax.value = value;
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <setU_PowerMax+0x48>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 80016ca:	2301      	movs	r3, #1
	}
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	200000d4 	.word	0x200000d4

080016dc <getU_PowerMax>:
valueTypes getU_PowerMax(void) {
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
    return U_PowerMax.value;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <getU_PowerMax+0x14>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	200000d4 	.word	0x200000d4

080016f4 <setU_24Vmeas>:


bool setU_24Vmeas(valueTypes value) {
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
    U_24Vmeas.value = value;
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <setU_24Vmeas+0x1c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	2000014c 	.word	0x2000014c

08001714 <getU_24Vmeas>:
valueTypes getU_24Vmeas() {
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
    return U_24Vmeas.value;
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <getU_24Vmeas+0x14>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	2000014c 	.word	0x2000014c

0800172c <setU_24Vcoeff>:

bool setU_24Vcoeff(valueTypes value) {
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    if(value.val_float >= U_24Vcoeff.valueAbsMax.val_float ||
 8001734:	ed97 7a01 	vldr	s14, [r7, #4]
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <setU_24Vcoeff+0x48>)
 800173a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800173e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	da09      	bge.n	800175c <setU_24Vcoeff+0x30>
       value.val_float <= U_24Vcoeff.valueAbsMin.val_float) {
 8001748:	ed97 7a01 	vldr	s14, [r7, #4]
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <setU_24Vcoeff+0x48>)
 800174e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= U_24Vcoeff.valueAbsMax.val_float ||
 8001752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175a:	d801      	bhi.n	8001760 <setU_24Vcoeff+0x34>
       return false;
 800175c:	2300      	movs	r3, #0
 800175e:	e003      	b.n	8001768 <setU_24Vcoeff+0x3c>
    } else {
        U_24Vcoeff.value = value;
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <setU_24Vcoeff+0x48>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001766:	2301      	movs	r3, #1
    }
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	20000188 	.word	0x20000188

08001778 <getU_24Vcoeff>:

valueTypes getU_24Vcoeff(void) {
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
    return U_24Vcoeff.value;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <getU_24Vcoeff+0x14>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000188 	.word	0x20000188

08001790 <setU_PowerMeas>:


bool setU_PowerMeas(valueTypes value) {
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
    U_PowerMeas.value = value;
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <setU_PowerMeas+0x1c>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	200001c4 	.word	0x200001c4

080017b0 <getU_PowerMeas>:
valueTypes getU_PowerMeas() {
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
    return U_PowerMeas.value;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <getU_PowerMeas+0x14>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	200001c4 	.word	0x200001c4

080017c8 <setU_PowerCoeff>:

bool setU_PowerCoeff(valueTypes value) {
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
    if(value.val_float >= U_PowerCoeff.valueAbsMax.val_float ||
 80017d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <setU_PowerCoeff+0x48>)
 80017d6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80017da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	da09      	bge.n	80017f8 <setU_PowerCoeff+0x30>
       value.val_float <= U_PowerCoeff.valueAbsMin.val_float) {
 80017e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <setU_PowerCoeff+0x48>)
 80017ea:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= U_PowerCoeff.valueAbsMax.val_float ||
 80017ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f6:	d801      	bhi.n	80017fc <setU_PowerCoeff+0x34>
       return false;
 80017f8:	2300      	movs	r3, #0
 80017fa:	e003      	b.n	8001804 <setU_PowerCoeff+0x3c>
    } else {
       U_PowerCoeff.value = value;
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <setU_PowerCoeff+0x48>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
       return true;
 8001802:	2301      	movs	r3, #1
    }
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	20000200 	.word	0x20000200

08001814 <getU_PowerCoeff>:

valueTypes getU_PowerCoeff(void) {
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
    return U_PowerCoeff.value;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <getU_PowerCoeff+0x14>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000200 	.word	0x20000200

0800182c <setI_1A>:

bool setI_1A(valueTypes value) {
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
    I_1A.value = value;
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <setI_1A+0x1c>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 800183a:	2301      	movs	r3, #1
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	2000023c 	.word	0x2000023c

0800184c <getI_1A>:
valueTypes getI_1A() {
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
    return I_1A.value;
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <getI_1A+0x14>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	2000023c 	.word	0x2000023c

08001864 <setI_1B>:
bool setI_1B(valueTypes value) {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
    I_1B.value = value;
 800186c:	4a04      	ldr	r2, [pc, #16]	; (8001880 <setI_1B+0x1c>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	20000278 	.word	0x20000278

08001884 <getI_1B>:
valueTypes getI_1B() {
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
    return I_1B.value;
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <getI_1B+0x14>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000278 	.word	0x20000278

0800189c <setI_2A>:
bool setI_2A(valueTypes value) {
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
    I_2A.value = value;
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <setI_2A+0x1c>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	200002b4 	.word	0x200002b4

080018bc <getI_2A>:
valueTypes getI_2A() {
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
    return I_2A.value;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <getI_2A+0x14>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	200002b4 	.word	0x200002b4

080018d4 <setI_2B>:
bool setI_2B(valueTypes value) {
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
    I_2B.value = value;
 80018dc:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <setI_2B+0x1c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	200002f0 	.word	0x200002f0

080018f4 <getI_2B>:
valueTypes getI_2B() {
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
    return I_2B.value;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <getI_2B+0x14>)
 80018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	200002f0 	.word	0x200002f0

0800190c <setI_1A_Coeff>:

bool setI_1A_Coeff(valueTypes value) {
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I_1A_Coeff.valueAbsMax.val_float ||
 8001914:	ed97 7a01 	vldr	s14, [r7, #4]
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <setI_1A_Coeff+0x48>)
 800191a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800191e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001926:	da09      	bge.n	800193c <setI_1A_Coeff+0x30>
       value.val_float <= I_1A_Coeff.valueAbsMin.val_float) {
 8001928:	ed97 7a01 	vldr	s14, [r7, #4]
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <setI_1A_Coeff+0x48>)
 800192e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I_1A_Coeff.valueAbsMax.val_float ||
 8001932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193a:	d801      	bhi.n	8001940 <setI_1A_Coeff+0x34>
       return false;
 800193c:	2300      	movs	r3, #0
 800193e:	e003      	b.n	8001948 <setI_1A_Coeff+0x3c>
    } else {
        I_1A_Coeff.value = value;
 8001940:	4a04      	ldr	r2, [pc, #16]	; (8001954 <setI_1A_Coeff+0x48>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001946:	2301      	movs	r3, #1
    }
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	2000032c 	.word	0x2000032c

08001958 <getI_1A_Coeff>:
valueTypes getI_1A_Coeff(void) {
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
    return I_1A_Coeff.value;
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <getI_1A_Coeff+0x14>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	2000032c 	.word	0x2000032c

08001970 <setI_1B_Coeff>:
bool setI_1B_Coeff(valueTypes value) {
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I_1B_Coeff.valueAbsMax.val_float ||
 8001978:	ed97 7a01 	vldr	s14, [r7, #4]
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <setI_1B_Coeff+0x48>)
 800197e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001982:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	da09      	bge.n	80019a0 <setI_1B_Coeff+0x30>
       value.val_float <= I_1B_Coeff.valueAbsMin.val_float) {
 800198c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <setI_1B_Coeff+0x48>)
 8001992:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I_1B_Coeff.valueAbsMax.val_float ||
 8001996:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	d801      	bhi.n	80019a4 <setI_1B_Coeff+0x34>
       return false;
 80019a0:	2300      	movs	r3, #0
 80019a2:	e003      	b.n	80019ac <setI_1B_Coeff+0x3c>
    } else {
        I_1B_Coeff.value = value;
 80019a4:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <setI_1B_Coeff+0x48>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80019aa:	2301      	movs	r3, #1
    }
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	20000368 	.word	0x20000368

080019bc <getI_1B_Coeff>:
valueTypes getI_1B_Coeff(void) {
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
    return I_1B_Coeff.value;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <getI_1B_Coeff+0x14>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000368 	.word	0x20000368

080019d4 <setI_2A_Coeff>:
bool setI_2A_Coeff(valueTypes value) {
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I_2A_Coeff.valueAbsMax.val_float ||
 80019dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <setI_2A_Coeff+0x48>)
 80019e2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80019e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	da09      	bge.n	8001a04 <setI_2A_Coeff+0x30>
       value.val_float <= I_2A_Coeff.valueAbsMin.val_float) {
 80019f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <setI_2A_Coeff+0x48>)
 80019f6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I_2A_Coeff.valueAbsMax.val_float ||
 80019fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	d801      	bhi.n	8001a08 <setI_2A_Coeff+0x34>
       return false;
 8001a04:	2300      	movs	r3, #0
 8001a06:	e003      	b.n	8001a10 <setI_2A_Coeff+0x3c>
    } else {
        I_2A_Coeff.value = value;
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <setI_2A_Coeff+0x48>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001a0e:	2301      	movs	r3, #1
    }
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	200003a4 	.word	0x200003a4

08001a20 <getI_2A_Coeff>:
valueTypes getI_2A_Coeff(void) {
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
    return I_2A_Coeff.value;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <getI_2A_Coeff+0x14>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	200003a4 	.word	0x200003a4

08001a38 <setI_2B_Coeff>:
bool setI_2B_Coeff(valueTypes value) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I_2B_Coeff.valueAbsMax.val_float ||
 8001a40:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <setI_2B_Coeff+0x48>)
 8001a46:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	da09      	bge.n	8001a68 <setI_2B_Coeff+0x30>
       value.val_float <= I_2B_Coeff.valueAbsMin.val_float) {
 8001a54:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <setI_2B_Coeff+0x48>)
 8001a5a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I_2B_Coeff.valueAbsMax.val_float ||
 8001a5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a66:	d801      	bhi.n	8001a6c <setI_2B_Coeff+0x34>
       return false;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e003      	b.n	8001a74 <setI_2B_Coeff+0x3c>
    } else {
        I_2B_Coeff.value = value;
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <setI_2B_Coeff+0x48>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001a72:	2301      	movs	r3, #1
    }
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	200003e0 	.word	0x200003e0

08001a84 <getI_2B_Coeff>:
valueTypes getI_2B_Coeff(void) {
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
    return I_2B_Coeff.value;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <getI_2B_Coeff+0x14>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	200003e0 	.word	0x200003e0

08001a9c <setTemp1>:


bool setTemp1(valueTypes value) {
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    Temp1.value = value;
 8001aa4:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <setTemp1+0x1c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001aaa:	2301      	movs	r3, #1
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	2000041c 	.word	0x2000041c

08001abc <getTemp1>:
valueTypes getTemp1() {
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
    return Temp1.value;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <getTemp1+0x14>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	2000041c 	.word	0x2000041c

08001ad4 <setTemp2>:
bool setTemp2(valueTypes value) {
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
    Temp2.value = value;
 8001adc:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <setTemp2+0x1c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	20000458 	.word	0x20000458

08001af4 <getTemp2>:
valueTypes getTemp2() {
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
    return Temp2.value;
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <getTemp2+0x14>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000458 	.word	0x20000458

08001b0c <setTemp3>:
bool setTemp3(valueTypes value) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
    Temp3.value = value;
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <setTemp3+0x1c>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	20000494 	.word	0x20000494

08001b2c <getTemp3>:
valueTypes getTemp3() {
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
    return Temp3.value;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <getTemp3+0x14>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000494 	.word	0x20000494

08001b44 <setTemp4>:
bool setTemp4(valueTypes value) {
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
    Temp4.value = value;
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <setTemp4+0x1c>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	200004d0 	.word	0x200004d0

08001b64 <getTemp4>:
valueTypes getTemp4() {
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
    return Temp4.value;
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <getTemp4+0x14>)
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	200004d0 	.word	0x200004d0

08001b7c <setTemp1_coeff>:

bool setTemp1_coeff(valueTypes value) {
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Temp1_coeff.valueAbsMax.val_float ||
 8001b84:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <setTemp1_coeff+0x48>)
 8001b8a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b96:	da09      	bge.n	8001bac <setTemp1_coeff+0x30>
       value.val_float <= Temp1_coeff.valueAbsMin.val_float) {
 8001b98:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <setTemp1_coeff+0x48>)
 8001b9e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Temp1_coeff.valueAbsMax.val_float ||
 8001ba2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	d801      	bhi.n	8001bb0 <setTemp1_coeff+0x34>
       return false;
 8001bac:	2300      	movs	r3, #0
 8001bae:	e003      	b.n	8001bb8 <setTemp1_coeff+0x3c>
    } else {
        Temp1_coeff.value = value;
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <setTemp1_coeff+0x48>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001bb6:	2301      	movs	r3, #1
    }
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	2000050c 	.word	0x2000050c

08001bc8 <getTemp1_coeff>:
valueTypes getTemp1_coeff(void) {
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
    return Temp1_coeff.value;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <getTemp1_coeff+0x14>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	2000050c 	.word	0x2000050c

08001be0 <setTemp2_coeff>:
bool setTemp2_coeff(valueTypes value) {
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Temp2_coeff.valueAbsMax.val_float ||
 8001be8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <setTemp2_coeff+0x48>)
 8001bee:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	da09      	bge.n	8001c10 <setTemp2_coeff+0x30>
       value.val_float <= Temp2_coeff.valueAbsMin.val_float) {
 8001bfc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <setTemp2_coeff+0x48>)
 8001c02:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Temp2_coeff.valueAbsMax.val_float ||
 8001c06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0e:	d801      	bhi.n	8001c14 <setTemp2_coeff+0x34>
       return false;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e003      	b.n	8001c1c <setTemp2_coeff+0x3c>
    } else {
        Temp2_coeff.value = value;
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <setTemp2_coeff+0x48>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001c1a:	2301      	movs	r3, #1
    }
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	20000548 	.word	0x20000548

08001c2c <getTemp2_coeff>:
valueTypes getTemp2_coeff(void) {
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
    return Temp2_coeff.value;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <getTemp2_coeff+0x14>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000548 	.word	0x20000548

08001c44 <setTemp3_coeff>:
bool setTemp3_coeff(valueTypes value) {
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Temp3_coeff.valueAbsMax.val_float ||
 8001c4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c50:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <setTemp3_coeff+0x48>)
 8001c52:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001c56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	da09      	bge.n	8001c74 <setTemp3_coeff+0x30>
       value.val_float <= Temp3_coeff.valueAbsMin.val_float) {
 8001c60:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <setTemp3_coeff+0x48>)
 8001c66:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Temp3_coeff.valueAbsMax.val_float ||
 8001c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c72:	d801      	bhi.n	8001c78 <setTemp3_coeff+0x34>
       return false;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e003      	b.n	8001c80 <setTemp3_coeff+0x3c>
    } else {
        Temp3_coeff.value = value;
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <setTemp3_coeff+0x48>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001c7e:	2301      	movs	r3, #1
    }
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	20000584 	.word	0x20000584

08001c90 <getTemp3_coeff>:
valueTypes getTemp3_coeff(void) {
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
    return Temp3_coeff.value;
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <getTemp3_coeff+0x14>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000584 	.word	0x20000584

08001ca8 <setTemp4_coeff>:
bool setTemp4_coeff(valueTypes value) {
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Temp4_coeff.valueAbsMax.val_float ||
 8001cb0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <setTemp4_coeff+0x48>)
 8001cb6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001cba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc2:	da09      	bge.n	8001cd8 <setTemp4_coeff+0x30>
       value.val_float <= Temp4_coeff.valueAbsMin.val_float) {
 8001cc4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <setTemp4_coeff+0x48>)
 8001cca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Temp4_coeff.valueAbsMax.val_float ||
 8001cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	d801      	bhi.n	8001cdc <setTemp4_coeff+0x34>
       return false;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e003      	b.n	8001ce4 <setTemp4_coeff+0x3c>
    } else {
        Temp4_coeff.value = value;
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <setTemp4_coeff+0x48>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001ce2:	2301      	movs	r3, #1
    }
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	200005c0 	.word	0x200005c0

08001cf4 <getTemp4_coeff>:
valueTypes getTemp4_coeff(void) {
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
    return Temp4_coeff.value;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <getTemp4_coeff+0x14>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	200005c0 	.word	0x200005c0

08001d0c <setLoadSelect1>:

bool setLoadSelect1(valueTypes state) {
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
    LoadSelect1.value = state;
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <setLoadSelect1+0x1c>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	200005fc 	.word	0x200005fc

08001d2c <getLoadSelect1>:
valueTypes getLoadSelect1(void) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
    return LoadSelect1.value;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <getLoadSelect1+0x14>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	200005fc 	.word	0x200005fc

08001d44 <setLoadSelect2>:
bool setLoadSelect2(valueTypes state) {
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
    LoadSelect2.value = state;
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <setLoadSelect2+0x1c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	20000638 	.word	0x20000638

08001d64 <getLoadSelect2>:
valueTypes getLoadSelect2(void) {
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
    return LoadSelect2.value;
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <getLoadSelect2+0x14>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000638 	.word	0x20000638

08001d7c <setModeSelect1>:

bool setModeSelect1(valueTypes state) {
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
    ModeSelect1.value = state;
 8001d84:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <setModeSelect1+0x1c>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001d8a:	2301      	movs	r3, #1
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	20000674 	.word	0x20000674

08001d9c <getModeSelect1>:
valueTypes getModeSelect1(void) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
    return ModeSelect1.value;
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <getModeSelect1+0x14>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000674 	.word	0x20000674

08001db4 <setModeSelect2>:
bool setModeSelect2(valueTypes state) {
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
    ModeSelect2.value = state;
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <setModeSelect2+0x1c>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001dc2:	2301      	movs	r3, #1
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	200006b0 	.word	0x200006b0

08001dd4 <getModeSelect2>:
valueTypes getModeSelect2(void) {
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
    return ModeSelect2.value;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <getModeSelect2+0x14>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	200006b0 	.word	0x200006b0

08001dec <setCh1_OnOff>:

bool setCh1_OnOff(valueTypes state) {
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
   Ch1_OnOff.value = state;
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <setCh1_OnOff+0x1c>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	200006ec 	.word	0x200006ec

08001e0c <getCh1_OnOff>:
valueTypes getCh1_OnOff(void) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
    return Ch1_OnOff.value;
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <getCh1_OnOff+0x14>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	200006ec 	.word	0x200006ec

08001e24 <setCh2_OnOff>:
bool setCh2_OnOff(valueTypes state) {
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
    Ch2_OnOff.value = state;
 8001e2c:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <setCh2_OnOff+0x1c>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	20000728 	.word	0x20000728

08001e44 <getCh2_OnOff>:
valueTypes getCh2_OnOff(void) {
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
    return Ch2_OnOff.value;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <getCh2_OnOff+0x14>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000728 	.word	0x20000728

08001e5c <setSourceSelect1>:

bool setSourceSelect1(valueTypes state) {
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
   SourceSelect1.value = state;
 8001e64:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <setSourceSelect1+0x1c>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001e6a:	2301      	movs	r3, #1
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	20000764 	.word	0x20000764

08001e7c <getSourceSelect1>:
valueTypes getSourceSelect1(void) {
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
    return SourceSelect1.value;
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <getSourceSelect1+0x14>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000764 	.word	0x20000764

08001e94 <setSourceSelect2>:
bool setSourceSelect2(valueTypes state) {
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
    SourceSelect2.value = state;
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <setSourceSelect2+0x1c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001ea2:	2301      	movs	r3, #1
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	200007a0 	.word	0x200007a0

08001eb4 <getSourceSelect2>:
valueTypes getSourceSelect2(void) {
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
    return SourceSelect2.value;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <getSourceSelect2+0x14>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	200007a0 	.word	0x200007a0

08001ecc <setPcoeff1Temp>:

bool setPcoeff1Temp(valueTypes value) {
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Pcoeff1Temp.valueAbsMax.val_float ||
 8001ed4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <setPcoeff1Temp+0x48>)
 8001eda:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001ede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	da09      	bge.n	8001efc <setPcoeff1Temp+0x30>
       value.val_float <= Pcoeff1Temp.valueAbsMin.val_float) {
 8001ee8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <setPcoeff1Temp+0x48>)
 8001eee:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Pcoeff1Temp.valueAbsMax.val_float ||
 8001ef2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efa:	d801      	bhi.n	8001f00 <setPcoeff1Temp+0x34>
       return false;
 8001efc:	2300      	movs	r3, #0
 8001efe:	e003      	b.n	8001f08 <setPcoeff1Temp+0x3c>
    } else {
        Pcoeff1Temp.value = value;
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <setPcoeff1Temp+0x48>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001f06:	2301      	movs	r3, #1
    }
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	200007dc 	.word	0x200007dc

08001f18 <getPcoeff1Temp>:
valueTypes getPcoeff1Temp(void) {
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
    return Pcoeff1Temp.value;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <getPcoeff1Temp+0x14>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	200007dc 	.word	0x200007dc

08001f30 <setPcoeff2Temp>:
bool setPcoeff2Temp(valueTypes value) {
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Pcoeff2Temp.valueAbsMax.val_float ||
 8001f38:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <setPcoeff2Temp+0x48>)
 8001f3e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001f42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4a:	da09      	bge.n	8001f60 <setPcoeff2Temp+0x30>
       value.val_float <= Pcoeff2Temp.valueAbsMin.val_float) {
 8001f4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <setPcoeff2Temp+0x48>)
 8001f52:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Pcoeff2Temp.valueAbsMax.val_float ||
 8001f56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5e:	d801      	bhi.n	8001f64 <setPcoeff2Temp+0x34>
       return false;
 8001f60:	2300      	movs	r3, #0
 8001f62:	e003      	b.n	8001f6c <setPcoeff2Temp+0x3c>
    } else {
        Pcoeff2Temp.value = value;
 8001f64:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <setPcoeff2Temp+0x48>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001f6a:	2301      	movs	r3, #1
    }
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	20000818 	.word	0x20000818

08001f7c <getPcoeff2Temp>:
valueTypes getPcoeff2Temp(void) {
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
    return Pcoeff2Temp.value;
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <getPcoeff2Temp+0x14>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000818 	.word	0x20000818

08001f94 <setIcoeff1Temp>:
bool setIcoeff1Temp(valueTypes value) {
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Icoeff1Temp.valueAbsMax.val_float ||
 8001f9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <setIcoeff1Temp+0x48>)
 8001fa2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fae:	da09      	bge.n	8001fc4 <setIcoeff1Temp+0x30>
       value.val_float <= Icoeff1Temp.valueAbsMin.val_float) {
 8001fb0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <setIcoeff1Temp+0x48>)
 8001fb6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Icoeff1Temp.valueAbsMax.val_float ||
 8001fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc2:	d801      	bhi.n	8001fc8 <setIcoeff1Temp+0x34>
       return false;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e003      	b.n	8001fd0 <setIcoeff1Temp+0x3c>
    } else {
        Icoeff1Temp.value = value;
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <setIcoeff1Temp+0x48>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001fce:	2301      	movs	r3, #1
    }
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	20000854 	.word	0x20000854

08001fe0 <getIcoeff1Temp>:
valueTypes getIcoeff1Temp(void) {
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
    return Icoeff1Temp.value;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <getIcoeff1Temp+0x14>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000854 	.word	0x20000854

08001ff8 <setIcoeff2Temp>:
bool setIcoeff2Temp(valueTypes value) {
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Icoeff2Temp.valueAbsMax.val_float ||
 8002000:	ed97 7a01 	vldr	s14, [r7, #4]
 8002004:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <setIcoeff2Temp+0x48>)
 8002006:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800200a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002012:	da09      	bge.n	8002028 <setIcoeff2Temp+0x30>
       value.val_float <= Icoeff2Temp.valueAbsMin.val_float) {
 8002014:	ed97 7a01 	vldr	s14, [r7, #4]
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <setIcoeff2Temp+0x48>)
 800201a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Icoeff2Temp.valueAbsMax.val_float ||
 800201e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002026:	d801      	bhi.n	800202c <setIcoeff2Temp+0x34>
       return false;
 8002028:	2300      	movs	r3, #0
 800202a:	e003      	b.n	8002034 <setIcoeff2Temp+0x3c>
    } else {
        Icoeff2Temp.value = value;
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <setIcoeff2Temp+0x48>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002032:	2301      	movs	r3, #1
    }
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	20000890 	.word	0x20000890

08002044 <getIcoeff2Temp>:
valueTypes getIcoeff2Temp(void) {
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
    return Icoeff2Temp.value;
 8002048:	4b03      	ldr	r3, [pc, #12]	; (8002058 <getIcoeff2Temp+0x14>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000890 	.word	0x20000890

0800205c <setDcoeff1Temp>:
bool setDcoeff1Temp(valueTypes value) {
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Dcoeff1Temp.valueAbsMax.val_float ||
 8002064:	ed97 7a01 	vldr	s14, [r7, #4]
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <setDcoeff1Temp+0x48>)
 800206a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800206e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002076:	da09      	bge.n	800208c <setDcoeff1Temp+0x30>
       value.val_float <= Dcoeff1Temp.valueAbsMin.val_float) {
 8002078:	ed97 7a01 	vldr	s14, [r7, #4]
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <setDcoeff1Temp+0x48>)
 800207e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Dcoeff1Temp.valueAbsMax.val_float ||
 8002082:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208a:	d801      	bhi.n	8002090 <setDcoeff1Temp+0x34>
       return false;
 800208c:	2300      	movs	r3, #0
 800208e:	e003      	b.n	8002098 <setDcoeff1Temp+0x3c>
    } else {
        Dcoeff1Temp.value = value;
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <setDcoeff1Temp+0x48>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002096:	2301      	movs	r3, #1
    }
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	200008cc 	.word	0x200008cc

080020a8 <getDcoeff1Temp>:
valueTypes getDcoeff1Temp(void) {
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
    return Dcoeff1Temp.value;
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <getDcoeff1Temp+0x14>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	200008cc 	.word	0x200008cc

080020c0 <setDcoeff2Temp>:
bool setDcoeff2Temp(valueTypes value) {
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Dcoeff2Temp.valueAbsMax.val_float ||
 80020c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <setDcoeff2Temp+0x48>)
 80020ce:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80020d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	da09      	bge.n	80020f0 <setDcoeff2Temp+0x30>
       value.val_float <= Dcoeff2Temp.valueAbsMin.val_float) {
 80020dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <setDcoeff2Temp+0x48>)
 80020e2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Dcoeff2Temp.valueAbsMax.val_float ||
 80020e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ee:	d801      	bhi.n	80020f4 <setDcoeff2Temp+0x34>
       return false;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e003      	b.n	80020fc <setDcoeff2Temp+0x3c>
    } else {
        Dcoeff2Temp.value = value;
 80020f4:	4a04      	ldr	r2, [pc, #16]	; (8002108 <setDcoeff2Temp+0x48>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80020fa:	2301      	movs	r3, #1
    }
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	20000908 	.word	0x20000908

0800210c <getDcoeff2Temp>:

valueTypes getDcoeff2Temp(void) {
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
    return Dcoeff2Temp.value;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <getDcoeff2Temp+0x14>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000908 	.word	0x20000908

08002124 <setPcoeff1Freq>:


bool setPcoeff1Freq(valueTypes value) {
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Pcoeff1Freq.valueAbsMax.val_float ||
 800212c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002130:	4b0e      	ldr	r3, [pc, #56]	; (800216c <setPcoeff1Freq+0x48>)
 8002132:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800213a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213e:	da09      	bge.n	8002154 <setPcoeff1Freq+0x30>
       value.val_float <= Pcoeff1Freq.valueAbsMin.val_float) {
 8002140:	ed97 7a01 	vldr	s14, [r7, #4]
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <setPcoeff1Freq+0x48>)
 8002146:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Pcoeff1Freq.valueAbsMax.val_float ||
 800214a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800214e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002152:	d801      	bhi.n	8002158 <setPcoeff1Freq+0x34>
       return false;
 8002154:	2300      	movs	r3, #0
 8002156:	e003      	b.n	8002160 <setPcoeff1Freq+0x3c>
    } else {
        Pcoeff1Freq.value = value;
 8002158:	4a04      	ldr	r2, [pc, #16]	; (800216c <setPcoeff1Freq+0x48>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800215e:	2301      	movs	r3, #1
    }
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	20000944 	.word	0x20000944

08002170 <getPcoeff1Freq>:
valueTypes getPcoeff1Freq(void) {
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
    return Pcoeff1Freq.value;
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <getPcoeff1Freq+0x14>)
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20000944 	.word	0x20000944

08002188 <setPcoeff2Freq>:
bool setPcoeff2Freq(valueTypes value) {
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Pcoeff2Freq.valueAbsMax.val_float ||
 8002190:	ed97 7a01 	vldr	s14, [r7, #4]
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <setPcoeff2Freq+0x48>)
 8002196:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800219a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a2:	da09      	bge.n	80021b8 <setPcoeff2Freq+0x30>
       value.val_float <= Pcoeff2Freq.valueAbsMin.val_float) {
 80021a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <setPcoeff2Freq+0x48>)
 80021aa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Pcoeff2Freq.valueAbsMax.val_float ||
 80021ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b6:	d801      	bhi.n	80021bc <setPcoeff2Freq+0x34>
       return false;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e003      	b.n	80021c4 <setPcoeff2Freq+0x3c>
    } else {
        Pcoeff2Freq.value = value;
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <setPcoeff2Freq+0x48>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80021c2:	2301      	movs	r3, #1
    }
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	20000980 	.word	0x20000980

080021d4 <getPcoeff2Freq>:
valueTypes getPcoeff2Freq(void) {
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
    return Pcoeff2Freq.value;
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <getPcoeff2Freq+0x14>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000980 	.word	0x20000980

080021ec <setIcoeff1Freq>:
bool setIcoeff1Freq(valueTypes value) {
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Icoeff1Freq.valueAbsMax.val_float ||
 80021f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80021f8:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <setIcoeff1Freq+0x48>)
 80021fa:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80021fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002206:	da09      	bge.n	800221c <setIcoeff1Freq+0x30>
       value.val_float <= Icoeff1Freq.valueAbsMin.val_float) {
 8002208:	ed97 7a01 	vldr	s14, [r7, #4]
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <setIcoeff1Freq+0x48>)
 800220e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Icoeff1Freq.valueAbsMax.val_float ||
 8002212:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221a:	d801      	bhi.n	8002220 <setIcoeff1Freq+0x34>
       return false;
 800221c:	2300      	movs	r3, #0
 800221e:	e003      	b.n	8002228 <setIcoeff1Freq+0x3c>
    } else {
        Icoeff1Freq.value = value;
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <setIcoeff1Freq+0x48>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002226:	2301      	movs	r3, #1
    }
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	200009bc 	.word	0x200009bc

08002238 <getIcoeff1Freq>:
valueTypes getIcoeff1Freq(void) {
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
    return Icoeff1Freq.value;
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <getIcoeff1Freq+0x14>)
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	200009bc 	.word	0x200009bc

08002250 <setIcoeff2Freq>:
bool setIcoeff2Freq(valueTypes value) {
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Icoeff2Freq.valueAbsMax.val_float ||
 8002258:	ed97 7a01 	vldr	s14, [r7, #4]
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <setIcoeff2Freq+0x48>)
 800225e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002262:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226a:	da09      	bge.n	8002280 <setIcoeff2Freq+0x30>
       value.val_float <= Icoeff2Freq.valueAbsMin.val_float) {
 800226c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <setIcoeff2Freq+0x48>)
 8002272:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Icoeff2Freq.valueAbsMax.val_float ||
 8002276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	d801      	bhi.n	8002284 <setIcoeff2Freq+0x34>
       return false;
 8002280:	2300      	movs	r3, #0
 8002282:	e003      	b.n	800228c <setIcoeff2Freq+0x3c>
    } else {
        Icoeff2Freq.value = value;
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <setIcoeff2Freq+0x48>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800228a:	2301      	movs	r3, #1
    }
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	200009f8 	.word	0x200009f8

0800229c <getIcoeff2Freq>:
valueTypes getIcoeff2Freq(void) {
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
    return Icoeff2Freq.value;
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <getIcoeff2Freq+0x14>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	200009f8 	.word	0x200009f8

080022b4 <setDcoeff1Freq>:
bool setDcoeff1Freq(valueTypes value) {
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Dcoeff1Freq.valueAbsMax.val_float ||
 80022bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80022c0:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <setDcoeff1Freq+0x48>)
 80022c2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80022c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ce:	da09      	bge.n	80022e4 <setDcoeff1Freq+0x30>
       value.val_float <= Dcoeff1Freq.valueAbsMin.val_float) {
 80022d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <setDcoeff1Freq+0x48>)
 80022d6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Dcoeff1Freq.valueAbsMax.val_float ||
 80022da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e2:	d801      	bhi.n	80022e8 <setDcoeff1Freq+0x34>
       return false;
 80022e4:	2300      	movs	r3, #0
 80022e6:	e003      	b.n	80022f0 <setDcoeff1Freq+0x3c>
    } else {
        Dcoeff1Freq.value = value;
 80022e8:	4a04      	ldr	r2, [pc, #16]	; (80022fc <setDcoeff1Freq+0x48>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80022ee:	2301      	movs	r3, #1
    }
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	20000a34 	.word	0x20000a34

08002300 <getDcoeff1Freq>:
valueTypes getDcoeff1Freq(void) {
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
    return Dcoeff1Freq.value;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <getDcoeff1Freq+0x14>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000a34 	.word	0x20000a34

08002318 <setDcoeff2Freq>:
bool setDcoeff2Freq(valueTypes value) {
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Dcoeff2Freq.valueAbsMax.val_float ||
 8002320:	ed97 7a01 	vldr	s14, [r7, #4]
 8002324:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <setDcoeff2Freq+0x48>)
 8002326:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800232a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800232e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002332:	da09      	bge.n	8002348 <setDcoeff2Freq+0x30>
       value.val_float <= Dcoeff2Freq.valueAbsMin.val_float) {
 8002334:	ed97 7a01 	vldr	s14, [r7, #4]
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <setDcoeff2Freq+0x48>)
 800233a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Dcoeff2Freq.valueAbsMax.val_float ||
 800233e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002346:	d801      	bhi.n	800234c <setDcoeff2Freq+0x34>
       return false;
 8002348:	2300      	movs	r3, #0
 800234a:	e003      	b.n	8002354 <setDcoeff2Freq+0x3c>
    } else {
        Dcoeff2Freq.value = value;
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <setDcoeff2Freq+0x48>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002352:	2301      	movs	r3, #1
    }
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	20000a70 	.word	0x20000a70

08002364 <getDcoeff2Freq>:

valueTypes getDcoeff2Freq(void) {
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
    return Dcoeff2Freq.value;
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <getDcoeff2Freq+0x14>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000a70 	.word	0x20000a70

0800237c <setI1Set>:


bool setI1Set(valueTypes value) {
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I1Set.valueAbsMax.val_float ||
 8002384:	ed97 7a01 	vldr	s14, [r7, #4]
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <setI1Set+0x48>)
 800238a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800238e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002396:	da09      	bge.n	80023ac <setI1Set+0x30>
       value.val_float <= I1Set.valueAbsMin.val_float) {
 8002398:	ed97 7a01 	vldr	s14, [r7, #4]
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <setI1Set+0x48>)
 800239e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I1Set.valueAbsMax.val_float ||
 80023a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023aa:	d801      	bhi.n	80023b0 <setI1Set+0x34>
       return false;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e003      	b.n	80023b8 <setI1Set+0x3c>
    } else {
       I1Set.value = value;
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <setI1Set+0x48>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
       return true;
 80023b6:	2301      	movs	r3, #1
    }
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	20000aac 	.word	0x20000aac

080023c8 <getI1Set>:
valueTypes getI1Set(void) {
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
    return I1Set.value;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <getI1Set+0x14>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000aac 	.word	0x20000aac

080023e0 <setI2Set>:
bool setI2Set(valueTypes value) {
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I2Set.valueAbsMax.val_float ||
 80023e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80023ec:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <setI2Set+0x48>)
 80023ee:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80023f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fa:	da09      	bge.n	8002410 <setI2Set+0x30>
       value.val_float <= I2Set.valueAbsMin.val_float) {
 80023fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <setI2Set+0x48>)
 8002402:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I2Set.valueAbsMax.val_float ||
 8002406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800240a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240e:	d801      	bhi.n	8002414 <setI2Set+0x34>
       return false;
 8002410:	2300      	movs	r3, #0
 8002412:	e003      	b.n	800241c <setI2Set+0x3c>
    } else {
       I2Set.value = value;
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <setI2Set+0x48>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
       return true;
 800241a:	2301      	movs	r3, #1
    }
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	20000ae8 	.word	0x20000ae8

0800242c <getI2Set>:
valueTypes getI2Set(void) {
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
    return I2Set.value;
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <getI2Set+0x14>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000ae8 	.word	0x20000ae8

08002444 <setGate1A_OnOff>:

bool setGate1A_OnOff(valueTypes value) {
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	Gate1A_OnOff.value = value;
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <setGate1A_OnOff+0x1c>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8002452:	2301      	movs	r3, #1
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	20000b24 	.word	0x20000b24

08002464 <getGate1A_OnOff>:
valueTypes getGate1A_OnOff(void) {
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
    return Gate1A_OnOff.value;
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <getGate1A_OnOff+0x14>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000b24 	.word	0x20000b24

0800247c <setGate1B_OnOff>:
bool setGate1B_OnOff(valueTypes value) {
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
    Gate1B_OnOff.value = value;
 8002484:	4a04      	ldr	r2, [pc, #16]	; (8002498 <setGate1B_OnOff+0x1c>)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 800248a:	2301      	movs	r3, #1
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	20000b60 	.word	0x20000b60

0800249c <getGate1B_OnOff>:
valueTypes getGate1B_OnOff(void) {
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
    return Gate1B_OnOff.value;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <getGate1B_OnOff+0x14>)
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000b60 	.word	0x20000b60

080024b4 <setGate2A_OnOff>:
bool setGate2A_OnOff(valueTypes value) {
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	Gate2A_OnOff.value = value;
 80024bc:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <setGate2A_OnOff+0x1c>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80024c2:	2301      	movs	r3, #1
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	20000b9c 	.word	0x20000b9c

080024d4 <getGate2A_OnOff>:
valueTypes getGate2A_OnOff(void) {
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
    return Gate2A_OnOff.value;
 80024d8:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <getGate2A_OnOff+0x14>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000b9c 	.word	0x20000b9c

080024ec <setGate2B_OnOff>:
bool setGate2B_OnOff(valueTypes value) {
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
    Gate2B_OnOff.value = value;
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <setGate2B_OnOff+0x1c>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80024fa:	2301      	movs	r3, #1
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	20000bd8 	.word	0x20000bd8

0800250c <getGate2B_OnOff>:
valueTypes getGate2B_OnOff(void) {
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
    return Gate2B_OnOff.value;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <getGate2B_OnOff+0x14>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000bd8 	.word	0x20000bd8

08002524 <setGateH1A>:

bool setGateH1A(valueTypes value) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	GateH1A.value = value;
 800252c:	4a08      	ldr	r2, [pc, #32]	; (8002550 <setGateH1A+0x2c>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
	HAL_GPIO_WritePin(GateH1_A_GPIO_Port, GateH1_A_Pin, !value.val_bool);
 8002532:	793b      	ldrb	r3, [r7, #4]
 8002534:	f083 0301 	eor.w	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	2110      	movs	r1, #16
 800253e:	4805      	ldr	r0, [pc, #20]	; (8002554 <setGateH1A+0x30>)
 8002540:	f003 fe00 	bl	8006144 <HAL_GPIO_WritePin>
    return true;
 8002544:	2301      	movs	r3, #1
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000c14 	.word	0x20000c14
 8002554:	40020800 	.word	0x40020800

08002558 <getGateH1A>:
valueTypes getGateH1A(void) {
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
    return GateH1A.value;
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <getGateH1A+0x14>)
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000c14 	.word	0x20000c14

08002570 <setGateH1B>:
bool setGateH1B(valueTypes value) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
    GateH1B.value = value;
 8002578:	4a08      	ldr	r2, [pc, #32]	; (800259c <setGateH1B+0x2c>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
    HAL_GPIO_WritePin(GateH1_B_GPIO_Port, GateH1_B_Pin, !value.val_bool);
 800257e:	793b      	ldrb	r3, [r7, #4]
 8002580:	f083 0301 	eor.w	r3, r3, #1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	2120      	movs	r1, #32
 800258a:	4805      	ldr	r0, [pc, #20]	; (80025a0 <setGateH1B+0x30>)
 800258c:	f003 fdda 	bl	8006144 <HAL_GPIO_WritePin>
    return true;
 8002590:	2301      	movs	r3, #1
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000c50 	.word	0x20000c50
 80025a0:	40020800 	.word	0x40020800

080025a4 <getGateH1B>:
valueTypes getGateH1B(void) {
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
    return GateH1B.value;
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <getGateH1B+0x14>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000c50 	.word	0x20000c50

080025bc <setGateH2A>:
bool setGateH2A(valueTypes value) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	GateH2A.value = value;
 80025c4:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <setGateH2A+0x2c>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
	HAL_GPIO_WritePin(GateH2_A_GPIO_Port, GateH2_A_Pin, !value.val_bool);
 80025ca:	793b      	ldrb	r3, [r7, #4]
 80025cc:	f083 0301 	eor.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025d8:	4804      	ldr	r0, [pc, #16]	; (80025ec <setGateH2A+0x30>)
 80025da:	f003 fdb3 	bl	8006144 <HAL_GPIO_WritePin>
    return true;
 80025de:	2301      	movs	r3, #1
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000c8c 	.word	0x20000c8c
 80025ec:	40020c00 	.word	0x40020c00

080025f0 <getGateH2A>:
valueTypes getGateH2A(void) {
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
    return GateH2A.value;
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <getGateH2A+0x14>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000c8c 	.word	0x20000c8c

08002608 <setGateH2B>:
bool setGateH2B(valueTypes value) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
    GateH2B.value = value;
 8002610:	4a08      	ldr	r2, [pc, #32]	; (8002634 <setGateH2B+0x2c>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
    HAL_GPIO_WritePin(GateH2_B_GPIO_Port, GateH2_B_Pin, !value.val_bool);
 8002616:	793b      	ldrb	r3, [r7, #4]
 8002618:	f083 0301 	eor.w	r3, r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002624:	4804      	ldr	r0, [pc, #16]	; (8002638 <setGateH2B+0x30>)
 8002626:	f003 fd8d 	bl	8006144 <HAL_GPIO_WritePin>
    return true;
 800262a:	2301      	movs	r3, #1
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000cc8 	.word	0x20000cc8
 8002638:	40020c00 	.word	0x40020c00

0800263c <getGateH2B>:
valueTypes getGateH2B(void) {
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
    return GateH2B.value;
 8002640:	4b03      	ldr	r3, [pc, #12]	; (8002650 <getGateH2B+0x14>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000cc8 	.word	0x20000cc8

08002654 <setPWM_CH1>:

bool setPWM_CH1(valueTypes value) {
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
    if(value.val_float >= PWM_CH1.valueAbsMax.val_float ||
 800265c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <setPWM_CH1+0x48>)
 8002662:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	da09      	bge.n	8002684 <setPWM_CH1+0x30>
       value.val_float <= PWM_CH1.valueAbsMin.val_float) {
 8002670:	ed97 7a01 	vldr	s14, [r7, #4]
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <setPWM_CH1+0x48>)
 8002676:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= PWM_CH1.valueAbsMax.val_float ||
 800267a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800267e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002682:	d801      	bhi.n	8002688 <setPWM_CH1+0x34>
       return false;
 8002684:	2300      	movs	r3, #0
 8002686:	e003      	b.n	8002690 <setPWM_CH1+0x3c>
    } else {
        PWM_CH1.value = value;
 8002688:	4a04      	ldr	r2, [pc, #16]	; (800269c <setPWM_CH1+0x48>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800268e:	2301      	movs	r3, #1
    }
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	20000d04 	.word	0x20000d04

080026a0 <getPWM_CH1>:
valueTypes getPWM_CH1(void) {
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
    return PWM_CH1.value;
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <getPWM_CH1+0x14>)
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000d04 	.word	0x20000d04

080026b8 <setPWM_CH2>:

bool setPWM_CH2(valueTypes value) {
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
    if(value.val_float >= PWM_CH2.valueAbsMax.val_float ||
 80026c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80026c4:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <setPWM_CH2+0x48>)
 80026c6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80026ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d2:	da09      	bge.n	80026e8 <setPWM_CH2+0x30>
       value.val_float <= PWM_CH2.valueAbsMin.val_float) {
 80026d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <setPWM_CH2+0x48>)
 80026da:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= PWM_CH2.valueAbsMax.val_float ||
 80026de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e6:	d801      	bhi.n	80026ec <setPWM_CH2+0x34>
       return false;
 80026e8:	2300      	movs	r3, #0
 80026ea:	e003      	b.n	80026f4 <setPWM_CH2+0x3c>
    } else {
    	PWM_CH1.value = value;
 80026ec:	4a05      	ldr	r2, [pc, #20]	; (8002704 <setPWM_CH2+0x4c>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80026f2:	2301      	movs	r3, #1
    }
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	20000d40 	.word	0x20000d40
 8002704:	20000d04 	.word	0x20000d04

08002708 <getPWM_CH2>:
valueTypes getPWM_CH2(void) {
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
    return PWM_CH2.value;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <getPWM_CH2+0x14>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000d40 	.word	0x20000d40

08002720 <setCH1_Polarity>:

bool setCH1_Polarity(valueTypes value) {
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	CH1_Polarity.value = value;
 8002728:	4a04      	ldr	r2, [pc, #16]	; (800273c <setCH1_Polarity+0x1c>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
	return true;
 800272e:	2301      	movs	r3, #1
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	20000d7c 	.word	0x20000d7c

08002740 <getCH1_Polarity>:

valueTypes getCH1_Polarity() {
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
	return CH1_Polarity.value;
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <getCH1_Polarity+0x14>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000d7c 	.word	0x20000d7c

08002758 <setCH2_Polarity>:

bool setCH2_Polarity(valueTypes value) {
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	CH2_Polarity.value = value;
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <setCH2_Polarity+0x1c>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
	return true;
 8002766:	2301      	movs	r3, #1
}
 8002768:	4618      	mov	r0, r3
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	20000db8 	.word	0x20000db8

08002778 <getCH2_Polarity>:

valueTypes getCH2_Polarity() {
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
	return CH2_Polarity.value;
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <getCH2_Polarity+0x14>)
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000db8 	.word	0x20000db8

08002790 <setFreq>:

bool setFreq(valueTypes value) {
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
   Freq.value = value;
 8002798:	4a04      	ldr	r2, [pc, #16]	; (80027ac <setFreq+0x1c>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
   return true;
 800279e:	2301      	movs	r3, #1
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	20000df4 	.word	0x20000df4

080027b0 <getFreq>:
valueTypes getFreq() {
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
    return Freq.value;
 80027b4:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <getFreq+0x14>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000df4 	.word	0x20000df4

080027c8 <commandParamList>:


void commandParamList() {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af02      	add	r7, sp, #8
	for(int i = 0; i < PARAMS_COUNT; i++) {
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	e029      	b.n	8002828 <commandParamList+0x60>
		if(params[i] == 0) {
 80027d4:	4a18      	ldr	r2, [pc, #96]	; (8002838 <commandParamList+0x70>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01f      	beq.n	8002820 <commandParamList+0x58>
			continue;
		} else {
			sprintf(TXbuffer, "%u:%s:%s", params[i]->commandNumber, typeNames[params[i]->type], params[i]->commandDescription);
 80027e0:	4a15      	ldr	r2, [pc, #84]	; (8002838 <commandParamList+0x70>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	4a12      	ldr	r2, [pc, #72]	; (8002838 <commandParamList+0x70>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <commandParamList+0x74>)
 80027fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002800:	490d      	ldr	r1, [pc, #52]	; (8002838 <commandParamList+0x70>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002808:	3302      	adds	r3, #2
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	4613      	mov	r3, r2
 800280e:	4602      	mov	r2, r0
 8002810:	490b      	ldr	r1, [pc, #44]	; (8002840 <commandParamList+0x78>)
 8002812:	480c      	ldr	r0, [pc, #48]	; (8002844 <commandParamList+0x7c>)
 8002814:	f007 fc5a 	bl	800a0cc <siprintf>
			UARTtransmit(TXbuffer);
 8002818:	480a      	ldr	r0, [pc, #40]	; (8002844 <commandParamList+0x7c>)
 800281a:	f000 f89f 	bl	800295c <UARTtransmit>
 800281e:	e000      	b.n	8002822 <commandParamList+0x5a>
			continue;
 8002820:	bf00      	nop
	for(int i = 0; i < PARAMS_COUNT; i++) {
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3301      	adds	r3, #1
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b63      	cmp	r3, #99	; 0x63
 800282c:	ddd2      	ble.n	80027d4 <commandParamList+0xc>
		}
	}
	return;
 800282e:	bf00      	nop
}
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	200011a8 	.word	0x200011a8
 800283c:	20000000 	.word	0x20000000
 8002840:	0800e208 	.word	0x0800e208
 8002844:	20001128 	.word	0x20001128

08002848 <str_split>:
 */

#include "UARTCommunication.h"

char** str_split(char* a_str, const char a_delim)
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b08b      	sub	sp, #44	; 0x2c
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	70fb      	strb	r3, [r7, #3]
    char** result    = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	613b      	str	r3, [r7, #16]
    size_t count     = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
    char* tmp        = a_str;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	623b      	str	r3, [r7, #32]
    char* last_comma = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
    char delim[2];
    delim[0] = a_delim;
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	733b      	strb	r3, [r7, #12]
    delim[1] = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	737b      	strb	r3, [r7, #13]

    /* Count how many elements will be extracted. */
    while (*tmp)
 800286c:	e00c      	b.n	8002888 <str_split+0x40>
    {
        if (a_delim == *tmp)
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	429a      	cmp	r2, r3
 8002876:	d104      	bne.n	8002882 <str_split+0x3a>
        {
            count++;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	3301      	adds	r3, #1
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
            last_comma = tmp;
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	61fb      	str	r3, [r7, #28]
        }
        tmp++;
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	3301      	adds	r3, #1
 8002886:	623b      	str	r3, [r7, #32]
    while (*tmp)
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1ee      	bne.n	800286e <str_split+0x26>
    }

    /* Add space for trailing token. */
    count += last_comma < (a_str + strlen(a_str) - 1);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7fd fca7 	bl	80001e4 <strlen>
 8002896:	4603      	mov	r3, r0
 8002898:	3b01      	subs	r3, #1
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	bf34      	ite	cc
 80028a4:	2301      	movcc	r3, #1
 80028a6:	2300      	movcs	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	4413      	add	r3, r2
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Add space for terminating null string so caller
       knows where the list of returned strings ends. */
    count++;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	3301      	adds	r3, #1
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24

    result = malloc(sizeof(char*) * count);
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4618      	mov	r0, r3
 80028be:	f006 fb0d 	bl	8008edc <malloc>
 80028c2:	4603      	mov	r3, r0
 80028c4:	613b      	str	r3, [r7, #16]

    if (result)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d039      	beq.n	8002940 <str_split+0xf8>
    {
        size_t idx  = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61bb      	str	r3, [r7, #24]
        char* token = strtok(a_str, delim);
 80028d0:	f107 030c 	add.w	r3, r7, #12
 80028d4:	4619      	mov	r1, r3
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f008 fad2 	bl	800ae80 <strtok>
 80028dc:	6178      	str	r0, [r7, #20]

        while (token)
 80028de:	e01b      	b.n	8002918 <str_split+0xd0>
        {
            assert(idx < count);
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d305      	bcc.n	80028f4 <str_split+0xac>
 80028e8:	4b18      	ldr	r3, [pc, #96]	; (800294c <str_split+0x104>)
 80028ea:	4a19      	ldr	r2, [pc, #100]	; (8002950 <str_split+0x108>)
 80028ec:	212f      	movs	r1, #47	; 0x2f
 80028ee:	4819      	ldr	r0, [pc, #100]	; (8002954 <str_split+0x10c>)
 80028f0:	f006 fa9a 	bl	8008e28 <__assert_func>
            *(result + idx++) = strdup(token);
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	61ba      	str	r2, [r7, #24]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	18d4      	adds	r4, r2, r3
 8002900:	6978      	ldr	r0, [r7, #20]
 8002902:	f007 fc75 	bl	800a1f0 <strdup>
 8002906:	4603      	mov	r3, r0
 8002908:	6023      	str	r3, [r4, #0]
            token = strtok(0, delim);
 800290a:	f107 030c 	add.w	r3, r7, #12
 800290e:	4619      	mov	r1, r3
 8002910:	2000      	movs	r0, #0
 8002912:	f008 fab5 	bl	800ae80 <strtok>
 8002916:	6178      	str	r0, [r7, #20]
        while (token)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1e0      	bne.n	80028e0 <str_split+0x98>
        }
        assert(idx == count - 1);
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	3b01      	subs	r3, #1
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	429a      	cmp	r2, r3
 8002926:	d005      	beq.n	8002934 <str_split+0xec>
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <str_split+0x110>)
 800292a:	4a09      	ldr	r2, [pc, #36]	; (8002950 <str_split+0x108>)
 800292c:	2133      	movs	r1, #51	; 0x33
 800292e:	4809      	ldr	r0, [pc, #36]	; (8002954 <str_split+0x10c>)
 8002930:	f006 fa7a 	bl	8008e28 <__assert_func>
        *(result + idx) = 0;
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
    }

    return result;
 8002940:	693b      	ldr	r3, [r7, #16]
}
 8002942:	4618      	mov	r0, r3
 8002944:	372c      	adds	r7, #44	; 0x2c
 8002946:	46bd      	mov	sp, r7
 8002948:	bd90      	pop	{r4, r7, pc}
 800294a:	bf00      	nop
 800294c:	0800e214 	.word	0x0800e214
 8002950:	0800e360 	.word	0x0800e360
 8002954:	0800e220 	.word	0x0800e220
 8002958:	0800e240 	.word	0x0800e240

0800295c <UARTtransmit>:

void UARTtransmit(char* string) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	uint16_t size = sprintf(TXbuffer, "%s%c",string, EOL);
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <UARTtransmit+0x30>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4909      	ldr	r1, [pc, #36]	; (8002990 <UARTtransmit+0x34>)
 800296c:	4809      	ldr	r0, [pc, #36]	; (8002994 <UARTtransmit+0x38>)
 800296e:	f007 fbad 	bl	800a0cc <siprintf>
 8002972:	4603      	mov	r3, r0
 8002974:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, TXbuffer, size, TXtimeout);
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <UARTtransmit+0x3c>)
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	89fa      	ldrh	r2, [r7, #14]
 800297c:	4905      	ldr	r1, [pc, #20]	; (8002994 <UARTtransmit+0x38>)
 800297e:	4807      	ldr	r0, [pc, #28]	; (800299c <UARTtransmit+0x40>)
 8002980:	f005 fa27 	bl	8007dd2 <HAL_UART_Transmit>
}
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000e31 	.word	0x20000e31
 8002990:	0800e254 	.word	0x0800e254
 8002994:	20001720 	.word	0x20001720
 8002998:	20000e32 	.word	0x20000e32
 800299c:	20001af4 	.word	0x20001af4

080029a0 <UARTget>:

bool UARTget(uint16_t com) {
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	4603      	mov	r3, r0
 80029a8:	80fb      	strh	r3, [r7, #6]
	if(params[paramTable[com]-1]->get) {
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	4a4f      	ldr	r2, [pc, #316]	; (8002aec <UARTget+0x14c>)
 80029ae:	5cd3      	ldrb	r3, [r2, r3]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	4a4f      	ldr	r2, [pc, #316]	; (8002af0 <UARTget+0x150>)
 80029b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 808b 	beq.w	8002ad6 <UARTget+0x136>
		valueTypes value = params[paramTable[com]-1]->get();
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	4a4a      	ldr	r2, [pc, #296]	; (8002aec <UARTget+0x14c>)
 80029c4:	5cd3      	ldrb	r3, [r2, r3]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	4a49      	ldr	r2, [pc, #292]	; (8002af0 <UARTget+0x150>)
 80029ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	4798      	blx	r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	60fb      	str	r3, [r7, #12]
		switch(params[paramTable[com]-1]->type) {
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	4a44      	ldr	r2, [pc, #272]	; (8002aec <UARTget+0x14c>)
 80029da:	5cd3      	ldrb	r3, [r2, r3]
 80029dc:	3b01      	subs	r3, #1
 80029de:	4a44      	ldr	r2, [pc, #272]	; (8002af0 <UARTget+0x150>)
 80029e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e8:	2b07      	cmp	r3, #7
 80029ea:	d872      	bhi.n	8002ad2 <UARTget+0x132>
 80029ec:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <UARTget+0x54>)
 80029ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f2:	bf00      	nop
 80029f4:	08002a15 	.word	0x08002a15
 80029f8:	08002a29 	.word	0x08002a29
 80029fc:	08002a3d 	.word	0x08002a3d
 8002a00:	08002a51 	.word	0x08002a51
 8002a04:	08002a67 	.word	0x08002a67
 8002a08:	08002a7d 	.word	0x08002a7d
 8002a0c:	08002a91 	.word	0x08002a91
 8002a10:	08002ab5 	.word	0x08002ab5
		case UINT8_T:
			sprintf(TXbuffer, "$%u:%u",com, value.val_uint8_t);
 8002a14:	88fa      	ldrh	r2, [r7, #6]
 8002a16:	7b3b      	ldrb	r3, [r7, #12]
 8002a18:	4936      	ldr	r1, [pc, #216]	; (8002af4 <UARTget+0x154>)
 8002a1a:	4837      	ldr	r0, [pc, #220]	; (8002af8 <UARTget+0x158>)
 8002a1c:	f007 fb56 	bl	800a0cc <siprintf>
			UARTtransmit(TXbuffer);
 8002a20:	4835      	ldr	r0, [pc, #212]	; (8002af8 <UARTget+0x158>)
 8002a22:	f7ff ff9b 	bl	800295c <UARTtransmit>
			break;
 8002a26:	e054      	b.n	8002ad2 <UARTget+0x132>
		case UINT16_T:
				sprintf(TXbuffer, "$%u:%u",com,value.val_uint16_t);
 8002a28:	88fa      	ldrh	r2, [r7, #6]
 8002a2a:	89bb      	ldrh	r3, [r7, #12]
 8002a2c:	4931      	ldr	r1, [pc, #196]	; (8002af4 <UARTget+0x154>)
 8002a2e:	4832      	ldr	r0, [pc, #200]	; (8002af8 <UARTget+0x158>)
 8002a30:	f007 fb4c 	bl	800a0cc <siprintf>
				UARTtransmit(TXbuffer);
 8002a34:	4830      	ldr	r0, [pc, #192]	; (8002af8 <UARTget+0x158>)
 8002a36:	f7ff ff91 	bl	800295c <UARTtransmit>
				break;
 8002a3a:	e04a      	b.n	8002ad2 <UARTget+0x132>
		case UINT32_T:
				sprintf(TXbuffer, "$%u:%u",com, value.val_uint32_t);
 8002a3c:	88fa      	ldrh	r2, [r7, #6]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	492c      	ldr	r1, [pc, #176]	; (8002af4 <UARTget+0x154>)
 8002a42:	482d      	ldr	r0, [pc, #180]	; (8002af8 <UARTget+0x158>)
 8002a44:	f007 fb42 	bl	800a0cc <siprintf>
				UARTtransmit(TXbuffer);
 8002a48:	482b      	ldr	r0, [pc, #172]	; (8002af8 <UARTget+0x158>)
 8002a4a:	f7ff ff87 	bl	800295c <UARTtransmit>
				break;
 8002a4e:	e040      	b.n	8002ad2 <UARTget+0x132>
		case INT8_T:
				sprintf(TXbuffer, "$%u:%d",com, value.val_int8_t);
 8002a50:	88fa      	ldrh	r2, [r7, #6]
 8002a52:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002a56:	4929      	ldr	r1, [pc, #164]	; (8002afc <UARTget+0x15c>)
 8002a58:	4827      	ldr	r0, [pc, #156]	; (8002af8 <UARTget+0x158>)
 8002a5a:	f007 fb37 	bl	800a0cc <siprintf>
				UARTtransmit(TXbuffer);
 8002a5e:	4826      	ldr	r0, [pc, #152]	; (8002af8 <UARTget+0x158>)
 8002a60:	f7ff ff7c 	bl	800295c <UARTtransmit>
				break;
 8002a64:	e035      	b.n	8002ad2 <UARTget+0x132>
		case INT16_T:
				sprintf(TXbuffer, "$%u:%d",com, value.val_int16_t);
 8002a66:	88fa      	ldrh	r2, [r7, #6]
 8002a68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a6c:	4923      	ldr	r1, [pc, #140]	; (8002afc <UARTget+0x15c>)
 8002a6e:	4822      	ldr	r0, [pc, #136]	; (8002af8 <UARTget+0x158>)
 8002a70:	f007 fb2c 	bl	800a0cc <siprintf>
				UARTtransmit(TXbuffer);
 8002a74:	4820      	ldr	r0, [pc, #128]	; (8002af8 <UARTget+0x158>)
 8002a76:	f7ff ff71 	bl	800295c <UARTtransmit>
				break;
 8002a7a:	e02a      	b.n	8002ad2 <UARTget+0x132>
		case INT32_T:
				sprintf(TXbuffer, "$%u:%d",com, value.val_int32_t);
 8002a7c:	88fa      	ldrh	r2, [r7, #6]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	491e      	ldr	r1, [pc, #120]	; (8002afc <UARTget+0x15c>)
 8002a82:	481d      	ldr	r0, [pc, #116]	; (8002af8 <UARTget+0x158>)
 8002a84:	f007 fb22 	bl	800a0cc <siprintf>
				UARTtransmit(TXbuffer);
 8002a88:	481b      	ldr	r0, [pc, #108]	; (8002af8 <UARTget+0x158>)
 8002a8a:	f7ff ff67 	bl	800295c <UARTtransmit>
				break;
 8002a8e:	e020      	b.n	8002ad2 <UARTget+0x132>
		case FLOAT:
				sprintf(TXbuffer, "$%u:%f",com, value.val_float);
 8002a90:	88fc      	ldrh	r4, [r7, #6]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fd fd67 	bl	8000568 <__aeabi_f2d>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	e9cd 2300 	strd	r2, r3, [sp]
 8002aa2:	4622      	mov	r2, r4
 8002aa4:	4916      	ldr	r1, [pc, #88]	; (8002b00 <UARTget+0x160>)
 8002aa6:	4814      	ldr	r0, [pc, #80]	; (8002af8 <UARTget+0x158>)
 8002aa8:	f007 fb10 	bl	800a0cc <siprintf>
				UARTtransmit(TXbuffer);
 8002aac:	4812      	ldr	r0, [pc, #72]	; (8002af8 <UARTget+0x158>)
 8002aae:	f7ff ff55 	bl	800295c <UARTtransmit>
				break;
 8002ab2:	e00e      	b.n	8002ad2 <UARTget+0x132>
		case BOOL:
				sprintf(TXbuffer, "$%u:%s",com, value.val_bool ? "true" : "false");
 8002ab4:	88fa      	ldrh	r2, [r7, #6]
 8002ab6:	7b3b      	ldrb	r3, [r7, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <UARTget+0x120>
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <UARTget+0x164>)
 8002abe:	e000      	b.n	8002ac2 <UARTget+0x122>
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <UARTget+0x168>)
 8002ac2:	4912      	ldr	r1, [pc, #72]	; (8002b0c <UARTget+0x16c>)
 8002ac4:	480c      	ldr	r0, [pc, #48]	; (8002af8 <UARTget+0x158>)
 8002ac6:	f007 fb01 	bl	800a0cc <siprintf>
				UARTtransmit(TXbuffer);
 8002aca:	480b      	ldr	r0, [pc, #44]	; (8002af8 <UARTget+0x158>)
 8002acc:	f7ff ff46 	bl	800295c <UARTtransmit>
				break;
 8002ad0:	bf00      	nop
		}
		return true;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e005      	b.n	8002ae2 <UARTget+0x142>
	}
	else {
		UARTtransmitNum(com, "Error\%no get function");
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	490d      	ldr	r1, [pc, #52]	; (8002b10 <UARTget+0x170>)
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f8e0 	bl	8002ca0 <UARTtransmitNum>
		return false;
 8002ae0:	2300      	movs	r3, #0
	}
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd90      	pop	{r4, r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20001338 	.word	0x20001338
 8002af0:	200011a8 	.word	0x200011a8
 8002af4:	0800e25c 	.word	0x0800e25c
 8002af8:	20001720 	.word	0x20001720
 8002afc:	0800e264 	.word	0x0800e264
 8002b00:	0800e26c 	.word	0x0800e26c
 8002b04:	0800e274 	.word	0x0800e274
 8002b08:	0800e27c 	.word	0x0800e27c
 8002b0c:	0800e284 	.word	0x0800e284
 8002b10:	0800e28c 	.word	0x0800e28c

08002b14 <UARTset>:

bool UARTset(uint16_t com, char* str) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	80fb      	strh	r3, [r7, #6]
	if(!params[paramTable[com]-1]->set) {
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	4a53      	ldr	r2, [pc, #332]	; (8002c70 <UARTset+0x15c>)
 8002b24:	5cd3      	ldrb	r3, [r2, r3]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	4a52      	ldr	r2, [pc, #328]	; (8002c74 <UARTset+0x160>)
 8002b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d106      	bne.n	8002b42 <UARTset+0x2e>
		UARTtransmitNum(com, "Error\%no set function");
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	4950      	ldr	r1, [pc, #320]	; (8002c78 <UARTset+0x164>)
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f8b1 	bl	8002ca0 <UARTtransmitNum>
		return false;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e092      	b.n	8002c68 <UARTset+0x154>
	} else if(params[paramTable[com]-1]->readOnly) {
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	4a4a      	ldr	r2, [pc, #296]	; (8002c70 <UARTset+0x15c>)
 8002b46:	5cd3      	ldrb	r3, [r2, r3]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	4a4a      	ldr	r2, [pc, #296]	; (8002c74 <UARTset+0x160>)
 8002b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b50:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d006      	beq.n	8002b66 <UARTset+0x52>
		UARTtransmitNum(com, "Error\%read only");
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	4948      	ldr	r1, [pc, #288]	; (8002c7c <UARTset+0x168>)
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 f89f 	bl	8002ca0 <UARTtransmitNum>
		return false;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e080      	b.n	8002c68 <UARTset+0x154>
	}
	valueTypes value;
	switch(params[paramTable[com] - 1]->type) {
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	4a41      	ldr	r2, [pc, #260]	; (8002c70 <UARTset+0x15c>)
 8002b6a:	5cd3      	ldrb	r3, [r2, r3]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	4a41      	ldr	r2, [pc, #260]	; (8002c74 <UARTset+0x160>)
 8002b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b78:	2b07      	cmp	r3, #7
 8002b7a:	d85a      	bhi.n	8002c32 <UARTset+0x11e>
 8002b7c:	a201      	add	r2, pc, #4	; (adr r2, 8002b84 <UARTset+0x70>)
 8002b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b82:	bf00      	nop
 8002b84:	08002ba5 	.word	0x08002ba5
 8002b88:	08002bb5 	.word	0x08002bb5
 8002b8c:	08002bc5 	.word	0x08002bc5
 8002b90:	08002bd5 	.word	0x08002bd5
 8002b94:	08002be5 	.word	0x08002be5
 8002b98:	08002bf5 	.word	0x08002bf5
 8002b9c:	08002c05 	.word	0x08002c05
 8002ba0:	08002c15 	.word	0x08002c15
	case UINT8_T:
		sscanf(str, "%u", &value);
 8002ba4:	f107 0308 	add.w	r3, r7, #8
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4935      	ldr	r1, [pc, #212]	; (8002c80 <UARTset+0x16c>)
 8002bac:	6838      	ldr	r0, [r7, #0]
 8002bae:	f007 faad 	bl	800a10c <siscanf>
		break;
 8002bb2:	e03e      	b.n	8002c32 <UARTset+0x11e>
	case UINT16_T:
		sscanf(str, "%u", &value);
 8002bb4:	f107 0308 	add.w	r3, r7, #8
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4931      	ldr	r1, [pc, #196]	; (8002c80 <UARTset+0x16c>)
 8002bbc:	6838      	ldr	r0, [r7, #0]
 8002bbe:	f007 faa5 	bl	800a10c <siscanf>
		break;
 8002bc2:	e036      	b.n	8002c32 <UARTset+0x11e>
	case UINT32_T:
		sscanf(str, "%u", &value);
 8002bc4:	f107 0308 	add.w	r3, r7, #8
 8002bc8:	461a      	mov	r2, r3
 8002bca:	492d      	ldr	r1, [pc, #180]	; (8002c80 <UARTset+0x16c>)
 8002bcc:	6838      	ldr	r0, [r7, #0]
 8002bce:	f007 fa9d 	bl	800a10c <siscanf>
		break;
 8002bd2:	e02e      	b.n	8002c32 <UARTset+0x11e>
	case INT8_T:
		sscanf(str, "%d", &value);
 8002bd4:	f107 0308 	add.w	r3, r7, #8
 8002bd8:	461a      	mov	r2, r3
 8002bda:	492a      	ldr	r1, [pc, #168]	; (8002c84 <UARTset+0x170>)
 8002bdc:	6838      	ldr	r0, [r7, #0]
 8002bde:	f007 fa95 	bl	800a10c <siscanf>
		break;
 8002be2:	e026      	b.n	8002c32 <UARTset+0x11e>
	case INT16_T:
		sscanf(str, "%d", &value);
 8002be4:	f107 0308 	add.w	r3, r7, #8
 8002be8:	461a      	mov	r2, r3
 8002bea:	4926      	ldr	r1, [pc, #152]	; (8002c84 <UARTset+0x170>)
 8002bec:	6838      	ldr	r0, [r7, #0]
 8002bee:	f007 fa8d 	bl	800a10c <siscanf>
		break;
 8002bf2:	e01e      	b.n	8002c32 <UARTset+0x11e>
	case INT32_T:
		sscanf(str, "%d", &value);
 8002bf4:	f107 0308 	add.w	r3, r7, #8
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4922      	ldr	r1, [pc, #136]	; (8002c84 <UARTset+0x170>)
 8002bfc:	6838      	ldr	r0, [r7, #0]
 8002bfe:	f007 fa85 	bl	800a10c <siscanf>
		break;
 8002c02:	e016      	b.n	8002c32 <UARTset+0x11e>
	case FLOAT:
		sscanf(str, "%f", &value);
 8002c04:	f107 0308 	add.w	r3, r7, #8
 8002c08:	461a      	mov	r2, r3
 8002c0a:	491f      	ldr	r1, [pc, #124]	; (8002c88 <UARTset+0x174>)
 8002c0c:	6838      	ldr	r0, [r7, #0]
 8002c0e:	f007 fa7d 	bl	800a10c <siscanf>
		break;
 8002c12:	e00e      	b.n	8002c32 <UARTset+0x11e>
	case BOOL:
		value = (valueTypes)(bool)!strcmp(str, "true");
 8002c14:	491d      	ldr	r1, [pc, #116]	; (8002c8c <UARTset+0x178>)
 8002c16:	6838      	ldr	r0, [r7, #0]
 8002c18:	f7fd fada 	bl	80001d0 <strcmp>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	bf0c      	ite	eq
 8002c22:	2301      	moveq	r3, #1
 8002c24:	2300      	movne	r3, #0
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	723b      	strb	r3, [r7, #8]
		break;
 8002c30:	bf00      	nop
	}
	bool setRes = params[paramTable[com]-1]->set((valueTypes)value);
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	4a0e      	ldr	r2, [pc, #56]	; (8002c70 <UARTset+0x15c>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	4a0e      	ldr	r2, [pc, #56]	; (8002c74 <UARTset+0x160>)
 8002c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	68b8      	ldr	r0, [r7, #8]
 8002c44:	4798      	blx	r3
 8002c46:	4603      	mov	r3, r0
 8002c48:	73fb      	strb	r3, [r7, #15]
	sprintf(TXbuffer, "$%u:%s",com, setRes ? "Y" : "N");
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <UARTset+0x142>
 8002c52:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <UARTset+0x17c>)
 8002c54:	e000      	b.n	8002c58 <UARTset+0x144>
 8002c56:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <UARTset+0x180>)
 8002c58:	490f      	ldr	r1, [pc, #60]	; (8002c98 <UARTset+0x184>)
 8002c5a:	4810      	ldr	r0, [pc, #64]	; (8002c9c <UARTset+0x188>)
 8002c5c:	f007 fa36 	bl	800a0cc <siprintf>
	UARTtransmit(TXbuffer);
 8002c60:	480e      	ldr	r0, [pc, #56]	; (8002c9c <UARTset+0x188>)
 8002c62:	f7ff fe7b 	bl	800295c <UARTtransmit>
	return setRes;
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20001338 	.word	0x20001338
 8002c74:	200011a8 	.word	0x200011a8
 8002c78:	0800e2a4 	.word	0x0800e2a4
 8002c7c:	0800e2bc 	.word	0x0800e2bc
 8002c80:	0800e2cc 	.word	0x0800e2cc
 8002c84:	0800e2d0 	.word	0x0800e2d0
 8002c88:	0800e2d4 	.word	0x0800e2d4
 8002c8c:	0800e274 	.word	0x0800e274
 8002c90:	0800e2d8 	.word	0x0800e2d8
 8002c94:	0800e2dc 	.word	0x0800e2dc
 8002c98:	0800e284 	.word	0x0800e284
 8002c9c:	20001720 	.word	0x20001720

08002ca0 <UARTtransmitNum>:

void UARTtransmitNum(int com, char* string) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
	sprintf(TXbuffer, "%d:%s",com, string);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	4905      	ldr	r1, [pc, #20]	; (8002cc4 <UARTtransmitNum+0x24>)
 8002cb0:	4805      	ldr	r0, [pc, #20]	; (8002cc8 <UARTtransmitNum+0x28>)
 8002cb2:	f007 fa0b 	bl	800a0cc <siprintf>
	UARTtransmit(TXbuffer);
 8002cb6:	4804      	ldr	r0, [pc, #16]	; (8002cc8 <UARTtransmitNum+0x28>)
 8002cb8:	f7ff fe50 	bl	800295c <UARTtransmit>
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	0800e2e0 	.word	0x0800e2e0
 8002cc8:	20001720 	.word	0x20001720

08002ccc <commandSearch>:

void commandSearch() {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
//TODO

	char** commands;
	commands = str_split(RXbufferLong, delim);
 8002cd2:	4b55      	ldr	r3, [pc, #340]	; (8002e28 <commandSearch+0x15c>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4854      	ldr	r0, [pc, #336]	; (8002e2c <commandSearch+0x160>)
 8002cda:	f7ff fdb5 	bl	8002848 <str_split>
 8002cde:	61b8      	str	r0, [r7, #24]
	if (commands)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 809c 	beq.w	8002e20 <commandSearch+0x154>
	{
		int i;
		for (i = 0; *(commands + i); i++)
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	e08a      	b.n	8002e04 <commandSearch+0x138>
		{
			char* command = *(commands + i);
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	617b      	str	r3, [r7, #20]
			sprintf(TXbuffer, "command%d=[%s]",i, command);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	494c      	ldr	r1, [pc, #304]	; (8002e30 <commandSearch+0x164>)
 8002d00:	484c      	ldr	r0, [pc, #304]	; (8002e34 <commandSearch+0x168>)
 8002d02:	f007 f9e3 	bl	800a0cc <siprintf>
			UARTtransmit(TXbuffer); // echo
 8002d06:	484b      	ldr	r0, [pc, #300]	; (8002e34 <commandSearch+0x168>)
 8002d08:	f7ff fe28 	bl	800295c <UARTtransmit>
			if(strlen(command) < 5) {
 8002d0c:	6978      	ldr	r0, [r7, #20]
 8002d0e:	f7fd fa69 	bl	80001e4 <strlen>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d803      	bhi.n	8002d20 <commandSearch+0x54>
				UARTtransmit("Error\%invalid command style");
 8002d18:	4847      	ldr	r0, [pc, #284]	; (8002e38 <commandSearch+0x16c>)
 8002d1a:	f7ff fe1f 	bl	800295c <UARTtransmit>
 8002d1e:	e066      	b.n	8002dee <commandSearch+0x122>
			} else if(!strcmp(command, "*IDN?")) {
 8002d20:	4946      	ldr	r1, [pc, #280]	; (8002e3c <commandSearch+0x170>)
 8002d22:	6978      	ldr	r0, [r7, #20]
 8002d24:	f7fd fa54 	bl	80001d0 <strcmp>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d103      	bne.n	8002d36 <commandSearch+0x6a>
				UARTtransmit(IDNstring);
 8002d2e:	4844      	ldr	r0, [pc, #272]	; (8002e40 <commandSearch+0x174>)
 8002d30:	f7ff fe14 	bl	800295c <UARTtransmit>
 8002d34:	e05b      	b.n	8002dee <commandSearch+0x122>
			} else if(command[0] == '$') {
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b24      	cmp	r3, #36	; 0x24
 8002d3c:	d154      	bne.n	8002de8 <commandSearch+0x11c>
				char attr[10];
				int com;
				sscanf(&command[1], "%d%s", &com, attr);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	1c58      	adds	r0, r3, #1
 8002d42:	f107 0308 	add.w	r3, r7, #8
 8002d46:	1d3a      	adds	r2, r7, #4
 8002d48:	493e      	ldr	r1, [pc, #248]	; (8002e44 <commandSearch+0x178>)
 8002d4a:	f007 f9df 	bl	800a10c <siscanf>
				if(com < 100 || com > PARAMS_RANGE - 1) {
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b63      	cmp	r3, #99	; 0x63
 8002d52:	dd03      	ble.n	8002d5c <commandSearch+0x90>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d5a:	db05      	blt.n	8002d68 <commandSearch+0x9c>
					UARTtransmitNum(com,"Error\%invalid command");
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	493a      	ldr	r1, [pc, #232]	; (8002e48 <commandSearch+0x17c>)
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff9d 	bl	8002ca0 <UARTtransmitNum>
 8002d66:	e042      	b.n	8002dee <commandSearch+0x122>
				}
				else if(!params[paramTable[com]-1])
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a38      	ldr	r2, [pc, #224]	; (8002e4c <commandSearch+0x180>)
 8002d6c:	5cd3      	ldrb	r3, [r2, r3]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	4a37      	ldr	r2, [pc, #220]	; (8002e50 <commandSearch+0x184>)
 8002d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d105      	bne.n	8002d86 <commandSearch+0xba>
				{
					UARTtransmitNum(com,"Error\%invalid parameter");
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4935      	ldr	r1, [pc, #212]	; (8002e54 <commandSearch+0x188>)
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ff8e 	bl	8002ca0 <UARTtransmitNum>
 8002d84:	e033      	b.n	8002dee <commandSearch+0x122>
				}
				else if(attr[0] == '?') {
 8002d86:	7a3b      	ldrb	r3, [r7, #8]
 8002d88:	2b3f      	cmp	r3, #63	; 0x3f
 8002d8a:	d11a      	bne.n	8002dc2 <commandSearch+0xf6>
					if(params[paramTable[com]-1]->isCommand) {
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a2f      	ldr	r2, [pc, #188]	; (8002e4c <commandSearch+0x180>)
 8002d90:	5cd3      	ldrb	r3, [r2, r3]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	4a2e      	ldr	r2, [pc, #184]	; (8002e50 <commandSearch+0x184>)
 8002d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <commandSearch+0xea>
						params[paramTable[com]-1]->command();
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a29      	ldr	r2, [pc, #164]	; (8002e4c <commandSearch+0x180>)
 8002da6:	5cd3      	ldrb	r3, [r2, r3]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	4a29      	ldr	r2, [pc, #164]	; (8002e50 <commandSearch+0x184>)
 8002dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	4798      	blx	r3
 8002db4:	e01b      	b.n	8002dee <commandSearch+0x122>
					}
					else  {
						UARTget(com);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fdf0 	bl	80029a0 <UARTget>
 8002dc0:	e015      	b.n	8002dee <commandSearch+0x122>
					}
				}
				else if (attr[0] == ':') {
 8002dc2:	7a3b      	ldrb	r3, [r7, #8]
 8002dc4:	2b3a      	cmp	r3, #58	; 0x3a
 8002dc6:	d109      	bne.n	8002ddc <commandSearch+0x110>
					UARTset(com, &attr[1]);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	f107 0308 	add.w	r3, r7, #8
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f7ff fe9d 	bl	8002b14 <UARTset>
 8002dda:	e008      	b.n	8002dee <commandSearch+0x122>
				}
				else {
					UARTtransmitNum(com, "Error\%invalid command style");
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4916      	ldr	r1, [pc, #88]	; (8002e38 <commandSearch+0x16c>)
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff5d 	bl	8002ca0 <UARTtransmitNum>
 8002de6:	e002      	b.n	8002dee <commandSearch+0x122>
				}
			} else {
				UARTtransmit("Error\%invalid command style");
 8002de8:	4813      	ldr	r0, [pc, #76]	; (8002e38 <commandSearch+0x16c>)
 8002dea:	f7ff fdb7 	bl	800295c <UARTtransmit>
			}

			free(*(commands + i));
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4413      	add	r3, r2
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f006 f877 	bl	8008eec <free>
		for (i = 0; *(commands + i); i++)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3301      	adds	r3, #1
 8002e02:	61fb      	str	r3, [r7, #28]
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f47f af6d 	bne.w	8002cee <commandSearch+0x22>
		}
		printf("\n");
 8002e14:	200a      	movs	r0, #10
 8002e16:	f007 f92d 	bl	800a074 <putchar>
		free(commands);
 8002e1a:	69b8      	ldr	r0, [r7, #24]
 8002e1c:	f006 f866 	bl	8008eec <free>
	}
}
 8002e20:	bf00      	nop
 8002e22:	3720      	adds	r7, #32
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20000e30 	.word	0x20000e30
 8002e2c:	20001b40 	.word	0x20001b40
 8002e30:	0800e2e8 	.word	0x0800e2e8
 8002e34:	20001720 	.word	0x20001720
 8002e38:	0800e2f8 	.word	0x0800e2f8
 8002e3c:	0800e314 	.word	0x0800e314
 8002e40:	20000e3c 	.word	0x20000e3c
 8002e44:	0800e31c 	.word	0x0800e31c
 8002e48:	0800e324 	.word	0x0800e324
 8002e4c:	20001338 	.word	0x20001338
 8002e50:	200011a8 	.word	0x200011a8
 8002e54:	0800e33c 	.word	0x0800e33c

08002e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	InitParams();
 8002e5e:	f7fe f8db 	bl	8001018 <InitParams>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e62:	f001 fe3b 	bl	8004adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e66:	f000 f9cd 	bl	8003204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e6a:	f000 fed9 	bl	8003c20 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e6e:	f000 feaf 	bl	8003bd0 <MX_DMA_Init>
  MX_ADC1_Init();
 8002e72:	f000 fa33 	bl	80032dc <MX_ADC1_Init>
  MX_ADC2_Init();
 8002e76:	f000 fac9 	bl	800340c <MX_ADC2_Init>
  MX_TIM1_Init();
 8002e7a:	f000 fb5d 	bl	8003538 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002e7e:	f000 fc03 	bl	8003688 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002e82:	f000 fc4d 	bl	8003720 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002e86:	f000 fccf 	bl	8003828 <MX_TIM4_Init>
  MX_TIM8_Init();
 8002e8a:	f000 fdd5 	bl	8003a38 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002e8e:	f000 fe75 	bl	8003b7c <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8002e92:	f000 fd4d 	bl	8003930 <MX_TIM5_Init>
  MX_TIM6_Init();
 8002e96:	f000 fd99 	bl	80039cc <MX_TIM6_Init>
  MX_IWDG_Init();
 8002e9a:	f000 fb33 	bl	8003504 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  TimerFreq = MOfreq * 10.5;
 8002e9e:	4bac      	ldr	r3, [pc, #688]	; (8003150 <main+0x2f8>)
 8002ea0:	edd3 7a00 	vldr	s15, [r3]
 8002ea4:	eeb2 7a05 	vmov.f32	s14, #37	; 0x41280000  10.5
 8002ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eac:	4ba9      	ldr	r3, [pc, #676]	; (8003154 <main+0x2fc>)
 8002eae:	edc3 7a00 	vstr	s15, [r3]
  counterPeriod = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8002eb2:	4ba9      	ldr	r3, [pc, #676]	; (8003158 <main+0x300>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	4ba8      	ldr	r3, [pc, #672]	; (800315c <main+0x304>)
 8002ebc:	801a      	strh	r2, [r3, #0]

  HAL_TIM_Base_Start(&htim2);
 8002ebe:	48a8      	ldr	r0, [pc, #672]	; (8003160 <main+0x308>)
 8002ec0:	f003 fe94 	bl	8006bec <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	48a4      	ldr	r0, [pc, #656]	; (8003158 <main+0x300>)
 8002ec8:	f003 ffc2 	bl	8006e50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002ecc:	2100      	movs	r1, #0
 8002ece:	48a5      	ldr	r0, [pc, #660]	; (8003164 <main+0x30c>)
 8002ed0:	f003 ffbe 	bl	8006e50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002ed4:	2104      	movs	r1, #4
 8002ed6:	48a3      	ldr	r0, [pc, #652]	; (8003164 <main+0x30c>)
 8002ed8:	f003 ffba 	bl	8006e50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002edc:	2100      	movs	r1, #0
 8002ede:	48a2      	ldr	r0, [pc, #648]	; (8003168 <main+0x310>)
 8002ee0:	f003 ffb6 	bl	8006e50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002ee4:	2104      	movs	r1, #4
 8002ee6:	48a0      	ldr	r0, [pc, #640]	; (8003168 <main+0x310>)
 8002ee8:	f003 ffb2 	bl	8006e50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);//Set_U_Heater PWM (10 kHz, 16800)
 8002eec:	2108      	movs	r1, #8
 8002eee:	489f      	ldr	r0, [pc, #636]	; (800316c <main+0x314>)
 8002ef0:	f003 ffae 	bl	8006e50 <HAL_TIM_PWM_Start>

  __HAL_TIM_CLEAR_IT(&htim1,TIM_IT_UPDATE);
 8002ef4:	4b98      	ldr	r3, [pc, #608]	; (8003158 <main+0x300>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0201 	mvn.w	r2, #1
 8002efc:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim1);
 8002efe:	4896      	ldr	r0, [pc, #600]	; (8003158 <main+0x300>)
 8002f00:	f003 fedc 	bl	8006cbc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8002f04:	489a      	ldr	r0, [pc, #616]	; (8003170 <main+0x318>)
 8002f06:	f003 fed9 	bl	8006cbc <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, RXbuffer, 1);
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	4999      	ldr	r1, [pc, #612]	; (8003174 <main+0x31c>)
 8002f0e:	489a      	ldr	r0, [pc, #616]	; (8003178 <main+0x320>)
 8002f10:	f004 fff1 	bl	8007ef6 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)dmaADC1buffer, 6);
 8002f14:	2206      	movs	r2, #6
 8002f16:	4999      	ldr	r1, [pc, #612]	; (800317c <main+0x324>)
 8002f18:	4899      	ldr	r0, [pc, #612]	; (8003180 <main+0x328>)
 8002f1a:	f001 fe95 	bl	8004c48 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)dmaADC2buffer, 4);
 8002f1e:	2204      	movs	r2, #4
 8002f20:	4998      	ldr	r1, [pc, #608]	; (8003184 <main+0x32c>)
 8002f22:	4899      	ldr	r0, [pc, #612]	; (8003188 <main+0x330>)
 8002f24:	f001 fe90 	bl	8004c48 <HAL_ADC_Start_DMA>



  //Heater PWM init
  __HAL_TIM_SET_PRESCALER(&htim3, 0);
 8002f28:	4b8f      	ldr	r3, [pc, #572]	; (8003168 <main+0x310>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_TIM_SET_AUTORELOAD(&htim3, freq_PWM_MO/freq_PWM_CH1 - 1);
 8002f30:	4b96      	ldr	r3, [pc, #600]	; (800318c <main+0x334>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b96      	ldr	r3, [pc, #600]	; (8003190 <main+0x338>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f3c:	4b8a      	ldr	r3, [pc, #552]	; (8003168 <main+0x310>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3a01      	subs	r2, #1
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f44:	4b91      	ldr	r3, [pc, #580]	; (800318c <main+0x334>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b91      	ldr	r3, [pc, #580]	; (8003190 <main+0x338>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	4a85      	ldr	r2, [pc, #532]	; (8003168 <main+0x310>)
 8002f54:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SET_PRESCALER(&htim4, 0);
 8002f56:	4b83      	ldr	r3, [pc, #524]	; (8003164 <main+0x30c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_TIM_SET_AUTORELOAD(&htim4, freq_PWM_MO/freq_PWM_CH2 - 1);
 8002f5e:	4b8b      	ldr	r3, [pc, #556]	; (800318c <main+0x334>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4b8c      	ldr	r3, [pc, #560]	; (8003194 <main+0x33c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f6a:	4b7e      	ldr	r3, [pc, #504]	; (8003164 <main+0x30c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3a01      	subs	r2, #1
 8002f70:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f72:	4b86      	ldr	r3, [pc, #536]	; (800318c <main+0x334>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4b87      	ldr	r3, [pc, #540]	; (8003194 <main+0x33c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	4a78      	ldr	r2, [pc, #480]	; (8003164 <main+0x30c>)
 8002f82:	60d3      	str	r3, [r2, #12]
  /* USER CODE BEGIN WHILE */
while (1)
{
	//HAL_ADC_Start_IT(&hadc1);

	HAL_IWDG_Refresh(&hiwdg);
 8002f84:	4884      	ldr	r0, [pc, #528]	; (8003198 <main+0x340>)
 8002f86:	f003 f938 	bl	80061fa <HAL_IWDG_Refresh>
	//Heater PWM
	float dutyCH1 = getPWM_CH1().val_float/100.0;
 8002f8a:	f7ff fb89 	bl	80026a0 <getPWM_CH1>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd fae9 	bl	8000568 <__aeabi_f2d>
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	4b80      	ldr	r3, [pc, #512]	; (800319c <main+0x344>)
 8002f9c:	f7fd fc66 	bl	800086c <__aeabi_ddiv>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	f7fd fe2e 	bl	8000c08 <__aeabi_d2f>
 8002fac:	4603      	mov	r3, r0
 8002fae:	607b      	str	r3, [r7, #4]
	if(getCH1_Polarity().val_bool == false) {
 8002fb0:	f7ff fbc6 	bl	8002740 <getCH1_Polarity>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f083 0301 	eor.w	r3, r3, #1
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00f      	beq.n	8002fe2 <main+0x18a>
		dutyCH1 = dutyCH1*(-1.0);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd fad0 	bl	8000568 <__aeabi_f2d>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f7fd fe1a 	bl	8000c08 <__aeabi_d2f>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef1 7a67 	vneg.f32	s15, s15
 8002fde:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	if(dutyCH1 > 0) {
 8002fe2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fe6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	dd28      	ble.n	8003042 <main+0x1ea>
		setGateH1A((valueTypes)(bool)false);
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fa96 	bl	8002524 <setGateH1A>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002ff8:	4b5b      	ldr	r3, [pc, #364]	; (8003168 <main+0x310>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, freq_PWM_MO/freq_PWM_CH1 * dutyCH1 - 1);
 8003000:	4b62      	ldr	r3, [pc, #392]	; (800318c <main+0x334>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4b62      	ldr	r3, [pc, #392]	; (8003190 <main+0x338>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003014:	edd7 7a01 	vldr	s15, [r7, #4]
 8003018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800301c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003020:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003024:	4b50      	ldr	r3, [pc, #320]	; (8003168 <main+0x310>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800302c:	ee17 2a90 	vmov	r2, s15
 8003030:	635a      	str	r2, [r3, #52]	; 0x34
		setGateH1B((valueTypes)(bool)true);
 8003032:	2300      	movs	r3, #0
 8003034:	2201      	movs	r2, #1
 8003036:	f362 0307 	bfi	r3, r2, #0, #8
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fa98 	bl	8002570 <setGateH1B>
 8003040:	e029      	b.n	8003096 <main+0x23e>
	}
	else {
		setGateH1B((valueTypes)(bool)false);
 8003042:	2300      	movs	r3, #0
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fa93 	bl	8002570 <setGateH1B>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800304a:	4b47      	ldr	r3, [pc, #284]	; (8003168 <main+0x310>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2200      	movs	r2, #0
 8003050:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, freq_PWM_MO/freq_PWM_CH1 * (-dutyCH1) + 1);
 8003052:	4b4e      	ldr	r3, [pc, #312]	; (800318c <main+0x334>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4b4e      	ldr	r3, [pc, #312]	; (8003190 <main+0x338>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	fbb2 f3f3 	udiv	r3, r2, r3
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003066:	edd7 7a01 	vldr	s15, [r7, #4]
 800306a:	eef1 7a67 	vneg.f32	s15, s15
 800306e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003076:	ee77 7a87 	vadd.f32	s15, s15, s14
 800307a:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <main+0x310>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003082:	ee17 2a90 	vmov	r2, s15
 8003086:	639a      	str	r2, [r3, #56]	; 0x38
		setGateH1A((valueTypes)(bool)true);
 8003088:	2300      	movs	r3, #0
 800308a:	2201      	movs	r2, #1
 800308c:	f362 0307 	bfi	r3, r2, #0, #8
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fa47 	bl	8002524 <setGateH1A>
	}

	float dutyCH2 = getPWM_CH2().val_float/100.0;
 8003096:	f7ff fb37 	bl	8002708 <getPWM_CH2>
 800309a:	4603      	mov	r3, r0
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd fa63 	bl	8000568 <__aeabi_f2d>
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	4b3d      	ldr	r3, [pc, #244]	; (800319c <main+0x344>)
 80030a8:	f7fd fbe0 	bl	800086c <__aeabi_ddiv>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4610      	mov	r0, r2
 80030b2:	4619      	mov	r1, r3
 80030b4:	f7fd fda8 	bl	8000c08 <__aeabi_d2f>
 80030b8:	4603      	mov	r3, r0
 80030ba:	603b      	str	r3, [r7, #0]
	if(getCH2_Polarity().val_bool == false) {
 80030bc:	f7ff fb5c 	bl	8002778 <getCH2_Polarity>
 80030c0:	4603      	mov	r3, r0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	f083 0301 	eor.w	r3, r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00f      	beq.n	80030ee <main+0x296>
		dutyCH2 = dutyCH1*(-1.0);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fd fa4a 	bl	8000568 <__aeabi_f2d>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4610      	mov	r0, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	f7fd fd94 	bl	8000c08 <__aeabi_d2f>
 80030e0:	4603      	mov	r3, r0
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eef1 7a67 	vneg.f32	s15, s15
 80030ea:	edc7 7a00 	vstr	s15, [r7]
	}

	if(dutyCH2 > 0) {
 80030ee:	edd7 7a00 	vldr	s15, [r7]
 80030f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fa:	dd51      	ble.n	80031a0 <main+0x348>
		setGateH2A((valueTypes)(bool)false);
 80030fc:	2300      	movs	r3, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fa5c 	bl	80025bc <setGateH2A>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8003104:	4b17      	ldr	r3, [pc, #92]	; (8003164 <main+0x30c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2200      	movs	r2, #0
 800310a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, freq_PWM_MO/freq_PWM_CH2 * dutyCH2 - 1);
 800310c:	4b1f      	ldr	r3, [pc, #124]	; (800318c <main+0x334>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b20      	ldr	r3, [pc, #128]	; (8003194 <main+0x33c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	ee07 3a90 	vmov	s15, r3
 800311c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003120:	edd7 7a00 	vldr	s15, [r7]
 8003124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003128:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800312c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <main+0x30c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003138:	ee17 2a90 	vmov	r2, s15
 800313c:	635a      	str	r2, [r3, #52]	; 0x34
		setGateH2B((valueTypes)(bool)true);
 800313e:	2300      	movs	r3, #0
 8003140:	2201      	movs	r2, #1
 8003142:	f362 0307 	bfi	r3, r2, #0, #8
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fa5e 	bl	8002608 <setGateH2B>
 800314c:	e71a      	b.n	8002f84 <main+0x12c>
 800314e:	bf00      	nop
 8003150:	20000e38 	.word	0x20000e38
 8003154:	20001bd8 	.word	0x20001bd8
 8003158:	200018fc 	.word	0x200018fc
 800315c:	20001bdc 	.word	0x20001bdc
 8003160:	20001944 	.word	0x20001944
 8003164:	200019d4 	.word	0x200019d4
 8003168:	2000198c 	.word	0x2000198c
 800316c:	20001aac 	.word	0x20001aac
 8003170:	20001a64 	.word	0x20001a64
 8003174:	20001bc0 	.word	0x20001bc0
 8003178:	20001af4 	.word	0x20001af4
 800317c:	20001bc4 	.word	0x20001bc4
 8003180:	200017a0 	.word	0x200017a0
 8003184:	20001bd0 	.word	0x20001bd0
 8003188:	200017e8 	.word	0x200017e8
 800318c:	20000e64 	.word	0x20000e64
 8003190:	20000e68 	.word	0x20000e68
 8003194:	20000e6c 	.word	0x20000e6c
 8003198:	200018f0 	.word	0x200018f0
 800319c:	40590000 	.word	0x40590000
	}
	else {
		setGateH2B((valueTypes)(bool)false);
 80031a0:	2300      	movs	r3, #0
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fa30 	bl	8002608 <setGateH2B>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80031a8:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <main+0x3a0>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2200      	movs	r2, #0
 80031ae:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, freq_PWM_MO/freq_PWM_CH2 * (-dutyCH2) + 1);
 80031b0:	4b12      	ldr	r3, [pc, #72]	; (80031fc <main+0x3a4>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b12      	ldr	r3, [pc, #72]	; (8003200 <main+0x3a8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031bc:	ee07 3a90 	vmov	s15, r3
 80031c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031c4:	edd7 7a00 	vldr	s15, [r7]
 80031c8:	eef1 7a67 	vneg.f32	s15, s15
 80031cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031d8:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <main+0x3a0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031e0:	ee17 2a90 	vmov	r2, s15
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38
		setGateH2A((valueTypes)(bool)true);
 80031e6:	2300      	movs	r3, #0
 80031e8:	2201      	movs	r2, #1
 80031ea:	f362 0307 	bfi	r3, r2, #0, #8
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff f9e4 	bl	80025bc <setGateH2A>
{
 80031f4:	e6c6      	b.n	8002f84 <main+0x12c>
 80031f6:	bf00      	nop
 80031f8:	200019d4 	.word	0x200019d4
 80031fc:	20000e64 	.word	0x20000e64
 8003200:	20000e6c 	.word	0x20000e6c

08003204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b094      	sub	sp, #80	; 0x50
 8003208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800320a:	f107 0320 	add.w	r3, r7, #32
 800320e:	2230      	movs	r2, #48	; 0x30
 8003210:	2100      	movs	r1, #0
 8003212:	4618      	mov	r0, r3
 8003214:	f005 fe72 	bl	8008efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003228:	2300      	movs	r3, #0
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <SystemClock_Config+0xd0>)
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	4a28      	ldr	r2, [pc, #160]	; (80032d4 <SystemClock_Config+0xd0>)
 8003232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003236:	6413      	str	r3, [r2, #64]	; 0x40
 8003238:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <SystemClock_Config+0xd0>)
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003244:	2300      	movs	r3, #0
 8003246:	607b      	str	r3, [r7, #4]
 8003248:	4b23      	ldr	r3, [pc, #140]	; (80032d8 <SystemClock_Config+0xd4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <SystemClock_Config+0xd4>)
 800324e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <SystemClock_Config+0xd4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003260:	2309      	movs	r3, #9
 8003262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800326a:	2301      	movs	r3, #1
 800326c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800326e:	2302      	movs	r3, #2
 8003270:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003272:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003276:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003278:	2304      	movs	r3, #4
 800327a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800327c:	23a8      	movs	r3, #168	; 0xa8
 800327e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003280:	2302      	movs	r3, #2
 8003282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003284:	2304      	movs	r3, #4
 8003286:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003288:	f107 0320 	add.w	r3, r7, #32
 800328c:	4618      	mov	r0, r3
 800328e:	f002 ffc5 	bl	800621c <HAL_RCC_OscConfig>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003298:	f000 fee4 	bl	8004064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800329c:	230f      	movs	r3, #15
 800329e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032a0:	2302      	movs	r3, #2
 80032a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80032ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80032b4:	f107 030c 	add.w	r3, r7, #12
 80032b8:	2105      	movs	r1, #5
 80032ba:	4618      	mov	r0, r3
 80032bc:	f003 fa26 	bl	800670c <HAL_RCC_ClockConfig>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80032c6:	f000 fecd 	bl	8004064 <Error_Handler>
  }
}
 80032ca:	bf00      	nop
 80032cc:	3750      	adds	r7, #80	; 0x50
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40007000 	.word	0x40007000

080032dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032e2:	463b      	mov	r3, r7
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80032ee:	4b44      	ldr	r3, [pc, #272]	; (8003400 <MX_ADC1_Init+0x124>)
 80032f0:	4a44      	ldr	r2, [pc, #272]	; (8003404 <MX_ADC1_Init+0x128>)
 80032f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80032f4:	4b42      	ldr	r3, [pc, #264]	; (8003400 <MX_ADC1_Init+0x124>)
 80032f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80032fc:	4b40      	ldr	r3, [pc, #256]	; (8003400 <MX_ADC1_Init+0x124>)
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003302:	4b3f      	ldr	r3, [pc, #252]	; (8003400 <MX_ADC1_Init+0x124>)
 8003304:	2201      	movs	r2, #1
 8003306:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003308:	4b3d      	ldr	r3, [pc, #244]	; (8003400 <MX_ADC1_Init+0x124>)
 800330a:	2201      	movs	r2, #1
 800330c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800330e:	4b3c      	ldr	r3, [pc, #240]	; (8003400 <MX_ADC1_Init+0x124>)
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003316:	4b3a      	ldr	r3, [pc, #232]	; (8003400 <MX_ADC1_Init+0x124>)
 8003318:	2200      	movs	r2, #0
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800331c:	4b38      	ldr	r3, [pc, #224]	; (8003400 <MX_ADC1_Init+0x124>)
 800331e:	4a3a      	ldr	r2, [pc, #232]	; (8003408 <MX_ADC1_Init+0x12c>)
 8003320:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003322:	4b37      	ldr	r3, [pc, #220]	; (8003400 <MX_ADC1_Init+0x124>)
 8003324:	2200      	movs	r2, #0
 8003326:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8003328:	4b35      	ldr	r3, [pc, #212]	; (8003400 <MX_ADC1_Init+0x124>)
 800332a:	2206      	movs	r2, #6
 800332c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800332e:	4b34      	ldr	r3, [pc, #208]	; (8003400 <MX_ADC1_Init+0x124>)
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003336:	4b32      	ldr	r3, [pc, #200]	; (8003400 <MX_ADC1_Init+0x124>)
 8003338:	2200      	movs	r2, #0
 800333a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800333c:	4830      	ldr	r0, [pc, #192]	; (8003400 <MX_ADC1_Init+0x124>)
 800333e:	f001 fc3f 	bl	8004bc0 <HAL_ADC_Init>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003348:	f000 fe8c 	bl	8004064 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800334c:	2300      	movs	r3, #0
 800334e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003350:	2301      	movs	r3, #1
 8003352:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003354:	2307      	movs	r3, #7
 8003356:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003358:	463b      	mov	r3, r7
 800335a:	4619      	mov	r1, r3
 800335c:	4828      	ldr	r0, [pc, #160]	; (8003400 <MX_ADC1_Init+0x124>)
 800335e:	f001 fda1 	bl	8004ea4 <HAL_ADC_ConfigChannel>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003368:	f000 fe7c 	bl	8004064 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800336c:	2301      	movs	r3, #1
 800336e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003370:	2302      	movs	r3, #2
 8003372:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003374:	463b      	mov	r3, r7
 8003376:	4619      	mov	r1, r3
 8003378:	4821      	ldr	r0, [pc, #132]	; (8003400 <MX_ADC1_Init+0x124>)
 800337a:	f001 fd93 	bl	8004ea4 <HAL_ADC_ConfigChannel>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003384:	f000 fe6e 	bl	8004064 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003388:	2302      	movs	r3, #2
 800338a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800338c:	2303      	movs	r3, #3
 800338e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003390:	463b      	mov	r3, r7
 8003392:	4619      	mov	r1, r3
 8003394:	481a      	ldr	r0, [pc, #104]	; (8003400 <MX_ADC1_Init+0x124>)
 8003396:	f001 fd85 	bl	8004ea4 <HAL_ADC_ConfigChannel>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80033a0:	f000 fe60 	bl	8004064 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80033a4:	2303      	movs	r3, #3
 80033a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80033a8:	2304      	movs	r3, #4
 80033aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033ac:	463b      	mov	r3, r7
 80033ae:	4619      	mov	r1, r3
 80033b0:	4813      	ldr	r0, [pc, #76]	; (8003400 <MX_ADC1_Init+0x124>)
 80033b2:	f001 fd77 	bl	8004ea4 <HAL_ADC_ConfigChannel>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80033bc:	f000 fe52 	bl	8004064 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80033c0:	2304      	movs	r3, #4
 80033c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80033c4:	2305      	movs	r3, #5
 80033c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033c8:	463b      	mov	r3, r7
 80033ca:	4619      	mov	r1, r3
 80033cc:	480c      	ldr	r0, [pc, #48]	; (8003400 <MX_ADC1_Init+0x124>)
 80033ce:	f001 fd69 	bl	8004ea4 <HAL_ADC_ConfigChannel>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80033d8:	f000 fe44 	bl	8004064 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80033dc:	2305      	movs	r3, #5
 80033de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80033e0:	2306      	movs	r3, #6
 80033e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033e4:	463b      	mov	r3, r7
 80033e6:	4619      	mov	r1, r3
 80033e8:	4805      	ldr	r0, [pc, #20]	; (8003400 <MX_ADC1_Init+0x124>)
 80033ea:	f001 fd5b 	bl	8004ea4 <HAL_ADC_ConfigChannel>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80033f4:	f000 fe36 	bl	8004064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	200017a0 	.word	0x200017a0
 8003404:	40012000 	.word	0x40012000
 8003408:	0f000001 	.word	0x0f000001

0800340c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003412:	463b      	mov	r3, r7
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800341e:	4b36      	ldr	r3, [pc, #216]	; (80034f8 <MX_ADC2_Init+0xec>)
 8003420:	4a36      	ldr	r2, [pc, #216]	; (80034fc <MX_ADC2_Init+0xf0>)
 8003422:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003424:	4b34      	ldr	r3, [pc, #208]	; (80034f8 <MX_ADC2_Init+0xec>)
 8003426:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800342a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800342c:	4b32      	ldr	r3, [pc, #200]	; (80034f8 <MX_ADC2_Init+0xec>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003432:	4b31      	ldr	r3, [pc, #196]	; (80034f8 <MX_ADC2_Init+0xec>)
 8003434:	2201      	movs	r2, #1
 8003436:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003438:	4b2f      	ldr	r3, [pc, #188]	; (80034f8 <MX_ADC2_Init+0xec>)
 800343a:	2201      	movs	r2, #1
 800343c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800343e:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <MX_ADC2_Init+0xec>)
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003446:	4b2c      	ldr	r3, [pc, #176]	; (80034f8 <MX_ADC2_Init+0xec>)
 8003448:	2200      	movs	r2, #0
 800344a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800344c:	4b2a      	ldr	r3, [pc, #168]	; (80034f8 <MX_ADC2_Init+0xec>)
 800344e:	4a2c      	ldr	r2, [pc, #176]	; (8003500 <MX_ADC2_Init+0xf4>)
 8003450:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003452:	4b29      	ldr	r3, [pc, #164]	; (80034f8 <MX_ADC2_Init+0xec>)
 8003454:	2200      	movs	r2, #0
 8003456:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <MX_ADC2_Init+0xec>)
 800345a:	2204      	movs	r2, #4
 800345c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800345e:	4b26      	ldr	r3, [pc, #152]	; (80034f8 <MX_ADC2_Init+0xec>)
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003466:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <MX_ADC2_Init+0xec>)
 8003468:	2200      	movs	r2, #0
 800346a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800346c:	4822      	ldr	r0, [pc, #136]	; (80034f8 <MX_ADC2_Init+0xec>)
 800346e:	f001 fba7 	bl	8004bc0 <HAL_ADC_Init>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003478:	f000 fdf4 	bl	8004064 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800347c:	230a      	movs	r3, #10
 800347e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003480:	2301      	movs	r3, #1
 8003482:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003484:	2307      	movs	r3, #7
 8003486:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003488:	463b      	mov	r3, r7
 800348a:	4619      	mov	r1, r3
 800348c:	481a      	ldr	r0, [pc, #104]	; (80034f8 <MX_ADC2_Init+0xec>)
 800348e:	f001 fd09 	bl	8004ea4 <HAL_ADC_ConfigChannel>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003498:	f000 fde4 	bl	8004064 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800349c:	230b      	movs	r3, #11
 800349e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80034a0:	2302      	movs	r3, #2
 80034a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80034a4:	463b      	mov	r3, r7
 80034a6:	4619      	mov	r1, r3
 80034a8:	4813      	ldr	r0, [pc, #76]	; (80034f8 <MX_ADC2_Init+0xec>)
 80034aa:	f001 fcfb 	bl	8004ea4 <HAL_ADC_ConfigChannel>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80034b4:	f000 fdd6 	bl	8004064 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80034b8:	230c      	movs	r3, #12
 80034ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80034bc:	2303      	movs	r3, #3
 80034be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80034c0:	463b      	mov	r3, r7
 80034c2:	4619      	mov	r1, r3
 80034c4:	480c      	ldr	r0, [pc, #48]	; (80034f8 <MX_ADC2_Init+0xec>)
 80034c6:	f001 fced 	bl	8004ea4 <HAL_ADC_ConfigChannel>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80034d0:	f000 fdc8 	bl	8004064 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80034d4:	230d      	movs	r3, #13
 80034d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80034d8:	2304      	movs	r3, #4
 80034da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80034dc:	463b      	mov	r3, r7
 80034de:	4619      	mov	r1, r3
 80034e0:	4805      	ldr	r0, [pc, #20]	; (80034f8 <MX_ADC2_Init+0xec>)
 80034e2:	f001 fcdf 	bl	8004ea4 <HAL_ADC_ConfigChannel>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80034ec:	f000 fdba 	bl	8004064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80034f0:	bf00      	nop
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	200017e8 	.word	0x200017e8
 80034fc:	40012100 	.word	0x40012100
 8003500:	0f000001 	.word	0x0f000001

08003504 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <MX_IWDG_Init+0x2c>)
 800350a:	4a0a      	ldr	r2, [pc, #40]	; (8003534 <MX_IWDG_Init+0x30>)
 800350c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800350e:	4b08      	ldr	r3, [pc, #32]	; (8003530 <MX_IWDG_Init+0x2c>)
 8003510:	2200      	movs	r2, #0
 8003512:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <MX_IWDG_Init+0x2c>)
 8003516:	f640 72ff 	movw	r2, #4095	; 0xfff
 800351a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800351c:	4804      	ldr	r0, [pc, #16]	; (8003530 <MX_IWDG_Init+0x2c>)
 800351e:	f002 fe2a 	bl	8006176 <HAL_IWDG_Init>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8003528:	f000 fd9c 	bl	8004064 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800352c:	bf00      	nop
 800352e:	bd80      	pop	{r7, pc}
 8003530:	200018f0 	.word	0x200018f0
 8003534:	40003000 	.word	0x40003000

08003538 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b096      	sub	sp, #88	; 0x58
 800353c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800353e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	609a      	str	r2, [r3, #8]
 800354a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800354c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]
 8003560:	609a      	str	r2, [r3, #8]
 8003562:	60da      	str	r2, [r3, #12]
 8003564:	611a      	str	r2, [r3, #16]
 8003566:	615a      	str	r2, [r3, #20]
 8003568:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800356a:	1d3b      	adds	r3, r7, #4
 800356c:	2220      	movs	r2, #32
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f005 fcc3 	bl	8008efc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003576:	4b42      	ldr	r3, [pc, #264]	; (8003680 <MX_TIM1_Init+0x148>)
 8003578:	4a42      	ldr	r2, [pc, #264]	; (8003684 <MX_TIM1_Init+0x14c>)
 800357a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800357c:	4b40      	ldr	r3, [pc, #256]	; (8003680 <MX_TIM1_Init+0x148>)
 800357e:	2200      	movs	r2, #0
 8003580:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003582:	4b3f      	ldr	r3, [pc, #252]	; (8003680 <MX_TIM1_Init+0x148>)
 8003584:	2200      	movs	r2, #0
 8003586:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8003588:	4b3d      	ldr	r3, [pc, #244]	; (8003680 <MX_TIM1_Init+0x148>)
 800358a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800358e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003590:	4b3b      	ldr	r3, [pc, #236]	; (8003680 <MX_TIM1_Init+0x148>)
 8003592:	2200      	movs	r2, #0
 8003594:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003596:	4b3a      	ldr	r3, [pc, #232]	; (8003680 <MX_TIM1_Init+0x148>)
 8003598:	2200      	movs	r2, #0
 800359a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800359c:	4b38      	ldr	r3, [pc, #224]	; (8003680 <MX_TIM1_Init+0x148>)
 800359e:	2200      	movs	r2, #0
 80035a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80035a2:	4837      	ldr	r0, [pc, #220]	; (8003680 <MX_TIM1_Init+0x148>)
 80035a4:	f003 fad2 	bl	8006b4c <HAL_TIM_Base_Init>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80035ae:	f000 fd59 	bl	8004064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80035b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035b6:	64bb      	str	r3, [r7, #72]	; 0x48
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80035b8:	2300      	movs	r3, #0
 80035ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80035bc:	2300      	movs	r3, #0
 80035be:	653b      	str	r3, [r7, #80]	; 0x50
  sClockSourceConfig.ClockFilter = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035c8:	4619      	mov	r1, r3
 80035ca:	482d      	ldr	r0, [pc, #180]	; (8003680 <MX_TIM1_Init+0x148>)
 80035cc:	f003 fed2 	bl	8007374 <HAL_TIM_ConfigClockSource>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80035d6:	f000 fd45 	bl	8004064 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035da:	4829      	ldr	r0, [pc, #164]	; (8003680 <MX_TIM1_Init+0x148>)
 80035dc:	f003 fbde 	bl	8006d9c <HAL_TIM_PWM_Init>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 80035e6:	f000 fd3d 	bl	8004064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ea:	2300      	movs	r3, #0
 80035ec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035f6:	4619      	mov	r1, r3
 80035f8:	4821      	ldr	r0, [pc, #132]	; (8003680 <MX_TIM1_Init+0x148>)
 80035fa:	f004 fabb 	bl	8007b74 <HAL_TIMEx_MasterConfigSynchronization>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8003604:	f000 fd2e 	bl	8004064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003608:	2360      	movs	r3, #96	; 0x60
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 30000-1;
 800360c:	f247 532f 	movw	r3, #29999	; 0x752f
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003612:	2300      	movs	r3, #0
 8003614:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003616:	2300      	movs	r3, #0
 8003618:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800361a:	2300      	movs	r3, #0
 800361c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800361e:	2300      	movs	r3, #0
 8003620:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003622:	2300      	movs	r3, #0
 8003624:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800362a:	2200      	movs	r2, #0
 800362c:	4619      	mov	r1, r3
 800362e:	4814      	ldr	r0, [pc, #80]	; (8003680 <MX_TIM1_Init+0x148>)
 8003630:	f003 fdde 	bl	80071f0 <HAL_TIM_PWM_ConfigChannel>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800363a:	f000 fd13 	bl	8004064 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800363e:	2300      	movs	r3, #0
 8003640:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003642:	2300      	movs	r3, #0
 8003644:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003656:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003658:	2300      	movs	r3, #0
 800365a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800365c:	1d3b      	adds	r3, r7, #4
 800365e:	4619      	mov	r1, r3
 8003660:	4807      	ldr	r0, [pc, #28]	; (8003680 <MX_TIM1_Init+0x148>)
 8003662:	f004 fb03 	bl	8007c6c <HAL_TIMEx_ConfigBreakDeadTime>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800366c:	f000 fcfa 	bl	8004064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003670:	4803      	ldr	r0, [pc, #12]	; (8003680 <MX_TIM1_Init+0x148>)
 8003672:	f000 fedd 	bl	8004430 <HAL_TIM_MspPostInit>

}
 8003676:	bf00      	nop
 8003678:	3758      	adds	r7, #88	; 0x58
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	200018fc 	.word	0x200018fc
 8003684:	40010000 	.word	0x40010000

08003688 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800368e:	f107 0308 	add.w	r3, r7, #8
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	605a      	str	r2, [r3, #4]
 8003698:	609a      	str	r2, [r3, #8]
 800369a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800369c:	463b      	mov	r3, r7
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036a4:	4b1d      	ldr	r3, [pc, #116]	; (800371c <MX_TIM2_Init+0x94>)
 80036a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80036ac:	4b1b      	ldr	r3, [pc, #108]	; (800371c <MX_TIM2_Init+0x94>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b2:	4b1a      	ldr	r3, [pc, #104]	; (800371c <MX_TIM2_Init+0x94>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80036b8:	4b18      	ldr	r3, [pc, #96]	; (800371c <MX_TIM2_Init+0x94>)
 80036ba:	f04f 32ff 	mov.w	r2, #4294967295
 80036be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036c0:	4b16      	ldr	r3, [pc, #88]	; (800371c <MX_TIM2_Init+0x94>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <MX_TIM2_Init+0x94>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036cc:	4813      	ldr	r0, [pc, #76]	; (800371c <MX_TIM2_Init+0x94>)
 80036ce:	f003 fa3d 	bl	8006b4c <HAL_TIM_Base_Init>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80036d8:	f000 fcc4 	bl	8004064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80036e2:	f107 0308 	add.w	r3, r7, #8
 80036e6:	4619      	mov	r1, r3
 80036e8:	480c      	ldr	r0, [pc, #48]	; (800371c <MX_TIM2_Init+0x94>)
 80036ea:	f003 fe43 	bl	8007374 <HAL_TIM_ConfigClockSource>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80036f4:	f000 fcb6 	bl	8004064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036f8:	2300      	movs	r3, #0
 80036fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036fc:	2300      	movs	r3, #0
 80036fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003700:	463b      	mov	r3, r7
 8003702:	4619      	mov	r1, r3
 8003704:	4805      	ldr	r0, [pc, #20]	; (800371c <MX_TIM2_Init+0x94>)
 8003706:	f004 fa35 	bl	8007b74 <HAL_TIMEx_MasterConfigSynchronization>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003710:	f000 fca8 	bl	8004064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003714:	bf00      	nop
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20001944 	.word	0x20001944

08003720 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08e      	sub	sp, #56	; 0x38
 8003724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	605a      	str	r2, [r3, #4]
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003734:	f107 0320 	add.w	r3, r7, #32
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800373e:	1d3b      	adds	r3, r7, #4
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	60da      	str	r2, [r3, #12]
 800374a:	611a      	str	r2, [r3, #16]
 800374c:	615a      	str	r2, [r3, #20]
 800374e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003750:	4b33      	ldr	r3, [pc, #204]	; (8003820 <MX_TIM3_Init+0x100>)
 8003752:	4a34      	ldr	r2, [pc, #208]	; (8003824 <MX_TIM3_Init+0x104>)
 8003754:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003756:	4b32      	ldr	r3, [pc, #200]	; (8003820 <MX_TIM3_Init+0x100>)
 8003758:	2200      	movs	r2, #0
 800375a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800375c:	4b30      	ldr	r3, [pc, #192]	; (8003820 <MX_TIM3_Init+0x100>)
 800375e:	2200      	movs	r2, #0
 8003760:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 840-1;
 8003762:	4b2f      	ldr	r3, [pc, #188]	; (8003820 <MX_TIM3_Init+0x100>)
 8003764:	f240 3247 	movw	r2, #839	; 0x347
 8003768:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800376a:	4b2d      	ldr	r3, [pc, #180]	; (8003820 <MX_TIM3_Init+0x100>)
 800376c:	2200      	movs	r2, #0
 800376e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003770:	4b2b      	ldr	r3, [pc, #172]	; (8003820 <MX_TIM3_Init+0x100>)
 8003772:	2200      	movs	r2, #0
 8003774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003776:	482a      	ldr	r0, [pc, #168]	; (8003820 <MX_TIM3_Init+0x100>)
 8003778:	f003 f9e8 	bl	8006b4c <HAL_TIM_Base_Init>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003782:	f000 fc6f 	bl	8004064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800378a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800378c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003790:	4619      	mov	r1, r3
 8003792:	4823      	ldr	r0, [pc, #140]	; (8003820 <MX_TIM3_Init+0x100>)
 8003794:	f003 fdee 	bl	8007374 <HAL_TIM_ConfigClockSource>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800379e:	f000 fc61 	bl	8004064 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80037a2:	481f      	ldr	r0, [pc, #124]	; (8003820 <MX_TIM3_Init+0x100>)
 80037a4:	f003 fafa 	bl	8006d9c <HAL_TIM_PWM_Init>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80037ae:	f000 fc59 	bl	8004064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037b2:	2300      	movs	r3, #0
 80037b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037b6:	2300      	movs	r3, #0
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037ba:	f107 0320 	add.w	r3, r7, #32
 80037be:	4619      	mov	r1, r3
 80037c0:	4817      	ldr	r0, [pc, #92]	; (8003820 <MX_TIM3_Init+0x100>)
 80037c2:	f004 f9d7 	bl	8007b74 <HAL_TIMEx_MasterConfigSynchronization>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80037cc:	f000 fc4a 	bl	8004064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037d0:	2360      	movs	r3, #96	; 0x60
 80037d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 630-1;
 80037d4:	f240 2375 	movw	r3, #629	; 0x275
 80037d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037e2:	1d3b      	adds	r3, r7, #4
 80037e4:	2200      	movs	r2, #0
 80037e6:	4619      	mov	r1, r3
 80037e8:	480d      	ldr	r0, [pc, #52]	; (8003820 <MX_TIM3_Init+0x100>)
 80037ea:	f003 fd01 	bl	80071f0 <HAL_TIM_PWM_ConfigChannel>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80037f4:	f000 fc36 	bl	8004064 <Error_Handler>
  }
  sConfigOC.Pulse = 120-1;
 80037f8:	2377      	movs	r3, #119	; 0x77
 80037fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037fc:	1d3b      	adds	r3, r7, #4
 80037fe:	2204      	movs	r2, #4
 8003800:	4619      	mov	r1, r3
 8003802:	4807      	ldr	r0, [pc, #28]	; (8003820 <MX_TIM3_Init+0x100>)
 8003804:	f003 fcf4 	bl	80071f0 <HAL_TIM_PWM_ConfigChannel>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 800380e:	f000 fc29 	bl	8004064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003812:	4803      	ldr	r0, [pc, #12]	; (8003820 <MX_TIM3_Init+0x100>)
 8003814:	f000 fe0c 	bl	8004430 <HAL_TIM_MspPostInit>

}
 8003818:	bf00      	nop
 800381a:	3738      	adds	r7, #56	; 0x38
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	2000198c 	.word	0x2000198c
 8003824:	40000400 	.word	0x40000400

08003828 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08e      	sub	sp, #56	; 0x38
 800382c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800382e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	605a      	str	r2, [r3, #4]
 8003838:	609a      	str	r2, [r3, #8]
 800383a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800383c:	f107 0320 	add.w	r3, r7, #32
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003846:	1d3b      	adds	r3, r7, #4
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	611a      	str	r2, [r3, #16]
 8003854:	615a      	str	r2, [r3, #20]
 8003856:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003858:	4b33      	ldr	r3, [pc, #204]	; (8003928 <MX_TIM4_Init+0x100>)
 800385a:	4a34      	ldr	r2, [pc, #208]	; (800392c <MX_TIM4_Init+0x104>)
 800385c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800385e:	4b32      	ldr	r3, [pc, #200]	; (8003928 <MX_TIM4_Init+0x100>)
 8003860:	2200      	movs	r2, #0
 8003862:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003864:	4b30      	ldr	r3, [pc, #192]	; (8003928 <MX_TIM4_Init+0x100>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 840-1;
 800386a:	4b2f      	ldr	r3, [pc, #188]	; (8003928 <MX_TIM4_Init+0x100>)
 800386c:	f240 3247 	movw	r2, #839	; 0x347
 8003870:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003872:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <MX_TIM4_Init+0x100>)
 8003874:	2200      	movs	r2, #0
 8003876:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003878:	4b2b      	ldr	r3, [pc, #172]	; (8003928 <MX_TIM4_Init+0x100>)
 800387a:	2200      	movs	r2, #0
 800387c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800387e:	482a      	ldr	r0, [pc, #168]	; (8003928 <MX_TIM4_Init+0x100>)
 8003880:	f003 f964 	bl	8006b4c <HAL_TIM_Base_Init>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800388a:	f000 fbeb 	bl	8004064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800388e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003894:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003898:	4619      	mov	r1, r3
 800389a:	4823      	ldr	r0, [pc, #140]	; (8003928 <MX_TIM4_Init+0x100>)
 800389c:	f003 fd6a 	bl	8007374 <HAL_TIM_ConfigClockSource>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80038a6:	f000 fbdd 	bl	8004064 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80038aa:	481f      	ldr	r0, [pc, #124]	; (8003928 <MX_TIM4_Init+0x100>)
 80038ac:	f003 fa76 	bl	8006d9c <HAL_TIM_PWM_Init>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80038b6:	f000 fbd5 	bl	8004064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ba:	2300      	movs	r3, #0
 80038bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038be:	2300      	movs	r3, #0
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038c2:	f107 0320 	add.w	r3, r7, #32
 80038c6:	4619      	mov	r1, r3
 80038c8:	4817      	ldr	r0, [pc, #92]	; (8003928 <MX_TIM4_Init+0x100>)
 80038ca:	f004 f953 	bl	8007b74 <HAL_TIMEx_MasterConfigSynchronization>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80038d4:	f000 fbc6 	bl	8004064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038d8:	2360      	movs	r3, #96	; 0x60
 80038da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 420-1;
 80038dc:	f240 13a3 	movw	r3, #419	; 0x1a3
 80038e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038ea:	1d3b      	adds	r3, r7, #4
 80038ec:	2200      	movs	r2, #0
 80038ee:	4619      	mov	r1, r3
 80038f0:	480d      	ldr	r0, [pc, #52]	; (8003928 <MX_TIM4_Init+0x100>)
 80038f2:	f003 fc7d 	bl	80071f0 <HAL_TIM_PWM_ConfigChannel>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80038fc:	f000 fbb2 	bl	8004064 <Error_Handler>
  }
  sConfigOC.Pulse = 210-1;
 8003900:	23d1      	movs	r3, #209	; 0xd1
 8003902:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	2204      	movs	r2, #4
 8003908:	4619      	mov	r1, r3
 800390a:	4807      	ldr	r0, [pc, #28]	; (8003928 <MX_TIM4_Init+0x100>)
 800390c:	f003 fc70 	bl	80071f0 <HAL_TIM_PWM_ConfigChannel>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8003916:	f000 fba5 	bl	8004064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800391a:	4803      	ldr	r0, [pc, #12]	; (8003928 <MX_TIM4_Init+0x100>)
 800391c:	f000 fd88 	bl	8004430 <HAL_TIM_MspPostInit>

}
 8003920:	bf00      	nop
 8003922:	3738      	adds	r7, #56	; 0x38
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	200019d4 	.word	0x200019d4
 800392c:	40000800 	.word	0x40000800

08003930 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003936:	f107 0308 	add.w	r3, r7, #8
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	605a      	str	r2, [r3, #4]
 8003940:	609a      	str	r2, [r3, #8]
 8003942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003944:	463b      	mov	r3, r7
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800394c:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <MX_TIM5_Init+0x94>)
 800394e:	4a1e      	ldr	r2, [pc, #120]	; (80039c8 <MX_TIM5_Init+0x98>)
 8003950:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8003952:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <MX_TIM5_Init+0x94>)
 8003954:	2253      	movs	r2, #83	; 0x53
 8003956:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003958:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <MX_TIM5_Init+0x94>)
 800395a:	2200      	movs	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800395e:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <MX_TIM5_Init+0x94>)
 8003960:	f04f 32ff 	mov.w	r2, #4294967295
 8003964:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003966:	4b17      	ldr	r3, [pc, #92]	; (80039c4 <MX_TIM5_Init+0x94>)
 8003968:	2200      	movs	r2, #0
 800396a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800396c:	4b15      	ldr	r3, [pc, #84]	; (80039c4 <MX_TIM5_Init+0x94>)
 800396e:	2200      	movs	r2, #0
 8003970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003972:	4814      	ldr	r0, [pc, #80]	; (80039c4 <MX_TIM5_Init+0x94>)
 8003974:	f003 f8ea 	bl	8006b4c <HAL_TIM_Base_Init>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800397e:	f000 fb71 	bl	8004064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003986:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003988:	f107 0308 	add.w	r3, r7, #8
 800398c:	4619      	mov	r1, r3
 800398e:	480d      	ldr	r0, [pc, #52]	; (80039c4 <MX_TIM5_Init+0x94>)
 8003990:	f003 fcf0 	bl	8007374 <HAL_TIM_ConfigClockSource>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800399a:	f000 fb63 	bl	8004064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800399e:	2300      	movs	r3, #0
 80039a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039a2:	2300      	movs	r3, #0
 80039a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80039a6:	463b      	mov	r3, r7
 80039a8:	4619      	mov	r1, r3
 80039aa:	4806      	ldr	r0, [pc, #24]	; (80039c4 <MX_TIM5_Init+0x94>)
 80039ac:	f004 f8e2 	bl	8007b74 <HAL_TIMEx_MasterConfigSynchronization>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80039b6:	f000 fb55 	bl	8004064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80039ba:	bf00      	nop
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20001a1c 	.word	0x20001a1c
 80039c8:	40000c00 	.word	0x40000c00

080039cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039d2:	463b      	mov	r3, r7
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80039da:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <MX_TIM6_Init+0x64>)
 80039dc:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <MX_TIM6_Init+0x68>)
 80039de:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 80039e0:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <MX_TIM6_Init+0x64>)
 80039e2:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80039e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039e8:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <MX_TIM6_Init+0x64>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 80039ee:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <MX_TIM6_Init+0x64>)
 80039f0:	22c7      	movs	r2, #199	; 0xc7
 80039f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039f4:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <MX_TIM6_Init+0x64>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80039fa:	480d      	ldr	r0, [pc, #52]	; (8003a30 <MX_TIM6_Init+0x64>)
 80039fc:	f003 f8a6 	bl	8006b4c <HAL_TIM_Base_Init>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003a06:	f000 fb2d 	bl	8004064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a12:	463b      	mov	r3, r7
 8003a14:	4619      	mov	r1, r3
 8003a16:	4806      	ldr	r0, [pc, #24]	; (8003a30 <MX_TIM6_Init+0x64>)
 8003a18:	f004 f8ac 	bl	8007b74 <HAL_TIMEx_MasterConfigSynchronization>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003a22:	f000 fb1f 	bl	8004064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20001a64 	.word	0x20001a64
 8003a34:	40001000 	.word	0x40001000

08003a38 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b096      	sub	sp, #88	; 0x58
 8003a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	609a      	str	r2, [r3, #8]
 8003a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	605a      	str	r2, [r3, #4]
 8003a60:	609a      	str	r2, [r3, #8]
 8003a62:	60da      	str	r2, [r3, #12]
 8003a64:	611a      	str	r2, [r3, #16]
 8003a66:	615a      	str	r2, [r3, #20]
 8003a68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a6a:	1d3b      	adds	r3, r7, #4
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f005 fa43 	bl	8008efc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003a76:	4b3f      	ldr	r3, [pc, #252]	; (8003b74 <MX_TIM8_Init+0x13c>)
 8003a78:	4a3f      	ldr	r2, [pc, #252]	; (8003b78 <MX_TIM8_Init+0x140>)
 8003a7a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003a7c:	4b3d      	ldr	r3, [pc, #244]	; (8003b74 <MX_TIM8_Init+0x13c>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a82:	4b3c      	ldr	r3, [pc, #240]	; (8003b74 <MX_TIM8_Init+0x13c>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16800-1;
 8003a88:	4b3a      	ldr	r3, [pc, #232]	; (8003b74 <MX_TIM8_Init+0x13c>)
 8003a8a:	f244 129f 	movw	r2, #16799	; 0x419f
 8003a8e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a90:	4b38      	ldr	r3, [pc, #224]	; (8003b74 <MX_TIM8_Init+0x13c>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003a96:	4b37      	ldr	r3, [pc, #220]	; (8003b74 <MX_TIM8_Init+0x13c>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a9c:	4b35      	ldr	r3, [pc, #212]	; (8003b74 <MX_TIM8_Init+0x13c>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003aa2:	4834      	ldr	r0, [pc, #208]	; (8003b74 <MX_TIM8_Init+0x13c>)
 8003aa4:	f003 f852 	bl	8006b4c <HAL_TIM_Base_Init>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8003aae:	f000 fad9 	bl	8004064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003ab8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003abc:	4619      	mov	r1, r3
 8003abe:	482d      	ldr	r0, [pc, #180]	; (8003b74 <MX_TIM8_Init+0x13c>)
 8003ac0:	f003 fc58 	bl	8007374 <HAL_TIM_ConfigClockSource>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003aca:	f000 facb 	bl	8004064 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003ace:	4829      	ldr	r0, [pc, #164]	; (8003b74 <MX_TIM8_Init+0x13c>)
 8003ad0:	f003 f964 	bl	8006d9c <HAL_TIM_PWM_Init>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003ada:	f000 fac3 	bl	8004064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003ae6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003aea:	4619      	mov	r1, r3
 8003aec:	4821      	ldr	r0, [pc, #132]	; (8003b74 <MX_TIM8_Init+0x13c>)
 8003aee:	f004 f841 	bl	8007b74 <HAL_TIMEx_MasterConfigSynchronization>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003af8:	f000 fab4 	bl	8004064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003afc:	2360      	movs	r3, #96	; 0x60
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2100-1;
 8003b00:	f640 0333 	movw	r3, #2099	; 0x833
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b06:	2300      	movs	r3, #0
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b16:	2300      	movs	r3, #0
 8003b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b1e:	2208      	movs	r2, #8
 8003b20:	4619      	mov	r1, r3
 8003b22:	4814      	ldr	r0, [pc, #80]	; (8003b74 <MX_TIM8_Init+0x13c>)
 8003b24:	f003 fb64 	bl	80071f0 <HAL_TIM_PWM_ConfigChannel>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8003b2e:	f000 fa99 	bl	8004064 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003b50:	1d3b      	adds	r3, r7, #4
 8003b52:	4619      	mov	r1, r3
 8003b54:	4807      	ldr	r0, [pc, #28]	; (8003b74 <MX_TIM8_Init+0x13c>)
 8003b56:	f004 f889 	bl	8007c6c <HAL_TIMEx_ConfigBreakDeadTime>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8003b60:	f000 fa80 	bl	8004064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003b64:	4803      	ldr	r0, [pc, #12]	; (8003b74 <MX_TIM8_Init+0x13c>)
 8003b66:	f000 fc63 	bl	8004430 <HAL_TIM_MspPostInit>

}
 8003b6a:	bf00      	nop
 8003b6c:	3758      	adds	r7, #88	; 0x58
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20001aac 	.word	0x20001aac
 8003b78:	40010400 	.word	0x40010400

08003b7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b80:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <MX_USART1_UART_Init+0x4c>)
 8003b82:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <MX_USART1_UART_Init+0x50>)
 8003b84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b86:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <MX_USART1_UART_Init+0x4c>)
 8003b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b8e:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <MX_USART1_UART_Init+0x4c>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <MX_USART1_UART_Init+0x4c>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <MX_USART1_UART_Init+0x4c>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ba0:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <MX_USART1_UART_Init+0x4c>)
 8003ba2:	220c      	movs	r2, #12
 8003ba4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ba6:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <MX_USART1_UART_Init+0x4c>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <MX_USART1_UART_Init+0x4c>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bb2:	4805      	ldr	r0, [pc, #20]	; (8003bc8 <MX_USART1_UART_Init+0x4c>)
 8003bb4:	f004 f8c0 	bl	8007d38 <HAL_UART_Init>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003bbe:	f000 fa51 	bl	8004064 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20001af4 	.word	0x20001af4
 8003bcc:	40011000 	.word	0x40011000

08003bd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <MX_DMA_Init+0x4c>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	4a0f      	ldr	r2, [pc, #60]	; (8003c1c <MX_DMA_Init+0x4c>)
 8003be0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003be4:	6313      	str	r3, [r2, #48]	; 0x30
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <MX_DMA_Init+0x4c>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	2038      	movs	r0, #56	; 0x38
 8003bf8:	f001 fccf 	bl	800559a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003bfc:	2038      	movs	r0, #56	; 0x38
 8003bfe:	f001 fce8 	bl	80055d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 8003c02:	2200      	movs	r2, #0
 8003c04:	2101      	movs	r1, #1
 8003c06:	203a      	movs	r0, #58	; 0x3a
 8003c08:	f001 fcc7 	bl	800559a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003c0c:	203a      	movs	r0, #58	; 0x3a
 8003c0e:	f001 fce0 	bl	80055d2 <HAL_NVIC_EnableIRQ>

}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40023800 	.word	0x40023800

08003c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08c      	sub	sp, #48	; 0x30
 8003c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c26:	f107 031c 	add.w	r3, r7, #28
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
 8003c30:	609a      	str	r2, [r3, #8]
 8003c32:	60da      	str	r2, [r3, #12]
 8003c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	4b56      	ldr	r3, [pc, #344]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	4a55      	ldr	r2, [pc, #340]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c44:	6313      	str	r3, [r2, #48]	; 0x30
 8003c46:	4b53      	ldr	r3, [pc, #332]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	4b4f      	ldr	r3, [pc, #316]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4a4e      	ldr	r2, [pc, #312]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003c5c:	f043 0304 	orr.w	r3, r3, #4
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b4c      	ldr	r3, [pc, #304]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	4b48      	ldr	r3, [pc, #288]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	4a47      	ldr	r2, [pc, #284]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7e:	4b45      	ldr	r3, [pc, #276]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	4a40      	ldr	r2, [pc, #256]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003c94:	f043 0302 	orr.w	r3, r3, #2
 8003c98:	6313      	str	r3, [r2, #48]	; 0x30
 8003c9a:	4b3e      	ldr	r3, [pc, #248]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	4b3a      	ldr	r3, [pc, #232]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	4a39      	ldr	r2, [pc, #228]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003cb0:	f043 0310 	orr.w	r3, r3, #16
 8003cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb6:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	4b33      	ldr	r3, [pc, #204]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	4a32      	ldr	r2, [pc, #200]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003ccc:	f043 0308 	orr.w	r3, r3, #8
 8003cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd2:	4b30      	ldr	r3, [pc, #192]	; (8003d94 <MX_GPIO_Init+0x174>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	607b      	str	r3, [r7, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GateH1_A_Pin|GateH1_B_Pin, GPIO_PIN_RESET);
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2130      	movs	r1, #48	; 0x30
 8003ce2:	482d      	ldr	r0, [pc, #180]	; (8003d98 <MX_GPIO_Init+0x178>)
 8003ce4:	f002 fa2e 	bl	8006144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Gates1_A_Dis_Pin|Gates1_B_Dis_Pin|Gates2_A_Dis_Pin|Gates2_B_Dis_Pin, GPIO_PIN_RESET);
 8003ce8:	2200      	movs	r2, #0
 8003cea:	210f      	movs	r1, #15
 8003cec:	482b      	ldr	r0, [pc, #172]	; (8003d9c <MX_GPIO_Init+0x17c>)
 8003cee:	f002 fa29 	bl	8006144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cf8:	4829      	ldr	r0, [pc, #164]	; (8003da0 <MX_GPIO_Init+0x180>)
 8003cfa:	f002 fa23 	bl	8006144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GateH2_A_Pin|GateH2_B_Pin, GPIO_PIN_RESET);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003d04:	4827      	ldr	r0, [pc, #156]	; (8003da4 <MX_GPIO_Init+0x184>)
 8003d06:	f002 fa1d 	bl	8006144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disable_DC_DC_GPIO_Port, Disable_DC_DC_Pin, GPIO_PIN_SET);
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d10:	4821      	ldr	r0, [pc, #132]	; (8003d98 <MX_GPIO_Init+0x178>)
 8003d12:	f002 fa17 	bl	8006144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GateH1_A_Pin GateH1_B_Pin Disable_DC_DC_Pin */
  GPIO_InitStruct.Pin = GateH1_A_Pin|GateH1_B_Pin|Disable_DC_DC_Pin;
 8003d16:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d24:	2300      	movs	r3, #0
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d28:	f107 031c 	add.w	r3, r7, #28
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	481a      	ldr	r0, [pc, #104]	; (8003d98 <MX_GPIO_Init+0x178>)
 8003d30:	f002 f86c 	bl	8005e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : Gates1_A_Dis_Pin Gates1_B_Dis_Pin Gates2_A_Dis_Pin Gates2_B_Dis_Pin */
  GPIO_InitStruct.Pin = Gates1_A_Dis_Pin|Gates1_B_Dis_Pin|Gates2_A_Dis_Pin|Gates2_B_Dis_Pin;
 8003d34:	230f      	movs	r3, #15
 8003d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d40:	2300      	movs	r3, #0
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d44:	f107 031c 	add.w	r3, r7, #28
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4814      	ldr	r0, [pc, #80]	; (8003d9c <MX_GPIO_Init+0x17c>)
 8003d4c:	f002 f85e 	bl	8005e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003d50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d56:	2301      	movs	r3, #1
 8003d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d62:	f107 031c 	add.w	r3, r7, #28
 8003d66:	4619      	mov	r1, r3
 8003d68:	480d      	ldr	r0, [pc, #52]	; (8003da0 <MX_GPIO_Init+0x180>)
 8003d6a:	f002 f84f 	bl	8005e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : GateH2_A_Pin GateH2_B_Pin */
  GPIO_InitStruct.Pin = GateH2_A_Pin|GateH2_B_Pin;
 8003d6e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d74:	2301      	movs	r3, #1
 8003d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d80:	f107 031c 	add.w	r3, r7, #28
 8003d84:	4619      	mov	r1, r3
 8003d86:	4807      	ldr	r0, [pc, #28]	; (8003da4 <MX_GPIO_Init+0x184>)
 8003d88:	f002 f840 	bl	8005e0c <HAL_GPIO_Init>

}
 8003d8c:	bf00      	nop
 8003d8e:	3730      	adds	r7, #48	; 0x30
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40023800 	.word	0x40023800
 8003d98:	40020800 	.word	0x40020800
 8003d9c:	40020400 	.word	0x40020400
 8003da0:	40021000 	.word	0x40021000
 8003da4:	40020c00 	.word	0x40020c00

08003da8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003da8:	b580      	push	{r7, lr}
 8003daa:	ed2d 8b02 	vpush	{d8}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]

	if(htim == &htim1) {
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a87      	ldr	r2, [pc, #540]	; (8003fd4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d128      	bne.n	8003e0e <HAL_TIM_PeriodElapsedCallback+0x66>
		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
		uint32_t temp = __HAL_TIM_GET_COUNTER(&htim2);
 8003dbc:	4b86      	ldr	r3, [pc, #536]	; (8003fd8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	60fb      	str	r3, [r7, #12]
		freq = ((float)counterPeriod + 1) / (temp - counterValue) * TimerFreq;
 8003dc4:	4b85      	ldr	r3, [pc, #532]	; (8003fdc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	ee07 3a90 	vmov	s15, r3
 8003dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dd4:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003dd8:	4b81      	ldr	r3, [pc, #516]	; (8003fe0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	ee07 3a90 	vmov	s15, r3
 8003de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dec:	4b7d      	ldr	r3, [pc, #500]	; (8003fe4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003dee:	edd3 7a00 	vldr	s15, [r3]
 8003df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df6:	4b7c      	ldr	r3, [pc, #496]	; (8003fe8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003df8:	edc3 7a00 	vstr	s15, [r3]
		setFreq((valueTypes)freq);
 8003dfc:	4b7a      	ldr	r3, [pc, #488]	; (8003fe8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fe fcc5 	bl	8002790 <setFreq>
		counterValue = temp;
 8003e06:	4a76      	ldr	r2, [pc, #472]	; (8003fe0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6013      	str	r3, [r2, #0]
		setTemp2((valueTypes)(getTemp3455(dmaADC2buffer[1] * getTemp2_coeff().val_float)));
		setTemp3((valueTypes)(getTempPt1000(dmaADC2buffer[2] * getTemp3_coeff().val_float)));
		setTemp4((valueTypes)(getTempPt1000(dmaADC2buffer[3] * getTemp4_coeff().val_float)));
	}

}
 8003e0c:	e0dc      	b.n	8003fc8 <HAL_TIM_PeriodElapsedCallback+0x220>
	else if(htim == &htim6) {
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a76      	ldr	r2, [pc, #472]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	f040 80d8 	bne.w	8003fc8 <HAL_TIM_PeriodElapsedCallback+0x220>
		setU_24Vmeas((valueTypes)(dmaADC1buffer[0] * getU_24Vcoeff().val_float));
 8003e18:	4b75      	ldr	r3, [pc, #468]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	ee07 3a90 	vmov	s15, r3
 8003e20:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003e24:	f7fd fca8 	bl	8001778 <getU_24Vcoeff>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003e32:	ee17 3a90 	vmov	r3, s15
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fd fc5c 	bl	80016f4 <setU_24Vmeas>
		setU_PowerMeas((valueTypes)(dmaADC1buffer[1] * getU_PowerCoeff().val_float));
 8003e3c:	4b6c      	ldr	r3, [pc, #432]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003e3e:	885b      	ldrh	r3, [r3, #2]
 8003e40:	ee07 3a90 	vmov	s15, r3
 8003e44:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003e48:	f7fd fce4 	bl	8001814 <getU_PowerCoeff>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	ee07 3a90 	vmov	s15, r3
 8003e52:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003e56:	ee17 3a90 	vmov	r3, s15
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fd fc98 	bl	8001790 <setU_PowerMeas>
		setI_1A((valueTypes)(dmaADC1buffer[2] * getI_1A_Coeff().val_float));
 8003e60:	4b63      	ldr	r3, [pc, #396]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003e62:	889b      	ldrh	r3, [r3, #4]
 8003e64:	ee07 3a90 	vmov	s15, r3
 8003e68:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003e6c:	f7fd fd74 	bl	8001958 <getI_1A_Coeff>
 8003e70:	4603      	mov	r3, r0
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003e7a:	ee17 3a90 	vmov	r3, s15
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fd fcd4 	bl	800182c <setI_1A>
		setI_1B((valueTypes)(dmaADC1buffer[3] * getI_1B_Coeff().val_float));
 8003e84:	4b5a      	ldr	r3, [pc, #360]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003e86:	88db      	ldrh	r3, [r3, #6]
 8003e88:	ee07 3a90 	vmov	s15, r3
 8003e8c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003e90:	f7fd fd94 	bl	80019bc <getI_1B_Coeff>
 8003e94:	4603      	mov	r3, r0
 8003e96:	ee07 3a90 	vmov	s15, r3
 8003e9a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003e9e:	ee17 3a90 	vmov	r3, s15
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fd fcde 	bl	8001864 <setI_1B>
		setI_2A((valueTypes)(dmaADC1buffer[4] * getI_2A_Coeff().val_float));
 8003ea8:	4b51      	ldr	r3, [pc, #324]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003eaa:	891b      	ldrh	r3, [r3, #8]
 8003eac:	ee07 3a90 	vmov	s15, r3
 8003eb0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003eb4:	f7fd fdb4 	bl	8001a20 <getI_2A_Coeff>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003ec2:	ee17 3a90 	vmov	r3, s15
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fd fce8 	bl	800189c <setI_2A>
		setI_2B((valueTypes)(dmaADC1buffer[5] * getI_2B_Coeff().val_float));
 8003ecc:	4b48      	ldr	r3, [pc, #288]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003ece:	895b      	ldrh	r3, [r3, #10]
 8003ed0:	ee07 3a90 	vmov	s15, r3
 8003ed4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003ed8:	f7fd fdd4 	bl	8001a84 <getI_2B_Coeff>
 8003edc:	4603      	mov	r3, r0
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003ee6:	ee17 3a90 	vmov	r3, s15
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fd fcf2 	bl	80018d4 <setI_2B>
		setTemp1((valueTypes)(getTemp3455(dmaADC2buffer[0] * getTemp1_coeff().val_float)));
 8003ef0:	4b40      	ldr	r3, [pc, #256]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	ee07 3a90 	vmov	s15, r3
 8003ef8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003efc:	f7fd fe64 	bl	8001bc8 <getTemp1_coeff>
 8003f00:	4603      	mov	r3, r0
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f0e:	ee17 3a90 	vmov	r3, s15
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fcc3 	bl	80048a0 <getTemp3455>
 8003f1a:	ed87 0a00 	vstr	s0, [r7]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fd fdbb 	bl	8001a9c <setTemp1>
		setTemp2((valueTypes)(getTemp3455(dmaADC2buffer[1] * getTemp2_coeff().val_float)));
 8003f26:	4b33      	ldr	r3, [pc, #204]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003f28:	885b      	ldrh	r3, [r3, #2]
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003f32:	f7fd fe7b 	bl	8001c2c <getTemp2_coeff>
 8003f36:	4603      	mov	r3, r0
 8003f38:	ee07 3a90 	vmov	s15, r3
 8003f3c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f44:	ee17 3a90 	vmov	r3, s15
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fca8 	bl	80048a0 <getTemp3455>
 8003f50:	ed87 0a00 	vstr	s0, [r7]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fd fdbc 	bl	8001ad4 <setTemp2>
		setTemp3((valueTypes)(getTempPt1000(dmaADC2buffer[2] * getTemp3_coeff().val_float)));
 8003f5c:	4b25      	ldr	r3, [pc, #148]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003f5e:	889b      	ldrh	r3, [r3, #4]
 8003f60:	ee07 3a90 	vmov	s15, r3
 8003f64:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003f68:	f7fd fe92 	bl	8001c90 <getTemp3_coeff>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f7a:	ee17 3a90 	vmov	r3, s15
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fd0f 	bl	80049a4 <getTempPt1000>
 8003f86:	ed87 0a00 	vstr	s0, [r7]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fd fdbd 	bl	8001b0c <setTemp3>
		setTemp4((valueTypes)(getTempPt1000(dmaADC2buffer[3] * getTemp4_coeff().val_float)));
 8003f92:	4b18      	ldr	r3, [pc, #96]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003f94:	88db      	ldrh	r3, [r3, #6]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003f9e:	f7fd fea9 	bl	8001cf4 <getTemp4_coeff>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	ee07 3a90 	vmov	s15, r3
 8003fa8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fb0:	ee17 3a90 	vmov	r3, s15
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fcf4 	bl	80049a4 <getTempPt1000>
 8003fbc:	ed87 0a00 	vstr	s0, [r7]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fd fdbe 	bl	8001b44 <setTemp4>
}
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	ecbd 8b02 	vpop	{d8}
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	200018fc 	.word	0x200018fc
 8003fd8:	20001944 	.word	0x20001944
 8003fdc:	20001bdc 	.word	0x20001bdc
 8003fe0:	20001b38 	.word	0x20001b38
 8003fe4:	20001bd8 	.word	0x20001bd8
 8003fe8:	20001b3c 	.word	0x20001b3c
 8003fec:	20001a64 	.word	0x20001a64
 8003ff0:	20001bc4 	.word	0x20001bc4
 8003ff4:	20001bd0 	.word	0x20001bd0

08003ff8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
    if(RXbuffer[0] != EOL) {
 8004000:	4b13      	ldr	r3, [pc, #76]	; (8004050 <HAL_UART_RxCpltCallback+0x58>)
 8004002:	781a      	ldrb	r2, [r3, #0]
 8004004:	4b13      	ldr	r3, [pc, #76]	; (8004054 <HAL_UART_RxCpltCallback+0x5c>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d00d      	beq.n	8004028 <HAL_UART_RxCpltCallback+0x30>
    	RXbufferLong[RXbufferElem] = RXbuffer[0];
 800400c:	4b12      	ldr	r3, [pc, #72]	; (8004058 <HAL_UART_RxCpltCallback+0x60>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <HAL_UART_RxCpltCallback+0x58>)
 8004014:	7819      	ldrb	r1, [r3, #0]
 8004016:	4b11      	ldr	r3, [pc, #68]	; (800405c <HAL_UART_RxCpltCallback+0x64>)
 8004018:	5499      	strb	r1, [r3, r2]
    	RXbufferElem++;
 800401a:	4b0f      	ldr	r3, [pc, #60]	; (8004058 <HAL_UART_RxCpltCallback+0x60>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	3301      	adds	r3, #1
 8004020:	b2da      	uxtb	r2, r3
 8004022:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <HAL_UART_RxCpltCallback+0x60>)
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	e00a      	b.n	800403e <HAL_UART_RxCpltCallback+0x46>
    }
    else {
    	RXbufferLong[RXbufferElem] = '\0';
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_UART_RxCpltCallback+0x60>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_UART_RxCpltCallback+0x64>)
 8004030:	2100      	movs	r1, #0
 8004032:	5499      	strb	r1, [r3, r2]
    	commandSearch();
 8004034:	f7fe fe4a 	bl	8002ccc <commandSearch>
    	RXbufferElem = 0;
 8004038:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_UART_RxCpltCallback+0x60>)
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, RXbuffer, 1);
 800403e:	2201      	movs	r2, #1
 8004040:	4903      	ldr	r1, [pc, #12]	; (8004050 <HAL_UART_RxCpltCallback+0x58>)
 8004042:	4807      	ldr	r0, [pc, #28]	; (8004060 <HAL_UART_RxCpltCallback+0x68>)
 8004044:	f003 ff57 	bl	8007ef6 <HAL_UART_Receive_IT>
}
 8004048:	bf00      	nop
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20001bc0 	.word	0x20001bc0
 8004054:	20000e34 	.word	0x20000e34
 8004058:	20001bc1 	.word	0x20001bc1
 800405c:	20001b40 	.word	0x20001b40
 8004060:	20001af4 	.word	0x20001af4

08004064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004068:	b672      	cpsid	i
}
 800406a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800406c:	e7fe      	b.n	800406c <Error_Handler+0x8>
	...

08004070 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	4b10      	ldr	r3, [pc, #64]	; (80040bc <HAL_MspInit+0x4c>)
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	4a0f      	ldr	r2, [pc, #60]	; (80040bc <HAL_MspInit+0x4c>)
 8004080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004084:	6453      	str	r3, [r2, #68]	; 0x44
 8004086:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <HAL_MspInit+0x4c>)
 8004088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800408e:	607b      	str	r3, [r7, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	4b09      	ldr	r3, [pc, #36]	; (80040bc <HAL_MspInit+0x4c>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	4a08      	ldr	r2, [pc, #32]	; (80040bc <HAL_MspInit+0x4c>)
 800409c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a0:	6413      	str	r3, [r2, #64]	; 0x40
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <HAL_MspInit+0x4c>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800

080040c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08c      	sub	sp, #48	; 0x30
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c8:	f107 031c 	add.w	r3, r7, #28
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	60da      	str	r2, [r3, #12]
 80040d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a5e      	ldr	r2, [pc, #376]	; (8004258 <HAL_ADC_MspInit+0x198>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d158      	bne.n	8004194 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	4b5d      	ldr	r3, [pc, #372]	; (800425c <HAL_ADC_MspInit+0x19c>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	4a5c      	ldr	r2, [pc, #368]	; (800425c <HAL_ADC_MspInit+0x19c>)
 80040ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f0:	6453      	str	r3, [r2, #68]	; 0x44
 80040f2:	4b5a      	ldr	r3, [pc, #360]	; (800425c <HAL_ADC_MspInit+0x19c>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	4b56      	ldr	r3, [pc, #344]	; (800425c <HAL_ADC_MspInit+0x19c>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	4a55      	ldr	r2, [pc, #340]	; (800425c <HAL_ADC_MspInit+0x19c>)
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	6313      	str	r3, [r2, #48]	; 0x30
 800410e:	4b53      	ldr	r3, [pc, #332]	; (800425c <HAL_ADC_MspInit+0x19c>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	697b      	ldr	r3, [r7, #20]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = U_Heater_Meas_Pin|U_POWER_Meas_Pin|CurrMeas1_A_Pin|CurrMeas1_B_Pin
 800411a:	233f      	movs	r3, #63	; 0x3f
 800411c:	61fb      	str	r3, [r7, #28]
                          |CurrMeas2_A_Pin|CurrMeas2_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800411e:	2303      	movs	r3, #3
 8004120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004122:	2300      	movs	r3, #0
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004126:	f107 031c 	add.w	r3, r7, #28
 800412a:	4619      	mov	r1, r3
 800412c:	484c      	ldr	r0, [pc, #304]	; (8004260 <HAL_ADC_MspInit+0x1a0>)
 800412e:	f001 fe6d 	bl	8005e0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004132:	4b4c      	ldr	r3, [pc, #304]	; (8004264 <HAL_ADC_MspInit+0x1a4>)
 8004134:	4a4c      	ldr	r2, [pc, #304]	; (8004268 <HAL_ADC_MspInit+0x1a8>)
 8004136:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004138:	4b4a      	ldr	r3, [pc, #296]	; (8004264 <HAL_ADC_MspInit+0x1a4>)
 800413a:	2200      	movs	r2, #0
 800413c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800413e:	4b49      	ldr	r3, [pc, #292]	; (8004264 <HAL_ADC_MspInit+0x1a4>)
 8004140:	2200      	movs	r2, #0
 8004142:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004144:	4b47      	ldr	r3, [pc, #284]	; (8004264 <HAL_ADC_MspInit+0x1a4>)
 8004146:	2200      	movs	r2, #0
 8004148:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800414a:	4b46      	ldr	r3, [pc, #280]	; (8004264 <HAL_ADC_MspInit+0x1a4>)
 800414c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004150:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004152:	4b44      	ldr	r3, [pc, #272]	; (8004264 <HAL_ADC_MspInit+0x1a4>)
 8004154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004158:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800415a:	4b42      	ldr	r3, [pc, #264]	; (8004264 <HAL_ADC_MspInit+0x1a4>)
 800415c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004160:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004162:	4b40      	ldr	r3, [pc, #256]	; (8004264 <HAL_ADC_MspInit+0x1a4>)
 8004164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004168:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800416a:	4b3e      	ldr	r3, [pc, #248]	; (8004264 <HAL_ADC_MspInit+0x1a4>)
 800416c:	2200      	movs	r2, #0
 800416e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004170:	4b3c      	ldr	r3, [pc, #240]	; (8004264 <HAL_ADC_MspInit+0x1a4>)
 8004172:	2200      	movs	r2, #0
 8004174:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004176:	483b      	ldr	r0, [pc, #236]	; (8004264 <HAL_ADC_MspInit+0x1a4>)
 8004178:	f001 fa46 	bl	8005608 <HAL_DMA_Init>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004182:	f7ff ff6f 	bl	8004064 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a36      	ldr	r2, [pc, #216]	; (8004264 <HAL_ADC_MspInit+0x1a4>)
 800418a:	639a      	str	r2, [r3, #56]	; 0x38
 800418c:	4a35      	ldr	r2, [pc, #212]	; (8004264 <HAL_ADC_MspInit+0x1a4>)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004192:	e05d      	b.n	8004250 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a34      	ldr	r2, [pc, #208]	; (800426c <HAL_ADC_MspInit+0x1ac>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d158      	bne.n	8004250 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800419e:	2300      	movs	r3, #0
 80041a0:	613b      	str	r3, [r7, #16]
 80041a2:	4b2e      	ldr	r3, [pc, #184]	; (800425c <HAL_ADC_MspInit+0x19c>)
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	4a2d      	ldr	r2, [pc, #180]	; (800425c <HAL_ADC_MspInit+0x19c>)
 80041a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ac:	6453      	str	r3, [r2, #68]	; 0x44
 80041ae:	4b2b      	ldr	r3, [pc, #172]	; (800425c <HAL_ADC_MspInit+0x19c>)
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	4b27      	ldr	r3, [pc, #156]	; (800425c <HAL_ADC_MspInit+0x19c>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	4a26      	ldr	r2, [pc, #152]	; (800425c <HAL_ADC_MspInit+0x19c>)
 80041c4:	f043 0304 	orr.w	r3, r3, #4
 80041c8:	6313      	str	r3, [r2, #48]	; 0x30
 80041ca:	4b24      	ldr	r3, [pc, #144]	; (800425c <HAL_ADC_MspInit+0x19c>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TempMeas1_Pin|TempMeas2_Pin|TempMeas3_Pin|TempMeas4_Pin;
 80041d6:	230f      	movs	r3, #15
 80041d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041da:	2303      	movs	r3, #3
 80041dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041e2:	f107 031c 	add.w	r3, r7, #28
 80041e6:	4619      	mov	r1, r3
 80041e8:	4821      	ldr	r0, [pc, #132]	; (8004270 <HAL_ADC_MspInit+0x1b0>)
 80041ea:	f001 fe0f 	bl	8005e0c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80041ee:	4b21      	ldr	r3, [pc, #132]	; (8004274 <HAL_ADC_MspInit+0x1b4>)
 80041f0:	4a21      	ldr	r2, [pc, #132]	; (8004278 <HAL_ADC_MspInit+0x1b8>)
 80041f2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80041f4:	4b1f      	ldr	r3, [pc, #124]	; (8004274 <HAL_ADC_MspInit+0x1b4>)
 80041f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041fa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041fc:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <HAL_ADC_MspInit+0x1b4>)
 80041fe:	2200      	movs	r2, #0
 8004200:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004202:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <HAL_ADC_MspInit+0x1b4>)
 8004204:	2200      	movs	r2, #0
 8004206:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004208:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <HAL_ADC_MspInit+0x1b4>)
 800420a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800420e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004210:	4b18      	ldr	r3, [pc, #96]	; (8004274 <HAL_ADC_MspInit+0x1b4>)
 8004212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004216:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004218:	4b16      	ldr	r3, [pc, #88]	; (8004274 <HAL_ADC_MspInit+0x1b4>)
 800421a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800421e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004220:	4b14      	ldr	r3, [pc, #80]	; (8004274 <HAL_ADC_MspInit+0x1b4>)
 8004222:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004226:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004228:	4b12      	ldr	r3, [pc, #72]	; (8004274 <HAL_ADC_MspInit+0x1b4>)
 800422a:	2200      	movs	r2, #0
 800422c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800422e:	4b11      	ldr	r3, [pc, #68]	; (8004274 <HAL_ADC_MspInit+0x1b4>)
 8004230:	2200      	movs	r2, #0
 8004232:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004234:	480f      	ldr	r0, [pc, #60]	; (8004274 <HAL_ADC_MspInit+0x1b4>)
 8004236:	f001 f9e7 	bl	8005608 <HAL_DMA_Init>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8004240:	f7ff ff10 	bl	8004064 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a0b      	ldr	r2, [pc, #44]	; (8004274 <HAL_ADC_MspInit+0x1b4>)
 8004248:	639a      	str	r2, [r3, #56]	; 0x38
 800424a:	4a0a      	ldr	r2, [pc, #40]	; (8004274 <HAL_ADC_MspInit+0x1b4>)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004250:	bf00      	nop
 8004252:	3730      	adds	r7, #48	; 0x30
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40012000 	.word	0x40012000
 800425c:	40023800 	.word	0x40023800
 8004260:	40020000 	.word	0x40020000
 8004264:	20001830 	.word	0x20001830
 8004268:	40026410 	.word	0x40026410
 800426c:	40012100 	.word	0x40012100
 8004270:	40020800 	.word	0x40020800
 8004274:	20001890 	.word	0x20001890
 8004278:	40026440 	.word	0x40026440

0800427c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b090      	sub	sp, #64	; 0x40
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	609a      	str	r2, [r3, #8]
 8004290:	60da      	str	r2, [r3, #12]
 8004292:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a5d      	ldr	r2, [pc, #372]	; (8004410 <HAL_TIM_Base_MspInit+0x194>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d134      	bne.n	8004308 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800429e:	2300      	movs	r3, #0
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042a2:	4b5c      	ldr	r3, [pc, #368]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	4a5b      	ldr	r2, [pc, #364]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 80042a8:	f043 0301 	orr.w	r3, r3, #1
 80042ac:	6453      	str	r3, [r2, #68]	; 0x44
 80042ae:	4b59      	ldr	r3, [pc, #356]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042ba:	2300      	movs	r3, #0
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
 80042be:	4b55      	ldr	r3, [pc, #340]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	4a54      	ldr	r2, [pc, #336]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 80042c4:	f043 0310 	orr.w	r3, r3, #16
 80042c8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ca:	4b52      	ldr	r3, [pc, #328]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	f003 0310 	and.w	r3, r3, #16
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042da:	2302      	movs	r3, #2
 80042dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042de:	2300      	movs	r3, #0
 80042e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e2:	2300      	movs	r3, #0
 80042e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042e6:	2301      	movs	r3, #1
 80042e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042ee:	4619      	mov	r1, r3
 80042f0:	4849      	ldr	r0, [pc, #292]	; (8004418 <HAL_TIM_Base_MspInit+0x19c>)
 80042f2:	f001 fd8b 	bl	8005e0c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80042f6:	2200      	movs	r2, #0
 80042f8:	2100      	movs	r1, #0
 80042fa:	2019      	movs	r0, #25
 80042fc:	f001 f94d 	bl	800559a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004300:	2019      	movs	r0, #25
 8004302:	f001 f966 	bl	80055d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004306:	e07e      	b.n	8004406 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM2)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004310:	d10e      	bne.n	8004330 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004312:	2300      	movs	r3, #0
 8004314:	623b      	str	r3, [r7, #32]
 8004316:	4b3f      	ldr	r3, [pc, #252]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	4a3e      	ldr	r2, [pc, #248]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6413      	str	r3, [r2, #64]	; 0x40
 8004322:	4b3c      	ldr	r3, [pc, #240]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	623b      	str	r3, [r7, #32]
 800432c:	6a3b      	ldr	r3, [r7, #32]
}
 800432e:	e06a      	b.n	8004406 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM3)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a39      	ldr	r2, [pc, #228]	; (800441c <HAL_TIM_Base_MspInit+0x1a0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d10e      	bne.n	8004358 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	4b35      	ldr	r3, [pc, #212]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	4a34      	ldr	r2, [pc, #208]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 8004344:	f043 0302 	orr.w	r3, r3, #2
 8004348:	6413      	str	r3, [r2, #64]	; 0x40
 800434a:	4b32      	ldr	r3, [pc, #200]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	61fb      	str	r3, [r7, #28]
 8004354:	69fb      	ldr	r3, [r7, #28]
}
 8004356:	e056      	b.n	8004406 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM4)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a30      	ldr	r2, [pc, #192]	; (8004420 <HAL_TIM_Base_MspInit+0x1a4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10e      	bne.n	8004380 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	4b2b      	ldr	r3, [pc, #172]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	4a2a      	ldr	r2, [pc, #168]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 800436c:	f043 0304 	orr.w	r3, r3, #4
 8004370:	6413      	str	r3, [r2, #64]	; 0x40
 8004372:	4b28      	ldr	r3, [pc, #160]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	61bb      	str	r3, [r7, #24]
 800437c:	69bb      	ldr	r3, [r7, #24]
}
 800437e:	e042      	b.n	8004406 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM5)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a27      	ldr	r2, [pc, #156]	; (8004424 <HAL_TIM_Base_MspInit+0x1a8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10e      	bne.n	80043a8 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800438a:	2300      	movs	r3, #0
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	4b21      	ldr	r3, [pc, #132]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	4a20      	ldr	r2, [pc, #128]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 8004394:	f043 0308 	orr.w	r3, r3, #8
 8004398:	6413      	str	r3, [r2, #64]	; 0x40
 800439a:	4b1e      	ldr	r3, [pc, #120]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	697b      	ldr	r3, [r7, #20]
}
 80043a6:	e02e      	b.n	8004406 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM6)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1e      	ldr	r2, [pc, #120]	; (8004428 <HAL_TIM_Base_MspInit+0x1ac>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d116      	bne.n	80043e0 <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	4b17      	ldr	r3, [pc, #92]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	4a16      	ldr	r2, [pc, #88]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 80043bc:	f043 0310 	orr.w	r3, r3, #16
 80043c0:	6413      	str	r3, [r2, #64]	; 0x40
 80043c2:	4b14      	ldr	r3, [pc, #80]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	613b      	str	r3, [r7, #16]
 80043cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80043ce:	2200      	movs	r2, #0
 80043d0:	2103      	movs	r1, #3
 80043d2:	2036      	movs	r0, #54	; 0x36
 80043d4:	f001 f8e1 	bl	800559a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80043d8:	2036      	movs	r0, #54	; 0x36
 80043da:	f001 f8fa 	bl	80055d2 <HAL_NVIC_EnableIRQ>
}
 80043de:	e012      	b.n	8004406 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM8)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a11      	ldr	r2, [pc, #68]	; (800442c <HAL_TIM_Base_MspInit+0x1b0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d10d      	bne.n	8004406 <HAL_TIM_Base_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	4a08      	ldr	r2, [pc, #32]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 80043f4:	f043 0302 	orr.w	r3, r3, #2
 80043f8:	6453      	str	r3, [r2, #68]	; 0x44
 80043fa:	4b06      	ldr	r3, [pc, #24]	; (8004414 <HAL_TIM_Base_MspInit+0x198>)
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
}
 8004406:	bf00      	nop
 8004408:	3740      	adds	r7, #64	; 0x40
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40010000 	.word	0x40010000
 8004414:	40023800 	.word	0x40023800
 8004418:	40021000 	.word	0x40021000
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40001000 	.word	0x40001000
 800442c:	40010400 	.word	0x40010400

08004430 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08c      	sub	sp, #48	; 0x30
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004438:	f107 031c 	add.w	r3, r7, #28
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	609a      	str	r2, [r3, #8]
 8004444:	60da      	str	r2, [r3, #12]
 8004446:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a49      	ldr	r2, [pc, #292]	; (8004574 <HAL_TIM_MspPostInit+0x144>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d11f      	bne.n	8004492 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	4b48      	ldr	r3, [pc, #288]	; (8004578 <HAL_TIM_MspPostInit+0x148>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	4a47      	ldr	r2, [pc, #284]	; (8004578 <HAL_TIM_MspPostInit+0x148>)
 800445c:	f043 0310 	orr.w	r3, r3, #16
 8004460:	6313      	str	r3, [r2, #48]	; 0x30
 8004462:	4b45      	ldr	r3, [pc, #276]	; (8004578 <HAL_TIM_MspPostInit+0x148>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	61bb      	str	r3, [r7, #24]
 800446c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800446e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004474:	2302      	movs	r3, #2
 8004476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004478:	2300      	movs	r3, #0
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447c:	2300      	movs	r3, #0
 800447e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004480:	2301      	movs	r3, #1
 8004482:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004484:	f107 031c 	add.w	r3, r7, #28
 8004488:	4619      	mov	r1, r3
 800448a:	483c      	ldr	r0, [pc, #240]	; (800457c <HAL_TIM_MspPostInit+0x14c>)
 800448c:	f001 fcbe 	bl	8005e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004490:	e06c      	b.n	800456c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM3)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a3a      	ldr	r2, [pc, #232]	; (8004580 <HAL_TIM_MspPostInit+0x150>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d11e      	bne.n	80044da <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	4b35      	ldr	r3, [pc, #212]	; (8004578 <HAL_TIM_MspPostInit+0x148>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	4a34      	ldr	r2, [pc, #208]	; (8004578 <HAL_TIM_MspPostInit+0x148>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6313      	str	r3, [r2, #48]	; 0x30
 80044ac:	4b32      	ldr	r3, [pc, #200]	; (8004578 <HAL_TIM_MspPostInit+0x148>)
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GateL1_A_Pin|GateL1_B_Pin;
 80044b8:	23c0      	movs	r3, #192	; 0xc0
 80044ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044bc:	2302      	movs	r3, #2
 80044be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c4:	2300      	movs	r3, #0
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80044c8:	2302      	movs	r3, #2
 80044ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044cc:	f107 031c 	add.w	r3, r7, #28
 80044d0:	4619      	mov	r1, r3
 80044d2:	482c      	ldr	r0, [pc, #176]	; (8004584 <HAL_TIM_MspPostInit+0x154>)
 80044d4:	f001 fc9a 	bl	8005e0c <HAL_GPIO_Init>
}
 80044d8:	e048      	b.n	800456c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a2a      	ldr	r2, [pc, #168]	; (8004588 <HAL_TIM_MspPostInit+0x158>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d11f      	bne.n	8004524 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044e4:	2300      	movs	r3, #0
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	4b23      	ldr	r3, [pc, #140]	; (8004578 <HAL_TIM_MspPostInit+0x148>)
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	4a22      	ldr	r2, [pc, #136]	; (8004578 <HAL_TIM_MspPostInit+0x148>)
 80044ee:	f043 0308 	orr.w	r3, r3, #8
 80044f2:	6313      	str	r3, [r2, #48]	; 0x30
 80044f4:	4b20      	ldr	r3, [pc, #128]	; (8004578 <HAL_TIM_MspPostInit+0x148>)
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GateL2_A_Pin|GateL2_B_Pin;
 8004500:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004506:	2302      	movs	r3, #2
 8004508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450a:	2300      	movs	r3, #0
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450e:	2300      	movs	r3, #0
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004512:	2302      	movs	r3, #2
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004516:	f107 031c 	add.w	r3, r7, #28
 800451a:	4619      	mov	r1, r3
 800451c:	481b      	ldr	r0, [pc, #108]	; (800458c <HAL_TIM_MspPostInit+0x15c>)
 800451e:	f001 fc75 	bl	8005e0c <HAL_GPIO_Init>
}
 8004522:	e023      	b.n	800456c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM8)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a19      	ldr	r2, [pc, #100]	; (8004590 <HAL_TIM_MspPostInit+0x160>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d11e      	bne.n	800456c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	4b11      	ldr	r3, [pc, #68]	; (8004578 <HAL_TIM_MspPostInit+0x148>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	4a10      	ldr	r2, [pc, #64]	; (8004578 <HAL_TIM_MspPostInit+0x148>)
 8004538:	f043 0304 	orr.w	r3, r3, #4
 800453c:	6313      	str	r3, [r2, #48]	; 0x30
 800453e:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <HAL_TIM_MspPostInit+0x148>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Set_U_Heater_Pin;
 800454a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800454e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004550:	2302      	movs	r3, #2
 8004552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004554:	2300      	movs	r3, #0
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004558:	2300      	movs	r3, #0
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800455c:	2303      	movs	r3, #3
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Set_U_Heater_GPIO_Port, &GPIO_InitStruct);
 8004560:	f107 031c 	add.w	r3, r7, #28
 8004564:	4619      	mov	r1, r3
 8004566:	480b      	ldr	r0, [pc, #44]	; (8004594 <HAL_TIM_MspPostInit+0x164>)
 8004568:	f001 fc50 	bl	8005e0c <HAL_GPIO_Init>
}
 800456c:	bf00      	nop
 800456e:	3730      	adds	r7, #48	; 0x30
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40010000 	.word	0x40010000
 8004578:	40023800 	.word	0x40023800
 800457c:	40021000 	.word	0x40021000
 8004580:	40000400 	.word	0x40000400
 8004584:	40020000 	.word	0x40020000
 8004588:	40000800 	.word	0x40000800
 800458c:	40020c00 	.word	0x40020c00
 8004590:	40010400 	.word	0x40010400
 8004594:	40020800 	.word	0x40020800

08004598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08a      	sub	sp, #40	; 0x28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a0:	f107 0314 	add.w	r3, r7, #20
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	609a      	str	r2, [r3, #8]
 80045ac:	60da      	str	r2, [r3, #12]
 80045ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1d      	ldr	r2, [pc, #116]	; (800462c <HAL_UART_MspInit+0x94>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d133      	bne.n	8004622 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	4b1c      	ldr	r3, [pc, #112]	; (8004630 <HAL_UART_MspInit+0x98>)
 80045c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c2:	4a1b      	ldr	r2, [pc, #108]	; (8004630 <HAL_UART_MspInit+0x98>)
 80045c4:	f043 0310 	orr.w	r3, r3, #16
 80045c8:	6453      	str	r3, [r2, #68]	; 0x44
 80045ca:	4b19      	ldr	r3, [pc, #100]	; (8004630 <HAL_UART_MspInit+0x98>)
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	4b15      	ldr	r3, [pc, #84]	; (8004630 <HAL_UART_MspInit+0x98>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	4a14      	ldr	r2, [pc, #80]	; (8004630 <HAL_UART_MspInit+0x98>)
 80045e0:	f043 0302 	orr.w	r3, r3, #2
 80045e4:	6313      	str	r3, [r2, #48]	; 0x30
 80045e6:	4b12      	ldr	r3, [pc, #72]	; (8004630 <HAL_UART_MspInit+0x98>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80045f2:	23c0      	movs	r3, #192	; 0xc0
 80045f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f6:	2302      	movs	r3, #2
 80045f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045fe:	2303      	movs	r3, #3
 8004600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004602:	2307      	movs	r3, #7
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004606:	f107 0314 	add.w	r3, r7, #20
 800460a:	4619      	mov	r1, r3
 800460c:	4809      	ldr	r0, [pc, #36]	; (8004634 <HAL_UART_MspInit+0x9c>)
 800460e:	f001 fbfd 	bl	8005e0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8004612:	2200      	movs	r2, #0
 8004614:	2101      	movs	r1, #1
 8004616:	2025      	movs	r0, #37	; 0x25
 8004618:	f000 ffbf 	bl	800559a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800461c:	2025      	movs	r0, #37	; 0x25
 800461e:	f000 ffd8 	bl	80055d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004622:	bf00      	nop
 8004624:	3728      	adds	r7, #40	; 0x28
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40011000 	.word	0x40011000
 8004630:	40023800 	.word	0x40023800
 8004634:	40020400 	.word	0x40020400

08004638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800463c:	e7fe      	b.n	800463c <NMI_Handler+0x4>

0800463e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800463e:	b480      	push	{r7}
 8004640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004642:	e7fe      	b.n	8004642 <HardFault_Handler+0x4>

08004644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004648:	e7fe      	b.n	8004648 <MemManage_Handler+0x4>

0800464a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800464a:	b480      	push	{r7}
 800464c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800464e:	e7fe      	b.n	800464e <BusFault_Handler+0x4>

08004650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004654:	e7fe      	b.n	8004654 <UsageFault_Handler+0x4>

08004656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004656:	b480      	push	{r7}
 8004658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800465a:	bf00      	nop
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004668:	bf00      	nop
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004672:	b480      	push	{r7}
 8004674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004676:	bf00      	nop
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004684:	f000 fa7c 	bl	8004b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004688:	bf00      	nop
 800468a:	bd80      	pop	{r7, pc}

0800468c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004690:	4802      	ldr	r0, [pc, #8]	; (800469c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004692:	f002 fca5 	bl	8006fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004696:	bf00      	nop
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	200018fc 	.word	0x200018fc

080046a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80046a4:	4802      	ldr	r0, [pc, #8]	; (80046b0 <USART1_IRQHandler+0x10>)
 80046a6:	f003 fc57 	bl	8007f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80046aa:	bf00      	nop
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20001af4 	.word	0x20001af4

080046b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80046b8:	4802      	ldr	r0, [pc, #8]	; (80046c4 <TIM6_DAC_IRQHandler+0x10>)
 80046ba:	f002 fc91 	bl	8006fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80046be:	bf00      	nop
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20001a64 	.word	0x20001a64

080046c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80046cc:	4802      	ldr	r0, [pc, #8]	; (80046d8 <DMA2_Stream0_IRQHandler+0x10>)
 80046ce:	f001 f933 	bl	8005938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80046d2:	bf00      	nop
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20001830 	.word	0x20001830

080046dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80046e0:	4802      	ldr	r0, [pc, #8]	; (80046ec <DMA2_Stream2_IRQHandler+0x10>)
 80046e2:	f001 f929 	bl	8005938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80046e6:	bf00      	nop
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20001890 	.word	0x20001890

080046f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
	return 1;
 80046f4:	2301      	movs	r3, #1
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <_kill>:

int _kill(int pid, int sig)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800470a:	f004 fbab 	bl	8008e64 <__errno>
 800470e:	4603      	mov	r3, r0
 8004710:	2216      	movs	r2, #22
 8004712:	601a      	str	r2, [r3, #0]
	return -1;
 8004714:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <_exit>:

void _exit (int status)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004728:	f04f 31ff 	mov.w	r1, #4294967295
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff ffe7 	bl	8004700 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004732:	e7fe      	b.n	8004732 <_exit+0x12>

08004734 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	e00a      	b.n	800475c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004746:	f3af 8000 	nop.w
 800474a:	4601      	mov	r1, r0
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	60ba      	str	r2, [r7, #8]
 8004752:	b2ca      	uxtb	r2, r1
 8004754:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	3301      	adds	r3, #1
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	429a      	cmp	r2, r3
 8004762:	dbf0      	blt.n	8004746 <_read+0x12>
	}

return len;
 8004764:	687b      	ldr	r3, [r7, #4]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b086      	sub	sp, #24
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800477a:	2300      	movs	r3, #0
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	e009      	b.n	8004794 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	60ba      	str	r2, [r7, #8]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	3301      	adds	r3, #1
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	429a      	cmp	r2, r3
 800479a:	dbf1      	blt.n	8004780 <_write+0x12>
	}
	return len;
 800479c:	687b      	ldr	r3, [r7, #4]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <_close>:

int _close(int file)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
	return -1;
 80047ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047ce:	605a      	str	r2, [r3, #4]
	return 0;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <_isatty>:

int _isatty(int file)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
	return 1;
 80047e6:	2301      	movs	r3, #1
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
	return 0;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
	...

08004810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004818:	4a14      	ldr	r2, [pc, #80]	; (800486c <_sbrk+0x5c>)
 800481a:	4b15      	ldr	r3, [pc, #84]	; (8004870 <_sbrk+0x60>)
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004824:	4b13      	ldr	r3, [pc, #76]	; (8004874 <_sbrk+0x64>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d102      	bne.n	8004832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800482c:	4b11      	ldr	r3, [pc, #68]	; (8004874 <_sbrk+0x64>)
 800482e:	4a12      	ldr	r2, [pc, #72]	; (8004878 <_sbrk+0x68>)
 8004830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004832:	4b10      	ldr	r3, [pc, #64]	; (8004874 <_sbrk+0x64>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4413      	add	r3, r2
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	429a      	cmp	r2, r3
 800483e:	d207      	bcs.n	8004850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004840:	f004 fb10 	bl	8008e64 <__errno>
 8004844:	4603      	mov	r3, r0
 8004846:	220c      	movs	r2, #12
 8004848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800484a:	f04f 33ff 	mov.w	r3, #4294967295
 800484e:	e009      	b.n	8004864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004850:	4b08      	ldr	r3, [pc, #32]	; (8004874 <_sbrk+0x64>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004856:	4b07      	ldr	r3, [pc, #28]	; (8004874 <_sbrk+0x64>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4413      	add	r3, r2
 800485e:	4a05      	ldr	r2, [pc, #20]	; (8004874 <_sbrk+0x64>)
 8004860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004862:	68fb      	ldr	r3, [r7, #12]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20020000 	.word	0x20020000
 8004870:	00000400 	.word	0x00000400
 8004874:	20001be0 	.word	0x20001be0
 8004878:	20001bf8 	.word	0x20001bf8

0800487c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <SystemInit+0x20>)
 8004882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004886:	4a05      	ldr	r2, [pc, #20]	; (800489c <SystemInit+0x20>)
 8004888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800488c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004890:	bf00      	nop
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	e000ed00 	.word	0xe000ed00

080048a0 <getTemp3455>:
 *      Author: xottal
 */

#include "thermosensors.h"

float getTemp3455(uint16_t rawData) {
 80048a0:	b5b0      	push	{r4, r5, r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	80fb      	strh	r3, [r7, #6]
	if(rawData < rawValues3455[41] ||
 80048aa:	4b3a      	ldr	r3, [pc, #232]	; (8004994 <getTemp3455+0xf4>)
 80048ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048b0:	88fa      	ldrh	r2, [r7, #6]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d304      	bcc.n	80048c0 <getTemp3455+0x20>
		rawData > rawValues3455[0]) {
 80048b6:	4b37      	ldr	r3, [pc, #220]	; (8004994 <getTemp3455+0xf4>)
 80048b8:	881b      	ldrh	r3, [r3, #0]
	if(rawData < rawValues3455[41] ||
 80048ba:	88fa      	ldrh	r2, [r7, #6]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d901      	bls.n	80048c4 <getTemp3455+0x24>
		return 999.9;
 80048c0:	4b35      	ldr	r3, [pc, #212]	; (8004998 <getTemp3455+0xf8>)
 80048c2:	e05f      	b.n	8004984 <getTemp3455+0xe4>
	}
	else {
		for(int i = 1; i < 42; i++) {
 80048c4:	2301      	movs	r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	e058      	b.n	800497c <getTemp3455+0xdc>
			if(rawData >= rawValues3455[i]) {
 80048ca:	4a32      	ldr	r2, [pc, #200]	; (8004994 <getTemp3455+0xf4>)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048d2:	88fa      	ldrh	r2, [r7, #6]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d34e      	bcc.n	8004976 <getTemp3455+0xd6>
				float temp;
				temp = 5.0/(rawValues3455[i-1] - rawValues3455[i]) * (rawValues3455[i-1] - rawData) + i * 5.0 - 60; //C
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3b01      	subs	r3, #1
 80048dc:	4a2d      	ldr	r2, [pc, #180]	; (8004994 <getTemp3455+0xf4>)
 80048de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048e2:	4619      	mov	r1, r3
 80048e4:	4a2b      	ldr	r2, [pc, #172]	; (8004994 <getTemp3455+0xf4>)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048ec:	1acb      	subs	r3, r1, r3
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fb fe28 	bl	8000544 <__aeabi_i2d>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	f04f 0000 	mov.w	r0, #0
 80048fc:	4927      	ldr	r1, [pc, #156]	; (800499c <getTemp3455+0xfc>)
 80048fe:	f7fb ffb5 	bl	800086c <__aeabi_ddiv>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4614      	mov	r4, r2
 8004908:	461d      	mov	r5, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3b01      	subs	r3, #1
 800490e:	4a21      	ldr	r2, [pc, #132]	; (8004994 <getTemp3455+0xf4>)
 8004910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004914:	461a      	mov	r2, r3
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	4618      	mov	r0, r3
 800491c:	f7fb fe12 	bl	8000544 <__aeabi_i2d>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4620      	mov	r0, r4
 8004926:	4629      	mov	r1, r5
 8004928:	f7fb fe76 	bl	8000618 <__aeabi_dmul>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4614      	mov	r4, r2
 8004932:	461d      	mov	r5, r3
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f7fb fe05 	bl	8000544 <__aeabi_i2d>
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	4b17      	ldr	r3, [pc, #92]	; (800499c <getTemp3455+0xfc>)
 8004940:	f7fb fe6a 	bl	8000618 <__aeabi_dmul>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4620      	mov	r0, r4
 800494a:	4629      	mov	r1, r5
 800494c:	f7fb fcae 	bl	80002ac <__adddf3>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4610      	mov	r0, r2
 8004956:	4619      	mov	r1, r3
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <getTemp3455+0x100>)
 800495e:	f7fb fca3 	bl	80002a8 <__aeabi_dsub>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4610      	mov	r0, r2
 8004968:	4619      	mov	r1, r3
 800496a:	f7fc f94d 	bl	8000c08 <__aeabi_d2f>
 800496e:	4603      	mov	r3, r0
 8004970:	60bb      	str	r3, [r7, #8]
				return temp;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	e006      	b.n	8004984 <getTemp3455+0xe4>
		for(int i = 1; i < 42; i++) {
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3301      	adds	r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b29      	cmp	r3, #41	; 0x29
 8004980:	dda3      	ble.n	80048ca <getTemp3455+0x2a>
			}
		}
	}
}
 8004982:	e001      	b.n	8004988 <getTemp3455+0xe8>
 8004984:	ee07 3a90 	vmov	s15, r3
 8004988:	eeb0 0a67 	vmov.f32	s0, s15
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bdb0      	pop	{r4, r5, r7, pc}
 8004992:	bf00      	nop
 8004994:	20000e74 	.word	0x20000e74
 8004998:	4479f99a 	.word	0x4479f99a
 800499c:	40140000 	.word	0x40140000
 80049a0:	404e0000 	.word	0x404e0000

080049a4 <getTempPt1000>:

float getTempPt1000(uint16_t rawData) {
 80049a4:	b5b0      	push	{r4, r5, r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	80fb      	strh	r3, [r7, #6]
	if(rawData > rawValuesPt1000[50]) {
 80049ae:	4b33      	ldr	r3, [pc, #204]	; (8004a7c <getTempPt1000+0xd8>)
 80049b0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80049b4:	88fa      	ldrh	r2, [r7, #6]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d901      	bls.n	80049be <getTempPt1000+0x1a>
		return 999.9;
 80049ba:	4b31      	ldr	r3, [pc, #196]	; (8004a80 <getTempPt1000+0xdc>)
 80049bc:	e057      	b.n	8004a6e <getTempPt1000+0xca>
	}
	else {
		for(int i = 1; i < 51; i++) {
 80049be:	2301      	movs	r3, #1
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	e050      	b.n	8004a66 <getTempPt1000+0xc2>
			if(rawData <= rawValuesPt1000[i]) {
 80049c4:	4a2d      	ldr	r2, [pc, #180]	; (8004a7c <getTempPt1000+0xd8>)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d846      	bhi.n	8004a60 <getTempPt1000+0xbc>
				float temp;
				temp = 5.0/(rawValuesPt1000[i] - rawValuesPt1000[i-1]) * (rawData - rawValuesPt1000[i-1]) + (i-1) * 5.0; //C
 80049d2:	4a2a      	ldr	r2, [pc, #168]	; (8004a7c <getTempPt1000+0xd8>)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049da:	4619      	mov	r1, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3b01      	subs	r3, #1
 80049e0:	4a26      	ldr	r2, [pc, #152]	; (8004a7c <getTempPt1000+0xd8>)
 80049e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049e6:	1acb      	subs	r3, r1, r3
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fb fdab 	bl	8000544 <__aeabi_i2d>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	4923      	ldr	r1, [pc, #140]	; (8004a84 <getTempPt1000+0xe0>)
 80049f8:	f7fb ff38 	bl	800086c <__aeabi_ddiv>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4614      	mov	r4, r2
 8004a02:	461d      	mov	r5, r3
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	3a01      	subs	r2, #1
 8004a0a:	491c      	ldr	r1, [pc, #112]	; (8004a7c <getTempPt1000+0xd8>)
 8004a0c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004a10:	1a9b      	subs	r3, r3, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fb fd96 	bl	8000544 <__aeabi_i2d>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	4629      	mov	r1, r5
 8004a20:	f7fb fdfa 	bl	8000618 <__aeabi_dmul>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4614      	mov	r4, r2
 8004a2a:	461d      	mov	r5, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fb fd87 	bl	8000544 <__aeabi_i2d>
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	4b12      	ldr	r3, [pc, #72]	; (8004a84 <getTempPt1000+0xe0>)
 8004a3c:	f7fb fdec 	bl	8000618 <__aeabi_dmul>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4620      	mov	r0, r4
 8004a46:	4629      	mov	r1, r5
 8004a48:	f7fb fc30 	bl	80002ac <__adddf3>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4610      	mov	r0, r2
 8004a52:	4619      	mov	r1, r3
 8004a54:	f7fc f8d8 	bl	8000c08 <__aeabi_d2f>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	60bb      	str	r3, [r7, #8]
				return temp;
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	e006      	b.n	8004a6e <getTempPt1000+0xca>
		for(int i = 1; i < 51; i++) {
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	3301      	adds	r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b32      	cmp	r3, #50	; 0x32
 8004a6a:	ddab      	ble.n	80049c4 <getTempPt1000+0x20>
			}
		}
	}
}
 8004a6c:	e001      	b.n	8004a72 <getTempPt1000+0xce>
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eeb0 0a67 	vmov.f32	s0, s15
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a7c:	20000ec8 	.word	0x20000ec8
 8004a80:	4479f99a 	.word	0x4479f99a
 8004a84:	40140000 	.word	0x40140000

08004a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ac0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a8c:	480d      	ldr	r0, [pc, #52]	; (8004ac4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004a8e:	490e      	ldr	r1, [pc, #56]	; (8004ac8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004a90:	4a0e      	ldr	r2, [pc, #56]	; (8004acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a94:	e002      	b.n	8004a9c <LoopCopyDataInit>

08004a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a9a:	3304      	adds	r3, #4

08004a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004aa0:	d3f9      	bcc.n	8004a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004aa2:	4a0b      	ldr	r2, [pc, #44]	; (8004ad0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004aa4:	4c0b      	ldr	r4, [pc, #44]	; (8004ad4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004aa8:	e001      	b.n	8004aae <LoopFillZerobss>

08004aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004aac:	3204      	adds	r2, #4

08004aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ab0:	d3fb      	bcc.n	8004aaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ab2:	f7ff fee3 	bl	800487c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ab6:	f004 f9ed 	bl	8008e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004aba:	f7fe f9cd 	bl	8002e58 <main>
  bx  lr    
 8004abe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004ac0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ac8:	2000110c 	.word	0x2000110c
  ldr r2, =_sidata
 8004acc:	0800e8b8 	.word	0x0800e8b8
  ldr r2, =_sbss
 8004ad0:	2000110c 	.word	0x2000110c
  ldr r4, =_ebss
 8004ad4:	20001bf8 	.word	0x20001bf8

08004ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ad8:	e7fe      	b.n	8004ad8 <ADC_IRQHandler>
	...

08004adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ae0:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <HAL_Init+0x40>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a0d      	ldr	r2, [pc, #52]	; (8004b1c <HAL_Init+0x40>)
 8004ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004aec:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_Init+0x40>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <HAL_Init+0x40>)
 8004af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004af8:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <HAL_Init+0x40>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a07      	ldr	r2, [pc, #28]	; (8004b1c <HAL_Init+0x40>)
 8004afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b04:	2003      	movs	r0, #3
 8004b06:	f000 fd3d 	bl	8005584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b0a:	200f      	movs	r0, #15
 8004b0c:	f000 f808 	bl	8004b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b10:	f7ff faae 	bl	8004070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40023c00 	.word	0x40023c00

08004b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b28:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <HAL_InitTick+0x54>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <HAL_InitTick+0x58>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	4619      	mov	r1, r3
 8004b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fd55 	bl	80055ee <HAL_SYSTICK_Config>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e00e      	b.n	8004b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b0f      	cmp	r3, #15
 8004b52:	d80a      	bhi.n	8004b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b54:	2200      	movs	r2, #0
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	f04f 30ff 	mov.w	r0, #4294967295
 8004b5c:	f000 fd1d 	bl	800559a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b60:	4a06      	ldr	r2, [pc, #24]	; (8004b7c <HAL_InitTick+0x5c>)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	e000      	b.n	8004b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20000e70 	.word	0x20000e70
 8004b78:	20000f34 	.word	0x20000f34
 8004b7c:	20000f30 	.word	0x20000f30

08004b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b84:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <HAL_IncTick+0x20>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <HAL_IncTick+0x24>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4413      	add	r3, r2
 8004b90:	4a04      	ldr	r2, [pc, #16]	; (8004ba4 <HAL_IncTick+0x24>)
 8004b92:	6013      	str	r3, [r2, #0]
}
 8004b94:	bf00      	nop
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20000f34 	.word	0x20000f34
 8004ba4:	20001be4 	.word	0x20001be4

08004ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  return uwTick;
 8004bac:	4b03      	ldr	r3, [pc, #12]	; (8004bbc <HAL_GetTick+0x14>)
 8004bae:	681b      	ldr	r3, [r3, #0]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	20001be4 	.word	0x20001be4

08004bc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e033      	b.n	8004c3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff fa6e 	bl	80040c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d118      	bne.n	8004c30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c06:	f023 0302 	bic.w	r3, r3, #2
 8004c0a:	f043 0202 	orr.w	r2, r3, #2
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fa68 	bl	80050e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f023 0303 	bic.w	r3, r3, #3
 8004c26:	f043 0201 	orr.w	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	641a      	str	r2, [r3, #64]	; 0x40
 8004c2e:	e001      	b.n	8004c34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
	...

08004c48 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_ADC_Start_DMA+0x1e>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e0e9      	b.n	8004e3a <HAL_ADC_Start_DMA+0x1f2>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d018      	beq.n	8004cae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0201 	orr.w	r2, r2, #1
 8004c8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004c8c:	4b6d      	ldr	r3, [pc, #436]	; (8004e44 <HAL_ADC_Start_DMA+0x1fc>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a6d      	ldr	r2, [pc, #436]	; (8004e48 <HAL_ADC_Start_DMA+0x200>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	0c9a      	lsrs	r2, r3, #18
 8004c98:	4613      	mov	r3, r2
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	4413      	add	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004ca0:	e002      	b.n	8004ca8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f9      	bne.n	8004ca2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cbc:	d107      	bne.n	8004cce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ccc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	f040 80a1 	bne.w	8004e20 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d007      	beq.n	8004d10 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1c:	d106      	bne.n	8004d2c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	f023 0206 	bic.w	r2, r3, #6
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	645a      	str	r2, [r3, #68]	; 0x44
 8004d2a:	e002      	b.n	8004d32 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d3a:	4b44      	ldr	r3, [pc, #272]	; (8004e4c <HAL_ADC_Start_DMA+0x204>)
 8004d3c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	4a43      	ldr	r2, [pc, #268]	; (8004e50 <HAL_ADC_Start_DMA+0x208>)
 8004d44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	4a42      	ldr	r2, [pc, #264]	; (8004e54 <HAL_ADC_Start_DMA+0x20c>)
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	4a41      	ldr	r2, [pc, #260]	; (8004e58 <HAL_ADC_Start_DMA+0x210>)
 8004d54:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004d5e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004d6e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d7e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	334c      	adds	r3, #76	; 0x4c
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f000 fce8 	bl	8005764 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f003 031f 	and.w	r3, r3, #31
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d12a      	bne.n	8004df6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a2d      	ldr	r2, [pc, #180]	; (8004e5c <HAL_ADC_Start_DMA+0x214>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d015      	beq.n	8004dd6 <HAL_ADC_Start_DMA+0x18e>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a2c      	ldr	r2, [pc, #176]	; (8004e60 <HAL_ADC_Start_DMA+0x218>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d105      	bne.n	8004dc0 <HAL_ADC_Start_DMA+0x178>
 8004db4:	4b25      	ldr	r3, [pc, #148]	; (8004e4c <HAL_ADC_Start_DMA+0x204>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a27      	ldr	r2, [pc, #156]	; (8004e64 <HAL_ADC_Start_DMA+0x21c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d136      	bne.n	8004e38 <HAL_ADC_Start_DMA+0x1f0>
 8004dca:	4b20      	ldr	r3, [pc, #128]	; (8004e4c <HAL_ADC_Start_DMA+0x204>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d130      	bne.n	8004e38 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d129      	bne.n	8004e38 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004df2:	609a      	str	r2, [r3, #8]
 8004df4:	e020      	b.n	8004e38 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a18      	ldr	r2, [pc, #96]	; (8004e5c <HAL_ADC_Start_DMA+0x214>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d11b      	bne.n	8004e38 <HAL_ADC_Start_DMA+0x1f0>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d114      	bne.n	8004e38 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e1c:	609a      	str	r2, [r3, #8]
 8004e1e:	e00b      	b.n	8004e38 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	f043 0210 	orr.w	r2, r3, #16
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e30:	f043 0201 	orr.w	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000e70 	.word	0x20000e70
 8004e48:	431bde83 	.word	0x431bde83
 8004e4c:	40012300 	.word	0x40012300
 8004e50:	080052e1 	.word	0x080052e1
 8004e54:	0800539b 	.word	0x0800539b
 8004e58:	080053b7 	.word	0x080053b7
 8004e5c:	40012000 	.word	0x40012000
 8004e60:	40012100 	.word	0x40012100
 8004e64:	40012200 	.word	0x40012200

08004e68 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_ADC_ConfigChannel+0x1c>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e105      	b.n	80050cc <HAL_ADC_ConfigChannel+0x228>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b09      	cmp	r3, #9
 8004ece:	d925      	bls.n	8004f1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68d9      	ldr	r1, [r3, #12]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	461a      	mov	r2, r3
 8004ede:	4613      	mov	r3, r2
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	4413      	add	r3, r2
 8004ee4:	3b1e      	subs	r3, #30
 8004ee6:	2207      	movs	r2, #7
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	43da      	mvns	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	400a      	ands	r2, r1
 8004ef4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68d9      	ldr	r1, [r3, #12]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	4618      	mov	r0, r3
 8004f08:	4603      	mov	r3, r0
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	4403      	add	r3, r0
 8004f0e:	3b1e      	subs	r3, #30
 8004f10:	409a      	lsls	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	60da      	str	r2, [r3, #12]
 8004f1a:	e022      	b.n	8004f62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6919      	ldr	r1, [r3, #16]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	4413      	add	r3, r2
 8004f30:	2207      	movs	r2, #7
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	43da      	mvns	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	400a      	ands	r2, r1
 8004f3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6919      	ldr	r1, [r3, #16]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	4618      	mov	r0, r3
 8004f52:	4603      	mov	r3, r0
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	4403      	add	r3, r0
 8004f58:	409a      	lsls	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b06      	cmp	r3, #6
 8004f68:	d824      	bhi.n	8004fb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	3b05      	subs	r3, #5
 8004f7c:	221f      	movs	r2, #31
 8004f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f82:	43da      	mvns	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	400a      	ands	r2, r1
 8004f8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	4618      	mov	r0, r3
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	3b05      	subs	r3, #5
 8004fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8004fb2:	e04c      	b.n	800504e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b0c      	cmp	r3, #12
 8004fba:	d824      	bhi.n	8005006 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	3b23      	subs	r3, #35	; 0x23
 8004fce:	221f      	movs	r2, #31
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	43da      	mvns	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	400a      	ands	r2, r1
 8004fdc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	4618      	mov	r0, r3
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	3b23      	subs	r3, #35	; 0x23
 8004ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
 8005004:	e023      	b.n	800504e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	3b41      	subs	r3, #65	; 0x41
 8005018:	221f      	movs	r2, #31
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	43da      	mvns	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	400a      	ands	r2, r1
 8005026:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	4618      	mov	r0, r3
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	3b41      	subs	r3, #65	; 0x41
 8005042:	fa00 f203 	lsl.w	r2, r0, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800504e:	4b22      	ldr	r3, [pc, #136]	; (80050d8 <HAL_ADC_ConfigChannel+0x234>)
 8005050:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a21      	ldr	r2, [pc, #132]	; (80050dc <HAL_ADC_ConfigChannel+0x238>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d109      	bne.n	8005070 <HAL_ADC_ConfigChannel+0x1cc>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b12      	cmp	r3, #18
 8005062:	d105      	bne.n	8005070 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a19      	ldr	r2, [pc, #100]	; (80050dc <HAL_ADC_ConfigChannel+0x238>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d123      	bne.n	80050c2 <HAL_ADC_ConfigChannel+0x21e>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b10      	cmp	r3, #16
 8005080:	d003      	beq.n	800508a <HAL_ADC_ConfigChannel+0x1e6>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b11      	cmp	r3, #17
 8005088:	d11b      	bne.n	80050c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b10      	cmp	r3, #16
 800509c:	d111      	bne.n	80050c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800509e:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <HAL_ADC_ConfigChannel+0x23c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a10      	ldr	r2, [pc, #64]	; (80050e4 <HAL_ADC_ConfigChannel+0x240>)
 80050a4:	fba2 2303 	umull	r2, r3, r2, r3
 80050a8:	0c9a      	lsrs	r2, r3, #18
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80050b4:	e002      	b.n	80050bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	3b01      	subs	r3, #1
 80050ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f9      	bne.n	80050b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	40012300 	.word	0x40012300
 80050dc:	40012000 	.word	0x40012000
 80050e0:	20000e70 	.word	0x20000e70
 80050e4:	431bde83 	.word	0x431bde83

080050e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050f0:	4b79      	ldr	r3, [pc, #484]	; (80052d8 <ADC_Init+0x1f0>)
 80050f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	431a      	orrs	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800511c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6859      	ldr	r1, [r3, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	021a      	lsls	r2, r3, #8
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005140:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6859      	ldr	r1, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005162:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6899      	ldr	r1, [r3, #8]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517a:	4a58      	ldr	r2, [pc, #352]	; (80052dc <ADC_Init+0x1f4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d022      	beq.n	80051c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689a      	ldr	r2, [r3, #8]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800518e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6899      	ldr	r1, [r3, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80051b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6899      	ldr	r1, [r3, #8]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	609a      	str	r2, [r3, #8]
 80051c4:	e00f      	b.n	80051e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80051d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80051e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0202 	bic.w	r2, r2, #2
 80051f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6899      	ldr	r1, [r3, #8]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	7e1b      	ldrb	r3, [r3, #24]
 8005200:	005a      	lsls	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01b      	beq.n	800524c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005222:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005232:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6859      	ldr	r1, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	3b01      	subs	r3, #1
 8005240:	035a      	lsls	r2, r3, #13
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	605a      	str	r2, [r3, #4]
 800524a:	e007      	b.n	800525c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800525a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800526a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	3b01      	subs	r3, #1
 8005278:	051a      	lsls	r2, r3, #20
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005290:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6899      	ldr	r1, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800529e:	025a      	lsls	r2, r3, #9
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6899      	ldr	r1, [r3, #8]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	029a      	lsls	r2, r3, #10
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	609a      	str	r2, [r3, #8]
}
 80052cc:	bf00      	nop
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	40012300 	.word	0x40012300
 80052dc:	0f000001 	.word	0x0f000001

080052e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d13c      	bne.n	8005374 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d12b      	bne.n	800536c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005318:	2b00      	cmp	r3, #0
 800531a:	d127      	bne.n	800536c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005326:	2b00      	cmp	r3, #0
 8005328:	d006      	beq.n	8005338 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005334:	2b00      	cmp	r3, #0
 8005336:	d119      	bne.n	800536c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0220 	bic.w	r2, r2, #32
 8005346:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d105      	bne.n	800536c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	f043 0201 	orr.w	r2, r3, #1
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff fd7b 	bl	8004e68 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005372:	e00e      	b.n	8005392 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	f003 0310 	and.w	r3, r3, #16
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff fd85 	bl	8004e90 <HAL_ADC_ErrorCallback>
}
 8005386:	e004      	b.n	8005392 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4798      	blx	r3
}
 8005392:	bf00      	nop
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7ff fd67 	bl	8004e7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2240      	movs	r2, #64	; 0x40
 80053c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ce:	f043 0204 	orr.w	r2, r3, #4
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f7ff fd5a 	bl	8004e90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053dc:	bf00      	nop
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053f4:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <__NVIC_SetPriorityGrouping+0x44>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005400:	4013      	ands	r3, r2
 8005402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800540c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005416:	4a04      	ldr	r2, [pc, #16]	; (8005428 <__NVIC_SetPriorityGrouping+0x44>)
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	60d3      	str	r3, [r2, #12]
}
 800541c:	bf00      	nop
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	e000ed00 	.word	0xe000ed00

0800542c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005430:	4b04      	ldr	r3, [pc, #16]	; (8005444 <__NVIC_GetPriorityGrouping+0x18>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	0a1b      	lsrs	r3, r3, #8
 8005436:	f003 0307 	and.w	r3, r3, #7
}
 800543a:	4618      	mov	r0, r3
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	e000ed00 	.word	0xe000ed00

08005448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	4603      	mov	r3, r0
 8005450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005456:	2b00      	cmp	r3, #0
 8005458:	db0b      	blt.n	8005472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800545a:	79fb      	ldrb	r3, [r7, #7]
 800545c:	f003 021f 	and.w	r2, r3, #31
 8005460:	4907      	ldr	r1, [pc, #28]	; (8005480 <__NVIC_EnableIRQ+0x38>)
 8005462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005466:	095b      	lsrs	r3, r3, #5
 8005468:	2001      	movs	r0, #1
 800546a:	fa00 f202 	lsl.w	r2, r0, r2
 800546e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	e000e100 	.word	0xe000e100

08005484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	4603      	mov	r3, r0
 800548c:	6039      	str	r1, [r7, #0]
 800548e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005494:	2b00      	cmp	r3, #0
 8005496:	db0a      	blt.n	80054ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	b2da      	uxtb	r2, r3
 800549c:	490c      	ldr	r1, [pc, #48]	; (80054d0 <__NVIC_SetPriority+0x4c>)
 800549e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a2:	0112      	lsls	r2, r2, #4
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	440b      	add	r3, r1
 80054a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054ac:	e00a      	b.n	80054c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	4908      	ldr	r1, [pc, #32]	; (80054d4 <__NVIC_SetPriority+0x50>)
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	3b04      	subs	r3, #4
 80054bc:	0112      	lsls	r2, r2, #4
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	440b      	add	r3, r1
 80054c2:	761a      	strb	r2, [r3, #24]
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	e000e100 	.word	0xe000e100
 80054d4:	e000ed00 	.word	0xe000ed00

080054d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054d8:	b480      	push	{r7}
 80054da:	b089      	sub	sp, #36	; 0x24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f1c3 0307 	rsb	r3, r3, #7
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	bf28      	it	cs
 80054f6:	2304      	movcs	r3, #4
 80054f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	3304      	adds	r3, #4
 80054fe:	2b06      	cmp	r3, #6
 8005500:	d902      	bls.n	8005508 <NVIC_EncodePriority+0x30>
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	3b03      	subs	r3, #3
 8005506:	e000      	b.n	800550a <NVIC_EncodePriority+0x32>
 8005508:	2300      	movs	r3, #0
 800550a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800550c:	f04f 32ff 	mov.w	r2, #4294967295
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43da      	mvns	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	401a      	ands	r2, r3
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005520:	f04f 31ff 	mov.w	r1, #4294967295
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	fa01 f303 	lsl.w	r3, r1, r3
 800552a:	43d9      	mvns	r1, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005530:	4313      	orrs	r3, r2
         );
}
 8005532:	4618      	mov	r0, r3
 8005534:	3724      	adds	r7, #36	; 0x24
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
	...

08005540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3b01      	subs	r3, #1
 800554c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005550:	d301      	bcc.n	8005556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005552:	2301      	movs	r3, #1
 8005554:	e00f      	b.n	8005576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005556:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <SysTick_Config+0x40>)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3b01      	subs	r3, #1
 800555c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800555e:	210f      	movs	r1, #15
 8005560:	f04f 30ff 	mov.w	r0, #4294967295
 8005564:	f7ff ff8e 	bl	8005484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <SysTick_Config+0x40>)
 800556a:	2200      	movs	r2, #0
 800556c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800556e:	4b04      	ldr	r3, [pc, #16]	; (8005580 <SysTick_Config+0x40>)
 8005570:	2207      	movs	r2, #7
 8005572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	e000e010 	.word	0xe000e010

08005584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff ff29 	bl	80053e4 <__NVIC_SetPriorityGrouping>
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800559a:	b580      	push	{r7, lr}
 800559c:	b086      	sub	sp, #24
 800559e:	af00      	add	r7, sp, #0
 80055a0:	4603      	mov	r3, r0
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055ac:	f7ff ff3e 	bl	800542c <__NVIC_GetPriorityGrouping>
 80055b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	68b9      	ldr	r1, [r7, #8]
 80055b6:	6978      	ldr	r0, [r7, #20]
 80055b8:	f7ff ff8e 	bl	80054d8 <NVIC_EncodePriority>
 80055bc:	4602      	mov	r2, r0
 80055be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055c2:	4611      	mov	r1, r2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff ff5d 	bl	8005484 <__NVIC_SetPriority>
}
 80055ca:	bf00      	nop
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	4603      	mov	r3, r0
 80055da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff ff31 	bl	8005448 <__NVIC_EnableIRQ>
}
 80055e6:	bf00      	nop
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff ffa2 	bl	8005540 <SysTick_Config>
 80055fc:	4603      	mov	r3, r0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005614:	f7ff fac8 	bl	8004ba8 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e099      	b.n	8005758 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0201 	bic.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005644:	e00f      	b.n	8005666 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005646:	f7ff faaf 	bl	8004ba8 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b05      	cmp	r3, #5
 8005652:	d908      	bls.n	8005666 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2203      	movs	r2, #3
 800565e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e078      	b.n	8005758 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e8      	bne.n	8005646 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4b38      	ldr	r3, [pc, #224]	; (8005760 <HAL_DMA_Init+0x158>)
 8005680:	4013      	ands	r3, r2
 8005682:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005692:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800569e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d107      	bne.n	80056d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	4313      	orrs	r3, r2
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f023 0307 	bic.w	r3, r3, #7
 80056e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d117      	bne.n	800572a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00e      	beq.n	800572a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fb01 	bl	8005d14 <DMA_CheckFifoParam>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d008      	beq.n	800572a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2240      	movs	r2, #64	; 0x40
 800571c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005726:	2301      	movs	r3, #1
 8005728:	e016      	b.n	8005758 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fab8 	bl	8005ca8 <DMA_CalcBaseAndBitshift>
 8005738:	4603      	mov	r3, r0
 800573a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005740:	223f      	movs	r2, #63	; 0x3f
 8005742:	409a      	lsls	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	f010803f 	.word	0xf010803f

08005764 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_DMA_Start_IT+0x26>
 8005786:	2302      	movs	r3, #2
 8005788:	e040      	b.n	800580c <HAL_DMA_Start_IT+0xa8>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b01      	cmp	r3, #1
 800579c:	d12f      	bne.n	80057fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2202      	movs	r2, #2
 80057a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	68b9      	ldr	r1, [r7, #8]
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 fa4a 	bl	8005c4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057bc:	223f      	movs	r2, #63	; 0x3f
 80057be:	409a      	lsls	r2, r3
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0216 	orr.w	r2, r2, #22
 80057d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d007      	beq.n	80057ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0208 	orr.w	r2, r2, #8
 80057ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	e005      	b.n	800580a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005806:	2302      	movs	r3, #2
 8005808:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800580a:	7dfb      	ldrb	r3, [r7, #23]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005820:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005822:	f7ff f9c1 	bl	8004ba8 <HAL_GetTick>
 8005826:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d008      	beq.n	8005846 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2280      	movs	r2, #128	; 0x80
 8005838:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e052      	b.n	80058ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0216 	bic.w	r2, r2, #22
 8005854:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695a      	ldr	r2, [r3, #20]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005864:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d103      	bne.n	8005876 <HAL_DMA_Abort+0x62>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005872:	2b00      	cmp	r3, #0
 8005874:	d007      	beq.n	8005886 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0208 	bic.w	r2, r2, #8
 8005884:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0201 	bic.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005896:	e013      	b.n	80058c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005898:	f7ff f986 	bl	8004ba8 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b05      	cmp	r3, #5
 80058a4:	d90c      	bls.n	80058c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2203      	movs	r2, #3
 80058b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e015      	b.n	80058ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e4      	bne.n	8005898 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d2:	223f      	movs	r2, #63	; 0x3f
 80058d4:	409a      	lsls	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d004      	beq.n	8005912 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2280      	movs	r2, #128	; 0x80
 800590c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e00c      	b.n	800592c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2205      	movs	r2, #5
 8005916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0201 	bic.w	r2, r2, #1
 8005928:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005944:	4b8e      	ldr	r3, [pc, #568]	; (8005b80 <HAL_DMA_IRQHandler+0x248>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a8e      	ldr	r2, [pc, #568]	; (8005b84 <HAL_DMA_IRQHandler+0x24c>)
 800594a:	fba2 2303 	umull	r2, r3, r2, r3
 800594e:	0a9b      	lsrs	r3, r3, #10
 8005950:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005956:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005962:	2208      	movs	r2, #8
 8005964:	409a      	lsls	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4013      	ands	r3, r2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01a      	beq.n	80059a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d013      	beq.n	80059a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0204 	bic.w	r2, r2, #4
 800598a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005990:	2208      	movs	r2, #8
 8005992:	409a      	lsls	r2, r3
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599c:	f043 0201 	orr.w	r2, r3, #1
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a8:	2201      	movs	r2, #1
 80059aa:	409a      	lsls	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4013      	ands	r3, r2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d012      	beq.n	80059da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00b      	beq.n	80059da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c6:	2201      	movs	r2, #1
 80059c8:	409a      	lsls	r2, r3
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d2:	f043 0202 	orr.w	r2, r3, #2
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059de:	2204      	movs	r2, #4
 80059e0:	409a      	lsls	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4013      	ands	r3, r2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d012      	beq.n	8005a10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00b      	beq.n	8005a10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fc:	2204      	movs	r2, #4
 80059fe:	409a      	lsls	r2, r3
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a08:	f043 0204 	orr.w	r2, r3, #4
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a14:	2210      	movs	r2, #16
 8005a16:	409a      	lsls	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d043      	beq.n	8005aa8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0308 	and.w	r3, r3, #8
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d03c      	beq.n	8005aa8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a32:	2210      	movs	r2, #16
 8005a34:	409a      	lsls	r2, r3
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d018      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d108      	bne.n	8005a68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d024      	beq.n	8005aa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	4798      	blx	r3
 8005a66:	e01f      	b.n	8005aa8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01b      	beq.n	8005aa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	4798      	blx	r3
 8005a78:	e016      	b.n	8005aa8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d107      	bne.n	8005a98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0208 	bic.w	r2, r2, #8
 8005a96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aac:	2220      	movs	r2, #32
 8005aae:	409a      	lsls	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 808f 	beq.w	8005bd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0310 	and.w	r3, r3, #16
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 8087 	beq.w	8005bd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ace:	2220      	movs	r2, #32
 8005ad0:	409a      	lsls	r2, r3
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b05      	cmp	r3, #5
 8005ae0:	d136      	bne.n	8005b50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0216 	bic.w	r2, r2, #22
 8005af0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695a      	ldr	r2, [r3, #20]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d103      	bne.n	8005b12 <HAL_DMA_IRQHandler+0x1da>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0208 	bic.w	r2, r2, #8
 8005b20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b26:	223f      	movs	r2, #63	; 0x3f
 8005b28:	409a      	lsls	r2, r3
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d07e      	beq.n	8005c44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	4798      	blx	r3
        }
        return;
 8005b4e:	e079      	b.n	8005c44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d01d      	beq.n	8005b9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10d      	bne.n	8005b88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d031      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	4798      	blx	r3
 8005b7c:	e02c      	b.n	8005bd8 <HAL_DMA_IRQHandler+0x2a0>
 8005b7e:	bf00      	nop
 8005b80:	20000e70 	.word	0x20000e70
 8005b84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d023      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	4798      	blx	r3
 8005b98:	e01e      	b.n	8005bd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10f      	bne.n	8005bc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0210 	bic.w	r2, r2, #16
 8005bb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d032      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d022      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2205      	movs	r2, #5
 8005bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0201 	bic.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	3301      	adds	r3, #1
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d307      	bcc.n	8005c20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f2      	bne.n	8005c04 <HAL_DMA_IRQHandler+0x2cc>
 8005c1e:	e000      	b.n	8005c22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005c20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d005      	beq.n	8005c46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	4798      	blx	r3
 8005c42:	e000      	b.n	8005c46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005c44:	bf00      	nop
    }
  }
}
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	2b40      	cmp	r3, #64	; 0x40
 8005c78:	d108      	bne.n	8005c8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c8a:	e007      	b.n	8005c9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	60da      	str	r2, [r3, #12]
}
 8005c9c:	bf00      	nop
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	3b10      	subs	r3, #16
 8005cb8:	4a14      	ldr	r2, [pc, #80]	; (8005d0c <DMA_CalcBaseAndBitshift+0x64>)
 8005cba:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbe:	091b      	lsrs	r3, r3, #4
 8005cc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005cc2:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <DMA_CalcBaseAndBitshift+0x68>)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d909      	bls.n	8005cea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cde:	f023 0303 	bic.w	r3, r3, #3
 8005ce2:	1d1a      	adds	r2, r3, #4
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	659a      	str	r2, [r3, #88]	; 0x58
 8005ce8:	e007      	b.n	8005cfa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cf2:	f023 0303 	bic.w	r3, r3, #3
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	aaaaaaab 	.word	0xaaaaaaab
 8005d10:	0800e384 	.word	0x0800e384

08005d14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d11f      	bne.n	8005d6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d856      	bhi.n	8005de2 <DMA_CheckFifoParam+0xce>
 8005d34:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <DMA_CheckFifoParam+0x28>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005d4d 	.word	0x08005d4d
 8005d40:	08005d5f 	.word	0x08005d5f
 8005d44:	08005d4d 	.word	0x08005d4d
 8005d48:	08005de3 	.word	0x08005de3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d046      	beq.n	8005de6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d5c:	e043      	b.n	8005de6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d66:	d140      	bne.n	8005dea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d6c:	e03d      	b.n	8005dea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d76:	d121      	bne.n	8005dbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d837      	bhi.n	8005dee <DMA_CheckFifoParam+0xda>
 8005d7e:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <DMA_CheckFifoParam+0x70>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005d95 	.word	0x08005d95
 8005d88:	08005d9b 	.word	0x08005d9b
 8005d8c:	08005d95 	.word	0x08005d95
 8005d90:	08005dad 	.word	0x08005dad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	73fb      	strb	r3, [r7, #15]
      break;
 8005d98:	e030      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d025      	beq.n	8005df2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005daa:	e022      	b.n	8005df2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005db4:	d11f      	bne.n	8005df6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005dba:	e01c      	b.n	8005df6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d903      	bls.n	8005dca <DMA_CheckFifoParam+0xb6>
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d003      	beq.n	8005dd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005dc8:	e018      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8005dce:	e015      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00e      	beq.n	8005dfa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	73fb      	strb	r3, [r7, #15]
      break;
 8005de0:	e00b      	b.n	8005dfa <DMA_CheckFifoParam+0xe6>
      break;
 8005de2:	bf00      	nop
 8005de4:	e00a      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
      break;
 8005de6:	bf00      	nop
 8005de8:	e008      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
      break;
 8005dea:	bf00      	nop
 8005dec:	e006      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
      break;
 8005dee:	bf00      	nop
 8005df0:	e004      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
      break;
 8005df2:	bf00      	nop
 8005df4:	e002      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
      break;   
 8005df6:	bf00      	nop
 8005df8:	e000      	b.n	8005dfc <DMA_CheckFifoParam+0xe8>
      break;
 8005dfa:	bf00      	nop
    }
  } 
  
  return status; 
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop

08005e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b089      	sub	sp, #36	; 0x24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e22:	2300      	movs	r3, #0
 8005e24:	61fb      	str	r3, [r7, #28]
 8005e26:	e16b      	b.n	8006100 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e28:	2201      	movs	r2, #1
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	f040 815a 	bne.w	80060fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d005      	beq.n	8005e5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d130      	bne.n	8005ec0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	2203      	movs	r2, #3
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	43db      	mvns	r3, r3
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	4013      	ands	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e94:	2201      	movs	r2, #1
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9c:	43db      	mvns	r3, r3
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	f003 0201 	and.w	r2, r3, #1
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d017      	beq.n	8005efc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	2203      	movs	r2, #3
 8005ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8005edc:	43db      	mvns	r3, r3
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f003 0303 	and.w	r3, r3, #3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d123      	bne.n	8005f50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	08da      	lsrs	r2, r3, #3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3208      	adds	r2, #8
 8005f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	220f      	movs	r2, #15
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	43db      	mvns	r3, r3
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	08da      	lsrs	r2, r3, #3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	3208      	adds	r2, #8
 8005f4a:	69b9      	ldr	r1, [r7, #24]
 8005f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	2203      	movs	r2, #3
 8005f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f60:	43db      	mvns	r3, r3
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	4013      	ands	r3, r2
 8005f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f003 0203 	and.w	r2, r3, #3
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 80b4 	beq.w	80060fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	4b60      	ldr	r3, [pc, #384]	; (8006118 <HAL_GPIO_Init+0x30c>)
 8005f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9a:	4a5f      	ldr	r2, [pc, #380]	; (8006118 <HAL_GPIO_Init+0x30c>)
 8005f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8005fa2:	4b5d      	ldr	r3, [pc, #372]	; (8006118 <HAL_GPIO_Init+0x30c>)
 8005fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fae:	4a5b      	ldr	r2, [pc, #364]	; (800611c <HAL_GPIO_Init+0x310>)
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	089b      	lsrs	r3, r3, #2
 8005fb4:	3302      	adds	r3, #2
 8005fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	220f      	movs	r2, #15
 8005fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a52      	ldr	r2, [pc, #328]	; (8006120 <HAL_GPIO_Init+0x314>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d02b      	beq.n	8006032 <HAL_GPIO_Init+0x226>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a51      	ldr	r2, [pc, #324]	; (8006124 <HAL_GPIO_Init+0x318>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d025      	beq.n	800602e <HAL_GPIO_Init+0x222>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a50      	ldr	r2, [pc, #320]	; (8006128 <HAL_GPIO_Init+0x31c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d01f      	beq.n	800602a <HAL_GPIO_Init+0x21e>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a4f      	ldr	r2, [pc, #316]	; (800612c <HAL_GPIO_Init+0x320>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d019      	beq.n	8006026 <HAL_GPIO_Init+0x21a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a4e      	ldr	r2, [pc, #312]	; (8006130 <HAL_GPIO_Init+0x324>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d013      	beq.n	8006022 <HAL_GPIO_Init+0x216>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a4d      	ldr	r2, [pc, #308]	; (8006134 <HAL_GPIO_Init+0x328>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00d      	beq.n	800601e <HAL_GPIO_Init+0x212>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a4c      	ldr	r2, [pc, #304]	; (8006138 <HAL_GPIO_Init+0x32c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d007      	beq.n	800601a <HAL_GPIO_Init+0x20e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a4b      	ldr	r2, [pc, #300]	; (800613c <HAL_GPIO_Init+0x330>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d101      	bne.n	8006016 <HAL_GPIO_Init+0x20a>
 8006012:	2307      	movs	r3, #7
 8006014:	e00e      	b.n	8006034 <HAL_GPIO_Init+0x228>
 8006016:	2308      	movs	r3, #8
 8006018:	e00c      	b.n	8006034 <HAL_GPIO_Init+0x228>
 800601a:	2306      	movs	r3, #6
 800601c:	e00a      	b.n	8006034 <HAL_GPIO_Init+0x228>
 800601e:	2305      	movs	r3, #5
 8006020:	e008      	b.n	8006034 <HAL_GPIO_Init+0x228>
 8006022:	2304      	movs	r3, #4
 8006024:	e006      	b.n	8006034 <HAL_GPIO_Init+0x228>
 8006026:	2303      	movs	r3, #3
 8006028:	e004      	b.n	8006034 <HAL_GPIO_Init+0x228>
 800602a:	2302      	movs	r3, #2
 800602c:	e002      	b.n	8006034 <HAL_GPIO_Init+0x228>
 800602e:	2301      	movs	r3, #1
 8006030:	e000      	b.n	8006034 <HAL_GPIO_Init+0x228>
 8006032:	2300      	movs	r3, #0
 8006034:	69fa      	ldr	r2, [r7, #28]
 8006036:	f002 0203 	and.w	r2, r2, #3
 800603a:	0092      	lsls	r2, r2, #2
 800603c:	4093      	lsls	r3, r2
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	4313      	orrs	r3, r2
 8006042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006044:	4935      	ldr	r1, [pc, #212]	; (800611c <HAL_GPIO_Init+0x310>)
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	089b      	lsrs	r3, r3, #2
 800604a:	3302      	adds	r3, #2
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006052:	4b3b      	ldr	r3, [pc, #236]	; (8006140 <HAL_GPIO_Init+0x334>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	43db      	mvns	r3, r3
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	4013      	ands	r3, r2
 8006060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006076:	4a32      	ldr	r2, [pc, #200]	; (8006140 <HAL_GPIO_Init+0x334>)
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800607c:	4b30      	ldr	r3, [pc, #192]	; (8006140 <HAL_GPIO_Init+0x334>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	43db      	mvns	r3, r3
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	4013      	ands	r3, r2
 800608a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d003      	beq.n	80060a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80060a0:	4a27      	ldr	r2, [pc, #156]	; (8006140 <HAL_GPIO_Init+0x334>)
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80060a6:	4b26      	ldr	r3, [pc, #152]	; (8006140 <HAL_GPIO_Init+0x334>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	43db      	mvns	r3, r3
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	4013      	ands	r3, r2
 80060b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80060ca:	4a1d      	ldr	r2, [pc, #116]	; (8006140 <HAL_GPIO_Init+0x334>)
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060d0:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <HAL_GPIO_Init+0x334>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	43db      	mvns	r3, r3
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	4013      	ands	r3, r2
 80060de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80060f4:	4a12      	ldr	r2, [pc, #72]	; (8006140 <HAL_GPIO_Init+0x334>)
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	3301      	adds	r3, #1
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	2b0f      	cmp	r3, #15
 8006104:	f67f ae90 	bls.w	8005e28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006108:	bf00      	nop
 800610a:	bf00      	nop
 800610c:	3724      	adds	r7, #36	; 0x24
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40023800 	.word	0x40023800
 800611c:	40013800 	.word	0x40013800
 8006120:	40020000 	.word	0x40020000
 8006124:	40020400 	.word	0x40020400
 8006128:	40020800 	.word	0x40020800
 800612c:	40020c00 	.word	0x40020c00
 8006130:	40021000 	.word	0x40021000
 8006134:	40021400 	.word	0x40021400
 8006138:	40021800 	.word	0x40021800
 800613c:	40021c00 	.word	0x40021c00
 8006140:	40013c00 	.word	0x40013c00

08006144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	807b      	strh	r3, [r7, #2]
 8006150:	4613      	mov	r3, r2
 8006152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006154:	787b      	ldrb	r3, [r7, #1]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800615a:	887a      	ldrh	r2, [r7, #2]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006160:	e003      	b.n	800616a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006162:	887b      	ldrh	r3, [r7, #2]
 8006164:	041a      	lsls	r2, r3, #16
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	619a      	str	r2, [r3, #24]
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e034      	b.n	80061f2 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006190:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f245 5255 	movw	r2, #21845	; 0x5555
 800619a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6852      	ldr	r2, [r2, #4]
 80061a4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6892      	ldr	r2, [r2, #8]
 80061ae:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80061b0:	f7fe fcfa 	bl	8004ba8 <HAL_GetTick>
 80061b4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80061b6:	e00f      	b.n	80061d8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80061b8:	f7fe fcf6 	bl	8004ba8 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b31      	cmp	r3, #49	; 0x31
 80061c4:	d908      	bls.n	80061d8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e00c      	b.n	80061f2 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1e8      	bne.n	80061b8 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80061ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800620a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
	...

0800621c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e267      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d075      	beq.n	8006326 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800623a:	4b88      	ldr	r3, [pc, #544]	; (800645c <HAL_RCC_OscConfig+0x240>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f003 030c 	and.w	r3, r3, #12
 8006242:	2b04      	cmp	r3, #4
 8006244:	d00c      	beq.n	8006260 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006246:	4b85      	ldr	r3, [pc, #532]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800624e:	2b08      	cmp	r3, #8
 8006250:	d112      	bne.n	8006278 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006252:	4b82      	ldr	r3, [pc, #520]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800625a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800625e:	d10b      	bne.n	8006278 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006260:	4b7e      	ldr	r3, [pc, #504]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d05b      	beq.n	8006324 <HAL_RCC_OscConfig+0x108>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d157      	bne.n	8006324 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e242      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006280:	d106      	bne.n	8006290 <HAL_RCC_OscConfig+0x74>
 8006282:	4b76      	ldr	r3, [pc, #472]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a75      	ldr	r2, [pc, #468]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	e01d      	b.n	80062cc <HAL_RCC_OscConfig+0xb0>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006298:	d10c      	bne.n	80062b4 <HAL_RCC_OscConfig+0x98>
 800629a:	4b70      	ldr	r3, [pc, #448]	; (800645c <HAL_RCC_OscConfig+0x240>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a6f      	ldr	r2, [pc, #444]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80062a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	4b6d      	ldr	r3, [pc, #436]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a6c      	ldr	r2, [pc, #432]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80062ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	e00b      	b.n	80062cc <HAL_RCC_OscConfig+0xb0>
 80062b4:	4b69      	ldr	r3, [pc, #420]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a68      	ldr	r2, [pc, #416]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80062ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	4b66      	ldr	r3, [pc, #408]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a65      	ldr	r2, [pc, #404]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80062c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d013      	beq.n	80062fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d4:	f7fe fc68 	bl	8004ba8 <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062dc:	f7fe fc64 	bl	8004ba8 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b64      	cmp	r3, #100	; 0x64
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e207      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ee:	4b5b      	ldr	r3, [pc, #364]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0f0      	beq.n	80062dc <HAL_RCC_OscConfig+0xc0>
 80062fa:	e014      	b.n	8006326 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fc:	f7fe fc54 	bl	8004ba8 <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006304:	f7fe fc50 	bl	8004ba8 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b64      	cmp	r3, #100	; 0x64
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e1f3      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006316:	4b51      	ldr	r3, [pc, #324]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1f0      	bne.n	8006304 <HAL_RCC_OscConfig+0xe8>
 8006322:	e000      	b.n	8006326 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d063      	beq.n	80063fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006332:	4b4a      	ldr	r3, [pc, #296]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 030c 	and.w	r3, r3, #12
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00b      	beq.n	8006356 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800633e:	4b47      	ldr	r3, [pc, #284]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006346:	2b08      	cmp	r3, #8
 8006348:	d11c      	bne.n	8006384 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800634a:	4b44      	ldr	r3, [pc, #272]	; (800645c <HAL_RCC_OscConfig+0x240>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d116      	bne.n	8006384 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006356:	4b41      	ldr	r3, [pc, #260]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <HAL_RCC_OscConfig+0x152>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d001      	beq.n	800636e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e1c7      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800636e:	4b3b      	ldr	r3, [pc, #236]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	4937      	ldr	r1, [pc, #220]	; (800645c <HAL_RCC_OscConfig+0x240>)
 800637e:	4313      	orrs	r3, r2
 8006380:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006382:	e03a      	b.n	80063fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d020      	beq.n	80063ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800638c:	4b34      	ldr	r3, [pc, #208]	; (8006460 <HAL_RCC_OscConfig+0x244>)
 800638e:	2201      	movs	r2, #1
 8006390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006392:	f7fe fc09 	bl	8004ba8 <HAL_GetTick>
 8006396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006398:	e008      	b.n	80063ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800639a:	f7fe fc05 	bl	8004ba8 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e1a8      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ac:	4b2b      	ldr	r3, [pc, #172]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0f0      	beq.n	800639a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b8:	4b28      	ldr	r3, [pc, #160]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	00db      	lsls	r3, r3, #3
 80063c6:	4925      	ldr	r1, [pc, #148]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	600b      	str	r3, [r1, #0]
 80063cc:	e015      	b.n	80063fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ce:	4b24      	ldr	r3, [pc, #144]	; (8006460 <HAL_RCC_OscConfig+0x244>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fe fbe8 	bl	8004ba8 <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063dc:	f7fe fbe4 	bl	8004ba8 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e187      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ee:	4b1b      	ldr	r3, [pc, #108]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0308 	and.w	r3, r3, #8
 8006402:	2b00      	cmp	r3, #0
 8006404:	d036      	beq.n	8006474 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d016      	beq.n	800643c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800640e:	4b15      	ldr	r3, [pc, #84]	; (8006464 <HAL_RCC_OscConfig+0x248>)
 8006410:	2201      	movs	r2, #1
 8006412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006414:	f7fe fbc8 	bl	8004ba8 <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800641c:	f7fe fbc4 	bl	8004ba8 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e167      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800642e:	4b0b      	ldr	r3, [pc, #44]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f0      	beq.n	800641c <HAL_RCC_OscConfig+0x200>
 800643a:	e01b      	b.n	8006474 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800643c:	4b09      	ldr	r3, [pc, #36]	; (8006464 <HAL_RCC_OscConfig+0x248>)
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006442:	f7fe fbb1 	bl	8004ba8 <HAL_GetTick>
 8006446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006448:	e00e      	b.n	8006468 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800644a:	f7fe fbad 	bl	8004ba8 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d907      	bls.n	8006468 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e150      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
 800645c:	40023800 	.word	0x40023800
 8006460:	42470000 	.word	0x42470000
 8006464:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006468:	4b88      	ldr	r3, [pc, #544]	; (800668c <HAL_RCC_OscConfig+0x470>)
 800646a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1ea      	bne.n	800644a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 8097 	beq.w	80065b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006482:	2300      	movs	r3, #0
 8006484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006486:	4b81      	ldr	r3, [pc, #516]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10f      	bne.n	80064b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006492:	2300      	movs	r3, #0
 8006494:	60bb      	str	r3, [r7, #8]
 8006496:	4b7d      	ldr	r3, [pc, #500]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649a:	4a7c      	ldr	r2, [pc, #496]	; (800668c <HAL_RCC_OscConfig+0x470>)
 800649c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a0:	6413      	str	r3, [r2, #64]	; 0x40
 80064a2:	4b7a      	ldr	r3, [pc, #488]	; (800668c <HAL_RCC_OscConfig+0x470>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064aa:	60bb      	str	r3, [r7, #8]
 80064ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064ae:	2301      	movs	r3, #1
 80064b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b2:	4b77      	ldr	r3, [pc, #476]	; (8006690 <HAL_RCC_OscConfig+0x474>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d118      	bne.n	80064f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064be:	4b74      	ldr	r3, [pc, #464]	; (8006690 <HAL_RCC_OscConfig+0x474>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a73      	ldr	r2, [pc, #460]	; (8006690 <HAL_RCC_OscConfig+0x474>)
 80064c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ca:	f7fe fb6d 	bl	8004ba8 <HAL_GetTick>
 80064ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d0:	e008      	b.n	80064e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064d2:	f7fe fb69 	bl	8004ba8 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e10c      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e4:	4b6a      	ldr	r3, [pc, #424]	; (8006690 <HAL_RCC_OscConfig+0x474>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0f0      	beq.n	80064d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d106      	bne.n	8006506 <HAL_RCC_OscConfig+0x2ea>
 80064f8:	4b64      	ldr	r3, [pc, #400]	; (800668c <HAL_RCC_OscConfig+0x470>)
 80064fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fc:	4a63      	ldr	r2, [pc, #396]	; (800668c <HAL_RCC_OscConfig+0x470>)
 80064fe:	f043 0301 	orr.w	r3, r3, #1
 8006502:	6713      	str	r3, [r2, #112]	; 0x70
 8006504:	e01c      	b.n	8006540 <HAL_RCC_OscConfig+0x324>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2b05      	cmp	r3, #5
 800650c:	d10c      	bne.n	8006528 <HAL_RCC_OscConfig+0x30c>
 800650e:	4b5f      	ldr	r3, [pc, #380]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006512:	4a5e      	ldr	r2, [pc, #376]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006514:	f043 0304 	orr.w	r3, r3, #4
 8006518:	6713      	str	r3, [r2, #112]	; 0x70
 800651a:	4b5c      	ldr	r3, [pc, #368]	; (800668c <HAL_RCC_OscConfig+0x470>)
 800651c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651e:	4a5b      	ldr	r2, [pc, #364]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006520:	f043 0301 	orr.w	r3, r3, #1
 8006524:	6713      	str	r3, [r2, #112]	; 0x70
 8006526:	e00b      	b.n	8006540 <HAL_RCC_OscConfig+0x324>
 8006528:	4b58      	ldr	r3, [pc, #352]	; (800668c <HAL_RCC_OscConfig+0x470>)
 800652a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652c:	4a57      	ldr	r2, [pc, #348]	; (800668c <HAL_RCC_OscConfig+0x470>)
 800652e:	f023 0301 	bic.w	r3, r3, #1
 8006532:	6713      	str	r3, [r2, #112]	; 0x70
 8006534:	4b55      	ldr	r3, [pc, #340]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006538:	4a54      	ldr	r2, [pc, #336]	; (800668c <HAL_RCC_OscConfig+0x470>)
 800653a:	f023 0304 	bic.w	r3, r3, #4
 800653e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d015      	beq.n	8006574 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006548:	f7fe fb2e 	bl	8004ba8 <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654e:	e00a      	b.n	8006566 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006550:	f7fe fb2a 	bl	8004ba8 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	f241 3288 	movw	r2, #5000	; 0x1388
 800655e:	4293      	cmp	r3, r2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e0cb      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006566:	4b49      	ldr	r3, [pc, #292]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0ee      	beq.n	8006550 <HAL_RCC_OscConfig+0x334>
 8006572:	e014      	b.n	800659e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006574:	f7fe fb18 	bl	8004ba8 <HAL_GetTick>
 8006578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800657a:	e00a      	b.n	8006592 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800657c:	f7fe fb14 	bl	8004ba8 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	f241 3288 	movw	r2, #5000	; 0x1388
 800658a:	4293      	cmp	r3, r2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e0b5      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006592:	4b3e      	ldr	r3, [pc, #248]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1ee      	bne.n	800657c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800659e:	7dfb      	ldrb	r3, [r7, #23]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d105      	bne.n	80065b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065a4:	4b39      	ldr	r3, [pc, #228]	; (800668c <HAL_RCC_OscConfig+0x470>)
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a8:	4a38      	ldr	r2, [pc, #224]	; (800668c <HAL_RCC_OscConfig+0x470>)
 80065aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 80a1 	beq.w	80066fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065ba:	4b34      	ldr	r3, [pc, #208]	; (800668c <HAL_RCC_OscConfig+0x470>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 030c 	and.w	r3, r3, #12
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d05c      	beq.n	8006680 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d141      	bne.n	8006652 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ce:	4b31      	ldr	r3, [pc, #196]	; (8006694 <HAL_RCC_OscConfig+0x478>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d4:	f7fe fae8 	bl	8004ba8 <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065dc:	f7fe fae4 	bl	8004ba8 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e087      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ee:	4b27      	ldr	r3, [pc, #156]	; (800668c <HAL_RCC_OscConfig+0x470>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1f0      	bne.n	80065dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69da      	ldr	r2, [r3, #28]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	019b      	lsls	r3, r3, #6
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006610:	085b      	lsrs	r3, r3, #1
 8006612:	3b01      	subs	r3, #1
 8006614:	041b      	lsls	r3, r3, #16
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	061b      	lsls	r3, r3, #24
 800661e:	491b      	ldr	r1, [pc, #108]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006620:	4313      	orrs	r3, r2
 8006622:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006624:	4b1b      	ldr	r3, [pc, #108]	; (8006694 <HAL_RCC_OscConfig+0x478>)
 8006626:	2201      	movs	r2, #1
 8006628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800662a:	f7fe fabd 	bl	8004ba8 <HAL_GetTick>
 800662e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006630:	e008      	b.n	8006644 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006632:	f7fe fab9 	bl	8004ba8 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e05c      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006644:	4b11      	ldr	r3, [pc, #68]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0f0      	beq.n	8006632 <HAL_RCC_OscConfig+0x416>
 8006650:	e054      	b.n	80066fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006652:	4b10      	ldr	r3, [pc, #64]	; (8006694 <HAL_RCC_OscConfig+0x478>)
 8006654:	2200      	movs	r2, #0
 8006656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006658:	f7fe faa6 	bl	8004ba8 <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006660:	f7fe faa2 	bl	8004ba8 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b02      	cmp	r3, #2
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e045      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006672:	4b06      	ldr	r3, [pc, #24]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1f0      	bne.n	8006660 <HAL_RCC_OscConfig+0x444>
 800667e:	e03d      	b.n	80066fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d107      	bne.n	8006698 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e038      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
 800668c:	40023800 	.word	0x40023800
 8006690:	40007000 	.word	0x40007000
 8006694:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006698:	4b1b      	ldr	r3, [pc, #108]	; (8006708 <HAL_RCC_OscConfig+0x4ec>)
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d028      	beq.n	80066f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d121      	bne.n	80066f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066be:	429a      	cmp	r2, r3
 80066c0:	d11a      	bne.n	80066f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066c8:	4013      	ands	r3, r2
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d111      	bne.n	80066f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066de:	085b      	lsrs	r3, r3, #1
 80066e0:	3b01      	subs	r3, #1
 80066e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d107      	bne.n	80066f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d001      	beq.n	80066fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e000      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	40023800 	.word	0x40023800

0800670c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e0cc      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006720:	4b68      	ldr	r3, [pc, #416]	; (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0307 	and.w	r3, r3, #7
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d90c      	bls.n	8006748 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800672e:	4b65      	ldr	r3, [pc, #404]	; (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006736:	4b63      	ldr	r3, [pc, #396]	; (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	429a      	cmp	r2, r3
 8006742:	d001      	beq.n	8006748 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e0b8      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d020      	beq.n	8006796 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006760:	4b59      	ldr	r3, [pc, #356]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	4a58      	ldr	r2, [pc, #352]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800676a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	2b00      	cmp	r3, #0
 8006776:	d005      	beq.n	8006784 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006778:	4b53      	ldr	r3, [pc, #332]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	4a52      	ldr	r2, [pc, #328]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800677e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006782:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006784:	4b50      	ldr	r3, [pc, #320]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	494d      	ldr	r1, [pc, #308]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006792:	4313      	orrs	r3, r2
 8006794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d044      	beq.n	800682c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d107      	bne.n	80067ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067aa:	4b47      	ldr	r3, [pc, #284]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d119      	bne.n	80067ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e07f      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d003      	beq.n	80067ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d107      	bne.n	80067da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ca:	4b3f      	ldr	r3, [pc, #252]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d109      	bne.n	80067ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e06f      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067da:	4b3b      	ldr	r3, [pc, #236]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e067      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067ea:	4b37      	ldr	r3, [pc, #220]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f023 0203 	bic.w	r2, r3, #3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	4934      	ldr	r1, [pc, #208]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067fc:	f7fe f9d4 	bl	8004ba8 <HAL_GetTick>
 8006800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006802:	e00a      	b.n	800681a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006804:	f7fe f9d0 	bl	8004ba8 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006812:	4293      	cmp	r3, r2
 8006814:	d901      	bls.n	800681a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e04f      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800681a:	4b2b      	ldr	r3, [pc, #172]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f003 020c 	and.w	r2, r3, #12
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	429a      	cmp	r2, r3
 800682a:	d1eb      	bne.n	8006804 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800682c:	4b25      	ldr	r3, [pc, #148]	; (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d20c      	bcs.n	8006854 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800683a:	4b22      	ldr	r3, [pc, #136]	; (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006842:	4b20      	ldr	r3, [pc, #128]	; (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d001      	beq.n	8006854 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e032      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d008      	beq.n	8006872 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006860:	4b19      	ldr	r3, [pc, #100]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	4916      	ldr	r1, [pc, #88]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800686e:	4313      	orrs	r3, r2
 8006870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d009      	beq.n	8006892 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800687e:	4b12      	ldr	r3, [pc, #72]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	490e      	ldr	r1, [pc, #56]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800688e:	4313      	orrs	r3, r2
 8006890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006892:	f000 f821 	bl	80068d8 <HAL_RCC_GetSysClockFreq>
 8006896:	4602      	mov	r2, r0
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	091b      	lsrs	r3, r3, #4
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	490a      	ldr	r1, [pc, #40]	; (80068cc <HAL_RCC_ClockConfig+0x1c0>)
 80068a4:	5ccb      	ldrb	r3, [r1, r3]
 80068a6:	fa22 f303 	lsr.w	r3, r2, r3
 80068aa:	4a09      	ldr	r2, [pc, #36]	; (80068d0 <HAL_RCC_ClockConfig+0x1c4>)
 80068ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068ae:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <HAL_RCC_ClockConfig+0x1c8>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe f934 	bl	8004b20 <HAL_InitTick>

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40023c00 	.word	0x40023c00
 80068c8:	40023800 	.word	0x40023800
 80068cc:	0800e36c 	.word	0x0800e36c
 80068d0:	20000e70 	.word	0x20000e70
 80068d4:	20000f30 	.word	0x20000f30

080068d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068dc:	b094      	sub	sp, #80	; 0x50
 80068de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	647b      	str	r3, [r7, #68]	; 0x44
 80068e4:	2300      	movs	r3, #0
 80068e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068e8:	2300      	movs	r3, #0
 80068ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068f0:	4b79      	ldr	r3, [pc, #484]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 030c 	and.w	r3, r3, #12
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d00d      	beq.n	8006918 <HAL_RCC_GetSysClockFreq+0x40>
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	f200 80e1 	bhi.w	8006ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <HAL_RCC_GetSysClockFreq+0x34>
 8006906:	2b04      	cmp	r3, #4
 8006908:	d003      	beq.n	8006912 <HAL_RCC_GetSysClockFreq+0x3a>
 800690a:	e0db      	b.n	8006ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800690c:	4b73      	ldr	r3, [pc, #460]	; (8006adc <HAL_RCC_GetSysClockFreq+0x204>)
 800690e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006910:	e0db      	b.n	8006aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006912:	4b73      	ldr	r3, [pc, #460]	; (8006ae0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006914:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006916:	e0d8      	b.n	8006aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006918:	4b6f      	ldr	r3, [pc, #444]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006920:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006922:	4b6d      	ldr	r3, [pc, #436]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d063      	beq.n	80069f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800692e:	4b6a      	ldr	r3, [pc, #424]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	099b      	lsrs	r3, r3, #6
 8006934:	2200      	movs	r2, #0
 8006936:	63bb      	str	r3, [r7, #56]	; 0x38
 8006938:	63fa      	str	r2, [r7, #60]	; 0x3c
 800693a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006940:	633b      	str	r3, [r7, #48]	; 0x30
 8006942:	2300      	movs	r3, #0
 8006944:	637b      	str	r3, [r7, #52]	; 0x34
 8006946:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800694a:	4622      	mov	r2, r4
 800694c:	462b      	mov	r3, r5
 800694e:	f04f 0000 	mov.w	r0, #0
 8006952:	f04f 0100 	mov.w	r1, #0
 8006956:	0159      	lsls	r1, r3, #5
 8006958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800695c:	0150      	lsls	r0, r2, #5
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4621      	mov	r1, r4
 8006964:	1a51      	subs	r1, r2, r1
 8006966:	6139      	str	r1, [r7, #16]
 8006968:	4629      	mov	r1, r5
 800696a:	eb63 0301 	sbc.w	r3, r3, r1
 800696e:	617b      	str	r3, [r7, #20]
 8006970:	f04f 0200 	mov.w	r2, #0
 8006974:	f04f 0300 	mov.w	r3, #0
 8006978:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800697c:	4659      	mov	r1, fp
 800697e:	018b      	lsls	r3, r1, #6
 8006980:	4651      	mov	r1, sl
 8006982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006986:	4651      	mov	r1, sl
 8006988:	018a      	lsls	r2, r1, #6
 800698a:	4651      	mov	r1, sl
 800698c:	ebb2 0801 	subs.w	r8, r2, r1
 8006990:	4659      	mov	r1, fp
 8006992:	eb63 0901 	sbc.w	r9, r3, r1
 8006996:	f04f 0200 	mov.w	r2, #0
 800699a:	f04f 0300 	mov.w	r3, #0
 800699e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069aa:	4690      	mov	r8, r2
 80069ac:	4699      	mov	r9, r3
 80069ae:	4623      	mov	r3, r4
 80069b0:	eb18 0303 	adds.w	r3, r8, r3
 80069b4:	60bb      	str	r3, [r7, #8]
 80069b6:	462b      	mov	r3, r5
 80069b8:	eb49 0303 	adc.w	r3, r9, r3
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	f04f 0300 	mov.w	r3, #0
 80069c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80069ca:	4629      	mov	r1, r5
 80069cc:	024b      	lsls	r3, r1, #9
 80069ce:	4621      	mov	r1, r4
 80069d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069d4:	4621      	mov	r1, r4
 80069d6:	024a      	lsls	r2, r1, #9
 80069d8:	4610      	mov	r0, r2
 80069da:	4619      	mov	r1, r3
 80069dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069de:	2200      	movs	r2, #0
 80069e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069e8:	f7fa f95e 	bl	8000ca8 <__aeabi_uldivmod>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4613      	mov	r3, r2
 80069f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069f4:	e058      	b.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069f6:	4b38      	ldr	r3, [pc, #224]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	099b      	lsrs	r3, r3, #6
 80069fc:	2200      	movs	r2, #0
 80069fe:	4618      	mov	r0, r3
 8006a00:	4611      	mov	r1, r2
 8006a02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a06:	623b      	str	r3, [r7, #32]
 8006a08:	2300      	movs	r3, #0
 8006a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a10:	4642      	mov	r2, r8
 8006a12:	464b      	mov	r3, r9
 8006a14:	f04f 0000 	mov.w	r0, #0
 8006a18:	f04f 0100 	mov.w	r1, #0
 8006a1c:	0159      	lsls	r1, r3, #5
 8006a1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a22:	0150      	lsls	r0, r2, #5
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	4641      	mov	r1, r8
 8006a2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a2e:	4649      	mov	r1, r9
 8006a30:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	f04f 0300 	mov.w	r3, #0
 8006a3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a48:	ebb2 040a 	subs.w	r4, r2, sl
 8006a4c:	eb63 050b 	sbc.w	r5, r3, fp
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	00eb      	lsls	r3, r5, #3
 8006a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a5e:	00e2      	lsls	r2, r4, #3
 8006a60:	4614      	mov	r4, r2
 8006a62:	461d      	mov	r5, r3
 8006a64:	4643      	mov	r3, r8
 8006a66:	18e3      	adds	r3, r4, r3
 8006a68:	603b      	str	r3, [r7, #0]
 8006a6a:	464b      	mov	r3, r9
 8006a6c:	eb45 0303 	adc.w	r3, r5, r3
 8006a70:	607b      	str	r3, [r7, #4]
 8006a72:	f04f 0200 	mov.w	r2, #0
 8006a76:	f04f 0300 	mov.w	r3, #0
 8006a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a7e:	4629      	mov	r1, r5
 8006a80:	028b      	lsls	r3, r1, #10
 8006a82:	4621      	mov	r1, r4
 8006a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a88:	4621      	mov	r1, r4
 8006a8a:	028a      	lsls	r2, r1, #10
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a92:	2200      	movs	r2, #0
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	61fa      	str	r2, [r7, #28]
 8006a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a9c:	f7fa f904 	bl	8000ca8 <__aeabi_uldivmod>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006aa8:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	0c1b      	lsrs	r3, r3, #16
 8006aae:	f003 0303 	and.w	r3, r3, #3
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006ab8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ac2:	e002      	b.n	8006aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ac4:	4b05      	ldr	r3, [pc, #20]	; (8006adc <HAL_RCC_GetSysClockFreq+0x204>)
 8006ac6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3750      	adds	r7, #80	; 0x50
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ad6:	bf00      	nop
 8006ad8:	40023800 	.word	0x40023800
 8006adc:	00f42400 	.word	0x00f42400
 8006ae0:	007a1200 	.word	0x007a1200

08006ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ae8:	4b03      	ldr	r3, [pc, #12]	; (8006af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006aea:	681b      	ldr	r3, [r3, #0]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	20000e70 	.word	0x20000e70

08006afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b00:	f7ff fff0 	bl	8006ae4 <HAL_RCC_GetHCLKFreq>
 8006b04:	4602      	mov	r2, r0
 8006b06:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	0a9b      	lsrs	r3, r3, #10
 8006b0c:	f003 0307 	and.w	r3, r3, #7
 8006b10:	4903      	ldr	r1, [pc, #12]	; (8006b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b12:	5ccb      	ldrb	r3, [r1, r3]
 8006b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	40023800 	.word	0x40023800
 8006b20:	0800e37c 	.word	0x0800e37c

08006b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b28:	f7ff ffdc 	bl	8006ae4 <HAL_RCC_GetHCLKFreq>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	0b5b      	lsrs	r3, r3, #13
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	4903      	ldr	r1, [pc, #12]	; (8006b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b3a:	5ccb      	ldrb	r3, [r1, r3]
 8006b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40023800 	.word	0x40023800
 8006b48:	0800e37c 	.word	0x0800e37c

08006b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e041      	b.n	8006be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d106      	bne.n	8006b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fd fb82 	bl	800427c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3304      	adds	r3, #4
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	f000 fce2 	bl	8007554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d001      	beq.n	8006c04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e046      	b.n	8006c92 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a23      	ldr	r2, [pc, #140]	; (8006ca0 <HAL_TIM_Base_Start+0xb4>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d022      	beq.n	8006c5c <HAL_TIM_Base_Start+0x70>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c1e:	d01d      	beq.n	8006c5c <HAL_TIM_Base_Start+0x70>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a1f      	ldr	r2, [pc, #124]	; (8006ca4 <HAL_TIM_Base_Start+0xb8>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d018      	beq.n	8006c5c <HAL_TIM_Base_Start+0x70>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a1e      	ldr	r2, [pc, #120]	; (8006ca8 <HAL_TIM_Base_Start+0xbc>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d013      	beq.n	8006c5c <HAL_TIM_Base_Start+0x70>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a1c      	ldr	r2, [pc, #112]	; (8006cac <HAL_TIM_Base_Start+0xc0>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00e      	beq.n	8006c5c <HAL_TIM_Base_Start+0x70>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a1b      	ldr	r2, [pc, #108]	; (8006cb0 <HAL_TIM_Base_Start+0xc4>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d009      	beq.n	8006c5c <HAL_TIM_Base_Start+0x70>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a19      	ldr	r2, [pc, #100]	; (8006cb4 <HAL_TIM_Base_Start+0xc8>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d004      	beq.n	8006c5c <HAL_TIM_Base_Start+0x70>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a18      	ldr	r2, [pc, #96]	; (8006cb8 <HAL_TIM_Base_Start+0xcc>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d111      	bne.n	8006c80 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f003 0307 	and.w	r3, r3, #7
 8006c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b06      	cmp	r3, #6
 8006c6c:	d010      	beq.n	8006c90 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f042 0201 	orr.w	r2, r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7e:	e007      	b.n	8006c90 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0201 	orr.w	r2, r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40010000 	.word	0x40010000
 8006ca4:	40000400 	.word	0x40000400
 8006ca8:	40000800 	.word	0x40000800
 8006cac:	40000c00 	.word	0x40000c00
 8006cb0:	40010400 	.word	0x40010400
 8006cb4:	40014000 	.word	0x40014000
 8006cb8:	40001800 	.word	0x40001800

08006cbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d001      	beq.n	8006cd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e04e      	b.n	8006d72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0201 	orr.w	r2, r2, #1
 8006cea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a23      	ldr	r2, [pc, #140]	; (8006d80 <HAL_TIM_Base_Start_IT+0xc4>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d022      	beq.n	8006d3c <HAL_TIM_Base_Start_IT+0x80>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cfe:	d01d      	beq.n	8006d3c <HAL_TIM_Base_Start_IT+0x80>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a1f      	ldr	r2, [pc, #124]	; (8006d84 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d018      	beq.n	8006d3c <HAL_TIM_Base_Start_IT+0x80>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a1e      	ldr	r2, [pc, #120]	; (8006d88 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d013      	beq.n	8006d3c <HAL_TIM_Base_Start_IT+0x80>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a1c      	ldr	r2, [pc, #112]	; (8006d8c <HAL_TIM_Base_Start_IT+0xd0>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d00e      	beq.n	8006d3c <HAL_TIM_Base_Start_IT+0x80>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a1b      	ldr	r2, [pc, #108]	; (8006d90 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d009      	beq.n	8006d3c <HAL_TIM_Base_Start_IT+0x80>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a19      	ldr	r2, [pc, #100]	; (8006d94 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d004      	beq.n	8006d3c <HAL_TIM_Base_Start_IT+0x80>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a18      	ldr	r2, [pc, #96]	; (8006d98 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d111      	bne.n	8006d60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2b06      	cmp	r3, #6
 8006d4c:	d010      	beq.n	8006d70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f042 0201 	orr.w	r2, r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d5e:	e007      	b.n	8006d70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 0201 	orr.w	r2, r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40010000 	.word	0x40010000
 8006d84:	40000400 	.word	0x40000400
 8006d88:	40000800 	.word	0x40000800
 8006d8c:	40000c00 	.word	0x40000c00
 8006d90:	40010400 	.word	0x40010400
 8006d94:	40014000 	.word	0x40014000
 8006d98:	40001800 	.word	0x40001800

08006d9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e041      	b.n	8006e32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d106      	bne.n	8006dc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f839 	bl	8006e3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	4619      	mov	r1, r3
 8006dda:	4610      	mov	r0, r2
 8006ddc:	f000 fbba 	bl	8007554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
	...

08006e50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d109      	bne.n	8006e74 <HAL_TIM_PWM_Start+0x24>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	bf14      	ite	ne
 8006e6c:	2301      	movne	r3, #1
 8006e6e:	2300      	moveq	r3, #0
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	e022      	b.n	8006eba <HAL_TIM_PWM_Start+0x6a>
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d109      	bne.n	8006e8e <HAL_TIM_PWM_Start+0x3e>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	bf14      	ite	ne
 8006e86:	2301      	movne	r3, #1
 8006e88:	2300      	moveq	r3, #0
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	e015      	b.n	8006eba <HAL_TIM_PWM_Start+0x6a>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b08      	cmp	r3, #8
 8006e92:	d109      	bne.n	8006ea8 <HAL_TIM_PWM_Start+0x58>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	bf14      	ite	ne
 8006ea0:	2301      	movne	r3, #1
 8006ea2:	2300      	moveq	r3, #0
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	e008      	b.n	8006eba <HAL_TIM_PWM_Start+0x6a>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	bf14      	ite	ne
 8006eb4:	2301      	movne	r3, #1
 8006eb6:	2300      	moveq	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e07c      	b.n	8006fbc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d104      	bne.n	8006ed2 <HAL_TIM_PWM_Start+0x82>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ed0:	e013      	b.n	8006efa <HAL_TIM_PWM_Start+0xaa>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d104      	bne.n	8006ee2 <HAL_TIM_PWM_Start+0x92>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ee0:	e00b      	b.n	8006efa <HAL_TIM_PWM_Start+0xaa>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d104      	bne.n	8006ef2 <HAL_TIM_PWM_Start+0xa2>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ef0:	e003      	b.n	8006efa <HAL_TIM_PWM_Start+0xaa>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2201      	movs	r2, #1
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 fe10 	bl	8007b28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a2d      	ldr	r2, [pc, #180]	; (8006fc4 <HAL_TIM_PWM_Start+0x174>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d004      	beq.n	8006f1c <HAL_TIM_PWM_Start+0xcc>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a2c      	ldr	r2, [pc, #176]	; (8006fc8 <HAL_TIM_PWM_Start+0x178>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d101      	bne.n	8006f20 <HAL_TIM_PWM_Start+0xd0>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e000      	b.n	8006f22 <HAL_TIM_PWM_Start+0xd2>
 8006f20:	2300      	movs	r3, #0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d007      	beq.n	8006f36 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a22      	ldr	r2, [pc, #136]	; (8006fc4 <HAL_TIM_PWM_Start+0x174>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d022      	beq.n	8006f86 <HAL_TIM_PWM_Start+0x136>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f48:	d01d      	beq.n	8006f86 <HAL_TIM_PWM_Start+0x136>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a1f      	ldr	r2, [pc, #124]	; (8006fcc <HAL_TIM_PWM_Start+0x17c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d018      	beq.n	8006f86 <HAL_TIM_PWM_Start+0x136>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a1d      	ldr	r2, [pc, #116]	; (8006fd0 <HAL_TIM_PWM_Start+0x180>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d013      	beq.n	8006f86 <HAL_TIM_PWM_Start+0x136>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a1c      	ldr	r2, [pc, #112]	; (8006fd4 <HAL_TIM_PWM_Start+0x184>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00e      	beq.n	8006f86 <HAL_TIM_PWM_Start+0x136>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a16      	ldr	r2, [pc, #88]	; (8006fc8 <HAL_TIM_PWM_Start+0x178>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d009      	beq.n	8006f86 <HAL_TIM_PWM_Start+0x136>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a18      	ldr	r2, [pc, #96]	; (8006fd8 <HAL_TIM_PWM_Start+0x188>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d004      	beq.n	8006f86 <HAL_TIM_PWM_Start+0x136>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a16      	ldr	r2, [pc, #88]	; (8006fdc <HAL_TIM_PWM_Start+0x18c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d111      	bne.n	8006faa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f003 0307 	and.w	r3, r3, #7
 8006f90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2b06      	cmp	r3, #6
 8006f96:	d010      	beq.n	8006fba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0201 	orr.w	r2, r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa8:	e007      	b.n	8006fba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f042 0201 	orr.w	r2, r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	40010000 	.word	0x40010000
 8006fc8:	40010400 	.word	0x40010400
 8006fcc:	40000400 	.word	0x40000400
 8006fd0:	40000800 	.word	0x40000800
 8006fd4:	40000c00 	.word	0x40000c00
 8006fd8:	40014000 	.word	0x40014000
 8006fdc:	40001800 	.word	0x40001800

08006fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d122      	bne.n	800703c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b02      	cmp	r3, #2
 8007002:	d11b      	bne.n	800703c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f06f 0202 	mvn.w	r2, #2
 800700c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fa77 	bl	8007516 <HAL_TIM_IC_CaptureCallback>
 8007028:	e005      	b.n	8007036 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fa69 	bl	8007502 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fa7a 	bl	800752a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	f003 0304 	and.w	r3, r3, #4
 8007046:	2b04      	cmp	r3, #4
 8007048:	d122      	bne.n	8007090 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f003 0304 	and.w	r3, r3, #4
 8007054:	2b04      	cmp	r3, #4
 8007056:	d11b      	bne.n	8007090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f06f 0204 	mvn.w	r2, #4
 8007060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2202      	movs	r2, #2
 8007066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa4d 	bl	8007516 <HAL_TIM_IC_CaptureCallback>
 800707c:	e005      	b.n	800708a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fa3f 	bl	8007502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fa50 	bl	800752a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	f003 0308 	and.w	r3, r3, #8
 800709a:	2b08      	cmp	r3, #8
 800709c:	d122      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f003 0308 	and.w	r3, r3, #8
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d11b      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f06f 0208 	mvn.w	r2, #8
 80070b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2204      	movs	r2, #4
 80070ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fa23 	bl	8007516 <HAL_TIM_IC_CaptureCallback>
 80070d0:	e005      	b.n	80070de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fa15 	bl	8007502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fa26 	bl	800752a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	2b10      	cmp	r3, #16
 80070f0:	d122      	bne.n	8007138 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f003 0310 	and.w	r3, r3, #16
 80070fc:	2b10      	cmp	r3, #16
 80070fe:	d11b      	bne.n	8007138 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f06f 0210 	mvn.w	r2, #16
 8007108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2208      	movs	r2, #8
 800710e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f9f9 	bl	8007516 <HAL_TIM_IC_CaptureCallback>
 8007124:	e005      	b.n	8007132 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f9eb 	bl	8007502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f9fc 	bl	800752a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b01      	cmp	r3, #1
 8007144:	d10e      	bne.n	8007164 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b01      	cmp	r3, #1
 8007152:	d107      	bne.n	8007164 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f06f 0201 	mvn.w	r2, #1
 800715c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7fc fe22 	bl	8003da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800716e:	2b80      	cmp	r3, #128	; 0x80
 8007170:	d10e      	bne.n	8007190 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717c:	2b80      	cmp	r3, #128	; 0x80
 800717e:	d107      	bne.n	8007190 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fdca 	bl	8007d24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719a:	2b40      	cmp	r3, #64	; 0x40
 800719c:	d10e      	bne.n	80071bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	d107      	bne.n	80071bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f9c1 	bl	800753e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d10e      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0320 	and.w	r3, r3, #32
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	d107      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0220 	mvn.w	r2, #32
 80071e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fd94 	bl	8007d10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007206:	2b01      	cmp	r3, #1
 8007208:	d101      	bne.n	800720e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800720a:	2302      	movs	r3, #2
 800720c:	e0ae      	b.n	800736c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b0c      	cmp	r3, #12
 800721a:	f200 809f 	bhi.w	800735c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800721e:	a201      	add	r2, pc, #4	; (adr r2, 8007224 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007224:	08007259 	.word	0x08007259
 8007228:	0800735d 	.word	0x0800735d
 800722c:	0800735d 	.word	0x0800735d
 8007230:	0800735d 	.word	0x0800735d
 8007234:	08007299 	.word	0x08007299
 8007238:	0800735d 	.word	0x0800735d
 800723c:	0800735d 	.word	0x0800735d
 8007240:	0800735d 	.word	0x0800735d
 8007244:	080072db 	.word	0x080072db
 8007248:	0800735d 	.word	0x0800735d
 800724c:	0800735d 	.word	0x0800735d
 8007250:	0800735d 	.word	0x0800735d
 8007254:	0800731b 	.word	0x0800731b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fa18 	bl	8007694 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0208 	orr.w	r2, r2, #8
 8007272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	699a      	ldr	r2, [r3, #24]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 0204 	bic.w	r2, r2, #4
 8007282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6999      	ldr	r1, [r3, #24]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	691a      	ldr	r2, [r3, #16]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	619a      	str	r2, [r3, #24]
      break;
 8007296:	e064      	b.n	8007362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68b9      	ldr	r1, [r7, #8]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 fa68 	bl	8007774 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	699a      	ldr	r2, [r3, #24]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6999      	ldr	r1, [r3, #24]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	021a      	lsls	r2, r3, #8
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	619a      	str	r2, [r3, #24]
      break;
 80072d8:	e043      	b.n	8007362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 fabd 	bl	8007860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f042 0208 	orr.w	r2, r2, #8
 80072f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69da      	ldr	r2, [r3, #28]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0204 	bic.w	r2, r2, #4
 8007304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69d9      	ldr	r1, [r3, #28]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	691a      	ldr	r2, [r3, #16]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	61da      	str	r2, [r3, #28]
      break;
 8007318:	e023      	b.n	8007362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68b9      	ldr	r1, [r7, #8]
 8007320:	4618      	mov	r0, r3
 8007322:	f000 fb11 	bl	8007948 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69da      	ldr	r2, [r3, #28]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69da      	ldr	r2, [r3, #28]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69d9      	ldr	r1, [r3, #28]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	021a      	lsls	r2, r3, #8
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	61da      	str	r2, [r3, #28]
      break;
 800735a:	e002      	b.n	8007362 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	75fb      	strb	r3, [r7, #23]
      break;
 8007360:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800736a:	7dfb      	ldrb	r3, [r7, #23]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007388:	2b01      	cmp	r3, #1
 800738a:	d101      	bne.n	8007390 <HAL_TIM_ConfigClockSource+0x1c>
 800738c:	2302      	movs	r3, #2
 800738e:	e0b4      	b.n	80074fa <HAL_TIM_ConfigClockSource+0x186>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2202      	movs	r2, #2
 800739c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073c8:	d03e      	beq.n	8007448 <HAL_TIM_ConfigClockSource+0xd4>
 80073ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ce:	f200 8087 	bhi.w	80074e0 <HAL_TIM_ConfigClockSource+0x16c>
 80073d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d6:	f000 8086 	beq.w	80074e6 <HAL_TIM_ConfigClockSource+0x172>
 80073da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073de:	d87f      	bhi.n	80074e0 <HAL_TIM_ConfigClockSource+0x16c>
 80073e0:	2b70      	cmp	r3, #112	; 0x70
 80073e2:	d01a      	beq.n	800741a <HAL_TIM_ConfigClockSource+0xa6>
 80073e4:	2b70      	cmp	r3, #112	; 0x70
 80073e6:	d87b      	bhi.n	80074e0 <HAL_TIM_ConfigClockSource+0x16c>
 80073e8:	2b60      	cmp	r3, #96	; 0x60
 80073ea:	d050      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x11a>
 80073ec:	2b60      	cmp	r3, #96	; 0x60
 80073ee:	d877      	bhi.n	80074e0 <HAL_TIM_ConfigClockSource+0x16c>
 80073f0:	2b50      	cmp	r3, #80	; 0x50
 80073f2:	d03c      	beq.n	800746e <HAL_TIM_ConfigClockSource+0xfa>
 80073f4:	2b50      	cmp	r3, #80	; 0x50
 80073f6:	d873      	bhi.n	80074e0 <HAL_TIM_ConfigClockSource+0x16c>
 80073f8:	2b40      	cmp	r3, #64	; 0x40
 80073fa:	d058      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x13a>
 80073fc:	2b40      	cmp	r3, #64	; 0x40
 80073fe:	d86f      	bhi.n	80074e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007400:	2b30      	cmp	r3, #48	; 0x30
 8007402:	d064      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0x15a>
 8007404:	2b30      	cmp	r3, #48	; 0x30
 8007406:	d86b      	bhi.n	80074e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007408:	2b20      	cmp	r3, #32
 800740a:	d060      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0x15a>
 800740c:	2b20      	cmp	r3, #32
 800740e:	d867      	bhi.n	80074e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007410:	2b00      	cmp	r3, #0
 8007412:	d05c      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0x15a>
 8007414:	2b10      	cmp	r3, #16
 8007416:	d05a      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0x15a>
 8007418:	e062      	b.n	80074e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6818      	ldr	r0, [r3, #0]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	6899      	ldr	r1, [r3, #8]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f000 fb5d 	bl	8007ae8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800743c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	609a      	str	r2, [r3, #8]
      break;
 8007446:	e04f      	b.n	80074e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6818      	ldr	r0, [r3, #0]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	6899      	ldr	r1, [r3, #8]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f000 fb46 	bl	8007ae8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800746a:	609a      	str	r2, [r3, #8]
      break;
 800746c:	e03c      	b.n	80074e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	6859      	ldr	r1, [r3, #4]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	461a      	mov	r2, r3
 800747c:	f000 faba 	bl	80079f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2150      	movs	r1, #80	; 0x50
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fb13 	bl	8007ab2 <TIM_ITRx_SetConfig>
      break;
 800748c:	e02c      	b.n	80074e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6818      	ldr	r0, [r3, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	6859      	ldr	r1, [r3, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	461a      	mov	r2, r3
 800749c:	f000 fad9 	bl	8007a52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2160      	movs	r1, #96	; 0x60
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fb03 	bl	8007ab2 <TIM_ITRx_SetConfig>
      break;
 80074ac:	e01c      	b.n	80074e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6818      	ldr	r0, [r3, #0]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	6859      	ldr	r1, [r3, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	461a      	mov	r2, r3
 80074bc:	f000 fa9a 	bl	80079f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2140      	movs	r1, #64	; 0x40
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 faf3 	bl	8007ab2 <TIM_ITRx_SetConfig>
      break;
 80074cc:	e00c      	b.n	80074e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4619      	mov	r1, r3
 80074d8:	4610      	mov	r0, r2
 80074da:	f000 faea 	bl	8007ab2 <TIM_ITRx_SetConfig>
      break;
 80074de:	e003      	b.n	80074e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	73fb      	strb	r3, [r7, #15]
      break;
 80074e4:	e000      	b.n	80074e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007532:	bf00      	nop
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800753e:	b480      	push	{r7}
 8007540:	b083      	sub	sp, #12
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007546:	bf00      	nop
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
	...

08007554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a40      	ldr	r2, [pc, #256]	; (8007668 <TIM_Base_SetConfig+0x114>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d013      	beq.n	8007594 <TIM_Base_SetConfig+0x40>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007572:	d00f      	beq.n	8007594 <TIM_Base_SetConfig+0x40>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a3d      	ldr	r2, [pc, #244]	; (800766c <TIM_Base_SetConfig+0x118>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00b      	beq.n	8007594 <TIM_Base_SetConfig+0x40>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a3c      	ldr	r2, [pc, #240]	; (8007670 <TIM_Base_SetConfig+0x11c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d007      	beq.n	8007594 <TIM_Base_SetConfig+0x40>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a3b      	ldr	r2, [pc, #236]	; (8007674 <TIM_Base_SetConfig+0x120>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d003      	beq.n	8007594 <TIM_Base_SetConfig+0x40>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a3a      	ldr	r2, [pc, #232]	; (8007678 <TIM_Base_SetConfig+0x124>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d108      	bne.n	80075a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a2f      	ldr	r2, [pc, #188]	; (8007668 <TIM_Base_SetConfig+0x114>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d02b      	beq.n	8007606 <TIM_Base_SetConfig+0xb2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b4:	d027      	beq.n	8007606 <TIM_Base_SetConfig+0xb2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a2c      	ldr	r2, [pc, #176]	; (800766c <TIM_Base_SetConfig+0x118>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d023      	beq.n	8007606 <TIM_Base_SetConfig+0xb2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a2b      	ldr	r2, [pc, #172]	; (8007670 <TIM_Base_SetConfig+0x11c>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d01f      	beq.n	8007606 <TIM_Base_SetConfig+0xb2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a2a      	ldr	r2, [pc, #168]	; (8007674 <TIM_Base_SetConfig+0x120>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d01b      	beq.n	8007606 <TIM_Base_SetConfig+0xb2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a29      	ldr	r2, [pc, #164]	; (8007678 <TIM_Base_SetConfig+0x124>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d017      	beq.n	8007606 <TIM_Base_SetConfig+0xb2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a28      	ldr	r2, [pc, #160]	; (800767c <TIM_Base_SetConfig+0x128>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d013      	beq.n	8007606 <TIM_Base_SetConfig+0xb2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a27      	ldr	r2, [pc, #156]	; (8007680 <TIM_Base_SetConfig+0x12c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d00f      	beq.n	8007606 <TIM_Base_SetConfig+0xb2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a26      	ldr	r2, [pc, #152]	; (8007684 <TIM_Base_SetConfig+0x130>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d00b      	beq.n	8007606 <TIM_Base_SetConfig+0xb2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a25      	ldr	r2, [pc, #148]	; (8007688 <TIM_Base_SetConfig+0x134>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d007      	beq.n	8007606 <TIM_Base_SetConfig+0xb2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a24      	ldr	r2, [pc, #144]	; (800768c <TIM_Base_SetConfig+0x138>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d003      	beq.n	8007606 <TIM_Base_SetConfig+0xb2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a23      	ldr	r2, [pc, #140]	; (8007690 <TIM_Base_SetConfig+0x13c>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d108      	bne.n	8007618 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800760c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	4313      	orrs	r3, r2
 8007616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	4313      	orrs	r3, r2
 8007624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a0a      	ldr	r2, [pc, #40]	; (8007668 <TIM_Base_SetConfig+0x114>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d003      	beq.n	800764c <TIM_Base_SetConfig+0xf8>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a0c      	ldr	r2, [pc, #48]	; (8007678 <TIM_Base_SetConfig+0x124>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d103      	bne.n	8007654 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	691a      	ldr	r2, [r3, #16]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	615a      	str	r2, [r3, #20]
}
 800765a:	bf00      	nop
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	40010000 	.word	0x40010000
 800766c:	40000400 	.word	0x40000400
 8007670:	40000800 	.word	0x40000800
 8007674:	40000c00 	.word	0x40000c00
 8007678:	40010400 	.word	0x40010400
 800767c:	40014000 	.word	0x40014000
 8007680:	40014400 	.word	0x40014400
 8007684:	40014800 	.word	0x40014800
 8007688:	40001800 	.word	0x40001800
 800768c:	40001c00 	.word	0x40001c00
 8007690:	40002000 	.word	0x40002000

08007694 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	f023 0201 	bic.w	r2, r3, #1
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f023 0303 	bic.w	r3, r3, #3
 80076ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f023 0302 	bic.w	r3, r3, #2
 80076dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a20      	ldr	r2, [pc, #128]	; (800776c <TIM_OC1_SetConfig+0xd8>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d003      	beq.n	80076f8 <TIM_OC1_SetConfig+0x64>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a1f      	ldr	r2, [pc, #124]	; (8007770 <TIM_OC1_SetConfig+0xdc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d10c      	bne.n	8007712 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f023 0308 	bic.w	r3, r3, #8
 80076fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	4313      	orrs	r3, r2
 8007708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f023 0304 	bic.w	r3, r3, #4
 8007710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a15      	ldr	r2, [pc, #84]	; (800776c <TIM_OC1_SetConfig+0xd8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d003      	beq.n	8007722 <TIM_OC1_SetConfig+0x8e>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a14      	ldr	r2, [pc, #80]	; (8007770 <TIM_OC1_SetConfig+0xdc>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d111      	bne.n	8007746 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	4313      	orrs	r3, r2
 800773a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	4313      	orrs	r3, r2
 8007744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	621a      	str	r2, [r3, #32]
}
 8007760:	bf00      	nop
 8007762:	371c      	adds	r7, #28
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	40010000 	.word	0x40010000
 8007770:	40010400 	.word	0x40010400

08007774 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007774:	b480      	push	{r7}
 8007776:	b087      	sub	sp, #28
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	f023 0210 	bic.w	r2, r3, #16
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	021b      	lsls	r3, r3, #8
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f023 0320 	bic.w	r3, r3, #32
 80077be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	011b      	lsls	r3, r3, #4
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a22      	ldr	r2, [pc, #136]	; (8007858 <TIM_OC2_SetConfig+0xe4>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d003      	beq.n	80077dc <TIM_OC2_SetConfig+0x68>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a21      	ldr	r2, [pc, #132]	; (800785c <TIM_OC2_SetConfig+0xe8>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d10d      	bne.n	80077f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a17      	ldr	r2, [pc, #92]	; (8007858 <TIM_OC2_SetConfig+0xe4>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d003      	beq.n	8007808 <TIM_OC2_SetConfig+0x94>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a16      	ldr	r2, [pc, #88]	; (800785c <TIM_OC2_SetConfig+0xe8>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d113      	bne.n	8007830 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800780e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007816:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	4313      	orrs	r3, r2
 8007822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	4313      	orrs	r3, r2
 800782e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	621a      	str	r2, [r3, #32]
}
 800784a:	bf00      	nop
 800784c:	371c      	adds	r7, #28
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	40010000 	.word	0x40010000
 800785c:	40010400 	.word	0x40010400

08007860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f023 0303 	bic.w	r3, r3, #3
 8007896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	4313      	orrs	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a21      	ldr	r2, [pc, #132]	; (8007940 <TIM_OC3_SetConfig+0xe0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d003      	beq.n	80078c6 <TIM_OC3_SetConfig+0x66>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a20      	ldr	r2, [pc, #128]	; (8007944 <TIM_OC3_SetConfig+0xe4>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d10d      	bne.n	80078e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	021b      	lsls	r3, r3, #8
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a16      	ldr	r2, [pc, #88]	; (8007940 <TIM_OC3_SetConfig+0xe0>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d003      	beq.n	80078f2 <TIM_OC3_SetConfig+0x92>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a15      	ldr	r2, [pc, #84]	; (8007944 <TIM_OC3_SetConfig+0xe4>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d113      	bne.n	800791a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	011b      	lsls	r3, r3, #4
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	4313      	orrs	r3, r2
 800790c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	4313      	orrs	r3, r2
 8007918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	621a      	str	r2, [r3, #32]
}
 8007934:	bf00      	nop
 8007936:	371c      	adds	r7, #28
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	40010000 	.word	0x40010000
 8007944:	40010400 	.word	0x40010400

08007948 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800797e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	021b      	lsls	r3, r3, #8
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	4313      	orrs	r3, r2
 800798a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	031b      	lsls	r3, r3, #12
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	4313      	orrs	r3, r2
 800799e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a12      	ldr	r2, [pc, #72]	; (80079ec <TIM_OC4_SetConfig+0xa4>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d003      	beq.n	80079b0 <TIM_OC4_SetConfig+0x68>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a11      	ldr	r2, [pc, #68]	; (80079f0 <TIM_OC4_SetConfig+0xa8>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d109      	bne.n	80079c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	019b      	lsls	r3, r3, #6
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	621a      	str	r2, [r3, #32]
}
 80079de:	bf00      	nop
 80079e0:	371c      	adds	r7, #28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	40010000 	.word	0x40010000
 80079f0:	40010400 	.word	0x40010400

080079f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6a1b      	ldr	r3, [r3, #32]
 8007a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	f023 0201 	bic.w	r2, r3, #1
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f023 030a 	bic.w	r3, r3, #10
 8007a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	621a      	str	r2, [r3, #32]
}
 8007a46:	bf00      	nop
 8007a48:	371c      	adds	r7, #28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b087      	sub	sp, #28
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	f023 0210 	bic.w	r2, r3, #16
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	031b      	lsls	r3, r3, #12
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	011b      	lsls	r3, r3, #4
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	621a      	str	r2, [r3, #32]
}
 8007aa6:	bf00      	nop
 8007aa8:	371c      	adds	r7, #28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b085      	sub	sp, #20
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	f043 0307 	orr.w	r3, r3, #7
 8007ad4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	609a      	str	r2, [r3, #8]
}
 8007adc:	bf00      	nop
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	021a      	lsls	r2, r3, #8
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	609a      	str	r2, [r3, #8]
}
 8007b1c:	bf00      	nop
 8007b1e:	371c      	adds	r7, #28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f003 031f 	and.w	r3, r3, #31
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6a1a      	ldr	r2, [r3, #32]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	43db      	mvns	r3, r3
 8007b4a:	401a      	ands	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a1a      	ldr	r2, [r3, #32]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f003 031f 	and.w	r3, r3, #31
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b60:	431a      	orrs	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	621a      	str	r2, [r3, #32]
}
 8007b66:	bf00      	nop
 8007b68:	371c      	adds	r7, #28
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
	...

08007b74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d101      	bne.n	8007b8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b88:	2302      	movs	r3, #2
 8007b8a:	e05a      	b.n	8007c42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a21      	ldr	r2, [pc, #132]	; (8007c50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d022      	beq.n	8007c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd8:	d01d      	beq.n	8007c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a1d      	ldr	r2, [pc, #116]	; (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d018      	beq.n	8007c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a1b      	ldr	r2, [pc, #108]	; (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d013      	beq.n	8007c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a1a      	ldr	r2, [pc, #104]	; (8007c5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d00e      	beq.n	8007c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a18      	ldr	r2, [pc, #96]	; (8007c60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d009      	beq.n	8007c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a17      	ldr	r2, [pc, #92]	; (8007c64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d004      	beq.n	8007c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a15      	ldr	r2, [pc, #84]	; (8007c68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d10c      	bne.n	8007c30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	40010000 	.word	0x40010000
 8007c54:	40000400 	.word	0x40000400
 8007c58:	40000800 	.word	0x40000800
 8007c5c:	40000c00 	.word	0x40000c00
 8007c60:	40010400 	.word	0x40010400
 8007c64:	40014000 	.word	0x40014000
 8007c68:	40001800 	.word	0x40001800

08007c6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d101      	bne.n	8007c88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c84:	2302      	movs	r3, #2
 8007c86:	e03d      	b.n	8007d04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e03f      	b.n	8007dca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7fc fc1a 	bl	8004598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2224      	movs	r2, #36	; 0x24
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68da      	ldr	r2, [r3, #12]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fddf 	bl	8008940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	691a      	ldr	r2, [r3, #16]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	695a      	ldr	r2, [r3, #20]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007da0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007db0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b08a      	sub	sp, #40	; 0x28
 8007dd6:	af02      	add	r7, sp, #8
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	603b      	str	r3, [r7, #0]
 8007dde:	4613      	mov	r3, r2
 8007de0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b20      	cmp	r3, #32
 8007df0:	d17c      	bne.n	8007eec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d002      	beq.n	8007dfe <HAL_UART_Transmit+0x2c>
 8007df8:	88fb      	ldrh	r3, [r7, #6]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e075      	b.n	8007eee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d101      	bne.n	8007e10 <HAL_UART_Transmit+0x3e>
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	e06e      	b.n	8007eee <HAL_UART_Transmit+0x11c>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2221      	movs	r2, #33	; 0x21
 8007e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e26:	f7fc febf 	bl	8004ba8 <HAL_GetTick>
 8007e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	88fa      	ldrh	r2, [r7, #6]
 8007e30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	88fa      	ldrh	r2, [r7, #6]
 8007e36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e40:	d108      	bne.n	8007e54 <HAL_UART_Transmit+0x82>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d104      	bne.n	8007e54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	61bb      	str	r3, [r7, #24]
 8007e52:	e003      	b.n	8007e5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007e64:	e02a      	b.n	8007ebc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2180      	movs	r1, #128	; 0x80
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 fb1f 	bl	80084b4 <UART_WaitOnFlagUntilTimeout>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e036      	b.n	8007eee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10b      	bne.n	8007e9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	3302      	adds	r3, #2
 8007e9a:	61bb      	str	r3, [r7, #24]
 8007e9c:	e007      	b.n	8007eae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	781a      	ldrb	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1cf      	bne.n	8007e66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2140      	movs	r1, #64	; 0x40
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 faef 	bl	80084b4 <UART_WaitOnFlagUntilTimeout>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d001      	beq.n	8007ee0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e006      	b.n	8007eee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	e000      	b.n	8007eee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007eec:	2302      	movs	r3, #2
  }
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3720      	adds	r7, #32
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	60f8      	str	r0, [r7, #12]
 8007efe:	60b9      	str	r1, [r7, #8]
 8007f00:	4613      	mov	r3, r2
 8007f02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	d11d      	bne.n	8007f4c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d002      	beq.n	8007f1c <HAL_UART_Receive_IT+0x26>
 8007f16:	88fb      	ldrh	r3, [r7, #6]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e016      	b.n	8007f4e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <HAL_UART_Receive_IT+0x38>
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	e00f      	b.n	8007f4e <HAL_UART_Receive_IT+0x58>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f3c:	88fb      	ldrh	r3, [r7, #6]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	68b9      	ldr	r1, [r7, #8]
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 fb24 	bl	8008590 <UART_Start_Receive_IT>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	e000      	b.n	8007f4e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007f4c:	2302      	movs	r3, #2
  }
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b0ba      	sub	sp, #232	; 0xe8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f8e:	f003 030f 	and.w	r3, r3, #15
 8007f92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10f      	bne.n	8007fbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d009      	beq.n	8007fbe <HAL_UART_IRQHandler+0x66>
 8007faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fae:	f003 0320 	and.w	r3, r3, #32
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fc07 	bl	80087ca <UART_Receive_IT>
      return;
 8007fbc:	e256      	b.n	800846c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 80de 	beq.w	8008184 <HAL_UART_IRQHandler+0x22c>
 8007fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d106      	bne.n	8007fe2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 80d1 	beq.w	8008184 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00b      	beq.n	8008006 <HAL_UART_IRQHandler+0xae>
 8007fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d005      	beq.n	8008006 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffe:	f043 0201 	orr.w	r2, r3, #1
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800800a:	f003 0304 	and.w	r3, r3, #4
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00b      	beq.n	800802a <HAL_UART_IRQHandler+0xd2>
 8008012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d005      	beq.n	800802a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008022:	f043 0202 	orr.w	r2, r3, #2
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800802a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00b      	beq.n	800804e <HAL_UART_IRQHandler+0xf6>
 8008036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	2b00      	cmp	r3, #0
 8008040:	d005      	beq.n	800804e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008046:	f043 0204 	orr.w	r2, r3, #4
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800804e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008052:	f003 0308 	and.w	r3, r3, #8
 8008056:	2b00      	cmp	r3, #0
 8008058:	d011      	beq.n	800807e <HAL_UART_IRQHandler+0x126>
 800805a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b00      	cmp	r3, #0
 8008064:	d105      	bne.n	8008072 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b00      	cmp	r3, #0
 8008070:	d005      	beq.n	800807e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	f043 0208 	orr.w	r2, r3, #8
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 81ed 	beq.w	8008462 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800808c:	f003 0320 	and.w	r3, r3, #32
 8008090:	2b00      	cmp	r3, #0
 8008092:	d008      	beq.n	80080a6 <HAL_UART_IRQHandler+0x14e>
 8008094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008098:	f003 0320 	and.w	r3, r3, #32
 800809c:	2b00      	cmp	r3, #0
 800809e:	d002      	beq.n	80080a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fb92 	bl	80087ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b0:	2b40      	cmp	r3, #64	; 0x40
 80080b2:	bf0c      	ite	eq
 80080b4:	2301      	moveq	r3, #1
 80080b6:	2300      	movne	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c2:	f003 0308 	and.w	r3, r3, #8
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d103      	bne.n	80080d2 <HAL_UART_IRQHandler+0x17a>
 80080ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d04f      	beq.n	8008172 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fa9a 	bl	800860c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e2:	2b40      	cmp	r3, #64	; 0x40
 80080e4:	d141      	bne.n	800816a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3314      	adds	r3, #20
 80080ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80080fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3314      	adds	r3, #20
 800810e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008112:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800811e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800812a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1d9      	bne.n	80080e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008136:	2b00      	cmp	r3, #0
 8008138:	d013      	beq.n	8008162 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	4a7d      	ldr	r2, [pc, #500]	; (8008334 <HAL_UART_IRQHandler+0x3dc>)
 8008140:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008146:	4618      	mov	r0, r3
 8008148:	f7fd fbd4 	bl	80058f4 <HAL_DMA_Abort_IT>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d016      	beq.n	8008180 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800815c:	4610      	mov	r0, r2
 800815e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008160:	e00e      	b.n	8008180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f990 	bl	8008488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008168:	e00a      	b.n	8008180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f98c 	bl	8008488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008170:	e006      	b.n	8008180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f988 	bl	8008488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800817e:	e170      	b.n	8008462 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008180:	bf00      	nop
    return;
 8008182:	e16e      	b.n	8008462 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008188:	2b01      	cmp	r3, #1
 800818a:	f040 814a 	bne.w	8008422 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800818e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008192:	f003 0310 	and.w	r3, r3, #16
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 8143 	beq.w	8008422 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800819c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a0:	f003 0310 	and.w	r3, r3, #16
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 813c 	beq.w	8008422 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081aa:	2300      	movs	r3, #0
 80081ac:	60bb      	str	r3, [r7, #8]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	60bb      	str	r3, [r7, #8]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	60bb      	str	r3, [r7, #8]
 80081be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ca:	2b40      	cmp	r3, #64	; 0x40
 80081cc:	f040 80b4 	bne.w	8008338 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 8140 	beq.w	8008466 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081ee:	429a      	cmp	r2, r3
 80081f0:	f080 8139 	bcs.w	8008466 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008206:	f000 8088 	beq.w	800831a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	330c      	adds	r3, #12
 8008210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008218:	e853 3f00 	ldrex	r3, [r3]
 800821c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	330c      	adds	r3, #12
 8008232:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008236:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800823a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008242:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800824e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1d9      	bne.n	800820a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3314      	adds	r3, #20
 800825c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008260:	e853 3f00 	ldrex	r3, [r3]
 8008264:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008266:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008268:	f023 0301 	bic.w	r3, r3, #1
 800826c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3314      	adds	r3, #20
 8008276:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800827a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800827e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008280:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008282:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008286:	e841 2300 	strex	r3, r2, [r1]
 800828a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800828c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1e1      	bne.n	8008256 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3314      	adds	r3, #20
 8008298:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3314      	adds	r3, #20
 80082b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082be:	e841 2300 	strex	r3, r2, [r1]
 80082c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1e3      	bne.n	8008292 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2220      	movs	r2, #32
 80082ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	330c      	adds	r3, #12
 80082de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e2:	e853 3f00 	ldrex	r3, [r3]
 80082e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ea:	f023 0310 	bic.w	r3, r3, #16
 80082ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	330c      	adds	r3, #12
 80082f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80082fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80082fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008300:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008302:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008304:	e841 2300 	strex	r3, r2, [r1]
 8008308:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800830a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1e3      	bne.n	80082d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008314:	4618      	mov	r0, r3
 8008316:	f7fd fa7d 	bl	8005814 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008322:	b29b      	uxth	r3, r3
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	b29b      	uxth	r3, r3
 8008328:	4619      	mov	r1, r3
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f8b6 	bl	800849c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008330:	e099      	b.n	8008466 <HAL_UART_IRQHandler+0x50e>
 8008332:	bf00      	nop
 8008334:	080086d3 	.word	0x080086d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008340:	b29b      	uxth	r3, r3
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800834c:	b29b      	uxth	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 808b 	beq.w	800846a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008354:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 8086 	beq.w	800846a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	330c      	adds	r3, #12
 8008364:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800836e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008370:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008374:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	330c      	adds	r3, #12
 800837e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008382:	647a      	str	r2, [r7, #68]	; 0x44
 8008384:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008386:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800838a:	e841 2300 	strex	r3, r2, [r1]
 800838e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1e3      	bne.n	800835e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3314      	adds	r3, #20
 800839c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a0:	e853 3f00 	ldrex	r3, [r3]
 80083a4:	623b      	str	r3, [r7, #32]
   return(result);
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	f023 0301 	bic.w	r3, r3, #1
 80083ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3314      	adds	r3, #20
 80083b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80083ba:	633a      	str	r2, [r7, #48]	; 0x30
 80083bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083c2:	e841 2300 	strex	r3, r2, [r1]
 80083c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e3      	bne.n	8008396 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2220      	movs	r2, #32
 80083d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	330c      	adds	r3, #12
 80083e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	e853 3f00 	ldrex	r3, [r3]
 80083ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f023 0310 	bic.w	r3, r3, #16
 80083f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	330c      	adds	r3, #12
 80083fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008400:	61fa      	str	r2, [r7, #28]
 8008402:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008404:	69b9      	ldr	r1, [r7, #24]
 8008406:	69fa      	ldr	r2, [r7, #28]
 8008408:	e841 2300 	strex	r3, r2, [r1]
 800840c:	617b      	str	r3, [r7, #20]
   return(result);
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1e3      	bne.n	80083dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008418:	4619      	mov	r1, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f83e 	bl	800849c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008420:	e023      	b.n	800846a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800842a:	2b00      	cmp	r3, #0
 800842c:	d009      	beq.n	8008442 <HAL_UART_IRQHandler+0x4ea>
 800842e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f95d 	bl	80086fa <UART_Transmit_IT>
    return;
 8008440:	e014      	b.n	800846c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00e      	beq.n	800846c <HAL_UART_IRQHandler+0x514>
 800844e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008456:	2b00      	cmp	r3, #0
 8008458:	d008      	beq.n	800846c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f99d 	bl	800879a <UART_EndTransmit_IT>
    return;
 8008460:	e004      	b.n	800846c <HAL_UART_IRQHandler+0x514>
    return;
 8008462:	bf00      	nop
 8008464:	e002      	b.n	800846c <HAL_UART_IRQHandler+0x514>
      return;
 8008466:	bf00      	nop
 8008468:	e000      	b.n	800846c <HAL_UART_IRQHandler+0x514>
      return;
 800846a:	bf00      	nop
  }
}
 800846c:	37e8      	adds	r7, #232	; 0xe8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop

08008474 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b090      	sub	sp, #64	; 0x40
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	4613      	mov	r3, r2
 80084c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084c4:	e050      	b.n	8008568 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084cc:	d04c      	beq.n	8008568 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80084ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d007      	beq.n	80084e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80084d4:	f7fc fb68 	bl	8004ba8 <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d241      	bcs.n	8008568 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	330c      	adds	r3, #12
 80084ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ee:	e853 3f00 	ldrex	r3, [r3]
 80084f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	330c      	adds	r3, #12
 8008502:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008504:	637a      	str	r2, [r7, #52]	; 0x34
 8008506:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008508:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800850a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800850c:	e841 2300 	strex	r3, r2, [r1]
 8008510:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e5      	bne.n	80084e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3314      	adds	r3, #20
 800851e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	e853 3f00 	ldrex	r3, [r3]
 8008526:	613b      	str	r3, [r7, #16]
   return(result);
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	f023 0301 	bic.w	r3, r3, #1
 800852e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3314      	adds	r3, #20
 8008536:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008538:	623a      	str	r2, [r7, #32]
 800853a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853c:	69f9      	ldr	r1, [r7, #28]
 800853e:	6a3a      	ldr	r2, [r7, #32]
 8008540:	e841 2300 	strex	r3, r2, [r1]
 8008544:	61bb      	str	r3, [r7, #24]
   return(result);
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e5      	bne.n	8008518 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2220      	movs	r2, #32
 8008550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2220      	movs	r2, #32
 8008558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e00f      	b.n	8008588 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	4013      	ands	r3, r2
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	429a      	cmp	r2, r3
 8008576:	bf0c      	ite	eq
 8008578:	2301      	moveq	r3, #1
 800857a:	2300      	movne	r3, #0
 800857c:	b2db      	uxtb	r3, r3
 800857e:	461a      	mov	r2, r3
 8008580:	79fb      	ldrb	r3, [r7, #7]
 8008582:	429a      	cmp	r2, r3
 8008584:	d09f      	beq.n	80084c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3740      	adds	r7, #64	; 0x40
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	4613      	mov	r3, r2
 800859c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	88fa      	ldrh	r2, [r7, #6]
 80085a8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	88fa      	ldrh	r2, [r7, #6]
 80085ae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2222      	movs	r2, #34	; 0x22
 80085ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d007      	beq.n	80085de <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68da      	ldr	r2, [r3, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	695a      	ldr	r2, [r3, #20]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f042 0201 	orr.w	r2, r2, #1
 80085ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68da      	ldr	r2, [r3, #12]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f042 0220 	orr.w	r2, r2, #32
 80085fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800860c:	b480      	push	{r7}
 800860e:	b095      	sub	sp, #84	; 0x54
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	330c      	adds	r3, #12
 800861a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861e:	e853 3f00 	ldrex	r3, [r3]
 8008622:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800862a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	330c      	adds	r3, #12
 8008632:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008634:	643a      	str	r2, [r7, #64]	; 0x40
 8008636:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008638:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800863a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800863c:	e841 2300 	strex	r3, r2, [r1]
 8008640:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1e5      	bne.n	8008614 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3314      	adds	r3, #20
 800864e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	e853 3f00 	ldrex	r3, [r3]
 8008656:	61fb      	str	r3, [r7, #28]
   return(result);
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	f023 0301 	bic.w	r3, r3, #1
 800865e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3314      	adds	r3, #20
 8008666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008668:	62fa      	str	r2, [r7, #44]	; 0x2c
 800866a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800866e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008670:	e841 2300 	strex	r3, r2, [r1]
 8008674:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1e5      	bne.n	8008648 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008680:	2b01      	cmp	r3, #1
 8008682:	d119      	bne.n	80086b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	330c      	adds	r3, #12
 800868a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	e853 3f00 	ldrex	r3, [r3]
 8008692:	60bb      	str	r3, [r7, #8]
   return(result);
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f023 0310 	bic.w	r3, r3, #16
 800869a:	647b      	str	r3, [r7, #68]	; 0x44
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	330c      	adds	r3, #12
 80086a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086a4:	61ba      	str	r2, [r7, #24]
 80086a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a8:	6979      	ldr	r1, [r7, #20]
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	e841 2300 	strex	r3, r2, [r1]
 80086b0:	613b      	str	r3, [r7, #16]
   return(result);
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1e5      	bne.n	8008684 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2220      	movs	r2, #32
 80086bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80086c6:	bf00      	nop
 80086c8:	3754      	adds	r7, #84	; 0x54
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b084      	sub	sp, #16
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f7ff fecb 	bl	8008488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086f2:	bf00      	nop
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b085      	sub	sp, #20
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b21      	cmp	r3, #33	; 0x21
 800870c:	d13e      	bne.n	800878c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008716:	d114      	bne.n	8008742 <UART_Transmit_IT+0x48>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d110      	bne.n	8008742 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a1b      	ldr	r3, [r3, #32]
 8008724:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	881b      	ldrh	r3, [r3, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008734:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	1c9a      	adds	r2, r3, #2
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	621a      	str	r2, [r3, #32]
 8008740:	e008      	b.n	8008754 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	1c59      	adds	r1, r3, #1
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	6211      	str	r1, [r2, #32]
 800874c:	781a      	ldrb	r2, [r3, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008758:	b29b      	uxth	r3, r3
 800875a:	3b01      	subs	r3, #1
 800875c:	b29b      	uxth	r3, r3
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	4619      	mov	r1, r3
 8008762:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10f      	bne.n	8008788 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68da      	ldr	r2, [r3, #12]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008776:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68da      	ldr	r2, [r3, #12]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008786:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	e000      	b.n	800878e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800878c:	2302      	movs	r3, #2
  }
}
 800878e:	4618      	mov	r0, r3
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68da      	ldr	r2, [r3, #12]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2220      	movs	r2, #32
 80087b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff fe5a 	bl	8008474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b08c      	sub	sp, #48	; 0x30
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b22      	cmp	r3, #34	; 0x22
 80087dc:	f040 80ab 	bne.w	8008936 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e8:	d117      	bne.n	800881a <UART_Receive_IT+0x50>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d113      	bne.n	800881a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	b29b      	uxth	r3, r3
 8008804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008808:	b29a      	uxth	r2, r3
 800880a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008812:	1c9a      	adds	r2, r3, #2
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	629a      	str	r2, [r3, #40]	; 0x28
 8008818:	e026      	b.n	8008868 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008820:	2300      	movs	r3, #0
 8008822:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800882c:	d007      	beq.n	800883e <UART_Receive_IT+0x74>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10a      	bne.n	800884c <UART_Receive_IT+0x82>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d106      	bne.n	800884c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	b2da      	uxtb	r2, r3
 8008846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008848:	701a      	strb	r2, [r3, #0]
 800884a:	e008      	b.n	800885e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	b2db      	uxtb	r3, r3
 8008854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008858:	b2da      	uxtb	r2, r3
 800885a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800886c:	b29b      	uxth	r3, r3
 800886e:	3b01      	subs	r3, #1
 8008870:	b29b      	uxth	r3, r3
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	4619      	mov	r1, r3
 8008876:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008878:	2b00      	cmp	r3, #0
 800887a:	d15a      	bne.n	8008932 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68da      	ldr	r2, [r3, #12]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f022 0220 	bic.w	r2, r2, #32
 800888a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68da      	ldr	r2, [r3, #12]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800889a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	695a      	ldr	r2, [r3, #20]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f022 0201 	bic.w	r2, r2, #1
 80088aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2220      	movs	r2, #32
 80088b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d135      	bne.n	8008928 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	330c      	adds	r3, #12
 80088c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	613b      	str	r3, [r7, #16]
   return(result);
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f023 0310 	bic.w	r3, r3, #16
 80088d8:	627b      	str	r3, [r7, #36]	; 0x24
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	330c      	adds	r3, #12
 80088e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e2:	623a      	str	r2, [r7, #32]
 80088e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	69f9      	ldr	r1, [r7, #28]
 80088e8:	6a3a      	ldr	r2, [r7, #32]
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e5      	bne.n	80088c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0310 	and.w	r3, r3, #16
 8008900:	2b10      	cmp	r3, #16
 8008902:	d10a      	bne.n	800891a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008904:	2300      	movs	r3, #0
 8008906:	60fb      	str	r3, [r7, #12]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	60fb      	str	r3, [r7, #12]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	60fb      	str	r3, [r7, #12]
 8008918:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7ff fdbb 	bl	800849c <HAL_UARTEx_RxEventCallback>
 8008926:	e002      	b.n	800892e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7fb fb65 	bl	8003ff8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	e002      	b.n	8008938 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	e000      	b.n	8008938 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008936:	2302      	movs	r3, #2
  }
}
 8008938:	4618      	mov	r0, r3
 800893a:	3730      	adds	r7, #48	; 0x30
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008944:	b0c0      	sub	sp, #256	; 0x100
 8008946:	af00      	add	r7, sp, #0
 8008948:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800894c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800895c:	68d9      	ldr	r1, [r3, #12]
 800895e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	ea40 0301 	orr.w	r3, r0, r1
 8008968:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800896a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800896e:	689a      	ldr	r2, [r3, #8]
 8008970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	431a      	orrs	r2, r3
 8008978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	431a      	orrs	r2, r3
 8008980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	4313      	orrs	r3, r2
 8008988:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800898c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008998:	f021 010c 	bic.w	r1, r1, #12
 800899c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089a6:	430b      	orrs	r3, r1
 80089a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80089b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ba:	6999      	ldr	r1, [r3, #24]
 80089bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	ea40 0301 	orr.w	r3, r0, r1
 80089c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80089c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	4b8f      	ldr	r3, [pc, #572]	; (8008c0c <UART_SetConfig+0x2cc>)
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d005      	beq.n	80089e0 <UART_SetConfig+0xa0>
 80089d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	4b8d      	ldr	r3, [pc, #564]	; (8008c10 <UART_SetConfig+0x2d0>)
 80089dc:	429a      	cmp	r2, r3
 80089de:	d104      	bne.n	80089ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80089e0:	f7fe f8a0 	bl	8006b24 <HAL_RCC_GetPCLK2Freq>
 80089e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80089e8:	e003      	b.n	80089f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80089ea:	f7fe f887 	bl	8006afc <HAL_RCC_GetPCLK1Freq>
 80089ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089fc:	f040 810c 	bne.w	8008c18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a04:	2200      	movs	r2, #0
 8008a06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008a0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008a12:	4622      	mov	r2, r4
 8008a14:	462b      	mov	r3, r5
 8008a16:	1891      	adds	r1, r2, r2
 8008a18:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a1a:	415b      	adcs	r3, r3
 8008a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008a22:	4621      	mov	r1, r4
 8008a24:	eb12 0801 	adds.w	r8, r2, r1
 8008a28:	4629      	mov	r1, r5
 8008a2a:	eb43 0901 	adc.w	r9, r3, r1
 8008a2e:	f04f 0200 	mov.w	r2, #0
 8008a32:	f04f 0300 	mov.w	r3, #0
 8008a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a42:	4690      	mov	r8, r2
 8008a44:	4699      	mov	r9, r3
 8008a46:	4623      	mov	r3, r4
 8008a48:	eb18 0303 	adds.w	r3, r8, r3
 8008a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a50:	462b      	mov	r3, r5
 8008a52:	eb49 0303 	adc.w	r3, r9, r3
 8008a56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008a6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008a6e:	460b      	mov	r3, r1
 8008a70:	18db      	adds	r3, r3, r3
 8008a72:	653b      	str	r3, [r7, #80]	; 0x50
 8008a74:	4613      	mov	r3, r2
 8008a76:	eb42 0303 	adc.w	r3, r2, r3
 8008a7a:	657b      	str	r3, [r7, #84]	; 0x54
 8008a7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008a80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008a84:	f7f8 f910 	bl	8000ca8 <__aeabi_uldivmod>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4b61      	ldr	r3, [pc, #388]	; (8008c14 <UART_SetConfig+0x2d4>)
 8008a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8008a92:	095b      	lsrs	r3, r3, #5
 8008a94:	011c      	lsls	r4, r3, #4
 8008a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008aa0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008aa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008aa8:	4642      	mov	r2, r8
 8008aaa:	464b      	mov	r3, r9
 8008aac:	1891      	adds	r1, r2, r2
 8008aae:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ab0:	415b      	adcs	r3, r3
 8008ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ab4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ab8:	4641      	mov	r1, r8
 8008aba:	eb12 0a01 	adds.w	sl, r2, r1
 8008abe:	4649      	mov	r1, r9
 8008ac0:	eb43 0b01 	adc.w	fp, r3, r1
 8008ac4:	f04f 0200 	mov.w	r2, #0
 8008ac8:	f04f 0300 	mov.w	r3, #0
 8008acc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ad0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ad8:	4692      	mov	sl, r2
 8008ada:	469b      	mov	fp, r3
 8008adc:	4643      	mov	r3, r8
 8008ade:	eb1a 0303 	adds.w	r3, sl, r3
 8008ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ae6:	464b      	mov	r3, r9
 8008ae8:	eb4b 0303 	adc.w	r3, fp, r3
 8008aec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008afc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008b00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008b04:	460b      	mov	r3, r1
 8008b06:	18db      	adds	r3, r3, r3
 8008b08:	643b      	str	r3, [r7, #64]	; 0x40
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	eb42 0303 	adc.w	r3, r2, r3
 8008b10:	647b      	str	r3, [r7, #68]	; 0x44
 8008b12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008b1a:	f7f8 f8c5 	bl	8000ca8 <__aeabi_uldivmod>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4611      	mov	r1, r2
 8008b24:	4b3b      	ldr	r3, [pc, #236]	; (8008c14 <UART_SetConfig+0x2d4>)
 8008b26:	fba3 2301 	umull	r2, r3, r3, r1
 8008b2a:	095b      	lsrs	r3, r3, #5
 8008b2c:	2264      	movs	r2, #100	; 0x64
 8008b2e:	fb02 f303 	mul.w	r3, r2, r3
 8008b32:	1acb      	subs	r3, r1, r3
 8008b34:	00db      	lsls	r3, r3, #3
 8008b36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008b3a:	4b36      	ldr	r3, [pc, #216]	; (8008c14 <UART_SetConfig+0x2d4>)
 8008b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8008b40:	095b      	lsrs	r3, r3, #5
 8008b42:	005b      	lsls	r3, r3, #1
 8008b44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b48:	441c      	add	r4, r3
 8008b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008b58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008b5c:	4642      	mov	r2, r8
 8008b5e:	464b      	mov	r3, r9
 8008b60:	1891      	adds	r1, r2, r2
 8008b62:	63b9      	str	r1, [r7, #56]	; 0x38
 8008b64:	415b      	adcs	r3, r3
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b6c:	4641      	mov	r1, r8
 8008b6e:	1851      	adds	r1, r2, r1
 8008b70:	6339      	str	r1, [r7, #48]	; 0x30
 8008b72:	4649      	mov	r1, r9
 8008b74:	414b      	adcs	r3, r1
 8008b76:	637b      	str	r3, [r7, #52]	; 0x34
 8008b78:	f04f 0200 	mov.w	r2, #0
 8008b7c:	f04f 0300 	mov.w	r3, #0
 8008b80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008b84:	4659      	mov	r1, fp
 8008b86:	00cb      	lsls	r3, r1, #3
 8008b88:	4651      	mov	r1, sl
 8008b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b8e:	4651      	mov	r1, sl
 8008b90:	00ca      	lsls	r2, r1, #3
 8008b92:	4610      	mov	r0, r2
 8008b94:	4619      	mov	r1, r3
 8008b96:	4603      	mov	r3, r0
 8008b98:	4642      	mov	r2, r8
 8008b9a:	189b      	adds	r3, r3, r2
 8008b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ba0:	464b      	mov	r3, r9
 8008ba2:	460a      	mov	r2, r1
 8008ba4:	eb42 0303 	adc.w	r3, r2, r3
 8008ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008bb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008bbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	18db      	adds	r3, r3, r3
 8008bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	eb42 0303 	adc.w	r3, r2, r3
 8008bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008bd6:	f7f8 f867 	bl	8000ca8 <__aeabi_uldivmod>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	4b0d      	ldr	r3, [pc, #52]	; (8008c14 <UART_SetConfig+0x2d4>)
 8008be0:	fba3 1302 	umull	r1, r3, r3, r2
 8008be4:	095b      	lsrs	r3, r3, #5
 8008be6:	2164      	movs	r1, #100	; 0x64
 8008be8:	fb01 f303 	mul.w	r3, r1, r3
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	00db      	lsls	r3, r3, #3
 8008bf0:	3332      	adds	r3, #50	; 0x32
 8008bf2:	4a08      	ldr	r2, [pc, #32]	; (8008c14 <UART_SetConfig+0x2d4>)
 8008bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf8:	095b      	lsrs	r3, r3, #5
 8008bfa:	f003 0207 	and.w	r2, r3, #7
 8008bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4422      	add	r2, r4
 8008c06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c08:	e105      	b.n	8008e16 <UART_SetConfig+0x4d6>
 8008c0a:	bf00      	nop
 8008c0c:	40011000 	.word	0x40011000
 8008c10:	40011400 	.word	0x40011400
 8008c14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008c26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008c2a:	4642      	mov	r2, r8
 8008c2c:	464b      	mov	r3, r9
 8008c2e:	1891      	adds	r1, r2, r2
 8008c30:	6239      	str	r1, [r7, #32]
 8008c32:	415b      	adcs	r3, r3
 8008c34:	627b      	str	r3, [r7, #36]	; 0x24
 8008c36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c3a:	4641      	mov	r1, r8
 8008c3c:	1854      	adds	r4, r2, r1
 8008c3e:	4649      	mov	r1, r9
 8008c40:	eb43 0501 	adc.w	r5, r3, r1
 8008c44:	f04f 0200 	mov.w	r2, #0
 8008c48:	f04f 0300 	mov.w	r3, #0
 8008c4c:	00eb      	lsls	r3, r5, #3
 8008c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c52:	00e2      	lsls	r2, r4, #3
 8008c54:	4614      	mov	r4, r2
 8008c56:	461d      	mov	r5, r3
 8008c58:	4643      	mov	r3, r8
 8008c5a:	18e3      	adds	r3, r4, r3
 8008c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c60:	464b      	mov	r3, r9
 8008c62:	eb45 0303 	adc.w	r3, r5, r3
 8008c66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c7a:	f04f 0200 	mov.w	r2, #0
 8008c7e:	f04f 0300 	mov.w	r3, #0
 8008c82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008c86:	4629      	mov	r1, r5
 8008c88:	008b      	lsls	r3, r1, #2
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c90:	4621      	mov	r1, r4
 8008c92:	008a      	lsls	r2, r1, #2
 8008c94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008c98:	f7f8 f806 	bl	8000ca8 <__aeabi_uldivmod>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4b60      	ldr	r3, [pc, #384]	; (8008e24 <UART_SetConfig+0x4e4>)
 8008ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ca6:	095b      	lsrs	r3, r3, #5
 8008ca8:	011c      	lsls	r4, r3, #4
 8008caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008cb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008cb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008cbc:	4642      	mov	r2, r8
 8008cbe:	464b      	mov	r3, r9
 8008cc0:	1891      	adds	r1, r2, r2
 8008cc2:	61b9      	str	r1, [r7, #24]
 8008cc4:	415b      	adcs	r3, r3
 8008cc6:	61fb      	str	r3, [r7, #28]
 8008cc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ccc:	4641      	mov	r1, r8
 8008cce:	1851      	adds	r1, r2, r1
 8008cd0:	6139      	str	r1, [r7, #16]
 8008cd2:	4649      	mov	r1, r9
 8008cd4:	414b      	adcs	r3, r1
 8008cd6:	617b      	str	r3, [r7, #20]
 8008cd8:	f04f 0200 	mov.w	r2, #0
 8008cdc:	f04f 0300 	mov.w	r3, #0
 8008ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ce4:	4659      	mov	r1, fp
 8008ce6:	00cb      	lsls	r3, r1, #3
 8008ce8:	4651      	mov	r1, sl
 8008cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cee:	4651      	mov	r1, sl
 8008cf0:	00ca      	lsls	r2, r1, #3
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	4642      	mov	r2, r8
 8008cfa:	189b      	adds	r3, r3, r2
 8008cfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d00:	464b      	mov	r3, r9
 8008d02:	460a      	mov	r2, r1
 8008d04:	eb42 0303 	adc.w	r3, r2, r3
 8008d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008d18:	f04f 0200 	mov.w	r2, #0
 8008d1c:	f04f 0300 	mov.w	r3, #0
 8008d20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008d24:	4649      	mov	r1, r9
 8008d26:	008b      	lsls	r3, r1, #2
 8008d28:	4641      	mov	r1, r8
 8008d2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d2e:	4641      	mov	r1, r8
 8008d30:	008a      	lsls	r2, r1, #2
 8008d32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008d36:	f7f7 ffb7 	bl	8000ca8 <__aeabi_uldivmod>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	4b39      	ldr	r3, [pc, #228]	; (8008e24 <UART_SetConfig+0x4e4>)
 8008d40:	fba3 1302 	umull	r1, r3, r3, r2
 8008d44:	095b      	lsrs	r3, r3, #5
 8008d46:	2164      	movs	r1, #100	; 0x64
 8008d48:	fb01 f303 	mul.w	r3, r1, r3
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	011b      	lsls	r3, r3, #4
 8008d50:	3332      	adds	r3, #50	; 0x32
 8008d52:	4a34      	ldr	r2, [pc, #208]	; (8008e24 <UART_SetConfig+0x4e4>)
 8008d54:	fba2 2303 	umull	r2, r3, r2, r3
 8008d58:	095b      	lsrs	r3, r3, #5
 8008d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d5e:	441c      	add	r4, r3
 8008d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d64:	2200      	movs	r2, #0
 8008d66:	673b      	str	r3, [r7, #112]	; 0x70
 8008d68:	677a      	str	r2, [r7, #116]	; 0x74
 8008d6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008d6e:	4642      	mov	r2, r8
 8008d70:	464b      	mov	r3, r9
 8008d72:	1891      	adds	r1, r2, r2
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	415b      	adcs	r3, r3
 8008d78:	60fb      	str	r3, [r7, #12]
 8008d7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d7e:	4641      	mov	r1, r8
 8008d80:	1851      	adds	r1, r2, r1
 8008d82:	6039      	str	r1, [r7, #0]
 8008d84:	4649      	mov	r1, r9
 8008d86:	414b      	adcs	r3, r1
 8008d88:	607b      	str	r3, [r7, #4]
 8008d8a:	f04f 0200 	mov.w	r2, #0
 8008d8e:	f04f 0300 	mov.w	r3, #0
 8008d92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008d96:	4659      	mov	r1, fp
 8008d98:	00cb      	lsls	r3, r1, #3
 8008d9a:	4651      	mov	r1, sl
 8008d9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008da0:	4651      	mov	r1, sl
 8008da2:	00ca      	lsls	r2, r1, #3
 8008da4:	4610      	mov	r0, r2
 8008da6:	4619      	mov	r1, r3
 8008da8:	4603      	mov	r3, r0
 8008daa:	4642      	mov	r2, r8
 8008dac:	189b      	adds	r3, r3, r2
 8008dae:	66bb      	str	r3, [r7, #104]	; 0x68
 8008db0:	464b      	mov	r3, r9
 8008db2:	460a      	mov	r2, r1
 8008db4:	eb42 0303 	adc.w	r3, r2, r3
 8008db8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	663b      	str	r3, [r7, #96]	; 0x60
 8008dc4:	667a      	str	r2, [r7, #100]	; 0x64
 8008dc6:	f04f 0200 	mov.w	r2, #0
 8008dca:	f04f 0300 	mov.w	r3, #0
 8008dce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	008b      	lsls	r3, r1, #2
 8008dd6:	4641      	mov	r1, r8
 8008dd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ddc:	4641      	mov	r1, r8
 8008dde:	008a      	lsls	r2, r1, #2
 8008de0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008de4:	f7f7 ff60 	bl	8000ca8 <__aeabi_uldivmod>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	4b0d      	ldr	r3, [pc, #52]	; (8008e24 <UART_SetConfig+0x4e4>)
 8008dee:	fba3 1302 	umull	r1, r3, r3, r2
 8008df2:	095b      	lsrs	r3, r3, #5
 8008df4:	2164      	movs	r1, #100	; 0x64
 8008df6:	fb01 f303 	mul.w	r3, r1, r3
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	011b      	lsls	r3, r3, #4
 8008dfe:	3332      	adds	r3, #50	; 0x32
 8008e00:	4a08      	ldr	r2, [pc, #32]	; (8008e24 <UART_SetConfig+0x4e4>)
 8008e02:	fba2 2303 	umull	r2, r3, r2, r3
 8008e06:	095b      	lsrs	r3, r3, #5
 8008e08:	f003 020f 	and.w	r2, r3, #15
 8008e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4422      	add	r2, r4
 8008e14:	609a      	str	r2, [r3, #8]
}
 8008e16:	bf00      	nop
 8008e18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e22:	bf00      	nop
 8008e24:	51eb851f 	.word	0x51eb851f

08008e28 <__assert_func>:
 8008e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e2a:	4614      	mov	r4, r2
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4b09      	ldr	r3, [pc, #36]	; (8008e54 <__assert_func+0x2c>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4605      	mov	r5, r0
 8008e34:	68d8      	ldr	r0, [r3, #12]
 8008e36:	b14c      	cbz	r4, 8008e4c <__assert_func+0x24>
 8008e38:	4b07      	ldr	r3, [pc, #28]	; (8008e58 <__assert_func+0x30>)
 8008e3a:	9100      	str	r1, [sp, #0]
 8008e3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e40:	4906      	ldr	r1, [pc, #24]	; (8008e5c <__assert_func+0x34>)
 8008e42:	462b      	mov	r3, r5
 8008e44:	f000 f814 	bl	8008e70 <fiprintf>
 8008e48:	f002 f9cc 	bl	800b1e4 <abort>
 8008e4c:	4b04      	ldr	r3, [pc, #16]	; (8008e60 <__assert_func+0x38>)
 8008e4e:	461c      	mov	r4, r3
 8008e50:	e7f3      	b.n	8008e3a <__assert_func+0x12>
 8008e52:	bf00      	nop
 8008e54:	20000f38 	.word	0x20000f38
 8008e58:	0800e38c 	.word	0x0800e38c
 8008e5c:	0800e399 	.word	0x0800e399
 8008e60:	0800e3c7 	.word	0x0800e3c7

08008e64 <__errno>:
 8008e64:	4b01      	ldr	r3, [pc, #4]	; (8008e6c <__errno+0x8>)
 8008e66:	6818      	ldr	r0, [r3, #0]
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	20000f38 	.word	0x20000f38

08008e70 <fiprintf>:
 8008e70:	b40e      	push	{r1, r2, r3}
 8008e72:	b503      	push	{r0, r1, lr}
 8008e74:	4601      	mov	r1, r0
 8008e76:	ab03      	add	r3, sp, #12
 8008e78:	4805      	ldr	r0, [pc, #20]	; (8008e90 <fiprintf+0x20>)
 8008e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e7e:	6800      	ldr	r0, [r0, #0]
 8008e80:	9301      	str	r3, [sp, #4]
 8008e82:	f000 f94d 	bl	8009120 <_vfiprintf_r>
 8008e86:	b002      	add	sp, #8
 8008e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e8c:	b003      	add	sp, #12
 8008e8e:	4770      	bx	lr
 8008e90:	20000f38 	.word	0x20000f38

08008e94 <__libc_init_array>:
 8008e94:	b570      	push	{r4, r5, r6, lr}
 8008e96:	4d0d      	ldr	r5, [pc, #52]	; (8008ecc <__libc_init_array+0x38>)
 8008e98:	4c0d      	ldr	r4, [pc, #52]	; (8008ed0 <__libc_init_array+0x3c>)
 8008e9a:	1b64      	subs	r4, r4, r5
 8008e9c:	10a4      	asrs	r4, r4, #2
 8008e9e:	2600      	movs	r6, #0
 8008ea0:	42a6      	cmp	r6, r4
 8008ea2:	d109      	bne.n	8008eb8 <__libc_init_array+0x24>
 8008ea4:	4d0b      	ldr	r5, [pc, #44]	; (8008ed4 <__libc_init_array+0x40>)
 8008ea6:	4c0c      	ldr	r4, [pc, #48]	; (8008ed8 <__libc_init_array+0x44>)
 8008ea8:	f005 f97c 	bl	800e1a4 <_init>
 8008eac:	1b64      	subs	r4, r4, r5
 8008eae:	10a4      	asrs	r4, r4, #2
 8008eb0:	2600      	movs	r6, #0
 8008eb2:	42a6      	cmp	r6, r4
 8008eb4:	d105      	bne.n	8008ec2 <__libc_init_array+0x2e>
 8008eb6:	bd70      	pop	{r4, r5, r6, pc}
 8008eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ebc:	4798      	blx	r3
 8008ebe:	3601      	adds	r6, #1
 8008ec0:	e7ee      	b.n	8008ea0 <__libc_init_array+0xc>
 8008ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ec6:	4798      	blx	r3
 8008ec8:	3601      	adds	r6, #1
 8008eca:	e7f2      	b.n	8008eb2 <__libc_init_array+0x1e>
 8008ecc:	0800e8b0 	.word	0x0800e8b0
 8008ed0:	0800e8b0 	.word	0x0800e8b0
 8008ed4:	0800e8b0 	.word	0x0800e8b0
 8008ed8:	0800e8b4 	.word	0x0800e8b4

08008edc <malloc>:
 8008edc:	4b02      	ldr	r3, [pc, #8]	; (8008ee8 <malloc+0xc>)
 8008ede:	4601      	mov	r1, r0
 8008ee0:	6818      	ldr	r0, [r3, #0]
 8008ee2:	f000 b87f 	b.w	8008fe4 <_malloc_r>
 8008ee6:	bf00      	nop
 8008ee8:	20000f38 	.word	0x20000f38

08008eec <free>:
 8008eec:	4b02      	ldr	r3, [pc, #8]	; (8008ef8 <free+0xc>)
 8008eee:	4601      	mov	r1, r0
 8008ef0:	6818      	ldr	r0, [r3, #0]
 8008ef2:	f000 b80b 	b.w	8008f0c <_free_r>
 8008ef6:	bf00      	nop
 8008ef8:	20000f38 	.word	0x20000f38

08008efc <memset>:
 8008efc:	4402      	add	r2, r0
 8008efe:	4603      	mov	r3, r0
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d100      	bne.n	8008f06 <memset+0xa>
 8008f04:	4770      	bx	lr
 8008f06:	f803 1b01 	strb.w	r1, [r3], #1
 8008f0a:	e7f9      	b.n	8008f00 <memset+0x4>

08008f0c <_free_r>:
 8008f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f0e:	2900      	cmp	r1, #0
 8008f10:	d044      	beq.n	8008f9c <_free_r+0x90>
 8008f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f16:	9001      	str	r0, [sp, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f1a1 0404 	sub.w	r4, r1, #4
 8008f1e:	bfb8      	it	lt
 8008f20:	18e4      	addlt	r4, r4, r3
 8008f22:	f003 fdd3 	bl	800cacc <__malloc_lock>
 8008f26:	4a1e      	ldr	r2, [pc, #120]	; (8008fa0 <_free_r+0x94>)
 8008f28:	9801      	ldr	r0, [sp, #4]
 8008f2a:	6813      	ldr	r3, [r2, #0]
 8008f2c:	b933      	cbnz	r3, 8008f3c <_free_r+0x30>
 8008f2e:	6063      	str	r3, [r4, #4]
 8008f30:	6014      	str	r4, [r2, #0]
 8008f32:	b003      	add	sp, #12
 8008f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f38:	f003 bdce 	b.w	800cad8 <__malloc_unlock>
 8008f3c:	42a3      	cmp	r3, r4
 8008f3e:	d908      	bls.n	8008f52 <_free_r+0x46>
 8008f40:	6825      	ldr	r5, [r4, #0]
 8008f42:	1961      	adds	r1, r4, r5
 8008f44:	428b      	cmp	r3, r1
 8008f46:	bf01      	itttt	eq
 8008f48:	6819      	ldreq	r1, [r3, #0]
 8008f4a:	685b      	ldreq	r3, [r3, #4]
 8008f4c:	1949      	addeq	r1, r1, r5
 8008f4e:	6021      	streq	r1, [r4, #0]
 8008f50:	e7ed      	b.n	8008f2e <_free_r+0x22>
 8008f52:	461a      	mov	r2, r3
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	b10b      	cbz	r3, 8008f5c <_free_r+0x50>
 8008f58:	42a3      	cmp	r3, r4
 8008f5a:	d9fa      	bls.n	8008f52 <_free_r+0x46>
 8008f5c:	6811      	ldr	r1, [r2, #0]
 8008f5e:	1855      	adds	r5, r2, r1
 8008f60:	42a5      	cmp	r5, r4
 8008f62:	d10b      	bne.n	8008f7c <_free_r+0x70>
 8008f64:	6824      	ldr	r4, [r4, #0]
 8008f66:	4421      	add	r1, r4
 8008f68:	1854      	adds	r4, r2, r1
 8008f6a:	42a3      	cmp	r3, r4
 8008f6c:	6011      	str	r1, [r2, #0]
 8008f6e:	d1e0      	bne.n	8008f32 <_free_r+0x26>
 8008f70:	681c      	ldr	r4, [r3, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	6053      	str	r3, [r2, #4]
 8008f76:	4421      	add	r1, r4
 8008f78:	6011      	str	r1, [r2, #0]
 8008f7a:	e7da      	b.n	8008f32 <_free_r+0x26>
 8008f7c:	d902      	bls.n	8008f84 <_free_r+0x78>
 8008f7e:	230c      	movs	r3, #12
 8008f80:	6003      	str	r3, [r0, #0]
 8008f82:	e7d6      	b.n	8008f32 <_free_r+0x26>
 8008f84:	6825      	ldr	r5, [r4, #0]
 8008f86:	1961      	adds	r1, r4, r5
 8008f88:	428b      	cmp	r3, r1
 8008f8a:	bf04      	itt	eq
 8008f8c:	6819      	ldreq	r1, [r3, #0]
 8008f8e:	685b      	ldreq	r3, [r3, #4]
 8008f90:	6063      	str	r3, [r4, #4]
 8008f92:	bf04      	itt	eq
 8008f94:	1949      	addeq	r1, r1, r5
 8008f96:	6021      	streq	r1, [r4, #0]
 8008f98:	6054      	str	r4, [r2, #4]
 8008f9a:	e7ca      	b.n	8008f32 <_free_r+0x26>
 8008f9c:	b003      	add	sp, #12
 8008f9e:	bd30      	pop	{r4, r5, pc}
 8008fa0:	20001be8 	.word	0x20001be8

08008fa4 <sbrk_aligned>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	4e0e      	ldr	r6, [pc, #56]	; (8008fe0 <sbrk_aligned+0x3c>)
 8008fa8:	460c      	mov	r4, r1
 8008faa:	6831      	ldr	r1, [r6, #0]
 8008fac:	4605      	mov	r5, r0
 8008fae:	b911      	cbnz	r1, 8008fb6 <sbrk_aligned+0x12>
 8008fb0:	f001 f876 	bl	800a0a0 <_sbrk_r>
 8008fb4:	6030      	str	r0, [r6, #0]
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f001 f871 	bl	800a0a0 <_sbrk_r>
 8008fbe:	1c43      	adds	r3, r0, #1
 8008fc0:	d00a      	beq.n	8008fd8 <sbrk_aligned+0x34>
 8008fc2:	1cc4      	adds	r4, r0, #3
 8008fc4:	f024 0403 	bic.w	r4, r4, #3
 8008fc8:	42a0      	cmp	r0, r4
 8008fca:	d007      	beq.n	8008fdc <sbrk_aligned+0x38>
 8008fcc:	1a21      	subs	r1, r4, r0
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f001 f866 	bl	800a0a0 <_sbrk_r>
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d101      	bne.n	8008fdc <sbrk_aligned+0x38>
 8008fd8:	f04f 34ff 	mov.w	r4, #4294967295
 8008fdc:	4620      	mov	r0, r4
 8008fde:	bd70      	pop	{r4, r5, r6, pc}
 8008fe0:	20001bec 	.word	0x20001bec

08008fe4 <_malloc_r>:
 8008fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe8:	1ccd      	adds	r5, r1, #3
 8008fea:	f025 0503 	bic.w	r5, r5, #3
 8008fee:	3508      	adds	r5, #8
 8008ff0:	2d0c      	cmp	r5, #12
 8008ff2:	bf38      	it	cc
 8008ff4:	250c      	movcc	r5, #12
 8008ff6:	2d00      	cmp	r5, #0
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	db01      	blt.n	8009000 <_malloc_r+0x1c>
 8008ffc:	42a9      	cmp	r1, r5
 8008ffe:	d905      	bls.n	800900c <_malloc_r+0x28>
 8009000:	230c      	movs	r3, #12
 8009002:	603b      	str	r3, [r7, #0]
 8009004:	2600      	movs	r6, #0
 8009006:	4630      	mov	r0, r6
 8009008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800900c:	4e2e      	ldr	r6, [pc, #184]	; (80090c8 <_malloc_r+0xe4>)
 800900e:	f003 fd5d 	bl	800cacc <__malloc_lock>
 8009012:	6833      	ldr	r3, [r6, #0]
 8009014:	461c      	mov	r4, r3
 8009016:	bb34      	cbnz	r4, 8009066 <_malloc_r+0x82>
 8009018:	4629      	mov	r1, r5
 800901a:	4638      	mov	r0, r7
 800901c:	f7ff ffc2 	bl	8008fa4 <sbrk_aligned>
 8009020:	1c43      	adds	r3, r0, #1
 8009022:	4604      	mov	r4, r0
 8009024:	d14d      	bne.n	80090c2 <_malloc_r+0xde>
 8009026:	6834      	ldr	r4, [r6, #0]
 8009028:	4626      	mov	r6, r4
 800902a:	2e00      	cmp	r6, #0
 800902c:	d140      	bne.n	80090b0 <_malloc_r+0xcc>
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	4631      	mov	r1, r6
 8009032:	4638      	mov	r0, r7
 8009034:	eb04 0803 	add.w	r8, r4, r3
 8009038:	f001 f832 	bl	800a0a0 <_sbrk_r>
 800903c:	4580      	cmp	r8, r0
 800903e:	d13a      	bne.n	80090b6 <_malloc_r+0xd2>
 8009040:	6821      	ldr	r1, [r4, #0]
 8009042:	3503      	adds	r5, #3
 8009044:	1a6d      	subs	r5, r5, r1
 8009046:	f025 0503 	bic.w	r5, r5, #3
 800904a:	3508      	adds	r5, #8
 800904c:	2d0c      	cmp	r5, #12
 800904e:	bf38      	it	cc
 8009050:	250c      	movcc	r5, #12
 8009052:	4629      	mov	r1, r5
 8009054:	4638      	mov	r0, r7
 8009056:	f7ff ffa5 	bl	8008fa4 <sbrk_aligned>
 800905a:	3001      	adds	r0, #1
 800905c:	d02b      	beq.n	80090b6 <_malloc_r+0xd2>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	442b      	add	r3, r5
 8009062:	6023      	str	r3, [r4, #0]
 8009064:	e00e      	b.n	8009084 <_malloc_r+0xa0>
 8009066:	6822      	ldr	r2, [r4, #0]
 8009068:	1b52      	subs	r2, r2, r5
 800906a:	d41e      	bmi.n	80090aa <_malloc_r+0xc6>
 800906c:	2a0b      	cmp	r2, #11
 800906e:	d916      	bls.n	800909e <_malloc_r+0xba>
 8009070:	1961      	adds	r1, r4, r5
 8009072:	42a3      	cmp	r3, r4
 8009074:	6025      	str	r5, [r4, #0]
 8009076:	bf18      	it	ne
 8009078:	6059      	strne	r1, [r3, #4]
 800907a:	6863      	ldr	r3, [r4, #4]
 800907c:	bf08      	it	eq
 800907e:	6031      	streq	r1, [r6, #0]
 8009080:	5162      	str	r2, [r4, r5]
 8009082:	604b      	str	r3, [r1, #4]
 8009084:	4638      	mov	r0, r7
 8009086:	f104 060b 	add.w	r6, r4, #11
 800908a:	f003 fd25 	bl	800cad8 <__malloc_unlock>
 800908e:	f026 0607 	bic.w	r6, r6, #7
 8009092:	1d23      	adds	r3, r4, #4
 8009094:	1af2      	subs	r2, r6, r3
 8009096:	d0b6      	beq.n	8009006 <_malloc_r+0x22>
 8009098:	1b9b      	subs	r3, r3, r6
 800909a:	50a3      	str	r3, [r4, r2]
 800909c:	e7b3      	b.n	8009006 <_malloc_r+0x22>
 800909e:	6862      	ldr	r2, [r4, #4]
 80090a0:	42a3      	cmp	r3, r4
 80090a2:	bf0c      	ite	eq
 80090a4:	6032      	streq	r2, [r6, #0]
 80090a6:	605a      	strne	r2, [r3, #4]
 80090a8:	e7ec      	b.n	8009084 <_malloc_r+0xa0>
 80090aa:	4623      	mov	r3, r4
 80090ac:	6864      	ldr	r4, [r4, #4]
 80090ae:	e7b2      	b.n	8009016 <_malloc_r+0x32>
 80090b0:	4634      	mov	r4, r6
 80090b2:	6876      	ldr	r6, [r6, #4]
 80090b4:	e7b9      	b.n	800902a <_malloc_r+0x46>
 80090b6:	230c      	movs	r3, #12
 80090b8:	603b      	str	r3, [r7, #0]
 80090ba:	4638      	mov	r0, r7
 80090bc:	f003 fd0c 	bl	800cad8 <__malloc_unlock>
 80090c0:	e7a1      	b.n	8009006 <_malloc_r+0x22>
 80090c2:	6025      	str	r5, [r4, #0]
 80090c4:	e7de      	b.n	8009084 <_malloc_r+0xa0>
 80090c6:	bf00      	nop
 80090c8:	20001be8 	.word	0x20001be8

080090cc <__sfputc_r>:
 80090cc:	6893      	ldr	r3, [r2, #8]
 80090ce:	3b01      	subs	r3, #1
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	b410      	push	{r4}
 80090d4:	6093      	str	r3, [r2, #8]
 80090d6:	da08      	bge.n	80090ea <__sfputc_r+0x1e>
 80090d8:	6994      	ldr	r4, [r2, #24]
 80090da:	42a3      	cmp	r3, r4
 80090dc:	db01      	blt.n	80090e2 <__sfputc_r+0x16>
 80090de:	290a      	cmp	r1, #10
 80090e0:	d103      	bne.n	80090ea <__sfputc_r+0x1e>
 80090e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090e6:	f001 bfab 	b.w	800b040 <__swbuf_r>
 80090ea:	6813      	ldr	r3, [r2, #0]
 80090ec:	1c58      	adds	r0, r3, #1
 80090ee:	6010      	str	r0, [r2, #0]
 80090f0:	7019      	strb	r1, [r3, #0]
 80090f2:	4608      	mov	r0, r1
 80090f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <__sfputs_r>:
 80090fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fc:	4606      	mov	r6, r0
 80090fe:	460f      	mov	r7, r1
 8009100:	4614      	mov	r4, r2
 8009102:	18d5      	adds	r5, r2, r3
 8009104:	42ac      	cmp	r4, r5
 8009106:	d101      	bne.n	800910c <__sfputs_r+0x12>
 8009108:	2000      	movs	r0, #0
 800910a:	e007      	b.n	800911c <__sfputs_r+0x22>
 800910c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009110:	463a      	mov	r2, r7
 8009112:	4630      	mov	r0, r6
 8009114:	f7ff ffda 	bl	80090cc <__sfputc_r>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d1f3      	bne.n	8009104 <__sfputs_r+0xa>
 800911c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009120 <_vfiprintf_r>:
 8009120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009124:	460d      	mov	r5, r1
 8009126:	b09d      	sub	sp, #116	; 0x74
 8009128:	4614      	mov	r4, r2
 800912a:	4698      	mov	r8, r3
 800912c:	4606      	mov	r6, r0
 800912e:	b118      	cbz	r0, 8009138 <_vfiprintf_r+0x18>
 8009130:	6983      	ldr	r3, [r0, #24]
 8009132:	b90b      	cbnz	r3, 8009138 <_vfiprintf_r+0x18>
 8009134:	f003 f804 	bl	800c140 <__sinit>
 8009138:	4b89      	ldr	r3, [pc, #548]	; (8009360 <_vfiprintf_r+0x240>)
 800913a:	429d      	cmp	r5, r3
 800913c:	d11b      	bne.n	8009176 <_vfiprintf_r+0x56>
 800913e:	6875      	ldr	r5, [r6, #4]
 8009140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009142:	07d9      	lsls	r1, r3, #31
 8009144:	d405      	bmi.n	8009152 <_vfiprintf_r+0x32>
 8009146:	89ab      	ldrh	r3, [r5, #12]
 8009148:	059a      	lsls	r2, r3, #22
 800914a:	d402      	bmi.n	8009152 <_vfiprintf_r+0x32>
 800914c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800914e:	f003 fc08 	bl	800c962 <__retarget_lock_acquire_recursive>
 8009152:	89ab      	ldrh	r3, [r5, #12]
 8009154:	071b      	lsls	r3, r3, #28
 8009156:	d501      	bpl.n	800915c <_vfiprintf_r+0x3c>
 8009158:	692b      	ldr	r3, [r5, #16]
 800915a:	b9eb      	cbnz	r3, 8009198 <_vfiprintf_r+0x78>
 800915c:	4629      	mov	r1, r5
 800915e:	4630      	mov	r0, r6
 8009160:	f001 ffd2 	bl	800b108 <__swsetup_r>
 8009164:	b1c0      	cbz	r0, 8009198 <_vfiprintf_r+0x78>
 8009166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009168:	07dc      	lsls	r4, r3, #31
 800916a:	d50e      	bpl.n	800918a <_vfiprintf_r+0x6a>
 800916c:	f04f 30ff 	mov.w	r0, #4294967295
 8009170:	b01d      	add	sp, #116	; 0x74
 8009172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009176:	4b7b      	ldr	r3, [pc, #492]	; (8009364 <_vfiprintf_r+0x244>)
 8009178:	429d      	cmp	r5, r3
 800917a:	d101      	bne.n	8009180 <_vfiprintf_r+0x60>
 800917c:	68b5      	ldr	r5, [r6, #8]
 800917e:	e7df      	b.n	8009140 <_vfiprintf_r+0x20>
 8009180:	4b79      	ldr	r3, [pc, #484]	; (8009368 <_vfiprintf_r+0x248>)
 8009182:	429d      	cmp	r5, r3
 8009184:	bf08      	it	eq
 8009186:	68f5      	ldreq	r5, [r6, #12]
 8009188:	e7da      	b.n	8009140 <_vfiprintf_r+0x20>
 800918a:	89ab      	ldrh	r3, [r5, #12]
 800918c:	0598      	lsls	r0, r3, #22
 800918e:	d4ed      	bmi.n	800916c <_vfiprintf_r+0x4c>
 8009190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009192:	f003 fbe7 	bl	800c964 <__retarget_lock_release_recursive>
 8009196:	e7e9      	b.n	800916c <_vfiprintf_r+0x4c>
 8009198:	2300      	movs	r3, #0
 800919a:	9309      	str	r3, [sp, #36]	; 0x24
 800919c:	2320      	movs	r3, #32
 800919e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80091a6:	2330      	movs	r3, #48	; 0x30
 80091a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800936c <_vfiprintf_r+0x24c>
 80091ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091b0:	f04f 0901 	mov.w	r9, #1
 80091b4:	4623      	mov	r3, r4
 80091b6:	469a      	mov	sl, r3
 80091b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091bc:	b10a      	cbz	r2, 80091c2 <_vfiprintf_r+0xa2>
 80091be:	2a25      	cmp	r2, #37	; 0x25
 80091c0:	d1f9      	bne.n	80091b6 <_vfiprintf_r+0x96>
 80091c2:	ebba 0b04 	subs.w	fp, sl, r4
 80091c6:	d00b      	beq.n	80091e0 <_vfiprintf_r+0xc0>
 80091c8:	465b      	mov	r3, fp
 80091ca:	4622      	mov	r2, r4
 80091cc:	4629      	mov	r1, r5
 80091ce:	4630      	mov	r0, r6
 80091d0:	f7ff ff93 	bl	80090fa <__sfputs_r>
 80091d4:	3001      	adds	r0, #1
 80091d6:	f000 80aa 	beq.w	800932e <_vfiprintf_r+0x20e>
 80091da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091dc:	445a      	add	r2, fp
 80091de:	9209      	str	r2, [sp, #36]	; 0x24
 80091e0:	f89a 3000 	ldrb.w	r3, [sl]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 80a2 	beq.w	800932e <_vfiprintf_r+0x20e>
 80091ea:	2300      	movs	r3, #0
 80091ec:	f04f 32ff 	mov.w	r2, #4294967295
 80091f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091f4:	f10a 0a01 	add.w	sl, sl, #1
 80091f8:	9304      	str	r3, [sp, #16]
 80091fa:	9307      	str	r3, [sp, #28]
 80091fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009200:	931a      	str	r3, [sp, #104]	; 0x68
 8009202:	4654      	mov	r4, sl
 8009204:	2205      	movs	r2, #5
 8009206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800920a:	4858      	ldr	r0, [pc, #352]	; (800936c <_vfiprintf_r+0x24c>)
 800920c:	f7f6 fff8 	bl	8000200 <memchr>
 8009210:	9a04      	ldr	r2, [sp, #16]
 8009212:	b9d8      	cbnz	r0, 800924c <_vfiprintf_r+0x12c>
 8009214:	06d1      	lsls	r1, r2, #27
 8009216:	bf44      	itt	mi
 8009218:	2320      	movmi	r3, #32
 800921a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800921e:	0713      	lsls	r3, r2, #28
 8009220:	bf44      	itt	mi
 8009222:	232b      	movmi	r3, #43	; 0x2b
 8009224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009228:	f89a 3000 	ldrb.w	r3, [sl]
 800922c:	2b2a      	cmp	r3, #42	; 0x2a
 800922e:	d015      	beq.n	800925c <_vfiprintf_r+0x13c>
 8009230:	9a07      	ldr	r2, [sp, #28]
 8009232:	4654      	mov	r4, sl
 8009234:	2000      	movs	r0, #0
 8009236:	f04f 0c0a 	mov.w	ip, #10
 800923a:	4621      	mov	r1, r4
 800923c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009240:	3b30      	subs	r3, #48	; 0x30
 8009242:	2b09      	cmp	r3, #9
 8009244:	d94e      	bls.n	80092e4 <_vfiprintf_r+0x1c4>
 8009246:	b1b0      	cbz	r0, 8009276 <_vfiprintf_r+0x156>
 8009248:	9207      	str	r2, [sp, #28]
 800924a:	e014      	b.n	8009276 <_vfiprintf_r+0x156>
 800924c:	eba0 0308 	sub.w	r3, r0, r8
 8009250:	fa09 f303 	lsl.w	r3, r9, r3
 8009254:	4313      	orrs	r3, r2
 8009256:	9304      	str	r3, [sp, #16]
 8009258:	46a2      	mov	sl, r4
 800925a:	e7d2      	b.n	8009202 <_vfiprintf_r+0xe2>
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	1d19      	adds	r1, r3, #4
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	9103      	str	r1, [sp, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	bfbb      	ittet	lt
 8009268:	425b      	neglt	r3, r3
 800926a:	f042 0202 	orrlt.w	r2, r2, #2
 800926e:	9307      	strge	r3, [sp, #28]
 8009270:	9307      	strlt	r3, [sp, #28]
 8009272:	bfb8      	it	lt
 8009274:	9204      	strlt	r2, [sp, #16]
 8009276:	7823      	ldrb	r3, [r4, #0]
 8009278:	2b2e      	cmp	r3, #46	; 0x2e
 800927a:	d10c      	bne.n	8009296 <_vfiprintf_r+0x176>
 800927c:	7863      	ldrb	r3, [r4, #1]
 800927e:	2b2a      	cmp	r3, #42	; 0x2a
 8009280:	d135      	bne.n	80092ee <_vfiprintf_r+0x1ce>
 8009282:	9b03      	ldr	r3, [sp, #12]
 8009284:	1d1a      	adds	r2, r3, #4
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	9203      	str	r2, [sp, #12]
 800928a:	2b00      	cmp	r3, #0
 800928c:	bfb8      	it	lt
 800928e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009292:	3402      	adds	r4, #2
 8009294:	9305      	str	r3, [sp, #20]
 8009296:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800937c <_vfiprintf_r+0x25c>
 800929a:	7821      	ldrb	r1, [r4, #0]
 800929c:	2203      	movs	r2, #3
 800929e:	4650      	mov	r0, sl
 80092a0:	f7f6 ffae 	bl	8000200 <memchr>
 80092a4:	b140      	cbz	r0, 80092b8 <_vfiprintf_r+0x198>
 80092a6:	2340      	movs	r3, #64	; 0x40
 80092a8:	eba0 000a 	sub.w	r0, r0, sl
 80092ac:	fa03 f000 	lsl.w	r0, r3, r0
 80092b0:	9b04      	ldr	r3, [sp, #16]
 80092b2:	4303      	orrs	r3, r0
 80092b4:	3401      	adds	r4, #1
 80092b6:	9304      	str	r3, [sp, #16]
 80092b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092bc:	482c      	ldr	r0, [pc, #176]	; (8009370 <_vfiprintf_r+0x250>)
 80092be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092c2:	2206      	movs	r2, #6
 80092c4:	f7f6 ff9c 	bl	8000200 <memchr>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d03f      	beq.n	800934c <_vfiprintf_r+0x22c>
 80092cc:	4b29      	ldr	r3, [pc, #164]	; (8009374 <_vfiprintf_r+0x254>)
 80092ce:	bb1b      	cbnz	r3, 8009318 <_vfiprintf_r+0x1f8>
 80092d0:	9b03      	ldr	r3, [sp, #12]
 80092d2:	3307      	adds	r3, #7
 80092d4:	f023 0307 	bic.w	r3, r3, #7
 80092d8:	3308      	adds	r3, #8
 80092da:	9303      	str	r3, [sp, #12]
 80092dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092de:	443b      	add	r3, r7
 80092e0:	9309      	str	r3, [sp, #36]	; 0x24
 80092e2:	e767      	b.n	80091b4 <_vfiprintf_r+0x94>
 80092e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80092e8:	460c      	mov	r4, r1
 80092ea:	2001      	movs	r0, #1
 80092ec:	e7a5      	b.n	800923a <_vfiprintf_r+0x11a>
 80092ee:	2300      	movs	r3, #0
 80092f0:	3401      	adds	r4, #1
 80092f2:	9305      	str	r3, [sp, #20]
 80092f4:	4619      	mov	r1, r3
 80092f6:	f04f 0c0a 	mov.w	ip, #10
 80092fa:	4620      	mov	r0, r4
 80092fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009300:	3a30      	subs	r2, #48	; 0x30
 8009302:	2a09      	cmp	r2, #9
 8009304:	d903      	bls.n	800930e <_vfiprintf_r+0x1ee>
 8009306:	2b00      	cmp	r3, #0
 8009308:	d0c5      	beq.n	8009296 <_vfiprintf_r+0x176>
 800930a:	9105      	str	r1, [sp, #20]
 800930c:	e7c3      	b.n	8009296 <_vfiprintf_r+0x176>
 800930e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009312:	4604      	mov	r4, r0
 8009314:	2301      	movs	r3, #1
 8009316:	e7f0      	b.n	80092fa <_vfiprintf_r+0x1da>
 8009318:	ab03      	add	r3, sp, #12
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	462a      	mov	r2, r5
 800931e:	4b16      	ldr	r3, [pc, #88]	; (8009378 <_vfiprintf_r+0x258>)
 8009320:	a904      	add	r1, sp, #16
 8009322:	4630      	mov	r0, r6
 8009324:	f000 f8cc 	bl	80094c0 <_printf_float>
 8009328:	4607      	mov	r7, r0
 800932a:	1c78      	adds	r0, r7, #1
 800932c:	d1d6      	bne.n	80092dc <_vfiprintf_r+0x1bc>
 800932e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009330:	07d9      	lsls	r1, r3, #31
 8009332:	d405      	bmi.n	8009340 <_vfiprintf_r+0x220>
 8009334:	89ab      	ldrh	r3, [r5, #12]
 8009336:	059a      	lsls	r2, r3, #22
 8009338:	d402      	bmi.n	8009340 <_vfiprintf_r+0x220>
 800933a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800933c:	f003 fb12 	bl	800c964 <__retarget_lock_release_recursive>
 8009340:	89ab      	ldrh	r3, [r5, #12]
 8009342:	065b      	lsls	r3, r3, #25
 8009344:	f53f af12 	bmi.w	800916c <_vfiprintf_r+0x4c>
 8009348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800934a:	e711      	b.n	8009170 <_vfiprintf_r+0x50>
 800934c:	ab03      	add	r3, sp, #12
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	462a      	mov	r2, r5
 8009352:	4b09      	ldr	r3, [pc, #36]	; (8009378 <_vfiprintf_r+0x258>)
 8009354:	a904      	add	r1, sp, #16
 8009356:	4630      	mov	r0, r6
 8009358:	f000 fb56 	bl	8009a08 <_printf_i>
 800935c:	e7e4      	b.n	8009328 <_vfiprintf_r+0x208>
 800935e:	bf00      	nop
 8009360:	0800e678 	.word	0x0800e678
 8009364:	0800e698 	.word	0x0800e698
 8009368:	0800e658 	.word	0x0800e658
 800936c:	0800e3cc 	.word	0x0800e3cc
 8009370:	0800e3d6 	.word	0x0800e3d6
 8009374:	080094c1 	.word	0x080094c1
 8009378:	080090fb 	.word	0x080090fb
 800937c:	0800e3d2 	.word	0x0800e3d2

08009380 <__cvt>:
 8009380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009384:	ec55 4b10 	vmov	r4, r5, d0
 8009388:	2d00      	cmp	r5, #0
 800938a:	460e      	mov	r6, r1
 800938c:	4619      	mov	r1, r3
 800938e:	462b      	mov	r3, r5
 8009390:	bfbb      	ittet	lt
 8009392:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009396:	461d      	movlt	r5, r3
 8009398:	2300      	movge	r3, #0
 800939a:	232d      	movlt	r3, #45	; 0x2d
 800939c:	700b      	strb	r3, [r1, #0]
 800939e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80093a4:	4691      	mov	r9, r2
 80093a6:	f023 0820 	bic.w	r8, r3, #32
 80093aa:	bfbc      	itt	lt
 80093ac:	4622      	movlt	r2, r4
 80093ae:	4614      	movlt	r4, r2
 80093b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80093b4:	d005      	beq.n	80093c2 <__cvt+0x42>
 80093b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80093ba:	d100      	bne.n	80093be <__cvt+0x3e>
 80093bc:	3601      	adds	r6, #1
 80093be:	2102      	movs	r1, #2
 80093c0:	e000      	b.n	80093c4 <__cvt+0x44>
 80093c2:	2103      	movs	r1, #3
 80093c4:	ab03      	add	r3, sp, #12
 80093c6:	9301      	str	r3, [sp, #4]
 80093c8:	ab02      	add	r3, sp, #8
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	ec45 4b10 	vmov	d0, r4, r5
 80093d0:	4653      	mov	r3, sl
 80093d2:	4632      	mov	r2, r6
 80093d4:	f001 ffac 	bl	800b330 <_dtoa_r>
 80093d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80093dc:	4607      	mov	r7, r0
 80093de:	d102      	bne.n	80093e6 <__cvt+0x66>
 80093e0:	f019 0f01 	tst.w	r9, #1
 80093e4:	d022      	beq.n	800942c <__cvt+0xac>
 80093e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80093ea:	eb07 0906 	add.w	r9, r7, r6
 80093ee:	d110      	bne.n	8009412 <__cvt+0x92>
 80093f0:	783b      	ldrb	r3, [r7, #0]
 80093f2:	2b30      	cmp	r3, #48	; 0x30
 80093f4:	d10a      	bne.n	800940c <__cvt+0x8c>
 80093f6:	2200      	movs	r2, #0
 80093f8:	2300      	movs	r3, #0
 80093fa:	4620      	mov	r0, r4
 80093fc:	4629      	mov	r1, r5
 80093fe:	f7f7 fb73 	bl	8000ae8 <__aeabi_dcmpeq>
 8009402:	b918      	cbnz	r0, 800940c <__cvt+0x8c>
 8009404:	f1c6 0601 	rsb	r6, r6, #1
 8009408:	f8ca 6000 	str.w	r6, [sl]
 800940c:	f8da 3000 	ldr.w	r3, [sl]
 8009410:	4499      	add	r9, r3
 8009412:	2200      	movs	r2, #0
 8009414:	2300      	movs	r3, #0
 8009416:	4620      	mov	r0, r4
 8009418:	4629      	mov	r1, r5
 800941a:	f7f7 fb65 	bl	8000ae8 <__aeabi_dcmpeq>
 800941e:	b108      	cbz	r0, 8009424 <__cvt+0xa4>
 8009420:	f8cd 900c 	str.w	r9, [sp, #12]
 8009424:	2230      	movs	r2, #48	; 0x30
 8009426:	9b03      	ldr	r3, [sp, #12]
 8009428:	454b      	cmp	r3, r9
 800942a:	d307      	bcc.n	800943c <__cvt+0xbc>
 800942c:	9b03      	ldr	r3, [sp, #12]
 800942e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009430:	1bdb      	subs	r3, r3, r7
 8009432:	4638      	mov	r0, r7
 8009434:	6013      	str	r3, [r2, #0]
 8009436:	b004      	add	sp, #16
 8009438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943c:	1c59      	adds	r1, r3, #1
 800943e:	9103      	str	r1, [sp, #12]
 8009440:	701a      	strb	r2, [r3, #0]
 8009442:	e7f0      	b.n	8009426 <__cvt+0xa6>

08009444 <__exponent>:
 8009444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009446:	4603      	mov	r3, r0
 8009448:	2900      	cmp	r1, #0
 800944a:	bfb8      	it	lt
 800944c:	4249      	neglt	r1, r1
 800944e:	f803 2b02 	strb.w	r2, [r3], #2
 8009452:	bfb4      	ite	lt
 8009454:	222d      	movlt	r2, #45	; 0x2d
 8009456:	222b      	movge	r2, #43	; 0x2b
 8009458:	2909      	cmp	r1, #9
 800945a:	7042      	strb	r2, [r0, #1]
 800945c:	dd2a      	ble.n	80094b4 <__exponent+0x70>
 800945e:	f10d 0407 	add.w	r4, sp, #7
 8009462:	46a4      	mov	ip, r4
 8009464:	270a      	movs	r7, #10
 8009466:	46a6      	mov	lr, r4
 8009468:	460a      	mov	r2, r1
 800946a:	fb91 f6f7 	sdiv	r6, r1, r7
 800946e:	fb07 1516 	mls	r5, r7, r6, r1
 8009472:	3530      	adds	r5, #48	; 0x30
 8009474:	2a63      	cmp	r2, #99	; 0x63
 8009476:	f104 34ff 	add.w	r4, r4, #4294967295
 800947a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800947e:	4631      	mov	r1, r6
 8009480:	dcf1      	bgt.n	8009466 <__exponent+0x22>
 8009482:	3130      	adds	r1, #48	; 0x30
 8009484:	f1ae 0502 	sub.w	r5, lr, #2
 8009488:	f804 1c01 	strb.w	r1, [r4, #-1]
 800948c:	1c44      	adds	r4, r0, #1
 800948e:	4629      	mov	r1, r5
 8009490:	4561      	cmp	r1, ip
 8009492:	d30a      	bcc.n	80094aa <__exponent+0x66>
 8009494:	f10d 0209 	add.w	r2, sp, #9
 8009498:	eba2 020e 	sub.w	r2, r2, lr
 800949c:	4565      	cmp	r5, ip
 800949e:	bf88      	it	hi
 80094a0:	2200      	movhi	r2, #0
 80094a2:	4413      	add	r3, r2
 80094a4:	1a18      	subs	r0, r3, r0
 80094a6:	b003      	add	sp, #12
 80094a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80094b2:	e7ed      	b.n	8009490 <__exponent+0x4c>
 80094b4:	2330      	movs	r3, #48	; 0x30
 80094b6:	3130      	adds	r1, #48	; 0x30
 80094b8:	7083      	strb	r3, [r0, #2]
 80094ba:	70c1      	strb	r1, [r0, #3]
 80094bc:	1d03      	adds	r3, r0, #4
 80094be:	e7f1      	b.n	80094a4 <__exponent+0x60>

080094c0 <_printf_float>:
 80094c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	ed2d 8b02 	vpush	{d8}
 80094c8:	b08d      	sub	sp, #52	; 0x34
 80094ca:	460c      	mov	r4, r1
 80094cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80094d0:	4616      	mov	r6, r2
 80094d2:	461f      	mov	r7, r3
 80094d4:	4605      	mov	r5, r0
 80094d6:	f003 fa3f 	bl	800c958 <_localeconv_r>
 80094da:	f8d0 a000 	ldr.w	sl, [r0]
 80094de:	4650      	mov	r0, sl
 80094e0:	f7f6 fe80 	bl	80001e4 <strlen>
 80094e4:	2300      	movs	r3, #0
 80094e6:	930a      	str	r3, [sp, #40]	; 0x28
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	9305      	str	r3, [sp, #20]
 80094ec:	f8d8 3000 	ldr.w	r3, [r8]
 80094f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80094f4:	3307      	adds	r3, #7
 80094f6:	f023 0307 	bic.w	r3, r3, #7
 80094fa:	f103 0208 	add.w	r2, r3, #8
 80094fe:	f8c8 2000 	str.w	r2, [r8]
 8009502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009506:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800950a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800950e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009512:	9307      	str	r3, [sp, #28]
 8009514:	f8cd 8018 	str.w	r8, [sp, #24]
 8009518:	ee08 0a10 	vmov	s16, r0
 800951c:	4b9f      	ldr	r3, [pc, #636]	; (800979c <_printf_float+0x2dc>)
 800951e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009522:	f04f 32ff 	mov.w	r2, #4294967295
 8009526:	f7f7 fb11 	bl	8000b4c <__aeabi_dcmpun>
 800952a:	bb88      	cbnz	r0, 8009590 <_printf_float+0xd0>
 800952c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009530:	4b9a      	ldr	r3, [pc, #616]	; (800979c <_printf_float+0x2dc>)
 8009532:	f04f 32ff 	mov.w	r2, #4294967295
 8009536:	f7f7 faeb 	bl	8000b10 <__aeabi_dcmple>
 800953a:	bb48      	cbnz	r0, 8009590 <_printf_float+0xd0>
 800953c:	2200      	movs	r2, #0
 800953e:	2300      	movs	r3, #0
 8009540:	4640      	mov	r0, r8
 8009542:	4649      	mov	r1, r9
 8009544:	f7f7 fada 	bl	8000afc <__aeabi_dcmplt>
 8009548:	b110      	cbz	r0, 8009550 <_printf_float+0x90>
 800954a:	232d      	movs	r3, #45	; 0x2d
 800954c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009550:	4b93      	ldr	r3, [pc, #588]	; (80097a0 <_printf_float+0x2e0>)
 8009552:	4894      	ldr	r0, [pc, #592]	; (80097a4 <_printf_float+0x2e4>)
 8009554:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009558:	bf94      	ite	ls
 800955a:	4698      	movls	r8, r3
 800955c:	4680      	movhi	r8, r0
 800955e:	2303      	movs	r3, #3
 8009560:	6123      	str	r3, [r4, #16]
 8009562:	9b05      	ldr	r3, [sp, #20]
 8009564:	f023 0204 	bic.w	r2, r3, #4
 8009568:	6022      	str	r2, [r4, #0]
 800956a:	f04f 0900 	mov.w	r9, #0
 800956e:	9700      	str	r7, [sp, #0]
 8009570:	4633      	mov	r3, r6
 8009572:	aa0b      	add	r2, sp, #44	; 0x2c
 8009574:	4621      	mov	r1, r4
 8009576:	4628      	mov	r0, r5
 8009578:	f000 f9d8 	bl	800992c <_printf_common>
 800957c:	3001      	adds	r0, #1
 800957e:	f040 8090 	bne.w	80096a2 <_printf_float+0x1e2>
 8009582:	f04f 30ff 	mov.w	r0, #4294967295
 8009586:	b00d      	add	sp, #52	; 0x34
 8009588:	ecbd 8b02 	vpop	{d8}
 800958c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009590:	4642      	mov	r2, r8
 8009592:	464b      	mov	r3, r9
 8009594:	4640      	mov	r0, r8
 8009596:	4649      	mov	r1, r9
 8009598:	f7f7 fad8 	bl	8000b4c <__aeabi_dcmpun>
 800959c:	b140      	cbz	r0, 80095b0 <_printf_float+0xf0>
 800959e:	464b      	mov	r3, r9
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	bfbc      	itt	lt
 80095a4:	232d      	movlt	r3, #45	; 0x2d
 80095a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80095aa:	487f      	ldr	r0, [pc, #508]	; (80097a8 <_printf_float+0x2e8>)
 80095ac:	4b7f      	ldr	r3, [pc, #508]	; (80097ac <_printf_float+0x2ec>)
 80095ae:	e7d1      	b.n	8009554 <_printf_float+0x94>
 80095b0:	6863      	ldr	r3, [r4, #4]
 80095b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80095b6:	9206      	str	r2, [sp, #24]
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	d13f      	bne.n	800963c <_printf_float+0x17c>
 80095bc:	2306      	movs	r3, #6
 80095be:	6063      	str	r3, [r4, #4]
 80095c0:	9b05      	ldr	r3, [sp, #20]
 80095c2:	6861      	ldr	r1, [r4, #4]
 80095c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80095c8:	2300      	movs	r3, #0
 80095ca:	9303      	str	r3, [sp, #12]
 80095cc:	ab0a      	add	r3, sp, #40	; 0x28
 80095ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80095d2:	ab09      	add	r3, sp, #36	; 0x24
 80095d4:	ec49 8b10 	vmov	d0, r8, r9
 80095d8:	9300      	str	r3, [sp, #0]
 80095da:	6022      	str	r2, [r4, #0]
 80095dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80095e0:	4628      	mov	r0, r5
 80095e2:	f7ff fecd 	bl	8009380 <__cvt>
 80095e6:	9b06      	ldr	r3, [sp, #24]
 80095e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095ea:	2b47      	cmp	r3, #71	; 0x47
 80095ec:	4680      	mov	r8, r0
 80095ee:	d108      	bne.n	8009602 <_printf_float+0x142>
 80095f0:	1cc8      	adds	r0, r1, #3
 80095f2:	db02      	blt.n	80095fa <_printf_float+0x13a>
 80095f4:	6863      	ldr	r3, [r4, #4]
 80095f6:	4299      	cmp	r1, r3
 80095f8:	dd41      	ble.n	800967e <_printf_float+0x1be>
 80095fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80095fe:	fa5f fb8b 	uxtb.w	fp, fp
 8009602:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009606:	d820      	bhi.n	800964a <_printf_float+0x18a>
 8009608:	3901      	subs	r1, #1
 800960a:	465a      	mov	r2, fp
 800960c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009610:	9109      	str	r1, [sp, #36]	; 0x24
 8009612:	f7ff ff17 	bl	8009444 <__exponent>
 8009616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009618:	1813      	adds	r3, r2, r0
 800961a:	2a01      	cmp	r2, #1
 800961c:	4681      	mov	r9, r0
 800961e:	6123      	str	r3, [r4, #16]
 8009620:	dc02      	bgt.n	8009628 <_printf_float+0x168>
 8009622:	6822      	ldr	r2, [r4, #0]
 8009624:	07d2      	lsls	r2, r2, #31
 8009626:	d501      	bpl.n	800962c <_printf_float+0x16c>
 8009628:	3301      	adds	r3, #1
 800962a:	6123      	str	r3, [r4, #16]
 800962c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009630:	2b00      	cmp	r3, #0
 8009632:	d09c      	beq.n	800956e <_printf_float+0xae>
 8009634:	232d      	movs	r3, #45	; 0x2d
 8009636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800963a:	e798      	b.n	800956e <_printf_float+0xae>
 800963c:	9a06      	ldr	r2, [sp, #24]
 800963e:	2a47      	cmp	r2, #71	; 0x47
 8009640:	d1be      	bne.n	80095c0 <_printf_float+0x100>
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1bc      	bne.n	80095c0 <_printf_float+0x100>
 8009646:	2301      	movs	r3, #1
 8009648:	e7b9      	b.n	80095be <_printf_float+0xfe>
 800964a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800964e:	d118      	bne.n	8009682 <_printf_float+0x1c2>
 8009650:	2900      	cmp	r1, #0
 8009652:	6863      	ldr	r3, [r4, #4]
 8009654:	dd0b      	ble.n	800966e <_printf_float+0x1ae>
 8009656:	6121      	str	r1, [r4, #16]
 8009658:	b913      	cbnz	r3, 8009660 <_printf_float+0x1a0>
 800965a:	6822      	ldr	r2, [r4, #0]
 800965c:	07d0      	lsls	r0, r2, #31
 800965e:	d502      	bpl.n	8009666 <_printf_float+0x1a6>
 8009660:	3301      	adds	r3, #1
 8009662:	440b      	add	r3, r1
 8009664:	6123      	str	r3, [r4, #16]
 8009666:	65a1      	str	r1, [r4, #88]	; 0x58
 8009668:	f04f 0900 	mov.w	r9, #0
 800966c:	e7de      	b.n	800962c <_printf_float+0x16c>
 800966e:	b913      	cbnz	r3, 8009676 <_printf_float+0x1b6>
 8009670:	6822      	ldr	r2, [r4, #0]
 8009672:	07d2      	lsls	r2, r2, #31
 8009674:	d501      	bpl.n	800967a <_printf_float+0x1ba>
 8009676:	3302      	adds	r3, #2
 8009678:	e7f4      	b.n	8009664 <_printf_float+0x1a4>
 800967a:	2301      	movs	r3, #1
 800967c:	e7f2      	b.n	8009664 <_printf_float+0x1a4>
 800967e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009684:	4299      	cmp	r1, r3
 8009686:	db05      	blt.n	8009694 <_printf_float+0x1d4>
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	6121      	str	r1, [r4, #16]
 800968c:	07d8      	lsls	r0, r3, #31
 800968e:	d5ea      	bpl.n	8009666 <_printf_float+0x1a6>
 8009690:	1c4b      	adds	r3, r1, #1
 8009692:	e7e7      	b.n	8009664 <_printf_float+0x1a4>
 8009694:	2900      	cmp	r1, #0
 8009696:	bfd4      	ite	le
 8009698:	f1c1 0202 	rsble	r2, r1, #2
 800969c:	2201      	movgt	r2, #1
 800969e:	4413      	add	r3, r2
 80096a0:	e7e0      	b.n	8009664 <_printf_float+0x1a4>
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	055a      	lsls	r2, r3, #21
 80096a6:	d407      	bmi.n	80096b8 <_printf_float+0x1f8>
 80096a8:	6923      	ldr	r3, [r4, #16]
 80096aa:	4642      	mov	r2, r8
 80096ac:	4631      	mov	r1, r6
 80096ae:	4628      	mov	r0, r5
 80096b0:	47b8      	blx	r7
 80096b2:	3001      	adds	r0, #1
 80096b4:	d12c      	bne.n	8009710 <_printf_float+0x250>
 80096b6:	e764      	b.n	8009582 <_printf_float+0xc2>
 80096b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096bc:	f240 80e0 	bls.w	8009880 <_printf_float+0x3c0>
 80096c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80096c4:	2200      	movs	r2, #0
 80096c6:	2300      	movs	r3, #0
 80096c8:	f7f7 fa0e 	bl	8000ae8 <__aeabi_dcmpeq>
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d034      	beq.n	800973a <_printf_float+0x27a>
 80096d0:	4a37      	ldr	r2, [pc, #220]	; (80097b0 <_printf_float+0x2f0>)
 80096d2:	2301      	movs	r3, #1
 80096d4:	4631      	mov	r1, r6
 80096d6:	4628      	mov	r0, r5
 80096d8:	47b8      	blx	r7
 80096da:	3001      	adds	r0, #1
 80096dc:	f43f af51 	beq.w	8009582 <_printf_float+0xc2>
 80096e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096e4:	429a      	cmp	r2, r3
 80096e6:	db02      	blt.n	80096ee <_printf_float+0x22e>
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	07d8      	lsls	r0, r3, #31
 80096ec:	d510      	bpl.n	8009710 <_printf_float+0x250>
 80096ee:	ee18 3a10 	vmov	r3, s16
 80096f2:	4652      	mov	r2, sl
 80096f4:	4631      	mov	r1, r6
 80096f6:	4628      	mov	r0, r5
 80096f8:	47b8      	blx	r7
 80096fa:	3001      	adds	r0, #1
 80096fc:	f43f af41 	beq.w	8009582 <_printf_float+0xc2>
 8009700:	f04f 0800 	mov.w	r8, #0
 8009704:	f104 091a 	add.w	r9, r4, #26
 8009708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800970a:	3b01      	subs	r3, #1
 800970c:	4543      	cmp	r3, r8
 800970e:	dc09      	bgt.n	8009724 <_printf_float+0x264>
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	079b      	lsls	r3, r3, #30
 8009714:	f100 8105 	bmi.w	8009922 <_printf_float+0x462>
 8009718:	68e0      	ldr	r0, [r4, #12]
 800971a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800971c:	4298      	cmp	r0, r3
 800971e:	bfb8      	it	lt
 8009720:	4618      	movlt	r0, r3
 8009722:	e730      	b.n	8009586 <_printf_float+0xc6>
 8009724:	2301      	movs	r3, #1
 8009726:	464a      	mov	r2, r9
 8009728:	4631      	mov	r1, r6
 800972a:	4628      	mov	r0, r5
 800972c:	47b8      	blx	r7
 800972e:	3001      	adds	r0, #1
 8009730:	f43f af27 	beq.w	8009582 <_printf_float+0xc2>
 8009734:	f108 0801 	add.w	r8, r8, #1
 8009738:	e7e6      	b.n	8009708 <_printf_float+0x248>
 800973a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800973c:	2b00      	cmp	r3, #0
 800973e:	dc39      	bgt.n	80097b4 <_printf_float+0x2f4>
 8009740:	4a1b      	ldr	r2, [pc, #108]	; (80097b0 <_printf_float+0x2f0>)
 8009742:	2301      	movs	r3, #1
 8009744:	4631      	mov	r1, r6
 8009746:	4628      	mov	r0, r5
 8009748:	47b8      	blx	r7
 800974a:	3001      	adds	r0, #1
 800974c:	f43f af19 	beq.w	8009582 <_printf_float+0xc2>
 8009750:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009754:	4313      	orrs	r3, r2
 8009756:	d102      	bne.n	800975e <_printf_float+0x29e>
 8009758:	6823      	ldr	r3, [r4, #0]
 800975a:	07d9      	lsls	r1, r3, #31
 800975c:	d5d8      	bpl.n	8009710 <_printf_float+0x250>
 800975e:	ee18 3a10 	vmov	r3, s16
 8009762:	4652      	mov	r2, sl
 8009764:	4631      	mov	r1, r6
 8009766:	4628      	mov	r0, r5
 8009768:	47b8      	blx	r7
 800976a:	3001      	adds	r0, #1
 800976c:	f43f af09 	beq.w	8009582 <_printf_float+0xc2>
 8009770:	f04f 0900 	mov.w	r9, #0
 8009774:	f104 0a1a 	add.w	sl, r4, #26
 8009778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800977a:	425b      	negs	r3, r3
 800977c:	454b      	cmp	r3, r9
 800977e:	dc01      	bgt.n	8009784 <_printf_float+0x2c4>
 8009780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009782:	e792      	b.n	80096aa <_printf_float+0x1ea>
 8009784:	2301      	movs	r3, #1
 8009786:	4652      	mov	r2, sl
 8009788:	4631      	mov	r1, r6
 800978a:	4628      	mov	r0, r5
 800978c:	47b8      	blx	r7
 800978e:	3001      	adds	r0, #1
 8009790:	f43f aef7 	beq.w	8009582 <_printf_float+0xc2>
 8009794:	f109 0901 	add.w	r9, r9, #1
 8009798:	e7ee      	b.n	8009778 <_printf_float+0x2b8>
 800979a:	bf00      	nop
 800979c:	7fefffff 	.word	0x7fefffff
 80097a0:	0800e3dd 	.word	0x0800e3dd
 80097a4:	0800e3e1 	.word	0x0800e3e1
 80097a8:	0800e3e9 	.word	0x0800e3e9
 80097ac:	0800e3e5 	.word	0x0800e3e5
 80097b0:	0800e890 	.word	0x0800e890
 80097b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097b8:	429a      	cmp	r2, r3
 80097ba:	bfa8      	it	ge
 80097bc:	461a      	movge	r2, r3
 80097be:	2a00      	cmp	r2, #0
 80097c0:	4691      	mov	r9, r2
 80097c2:	dc37      	bgt.n	8009834 <_printf_float+0x374>
 80097c4:	f04f 0b00 	mov.w	fp, #0
 80097c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097cc:	f104 021a 	add.w	r2, r4, #26
 80097d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097d2:	9305      	str	r3, [sp, #20]
 80097d4:	eba3 0309 	sub.w	r3, r3, r9
 80097d8:	455b      	cmp	r3, fp
 80097da:	dc33      	bgt.n	8009844 <_printf_float+0x384>
 80097dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097e0:	429a      	cmp	r2, r3
 80097e2:	db3b      	blt.n	800985c <_printf_float+0x39c>
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	07da      	lsls	r2, r3, #31
 80097e8:	d438      	bmi.n	800985c <_printf_float+0x39c>
 80097ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ec:	9a05      	ldr	r2, [sp, #20]
 80097ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097f0:	1a9a      	subs	r2, r3, r2
 80097f2:	eba3 0901 	sub.w	r9, r3, r1
 80097f6:	4591      	cmp	r9, r2
 80097f8:	bfa8      	it	ge
 80097fa:	4691      	movge	r9, r2
 80097fc:	f1b9 0f00 	cmp.w	r9, #0
 8009800:	dc35      	bgt.n	800986e <_printf_float+0x3ae>
 8009802:	f04f 0800 	mov.w	r8, #0
 8009806:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800980a:	f104 0a1a 	add.w	sl, r4, #26
 800980e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009812:	1a9b      	subs	r3, r3, r2
 8009814:	eba3 0309 	sub.w	r3, r3, r9
 8009818:	4543      	cmp	r3, r8
 800981a:	f77f af79 	ble.w	8009710 <_printf_float+0x250>
 800981e:	2301      	movs	r3, #1
 8009820:	4652      	mov	r2, sl
 8009822:	4631      	mov	r1, r6
 8009824:	4628      	mov	r0, r5
 8009826:	47b8      	blx	r7
 8009828:	3001      	adds	r0, #1
 800982a:	f43f aeaa 	beq.w	8009582 <_printf_float+0xc2>
 800982e:	f108 0801 	add.w	r8, r8, #1
 8009832:	e7ec      	b.n	800980e <_printf_float+0x34e>
 8009834:	4613      	mov	r3, r2
 8009836:	4631      	mov	r1, r6
 8009838:	4642      	mov	r2, r8
 800983a:	4628      	mov	r0, r5
 800983c:	47b8      	blx	r7
 800983e:	3001      	adds	r0, #1
 8009840:	d1c0      	bne.n	80097c4 <_printf_float+0x304>
 8009842:	e69e      	b.n	8009582 <_printf_float+0xc2>
 8009844:	2301      	movs	r3, #1
 8009846:	4631      	mov	r1, r6
 8009848:	4628      	mov	r0, r5
 800984a:	9205      	str	r2, [sp, #20]
 800984c:	47b8      	blx	r7
 800984e:	3001      	adds	r0, #1
 8009850:	f43f ae97 	beq.w	8009582 <_printf_float+0xc2>
 8009854:	9a05      	ldr	r2, [sp, #20]
 8009856:	f10b 0b01 	add.w	fp, fp, #1
 800985a:	e7b9      	b.n	80097d0 <_printf_float+0x310>
 800985c:	ee18 3a10 	vmov	r3, s16
 8009860:	4652      	mov	r2, sl
 8009862:	4631      	mov	r1, r6
 8009864:	4628      	mov	r0, r5
 8009866:	47b8      	blx	r7
 8009868:	3001      	adds	r0, #1
 800986a:	d1be      	bne.n	80097ea <_printf_float+0x32a>
 800986c:	e689      	b.n	8009582 <_printf_float+0xc2>
 800986e:	9a05      	ldr	r2, [sp, #20]
 8009870:	464b      	mov	r3, r9
 8009872:	4442      	add	r2, r8
 8009874:	4631      	mov	r1, r6
 8009876:	4628      	mov	r0, r5
 8009878:	47b8      	blx	r7
 800987a:	3001      	adds	r0, #1
 800987c:	d1c1      	bne.n	8009802 <_printf_float+0x342>
 800987e:	e680      	b.n	8009582 <_printf_float+0xc2>
 8009880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009882:	2a01      	cmp	r2, #1
 8009884:	dc01      	bgt.n	800988a <_printf_float+0x3ca>
 8009886:	07db      	lsls	r3, r3, #31
 8009888:	d538      	bpl.n	80098fc <_printf_float+0x43c>
 800988a:	2301      	movs	r3, #1
 800988c:	4642      	mov	r2, r8
 800988e:	4631      	mov	r1, r6
 8009890:	4628      	mov	r0, r5
 8009892:	47b8      	blx	r7
 8009894:	3001      	adds	r0, #1
 8009896:	f43f ae74 	beq.w	8009582 <_printf_float+0xc2>
 800989a:	ee18 3a10 	vmov	r3, s16
 800989e:	4652      	mov	r2, sl
 80098a0:	4631      	mov	r1, r6
 80098a2:	4628      	mov	r0, r5
 80098a4:	47b8      	blx	r7
 80098a6:	3001      	adds	r0, #1
 80098a8:	f43f ae6b 	beq.w	8009582 <_printf_float+0xc2>
 80098ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098b0:	2200      	movs	r2, #0
 80098b2:	2300      	movs	r3, #0
 80098b4:	f7f7 f918 	bl	8000ae8 <__aeabi_dcmpeq>
 80098b8:	b9d8      	cbnz	r0, 80098f2 <_printf_float+0x432>
 80098ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098bc:	f108 0201 	add.w	r2, r8, #1
 80098c0:	3b01      	subs	r3, #1
 80098c2:	4631      	mov	r1, r6
 80098c4:	4628      	mov	r0, r5
 80098c6:	47b8      	blx	r7
 80098c8:	3001      	adds	r0, #1
 80098ca:	d10e      	bne.n	80098ea <_printf_float+0x42a>
 80098cc:	e659      	b.n	8009582 <_printf_float+0xc2>
 80098ce:	2301      	movs	r3, #1
 80098d0:	4652      	mov	r2, sl
 80098d2:	4631      	mov	r1, r6
 80098d4:	4628      	mov	r0, r5
 80098d6:	47b8      	blx	r7
 80098d8:	3001      	adds	r0, #1
 80098da:	f43f ae52 	beq.w	8009582 <_printf_float+0xc2>
 80098de:	f108 0801 	add.w	r8, r8, #1
 80098e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098e4:	3b01      	subs	r3, #1
 80098e6:	4543      	cmp	r3, r8
 80098e8:	dcf1      	bgt.n	80098ce <_printf_float+0x40e>
 80098ea:	464b      	mov	r3, r9
 80098ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80098f0:	e6dc      	b.n	80096ac <_printf_float+0x1ec>
 80098f2:	f04f 0800 	mov.w	r8, #0
 80098f6:	f104 0a1a 	add.w	sl, r4, #26
 80098fa:	e7f2      	b.n	80098e2 <_printf_float+0x422>
 80098fc:	2301      	movs	r3, #1
 80098fe:	4642      	mov	r2, r8
 8009900:	e7df      	b.n	80098c2 <_printf_float+0x402>
 8009902:	2301      	movs	r3, #1
 8009904:	464a      	mov	r2, r9
 8009906:	4631      	mov	r1, r6
 8009908:	4628      	mov	r0, r5
 800990a:	47b8      	blx	r7
 800990c:	3001      	adds	r0, #1
 800990e:	f43f ae38 	beq.w	8009582 <_printf_float+0xc2>
 8009912:	f108 0801 	add.w	r8, r8, #1
 8009916:	68e3      	ldr	r3, [r4, #12]
 8009918:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800991a:	1a5b      	subs	r3, r3, r1
 800991c:	4543      	cmp	r3, r8
 800991e:	dcf0      	bgt.n	8009902 <_printf_float+0x442>
 8009920:	e6fa      	b.n	8009718 <_printf_float+0x258>
 8009922:	f04f 0800 	mov.w	r8, #0
 8009926:	f104 0919 	add.w	r9, r4, #25
 800992a:	e7f4      	b.n	8009916 <_printf_float+0x456>

0800992c <_printf_common>:
 800992c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009930:	4616      	mov	r6, r2
 8009932:	4699      	mov	r9, r3
 8009934:	688a      	ldr	r2, [r1, #8]
 8009936:	690b      	ldr	r3, [r1, #16]
 8009938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800993c:	4293      	cmp	r3, r2
 800993e:	bfb8      	it	lt
 8009940:	4613      	movlt	r3, r2
 8009942:	6033      	str	r3, [r6, #0]
 8009944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009948:	4607      	mov	r7, r0
 800994a:	460c      	mov	r4, r1
 800994c:	b10a      	cbz	r2, 8009952 <_printf_common+0x26>
 800994e:	3301      	adds	r3, #1
 8009950:	6033      	str	r3, [r6, #0]
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	0699      	lsls	r1, r3, #26
 8009956:	bf42      	ittt	mi
 8009958:	6833      	ldrmi	r3, [r6, #0]
 800995a:	3302      	addmi	r3, #2
 800995c:	6033      	strmi	r3, [r6, #0]
 800995e:	6825      	ldr	r5, [r4, #0]
 8009960:	f015 0506 	ands.w	r5, r5, #6
 8009964:	d106      	bne.n	8009974 <_printf_common+0x48>
 8009966:	f104 0a19 	add.w	sl, r4, #25
 800996a:	68e3      	ldr	r3, [r4, #12]
 800996c:	6832      	ldr	r2, [r6, #0]
 800996e:	1a9b      	subs	r3, r3, r2
 8009970:	42ab      	cmp	r3, r5
 8009972:	dc26      	bgt.n	80099c2 <_printf_common+0x96>
 8009974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009978:	1e13      	subs	r3, r2, #0
 800997a:	6822      	ldr	r2, [r4, #0]
 800997c:	bf18      	it	ne
 800997e:	2301      	movne	r3, #1
 8009980:	0692      	lsls	r2, r2, #26
 8009982:	d42b      	bmi.n	80099dc <_printf_common+0xb0>
 8009984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009988:	4649      	mov	r1, r9
 800998a:	4638      	mov	r0, r7
 800998c:	47c0      	blx	r8
 800998e:	3001      	adds	r0, #1
 8009990:	d01e      	beq.n	80099d0 <_printf_common+0xa4>
 8009992:	6823      	ldr	r3, [r4, #0]
 8009994:	68e5      	ldr	r5, [r4, #12]
 8009996:	6832      	ldr	r2, [r6, #0]
 8009998:	f003 0306 	and.w	r3, r3, #6
 800999c:	2b04      	cmp	r3, #4
 800999e:	bf08      	it	eq
 80099a0:	1aad      	subeq	r5, r5, r2
 80099a2:	68a3      	ldr	r3, [r4, #8]
 80099a4:	6922      	ldr	r2, [r4, #16]
 80099a6:	bf0c      	ite	eq
 80099a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099ac:	2500      	movne	r5, #0
 80099ae:	4293      	cmp	r3, r2
 80099b0:	bfc4      	itt	gt
 80099b2:	1a9b      	subgt	r3, r3, r2
 80099b4:	18ed      	addgt	r5, r5, r3
 80099b6:	2600      	movs	r6, #0
 80099b8:	341a      	adds	r4, #26
 80099ba:	42b5      	cmp	r5, r6
 80099bc:	d11a      	bne.n	80099f4 <_printf_common+0xc8>
 80099be:	2000      	movs	r0, #0
 80099c0:	e008      	b.n	80099d4 <_printf_common+0xa8>
 80099c2:	2301      	movs	r3, #1
 80099c4:	4652      	mov	r2, sl
 80099c6:	4649      	mov	r1, r9
 80099c8:	4638      	mov	r0, r7
 80099ca:	47c0      	blx	r8
 80099cc:	3001      	adds	r0, #1
 80099ce:	d103      	bne.n	80099d8 <_printf_common+0xac>
 80099d0:	f04f 30ff 	mov.w	r0, #4294967295
 80099d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d8:	3501      	adds	r5, #1
 80099da:	e7c6      	b.n	800996a <_printf_common+0x3e>
 80099dc:	18e1      	adds	r1, r4, r3
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	2030      	movs	r0, #48	; 0x30
 80099e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099e6:	4422      	add	r2, r4
 80099e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099f0:	3302      	adds	r3, #2
 80099f2:	e7c7      	b.n	8009984 <_printf_common+0x58>
 80099f4:	2301      	movs	r3, #1
 80099f6:	4622      	mov	r2, r4
 80099f8:	4649      	mov	r1, r9
 80099fa:	4638      	mov	r0, r7
 80099fc:	47c0      	blx	r8
 80099fe:	3001      	adds	r0, #1
 8009a00:	d0e6      	beq.n	80099d0 <_printf_common+0xa4>
 8009a02:	3601      	adds	r6, #1
 8009a04:	e7d9      	b.n	80099ba <_printf_common+0x8e>
	...

08009a08 <_printf_i>:
 8009a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a0c:	7e0f      	ldrb	r7, [r1, #24]
 8009a0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a10:	2f78      	cmp	r7, #120	; 0x78
 8009a12:	4691      	mov	r9, r2
 8009a14:	4680      	mov	r8, r0
 8009a16:	460c      	mov	r4, r1
 8009a18:	469a      	mov	sl, r3
 8009a1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a1e:	d807      	bhi.n	8009a30 <_printf_i+0x28>
 8009a20:	2f62      	cmp	r7, #98	; 0x62
 8009a22:	d80a      	bhi.n	8009a3a <_printf_i+0x32>
 8009a24:	2f00      	cmp	r7, #0
 8009a26:	f000 80d8 	beq.w	8009bda <_printf_i+0x1d2>
 8009a2a:	2f58      	cmp	r7, #88	; 0x58
 8009a2c:	f000 80a3 	beq.w	8009b76 <_printf_i+0x16e>
 8009a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a38:	e03a      	b.n	8009ab0 <_printf_i+0xa8>
 8009a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a3e:	2b15      	cmp	r3, #21
 8009a40:	d8f6      	bhi.n	8009a30 <_printf_i+0x28>
 8009a42:	a101      	add	r1, pc, #4	; (adr r1, 8009a48 <_printf_i+0x40>)
 8009a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a48:	08009aa1 	.word	0x08009aa1
 8009a4c:	08009ab5 	.word	0x08009ab5
 8009a50:	08009a31 	.word	0x08009a31
 8009a54:	08009a31 	.word	0x08009a31
 8009a58:	08009a31 	.word	0x08009a31
 8009a5c:	08009a31 	.word	0x08009a31
 8009a60:	08009ab5 	.word	0x08009ab5
 8009a64:	08009a31 	.word	0x08009a31
 8009a68:	08009a31 	.word	0x08009a31
 8009a6c:	08009a31 	.word	0x08009a31
 8009a70:	08009a31 	.word	0x08009a31
 8009a74:	08009bc1 	.word	0x08009bc1
 8009a78:	08009ae5 	.word	0x08009ae5
 8009a7c:	08009ba3 	.word	0x08009ba3
 8009a80:	08009a31 	.word	0x08009a31
 8009a84:	08009a31 	.word	0x08009a31
 8009a88:	08009be3 	.word	0x08009be3
 8009a8c:	08009a31 	.word	0x08009a31
 8009a90:	08009ae5 	.word	0x08009ae5
 8009a94:	08009a31 	.word	0x08009a31
 8009a98:	08009a31 	.word	0x08009a31
 8009a9c:	08009bab 	.word	0x08009bab
 8009aa0:	682b      	ldr	r3, [r5, #0]
 8009aa2:	1d1a      	adds	r2, r3, #4
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	602a      	str	r2, [r5, #0]
 8009aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e0a3      	b.n	8009bfc <_printf_i+0x1f4>
 8009ab4:	6820      	ldr	r0, [r4, #0]
 8009ab6:	6829      	ldr	r1, [r5, #0]
 8009ab8:	0606      	lsls	r6, r0, #24
 8009aba:	f101 0304 	add.w	r3, r1, #4
 8009abe:	d50a      	bpl.n	8009ad6 <_printf_i+0xce>
 8009ac0:	680e      	ldr	r6, [r1, #0]
 8009ac2:	602b      	str	r3, [r5, #0]
 8009ac4:	2e00      	cmp	r6, #0
 8009ac6:	da03      	bge.n	8009ad0 <_printf_i+0xc8>
 8009ac8:	232d      	movs	r3, #45	; 0x2d
 8009aca:	4276      	negs	r6, r6
 8009acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ad0:	485e      	ldr	r0, [pc, #376]	; (8009c4c <_printf_i+0x244>)
 8009ad2:	230a      	movs	r3, #10
 8009ad4:	e019      	b.n	8009b0a <_printf_i+0x102>
 8009ad6:	680e      	ldr	r6, [r1, #0]
 8009ad8:	602b      	str	r3, [r5, #0]
 8009ada:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ade:	bf18      	it	ne
 8009ae0:	b236      	sxthne	r6, r6
 8009ae2:	e7ef      	b.n	8009ac4 <_printf_i+0xbc>
 8009ae4:	682b      	ldr	r3, [r5, #0]
 8009ae6:	6820      	ldr	r0, [r4, #0]
 8009ae8:	1d19      	adds	r1, r3, #4
 8009aea:	6029      	str	r1, [r5, #0]
 8009aec:	0601      	lsls	r1, r0, #24
 8009aee:	d501      	bpl.n	8009af4 <_printf_i+0xec>
 8009af0:	681e      	ldr	r6, [r3, #0]
 8009af2:	e002      	b.n	8009afa <_printf_i+0xf2>
 8009af4:	0646      	lsls	r6, r0, #25
 8009af6:	d5fb      	bpl.n	8009af0 <_printf_i+0xe8>
 8009af8:	881e      	ldrh	r6, [r3, #0]
 8009afa:	4854      	ldr	r0, [pc, #336]	; (8009c4c <_printf_i+0x244>)
 8009afc:	2f6f      	cmp	r7, #111	; 0x6f
 8009afe:	bf0c      	ite	eq
 8009b00:	2308      	moveq	r3, #8
 8009b02:	230a      	movne	r3, #10
 8009b04:	2100      	movs	r1, #0
 8009b06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b0a:	6865      	ldr	r5, [r4, #4]
 8009b0c:	60a5      	str	r5, [r4, #8]
 8009b0e:	2d00      	cmp	r5, #0
 8009b10:	bfa2      	ittt	ge
 8009b12:	6821      	ldrge	r1, [r4, #0]
 8009b14:	f021 0104 	bicge.w	r1, r1, #4
 8009b18:	6021      	strge	r1, [r4, #0]
 8009b1a:	b90e      	cbnz	r6, 8009b20 <_printf_i+0x118>
 8009b1c:	2d00      	cmp	r5, #0
 8009b1e:	d04d      	beq.n	8009bbc <_printf_i+0x1b4>
 8009b20:	4615      	mov	r5, r2
 8009b22:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b26:	fb03 6711 	mls	r7, r3, r1, r6
 8009b2a:	5dc7      	ldrb	r7, [r0, r7]
 8009b2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b30:	4637      	mov	r7, r6
 8009b32:	42bb      	cmp	r3, r7
 8009b34:	460e      	mov	r6, r1
 8009b36:	d9f4      	bls.n	8009b22 <_printf_i+0x11a>
 8009b38:	2b08      	cmp	r3, #8
 8009b3a:	d10b      	bne.n	8009b54 <_printf_i+0x14c>
 8009b3c:	6823      	ldr	r3, [r4, #0]
 8009b3e:	07de      	lsls	r6, r3, #31
 8009b40:	d508      	bpl.n	8009b54 <_printf_i+0x14c>
 8009b42:	6923      	ldr	r3, [r4, #16]
 8009b44:	6861      	ldr	r1, [r4, #4]
 8009b46:	4299      	cmp	r1, r3
 8009b48:	bfde      	ittt	le
 8009b4a:	2330      	movle	r3, #48	; 0x30
 8009b4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b54:	1b52      	subs	r2, r2, r5
 8009b56:	6122      	str	r2, [r4, #16]
 8009b58:	f8cd a000 	str.w	sl, [sp]
 8009b5c:	464b      	mov	r3, r9
 8009b5e:	aa03      	add	r2, sp, #12
 8009b60:	4621      	mov	r1, r4
 8009b62:	4640      	mov	r0, r8
 8009b64:	f7ff fee2 	bl	800992c <_printf_common>
 8009b68:	3001      	adds	r0, #1
 8009b6a:	d14c      	bne.n	8009c06 <_printf_i+0x1fe>
 8009b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b70:	b004      	add	sp, #16
 8009b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b76:	4835      	ldr	r0, [pc, #212]	; (8009c4c <_printf_i+0x244>)
 8009b78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b7c:	6829      	ldr	r1, [r5, #0]
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b84:	6029      	str	r1, [r5, #0]
 8009b86:	061d      	lsls	r5, r3, #24
 8009b88:	d514      	bpl.n	8009bb4 <_printf_i+0x1ac>
 8009b8a:	07df      	lsls	r7, r3, #31
 8009b8c:	bf44      	itt	mi
 8009b8e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b92:	6023      	strmi	r3, [r4, #0]
 8009b94:	b91e      	cbnz	r6, 8009b9e <_printf_i+0x196>
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	f023 0320 	bic.w	r3, r3, #32
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	2310      	movs	r3, #16
 8009ba0:	e7b0      	b.n	8009b04 <_printf_i+0xfc>
 8009ba2:	6823      	ldr	r3, [r4, #0]
 8009ba4:	f043 0320 	orr.w	r3, r3, #32
 8009ba8:	6023      	str	r3, [r4, #0]
 8009baa:	2378      	movs	r3, #120	; 0x78
 8009bac:	4828      	ldr	r0, [pc, #160]	; (8009c50 <_printf_i+0x248>)
 8009bae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009bb2:	e7e3      	b.n	8009b7c <_printf_i+0x174>
 8009bb4:	0659      	lsls	r1, r3, #25
 8009bb6:	bf48      	it	mi
 8009bb8:	b2b6      	uxthmi	r6, r6
 8009bba:	e7e6      	b.n	8009b8a <_printf_i+0x182>
 8009bbc:	4615      	mov	r5, r2
 8009bbe:	e7bb      	b.n	8009b38 <_printf_i+0x130>
 8009bc0:	682b      	ldr	r3, [r5, #0]
 8009bc2:	6826      	ldr	r6, [r4, #0]
 8009bc4:	6961      	ldr	r1, [r4, #20]
 8009bc6:	1d18      	adds	r0, r3, #4
 8009bc8:	6028      	str	r0, [r5, #0]
 8009bca:	0635      	lsls	r5, r6, #24
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	d501      	bpl.n	8009bd4 <_printf_i+0x1cc>
 8009bd0:	6019      	str	r1, [r3, #0]
 8009bd2:	e002      	b.n	8009bda <_printf_i+0x1d2>
 8009bd4:	0670      	lsls	r0, r6, #25
 8009bd6:	d5fb      	bpl.n	8009bd0 <_printf_i+0x1c8>
 8009bd8:	8019      	strh	r1, [r3, #0]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	6123      	str	r3, [r4, #16]
 8009bde:	4615      	mov	r5, r2
 8009be0:	e7ba      	b.n	8009b58 <_printf_i+0x150>
 8009be2:	682b      	ldr	r3, [r5, #0]
 8009be4:	1d1a      	adds	r2, r3, #4
 8009be6:	602a      	str	r2, [r5, #0]
 8009be8:	681d      	ldr	r5, [r3, #0]
 8009bea:	6862      	ldr	r2, [r4, #4]
 8009bec:	2100      	movs	r1, #0
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f7f6 fb06 	bl	8000200 <memchr>
 8009bf4:	b108      	cbz	r0, 8009bfa <_printf_i+0x1f2>
 8009bf6:	1b40      	subs	r0, r0, r5
 8009bf8:	6060      	str	r0, [r4, #4]
 8009bfa:	6863      	ldr	r3, [r4, #4]
 8009bfc:	6123      	str	r3, [r4, #16]
 8009bfe:	2300      	movs	r3, #0
 8009c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c04:	e7a8      	b.n	8009b58 <_printf_i+0x150>
 8009c06:	6923      	ldr	r3, [r4, #16]
 8009c08:	462a      	mov	r2, r5
 8009c0a:	4649      	mov	r1, r9
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	47d0      	blx	sl
 8009c10:	3001      	adds	r0, #1
 8009c12:	d0ab      	beq.n	8009b6c <_printf_i+0x164>
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	079b      	lsls	r3, r3, #30
 8009c18:	d413      	bmi.n	8009c42 <_printf_i+0x23a>
 8009c1a:	68e0      	ldr	r0, [r4, #12]
 8009c1c:	9b03      	ldr	r3, [sp, #12]
 8009c1e:	4298      	cmp	r0, r3
 8009c20:	bfb8      	it	lt
 8009c22:	4618      	movlt	r0, r3
 8009c24:	e7a4      	b.n	8009b70 <_printf_i+0x168>
 8009c26:	2301      	movs	r3, #1
 8009c28:	4632      	mov	r2, r6
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	4640      	mov	r0, r8
 8009c2e:	47d0      	blx	sl
 8009c30:	3001      	adds	r0, #1
 8009c32:	d09b      	beq.n	8009b6c <_printf_i+0x164>
 8009c34:	3501      	adds	r5, #1
 8009c36:	68e3      	ldr	r3, [r4, #12]
 8009c38:	9903      	ldr	r1, [sp, #12]
 8009c3a:	1a5b      	subs	r3, r3, r1
 8009c3c:	42ab      	cmp	r3, r5
 8009c3e:	dcf2      	bgt.n	8009c26 <_printf_i+0x21e>
 8009c40:	e7eb      	b.n	8009c1a <_printf_i+0x212>
 8009c42:	2500      	movs	r5, #0
 8009c44:	f104 0619 	add.w	r6, r4, #25
 8009c48:	e7f5      	b.n	8009c36 <_printf_i+0x22e>
 8009c4a:	bf00      	nop
 8009c4c:	0800e3ed 	.word	0x0800e3ed
 8009c50:	0800e3fe 	.word	0x0800e3fe

08009c54 <_scanf_float>:
 8009c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c58:	b087      	sub	sp, #28
 8009c5a:	4617      	mov	r7, r2
 8009c5c:	9303      	str	r3, [sp, #12]
 8009c5e:	688b      	ldr	r3, [r1, #8]
 8009c60:	1e5a      	subs	r2, r3, #1
 8009c62:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009c66:	bf83      	ittte	hi
 8009c68:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009c6c:	195b      	addhi	r3, r3, r5
 8009c6e:	9302      	strhi	r3, [sp, #8]
 8009c70:	2300      	movls	r3, #0
 8009c72:	bf86      	itte	hi
 8009c74:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009c78:	608b      	strhi	r3, [r1, #8]
 8009c7a:	9302      	strls	r3, [sp, #8]
 8009c7c:	680b      	ldr	r3, [r1, #0]
 8009c7e:	468b      	mov	fp, r1
 8009c80:	2500      	movs	r5, #0
 8009c82:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009c86:	f84b 3b1c 	str.w	r3, [fp], #28
 8009c8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009c8e:	4680      	mov	r8, r0
 8009c90:	460c      	mov	r4, r1
 8009c92:	465e      	mov	r6, fp
 8009c94:	46aa      	mov	sl, r5
 8009c96:	46a9      	mov	r9, r5
 8009c98:	9501      	str	r5, [sp, #4]
 8009c9a:	68a2      	ldr	r2, [r4, #8]
 8009c9c:	b152      	cbz	r2, 8009cb4 <_scanf_float+0x60>
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	2b4e      	cmp	r3, #78	; 0x4e
 8009ca4:	d864      	bhi.n	8009d70 <_scanf_float+0x11c>
 8009ca6:	2b40      	cmp	r3, #64	; 0x40
 8009ca8:	d83c      	bhi.n	8009d24 <_scanf_float+0xd0>
 8009caa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009cae:	b2c8      	uxtb	r0, r1
 8009cb0:	280e      	cmp	r0, #14
 8009cb2:	d93a      	bls.n	8009d2a <_scanf_float+0xd6>
 8009cb4:	f1b9 0f00 	cmp.w	r9, #0
 8009cb8:	d003      	beq.n	8009cc2 <_scanf_float+0x6e>
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cc6:	f1ba 0f01 	cmp.w	sl, #1
 8009cca:	f200 8113 	bhi.w	8009ef4 <_scanf_float+0x2a0>
 8009cce:	455e      	cmp	r6, fp
 8009cd0:	f200 8105 	bhi.w	8009ede <_scanf_float+0x28a>
 8009cd4:	2501      	movs	r5, #1
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	b007      	add	sp, #28
 8009cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cde:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009ce2:	2a0d      	cmp	r2, #13
 8009ce4:	d8e6      	bhi.n	8009cb4 <_scanf_float+0x60>
 8009ce6:	a101      	add	r1, pc, #4	; (adr r1, 8009cec <_scanf_float+0x98>)
 8009ce8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009cec:	08009e2b 	.word	0x08009e2b
 8009cf0:	08009cb5 	.word	0x08009cb5
 8009cf4:	08009cb5 	.word	0x08009cb5
 8009cf8:	08009cb5 	.word	0x08009cb5
 8009cfc:	08009e8b 	.word	0x08009e8b
 8009d00:	08009e63 	.word	0x08009e63
 8009d04:	08009cb5 	.word	0x08009cb5
 8009d08:	08009cb5 	.word	0x08009cb5
 8009d0c:	08009e39 	.word	0x08009e39
 8009d10:	08009cb5 	.word	0x08009cb5
 8009d14:	08009cb5 	.word	0x08009cb5
 8009d18:	08009cb5 	.word	0x08009cb5
 8009d1c:	08009cb5 	.word	0x08009cb5
 8009d20:	08009df1 	.word	0x08009df1
 8009d24:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009d28:	e7db      	b.n	8009ce2 <_scanf_float+0x8e>
 8009d2a:	290e      	cmp	r1, #14
 8009d2c:	d8c2      	bhi.n	8009cb4 <_scanf_float+0x60>
 8009d2e:	a001      	add	r0, pc, #4	; (adr r0, 8009d34 <_scanf_float+0xe0>)
 8009d30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009d34:	08009de3 	.word	0x08009de3
 8009d38:	08009cb5 	.word	0x08009cb5
 8009d3c:	08009de3 	.word	0x08009de3
 8009d40:	08009e77 	.word	0x08009e77
 8009d44:	08009cb5 	.word	0x08009cb5
 8009d48:	08009d91 	.word	0x08009d91
 8009d4c:	08009dcd 	.word	0x08009dcd
 8009d50:	08009dcd 	.word	0x08009dcd
 8009d54:	08009dcd 	.word	0x08009dcd
 8009d58:	08009dcd 	.word	0x08009dcd
 8009d5c:	08009dcd 	.word	0x08009dcd
 8009d60:	08009dcd 	.word	0x08009dcd
 8009d64:	08009dcd 	.word	0x08009dcd
 8009d68:	08009dcd 	.word	0x08009dcd
 8009d6c:	08009dcd 	.word	0x08009dcd
 8009d70:	2b6e      	cmp	r3, #110	; 0x6e
 8009d72:	d809      	bhi.n	8009d88 <_scanf_float+0x134>
 8009d74:	2b60      	cmp	r3, #96	; 0x60
 8009d76:	d8b2      	bhi.n	8009cde <_scanf_float+0x8a>
 8009d78:	2b54      	cmp	r3, #84	; 0x54
 8009d7a:	d077      	beq.n	8009e6c <_scanf_float+0x218>
 8009d7c:	2b59      	cmp	r3, #89	; 0x59
 8009d7e:	d199      	bne.n	8009cb4 <_scanf_float+0x60>
 8009d80:	2d07      	cmp	r5, #7
 8009d82:	d197      	bne.n	8009cb4 <_scanf_float+0x60>
 8009d84:	2508      	movs	r5, #8
 8009d86:	e029      	b.n	8009ddc <_scanf_float+0x188>
 8009d88:	2b74      	cmp	r3, #116	; 0x74
 8009d8a:	d06f      	beq.n	8009e6c <_scanf_float+0x218>
 8009d8c:	2b79      	cmp	r3, #121	; 0x79
 8009d8e:	e7f6      	b.n	8009d7e <_scanf_float+0x12a>
 8009d90:	6821      	ldr	r1, [r4, #0]
 8009d92:	05c8      	lsls	r0, r1, #23
 8009d94:	d51a      	bpl.n	8009dcc <_scanf_float+0x178>
 8009d96:	9b02      	ldr	r3, [sp, #8]
 8009d98:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009d9c:	6021      	str	r1, [r4, #0]
 8009d9e:	f109 0901 	add.w	r9, r9, #1
 8009da2:	b11b      	cbz	r3, 8009dac <_scanf_float+0x158>
 8009da4:	3b01      	subs	r3, #1
 8009da6:	3201      	adds	r2, #1
 8009da8:	9302      	str	r3, [sp, #8]
 8009daa:	60a2      	str	r2, [r4, #8]
 8009dac:	68a3      	ldr	r3, [r4, #8]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	60a3      	str	r3, [r4, #8]
 8009db2:	6923      	ldr	r3, [r4, #16]
 8009db4:	3301      	adds	r3, #1
 8009db6:	6123      	str	r3, [r4, #16]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	607b      	str	r3, [r7, #4]
 8009dc0:	f340 8084 	ble.w	8009ecc <_scanf_float+0x278>
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	603b      	str	r3, [r7, #0]
 8009dca:	e766      	b.n	8009c9a <_scanf_float+0x46>
 8009dcc:	eb1a 0f05 	cmn.w	sl, r5
 8009dd0:	f47f af70 	bne.w	8009cb4 <_scanf_float+0x60>
 8009dd4:	6822      	ldr	r2, [r4, #0]
 8009dd6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009dda:	6022      	str	r2, [r4, #0]
 8009ddc:	f806 3b01 	strb.w	r3, [r6], #1
 8009de0:	e7e4      	b.n	8009dac <_scanf_float+0x158>
 8009de2:	6822      	ldr	r2, [r4, #0]
 8009de4:	0610      	lsls	r0, r2, #24
 8009de6:	f57f af65 	bpl.w	8009cb4 <_scanf_float+0x60>
 8009dea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009dee:	e7f4      	b.n	8009dda <_scanf_float+0x186>
 8009df0:	f1ba 0f00 	cmp.w	sl, #0
 8009df4:	d10e      	bne.n	8009e14 <_scanf_float+0x1c0>
 8009df6:	f1b9 0f00 	cmp.w	r9, #0
 8009dfa:	d10e      	bne.n	8009e1a <_scanf_float+0x1c6>
 8009dfc:	6822      	ldr	r2, [r4, #0]
 8009dfe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009e02:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009e06:	d108      	bne.n	8009e1a <_scanf_float+0x1c6>
 8009e08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009e0c:	6022      	str	r2, [r4, #0]
 8009e0e:	f04f 0a01 	mov.w	sl, #1
 8009e12:	e7e3      	b.n	8009ddc <_scanf_float+0x188>
 8009e14:	f1ba 0f02 	cmp.w	sl, #2
 8009e18:	d055      	beq.n	8009ec6 <_scanf_float+0x272>
 8009e1a:	2d01      	cmp	r5, #1
 8009e1c:	d002      	beq.n	8009e24 <_scanf_float+0x1d0>
 8009e1e:	2d04      	cmp	r5, #4
 8009e20:	f47f af48 	bne.w	8009cb4 <_scanf_float+0x60>
 8009e24:	3501      	adds	r5, #1
 8009e26:	b2ed      	uxtb	r5, r5
 8009e28:	e7d8      	b.n	8009ddc <_scanf_float+0x188>
 8009e2a:	f1ba 0f01 	cmp.w	sl, #1
 8009e2e:	f47f af41 	bne.w	8009cb4 <_scanf_float+0x60>
 8009e32:	f04f 0a02 	mov.w	sl, #2
 8009e36:	e7d1      	b.n	8009ddc <_scanf_float+0x188>
 8009e38:	b97d      	cbnz	r5, 8009e5a <_scanf_float+0x206>
 8009e3a:	f1b9 0f00 	cmp.w	r9, #0
 8009e3e:	f47f af3c 	bne.w	8009cba <_scanf_float+0x66>
 8009e42:	6822      	ldr	r2, [r4, #0]
 8009e44:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009e48:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009e4c:	f47f af39 	bne.w	8009cc2 <_scanf_float+0x6e>
 8009e50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009e54:	6022      	str	r2, [r4, #0]
 8009e56:	2501      	movs	r5, #1
 8009e58:	e7c0      	b.n	8009ddc <_scanf_float+0x188>
 8009e5a:	2d03      	cmp	r5, #3
 8009e5c:	d0e2      	beq.n	8009e24 <_scanf_float+0x1d0>
 8009e5e:	2d05      	cmp	r5, #5
 8009e60:	e7de      	b.n	8009e20 <_scanf_float+0x1cc>
 8009e62:	2d02      	cmp	r5, #2
 8009e64:	f47f af26 	bne.w	8009cb4 <_scanf_float+0x60>
 8009e68:	2503      	movs	r5, #3
 8009e6a:	e7b7      	b.n	8009ddc <_scanf_float+0x188>
 8009e6c:	2d06      	cmp	r5, #6
 8009e6e:	f47f af21 	bne.w	8009cb4 <_scanf_float+0x60>
 8009e72:	2507      	movs	r5, #7
 8009e74:	e7b2      	b.n	8009ddc <_scanf_float+0x188>
 8009e76:	6822      	ldr	r2, [r4, #0]
 8009e78:	0591      	lsls	r1, r2, #22
 8009e7a:	f57f af1b 	bpl.w	8009cb4 <_scanf_float+0x60>
 8009e7e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009e82:	6022      	str	r2, [r4, #0]
 8009e84:	f8cd 9004 	str.w	r9, [sp, #4]
 8009e88:	e7a8      	b.n	8009ddc <_scanf_float+0x188>
 8009e8a:	6822      	ldr	r2, [r4, #0]
 8009e8c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009e90:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009e94:	d006      	beq.n	8009ea4 <_scanf_float+0x250>
 8009e96:	0550      	lsls	r0, r2, #21
 8009e98:	f57f af0c 	bpl.w	8009cb4 <_scanf_float+0x60>
 8009e9c:	f1b9 0f00 	cmp.w	r9, #0
 8009ea0:	f43f af0f 	beq.w	8009cc2 <_scanf_float+0x6e>
 8009ea4:	0591      	lsls	r1, r2, #22
 8009ea6:	bf58      	it	pl
 8009ea8:	9901      	ldrpl	r1, [sp, #4]
 8009eaa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009eae:	bf58      	it	pl
 8009eb0:	eba9 0101 	subpl.w	r1, r9, r1
 8009eb4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009eb8:	bf58      	it	pl
 8009eba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009ebe:	6022      	str	r2, [r4, #0]
 8009ec0:	f04f 0900 	mov.w	r9, #0
 8009ec4:	e78a      	b.n	8009ddc <_scanf_float+0x188>
 8009ec6:	f04f 0a03 	mov.w	sl, #3
 8009eca:	e787      	b.n	8009ddc <_scanf_float+0x188>
 8009ecc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009ed0:	4639      	mov	r1, r7
 8009ed2:	4640      	mov	r0, r8
 8009ed4:	4798      	blx	r3
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	f43f aedf 	beq.w	8009c9a <_scanf_float+0x46>
 8009edc:	e6ea      	b.n	8009cb4 <_scanf_float+0x60>
 8009ede:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ee2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ee6:	463a      	mov	r2, r7
 8009ee8:	4640      	mov	r0, r8
 8009eea:	4798      	blx	r3
 8009eec:	6923      	ldr	r3, [r4, #16]
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	6123      	str	r3, [r4, #16]
 8009ef2:	e6ec      	b.n	8009cce <_scanf_float+0x7a>
 8009ef4:	1e6b      	subs	r3, r5, #1
 8009ef6:	2b06      	cmp	r3, #6
 8009ef8:	d825      	bhi.n	8009f46 <_scanf_float+0x2f2>
 8009efa:	2d02      	cmp	r5, #2
 8009efc:	d836      	bhi.n	8009f6c <_scanf_float+0x318>
 8009efe:	455e      	cmp	r6, fp
 8009f00:	f67f aee8 	bls.w	8009cd4 <_scanf_float+0x80>
 8009f04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f08:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f0c:	463a      	mov	r2, r7
 8009f0e:	4640      	mov	r0, r8
 8009f10:	4798      	blx	r3
 8009f12:	6923      	ldr	r3, [r4, #16]
 8009f14:	3b01      	subs	r3, #1
 8009f16:	6123      	str	r3, [r4, #16]
 8009f18:	e7f1      	b.n	8009efe <_scanf_float+0x2aa>
 8009f1a:	9802      	ldr	r0, [sp, #8]
 8009f1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f20:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009f24:	9002      	str	r0, [sp, #8]
 8009f26:	463a      	mov	r2, r7
 8009f28:	4640      	mov	r0, r8
 8009f2a:	4798      	blx	r3
 8009f2c:	6923      	ldr	r3, [r4, #16]
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	6123      	str	r3, [r4, #16]
 8009f32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f36:	fa5f fa8a 	uxtb.w	sl, sl
 8009f3a:	f1ba 0f02 	cmp.w	sl, #2
 8009f3e:	d1ec      	bne.n	8009f1a <_scanf_float+0x2c6>
 8009f40:	3d03      	subs	r5, #3
 8009f42:	b2ed      	uxtb	r5, r5
 8009f44:	1b76      	subs	r6, r6, r5
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	05da      	lsls	r2, r3, #23
 8009f4a:	d52f      	bpl.n	8009fac <_scanf_float+0x358>
 8009f4c:	055b      	lsls	r3, r3, #21
 8009f4e:	d510      	bpl.n	8009f72 <_scanf_float+0x31e>
 8009f50:	455e      	cmp	r6, fp
 8009f52:	f67f aebf 	bls.w	8009cd4 <_scanf_float+0x80>
 8009f56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f5e:	463a      	mov	r2, r7
 8009f60:	4640      	mov	r0, r8
 8009f62:	4798      	blx	r3
 8009f64:	6923      	ldr	r3, [r4, #16]
 8009f66:	3b01      	subs	r3, #1
 8009f68:	6123      	str	r3, [r4, #16]
 8009f6a:	e7f1      	b.n	8009f50 <_scanf_float+0x2fc>
 8009f6c:	46aa      	mov	sl, r5
 8009f6e:	9602      	str	r6, [sp, #8]
 8009f70:	e7df      	b.n	8009f32 <_scanf_float+0x2de>
 8009f72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009f76:	6923      	ldr	r3, [r4, #16]
 8009f78:	2965      	cmp	r1, #101	; 0x65
 8009f7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f7e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009f82:	6123      	str	r3, [r4, #16]
 8009f84:	d00c      	beq.n	8009fa0 <_scanf_float+0x34c>
 8009f86:	2945      	cmp	r1, #69	; 0x45
 8009f88:	d00a      	beq.n	8009fa0 <_scanf_float+0x34c>
 8009f8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f8e:	463a      	mov	r2, r7
 8009f90:	4640      	mov	r0, r8
 8009f92:	4798      	blx	r3
 8009f94:	6923      	ldr	r3, [r4, #16]
 8009f96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	1eb5      	subs	r5, r6, #2
 8009f9e:	6123      	str	r3, [r4, #16]
 8009fa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fa4:	463a      	mov	r2, r7
 8009fa6:	4640      	mov	r0, r8
 8009fa8:	4798      	blx	r3
 8009faa:	462e      	mov	r6, r5
 8009fac:	6825      	ldr	r5, [r4, #0]
 8009fae:	f015 0510 	ands.w	r5, r5, #16
 8009fb2:	d159      	bne.n	800a068 <_scanf_float+0x414>
 8009fb4:	7035      	strb	r5, [r6, #0]
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fc0:	d11b      	bne.n	8009ffa <_scanf_float+0x3a6>
 8009fc2:	9b01      	ldr	r3, [sp, #4]
 8009fc4:	454b      	cmp	r3, r9
 8009fc6:	eba3 0209 	sub.w	r2, r3, r9
 8009fca:	d123      	bne.n	800a014 <_scanf_float+0x3c0>
 8009fcc:	2200      	movs	r2, #0
 8009fce:	4659      	mov	r1, fp
 8009fd0:	4640      	mov	r0, r8
 8009fd2:	f000 ff4f 	bl	800ae74 <_strtod_r>
 8009fd6:	6822      	ldr	r2, [r4, #0]
 8009fd8:	9b03      	ldr	r3, [sp, #12]
 8009fda:	f012 0f02 	tst.w	r2, #2
 8009fde:	ec57 6b10 	vmov	r6, r7, d0
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	d021      	beq.n	800a02a <_scanf_float+0x3d6>
 8009fe6:	9903      	ldr	r1, [sp, #12]
 8009fe8:	1d1a      	adds	r2, r3, #4
 8009fea:	600a      	str	r2, [r1, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	e9c3 6700 	strd	r6, r7, [r3]
 8009ff2:	68e3      	ldr	r3, [r4, #12]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	60e3      	str	r3, [r4, #12]
 8009ff8:	e66d      	b.n	8009cd6 <_scanf_float+0x82>
 8009ffa:	9b04      	ldr	r3, [sp, #16]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d0e5      	beq.n	8009fcc <_scanf_float+0x378>
 800a000:	9905      	ldr	r1, [sp, #20]
 800a002:	230a      	movs	r3, #10
 800a004:	462a      	mov	r2, r5
 800a006:	3101      	adds	r1, #1
 800a008:	4640      	mov	r0, r8
 800a00a:	f001 f817 	bl	800b03c <_strtol_r>
 800a00e:	9b04      	ldr	r3, [sp, #16]
 800a010:	9e05      	ldr	r6, [sp, #20]
 800a012:	1ac2      	subs	r2, r0, r3
 800a014:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a018:	429e      	cmp	r6, r3
 800a01a:	bf28      	it	cs
 800a01c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a020:	4912      	ldr	r1, [pc, #72]	; (800a06c <_scanf_float+0x418>)
 800a022:	4630      	mov	r0, r6
 800a024:	f000 f852 	bl	800a0cc <siprintf>
 800a028:	e7d0      	b.n	8009fcc <_scanf_float+0x378>
 800a02a:	9903      	ldr	r1, [sp, #12]
 800a02c:	f012 0f04 	tst.w	r2, #4
 800a030:	f103 0204 	add.w	r2, r3, #4
 800a034:	600a      	str	r2, [r1, #0]
 800a036:	d1d9      	bne.n	8009fec <_scanf_float+0x398>
 800a038:	f8d3 8000 	ldr.w	r8, [r3]
 800a03c:	ee10 2a10 	vmov	r2, s0
 800a040:	ee10 0a10 	vmov	r0, s0
 800a044:	463b      	mov	r3, r7
 800a046:	4639      	mov	r1, r7
 800a048:	f7f6 fd80 	bl	8000b4c <__aeabi_dcmpun>
 800a04c:	b128      	cbz	r0, 800a05a <_scanf_float+0x406>
 800a04e:	4808      	ldr	r0, [pc, #32]	; (800a070 <_scanf_float+0x41c>)
 800a050:	f000 f836 	bl	800a0c0 <nanf>
 800a054:	ed88 0a00 	vstr	s0, [r8]
 800a058:	e7cb      	b.n	8009ff2 <_scanf_float+0x39e>
 800a05a:	4630      	mov	r0, r6
 800a05c:	4639      	mov	r1, r7
 800a05e:	f7f6 fdd3 	bl	8000c08 <__aeabi_d2f>
 800a062:	f8c8 0000 	str.w	r0, [r8]
 800a066:	e7c4      	b.n	8009ff2 <_scanf_float+0x39e>
 800a068:	2500      	movs	r5, #0
 800a06a:	e634      	b.n	8009cd6 <_scanf_float+0x82>
 800a06c:	0800e40f 	.word	0x0800e40f
 800a070:	0800e3c7 	.word	0x0800e3c7

0800a074 <putchar>:
 800a074:	4b09      	ldr	r3, [pc, #36]	; (800a09c <putchar+0x28>)
 800a076:	b513      	push	{r0, r1, r4, lr}
 800a078:	681c      	ldr	r4, [r3, #0]
 800a07a:	4601      	mov	r1, r0
 800a07c:	b134      	cbz	r4, 800a08c <putchar+0x18>
 800a07e:	69a3      	ldr	r3, [r4, #24]
 800a080:	b923      	cbnz	r3, 800a08c <putchar+0x18>
 800a082:	9001      	str	r0, [sp, #4]
 800a084:	4620      	mov	r0, r4
 800a086:	f002 f85b 	bl	800c140 <__sinit>
 800a08a:	9901      	ldr	r1, [sp, #4]
 800a08c:	68a2      	ldr	r2, [r4, #8]
 800a08e:	4620      	mov	r0, r4
 800a090:	b002      	add	sp, #8
 800a092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a096:	f003 beab 	b.w	800ddf0 <_putc_r>
 800a09a:	bf00      	nop
 800a09c:	20000f38 	.word	0x20000f38

0800a0a0 <_sbrk_r>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	4d06      	ldr	r5, [pc, #24]	; (800a0bc <_sbrk_r+0x1c>)
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	4608      	mov	r0, r1
 800a0aa:	602b      	str	r3, [r5, #0]
 800a0ac:	f7fa fbb0 	bl	8004810 <_sbrk>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d102      	bne.n	800a0ba <_sbrk_r+0x1a>
 800a0b4:	682b      	ldr	r3, [r5, #0]
 800a0b6:	b103      	cbz	r3, 800a0ba <_sbrk_r+0x1a>
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
 800a0bc:	20001bf4 	.word	0x20001bf4

0800a0c0 <nanf>:
 800a0c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a0c8 <nanf+0x8>
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	7fc00000 	.word	0x7fc00000

0800a0cc <siprintf>:
 800a0cc:	b40e      	push	{r1, r2, r3}
 800a0ce:	b500      	push	{lr}
 800a0d0:	b09c      	sub	sp, #112	; 0x70
 800a0d2:	ab1d      	add	r3, sp, #116	; 0x74
 800a0d4:	9002      	str	r0, [sp, #8]
 800a0d6:	9006      	str	r0, [sp, #24]
 800a0d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0dc:	4809      	ldr	r0, [pc, #36]	; (800a104 <siprintf+0x38>)
 800a0de:	9107      	str	r1, [sp, #28]
 800a0e0:	9104      	str	r1, [sp, #16]
 800a0e2:	4909      	ldr	r1, [pc, #36]	; (800a108 <siprintf+0x3c>)
 800a0e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0e8:	9105      	str	r1, [sp, #20]
 800a0ea:	6800      	ldr	r0, [r0, #0]
 800a0ec:	9301      	str	r3, [sp, #4]
 800a0ee:	a902      	add	r1, sp, #8
 800a0f0:	f003 fa5a 	bl	800d5a8 <_svfiprintf_r>
 800a0f4:	9b02      	ldr	r3, [sp, #8]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	701a      	strb	r2, [r3, #0]
 800a0fa:	b01c      	add	sp, #112	; 0x70
 800a0fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a100:	b003      	add	sp, #12
 800a102:	4770      	bx	lr
 800a104:	20000f38 	.word	0x20000f38
 800a108:	ffff0208 	.word	0xffff0208

0800a10c <siscanf>:
 800a10c:	b40e      	push	{r1, r2, r3}
 800a10e:	b510      	push	{r4, lr}
 800a110:	b09f      	sub	sp, #124	; 0x7c
 800a112:	ac21      	add	r4, sp, #132	; 0x84
 800a114:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a118:	f854 2b04 	ldr.w	r2, [r4], #4
 800a11c:	9201      	str	r2, [sp, #4]
 800a11e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a122:	9004      	str	r0, [sp, #16]
 800a124:	9008      	str	r0, [sp, #32]
 800a126:	f7f6 f85d 	bl	80001e4 <strlen>
 800a12a:	4b0c      	ldr	r3, [pc, #48]	; (800a15c <siscanf+0x50>)
 800a12c:	9005      	str	r0, [sp, #20]
 800a12e:	9009      	str	r0, [sp, #36]	; 0x24
 800a130:	930d      	str	r3, [sp, #52]	; 0x34
 800a132:	480b      	ldr	r0, [pc, #44]	; (800a160 <siscanf+0x54>)
 800a134:	9a01      	ldr	r2, [sp, #4]
 800a136:	6800      	ldr	r0, [r0, #0]
 800a138:	9403      	str	r4, [sp, #12]
 800a13a:	2300      	movs	r3, #0
 800a13c:	9311      	str	r3, [sp, #68]	; 0x44
 800a13e:	9316      	str	r3, [sp, #88]	; 0x58
 800a140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a144:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a148:	a904      	add	r1, sp, #16
 800a14a:	4623      	mov	r3, r4
 800a14c:	f003 fb86 	bl	800d85c <__ssvfiscanf_r>
 800a150:	b01f      	add	sp, #124	; 0x7c
 800a152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a156:	b003      	add	sp, #12
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	0800a187 	.word	0x0800a187
 800a160:	20000f38 	.word	0x20000f38

0800a164 <__sread>:
 800a164:	b510      	push	{r4, lr}
 800a166:	460c      	mov	r4, r1
 800a168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a16c:	f003 fe88 	bl	800de80 <_read_r>
 800a170:	2800      	cmp	r0, #0
 800a172:	bfab      	itete	ge
 800a174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a176:	89a3      	ldrhlt	r3, [r4, #12]
 800a178:	181b      	addge	r3, r3, r0
 800a17a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a17e:	bfac      	ite	ge
 800a180:	6563      	strge	r3, [r4, #84]	; 0x54
 800a182:	81a3      	strhlt	r3, [r4, #12]
 800a184:	bd10      	pop	{r4, pc}

0800a186 <__seofread>:
 800a186:	2000      	movs	r0, #0
 800a188:	4770      	bx	lr

0800a18a <__swrite>:
 800a18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a18e:	461f      	mov	r7, r3
 800a190:	898b      	ldrh	r3, [r1, #12]
 800a192:	05db      	lsls	r3, r3, #23
 800a194:	4605      	mov	r5, r0
 800a196:	460c      	mov	r4, r1
 800a198:	4616      	mov	r6, r2
 800a19a:	d505      	bpl.n	800a1a8 <__swrite+0x1e>
 800a19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a0:	2302      	movs	r3, #2
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f002 fbe0 	bl	800c968 <_lseek_r>
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1b2:	81a3      	strh	r3, [r4, #12]
 800a1b4:	4632      	mov	r2, r6
 800a1b6:	463b      	mov	r3, r7
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1be:	f000 bf91 	b.w	800b0e4 <_write_r>

0800a1c2 <__sseek>:
 800a1c2:	b510      	push	{r4, lr}
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ca:	f002 fbcd 	bl	800c968 <_lseek_r>
 800a1ce:	1c43      	adds	r3, r0, #1
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	bf15      	itete	ne
 800a1d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1de:	81a3      	strheq	r3, [r4, #12]
 800a1e0:	bf18      	it	ne
 800a1e2:	81a3      	strhne	r3, [r4, #12]
 800a1e4:	bd10      	pop	{r4, pc}

0800a1e6 <__sclose>:
 800a1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ea:	f001 b803 	b.w	800b1f4 <_close_r>
	...

0800a1f0 <strdup>:
 800a1f0:	4b02      	ldr	r3, [pc, #8]	; (800a1fc <strdup+0xc>)
 800a1f2:	4601      	mov	r1, r0
 800a1f4:	6818      	ldr	r0, [r3, #0]
 800a1f6:	f000 b803 	b.w	800a200 <_strdup_r>
 800a1fa:	bf00      	nop
 800a1fc:	20000f38 	.word	0x20000f38

0800a200 <_strdup_r>:
 800a200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a202:	4604      	mov	r4, r0
 800a204:	4608      	mov	r0, r1
 800a206:	460d      	mov	r5, r1
 800a208:	f7f5 ffec 	bl	80001e4 <strlen>
 800a20c:	1c42      	adds	r2, r0, #1
 800a20e:	4611      	mov	r1, r2
 800a210:	4620      	mov	r0, r4
 800a212:	9201      	str	r2, [sp, #4]
 800a214:	f7fe fee6 	bl	8008fe4 <_malloc_r>
 800a218:	4604      	mov	r4, r0
 800a21a:	b118      	cbz	r0, 800a224 <_strdup_r+0x24>
 800a21c:	9a01      	ldr	r2, [sp, #4]
 800a21e:	4629      	mov	r1, r5
 800a220:	f002 fc2c 	bl	800ca7c <memcpy>
 800a224:	4620      	mov	r0, r4
 800a226:	b003      	add	sp, #12
 800a228:	bd30      	pop	{r4, r5, pc}

0800a22a <sulp>:
 800a22a:	b570      	push	{r4, r5, r6, lr}
 800a22c:	4604      	mov	r4, r0
 800a22e:	460d      	mov	r5, r1
 800a230:	ec45 4b10 	vmov	d0, r4, r5
 800a234:	4616      	mov	r6, r2
 800a236:	f002 ffc7 	bl	800d1c8 <__ulp>
 800a23a:	ec51 0b10 	vmov	r0, r1, d0
 800a23e:	b17e      	cbz	r6, 800a260 <sulp+0x36>
 800a240:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a244:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a248:	2b00      	cmp	r3, #0
 800a24a:	dd09      	ble.n	800a260 <sulp+0x36>
 800a24c:	051b      	lsls	r3, r3, #20
 800a24e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a252:	2400      	movs	r4, #0
 800a254:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a258:	4622      	mov	r2, r4
 800a25a:	462b      	mov	r3, r5
 800a25c:	f7f6 f9dc 	bl	8000618 <__aeabi_dmul>
 800a260:	bd70      	pop	{r4, r5, r6, pc}
 800a262:	0000      	movs	r0, r0
 800a264:	0000      	movs	r0, r0
	...

0800a268 <_strtod_l>:
 800a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26c:	ed2d 8b02 	vpush	{d8}
 800a270:	b09d      	sub	sp, #116	; 0x74
 800a272:	461f      	mov	r7, r3
 800a274:	2300      	movs	r3, #0
 800a276:	9318      	str	r3, [sp, #96]	; 0x60
 800a278:	4ba2      	ldr	r3, [pc, #648]	; (800a504 <_strtod_l+0x29c>)
 800a27a:	9213      	str	r2, [sp, #76]	; 0x4c
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	9305      	str	r3, [sp, #20]
 800a280:	4604      	mov	r4, r0
 800a282:	4618      	mov	r0, r3
 800a284:	4688      	mov	r8, r1
 800a286:	f7f5 ffad 	bl	80001e4 <strlen>
 800a28a:	f04f 0a00 	mov.w	sl, #0
 800a28e:	4605      	mov	r5, r0
 800a290:	f04f 0b00 	mov.w	fp, #0
 800a294:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a298:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a29a:	781a      	ldrb	r2, [r3, #0]
 800a29c:	2a2b      	cmp	r2, #43	; 0x2b
 800a29e:	d04e      	beq.n	800a33e <_strtod_l+0xd6>
 800a2a0:	d83b      	bhi.n	800a31a <_strtod_l+0xb2>
 800a2a2:	2a0d      	cmp	r2, #13
 800a2a4:	d834      	bhi.n	800a310 <_strtod_l+0xa8>
 800a2a6:	2a08      	cmp	r2, #8
 800a2a8:	d834      	bhi.n	800a314 <_strtod_l+0xac>
 800a2aa:	2a00      	cmp	r2, #0
 800a2ac:	d03e      	beq.n	800a32c <_strtod_l+0xc4>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	930a      	str	r3, [sp, #40]	; 0x28
 800a2b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a2b4:	7833      	ldrb	r3, [r6, #0]
 800a2b6:	2b30      	cmp	r3, #48	; 0x30
 800a2b8:	f040 80b0 	bne.w	800a41c <_strtod_l+0x1b4>
 800a2bc:	7873      	ldrb	r3, [r6, #1]
 800a2be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a2c2:	2b58      	cmp	r3, #88	; 0x58
 800a2c4:	d168      	bne.n	800a398 <_strtod_l+0x130>
 800a2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c8:	9301      	str	r3, [sp, #4]
 800a2ca:	ab18      	add	r3, sp, #96	; 0x60
 800a2cc:	9702      	str	r7, [sp, #8]
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	4a8d      	ldr	r2, [pc, #564]	; (800a508 <_strtod_l+0x2a0>)
 800a2d2:	ab19      	add	r3, sp, #100	; 0x64
 800a2d4:	a917      	add	r1, sp, #92	; 0x5c
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f002 f836 	bl	800c348 <__gethex>
 800a2dc:	f010 0707 	ands.w	r7, r0, #7
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	d005      	beq.n	800a2f0 <_strtod_l+0x88>
 800a2e4:	2f06      	cmp	r7, #6
 800a2e6:	d12c      	bne.n	800a342 <_strtod_l+0xda>
 800a2e8:	3601      	adds	r6, #1
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	9617      	str	r6, [sp, #92]	; 0x5c
 800a2ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a2f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f040 8590 	bne.w	800ae18 <_strtod_l+0xbb0>
 800a2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2fa:	b1eb      	cbz	r3, 800a338 <_strtod_l+0xd0>
 800a2fc:	4652      	mov	r2, sl
 800a2fe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a302:	ec43 2b10 	vmov	d0, r2, r3
 800a306:	b01d      	add	sp, #116	; 0x74
 800a308:	ecbd 8b02 	vpop	{d8}
 800a30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a310:	2a20      	cmp	r2, #32
 800a312:	d1cc      	bne.n	800a2ae <_strtod_l+0x46>
 800a314:	3301      	adds	r3, #1
 800a316:	9317      	str	r3, [sp, #92]	; 0x5c
 800a318:	e7be      	b.n	800a298 <_strtod_l+0x30>
 800a31a:	2a2d      	cmp	r2, #45	; 0x2d
 800a31c:	d1c7      	bne.n	800a2ae <_strtod_l+0x46>
 800a31e:	2201      	movs	r2, #1
 800a320:	920a      	str	r2, [sp, #40]	; 0x28
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	9217      	str	r2, [sp, #92]	; 0x5c
 800a326:	785b      	ldrb	r3, [r3, #1]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1c2      	bne.n	800a2b2 <_strtod_l+0x4a>
 800a32c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a32e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a332:	2b00      	cmp	r3, #0
 800a334:	f040 856e 	bne.w	800ae14 <_strtod_l+0xbac>
 800a338:	4652      	mov	r2, sl
 800a33a:	465b      	mov	r3, fp
 800a33c:	e7e1      	b.n	800a302 <_strtod_l+0x9a>
 800a33e:	2200      	movs	r2, #0
 800a340:	e7ee      	b.n	800a320 <_strtod_l+0xb8>
 800a342:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a344:	b13a      	cbz	r2, 800a356 <_strtod_l+0xee>
 800a346:	2135      	movs	r1, #53	; 0x35
 800a348:	a81a      	add	r0, sp, #104	; 0x68
 800a34a:	f003 f848 	bl	800d3de <__copybits>
 800a34e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a350:	4620      	mov	r0, r4
 800a352:	f002 fc07 	bl	800cb64 <_Bfree>
 800a356:	3f01      	subs	r7, #1
 800a358:	2f04      	cmp	r7, #4
 800a35a:	d806      	bhi.n	800a36a <_strtod_l+0x102>
 800a35c:	e8df f007 	tbb	[pc, r7]
 800a360:	1714030a 	.word	0x1714030a
 800a364:	0a          	.byte	0x0a
 800a365:	00          	.byte	0x00
 800a366:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a36a:	0728      	lsls	r0, r5, #28
 800a36c:	d5c0      	bpl.n	800a2f0 <_strtod_l+0x88>
 800a36e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a372:	e7bd      	b.n	800a2f0 <_strtod_l+0x88>
 800a374:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a378:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a37a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a37e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a382:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a386:	e7f0      	b.n	800a36a <_strtod_l+0x102>
 800a388:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a50c <_strtod_l+0x2a4>
 800a38c:	e7ed      	b.n	800a36a <_strtod_l+0x102>
 800a38e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a392:	f04f 3aff 	mov.w	sl, #4294967295
 800a396:	e7e8      	b.n	800a36a <_strtod_l+0x102>
 800a398:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a39a:	1c5a      	adds	r2, r3, #1
 800a39c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a39e:	785b      	ldrb	r3, [r3, #1]
 800a3a0:	2b30      	cmp	r3, #48	; 0x30
 800a3a2:	d0f9      	beq.n	800a398 <_strtod_l+0x130>
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d0a3      	beq.n	800a2f0 <_strtod_l+0x88>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	f04f 0900 	mov.w	r9, #0
 800a3ae:	9304      	str	r3, [sp, #16]
 800a3b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3b2:	9308      	str	r3, [sp, #32]
 800a3b4:	f8cd 901c 	str.w	r9, [sp, #28]
 800a3b8:	464f      	mov	r7, r9
 800a3ba:	220a      	movs	r2, #10
 800a3bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a3be:	7806      	ldrb	r6, [r0, #0]
 800a3c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a3c4:	b2d9      	uxtb	r1, r3
 800a3c6:	2909      	cmp	r1, #9
 800a3c8:	d92a      	bls.n	800a420 <_strtod_l+0x1b8>
 800a3ca:	9905      	ldr	r1, [sp, #20]
 800a3cc:	462a      	mov	r2, r5
 800a3ce:	f003 fdef 	bl	800dfb0 <strncmp>
 800a3d2:	b398      	cbz	r0, 800a43c <_strtod_l+0x1d4>
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	4632      	mov	r2, r6
 800a3d8:	463d      	mov	r5, r7
 800a3da:	9005      	str	r0, [sp, #20]
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2a65      	cmp	r2, #101	; 0x65
 800a3e0:	d001      	beq.n	800a3e6 <_strtod_l+0x17e>
 800a3e2:	2a45      	cmp	r2, #69	; 0x45
 800a3e4:	d118      	bne.n	800a418 <_strtod_l+0x1b0>
 800a3e6:	b91d      	cbnz	r5, 800a3f0 <_strtod_l+0x188>
 800a3e8:	9a04      	ldr	r2, [sp, #16]
 800a3ea:	4302      	orrs	r2, r0
 800a3ec:	d09e      	beq.n	800a32c <_strtod_l+0xc4>
 800a3ee:	2500      	movs	r5, #0
 800a3f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a3f4:	f108 0201 	add.w	r2, r8, #1
 800a3f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a3fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a3fe:	2a2b      	cmp	r2, #43	; 0x2b
 800a400:	d075      	beq.n	800a4ee <_strtod_l+0x286>
 800a402:	2a2d      	cmp	r2, #45	; 0x2d
 800a404:	d07b      	beq.n	800a4fe <_strtod_l+0x296>
 800a406:	f04f 0c00 	mov.w	ip, #0
 800a40a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a40e:	2909      	cmp	r1, #9
 800a410:	f240 8082 	bls.w	800a518 <_strtod_l+0x2b0>
 800a414:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a418:	2600      	movs	r6, #0
 800a41a:	e09d      	b.n	800a558 <_strtod_l+0x2f0>
 800a41c:	2300      	movs	r3, #0
 800a41e:	e7c4      	b.n	800a3aa <_strtod_l+0x142>
 800a420:	2f08      	cmp	r7, #8
 800a422:	bfd8      	it	le
 800a424:	9907      	ldrle	r1, [sp, #28]
 800a426:	f100 0001 	add.w	r0, r0, #1
 800a42a:	bfda      	itte	le
 800a42c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a430:	9307      	strle	r3, [sp, #28]
 800a432:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a436:	3701      	adds	r7, #1
 800a438:	9017      	str	r0, [sp, #92]	; 0x5c
 800a43a:	e7bf      	b.n	800a3bc <_strtod_l+0x154>
 800a43c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a43e:	195a      	adds	r2, r3, r5
 800a440:	9217      	str	r2, [sp, #92]	; 0x5c
 800a442:	5d5a      	ldrb	r2, [r3, r5]
 800a444:	2f00      	cmp	r7, #0
 800a446:	d037      	beq.n	800a4b8 <_strtod_l+0x250>
 800a448:	9005      	str	r0, [sp, #20]
 800a44a:	463d      	mov	r5, r7
 800a44c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a450:	2b09      	cmp	r3, #9
 800a452:	d912      	bls.n	800a47a <_strtod_l+0x212>
 800a454:	2301      	movs	r3, #1
 800a456:	e7c2      	b.n	800a3de <_strtod_l+0x176>
 800a458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a45a:	1c5a      	adds	r2, r3, #1
 800a45c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a45e:	785a      	ldrb	r2, [r3, #1]
 800a460:	3001      	adds	r0, #1
 800a462:	2a30      	cmp	r2, #48	; 0x30
 800a464:	d0f8      	beq.n	800a458 <_strtod_l+0x1f0>
 800a466:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a46a:	2b08      	cmp	r3, #8
 800a46c:	f200 84d9 	bhi.w	800ae22 <_strtod_l+0xbba>
 800a470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a472:	9005      	str	r0, [sp, #20]
 800a474:	2000      	movs	r0, #0
 800a476:	9308      	str	r3, [sp, #32]
 800a478:	4605      	mov	r5, r0
 800a47a:	3a30      	subs	r2, #48	; 0x30
 800a47c:	f100 0301 	add.w	r3, r0, #1
 800a480:	d014      	beq.n	800a4ac <_strtod_l+0x244>
 800a482:	9905      	ldr	r1, [sp, #20]
 800a484:	4419      	add	r1, r3
 800a486:	9105      	str	r1, [sp, #20]
 800a488:	462b      	mov	r3, r5
 800a48a:	eb00 0e05 	add.w	lr, r0, r5
 800a48e:	210a      	movs	r1, #10
 800a490:	4573      	cmp	r3, lr
 800a492:	d113      	bne.n	800a4bc <_strtod_l+0x254>
 800a494:	182b      	adds	r3, r5, r0
 800a496:	2b08      	cmp	r3, #8
 800a498:	f105 0501 	add.w	r5, r5, #1
 800a49c:	4405      	add	r5, r0
 800a49e:	dc1c      	bgt.n	800a4da <_strtod_l+0x272>
 800a4a0:	9907      	ldr	r1, [sp, #28]
 800a4a2:	230a      	movs	r3, #10
 800a4a4:	fb03 2301 	mla	r3, r3, r1, r2
 800a4a8:	9307      	str	r3, [sp, #28]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a4ae:	1c51      	adds	r1, r2, #1
 800a4b0:	9117      	str	r1, [sp, #92]	; 0x5c
 800a4b2:	7852      	ldrb	r2, [r2, #1]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	e7c9      	b.n	800a44c <_strtod_l+0x1e4>
 800a4b8:	4638      	mov	r0, r7
 800a4ba:	e7d2      	b.n	800a462 <_strtod_l+0x1fa>
 800a4bc:	2b08      	cmp	r3, #8
 800a4be:	dc04      	bgt.n	800a4ca <_strtod_l+0x262>
 800a4c0:	9e07      	ldr	r6, [sp, #28]
 800a4c2:	434e      	muls	r6, r1
 800a4c4:	9607      	str	r6, [sp, #28]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	e7e2      	b.n	800a490 <_strtod_l+0x228>
 800a4ca:	f103 0c01 	add.w	ip, r3, #1
 800a4ce:	f1bc 0f10 	cmp.w	ip, #16
 800a4d2:	bfd8      	it	le
 800a4d4:	fb01 f909 	mulle.w	r9, r1, r9
 800a4d8:	e7f5      	b.n	800a4c6 <_strtod_l+0x25e>
 800a4da:	2d10      	cmp	r5, #16
 800a4dc:	bfdc      	itt	le
 800a4de:	230a      	movle	r3, #10
 800a4e0:	fb03 2909 	mlale	r9, r3, r9, r2
 800a4e4:	e7e1      	b.n	800a4aa <_strtod_l+0x242>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	9305      	str	r3, [sp, #20]
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e77c      	b.n	800a3e8 <_strtod_l+0x180>
 800a4ee:	f04f 0c00 	mov.w	ip, #0
 800a4f2:	f108 0202 	add.w	r2, r8, #2
 800a4f6:	9217      	str	r2, [sp, #92]	; 0x5c
 800a4f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a4fc:	e785      	b.n	800a40a <_strtod_l+0x1a2>
 800a4fe:	f04f 0c01 	mov.w	ip, #1
 800a502:	e7f6      	b.n	800a4f2 <_strtod_l+0x28a>
 800a504:	0800e720 	.word	0x0800e720
 800a508:	0800e414 	.word	0x0800e414
 800a50c:	7ff00000 	.word	0x7ff00000
 800a510:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a512:	1c51      	adds	r1, r2, #1
 800a514:	9117      	str	r1, [sp, #92]	; 0x5c
 800a516:	7852      	ldrb	r2, [r2, #1]
 800a518:	2a30      	cmp	r2, #48	; 0x30
 800a51a:	d0f9      	beq.n	800a510 <_strtod_l+0x2a8>
 800a51c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a520:	2908      	cmp	r1, #8
 800a522:	f63f af79 	bhi.w	800a418 <_strtod_l+0x1b0>
 800a526:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a52a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a52c:	9206      	str	r2, [sp, #24]
 800a52e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a530:	1c51      	adds	r1, r2, #1
 800a532:	9117      	str	r1, [sp, #92]	; 0x5c
 800a534:	7852      	ldrb	r2, [r2, #1]
 800a536:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a53a:	2e09      	cmp	r6, #9
 800a53c:	d937      	bls.n	800a5ae <_strtod_l+0x346>
 800a53e:	9e06      	ldr	r6, [sp, #24]
 800a540:	1b89      	subs	r1, r1, r6
 800a542:	2908      	cmp	r1, #8
 800a544:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a548:	dc02      	bgt.n	800a550 <_strtod_l+0x2e8>
 800a54a:	4576      	cmp	r6, lr
 800a54c:	bfa8      	it	ge
 800a54e:	4676      	movge	r6, lr
 800a550:	f1bc 0f00 	cmp.w	ip, #0
 800a554:	d000      	beq.n	800a558 <_strtod_l+0x2f0>
 800a556:	4276      	negs	r6, r6
 800a558:	2d00      	cmp	r5, #0
 800a55a:	d14d      	bne.n	800a5f8 <_strtod_l+0x390>
 800a55c:	9904      	ldr	r1, [sp, #16]
 800a55e:	4301      	orrs	r1, r0
 800a560:	f47f aec6 	bne.w	800a2f0 <_strtod_l+0x88>
 800a564:	2b00      	cmp	r3, #0
 800a566:	f47f aee1 	bne.w	800a32c <_strtod_l+0xc4>
 800a56a:	2a69      	cmp	r2, #105	; 0x69
 800a56c:	d027      	beq.n	800a5be <_strtod_l+0x356>
 800a56e:	dc24      	bgt.n	800a5ba <_strtod_l+0x352>
 800a570:	2a49      	cmp	r2, #73	; 0x49
 800a572:	d024      	beq.n	800a5be <_strtod_l+0x356>
 800a574:	2a4e      	cmp	r2, #78	; 0x4e
 800a576:	f47f aed9 	bne.w	800a32c <_strtod_l+0xc4>
 800a57a:	499f      	ldr	r1, [pc, #636]	; (800a7f8 <_strtod_l+0x590>)
 800a57c:	a817      	add	r0, sp, #92	; 0x5c
 800a57e:	f002 f93b 	bl	800c7f8 <__match>
 800a582:	2800      	cmp	r0, #0
 800a584:	f43f aed2 	beq.w	800a32c <_strtod_l+0xc4>
 800a588:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	2b28      	cmp	r3, #40	; 0x28
 800a58e:	d12d      	bne.n	800a5ec <_strtod_l+0x384>
 800a590:	499a      	ldr	r1, [pc, #616]	; (800a7fc <_strtod_l+0x594>)
 800a592:	aa1a      	add	r2, sp, #104	; 0x68
 800a594:	a817      	add	r0, sp, #92	; 0x5c
 800a596:	f002 f943 	bl	800c820 <__hexnan>
 800a59a:	2805      	cmp	r0, #5
 800a59c:	d126      	bne.n	800a5ec <_strtod_l+0x384>
 800a59e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a5a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a5a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a5ac:	e6a0      	b.n	800a2f0 <_strtod_l+0x88>
 800a5ae:	210a      	movs	r1, #10
 800a5b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a5b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a5b8:	e7b9      	b.n	800a52e <_strtod_l+0x2c6>
 800a5ba:	2a6e      	cmp	r2, #110	; 0x6e
 800a5bc:	e7db      	b.n	800a576 <_strtod_l+0x30e>
 800a5be:	4990      	ldr	r1, [pc, #576]	; (800a800 <_strtod_l+0x598>)
 800a5c0:	a817      	add	r0, sp, #92	; 0x5c
 800a5c2:	f002 f919 	bl	800c7f8 <__match>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	f43f aeb0 	beq.w	800a32c <_strtod_l+0xc4>
 800a5cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5ce:	498d      	ldr	r1, [pc, #564]	; (800a804 <_strtod_l+0x59c>)
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	a817      	add	r0, sp, #92	; 0x5c
 800a5d4:	9317      	str	r3, [sp, #92]	; 0x5c
 800a5d6:	f002 f90f 	bl	800c7f8 <__match>
 800a5da:	b910      	cbnz	r0, 800a5e2 <_strtod_l+0x37a>
 800a5dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5de:	3301      	adds	r3, #1
 800a5e0:	9317      	str	r3, [sp, #92]	; 0x5c
 800a5e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a814 <_strtod_l+0x5ac>
 800a5e6:	f04f 0a00 	mov.w	sl, #0
 800a5ea:	e681      	b.n	800a2f0 <_strtod_l+0x88>
 800a5ec:	4886      	ldr	r0, [pc, #536]	; (800a808 <_strtod_l+0x5a0>)
 800a5ee:	f003 fc5b 	bl	800dea8 <nan>
 800a5f2:	ec5b ab10 	vmov	sl, fp, d0
 800a5f6:	e67b      	b.n	800a2f0 <_strtod_l+0x88>
 800a5f8:	9b05      	ldr	r3, [sp, #20]
 800a5fa:	9807      	ldr	r0, [sp, #28]
 800a5fc:	1af3      	subs	r3, r6, r3
 800a5fe:	2f00      	cmp	r7, #0
 800a600:	bf08      	it	eq
 800a602:	462f      	moveq	r7, r5
 800a604:	2d10      	cmp	r5, #16
 800a606:	9306      	str	r3, [sp, #24]
 800a608:	46a8      	mov	r8, r5
 800a60a:	bfa8      	it	ge
 800a60c:	f04f 0810 	movge.w	r8, #16
 800a610:	f7f5 ff88 	bl	8000524 <__aeabi_ui2d>
 800a614:	2d09      	cmp	r5, #9
 800a616:	4682      	mov	sl, r0
 800a618:	468b      	mov	fp, r1
 800a61a:	dd13      	ble.n	800a644 <_strtod_l+0x3dc>
 800a61c:	4b7b      	ldr	r3, [pc, #492]	; (800a80c <_strtod_l+0x5a4>)
 800a61e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a622:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a626:	f7f5 fff7 	bl	8000618 <__aeabi_dmul>
 800a62a:	4682      	mov	sl, r0
 800a62c:	4648      	mov	r0, r9
 800a62e:	468b      	mov	fp, r1
 800a630:	f7f5 ff78 	bl	8000524 <__aeabi_ui2d>
 800a634:	4602      	mov	r2, r0
 800a636:	460b      	mov	r3, r1
 800a638:	4650      	mov	r0, sl
 800a63a:	4659      	mov	r1, fp
 800a63c:	f7f5 fe36 	bl	80002ac <__adddf3>
 800a640:	4682      	mov	sl, r0
 800a642:	468b      	mov	fp, r1
 800a644:	2d0f      	cmp	r5, #15
 800a646:	dc38      	bgt.n	800a6ba <_strtod_l+0x452>
 800a648:	9b06      	ldr	r3, [sp, #24]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f43f ae50 	beq.w	800a2f0 <_strtod_l+0x88>
 800a650:	dd24      	ble.n	800a69c <_strtod_l+0x434>
 800a652:	2b16      	cmp	r3, #22
 800a654:	dc0b      	bgt.n	800a66e <_strtod_l+0x406>
 800a656:	496d      	ldr	r1, [pc, #436]	; (800a80c <_strtod_l+0x5a4>)
 800a658:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a65c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a660:	4652      	mov	r2, sl
 800a662:	465b      	mov	r3, fp
 800a664:	f7f5 ffd8 	bl	8000618 <__aeabi_dmul>
 800a668:	4682      	mov	sl, r0
 800a66a:	468b      	mov	fp, r1
 800a66c:	e640      	b.n	800a2f0 <_strtod_l+0x88>
 800a66e:	9a06      	ldr	r2, [sp, #24]
 800a670:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a674:	4293      	cmp	r3, r2
 800a676:	db20      	blt.n	800a6ba <_strtod_l+0x452>
 800a678:	4c64      	ldr	r4, [pc, #400]	; (800a80c <_strtod_l+0x5a4>)
 800a67a:	f1c5 050f 	rsb	r5, r5, #15
 800a67e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a682:	4652      	mov	r2, sl
 800a684:	465b      	mov	r3, fp
 800a686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a68a:	f7f5 ffc5 	bl	8000618 <__aeabi_dmul>
 800a68e:	9b06      	ldr	r3, [sp, #24]
 800a690:	1b5d      	subs	r5, r3, r5
 800a692:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a696:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a69a:	e7e3      	b.n	800a664 <_strtod_l+0x3fc>
 800a69c:	9b06      	ldr	r3, [sp, #24]
 800a69e:	3316      	adds	r3, #22
 800a6a0:	db0b      	blt.n	800a6ba <_strtod_l+0x452>
 800a6a2:	9b05      	ldr	r3, [sp, #20]
 800a6a4:	1b9e      	subs	r6, r3, r6
 800a6a6:	4b59      	ldr	r3, [pc, #356]	; (800a80c <_strtod_l+0x5a4>)
 800a6a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a6ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6b0:	4650      	mov	r0, sl
 800a6b2:	4659      	mov	r1, fp
 800a6b4:	f7f6 f8da 	bl	800086c <__aeabi_ddiv>
 800a6b8:	e7d6      	b.n	800a668 <_strtod_l+0x400>
 800a6ba:	9b06      	ldr	r3, [sp, #24]
 800a6bc:	eba5 0808 	sub.w	r8, r5, r8
 800a6c0:	4498      	add	r8, r3
 800a6c2:	f1b8 0f00 	cmp.w	r8, #0
 800a6c6:	dd74      	ble.n	800a7b2 <_strtod_l+0x54a>
 800a6c8:	f018 030f 	ands.w	r3, r8, #15
 800a6cc:	d00a      	beq.n	800a6e4 <_strtod_l+0x47c>
 800a6ce:	494f      	ldr	r1, [pc, #316]	; (800a80c <_strtod_l+0x5a4>)
 800a6d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a6d4:	4652      	mov	r2, sl
 800a6d6:	465b      	mov	r3, fp
 800a6d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6dc:	f7f5 ff9c 	bl	8000618 <__aeabi_dmul>
 800a6e0:	4682      	mov	sl, r0
 800a6e2:	468b      	mov	fp, r1
 800a6e4:	f038 080f 	bics.w	r8, r8, #15
 800a6e8:	d04f      	beq.n	800a78a <_strtod_l+0x522>
 800a6ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a6ee:	dd22      	ble.n	800a736 <_strtod_l+0x4ce>
 800a6f0:	2500      	movs	r5, #0
 800a6f2:	462e      	mov	r6, r5
 800a6f4:	9507      	str	r5, [sp, #28]
 800a6f6:	9505      	str	r5, [sp, #20]
 800a6f8:	2322      	movs	r3, #34	; 0x22
 800a6fa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a814 <_strtod_l+0x5ac>
 800a6fe:	6023      	str	r3, [r4, #0]
 800a700:	f04f 0a00 	mov.w	sl, #0
 800a704:	9b07      	ldr	r3, [sp, #28]
 800a706:	2b00      	cmp	r3, #0
 800a708:	f43f adf2 	beq.w	800a2f0 <_strtod_l+0x88>
 800a70c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a70e:	4620      	mov	r0, r4
 800a710:	f002 fa28 	bl	800cb64 <_Bfree>
 800a714:	9905      	ldr	r1, [sp, #20]
 800a716:	4620      	mov	r0, r4
 800a718:	f002 fa24 	bl	800cb64 <_Bfree>
 800a71c:	4631      	mov	r1, r6
 800a71e:	4620      	mov	r0, r4
 800a720:	f002 fa20 	bl	800cb64 <_Bfree>
 800a724:	9907      	ldr	r1, [sp, #28]
 800a726:	4620      	mov	r0, r4
 800a728:	f002 fa1c 	bl	800cb64 <_Bfree>
 800a72c:	4629      	mov	r1, r5
 800a72e:	4620      	mov	r0, r4
 800a730:	f002 fa18 	bl	800cb64 <_Bfree>
 800a734:	e5dc      	b.n	800a2f0 <_strtod_l+0x88>
 800a736:	4b36      	ldr	r3, [pc, #216]	; (800a810 <_strtod_l+0x5a8>)
 800a738:	9304      	str	r3, [sp, #16]
 800a73a:	2300      	movs	r3, #0
 800a73c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a740:	4650      	mov	r0, sl
 800a742:	4659      	mov	r1, fp
 800a744:	4699      	mov	r9, r3
 800a746:	f1b8 0f01 	cmp.w	r8, #1
 800a74a:	dc21      	bgt.n	800a790 <_strtod_l+0x528>
 800a74c:	b10b      	cbz	r3, 800a752 <_strtod_l+0x4ea>
 800a74e:	4682      	mov	sl, r0
 800a750:	468b      	mov	fp, r1
 800a752:	4b2f      	ldr	r3, [pc, #188]	; (800a810 <_strtod_l+0x5a8>)
 800a754:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a758:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a75c:	4652      	mov	r2, sl
 800a75e:	465b      	mov	r3, fp
 800a760:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a764:	f7f5 ff58 	bl	8000618 <__aeabi_dmul>
 800a768:	4b2a      	ldr	r3, [pc, #168]	; (800a814 <_strtod_l+0x5ac>)
 800a76a:	460a      	mov	r2, r1
 800a76c:	400b      	ands	r3, r1
 800a76e:	492a      	ldr	r1, [pc, #168]	; (800a818 <_strtod_l+0x5b0>)
 800a770:	428b      	cmp	r3, r1
 800a772:	4682      	mov	sl, r0
 800a774:	d8bc      	bhi.n	800a6f0 <_strtod_l+0x488>
 800a776:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a77a:	428b      	cmp	r3, r1
 800a77c:	bf86      	itte	hi
 800a77e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a81c <_strtod_l+0x5b4>
 800a782:	f04f 3aff 	movhi.w	sl, #4294967295
 800a786:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a78a:	2300      	movs	r3, #0
 800a78c:	9304      	str	r3, [sp, #16]
 800a78e:	e084      	b.n	800a89a <_strtod_l+0x632>
 800a790:	f018 0f01 	tst.w	r8, #1
 800a794:	d005      	beq.n	800a7a2 <_strtod_l+0x53a>
 800a796:	9b04      	ldr	r3, [sp, #16]
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	f7f5 ff3c 	bl	8000618 <__aeabi_dmul>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	9a04      	ldr	r2, [sp, #16]
 800a7a4:	3208      	adds	r2, #8
 800a7a6:	f109 0901 	add.w	r9, r9, #1
 800a7aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a7ae:	9204      	str	r2, [sp, #16]
 800a7b0:	e7c9      	b.n	800a746 <_strtod_l+0x4de>
 800a7b2:	d0ea      	beq.n	800a78a <_strtod_l+0x522>
 800a7b4:	f1c8 0800 	rsb	r8, r8, #0
 800a7b8:	f018 020f 	ands.w	r2, r8, #15
 800a7bc:	d00a      	beq.n	800a7d4 <_strtod_l+0x56c>
 800a7be:	4b13      	ldr	r3, [pc, #76]	; (800a80c <_strtod_l+0x5a4>)
 800a7c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7c4:	4650      	mov	r0, sl
 800a7c6:	4659      	mov	r1, fp
 800a7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7cc:	f7f6 f84e 	bl	800086c <__aeabi_ddiv>
 800a7d0:	4682      	mov	sl, r0
 800a7d2:	468b      	mov	fp, r1
 800a7d4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a7d8:	d0d7      	beq.n	800a78a <_strtod_l+0x522>
 800a7da:	f1b8 0f1f 	cmp.w	r8, #31
 800a7de:	dd1f      	ble.n	800a820 <_strtod_l+0x5b8>
 800a7e0:	2500      	movs	r5, #0
 800a7e2:	462e      	mov	r6, r5
 800a7e4:	9507      	str	r5, [sp, #28]
 800a7e6:	9505      	str	r5, [sp, #20]
 800a7e8:	2322      	movs	r3, #34	; 0x22
 800a7ea:	f04f 0a00 	mov.w	sl, #0
 800a7ee:	f04f 0b00 	mov.w	fp, #0
 800a7f2:	6023      	str	r3, [r4, #0]
 800a7f4:	e786      	b.n	800a704 <_strtod_l+0x49c>
 800a7f6:	bf00      	nop
 800a7f8:	0800e3ea 	.word	0x0800e3ea
 800a7fc:	0800e428 	.word	0x0800e428
 800a800:	0800e3e2 	.word	0x0800e3e2
 800a804:	0800e5e0 	.word	0x0800e5e0
 800a808:	0800e3c7 	.word	0x0800e3c7
 800a80c:	0800e7b8 	.word	0x0800e7b8
 800a810:	0800e790 	.word	0x0800e790
 800a814:	7ff00000 	.word	0x7ff00000
 800a818:	7ca00000 	.word	0x7ca00000
 800a81c:	7fefffff 	.word	0x7fefffff
 800a820:	f018 0310 	ands.w	r3, r8, #16
 800a824:	bf18      	it	ne
 800a826:	236a      	movne	r3, #106	; 0x6a
 800a828:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800abd8 <_strtod_l+0x970>
 800a82c:	9304      	str	r3, [sp, #16]
 800a82e:	4650      	mov	r0, sl
 800a830:	4659      	mov	r1, fp
 800a832:	2300      	movs	r3, #0
 800a834:	f018 0f01 	tst.w	r8, #1
 800a838:	d004      	beq.n	800a844 <_strtod_l+0x5dc>
 800a83a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a83e:	f7f5 feeb 	bl	8000618 <__aeabi_dmul>
 800a842:	2301      	movs	r3, #1
 800a844:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a848:	f109 0908 	add.w	r9, r9, #8
 800a84c:	d1f2      	bne.n	800a834 <_strtod_l+0x5cc>
 800a84e:	b10b      	cbz	r3, 800a854 <_strtod_l+0x5ec>
 800a850:	4682      	mov	sl, r0
 800a852:	468b      	mov	fp, r1
 800a854:	9b04      	ldr	r3, [sp, #16]
 800a856:	b1c3      	cbz	r3, 800a88a <_strtod_l+0x622>
 800a858:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a85c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a860:	2b00      	cmp	r3, #0
 800a862:	4659      	mov	r1, fp
 800a864:	dd11      	ble.n	800a88a <_strtod_l+0x622>
 800a866:	2b1f      	cmp	r3, #31
 800a868:	f340 8124 	ble.w	800aab4 <_strtod_l+0x84c>
 800a86c:	2b34      	cmp	r3, #52	; 0x34
 800a86e:	bfde      	ittt	le
 800a870:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a874:	f04f 33ff 	movle.w	r3, #4294967295
 800a878:	fa03 f202 	lslle.w	r2, r3, r2
 800a87c:	f04f 0a00 	mov.w	sl, #0
 800a880:	bfcc      	ite	gt
 800a882:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a886:	ea02 0b01 	andle.w	fp, r2, r1
 800a88a:	2200      	movs	r2, #0
 800a88c:	2300      	movs	r3, #0
 800a88e:	4650      	mov	r0, sl
 800a890:	4659      	mov	r1, fp
 800a892:	f7f6 f929 	bl	8000ae8 <__aeabi_dcmpeq>
 800a896:	2800      	cmp	r0, #0
 800a898:	d1a2      	bne.n	800a7e0 <_strtod_l+0x578>
 800a89a:	9b07      	ldr	r3, [sp, #28]
 800a89c:	9300      	str	r3, [sp, #0]
 800a89e:	9908      	ldr	r1, [sp, #32]
 800a8a0:	462b      	mov	r3, r5
 800a8a2:	463a      	mov	r2, r7
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f002 f9c5 	bl	800cc34 <__s2b>
 800a8aa:	9007      	str	r0, [sp, #28]
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	f43f af1f 	beq.w	800a6f0 <_strtod_l+0x488>
 800a8b2:	9b05      	ldr	r3, [sp, #20]
 800a8b4:	1b9e      	subs	r6, r3, r6
 800a8b6:	9b06      	ldr	r3, [sp, #24]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	bfb4      	ite	lt
 800a8bc:	4633      	movlt	r3, r6
 800a8be:	2300      	movge	r3, #0
 800a8c0:	930c      	str	r3, [sp, #48]	; 0x30
 800a8c2:	9b06      	ldr	r3, [sp, #24]
 800a8c4:	2500      	movs	r5, #0
 800a8c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a8ca:	9312      	str	r3, [sp, #72]	; 0x48
 800a8cc:	462e      	mov	r6, r5
 800a8ce:	9b07      	ldr	r3, [sp, #28]
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	6859      	ldr	r1, [r3, #4]
 800a8d4:	f002 f906 	bl	800cae4 <_Balloc>
 800a8d8:	9005      	str	r0, [sp, #20]
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	f43f af0c 	beq.w	800a6f8 <_strtod_l+0x490>
 800a8e0:	9b07      	ldr	r3, [sp, #28]
 800a8e2:	691a      	ldr	r2, [r3, #16]
 800a8e4:	3202      	adds	r2, #2
 800a8e6:	f103 010c 	add.w	r1, r3, #12
 800a8ea:	0092      	lsls	r2, r2, #2
 800a8ec:	300c      	adds	r0, #12
 800a8ee:	f002 f8c5 	bl	800ca7c <memcpy>
 800a8f2:	ec4b ab10 	vmov	d0, sl, fp
 800a8f6:	aa1a      	add	r2, sp, #104	; 0x68
 800a8f8:	a919      	add	r1, sp, #100	; 0x64
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f002 fce0 	bl	800d2c0 <__d2b>
 800a900:	ec4b ab18 	vmov	d8, sl, fp
 800a904:	9018      	str	r0, [sp, #96]	; 0x60
 800a906:	2800      	cmp	r0, #0
 800a908:	f43f aef6 	beq.w	800a6f8 <_strtod_l+0x490>
 800a90c:	2101      	movs	r1, #1
 800a90e:	4620      	mov	r0, r4
 800a910:	f002 fa2a 	bl	800cd68 <__i2b>
 800a914:	4606      	mov	r6, r0
 800a916:	2800      	cmp	r0, #0
 800a918:	f43f aeee 	beq.w	800a6f8 <_strtod_l+0x490>
 800a91c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a91e:	9904      	ldr	r1, [sp, #16]
 800a920:	2b00      	cmp	r3, #0
 800a922:	bfab      	itete	ge
 800a924:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a926:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a928:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a92a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a92e:	bfac      	ite	ge
 800a930:	eb03 0902 	addge.w	r9, r3, r2
 800a934:	1ad7      	sublt	r7, r2, r3
 800a936:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a938:	eba3 0801 	sub.w	r8, r3, r1
 800a93c:	4490      	add	r8, r2
 800a93e:	4ba1      	ldr	r3, [pc, #644]	; (800abc4 <_strtod_l+0x95c>)
 800a940:	f108 38ff 	add.w	r8, r8, #4294967295
 800a944:	4598      	cmp	r8, r3
 800a946:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a94a:	f280 80c7 	bge.w	800aadc <_strtod_l+0x874>
 800a94e:	eba3 0308 	sub.w	r3, r3, r8
 800a952:	2b1f      	cmp	r3, #31
 800a954:	eba2 0203 	sub.w	r2, r2, r3
 800a958:	f04f 0101 	mov.w	r1, #1
 800a95c:	f300 80b1 	bgt.w	800aac2 <_strtod_l+0x85a>
 800a960:	fa01 f303 	lsl.w	r3, r1, r3
 800a964:	930d      	str	r3, [sp, #52]	; 0x34
 800a966:	2300      	movs	r3, #0
 800a968:	9308      	str	r3, [sp, #32]
 800a96a:	eb09 0802 	add.w	r8, r9, r2
 800a96e:	9b04      	ldr	r3, [sp, #16]
 800a970:	45c1      	cmp	r9, r8
 800a972:	4417      	add	r7, r2
 800a974:	441f      	add	r7, r3
 800a976:	464b      	mov	r3, r9
 800a978:	bfa8      	it	ge
 800a97a:	4643      	movge	r3, r8
 800a97c:	42bb      	cmp	r3, r7
 800a97e:	bfa8      	it	ge
 800a980:	463b      	movge	r3, r7
 800a982:	2b00      	cmp	r3, #0
 800a984:	bfc2      	ittt	gt
 800a986:	eba8 0803 	subgt.w	r8, r8, r3
 800a98a:	1aff      	subgt	r7, r7, r3
 800a98c:	eba9 0903 	subgt.w	r9, r9, r3
 800a990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a992:	2b00      	cmp	r3, #0
 800a994:	dd17      	ble.n	800a9c6 <_strtod_l+0x75e>
 800a996:	4631      	mov	r1, r6
 800a998:	461a      	mov	r2, r3
 800a99a:	4620      	mov	r0, r4
 800a99c:	f002 faa4 	bl	800cee8 <__pow5mult>
 800a9a0:	4606      	mov	r6, r0
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	f43f aea8 	beq.w	800a6f8 <_strtod_l+0x490>
 800a9a8:	4601      	mov	r1, r0
 800a9aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f002 f9f1 	bl	800cd94 <__multiply>
 800a9b2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	f43f ae9f 	beq.w	800a6f8 <_strtod_l+0x490>
 800a9ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f002 f8d1 	bl	800cb64 <_Bfree>
 800a9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9c4:	9318      	str	r3, [sp, #96]	; 0x60
 800a9c6:	f1b8 0f00 	cmp.w	r8, #0
 800a9ca:	f300 808c 	bgt.w	800aae6 <_strtod_l+0x87e>
 800a9ce:	9b06      	ldr	r3, [sp, #24]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	dd08      	ble.n	800a9e6 <_strtod_l+0x77e>
 800a9d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9d6:	9905      	ldr	r1, [sp, #20]
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f002 fa85 	bl	800cee8 <__pow5mult>
 800a9de:	9005      	str	r0, [sp, #20]
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	f43f ae89 	beq.w	800a6f8 <_strtod_l+0x490>
 800a9e6:	2f00      	cmp	r7, #0
 800a9e8:	dd08      	ble.n	800a9fc <_strtod_l+0x794>
 800a9ea:	9905      	ldr	r1, [sp, #20]
 800a9ec:	463a      	mov	r2, r7
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f002 fad4 	bl	800cf9c <__lshift>
 800a9f4:	9005      	str	r0, [sp, #20]
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	f43f ae7e 	beq.w	800a6f8 <_strtod_l+0x490>
 800a9fc:	f1b9 0f00 	cmp.w	r9, #0
 800aa00:	dd08      	ble.n	800aa14 <_strtod_l+0x7ac>
 800aa02:	4631      	mov	r1, r6
 800aa04:	464a      	mov	r2, r9
 800aa06:	4620      	mov	r0, r4
 800aa08:	f002 fac8 	bl	800cf9c <__lshift>
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	f43f ae72 	beq.w	800a6f8 <_strtod_l+0x490>
 800aa14:	9a05      	ldr	r2, [sp, #20]
 800aa16:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f002 fb4b 	bl	800d0b4 <__mdiff>
 800aa1e:	4605      	mov	r5, r0
 800aa20:	2800      	cmp	r0, #0
 800aa22:	f43f ae69 	beq.w	800a6f8 <_strtod_l+0x490>
 800aa26:	68c3      	ldr	r3, [r0, #12]
 800aa28:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	60c3      	str	r3, [r0, #12]
 800aa2e:	4631      	mov	r1, r6
 800aa30:	f002 fb24 	bl	800d07c <__mcmp>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	da60      	bge.n	800aafa <_strtod_l+0x892>
 800aa38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa3a:	ea53 030a 	orrs.w	r3, r3, sl
 800aa3e:	f040 8082 	bne.w	800ab46 <_strtod_l+0x8de>
 800aa42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d17d      	bne.n	800ab46 <_strtod_l+0x8de>
 800aa4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa4e:	0d1b      	lsrs	r3, r3, #20
 800aa50:	051b      	lsls	r3, r3, #20
 800aa52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aa56:	d976      	bls.n	800ab46 <_strtod_l+0x8de>
 800aa58:	696b      	ldr	r3, [r5, #20]
 800aa5a:	b913      	cbnz	r3, 800aa62 <_strtod_l+0x7fa>
 800aa5c:	692b      	ldr	r3, [r5, #16]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	dd71      	ble.n	800ab46 <_strtod_l+0x8de>
 800aa62:	4629      	mov	r1, r5
 800aa64:	2201      	movs	r2, #1
 800aa66:	4620      	mov	r0, r4
 800aa68:	f002 fa98 	bl	800cf9c <__lshift>
 800aa6c:	4631      	mov	r1, r6
 800aa6e:	4605      	mov	r5, r0
 800aa70:	f002 fb04 	bl	800d07c <__mcmp>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	dd66      	ble.n	800ab46 <_strtod_l+0x8de>
 800aa78:	9904      	ldr	r1, [sp, #16]
 800aa7a:	4a53      	ldr	r2, [pc, #332]	; (800abc8 <_strtod_l+0x960>)
 800aa7c:	465b      	mov	r3, fp
 800aa7e:	2900      	cmp	r1, #0
 800aa80:	f000 8081 	beq.w	800ab86 <_strtod_l+0x91e>
 800aa84:	ea02 010b 	and.w	r1, r2, fp
 800aa88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aa8c:	dc7b      	bgt.n	800ab86 <_strtod_l+0x91e>
 800aa8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aa92:	f77f aea9 	ble.w	800a7e8 <_strtod_l+0x580>
 800aa96:	4b4d      	ldr	r3, [pc, #308]	; (800abcc <_strtod_l+0x964>)
 800aa98:	4650      	mov	r0, sl
 800aa9a:	4659      	mov	r1, fp
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f7f5 fdbb 	bl	8000618 <__aeabi_dmul>
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	4303      	orrs	r3, r0
 800aaa6:	bf08      	it	eq
 800aaa8:	2322      	moveq	r3, #34	; 0x22
 800aaaa:	4682      	mov	sl, r0
 800aaac:	468b      	mov	fp, r1
 800aaae:	bf08      	it	eq
 800aab0:	6023      	streq	r3, [r4, #0]
 800aab2:	e62b      	b.n	800a70c <_strtod_l+0x4a4>
 800aab4:	f04f 32ff 	mov.w	r2, #4294967295
 800aab8:	fa02 f303 	lsl.w	r3, r2, r3
 800aabc:	ea03 0a0a 	and.w	sl, r3, sl
 800aac0:	e6e3      	b.n	800a88a <_strtod_l+0x622>
 800aac2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800aac6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800aaca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800aace:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800aad2:	fa01 f308 	lsl.w	r3, r1, r8
 800aad6:	9308      	str	r3, [sp, #32]
 800aad8:	910d      	str	r1, [sp, #52]	; 0x34
 800aada:	e746      	b.n	800a96a <_strtod_l+0x702>
 800aadc:	2300      	movs	r3, #0
 800aade:	9308      	str	r3, [sp, #32]
 800aae0:	2301      	movs	r3, #1
 800aae2:	930d      	str	r3, [sp, #52]	; 0x34
 800aae4:	e741      	b.n	800a96a <_strtod_l+0x702>
 800aae6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aae8:	4642      	mov	r2, r8
 800aaea:	4620      	mov	r0, r4
 800aaec:	f002 fa56 	bl	800cf9c <__lshift>
 800aaf0:	9018      	str	r0, [sp, #96]	; 0x60
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	f47f af6b 	bne.w	800a9ce <_strtod_l+0x766>
 800aaf8:	e5fe      	b.n	800a6f8 <_strtod_l+0x490>
 800aafa:	465f      	mov	r7, fp
 800aafc:	d16e      	bne.n	800abdc <_strtod_l+0x974>
 800aafe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab04:	b342      	cbz	r2, 800ab58 <_strtod_l+0x8f0>
 800ab06:	4a32      	ldr	r2, [pc, #200]	; (800abd0 <_strtod_l+0x968>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d128      	bne.n	800ab5e <_strtod_l+0x8f6>
 800ab0c:	9b04      	ldr	r3, [sp, #16]
 800ab0e:	4651      	mov	r1, sl
 800ab10:	b1eb      	cbz	r3, 800ab4e <_strtod_l+0x8e6>
 800ab12:	4b2d      	ldr	r3, [pc, #180]	; (800abc8 <_strtod_l+0x960>)
 800ab14:	403b      	ands	r3, r7
 800ab16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ab1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab1e:	d819      	bhi.n	800ab54 <_strtod_l+0x8ec>
 800ab20:	0d1b      	lsrs	r3, r3, #20
 800ab22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab26:	fa02 f303 	lsl.w	r3, r2, r3
 800ab2a:	4299      	cmp	r1, r3
 800ab2c:	d117      	bne.n	800ab5e <_strtod_l+0x8f6>
 800ab2e:	4b29      	ldr	r3, [pc, #164]	; (800abd4 <_strtod_l+0x96c>)
 800ab30:	429f      	cmp	r7, r3
 800ab32:	d102      	bne.n	800ab3a <_strtod_l+0x8d2>
 800ab34:	3101      	adds	r1, #1
 800ab36:	f43f addf 	beq.w	800a6f8 <_strtod_l+0x490>
 800ab3a:	4b23      	ldr	r3, [pc, #140]	; (800abc8 <_strtod_l+0x960>)
 800ab3c:	403b      	ands	r3, r7
 800ab3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ab42:	f04f 0a00 	mov.w	sl, #0
 800ab46:	9b04      	ldr	r3, [sp, #16]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1a4      	bne.n	800aa96 <_strtod_l+0x82e>
 800ab4c:	e5de      	b.n	800a70c <_strtod_l+0x4a4>
 800ab4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab52:	e7ea      	b.n	800ab2a <_strtod_l+0x8c2>
 800ab54:	4613      	mov	r3, r2
 800ab56:	e7e8      	b.n	800ab2a <_strtod_l+0x8c2>
 800ab58:	ea53 030a 	orrs.w	r3, r3, sl
 800ab5c:	d08c      	beq.n	800aa78 <_strtod_l+0x810>
 800ab5e:	9b08      	ldr	r3, [sp, #32]
 800ab60:	b1db      	cbz	r3, 800ab9a <_strtod_l+0x932>
 800ab62:	423b      	tst	r3, r7
 800ab64:	d0ef      	beq.n	800ab46 <_strtod_l+0x8de>
 800ab66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab68:	9a04      	ldr	r2, [sp, #16]
 800ab6a:	4650      	mov	r0, sl
 800ab6c:	4659      	mov	r1, fp
 800ab6e:	b1c3      	cbz	r3, 800aba2 <_strtod_l+0x93a>
 800ab70:	f7ff fb5b 	bl	800a22a <sulp>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	ec51 0b18 	vmov	r0, r1, d8
 800ab7c:	f7f5 fb96 	bl	80002ac <__adddf3>
 800ab80:	4682      	mov	sl, r0
 800ab82:	468b      	mov	fp, r1
 800ab84:	e7df      	b.n	800ab46 <_strtod_l+0x8de>
 800ab86:	4013      	ands	r3, r2
 800ab88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ab8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ab90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ab94:	f04f 3aff 	mov.w	sl, #4294967295
 800ab98:	e7d5      	b.n	800ab46 <_strtod_l+0x8de>
 800ab9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab9c:	ea13 0f0a 	tst.w	r3, sl
 800aba0:	e7e0      	b.n	800ab64 <_strtod_l+0x8fc>
 800aba2:	f7ff fb42 	bl	800a22a <sulp>
 800aba6:	4602      	mov	r2, r0
 800aba8:	460b      	mov	r3, r1
 800abaa:	ec51 0b18 	vmov	r0, r1, d8
 800abae:	f7f5 fb7b 	bl	80002a8 <__aeabi_dsub>
 800abb2:	2200      	movs	r2, #0
 800abb4:	2300      	movs	r3, #0
 800abb6:	4682      	mov	sl, r0
 800abb8:	468b      	mov	fp, r1
 800abba:	f7f5 ff95 	bl	8000ae8 <__aeabi_dcmpeq>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d0c1      	beq.n	800ab46 <_strtod_l+0x8de>
 800abc2:	e611      	b.n	800a7e8 <_strtod_l+0x580>
 800abc4:	fffffc02 	.word	0xfffffc02
 800abc8:	7ff00000 	.word	0x7ff00000
 800abcc:	39500000 	.word	0x39500000
 800abd0:	000fffff 	.word	0x000fffff
 800abd4:	7fefffff 	.word	0x7fefffff
 800abd8:	0800e440 	.word	0x0800e440
 800abdc:	4631      	mov	r1, r6
 800abde:	4628      	mov	r0, r5
 800abe0:	f002 fbca 	bl	800d378 <__ratio>
 800abe4:	ec59 8b10 	vmov	r8, r9, d0
 800abe8:	ee10 0a10 	vmov	r0, s0
 800abec:	2200      	movs	r2, #0
 800abee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800abf2:	4649      	mov	r1, r9
 800abf4:	f7f5 ff8c 	bl	8000b10 <__aeabi_dcmple>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d07a      	beq.n	800acf2 <_strtod_l+0xa8a>
 800abfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d04a      	beq.n	800ac98 <_strtod_l+0xa30>
 800ac02:	4b95      	ldr	r3, [pc, #596]	; (800ae58 <_strtod_l+0xbf0>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ae58 <_strtod_l+0xbf0>
 800ac0e:	f04f 0800 	mov.w	r8, #0
 800ac12:	4b92      	ldr	r3, [pc, #584]	; (800ae5c <_strtod_l+0xbf4>)
 800ac14:	403b      	ands	r3, r7
 800ac16:	930d      	str	r3, [sp, #52]	; 0x34
 800ac18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac1a:	4b91      	ldr	r3, [pc, #580]	; (800ae60 <_strtod_l+0xbf8>)
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	f040 80b0 	bne.w	800ad82 <_strtod_l+0xb1a>
 800ac22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac26:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ac2a:	ec4b ab10 	vmov	d0, sl, fp
 800ac2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac32:	f002 fac9 	bl	800d1c8 <__ulp>
 800ac36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac3a:	ec53 2b10 	vmov	r2, r3, d0
 800ac3e:	f7f5 fceb 	bl	8000618 <__aeabi_dmul>
 800ac42:	4652      	mov	r2, sl
 800ac44:	465b      	mov	r3, fp
 800ac46:	f7f5 fb31 	bl	80002ac <__adddf3>
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4983      	ldr	r1, [pc, #524]	; (800ae5c <_strtod_l+0xbf4>)
 800ac4e:	4a85      	ldr	r2, [pc, #532]	; (800ae64 <_strtod_l+0xbfc>)
 800ac50:	4019      	ands	r1, r3
 800ac52:	4291      	cmp	r1, r2
 800ac54:	4682      	mov	sl, r0
 800ac56:	d960      	bls.n	800ad1a <_strtod_l+0xab2>
 800ac58:	ee18 3a90 	vmov	r3, s17
 800ac5c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d104      	bne.n	800ac6e <_strtod_l+0xa06>
 800ac64:	ee18 3a10 	vmov	r3, s16
 800ac68:	3301      	adds	r3, #1
 800ac6a:	f43f ad45 	beq.w	800a6f8 <_strtod_l+0x490>
 800ac6e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ae70 <_strtod_l+0xc08>
 800ac72:	f04f 3aff 	mov.w	sl, #4294967295
 800ac76:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f001 ff73 	bl	800cb64 <_Bfree>
 800ac7e:	9905      	ldr	r1, [sp, #20]
 800ac80:	4620      	mov	r0, r4
 800ac82:	f001 ff6f 	bl	800cb64 <_Bfree>
 800ac86:	4631      	mov	r1, r6
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f001 ff6b 	bl	800cb64 <_Bfree>
 800ac8e:	4629      	mov	r1, r5
 800ac90:	4620      	mov	r0, r4
 800ac92:	f001 ff67 	bl	800cb64 <_Bfree>
 800ac96:	e61a      	b.n	800a8ce <_strtod_l+0x666>
 800ac98:	f1ba 0f00 	cmp.w	sl, #0
 800ac9c:	d11b      	bne.n	800acd6 <_strtod_l+0xa6e>
 800ac9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aca2:	b9f3      	cbnz	r3, 800ace2 <_strtod_l+0xa7a>
 800aca4:	4b6c      	ldr	r3, [pc, #432]	; (800ae58 <_strtod_l+0xbf0>)
 800aca6:	2200      	movs	r2, #0
 800aca8:	4640      	mov	r0, r8
 800acaa:	4649      	mov	r1, r9
 800acac:	f7f5 ff26 	bl	8000afc <__aeabi_dcmplt>
 800acb0:	b9d0      	cbnz	r0, 800ace8 <_strtod_l+0xa80>
 800acb2:	4640      	mov	r0, r8
 800acb4:	4649      	mov	r1, r9
 800acb6:	4b6c      	ldr	r3, [pc, #432]	; (800ae68 <_strtod_l+0xc00>)
 800acb8:	2200      	movs	r2, #0
 800acba:	f7f5 fcad 	bl	8000618 <__aeabi_dmul>
 800acbe:	4680      	mov	r8, r0
 800acc0:	4689      	mov	r9, r1
 800acc2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800acc6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800acca:	9315      	str	r3, [sp, #84]	; 0x54
 800accc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800acd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800acd4:	e79d      	b.n	800ac12 <_strtod_l+0x9aa>
 800acd6:	f1ba 0f01 	cmp.w	sl, #1
 800acda:	d102      	bne.n	800ace2 <_strtod_l+0xa7a>
 800acdc:	2f00      	cmp	r7, #0
 800acde:	f43f ad83 	beq.w	800a7e8 <_strtod_l+0x580>
 800ace2:	4b62      	ldr	r3, [pc, #392]	; (800ae6c <_strtod_l+0xc04>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	e78e      	b.n	800ac06 <_strtod_l+0x99e>
 800ace8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ae68 <_strtod_l+0xc00>
 800acec:	f04f 0800 	mov.w	r8, #0
 800acf0:	e7e7      	b.n	800acc2 <_strtod_l+0xa5a>
 800acf2:	4b5d      	ldr	r3, [pc, #372]	; (800ae68 <_strtod_l+0xc00>)
 800acf4:	4640      	mov	r0, r8
 800acf6:	4649      	mov	r1, r9
 800acf8:	2200      	movs	r2, #0
 800acfa:	f7f5 fc8d 	bl	8000618 <__aeabi_dmul>
 800acfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad00:	4680      	mov	r8, r0
 800ad02:	4689      	mov	r9, r1
 800ad04:	b933      	cbnz	r3, 800ad14 <_strtod_l+0xaac>
 800ad06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad0a:	900e      	str	r0, [sp, #56]	; 0x38
 800ad0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ad12:	e7dd      	b.n	800acd0 <_strtod_l+0xa68>
 800ad14:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ad18:	e7f9      	b.n	800ad0e <_strtod_l+0xaa6>
 800ad1a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ad1e:	9b04      	ldr	r3, [sp, #16]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1a8      	bne.n	800ac76 <_strtod_l+0xa0e>
 800ad24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad2a:	0d1b      	lsrs	r3, r3, #20
 800ad2c:	051b      	lsls	r3, r3, #20
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d1a1      	bne.n	800ac76 <_strtod_l+0xa0e>
 800ad32:	4640      	mov	r0, r8
 800ad34:	4649      	mov	r1, r9
 800ad36:	f7f5 ffcf 	bl	8000cd8 <__aeabi_d2lz>
 800ad3a:	f7f5 fc3f 	bl	80005bc <__aeabi_l2d>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	460b      	mov	r3, r1
 800ad42:	4640      	mov	r0, r8
 800ad44:	4649      	mov	r1, r9
 800ad46:	f7f5 faaf 	bl	80002a8 <__aeabi_dsub>
 800ad4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad50:	ea43 030a 	orr.w	r3, r3, sl
 800ad54:	4313      	orrs	r3, r2
 800ad56:	4680      	mov	r8, r0
 800ad58:	4689      	mov	r9, r1
 800ad5a:	d055      	beq.n	800ae08 <_strtod_l+0xba0>
 800ad5c:	a336      	add	r3, pc, #216	; (adr r3, 800ae38 <_strtod_l+0xbd0>)
 800ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad62:	f7f5 fecb 	bl	8000afc <__aeabi_dcmplt>
 800ad66:	2800      	cmp	r0, #0
 800ad68:	f47f acd0 	bne.w	800a70c <_strtod_l+0x4a4>
 800ad6c:	a334      	add	r3, pc, #208	; (adr r3, 800ae40 <_strtod_l+0xbd8>)
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	4640      	mov	r0, r8
 800ad74:	4649      	mov	r1, r9
 800ad76:	f7f5 fedf 	bl	8000b38 <__aeabi_dcmpgt>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	f43f af7b 	beq.w	800ac76 <_strtod_l+0xa0e>
 800ad80:	e4c4      	b.n	800a70c <_strtod_l+0x4a4>
 800ad82:	9b04      	ldr	r3, [sp, #16]
 800ad84:	b333      	cbz	r3, 800add4 <_strtod_l+0xb6c>
 800ad86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad88:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ad8c:	d822      	bhi.n	800add4 <_strtod_l+0xb6c>
 800ad8e:	a32e      	add	r3, pc, #184	; (adr r3, 800ae48 <_strtod_l+0xbe0>)
 800ad90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad94:	4640      	mov	r0, r8
 800ad96:	4649      	mov	r1, r9
 800ad98:	f7f5 feba 	bl	8000b10 <__aeabi_dcmple>
 800ad9c:	b1a0      	cbz	r0, 800adc8 <_strtod_l+0xb60>
 800ad9e:	4649      	mov	r1, r9
 800ada0:	4640      	mov	r0, r8
 800ada2:	f7f5 ff11 	bl	8000bc8 <__aeabi_d2uiz>
 800ada6:	2801      	cmp	r0, #1
 800ada8:	bf38      	it	cc
 800adaa:	2001      	movcc	r0, #1
 800adac:	f7f5 fbba 	bl	8000524 <__aeabi_ui2d>
 800adb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adb2:	4680      	mov	r8, r0
 800adb4:	4689      	mov	r9, r1
 800adb6:	bb23      	cbnz	r3, 800ae02 <_strtod_l+0xb9a>
 800adb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adbc:	9010      	str	r0, [sp, #64]	; 0x40
 800adbe:	9311      	str	r3, [sp, #68]	; 0x44
 800adc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800adc4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800adc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adcc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800add0:	1a9b      	subs	r3, r3, r2
 800add2:	9309      	str	r3, [sp, #36]	; 0x24
 800add4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800add8:	eeb0 0a48 	vmov.f32	s0, s16
 800addc:	eef0 0a68 	vmov.f32	s1, s17
 800ade0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ade4:	f002 f9f0 	bl	800d1c8 <__ulp>
 800ade8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800adec:	ec53 2b10 	vmov	r2, r3, d0
 800adf0:	f7f5 fc12 	bl	8000618 <__aeabi_dmul>
 800adf4:	ec53 2b18 	vmov	r2, r3, d8
 800adf8:	f7f5 fa58 	bl	80002ac <__adddf3>
 800adfc:	4682      	mov	sl, r0
 800adfe:	468b      	mov	fp, r1
 800ae00:	e78d      	b.n	800ad1e <_strtod_l+0xab6>
 800ae02:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ae06:	e7db      	b.n	800adc0 <_strtod_l+0xb58>
 800ae08:	a311      	add	r3, pc, #68	; (adr r3, 800ae50 <_strtod_l+0xbe8>)
 800ae0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0e:	f7f5 fe75 	bl	8000afc <__aeabi_dcmplt>
 800ae12:	e7b2      	b.n	800ad7a <_strtod_l+0xb12>
 800ae14:	2300      	movs	r3, #0
 800ae16:	930a      	str	r3, [sp, #40]	; 0x28
 800ae18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae1c:	6013      	str	r3, [r2, #0]
 800ae1e:	f7ff ba6b 	b.w	800a2f8 <_strtod_l+0x90>
 800ae22:	2a65      	cmp	r2, #101	; 0x65
 800ae24:	f43f ab5f 	beq.w	800a4e6 <_strtod_l+0x27e>
 800ae28:	2a45      	cmp	r2, #69	; 0x45
 800ae2a:	f43f ab5c 	beq.w	800a4e6 <_strtod_l+0x27e>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	f7ff bb94 	b.w	800a55c <_strtod_l+0x2f4>
 800ae34:	f3af 8000 	nop.w
 800ae38:	94a03595 	.word	0x94a03595
 800ae3c:	3fdfffff 	.word	0x3fdfffff
 800ae40:	35afe535 	.word	0x35afe535
 800ae44:	3fe00000 	.word	0x3fe00000
 800ae48:	ffc00000 	.word	0xffc00000
 800ae4c:	41dfffff 	.word	0x41dfffff
 800ae50:	94a03595 	.word	0x94a03595
 800ae54:	3fcfffff 	.word	0x3fcfffff
 800ae58:	3ff00000 	.word	0x3ff00000
 800ae5c:	7ff00000 	.word	0x7ff00000
 800ae60:	7fe00000 	.word	0x7fe00000
 800ae64:	7c9fffff 	.word	0x7c9fffff
 800ae68:	3fe00000 	.word	0x3fe00000
 800ae6c:	bff00000 	.word	0xbff00000
 800ae70:	7fefffff 	.word	0x7fefffff

0800ae74 <_strtod_r>:
 800ae74:	4b01      	ldr	r3, [pc, #4]	; (800ae7c <_strtod_r+0x8>)
 800ae76:	f7ff b9f7 	b.w	800a268 <_strtod_l>
 800ae7a:	bf00      	nop
 800ae7c:	20000fa0 	.word	0x20000fa0

0800ae80 <strtok>:
 800ae80:	4b16      	ldr	r3, [pc, #88]	; (800aedc <strtok+0x5c>)
 800ae82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae84:	681e      	ldr	r6, [r3, #0]
 800ae86:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ae88:	4605      	mov	r5, r0
 800ae8a:	b9fc      	cbnz	r4, 800aecc <strtok+0x4c>
 800ae8c:	2050      	movs	r0, #80	; 0x50
 800ae8e:	9101      	str	r1, [sp, #4]
 800ae90:	f7fe f824 	bl	8008edc <malloc>
 800ae94:	9901      	ldr	r1, [sp, #4]
 800ae96:	65b0      	str	r0, [r6, #88]	; 0x58
 800ae98:	4602      	mov	r2, r0
 800ae9a:	b920      	cbnz	r0, 800aea6 <strtok+0x26>
 800ae9c:	4b10      	ldr	r3, [pc, #64]	; (800aee0 <strtok+0x60>)
 800ae9e:	4811      	ldr	r0, [pc, #68]	; (800aee4 <strtok+0x64>)
 800aea0:	2157      	movs	r1, #87	; 0x57
 800aea2:	f7fd ffc1 	bl	8008e28 <__assert_func>
 800aea6:	e9c0 4400 	strd	r4, r4, [r0]
 800aeaa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800aeae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800aeb2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800aeb6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800aeba:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800aebe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800aec2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800aec6:	6184      	str	r4, [r0, #24]
 800aec8:	7704      	strb	r4, [r0, #28]
 800aeca:	6244      	str	r4, [r0, #36]	; 0x24
 800aecc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800aece:	2301      	movs	r3, #1
 800aed0:	4628      	mov	r0, r5
 800aed2:	b002      	add	sp, #8
 800aed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aed8:	f000 b806 	b.w	800aee8 <__strtok_r>
 800aedc:	20000f38 	.word	0x20000f38
 800aee0:	0800e468 	.word	0x0800e468
 800aee4:	0800e47f 	.word	0x0800e47f

0800aee8 <__strtok_r>:
 800aee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeea:	b908      	cbnz	r0, 800aef0 <__strtok_r+0x8>
 800aeec:	6810      	ldr	r0, [r2, #0]
 800aeee:	b188      	cbz	r0, 800af14 <__strtok_r+0x2c>
 800aef0:	4604      	mov	r4, r0
 800aef2:	4620      	mov	r0, r4
 800aef4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800aef8:	460f      	mov	r7, r1
 800aefa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800aefe:	b91e      	cbnz	r6, 800af08 <__strtok_r+0x20>
 800af00:	b965      	cbnz	r5, 800af1c <__strtok_r+0x34>
 800af02:	6015      	str	r5, [r2, #0]
 800af04:	4628      	mov	r0, r5
 800af06:	e005      	b.n	800af14 <__strtok_r+0x2c>
 800af08:	42b5      	cmp	r5, r6
 800af0a:	d1f6      	bne.n	800aefa <__strtok_r+0x12>
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d1f0      	bne.n	800aef2 <__strtok_r+0xa>
 800af10:	6014      	str	r4, [r2, #0]
 800af12:	7003      	strb	r3, [r0, #0]
 800af14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af16:	461c      	mov	r4, r3
 800af18:	e00c      	b.n	800af34 <__strtok_r+0x4c>
 800af1a:	b915      	cbnz	r5, 800af22 <__strtok_r+0x3a>
 800af1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af20:	460e      	mov	r6, r1
 800af22:	f816 5b01 	ldrb.w	r5, [r6], #1
 800af26:	42ab      	cmp	r3, r5
 800af28:	d1f7      	bne.n	800af1a <__strtok_r+0x32>
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d0f3      	beq.n	800af16 <__strtok_r+0x2e>
 800af2e:	2300      	movs	r3, #0
 800af30:	f804 3c01 	strb.w	r3, [r4, #-1]
 800af34:	6014      	str	r4, [r2, #0]
 800af36:	e7ed      	b.n	800af14 <__strtok_r+0x2c>

0800af38 <_strtol_l.constprop.0>:
 800af38:	2b01      	cmp	r3, #1
 800af3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af3e:	d001      	beq.n	800af44 <_strtol_l.constprop.0+0xc>
 800af40:	2b24      	cmp	r3, #36	; 0x24
 800af42:	d906      	bls.n	800af52 <_strtol_l.constprop.0+0x1a>
 800af44:	f7fd ff8e 	bl	8008e64 <__errno>
 800af48:	2316      	movs	r3, #22
 800af4a:	6003      	str	r3, [r0, #0]
 800af4c:	2000      	movs	r0, #0
 800af4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b038 <_strtol_l.constprop.0+0x100>
 800af56:	460d      	mov	r5, r1
 800af58:	462e      	mov	r6, r5
 800af5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800af62:	f017 0708 	ands.w	r7, r7, #8
 800af66:	d1f7      	bne.n	800af58 <_strtol_l.constprop.0+0x20>
 800af68:	2c2d      	cmp	r4, #45	; 0x2d
 800af6a:	d132      	bne.n	800afd2 <_strtol_l.constprop.0+0x9a>
 800af6c:	782c      	ldrb	r4, [r5, #0]
 800af6e:	2701      	movs	r7, #1
 800af70:	1cb5      	adds	r5, r6, #2
 800af72:	2b00      	cmp	r3, #0
 800af74:	d05b      	beq.n	800b02e <_strtol_l.constprop.0+0xf6>
 800af76:	2b10      	cmp	r3, #16
 800af78:	d109      	bne.n	800af8e <_strtol_l.constprop.0+0x56>
 800af7a:	2c30      	cmp	r4, #48	; 0x30
 800af7c:	d107      	bne.n	800af8e <_strtol_l.constprop.0+0x56>
 800af7e:	782c      	ldrb	r4, [r5, #0]
 800af80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800af84:	2c58      	cmp	r4, #88	; 0x58
 800af86:	d14d      	bne.n	800b024 <_strtol_l.constprop.0+0xec>
 800af88:	786c      	ldrb	r4, [r5, #1]
 800af8a:	2310      	movs	r3, #16
 800af8c:	3502      	adds	r5, #2
 800af8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800af92:	f108 38ff 	add.w	r8, r8, #4294967295
 800af96:	f04f 0c00 	mov.w	ip, #0
 800af9a:	fbb8 f9f3 	udiv	r9, r8, r3
 800af9e:	4666      	mov	r6, ip
 800afa0:	fb03 8a19 	mls	sl, r3, r9, r8
 800afa4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800afa8:	f1be 0f09 	cmp.w	lr, #9
 800afac:	d816      	bhi.n	800afdc <_strtol_l.constprop.0+0xa4>
 800afae:	4674      	mov	r4, lr
 800afb0:	42a3      	cmp	r3, r4
 800afb2:	dd24      	ble.n	800affe <_strtol_l.constprop.0+0xc6>
 800afb4:	f1bc 0f00 	cmp.w	ip, #0
 800afb8:	db1e      	blt.n	800aff8 <_strtol_l.constprop.0+0xc0>
 800afba:	45b1      	cmp	r9, r6
 800afbc:	d31c      	bcc.n	800aff8 <_strtol_l.constprop.0+0xc0>
 800afbe:	d101      	bne.n	800afc4 <_strtol_l.constprop.0+0x8c>
 800afc0:	45a2      	cmp	sl, r4
 800afc2:	db19      	blt.n	800aff8 <_strtol_l.constprop.0+0xc0>
 800afc4:	fb06 4603 	mla	r6, r6, r3, r4
 800afc8:	f04f 0c01 	mov.w	ip, #1
 800afcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afd0:	e7e8      	b.n	800afa4 <_strtol_l.constprop.0+0x6c>
 800afd2:	2c2b      	cmp	r4, #43	; 0x2b
 800afd4:	bf04      	itt	eq
 800afd6:	782c      	ldrbeq	r4, [r5, #0]
 800afd8:	1cb5      	addeq	r5, r6, #2
 800afda:	e7ca      	b.n	800af72 <_strtol_l.constprop.0+0x3a>
 800afdc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800afe0:	f1be 0f19 	cmp.w	lr, #25
 800afe4:	d801      	bhi.n	800afea <_strtol_l.constprop.0+0xb2>
 800afe6:	3c37      	subs	r4, #55	; 0x37
 800afe8:	e7e2      	b.n	800afb0 <_strtol_l.constprop.0+0x78>
 800afea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800afee:	f1be 0f19 	cmp.w	lr, #25
 800aff2:	d804      	bhi.n	800affe <_strtol_l.constprop.0+0xc6>
 800aff4:	3c57      	subs	r4, #87	; 0x57
 800aff6:	e7db      	b.n	800afb0 <_strtol_l.constprop.0+0x78>
 800aff8:	f04f 3cff 	mov.w	ip, #4294967295
 800affc:	e7e6      	b.n	800afcc <_strtol_l.constprop.0+0x94>
 800affe:	f1bc 0f00 	cmp.w	ip, #0
 800b002:	da05      	bge.n	800b010 <_strtol_l.constprop.0+0xd8>
 800b004:	2322      	movs	r3, #34	; 0x22
 800b006:	6003      	str	r3, [r0, #0]
 800b008:	4646      	mov	r6, r8
 800b00a:	b942      	cbnz	r2, 800b01e <_strtol_l.constprop.0+0xe6>
 800b00c:	4630      	mov	r0, r6
 800b00e:	e79e      	b.n	800af4e <_strtol_l.constprop.0+0x16>
 800b010:	b107      	cbz	r7, 800b014 <_strtol_l.constprop.0+0xdc>
 800b012:	4276      	negs	r6, r6
 800b014:	2a00      	cmp	r2, #0
 800b016:	d0f9      	beq.n	800b00c <_strtol_l.constprop.0+0xd4>
 800b018:	f1bc 0f00 	cmp.w	ip, #0
 800b01c:	d000      	beq.n	800b020 <_strtol_l.constprop.0+0xe8>
 800b01e:	1e69      	subs	r1, r5, #1
 800b020:	6011      	str	r1, [r2, #0]
 800b022:	e7f3      	b.n	800b00c <_strtol_l.constprop.0+0xd4>
 800b024:	2430      	movs	r4, #48	; 0x30
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1b1      	bne.n	800af8e <_strtol_l.constprop.0+0x56>
 800b02a:	2308      	movs	r3, #8
 800b02c:	e7af      	b.n	800af8e <_strtol_l.constprop.0+0x56>
 800b02e:	2c30      	cmp	r4, #48	; 0x30
 800b030:	d0a5      	beq.n	800af7e <_strtol_l.constprop.0+0x46>
 800b032:	230a      	movs	r3, #10
 800b034:	e7ab      	b.n	800af8e <_strtol_l.constprop.0+0x56>
 800b036:	bf00      	nop
 800b038:	0800e4dd 	.word	0x0800e4dd

0800b03c <_strtol_r>:
 800b03c:	f7ff bf7c 	b.w	800af38 <_strtol_l.constprop.0>

0800b040 <__swbuf_r>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	460e      	mov	r6, r1
 800b044:	4614      	mov	r4, r2
 800b046:	4605      	mov	r5, r0
 800b048:	b118      	cbz	r0, 800b052 <__swbuf_r+0x12>
 800b04a:	6983      	ldr	r3, [r0, #24]
 800b04c:	b90b      	cbnz	r3, 800b052 <__swbuf_r+0x12>
 800b04e:	f001 f877 	bl	800c140 <__sinit>
 800b052:	4b21      	ldr	r3, [pc, #132]	; (800b0d8 <__swbuf_r+0x98>)
 800b054:	429c      	cmp	r4, r3
 800b056:	d12b      	bne.n	800b0b0 <__swbuf_r+0x70>
 800b058:	686c      	ldr	r4, [r5, #4]
 800b05a:	69a3      	ldr	r3, [r4, #24]
 800b05c:	60a3      	str	r3, [r4, #8]
 800b05e:	89a3      	ldrh	r3, [r4, #12]
 800b060:	071a      	lsls	r2, r3, #28
 800b062:	d52f      	bpl.n	800b0c4 <__swbuf_r+0x84>
 800b064:	6923      	ldr	r3, [r4, #16]
 800b066:	b36b      	cbz	r3, 800b0c4 <__swbuf_r+0x84>
 800b068:	6923      	ldr	r3, [r4, #16]
 800b06a:	6820      	ldr	r0, [r4, #0]
 800b06c:	1ac0      	subs	r0, r0, r3
 800b06e:	6963      	ldr	r3, [r4, #20]
 800b070:	b2f6      	uxtb	r6, r6
 800b072:	4283      	cmp	r3, r0
 800b074:	4637      	mov	r7, r6
 800b076:	dc04      	bgt.n	800b082 <__swbuf_r+0x42>
 800b078:	4621      	mov	r1, r4
 800b07a:	4628      	mov	r0, r5
 800b07c:	f000 ffcc 	bl	800c018 <_fflush_r>
 800b080:	bb30      	cbnz	r0, 800b0d0 <__swbuf_r+0x90>
 800b082:	68a3      	ldr	r3, [r4, #8]
 800b084:	3b01      	subs	r3, #1
 800b086:	60a3      	str	r3, [r4, #8]
 800b088:	6823      	ldr	r3, [r4, #0]
 800b08a:	1c5a      	adds	r2, r3, #1
 800b08c:	6022      	str	r2, [r4, #0]
 800b08e:	701e      	strb	r6, [r3, #0]
 800b090:	6963      	ldr	r3, [r4, #20]
 800b092:	3001      	adds	r0, #1
 800b094:	4283      	cmp	r3, r0
 800b096:	d004      	beq.n	800b0a2 <__swbuf_r+0x62>
 800b098:	89a3      	ldrh	r3, [r4, #12]
 800b09a:	07db      	lsls	r3, r3, #31
 800b09c:	d506      	bpl.n	800b0ac <__swbuf_r+0x6c>
 800b09e:	2e0a      	cmp	r6, #10
 800b0a0:	d104      	bne.n	800b0ac <__swbuf_r+0x6c>
 800b0a2:	4621      	mov	r1, r4
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	f000 ffb7 	bl	800c018 <_fflush_r>
 800b0aa:	b988      	cbnz	r0, 800b0d0 <__swbuf_r+0x90>
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b0:	4b0a      	ldr	r3, [pc, #40]	; (800b0dc <__swbuf_r+0x9c>)
 800b0b2:	429c      	cmp	r4, r3
 800b0b4:	d101      	bne.n	800b0ba <__swbuf_r+0x7a>
 800b0b6:	68ac      	ldr	r4, [r5, #8]
 800b0b8:	e7cf      	b.n	800b05a <__swbuf_r+0x1a>
 800b0ba:	4b09      	ldr	r3, [pc, #36]	; (800b0e0 <__swbuf_r+0xa0>)
 800b0bc:	429c      	cmp	r4, r3
 800b0be:	bf08      	it	eq
 800b0c0:	68ec      	ldreq	r4, [r5, #12]
 800b0c2:	e7ca      	b.n	800b05a <__swbuf_r+0x1a>
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	f000 f81e 	bl	800b108 <__swsetup_r>
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	d0cb      	beq.n	800b068 <__swbuf_r+0x28>
 800b0d0:	f04f 37ff 	mov.w	r7, #4294967295
 800b0d4:	e7ea      	b.n	800b0ac <__swbuf_r+0x6c>
 800b0d6:	bf00      	nop
 800b0d8:	0800e678 	.word	0x0800e678
 800b0dc:	0800e698 	.word	0x0800e698
 800b0e0:	0800e658 	.word	0x0800e658

0800b0e4 <_write_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	4d07      	ldr	r5, [pc, #28]	; (800b104 <_write_r+0x20>)
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	4608      	mov	r0, r1
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	602a      	str	r2, [r5, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	f7f9 fb3b 	bl	800476e <_write>
 800b0f8:	1c43      	adds	r3, r0, #1
 800b0fa:	d102      	bne.n	800b102 <_write_r+0x1e>
 800b0fc:	682b      	ldr	r3, [r5, #0]
 800b0fe:	b103      	cbz	r3, 800b102 <_write_r+0x1e>
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	bd38      	pop	{r3, r4, r5, pc}
 800b104:	20001bf4 	.word	0x20001bf4

0800b108 <__swsetup_r>:
 800b108:	4b32      	ldr	r3, [pc, #200]	; (800b1d4 <__swsetup_r+0xcc>)
 800b10a:	b570      	push	{r4, r5, r6, lr}
 800b10c:	681d      	ldr	r5, [r3, #0]
 800b10e:	4606      	mov	r6, r0
 800b110:	460c      	mov	r4, r1
 800b112:	b125      	cbz	r5, 800b11e <__swsetup_r+0x16>
 800b114:	69ab      	ldr	r3, [r5, #24]
 800b116:	b913      	cbnz	r3, 800b11e <__swsetup_r+0x16>
 800b118:	4628      	mov	r0, r5
 800b11a:	f001 f811 	bl	800c140 <__sinit>
 800b11e:	4b2e      	ldr	r3, [pc, #184]	; (800b1d8 <__swsetup_r+0xd0>)
 800b120:	429c      	cmp	r4, r3
 800b122:	d10f      	bne.n	800b144 <__swsetup_r+0x3c>
 800b124:	686c      	ldr	r4, [r5, #4]
 800b126:	89a3      	ldrh	r3, [r4, #12]
 800b128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b12c:	0719      	lsls	r1, r3, #28
 800b12e:	d42c      	bmi.n	800b18a <__swsetup_r+0x82>
 800b130:	06dd      	lsls	r5, r3, #27
 800b132:	d411      	bmi.n	800b158 <__swsetup_r+0x50>
 800b134:	2309      	movs	r3, #9
 800b136:	6033      	str	r3, [r6, #0]
 800b138:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b13c:	81a3      	strh	r3, [r4, #12]
 800b13e:	f04f 30ff 	mov.w	r0, #4294967295
 800b142:	e03e      	b.n	800b1c2 <__swsetup_r+0xba>
 800b144:	4b25      	ldr	r3, [pc, #148]	; (800b1dc <__swsetup_r+0xd4>)
 800b146:	429c      	cmp	r4, r3
 800b148:	d101      	bne.n	800b14e <__swsetup_r+0x46>
 800b14a:	68ac      	ldr	r4, [r5, #8]
 800b14c:	e7eb      	b.n	800b126 <__swsetup_r+0x1e>
 800b14e:	4b24      	ldr	r3, [pc, #144]	; (800b1e0 <__swsetup_r+0xd8>)
 800b150:	429c      	cmp	r4, r3
 800b152:	bf08      	it	eq
 800b154:	68ec      	ldreq	r4, [r5, #12]
 800b156:	e7e6      	b.n	800b126 <__swsetup_r+0x1e>
 800b158:	0758      	lsls	r0, r3, #29
 800b15a:	d512      	bpl.n	800b182 <__swsetup_r+0x7a>
 800b15c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b15e:	b141      	cbz	r1, 800b172 <__swsetup_r+0x6a>
 800b160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b164:	4299      	cmp	r1, r3
 800b166:	d002      	beq.n	800b16e <__swsetup_r+0x66>
 800b168:	4630      	mov	r0, r6
 800b16a:	f7fd fecf 	bl	8008f0c <_free_r>
 800b16e:	2300      	movs	r3, #0
 800b170:	6363      	str	r3, [r4, #52]	; 0x34
 800b172:	89a3      	ldrh	r3, [r4, #12]
 800b174:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b178:	81a3      	strh	r3, [r4, #12]
 800b17a:	2300      	movs	r3, #0
 800b17c:	6063      	str	r3, [r4, #4]
 800b17e:	6923      	ldr	r3, [r4, #16]
 800b180:	6023      	str	r3, [r4, #0]
 800b182:	89a3      	ldrh	r3, [r4, #12]
 800b184:	f043 0308 	orr.w	r3, r3, #8
 800b188:	81a3      	strh	r3, [r4, #12]
 800b18a:	6923      	ldr	r3, [r4, #16]
 800b18c:	b94b      	cbnz	r3, 800b1a2 <__swsetup_r+0x9a>
 800b18e:	89a3      	ldrh	r3, [r4, #12]
 800b190:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b198:	d003      	beq.n	800b1a2 <__swsetup_r+0x9a>
 800b19a:	4621      	mov	r1, r4
 800b19c:	4630      	mov	r0, r6
 800b19e:	f001 fc1b 	bl	800c9d8 <__smakebuf_r>
 800b1a2:	89a0      	ldrh	r0, [r4, #12]
 800b1a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1a8:	f010 0301 	ands.w	r3, r0, #1
 800b1ac:	d00a      	beq.n	800b1c4 <__swsetup_r+0xbc>
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	60a3      	str	r3, [r4, #8]
 800b1b2:	6963      	ldr	r3, [r4, #20]
 800b1b4:	425b      	negs	r3, r3
 800b1b6:	61a3      	str	r3, [r4, #24]
 800b1b8:	6923      	ldr	r3, [r4, #16]
 800b1ba:	b943      	cbnz	r3, 800b1ce <__swsetup_r+0xc6>
 800b1bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b1c0:	d1ba      	bne.n	800b138 <__swsetup_r+0x30>
 800b1c2:	bd70      	pop	{r4, r5, r6, pc}
 800b1c4:	0781      	lsls	r1, r0, #30
 800b1c6:	bf58      	it	pl
 800b1c8:	6963      	ldrpl	r3, [r4, #20]
 800b1ca:	60a3      	str	r3, [r4, #8]
 800b1cc:	e7f4      	b.n	800b1b8 <__swsetup_r+0xb0>
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	e7f7      	b.n	800b1c2 <__swsetup_r+0xba>
 800b1d2:	bf00      	nop
 800b1d4:	20000f38 	.word	0x20000f38
 800b1d8:	0800e678 	.word	0x0800e678
 800b1dc:	0800e698 	.word	0x0800e698
 800b1e0:	0800e658 	.word	0x0800e658

0800b1e4 <abort>:
 800b1e4:	b508      	push	{r3, lr}
 800b1e6:	2006      	movs	r0, #6
 800b1e8:	f002 fec6 	bl	800df78 <raise>
 800b1ec:	2001      	movs	r0, #1
 800b1ee:	f7f9 fa97 	bl	8004720 <_exit>
	...

0800b1f4 <_close_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	4d06      	ldr	r5, [pc, #24]	; (800b210 <_close_r+0x1c>)
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	4608      	mov	r0, r1
 800b1fe:	602b      	str	r3, [r5, #0]
 800b200:	f7f9 fad1 	bl	80047a6 <_close>
 800b204:	1c43      	adds	r3, r0, #1
 800b206:	d102      	bne.n	800b20e <_close_r+0x1a>
 800b208:	682b      	ldr	r3, [r5, #0]
 800b20a:	b103      	cbz	r3, 800b20e <_close_r+0x1a>
 800b20c:	6023      	str	r3, [r4, #0]
 800b20e:	bd38      	pop	{r3, r4, r5, pc}
 800b210:	20001bf4 	.word	0x20001bf4

0800b214 <quorem>:
 800b214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b218:	6903      	ldr	r3, [r0, #16]
 800b21a:	690c      	ldr	r4, [r1, #16]
 800b21c:	42a3      	cmp	r3, r4
 800b21e:	4607      	mov	r7, r0
 800b220:	f2c0 8081 	blt.w	800b326 <quorem+0x112>
 800b224:	3c01      	subs	r4, #1
 800b226:	f101 0814 	add.w	r8, r1, #20
 800b22a:	f100 0514 	add.w	r5, r0, #20
 800b22e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b232:	9301      	str	r3, [sp, #4]
 800b234:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b238:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b23c:	3301      	adds	r3, #1
 800b23e:	429a      	cmp	r2, r3
 800b240:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b244:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b248:	fbb2 f6f3 	udiv	r6, r2, r3
 800b24c:	d331      	bcc.n	800b2b2 <quorem+0x9e>
 800b24e:	f04f 0e00 	mov.w	lr, #0
 800b252:	4640      	mov	r0, r8
 800b254:	46ac      	mov	ip, r5
 800b256:	46f2      	mov	sl, lr
 800b258:	f850 2b04 	ldr.w	r2, [r0], #4
 800b25c:	b293      	uxth	r3, r2
 800b25e:	fb06 e303 	mla	r3, r6, r3, lr
 800b262:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b266:	b29b      	uxth	r3, r3
 800b268:	ebaa 0303 	sub.w	r3, sl, r3
 800b26c:	f8dc a000 	ldr.w	sl, [ip]
 800b270:	0c12      	lsrs	r2, r2, #16
 800b272:	fa13 f38a 	uxtah	r3, r3, sl
 800b276:	fb06 e202 	mla	r2, r6, r2, lr
 800b27a:	9300      	str	r3, [sp, #0]
 800b27c:	9b00      	ldr	r3, [sp, #0]
 800b27e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b282:	b292      	uxth	r2, r2
 800b284:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b288:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b28c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b290:	4581      	cmp	r9, r0
 800b292:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b296:	f84c 3b04 	str.w	r3, [ip], #4
 800b29a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b29e:	d2db      	bcs.n	800b258 <quorem+0x44>
 800b2a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800b2a4:	b92b      	cbnz	r3, 800b2b2 <quorem+0x9e>
 800b2a6:	9b01      	ldr	r3, [sp, #4]
 800b2a8:	3b04      	subs	r3, #4
 800b2aa:	429d      	cmp	r5, r3
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	d32e      	bcc.n	800b30e <quorem+0xfa>
 800b2b0:	613c      	str	r4, [r7, #16]
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	f001 fee2 	bl	800d07c <__mcmp>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	db24      	blt.n	800b306 <quorem+0xf2>
 800b2bc:	3601      	adds	r6, #1
 800b2be:	4628      	mov	r0, r5
 800b2c0:	f04f 0c00 	mov.w	ip, #0
 800b2c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b2c8:	f8d0 e000 	ldr.w	lr, [r0]
 800b2cc:	b293      	uxth	r3, r2
 800b2ce:	ebac 0303 	sub.w	r3, ip, r3
 800b2d2:	0c12      	lsrs	r2, r2, #16
 800b2d4:	fa13 f38e 	uxtah	r3, r3, lr
 800b2d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b2dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2e6:	45c1      	cmp	r9, r8
 800b2e8:	f840 3b04 	str.w	r3, [r0], #4
 800b2ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b2f0:	d2e8      	bcs.n	800b2c4 <quorem+0xb0>
 800b2f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2fa:	b922      	cbnz	r2, 800b306 <quorem+0xf2>
 800b2fc:	3b04      	subs	r3, #4
 800b2fe:	429d      	cmp	r5, r3
 800b300:	461a      	mov	r2, r3
 800b302:	d30a      	bcc.n	800b31a <quorem+0x106>
 800b304:	613c      	str	r4, [r7, #16]
 800b306:	4630      	mov	r0, r6
 800b308:	b003      	add	sp, #12
 800b30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30e:	6812      	ldr	r2, [r2, #0]
 800b310:	3b04      	subs	r3, #4
 800b312:	2a00      	cmp	r2, #0
 800b314:	d1cc      	bne.n	800b2b0 <quorem+0x9c>
 800b316:	3c01      	subs	r4, #1
 800b318:	e7c7      	b.n	800b2aa <quorem+0x96>
 800b31a:	6812      	ldr	r2, [r2, #0]
 800b31c:	3b04      	subs	r3, #4
 800b31e:	2a00      	cmp	r2, #0
 800b320:	d1f0      	bne.n	800b304 <quorem+0xf0>
 800b322:	3c01      	subs	r4, #1
 800b324:	e7eb      	b.n	800b2fe <quorem+0xea>
 800b326:	2000      	movs	r0, #0
 800b328:	e7ee      	b.n	800b308 <quorem+0xf4>
 800b32a:	0000      	movs	r0, r0
 800b32c:	0000      	movs	r0, r0
	...

0800b330 <_dtoa_r>:
 800b330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b334:	ed2d 8b04 	vpush	{d8-d9}
 800b338:	ec57 6b10 	vmov	r6, r7, d0
 800b33c:	b093      	sub	sp, #76	; 0x4c
 800b33e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b340:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b344:	9106      	str	r1, [sp, #24]
 800b346:	ee10 aa10 	vmov	sl, s0
 800b34a:	4604      	mov	r4, r0
 800b34c:	9209      	str	r2, [sp, #36]	; 0x24
 800b34e:	930c      	str	r3, [sp, #48]	; 0x30
 800b350:	46bb      	mov	fp, r7
 800b352:	b975      	cbnz	r5, 800b372 <_dtoa_r+0x42>
 800b354:	2010      	movs	r0, #16
 800b356:	f7fd fdc1 	bl	8008edc <malloc>
 800b35a:	4602      	mov	r2, r0
 800b35c:	6260      	str	r0, [r4, #36]	; 0x24
 800b35e:	b920      	cbnz	r0, 800b36a <_dtoa_r+0x3a>
 800b360:	4ba7      	ldr	r3, [pc, #668]	; (800b600 <_dtoa_r+0x2d0>)
 800b362:	21ea      	movs	r1, #234	; 0xea
 800b364:	48a7      	ldr	r0, [pc, #668]	; (800b604 <_dtoa_r+0x2d4>)
 800b366:	f7fd fd5f 	bl	8008e28 <__assert_func>
 800b36a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b36e:	6005      	str	r5, [r0, #0]
 800b370:	60c5      	str	r5, [r0, #12]
 800b372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b374:	6819      	ldr	r1, [r3, #0]
 800b376:	b151      	cbz	r1, 800b38e <_dtoa_r+0x5e>
 800b378:	685a      	ldr	r2, [r3, #4]
 800b37a:	604a      	str	r2, [r1, #4]
 800b37c:	2301      	movs	r3, #1
 800b37e:	4093      	lsls	r3, r2
 800b380:	608b      	str	r3, [r1, #8]
 800b382:	4620      	mov	r0, r4
 800b384:	f001 fbee 	bl	800cb64 <_Bfree>
 800b388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b38a:	2200      	movs	r2, #0
 800b38c:	601a      	str	r2, [r3, #0]
 800b38e:	1e3b      	subs	r3, r7, #0
 800b390:	bfaa      	itet	ge
 800b392:	2300      	movge	r3, #0
 800b394:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b398:	f8c8 3000 	strge.w	r3, [r8]
 800b39c:	4b9a      	ldr	r3, [pc, #616]	; (800b608 <_dtoa_r+0x2d8>)
 800b39e:	bfbc      	itt	lt
 800b3a0:	2201      	movlt	r2, #1
 800b3a2:	f8c8 2000 	strlt.w	r2, [r8]
 800b3a6:	ea33 030b 	bics.w	r3, r3, fp
 800b3aa:	d11b      	bne.n	800b3e4 <_dtoa_r+0xb4>
 800b3ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800b3b2:	6013      	str	r3, [r2, #0]
 800b3b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3b8:	4333      	orrs	r3, r6
 800b3ba:	f000 8592 	beq.w	800bee2 <_dtoa_r+0xbb2>
 800b3be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3c0:	b963      	cbnz	r3, 800b3dc <_dtoa_r+0xac>
 800b3c2:	4b92      	ldr	r3, [pc, #584]	; (800b60c <_dtoa_r+0x2dc>)
 800b3c4:	e022      	b.n	800b40c <_dtoa_r+0xdc>
 800b3c6:	4b92      	ldr	r3, [pc, #584]	; (800b610 <_dtoa_r+0x2e0>)
 800b3c8:	9301      	str	r3, [sp, #4]
 800b3ca:	3308      	adds	r3, #8
 800b3cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b3ce:	6013      	str	r3, [r2, #0]
 800b3d0:	9801      	ldr	r0, [sp, #4]
 800b3d2:	b013      	add	sp, #76	; 0x4c
 800b3d4:	ecbd 8b04 	vpop	{d8-d9}
 800b3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3dc:	4b8b      	ldr	r3, [pc, #556]	; (800b60c <_dtoa_r+0x2dc>)
 800b3de:	9301      	str	r3, [sp, #4]
 800b3e0:	3303      	adds	r3, #3
 800b3e2:	e7f3      	b.n	800b3cc <_dtoa_r+0x9c>
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	4650      	mov	r0, sl
 800b3ea:	4659      	mov	r1, fp
 800b3ec:	f7f5 fb7c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b3f0:	ec4b ab19 	vmov	d9, sl, fp
 800b3f4:	4680      	mov	r8, r0
 800b3f6:	b158      	cbz	r0, 800b410 <_dtoa_r+0xe0>
 800b3f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	6013      	str	r3, [r2, #0]
 800b3fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b400:	2b00      	cmp	r3, #0
 800b402:	f000 856b 	beq.w	800bedc <_dtoa_r+0xbac>
 800b406:	4883      	ldr	r0, [pc, #524]	; (800b614 <_dtoa_r+0x2e4>)
 800b408:	6018      	str	r0, [r3, #0]
 800b40a:	1e43      	subs	r3, r0, #1
 800b40c:	9301      	str	r3, [sp, #4]
 800b40e:	e7df      	b.n	800b3d0 <_dtoa_r+0xa0>
 800b410:	ec4b ab10 	vmov	d0, sl, fp
 800b414:	aa10      	add	r2, sp, #64	; 0x40
 800b416:	a911      	add	r1, sp, #68	; 0x44
 800b418:	4620      	mov	r0, r4
 800b41a:	f001 ff51 	bl	800d2c0 <__d2b>
 800b41e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b422:	ee08 0a10 	vmov	s16, r0
 800b426:	2d00      	cmp	r5, #0
 800b428:	f000 8084 	beq.w	800b534 <_dtoa_r+0x204>
 800b42c:	ee19 3a90 	vmov	r3, s19
 800b430:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b434:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b438:	4656      	mov	r6, sl
 800b43a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b43e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b442:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b446:	4b74      	ldr	r3, [pc, #464]	; (800b618 <_dtoa_r+0x2e8>)
 800b448:	2200      	movs	r2, #0
 800b44a:	4630      	mov	r0, r6
 800b44c:	4639      	mov	r1, r7
 800b44e:	f7f4 ff2b 	bl	80002a8 <__aeabi_dsub>
 800b452:	a365      	add	r3, pc, #404	; (adr r3, 800b5e8 <_dtoa_r+0x2b8>)
 800b454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b458:	f7f5 f8de 	bl	8000618 <__aeabi_dmul>
 800b45c:	a364      	add	r3, pc, #400	; (adr r3, 800b5f0 <_dtoa_r+0x2c0>)
 800b45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b462:	f7f4 ff23 	bl	80002ac <__adddf3>
 800b466:	4606      	mov	r6, r0
 800b468:	4628      	mov	r0, r5
 800b46a:	460f      	mov	r7, r1
 800b46c:	f7f5 f86a 	bl	8000544 <__aeabi_i2d>
 800b470:	a361      	add	r3, pc, #388	; (adr r3, 800b5f8 <_dtoa_r+0x2c8>)
 800b472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b476:	f7f5 f8cf 	bl	8000618 <__aeabi_dmul>
 800b47a:	4602      	mov	r2, r0
 800b47c:	460b      	mov	r3, r1
 800b47e:	4630      	mov	r0, r6
 800b480:	4639      	mov	r1, r7
 800b482:	f7f4 ff13 	bl	80002ac <__adddf3>
 800b486:	4606      	mov	r6, r0
 800b488:	460f      	mov	r7, r1
 800b48a:	f7f5 fb75 	bl	8000b78 <__aeabi_d2iz>
 800b48e:	2200      	movs	r2, #0
 800b490:	9000      	str	r0, [sp, #0]
 800b492:	2300      	movs	r3, #0
 800b494:	4630      	mov	r0, r6
 800b496:	4639      	mov	r1, r7
 800b498:	f7f5 fb30 	bl	8000afc <__aeabi_dcmplt>
 800b49c:	b150      	cbz	r0, 800b4b4 <_dtoa_r+0x184>
 800b49e:	9800      	ldr	r0, [sp, #0]
 800b4a0:	f7f5 f850 	bl	8000544 <__aeabi_i2d>
 800b4a4:	4632      	mov	r2, r6
 800b4a6:	463b      	mov	r3, r7
 800b4a8:	f7f5 fb1e 	bl	8000ae8 <__aeabi_dcmpeq>
 800b4ac:	b910      	cbnz	r0, 800b4b4 <_dtoa_r+0x184>
 800b4ae:	9b00      	ldr	r3, [sp, #0]
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	9b00      	ldr	r3, [sp, #0]
 800b4b6:	2b16      	cmp	r3, #22
 800b4b8:	d85a      	bhi.n	800b570 <_dtoa_r+0x240>
 800b4ba:	9a00      	ldr	r2, [sp, #0]
 800b4bc:	4b57      	ldr	r3, [pc, #348]	; (800b61c <_dtoa_r+0x2ec>)
 800b4be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c6:	ec51 0b19 	vmov	r0, r1, d9
 800b4ca:	f7f5 fb17 	bl	8000afc <__aeabi_dcmplt>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d050      	beq.n	800b574 <_dtoa_r+0x244>
 800b4d2:	9b00      	ldr	r3, [sp, #0]
 800b4d4:	3b01      	subs	r3, #1
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	2300      	movs	r3, #0
 800b4da:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4de:	1b5d      	subs	r5, r3, r5
 800b4e0:	1e6b      	subs	r3, r5, #1
 800b4e2:	9305      	str	r3, [sp, #20]
 800b4e4:	bf45      	ittet	mi
 800b4e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b4ea:	9304      	strmi	r3, [sp, #16]
 800b4ec:	2300      	movpl	r3, #0
 800b4ee:	2300      	movmi	r3, #0
 800b4f0:	bf4c      	ite	mi
 800b4f2:	9305      	strmi	r3, [sp, #20]
 800b4f4:	9304      	strpl	r3, [sp, #16]
 800b4f6:	9b00      	ldr	r3, [sp, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	db3d      	blt.n	800b578 <_dtoa_r+0x248>
 800b4fc:	9b05      	ldr	r3, [sp, #20]
 800b4fe:	9a00      	ldr	r2, [sp, #0]
 800b500:	920a      	str	r2, [sp, #40]	; 0x28
 800b502:	4413      	add	r3, r2
 800b504:	9305      	str	r3, [sp, #20]
 800b506:	2300      	movs	r3, #0
 800b508:	9307      	str	r3, [sp, #28]
 800b50a:	9b06      	ldr	r3, [sp, #24]
 800b50c:	2b09      	cmp	r3, #9
 800b50e:	f200 8089 	bhi.w	800b624 <_dtoa_r+0x2f4>
 800b512:	2b05      	cmp	r3, #5
 800b514:	bfc4      	itt	gt
 800b516:	3b04      	subgt	r3, #4
 800b518:	9306      	strgt	r3, [sp, #24]
 800b51a:	9b06      	ldr	r3, [sp, #24]
 800b51c:	f1a3 0302 	sub.w	r3, r3, #2
 800b520:	bfcc      	ite	gt
 800b522:	2500      	movgt	r5, #0
 800b524:	2501      	movle	r5, #1
 800b526:	2b03      	cmp	r3, #3
 800b528:	f200 8087 	bhi.w	800b63a <_dtoa_r+0x30a>
 800b52c:	e8df f003 	tbb	[pc, r3]
 800b530:	59383a2d 	.word	0x59383a2d
 800b534:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b538:	441d      	add	r5, r3
 800b53a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b53e:	2b20      	cmp	r3, #32
 800b540:	bfc1      	itttt	gt
 800b542:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b546:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b54a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b54e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b552:	bfda      	itte	le
 800b554:	f1c3 0320 	rsble	r3, r3, #32
 800b558:	fa06 f003 	lslle.w	r0, r6, r3
 800b55c:	4318      	orrgt	r0, r3
 800b55e:	f7f4 ffe1 	bl	8000524 <__aeabi_ui2d>
 800b562:	2301      	movs	r3, #1
 800b564:	4606      	mov	r6, r0
 800b566:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b56a:	3d01      	subs	r5, #1
 800b56c:	930e      	str	r3, [sp, #56]	; 0x38
 800b56e:	e76a      	b.n	800b446 <_dtoa_r+0x116>
 800b570:	2301      	movs	r3, #1
 800b572:	e7b2      	b.n	800b4da <_dtoa_r+0x1aa>
 800b574:	900b      	str	r0, [sp, #44]	; 0x2c
 800b576:	e7b1      	b.n	800b4dc <_dtoa_r+0x1ac>
 800b578:	9b04      	ldr	r3, [sp, #16]
 800b57a:	9a00      	ldr	r2, [sp, #0]
 800b57c:	1a9b      	subs	r3, r3, r2
 800b57e:	9304      	str	r3, [sp, #16]
 800b580:	4253      	negs	r3, r2
 800b582:	9307      	str	r3, [sp, #28]
 800b584:	2300      	movs	r3, #0
 800b586:	930a      	str	r3, [sp, #40]	; 0x28
 800b588:	e7bf      	b.n	800b50a <_dtoa_r+0x1da>
 800b58a:	2300      	movs	r3, #0
 800b58c:	9308      	str	r3, [sp, #32]
 800b58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b590:	2b00      	cmp	r3, #0
 800b592:	dc55      	bgt.n	800b640 <_dtoa_r+0x310>
 800b594:	2301      	movs	r3, #1
 800b596:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b59a:	461a      	mov	r2, r3
 800b59c:	9209      	str	r2, [sp, #36]	; 0x24
 800b59e:	e00c      	b.n	800b5ba <_dtoa_r+0x28a>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e7f3      	b.n	800b58c <_dtoa_r+0x25c>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5a8:	9308      	str	r3, [sp, #32]
 800b5aa:	9b00      	ldr	r3, [sp, #0]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	9302      	str	r3, [sp, #8]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	9303      	str	r3, [sp, #12]
 800b5b6:	bfb8      	it	lt
 800b5b8:	2301      	movlt	r3, #1
 800b5ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b5bc:	2200      	movs	r2, #0
 800b5be:	6042      	str	r2, [r0, #4]
 800b5c0:	2204      	movs	r2, #4
 800b5c2:	f102 0614 	add.w	r6, r2, #20
 800b5c6:	429e      	cmp	r6, r3
 800b5c8:	6841      	ldr	r1, [r0, #4]
 800b5ca:	d93d      	bls.n	800b648 <_dtoa_r+0x318>
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f001 fa89 	bl	800cae4 <_Balloc>
 800b5d2:	9001      	str	r0, [sp, #4]
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	d13b      	bne.n	800b650 <_dtoa_r+0x320>
 800b5d8:	4b11      	ldr	r3, [pc, #68]	; (800b620 <_dtoa_r+0x2f0>)
 800b5da:	4602      	mov	r2, r0
 800b5dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b5e0:	e6c0      	b.n	800b364 <_dtoa_r+0x34>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e7df      	b.n	800b5a6 <_dtoa_r+0x276>
 800b5e6:	bf00      	nop
 800b5e8:	636f4361 	.word	0x636f4361
 800b5ec:	3fd287a7 	.word	0x3fd287a7
 800b5f0:	8b60c8b3 	.word	0x8b60c8b3
 800b5f4:	3fc68a28 	.word	0x3fc68a28
 800b5f8:	509f79fb 	.word	0x509f79fb
 800b5fc:	3fd34413 	.word	0x3fd34413
 800b600:	0800e468 	.word	0x0800e468
 800b604:	0800e5ea 	.word	0x0800e5ea
 800b608:	7ff00000 	.word	0x7ff00000
 800b60c:	0800e5e6 	.word	0x0800e5e6
 800b610:	0800e5dd 	.word	0x0800e5dd
 800b614:	0800e891 	.word	0x0800e891
 800b618:	3ff80000 	.word	0x3ff80000
 800b61c:	0800e7b8 	.word	0x0800e7b8
 800b620:	0800e645 	.word	0x0800e645
 800b624:	2501      	movs	r5, #1
 800b626:	2300      	movs	r3, #0
 800b628:	9306      	str	r3, [sp, #24]
 800b62a:	9508      	str	r5, [sp, #32]
 800b62c:	f04f 33ff 	mov.w	r3, #4294967295
 800b630:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b634:	2200      	movs	r2, #0
 800b636:	2312      	movs	r3, #18
 800b638:	e7b0      	b.n	800b59c <_dtoa_r+0x26c>
 800b63a:	2301      	movs	r3, #1
 800b63c:	9308      	str	r3, [sp, #32]
 800b63e:	e7f5      	b.n	800b62c <_dtoa_r+0x2fc>
 800b640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b642:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b646:	e7b8      	b.n	800b5ba <_dtoa_r+0x28a>
 800b648:	3101      	adds	r1, #1
 800b64a:	6041      	str	r1, [r0, #4]
 800b64c:	0052      	lsls	r2, r2, #1
 800b64e:	e7b8      	b.n	800b5c2 <_dtoa_r+0x292>
 800b650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b652:	9a01      	ldr	r2, [sp, #4]
 800b654:	601a      	str	r2, [r3, #0]
 800b656:	9b03      	ldr	r3, [sp, #12]
 800b658:	2b0e      	cmp	r3, #14
 800b65a:	f200 809d 	bhi.w	800b798 <_dtoa_r+0x468>
 800b65e:	2d00      	cmp	r5, #0
 800b660:	f000 809a 	beq.w	800b798 <_dtoa_r+0x468>
 800b664:	9b00      	ldr	r3, [sp, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	dd32      	ble.n	800b6d0 <_dtoa_r+0x3a0>
 800b66a:	4ab7      	ldr	r2, [pc, #732]	; (800b948 <_dtoa_r+0x618>)
 800b66c:	f003 030f 	and.w	r3, r3, #15
 800b670:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b674:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b678:	9b00      	ldr	r3, [sp, #0]
 800b67a:	05d8      	lsls	r0, r3, #23
 800b67c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b680:	d516      	bpl.n	800b6b0 <_dtoa_r+0x380>
 800b682:	4bb2      	ldr	r3, [pc, #712]	; (800b94c <_dtoa_r+0x61c>)
 800b684:	ec51 0b19 	vmov	r0, r1, d9
 800b688:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b68c:	f7f5 f8ee 	bl	800086c <__aeabi_ddiv>
 800b690:	f007 070f 	and.w	r7, r7, #15
 800b694:	4682      	mov	sl, r0
 800b696:	468b      	mov	fp, r1
 800b698:	2503      	movs	r5, #3
 800b69a:	4eac      	ldr	r6, [pc, #688]	; (800b94c <_dtoa_r+0x61c>)
 800b69c:	b957      	cbnz	r7, 800b6b4 <_dtoa_r+0x384>
 800b69e:	4642      	mov	r2, r8
 800b6a0:	464b      	mov	r3, r9
 800b6a2:	4650      	mov	r0, sl
 800b6a4:	4659      	mov	r1, fp
 800b6a6:	f7f5 f8e1 	bl	800086c <__aeabi_ddiv>
 800b6aa:	4682      	mov	sl, r0
 800b6ac:	468b      	mov	fp, r1
 800b6ae:	e028      	b.n	800b702 <_dtoa_r+0x3d2>
 800b6b0:	2502      	movs	r5, #2
 800b6b2:	e7f2      	b.n	800b69a <_dtoa_r+0x36a>
 800b6b4:	07f9      	lsls	r1, r7, #31
 800b6b6:	d508      	bpl.n	800b6ca <_dtoa_r+0x39a>
 800b6b8:	4640      	mov	r0, r8
 800b6ba:	4649      	mov	r1, r9
 800b6bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b6c0:	f7f4 ffaa 	bl	8000618 <__aeabi_dmul>
 800b6c4:	3501      	adds	r5, #1
 800b6c6:	4680      	mov	r8, r0
 800b6c8:	4689      	mov	r9, r1
 800b6ca:	107f      	asrs	r7, r7, #1
 800b6cc:	3608      	adds	r6, #8
 800b6ce:	e7e5      	b.n	800b69c <_dtoa_r+0x36c>
 800b6d0:	f000 809b 	beq.w	800b80a <_dtoa_r+0x4da>
 800b6d4:	9b00      	ldr	r3, [sp, #0]
 800b6d6:	4f9d      	ldr	r7, [pc, #628]	; (800b94c <_dtoa_r+0x61c>)
 800b6d8:	425e      	negs	r6, r3
 800b6da:	4b9b      	ldr	r3, [pc, #620]	; (800b948 <_dtoa_r+0x618>)
 800b6dc:	f006 020f 	and.w	r2, r6, #15
 800b6e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	ec51 0b19 	vmov	r0, r1, d9
 800b6ec:	f7f4 ff94 	bl	8000618 <__aeabi_dmul>
 800b6f0:	1136      	asrs	r6, r6, #4
 800b6f2:	4682      	mov	sl, r0
 800b6f4:	468b      	mov	fp, r1
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	2502      	movs	r5, #2
 800b6fa:	2e00      	cmp	r6, #0
 800b6fc:	d17a      	bne.n	800b7f4 <_dtoa_r+0x4c4>
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1d3      	bne.n	800b6aa <_dtoa_r+0x37a>
 800b702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b704:	2b00      	cmp	r3, #0
 800b706:	f000 8082 	beq.w	800b80e <_dtoa_r+0x4de>
 800b70a:	4b91      	ldr	r3, [pc, #580]	; (800b950 <_dtoa_r+0x620>)
 800b70c:	2200      	movs	r2, #0
 800b70e:	4650      	mov	r0, sl
 800b710:	4659      	mov	r1, fp
 800b712:	f7f5 f9f3 	bl	8000afc <__aeabi_dcmplt>
 800b716:	2800      	cmp	r0, #0
 800b718:	d079      	beq.n	800b80e <_dtoa_r+0x4de>
 800b71a:	9b03      	ldr	r3, [sp, #12]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d076      	beq.n	800b80e <_dtoa_r+0x4de>
 800b720:	9b02      	ldr	r3, [sp, #8]
 800b722:	2b00      	cmp	r3, #0
 800b724:	dd36      	ble.n	800b794 <_dtoa_r+0x464>
 800b726:	9b00      	ldr	r3, [sp, #0]
 800b728:	4650      	mov	r0, sl
 800b72a:	4659      	mov	r1, fp
 800b72c:	1e5f      	subs	r7, r3, #1
 800b72e:	2200      	movs	r2, #0
 800b730:	4b88      	ldr	r3, [pc, #544]	; (800b954 <_dtoa_r+0x624>)
 800b732:	f7f4 ff71 	bl	8000618 <__aeabi_dmul>
 800b736:	9e02      	ldr	r6, [sp, #8]
 800b738:	4682      	mov	sl, r0
 800b73a:	468b      	mov	fp, r1
 800b73c:	3501      	adds	r5, #1
 800b73e:	4628      	mov	r0, r5
 800b740:	f7f4 ff00 	bl	8000544 <__aeabi_i2d>
 800b744:	4652      	mov	r2, sl
 800b746:	465b      	mov	r3, fp
 800b748:	f7f4 ff66 	bl	8000618 <__aeabi_dmul>
 800b74c:	4b82      	ldr	r3, [pc, #520]	; (800b958 <_dtoa_r+0x628>)
 800b74e:	2200      	movs	r2, #0
 800b750:	f7f4 fdac 	bl	80002ac <__adddf3>
 800b754:	46d0      	mov	r8, sl
 800b756:	46d9      	mov	r9, fp
 800b758:	4682      	mov	sl, r0
 800b75a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b75e:	2e00      	cmp	r6, #0
 800b760:	d158      	bne.n	800b814 <_dtoa_r+0x4e4>
 800b762:	4b7e      	ldr	r3, [pc, #504]	; (800b95c <_dtoa_r+0x62c>)
 800b764:	2200      	movs	r2, #0
 800b766:	4640      	mov	r0, r8
 800b768:	4649      	mov	r1, r9
 800b76a:	f7f4 fd9d 	bl	80002a8 <__aeabi_dsub>
 800b76e:	4652      	mov	r2, sl
 800b770:	465b      	mov	r3, fp
 800b772:	4680      	mov	r8, r0
 800b774:	4689      	mov	r9, r1
 800b776:	f7f5 f9df 	bl	8000b38 <__aeabi_dcmpgt>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	f040 8295 	bne.w	800bcaa <_dtoa_r+0x97a>
 800b780:	4652      	mov	r2, sl
 800b782:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b786:	4640      	mov	r0, r8
 800b788:	4649      	mov	r1, r9
 800b78a:	f7f5 f9b7 	bl	8000afc <__aeabi_dcmplt>
 800b78e:	2800      	cmp	r0, #0
 800b790:	f040 8289 	bne.w	800bca6 <_dtoa_r+0x976>
 800b794:	ec5b ab19 	vmov	sl, fp, d9
 800b798:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f2c0 8148 	blt.w	800ba30 <_dtoa_r+0x700>
 800b7a0:	9a00      	ldr	r2, [sp, #0]
 800b7a2:	2a0e      	cmp	r2, #14
 800b7a4:	f300 8144 	bgt.w	800ba30 <_dtoa_r+0x700>
 800b7a8:	4b67      	ldr	r3, [pc, #412]	; (800b948 <_dtoa_r+0x618>)
 800b7aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	f280 80d5 	bge.w	800b964 <_dtoa_r+0x634>
 800b7ba:	9b03      	ldr	r3, [sp, #12]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f300 80d1 	bgt.w	800b964 <_dtoa_r+0x634>
 800b7c2:	f040 826f 	bne.w	800bca4 <_dtoa_r+0x974>
 800b7c6:	4b65      	ldr	r3, [pc, #404]	; (800b95c <_dtoa_r+0x62c>)
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	4640      	mov	r0, r8
 800b7cc:	4649      	mov	r1, r9
 800b7ce:	f7f4 ff23 	bl	8000618 <__aeabi_dmul>
 800b7d2:	4652      	mov	r2, sl
 800b7d4:	465b      	mov	r3, fp
 800b7d6:	f7f5 f9a5 	bl	8000b24 <__aeabi_dcmpge>
 800b7da:	9e03      	ldr	r6, [sp, #12]
 800b7dc:	4637      	mov	r7, r6
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	f040 8245 	bne.w	800bc6e <_dtoa_r+0x93e>
 800b7e4:	9d01      	ldr	r5, [sp, #4]
 800b7e6:	2331      	movs	r3, #49	; 0x31
 800b7e8:	f805 3b01 	strb.w	r3, [r5], #1
 800b7ec:	9b00      	ldr	r3, [sp, #0]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	e240      	b.n	800bc76 <_dtoa_r+0x946>
 800b7f4:	07f2      	lsls	r2, r6, #31
 800b7f6:	d505      	bpl.n	800b804 <_dtoa_r+0x4d4>
 800b7f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7fc:	f7f4 ff0c 	bl	8000618 <__aeabi_dmul>
 800b800:	3501      	adds	r5, #1
 800b802:	2301      	movs	r3, #1
 800b804:	1076      	asrs	r6, r6, #1
 800b806:	3708      	adds	r7, #8
 800b808:	e777      	b.n	800b6fa <_dtoa_r+0x3ca>
 800b80a:	2502      	movs	r5, #2
 800b80c:	e779      	b.n	800b702 <_dtoa_r+0x3d2>
 800b80e:	9f00      	ldr	r7, [sp, #0]
 800b810:	9e03      	ldr	r6, [sp, #12]
 800b812:	e794      	b.n	800b73e <_dtoa_r+0x40e>
 800b814:	9901      	ldr	r1, [sp, #4]
 800b816:	4b4c      	ldr	r3, [pc, #304]	; (800b948 <_dtoa_r+0x618>)
 800b818:	4431      	add	r1, r6
 800b81a:	910d      	str	r1, [sp, #52]	; 0x34
 800b81c:	9908      	ldr	r1, [sp, #32]
 800b81e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b822:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b826:	2900      	cmp	r1, #0
 800b828:	d043      	beq.n	800b8b2 <_dtoa_r+0x582>
 800b82a:	494d      	ldr	r1, [pc, #308]	; (800b960 <_dtoa_r+0x630>)
 800b82c:	2000      	movs	r0, #0
 800b82e:	f7f5 f81d 	bl	800086c <__aeabi_ddiv>
 800b832:	4652      	mov	r2, sl
 800b834:	465b      	mov	r3, fp
 800b836:	f7f4 fd37 	bl	80002a8 <__aeabi_dsub>
 800b83a:	9d01      	ldr	r5, [sp, #4]
 800b83c:	4682      	mov	sl, r0
 800b83e:	468b      	mov	fp, r1
 800b840:	4649      	mov	r1, r9
 800b842:	4640      	mov	r0, r8
 800b844:	f7f5 f998 	bl	8000b78 <__aeabi_d2iz>
 800b848:	4606      	mov	r6, r0
 800b84a:	f7f4 fe7b 	bl	8000544 <__aeabi_i2d>
 800b84e:	4602      	mov	r2, r0
 800b850:	460b      	mov	r3, r1
 800b852:	4640      	mov	r0, r8
 800b854:	4649      	mov	r1, r9
 800b856:	f7f4 fd27 	bl	80002a8 <__aeabi_dsub>
 800b85a:	3630      	adds	r6, #48	; 0x30
 800b85c:	f805 6b01 	strb.w	r6, [r5], #1
 800b860:	4652      	mov	r2, sl
 800b862:	465b      	mov	r3, fp
 800b864:	4680      	mov	r8, r0
 800b866:	4689      	mov	r9, r1
 800b868:	f7f5 f948 	bl	8000afc <__aeabi_dcmplt>
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d163      	bne.n	800b938 <_dtoa_r+0x608>
 800b870:	4642      	mov	r2, r8
 800b872:	464b      	mov	r3, r9
 800b874:	4936      	ldr	r1, [pc, #216]	; (800b950 <_dtoa_r+0x620>)
 800b876:	2000      	movs	r0, #0
 800b878:	f7f4 fd16 	bl	80002a8 <__aeabi_dsub>
 800b87c:	4652      	mov	r2, sl
 800b87e:	465b      	mov	r3, fp
 800b880:	f7f5 f93c 	bl	8000afc <__aeabi_dcmplt>
 800b884:	2800      	cmp	r0, #0
 800b886:	f040 80b5 	bne.w	800b9f4 <_dtoa_r+0x6c4>
 800b88a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b88c:	429d      	cmp	r5, r3
 800b88e:	d081      	beq.n	800b794 <_dtoa_r+0x464>
 800b890:	4b30      	ldr	r3, [pc, #192]	; (800b954 <_dtoa_r+0x624>)
 800b892:	2200      	movs	r2, #0
 800b894:	4650      	mov	r0, sl
 800b896:	4659      	mov	r1, fp
 800b898:	f7f4 febe 	bl	8000618 <__aeabi_dmul>
 800b89c:	4b2d      	ldr	r3, [pc, #180]	; (800b954 <_dtoa_r+0x624>)
 800b89e:	4682      	mov	sl, r0
 800b8a0:	468b      	mov	fp, r1
 800b8a2:	4640      	mov	r0, r8
 800b8a4:	4649      	mov	r1, r9
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f7f4 feb6 	bl	8000618 <__aeabi_dmul>
 800b8ac:	4680      	mov	r8, r0
 800b8ae:	4689      	mov	r9, r1
 800b8b0:	e7c6      	b.n	800b840 <_dtoa_r+0x510>
 800b8b2:	4650      	mov	r0, sl
 800b8b4:	4659      	mov	r1, fp
 800b8b6:	f7f4 feaf 	bl	8000618 <__aeabi_dmul>
 800b8ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8bc:	9d01      	ldr	r5, [sp, #4]
 800b8be:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8c0:	4682      	mov	sl, r0
 800b8c2:	468b      	mov	fp, r1
 800b8c4:	4649      	mov	r1, r9
 800b8c6:	4640      	mov	r0, r8
 800b8c8:	f7f5 f956 	bl	8000b78 <__aeabi_d2iz>
 800b8cc:	4606      	mov	r6, r0
 800b8ce:	f7f4 fe39 	bl	8000544 <__aeabi_i2d>
 800b8d2:	3630      	adds	r6, #48	; 0x30
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	4640      	mov	r0, r8
 800b8da:	4649      	mov	r1, r9
 800b8dc:	f7f4 fce4 	bl	80002a8 <__aeabi_dsub>
 800b8e0:	f805 6b01 	strb.w	r6, [r5], #1
 800b8e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8e6:	429d      	cmp	r5, r3
 800b8e8:	4680      	mov	r8, r0
 800b8ea:	4689      	mov	r9, r1
 800b8ec:	f04f 0200 	mov.w	r2, #0
 800b8f0:	d124      	bne.n	800b93c <_dtoa_r+0x60c>
 800b8f2:	4b1b      	ldr	r3, [pc, #108]	; (800b960 <_dtoa_r+0x630>)
 800b8f4:	4650      	mov	r0, sl
 800b8f6:	4659      	mov	r1, fp
 800b8f8:	f7f4 fcd8 	bl	80002ac <__adddf3>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	460b      	mov	r3, r1
 800b900:	4640      	mov	r0, r8
 800b902:	4649      	mov	r1, r9
 800b904:	f7f5 f918 	bl	8000b38 <__aeabi_dcmpgt>
 800b908:	2800      	cmp	r0, #0
 800b90a:	d173      	bne.n	800b9f4 <_dtoa_r+0x6c4>
 800b90c:	4652      	mov	r2, sl
 800b90e:	465b      	mov	r3, fp
 800b910:	4913      	ldr	r1, [pc, #76]	; (800b960 <_dtoa_r+0x630>)
 800b912:	2000      	movs	r0, #0
 800b914:	f7f4 fcc8 	bl	80002a8 <__aeabi_dsub>
 800b918:	4602      	mov	r2, r0
 800b91a:	460b      	mov	r3, r1
 800b91c:	4640      	mov	r0, r8
 800b91e:	4649      	mov	r1, r9
 800b920:	f7f5 f8ec 	bl	8000afc <__aeabi_dcmplt>
 800b924:	2800      	cmp	r0, #0
 800b926:	f43f af35 	beq.w	800b794 <_dtoa_r+0x464>
 800b92a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b92c:	1e6b      	subs	r3, r5, #1
 800b92e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b930:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b934:	2b30      	cmp	r3, #48	; 0x30
 800b936:	d0f8      	beq.n	800b92a <_dtoa_r+0x5fa>
 800b938:	9700      	str	r7, [sp, #0]
 800b93a:	e049      	b.n	800b9d0 <_dtoa_r+0x6a0>
 800b93c:	4b05      	ldr	r3, [pc, #20]	; (800b954 <_dtoa_r+0x624>)
 800b93e:	f7f4 fe6b 	bl	8000618 <__aeabi_dmul>
 800b942:	4680      	mov	r8, r0
 800b944:	4689      	mov	r9, r1
 800b946:	e7bd      	b.n	800b8c4 <_dtoa_r+0x594>
 800b948:	0800e7b8 	.word	0x0800e7b8
 800b94c:	0800e790 	.word	0x0800e790
 800b950:	3ff00000 	.word	0x3ff00000
 800b954:	40240000 	.word	0x40240000
 800b958:	401c0000 	.word	0x401c0000
 800b95c:	40140000 	.word	0x40140000
 800b960:	3fe00000 	.word	0x3fe00000
 800b964:	9d01      	ldr	r5, [sp, #4]
 800b966:	4656      	mov	r6, sl
 800b968:	465f      	mov	r7, fp
 800b96a:	4642      	mov	r2, r8
 800b96c:	464b      	mov	r3, r9
 800b96e:	4630      	mov	r0, r6
 800b970:	4639      	mov	r1, r7
 800b972:	f7f4 ff7b 	bl	800086c <__aeabi_ddiv>
 800b976:	f7f5 f8ff 	bl	8000b78 <__aeabi_d2iz>
 800b97a:	4682      	mov	sl, r0
 800b97c:	f7f4 fde2 	bl	8000544 <__aeabi_i2d>
 800b980:	4642      	mov	r2, r8
 800b982:	464b      	mov	r3, r9
 800b984:	f7f4 fe48 	bl	8000618 <__aeabi_dmul>
 800b988:	4602      	mov	r2, r0
 800b98a:	460b      	mov	r3, r1
 800b98c:	4630      	mov	r0, r6
 800b98e:	4639      	mov	r1, r7
 800b990:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b994:	f7f4 fc88 	bl	80002a8 <__aeabi_dsub>
 800b998:	f805 6b01 	strb.w	r6, [r5], #1
 800b99c:	9e01      	ldr	r6, [sp, #4]
 800b99e:	9f03      	ldr	r7, [sp, #12]
 800b9a0:	1bae      	subs	r6, r5, r6
 800b9a2:	42b7      	cmp	r7, r6
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	d135      	bne.n	800ba16 <_dtoa_r+0x6e6>
 800b9aa:	f7f4 fc7f 	bl	80002ac <__adddf3>
 800b9ae:	4642      	mov	r2, r8
 800b9b0:	464b      	mov	r3, r9
 800b9b2:	4606      	mov	r6, r0
 800b9b4:	460f      	mov	r7, r1
 800b9b6:	f7f5 f8bf 	bl	8000b38 <__aeabi_dcmpgt>
 800b9ba:	b9d0      	cbnz	r0, 800b9f2 <_dtoa_r+0x6c2>
 800b9bc:	4642      	mov	r2, r8
 800b9be:	464b      	mov	r3, r9
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	4639      	mov	r1, r7
 800b9c4:	f7f5 f890 	bl	8000ae8 <__aeabi_dcmpeq>
 800b9c8:	b110      	cbz	r0, 800b9d0 <_dtoa_r+0x6a0>
 800b9ca:	f01a 0f01 	tst.w	sl, #1
 800b9ce:	d110      	bne.n	800b9f2 <_dtoa_r+0x6c2>
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	ee18 1a10 	vmov	r1, s16
 800b9d6:	f001 f8c5 	bl	800cb64 <_Bfree>
 800b9da:	2300      	movs	r3, #0
 800b9dc:	9800      	ldr	r0, [sp, #0]
 800b9de:	702b      	strb	r3, [r5, #0]
 800b9e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9e2:	3001      	adds	r0, #1
 800b9e4:	6018      	str	r0, [r3, #0]
 800b9e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f43f acf1 	beq.w	800b3d0 <_dtoa_r+0xa0>
 800b9ee:	601d      	str	r5, [r3, #0]
 800b9f0:	e4ee      	b.n	800b3d0 <_dtoa_r+0xa0>
 800b9f2:	9f00      	ldr	r7, [sp, #0]
 800b9f4:	462b      	mov	r3, r5
 800b9f6:	461d      	mov	r5, r3
 800b9f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9fc:	2a39      	cmp	r2, #57	; 0x39
 800b9fe:	d106      	bne.n	800ba0e <_dtoa_r+0x6de>
 800ba00:	9a01      	ldr	r2, [sp, #4]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d1f7      	bne.n	800b9f6 <_dtoa_r+0x6c6>
 800ba06:	9901      	ldr	r1, [sp, #4]
 800ba08:	2230      	movs	r2, #48	; 0x30
 800ba0a:	3701      	adds	r7, #1
 800ba0c:	700a      	strb	r2, [r1, #0]
 800ba0e:	781a      	ldrb	r2, [r3, #0]
 800ba10:	3201      	adds	r2, #1
 800ba12:	701a      	strb	r2, [r3, #0]
 800ba14:	e790      	b.n	800b938 <_dtoa_r+0x608>
 800ba16:	4ba6      	ldr	r3, [pc, #664]	; (800bcb0 <_dtoa_r+0x980>)
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f7f4 fdfd 	bl	8000618 <__aeabi_dmul>
 800ba1e:	2200      	movs	r2, #0
 800ba20:	2300      	movs	r3, #0
 800ba22:	4606      	mov	r6, r0
 800ba24:	460f      	mov	r7, r1
 800ba26:	f7f5 f85f 	bl	8000ae8 <__aeabi_dcmpeq>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	d09d      	beq.n	800b96a <_dtoa_r+0x63a>
 800ba2e:	e7cf      	b.n	800b9d0 <_dtoa_r+0x6a0>
 800ba30:	9a08      	ldr	r2, [sp, #32]
 800ba32:	2a00      	cmp	r2, #0
 800ba34:	f000 80d7 	beq.w	800bbe6 <_dtoa_r+0x8b6>
 800ba38:	9a06      	ldr	r2, [sp, #24]
 800ba3a:	2a01      	cmp	r2, #1
 800ba3c:	f300 80ba 	bgt.w	800bbb4 <_dtoa_r+0x884>
 800ba40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba42:	2a00      	cmp	r2, #0
 800ba44:	f000 80b2 	beq.w	800bbac <_dtoa_r+0x87c>
 800ba48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ba4c:	9e07      	ldr	r6, [sp, #28]
 800ba4e:	9d04      	ldr	r5, [sp, #16]
 800ba50:	9a04      	ldr	r2, [sp, #16]
 800ba52:	441a      	add	r2, r3
 800ba54:	9204      	str	r2, [sp, #16]
 800ba56:	9a05      	ldr	r2, [sp, #20]
 800ba58:	2101      	movs	r1, #1
 800ba5a:	441a      	add	r2, r3
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	9205      	str	r2, [sp, #20]
 800ba60:	f001 f982 	bl	800cd68 <__i2b>
 800ba64:	4607      	mov	r7, r0
 800ba66:	2d00      	cmp	r5, #0
 800ba68:	dd0c      	ble.n	800ba84 <_dtoa_r+0x754>
 800ba6a:	9b05      	ldr	r3, [sp, #20]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	dd09      	ble.n	800ba84 <_dtoa_r+0x754>
 800ba70:	42ab      	cmp	r3, r5
 800ba72:	9a04      	ldr	r2, [sp, #16]
 800ba74:	bfa8      	it	ge
 800ba76:	462b      	movge	r3, r5
 800ba78:	1ad2      	subs	r2, r2, r3
 800ba7a:	9204      	str	r2, [sp, #16]
 800ba7c:	9a05      	ldr	r2, [sp, #20]
 800ba7e:	1aed      	subs	r5, r5, r3
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	9305      	str	r3, [sp, #20]
 800ba84:	9b07      	ldr	r3, [sp, #28]
 800ba86:	b31b      	cbz	r3, 800bad0 <_dtoa_r+0x7a0>
 800ba88:	9b08      	ldr	r3, [sp, #32]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 80af 	beq.w	800bbee <_dtoa_r+0x8be>
 800ba90:	2e00      	cmp	r6, #0
 800ba92:	dd13      	ble.n	800babc <_dtoa_r+0x78c>
 800ba94:	4639      	mov	r1, r7
 800ba96:	4632      	mov	r2, r6
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f001 fa25 	bl	800cee8 <__pow5mult>
 800ba9e:	ee18 2a10 	vmov	r2, s16
 800baa2:	4601      	mov	r1, r0
 800baa4:	4607      	mov	r7, r0
 800baa6:	4620      	mov	r0, r4
 800baa8:	f001 f974 	bl	800cd94 <__multiply>
 800baac:	ee18 1a10 	vmov	r1, s16
 800bab0:	4680      	mov	r8, r0
 800bab2:	4620      	mov	r0, r4
 800bab4:	f001 f856 	bl	800cb64 <_Bfree>
 800bab8:	ee08 8a10 	vmov	s16, r8
 800babc:	9b07      	ldr	r3, [sp, #28]
 800babe:	1b9a      	subs	r2, r3, r6
 800bac0:	d006      	beq.n	800bad0 <_dtoa_r+0x7a0>
 800bac2:	ee18 1a10 	vmov	r1, s16
 800bac6:	4620      	mov	r0, r4
 800bac8:	f001 fa0e 	bl	800cee8 <__pow5mult>
 800bacc:	ee08 0a10 	vmov	s16, r0
 800bad0:	2101      	movs	r1, #1
 800bad2:	4620      	mov	r0, r4
 800bad4:	f001 f948 	bl	800cd68 <__i2b>
 800bad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bada:	2b00      	cmp	r3, #0
 800badc:	4606      	mov	r6, r0
 800bade:	f340 8088 	ble.w	800bbf2 <_dtoa_r+0x8c2>
 800bae2:	461a      	mov	r2, r3
 800bae4:	4601      	mov	r1, r0
 800bae6:	4620      	mov	r0, r4
 800bae8:	f001 f9fe 	bl	800cee8 <__pow5mult>
 800baec:	9b06      	ldr	r3, [sp, #24]
 800baee:	2b01      	cmp	r3, #1
 800baf0:	4606      	mov	r6, r0
 800baf2:	f340 8081 	ble.w	800bbf8 <_dtoa_r+0x8c8>
 800baf6:	f04f 0800 	mov.w	r8, #0
 800bafa:	6933      	ldr	r3, [r6, #16]
 800bafc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bb00:	6918      	ldr	r0, [r3, #16]
 800bb02:	f001 f8e1 	bl	800ccc8 <__hi0bits>
 800bb06:	f1c0 0020 	rsb	r0, r0, #32
 800bb0a:	9b05      	ldr	r3, [sp, #20]
 800bb0c:	4418      	add	r0, r3
 800bb0e:	f010 001f 	ands.w	r0, r0, #31
 800bb12:	f000 8092 	beq.w	800bc3a <_dtoa_r+0x90a>
 800bb16:	f1c0 0320 	rsb	r3, r0, #32
 800bb1a:	2b04      	cmp	r3, #4
 800bb1c:	f340 808a 	ble.w	800bc34 <_dtoa_r+0x904>
 800bb20:	f1c0 001c 	rsb	r0, r0, #28
 800bb24:	9b04      	ldr	r3, [sp, #16]
 800bb26:	4403      	add	r3, r0
 800bb28:	9304      	str	r3, [sp, #16]
 800bb2a:	9b05      	ldr	r3, [sp, #20]
 800bb2c:	4403      	add	r3, r0
 800bb2e:	4405      	add	r5, r0
 800bb30:	9305      	str	r3, [sp, #20]
 800bb32:	9b04      	ldr	r3, [sp, #16]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	dd07      	ble.n	800bb48 <_dtoa_r+0x818>
 800bb38:	ee18 1a10 	vmov	r1, s16
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f001 fa2c 	bl	800cf9c <__lshift>
 800bb44:	ee08 0a10 	vmov	s16, r0
 800bb48:	9b05      	ldr	r3, [sp, #20]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	dd05      	ble.n	800bb5a <_dtoa_r+0x82a>
 800bb4e:	4631      	mov	r1, r6
 800bb50:	461a      	mov	r2, r3
 800bb52:	4620      	mov	r0, r4
 800bb54:	f001 fa22 	bl	800cf9c <__lshift>
 800bb58:	4606      	mov	r6, r0
 800bb5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d06e      	beq.n	800bc3e <_dtoa_r+0x90e>
 800bb60:	ee18 0a10 	vmov	r0, s16
 800bb64:	4631      	mov	r1, r6
 800bb66:	f001 fa89 	bl	800d07c <__mcmp>
 800bb6a:	2800      	cmp	r0, #0
 800bb6c:	da67      	bge.n	800bc3e <_dtoa_r+0x90e>
 800bb6e:	9b00      	ldr	r3, [sp, #0]
 800bb70:	3b01      	subs	r3, #1
 800bb72:	ee18 1a10 	vmov	r1, s16
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	220a      	movs	r2, #10
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f001 f813 	bl	800cba8 <__multadd>
 800bb82:	9b08      	ldr	r3, [sp, #32]
 800bb84:	ee08 0a10 	vmov	s16, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f000 81b1 	beq.w	800bef0 <_dtoa_r+0xbc0>
 800bb8e:	2300      	movs	r3, #0
 800bb90:	4639      	mov	r1, r7
 800bb92:	220a      	movs	r2, #10
 800bb94:	4620      	mov	r0, r4
 800bb96:	f001 f807 	bl	800cba8 <__multadd>
 800bb9a:	9b02      	ldr	r3, [sp, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	4607      	mov	r7, r0
 800bba0:	f300 808e 	bgt.w	800bcc0 <_dtoa_r+0x990>
 800bba4:	9b06      	ldr	r3, [sp, #24]
 800bba6:	2b02      	cmp	r3, #2
 800bba8:	dc51      	bgt.n	800bc4e <_dtoa_r+0x91e>
 800bbaa:	e089      	b.n	800bcc0 <_dtoa_r+0x990>
 800bbac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bbae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bbb2:	e74b      	b.n	800ba4c <_dtoa_r+0x71c>
 800bbb4:	9b03      	ldr	r3, [sp, #12]
 800bbb6:	1e5e      	subs	r6, r3, #1
 800bbb8:	9b07      	ldr	r3, [sp, #28]
 800bbba:	42b3      	cmp	r3, r6
 800bbbc:	bfbf      	itttt	lt
 800bbbe:	9b07      	ldrlt	r3, [sp, #28]
 800bbc0:	9607      	strlt	r6, [sp, #28]
 800bbc2:	1af2      	sublt	r2, r6, r3
 800bbc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bbc6:	bfb6      	itet	lt
 800bbc8:	189b      	addlt	r3, r3, r2
 800bbca:	1b9e      	subge	r6, r3, r6
 800bbcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bbce:	9b03      	ldr	r3, [sp, #12]
 800bbd0:	bfb8      	it	lt
 800bbd2:	2600      	movlt	r6, #0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	bfb7      	itett	lt
 800bbd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bbdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bbe0:	1a9d      	sublt	r5, r3, r2
 800bbe2:	2300      	movlt	r3, #0
 800bbe4:	e734      	b.n	800ba50 <_dtoa_r+0x720>
 800bbe6:	9e07      	ldr	r6, [sp, #28]
 800bbe8:	9d04      	ldr	r5, [sp, #16]
 800bbea:	9f08      	ldr	r7, [sp, #32]
 800bbec:	e73b      	b.n	800ba66 <_dtoa_r+0x736>
 800bbee:	9a07      	ldr	r2, [sp, #28]
 800bbf0:	e767      	b.n	800bac2 <_dtoa_r+0x792>
 800bbf2:	9b06      	ldr	r3, [sp, #24]
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	dc18      	bgt.n	800bc2a <_dtoa_r+0x8fa>
 800bbf8:	f1ba 0f00 	cmp.w	sl, #0
 800bbfc:	d115      	bne.n	800bc2a <_dtoa_r+0x8fa>
 800bbfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc02:	b993      	cbnz	r3, 800bc2a <_dtoa_r+0x8fa>
 800bc04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bc08:	0d1b      	lsrs	r3, r3, #20
 800bc0a:	051b      	lsls	r3, r3, #20
 800bc0c:	b183      	cbz	r3, 800bc30 <_dtoa_r+0x900>
 800bc0e:	9b04      	ldr	r3, [sp, #16]
 800bc10:	3301      	adds	r3, #1
 800bc12:	9304      	str	r3, [sp, #16]
 800bc14:	9b05      	ldr	r3, [sp, #20]
 800bc16:	3301      	adds	r3, #1
 800bc18:	9305      	str	r3, [sp, #20]
 800bc1a:	f04f 0801 	mov.w	r8, #1
 800bc1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	f47f af6a 	bne.w	800bafa <_dtoa_r+0x7ca>
 800bc26:	2001      	movs	r0, #1
 800bc28:	e76f      	b.n	800bb0a <_dtoa_r+0x7da>
 800bc2a:	f04f 0800 	mov.w	r8, #0
 800bc2e:	e7f6      	b.n	800bc1e <_dtoa_r+0x8ee>
 800bc30:	4698      	mov	r8, r3
 800bc32:	e7f4      	b.n	800bc1e <_dtoa_r+0x8ee>
 800bc34:	f43f af7d 	beq.w	800bb32 <_dtoa_r+0x802>
 800bc38:	4618      	mov	r0, r3
 800bc3a:	301c      	adds	r0, #28
 800bc3c:	e772      	b.n	800bb24 <_dtoa_r+0x7f4>
 800bc3e:	9b03      	ldr	r3, [sp, #12]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	dc37      	bgt.n	800bcb4 <_dtoa_r+0x984>
 800bc44:	9b06      	ldr	r3, [sp, #24]
 800bc46:	2b02      	cmp	r3, #2
 800bc48:	dd34      	ble.n	800bcb4 <_dtoa_r+0x984>
 800bc4a:	9b03      	ldr	r3, [sp, #12]
 800bc4c:	9302      	str	r3, [sp, #8]
 800bc4e:	9b02      	ldr	r3, [sp, #8]
 800bc50:	b96b      	cbnz	r3, 800bc6e <_dtoa_r+0x93e>
 800bc52:	4631      	mov	r1, r6
 800bc54:	2205      	movs	r2, #5
 800bc56:	4620      	mov	r0, r4
 800bc58:	f000 ffa6 	bl	800cba8 <__multadd>
 800bc5c:	4601      	mov	r1, r0
 800bc5e:	4606      	mov	r6, r0
 800bc60:	ee18 0a10 	vmov	r0, s16
 800bc64:	f001 fa0a 	bl	800d07c <__mcmp>
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	f73f adbb 	bgt.w	800b7e4 <_dtoa_r+0x4b4>
 800bc6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc70:	9d01      	ldr	r5, [sp, #4]
 800bc72:	43db      	mvns	r3, r3
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	f04f 0800 	mov.w	r8, #0
 800bc7a:	4631      	mov	r1, r6
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	f000 ff71 	bl	800cb64 <_Bfree>
 800bc82:	2f00      	cmp	r7, #0
 800bc84:	f43f aea4 	beq.w	800b9d0 <_dtoa_r+0x6a0>
 800bc88:	f1b8 0f00 	cmp.w	r8, #0
 800bc8c:	d005      	beq.n	800bc9a <_dtoa_r+0x96a>
 800bc8e:	45b8      	cmp	r8, r7
 800bc90:	d003      	beq.n	800bc9a <_dtoa_r+0x96a>
 800bc92:	4641      	mov	r1, r8
 800bc94:	4620      	mov	r0, r4
 800bc96:	f000 ff65 	bl	800cb64 <_Bfree>
 800bc9a:	4639      	mov	r1, r7
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	f000 ff61 	bl	800cb64 <_Bfree>
 800bca2:	e695      	b.n	800b9d0 <_dtoa_r+0x6a0>
 800bca4:	2600      	movs	r6, #0
 800bca6:	4637      	mov	r7, r6
 800bca8:	e7e1      	b.n	800bc6e <_dtoa_r+0x93e>
 800bcaa:	9700      	str	r7, [sp, #0]
 800bcac:	4637      	mov	r7, r6
 800bcae:	e599      	b.n	800b7e4 <_dtoa_r+0x4b4>
 800bcb0:	40240000 	.word	0x40240000
 800bcb4:	9b08      	ldr	r3, [sp, #32]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f000 80ca 	beq.w	800be50 <_dtoa_r+0xb20>
 800bcbc:	9b03      	ldr	r3, [sp, #12]
 800bcbe:	9302      	str	r3, [sp, #8]
 800bcc0:	2d00      	cmp	r5, #0
 800bcc2:	dd05      	ble.n	800bcd0 <_dtoa_r+0x9a0>
 800bcc4:	4639      	mov	r1, r7
 800bcc6:	462a      	mov	r2, r5
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f001 f967 	bl	800cf9c <__lshift>
 800bcce:	4607      	mov	r7, r0
 800bcd0:	f1b8 0f00 	cmp.w	r8, #0
 800bcd4:	d05b      	beq.n	800bd8e <_dtoa_r+0xa5e>
 800bcd6:	6879      	ldr	r1, [r7, #4]
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f000 ff03 	bl	800cae4 <_Balloc>
 800bcde:	4605      	mov	r5, r0
 800bce0:	b928      	cbnz	r0, 800bcee <_dtoa_r+0x9be>
 800bce2:	4b87      	ldr	r3, [pc, #540]	; (800bf00 <_dtoa_r+0xbd0>)
 800bce4:	4602      	mov	r2, r0
 800bce6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bcea:	f7ff bb3b 	b.w	800b364 <_dtoa_r+0x34>
 800bcee:	693a      	ldr	r2, [r7, #16]
 800bcf0:	3202      	adds	r2, #2
 800bcf2:	0092      	lsls	r2, r2, #2
 800bcf4:	f107 010c 	add.w	r1, r7, #12
 800bcf8:	300c      	adds	r0, #12
 800bcfa:	f000 febf 	bl	800ca7c <memcpy>
 800bcfe:	2201      	movs	r2, #1
 800bd00:	4629      	mov	r1, r5
 800bd02:	4620      	mov	r0, r4
 800bd04:	f001 f94a 	bl	800cf9c <__lshift>
 800bd08:	9b01      	ldr	r3, [sp, #4]
 800bd0a:	f103 0901 	add.w	r9, r3, #1
 800bd0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bd12:	4413      	add	r3, r2
 800bd14:	9305      	str	r3, [sp, #20]
 800bd16:	f00a 0301 	and.w	r3, sl, #1
 800bd1a:	46b8      	mov	r8, r7
 800bd1c:	9304      	str	r3, [sp, #16]
 800bd1e:	4607      	mov	r7, r0
 800bd20:	4631      	mov	r1, r6
 800bd22:	ee18 0a10 	vmov	r0, s16
 800bd26:	f7ff fa75 	bl	800b214 <quorem>
 800bd2a:	4641      	mov	r1, r8
 800bd2c:	9002      	str	r0, [sp, #8]
 800bd2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bd32:	ee18 0a10 	vmov	r0, s16
 800bd36:	f001 f9a1 	bl	800d07c <__mcmp>
 800bd3a:	463a      	mov	r2, r7
 800bd3c:	9003      	str	r0, [sp, #12]
 800bd3e:	4631      	mov	r1, r6
 800bd40:	4620      	mov	r0, r4
 800bd42:	f001 f9b7 	bl	800d0b4 <__mdiff>
 800bd46:	68c2      	ldr	r2, [r0, #12]
 800bd48:	f109 3bff 	add.w	fp, r9, #4294967295
 800bd4c:	4605      	mov	r5, r0
 800bd4e:	bb02      	cbnz	r2, 800bd92 <_dtoa_r+0xa62>
 800bd50:	4601      	mov	r1, r0
 800bd52:	ee18 0a10 	vmov	r0, s16
 800bd56:	f001 f991 	bl	800d07c <__mcmp>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	4629      	mov	r1, r5
 800bd5e:	4620      	mov	r0, r4
 800bd60:	9207      	str	r2, [sp, #28]
 800bd62:	f000 feff 	bl	800cb64 <_Bfree>
 800bd66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bd6a:	ea43 0102 	orr.w	r1, r3, r2
 800bd6e:	9b04      	ldr	r3, [sp, #16]
 800bd70:	430b      	orrs	r3, r1
 800bd72:	464d      	mov	r5, r9
 800bd74:	d10f      	bne.n	800bd96 <_dtoa_r+0xa66>
 800bd76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd7a:	d02a      	beq.n	800bdd2 <_dtoa_r+0xaa2>
 800bd7c:	9b03      	ldr	r3, [sp, #12]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	dd02      	ble.n	800bd88 <_dtoa_r+0xa58>
 800bd82:	9b02      	ldr	r3, [sp, #8]
 800bd84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bd88:	f88b a000 	strb.w	sl, [fp]
 800bd8c:	e775      	b.n	800bc7a <_dtoa_r+0x94a>
 800bd8e:	4638      	mov	r0, r7
 800bd90:	e7ba      	b.n	800bd08 <_dtoa_r+0x9d8>
 800bd92:	2201      	movs	r2, #1
 800bd94:	e7e2      	b.n	800bd5c <_dtoa_r+0xa2c>
 800bd96:	9b03      	ldr	r3, [sp, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	db04      	blt.n	800bda6 <_dtoa_r+0xa76>
 800bd9c:	9906      	ldr	r1, [sp, #24]
 800bd9e:	430b      	orrs	r3, r1
 800bda0:	9904      	ldr	r1, [sp, #16]
 800bda2:	430b      	orrs	r3, r1
 800bda4:	d122      	bne.n	800bdec <_dtoa_r+0xabc>
 800bda6:	2a00      	cmp	r2, #0
 800bda8:	ddee      	ble.n	800bd88 <_dtoa_r+0xa58>
 800bdaa:	ee18 1a10 	vmov	r1, s16
 800bdae:	2201      	movs	r2, #1
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f001 f8f3 	bl	800cf9c <__lshift>
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	ee08 0a10 	vmov	s16, r0
 800bdbc:	f001 f95e 	bl	800d07c <__mcmp>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	dc03      	bgt.n	800bdcc <_dtoa_r+0xa9c>
 800bdc4:	d1e0      	bne.n	800bd88 <_dtoa_r+0xa58>
 800bdc6:	f01a 0f01 	tst.w	sl, #1
 800bdca:	d0dd      	beq.n	800bd88 <_dtoa_r+0xa58>
 800bdcc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bdd0:	d1d7      	bne.n	800bd82 <_dtoa_r+0xa52>
 800bdd2:	2339      	movs	r3, #57	; 0x39
 800bdd4:	f88b 3000 	strb.w	r3, [fp]
 800bdd8:	462b      	mov	r3, r5
 800bdda:	461d      	mov	r5, r3
 800bddc:	3b01      	subs	r3, #1
 800bdde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bde2:	2a39      	cmp	r2, #57	; 0x39
 800bde4:	d071      	beq.n	800beca <_dtoa_r+0xb9a>
 800bde6:	3201      	adds	r2, #1
 800bde8:	701a      	strb	r2, [r3, #0]
 800bdea:	e746      	b.n	800bc7a <_dtoa_r+0x94a>
 800bdec:	2a00      	cmp	r2, #0
 800bdee:	dd07      	ble.n	800be00 <_dtoa_r+0xad0>
 800bdf0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bdf4:	d0ed      	beq.n	800bdd2 <_dtoa_r+0xaa2>
 800bdf6:	f10a 0301 	add.w	r3, sl, #1
 800bdfa:	f88b 3000 	strb.w	r3, [fp]
 800bdfe:	e73c      	b.n	800bc7a <_dtoa_r+0x94a>
 800be00:	9b05      	ldr	r3, [sp, #20]
 800be02:	f809 ac01 	strb.w	sl, [r9, #-1]
 800be06:	4599      	cmp	r9, r3
 800be08:	d047      	beq.n	800be9a <_dtoa_r+0xb6a>
 800be0a:	ee18 1a10 	vmov	r1, s16
 800be0e:	2300      	movs	r3, #0
 800be10:	220a      	movs	r2, #10
 800be12:	4620      	mov	r0, r4
 800be14:	f000 fec8 	bl	800cba8 <__multadd>
 800be18:	45b8      	cmp	r8, r7
 800be1a:	ee08 0a10 	vmov	s16, r0
 800be1e:	f04f 0300 	mov.w	r3, #0
 800be22:	f04f 020a 	mov.w	r2, #10
 800be26:	4641      	mov	r1, r8
 800be28:	4620      	mov	r0, r4
 800be2a:	d106      	bne.n	800be3a <_dtoa_r+0xb0a>
 800be2c:	f000 febc 	bl	800cba8 <__multadd>
 800be30:	4680      	mov	r8, r0
 800be32:	4607      	mov	r7, r0
 800be34:	f109 0901 	add.w	r9, r9, #1
 800be38:	e772      	b.n	800bd20 <_dtoa_r+0x9f0>
 800be3a:	f000 feb5 	bl	800cba8 <__multadd>
 800be3e:	4639      	mov	r1, r7
 800be40:	4680      	mov	r8, r0
 800be42:	2300      	movs	r3, #0
 800be44:	220a      	movs	r2, #10
 800be46:	4620      	mov	r0, r4
 800be48:	f000 feae 	bl	800cba8 <__multadd>
 800be4c:	4607      	mov	r7, r0
 800be4e:	e7f1      	b.n	800be34 <_dtoa_r+0xb04>
 800be50:	9b03      	ldr	r3, [sp, #12]
 800be52:	9302      	str	r3, [sp, #8]
 800be54:	9d01      	ldr	r5, [sp, #4]
 800be56:	ee18 0a10 	vmov	r0, s16
 800be5a:	4631      	mov	r1, r6
 800be5c:	f7ff f9da 	bl	800b214 <quorem>
 800be60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800be64:	9b01      	ldr	r3, [sp, #4]
 800be66:	f805 ab01 	strb.w	sl, [r5], #1
 800be6a:	1aea      	subs	r2, r5, r3
 800be6c:	9b02      	ldr	r3, [sp, #8]
 800be6e:	4293      	cmp	r3, r2
 800be70:	dd09      	ble.n	800be86 <_dtoa_r+0xb56>
 800be72:	ee18 1a10 	vmov	r1, s16
 800be76:	2300      	movs	r3, #0
 800be78:	220a      	movs	r2, #10
 800be7a:	4620      	mov	r0, r4
 800be7c:	f000 fe94 	bl	800cba8 <__multadd>
 800be80:	ee08 0a10 	vmov	s16, r0
 800be84:	e7e7      	b.n	800be56 <_dtoa_r+0xb26>
 800be86:	9b02      	ldr	r3, [sp, #8]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	bfc8      	it	gt
 800be8c:	461d      	movgt	r5, r3
 800be8e:	9b01      	ldr	r3, [sp, #4]
 800be90:	bfd8      	it	le
 800be92:	2501      	movle	r5, #1
 800be94:	441d      	add	r5, r3
 800be96:	f04f 0800 	mov.w	r8, #0
 800be9a:	ee18 1a10 	vmov	r1, s16
 800be9e:	2201      	movs	r2, #1
 800bea0:	4620      	mov	r0, r4
 800bea2:	f001 f87b 	bl	800cf9c <__lshift>
 800bea6:	4631      	mov	r1, r6
 800bea8:	ee08 0a10 	vmov	s16, r0
 800beac:	f001 f8e6 	bl	800d07c <__mcmp>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	dc91      	bgt.n	800bdd8 <_dtoa_r+0xaa8>
 800beb4:	d102      	bne.n	800bebc <_dtoa_r+0xb8c>
 800beb6:	f01a 0f01 	tst.w	sl, #1
 800beba:	d18d      	bne.n	800bdd8 <_dtoa_r+0xaa8>
 800bebc:	462b      	mov	r3, r5
 800bebe:	461d      	mov	r5, r3
 800bec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bec4:	2a30      	cmp	r2, #48	; 0x30
 800bec6:	d0fa      	beq.n	800bebe <_dtoa_r+0xb8e>
 800bec8:	e6d7      	b.n	800bc7a <_dtoa_r+0x94a>
 800beca:	9a01      	ldr	r2, [sp, #4]
 800becc:	429a      	cmp	r2, r3
 800bece:	d184      	bne.n	800bdda <_dtoa_r+0xaaa>
 800bed0:	9b00      	ldr	r3, [sp, #0]
 800bed2:	3301      	adds	r3, #1
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	2331      	movs	r3, #49	; 0x31
 800bed8:	7013      	strb	r3, [r2, #0]
 800beda:	e6ce      	b.n	800bc7a <_dtoa_r+0x94a>
 800bedc:	4b09      	ldr	r3, [pc, #36]	; (800bf04 <_dtoa_r+0xbd4>)
 800bede:	f7ff ba95 	b.w	800b40c <_dtoa_r+0xdc>
 800bee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	f47f aa6e 	bne.w	800b3c6 <_dtoa_r+0x96>
 800beea:	4b07      	ldr	r3, [pc, #28]	; (800bf08 <_dtoa_r+0xbd8>)
 800beec:	f7ff ba8e 	b.w	800b40c <_dtoa_r+0xdc>
 800bef0:	9b02      	ldr	r3, [sp, #8]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	dcae      	bgt.n	800be54 <_dtoa_r+0xb24>
 800bef6:	9b06      	ldr	r3, [sp, #24]
 800bef8:	2b02      	cmp	r3, #2
 800befa:	f73f aea8 	bgt.w	800bc4e <_dtoa_r+0x91e>
 800befe:	e7a9      	b.n	800be54 <_dtoa_r+0xb24>
 800bf00:	0800e645 	.word	0x0800e645
 800bf04:	0800e890 	.word	0x0800e890
 800bf08:	0800e5dd 	.word	0x0800e5dd

0800bf0c <__sflush_r>:
 800bf0c:	898a      	ldrh	r2, [r1, #12]
 800bf0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf12:	4605      	mov	r5, r0
 800bf14:	0710      	lsls	r0, r2, #28
 800bf16:	460c      	mov	r4, r1
 800bf18:	d458      	bmi.n	800bfcc <__sflush_r+0xc0>
 800bf1a:	684b      	ldr	r3, [r1, #4]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	dc05      	bgt.n	800bf2c <__sflush_r+0x20>
 800bf20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	dc02      	bgt.n	800bf2c <__sflush_r+0x20>
 800bf26:	2000      	movs	r0, #0
 800bf28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf2e:	2e00      	cmp	r6, #0
 800bf30:	d0f9      	beq.n	800bf26 <__sflush_r+0x1a>
 800bf32:	2300      	movs	r3, #0
 800bf34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf38:	682f      	ldr	r7, [r5, #0]
 800bf3a:	602b      	str	r3, [r5, #0]
 800bf3c:	d032      	beq.n	800bfa4 <__sflush_r+0x98>
 800bf3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf40:	89a3      	ldrh	r3, [r4, #12]
 800bf42:	075a      	lsls	r2, r3, #29
 800bf44:	d505      	bpl.n	800bf52 <__sflush_r+0x46>
 800bf46:	6863      	ldr	r3, [r4, #4]
 800bf48:	1ac0      	subs	r0, r0, r3
 800bf4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf4c:	b10b      	cbz	r3, 800bf52 <__sflush_r+0x46>
 800bf4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf50:	1ac0      	subs	r0, r0, r3
 800bf52:	2300      	movs	r3, #0
 800bf54:	4602      	mov	r2, r0
 800bf56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf58:	6a21      	ldr	r1, [r4, #32]
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	47b0      	blx	r6
 800bf5e:	1c43      	adds	r3, r0, #1
 800bf60:	89a3      	ldrh	r3, [r4, #12]
 800bf62:	d106      	bne.n	800bf72 <__sflush_r+0x66>
 800bf64:	6829      	ldr	r1, [r5, #0]
 800bf66:	291d      	cmp	r1, #29
 800bf68:	d82c      	bhi.n	800bfc4 <__sflush_r+0xb8>
 800bf6a:	4a2a      	ldr	r2, [pc, #168]	; (800c014 <__sflush_r+0x108>)
 800bf6c:	40ca      	lsrs	r2, r1
 800bf6e:	07d6      	lsls	r6, r2, #31
 800bf70:	d528      	bpl.n	800bfc4 <__sflush_r+0xb8>
 800bf72:	2200      	movs	r2, #0
 800bf74:	6062      	str	r2, [r4, #4]
 800bf76:	04d9      	lsls	r1, r3, #19
 800bf78:	6922      	ldr	r2, [r4, #16]
 800bf7a:	6022      	str	r2, [r4, #0]
 800bf7c:	d504      	bpl.n	800bf88 <__sflush_r+0x7c>
 800bf7e:	1c42      	adds	r2, r0, #1
 800bf80:	d101      	bne.n	800bf86 <__sflush_r+0x7a>
 800bf82:	682b      	ldr	r3, [r5, #0]
 800bf84:	b903      	cbnz	r3, 800bf88 <__sflush_r+0x7c>
 800bf86:	6560      	str	r0, [r4, #84]	; 0x54
 800bf88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf8a:	602f      	str	r7, [r5, #0]
 800bf8c:	2900      	cmp	r1, #0
 800bf8e:	d0ca      	beq.n	800bf26 <__sflush_r+0x1a>
 800bf90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf94:	4299      	cmp	r1, r3
 800bf96:	d002      	beq.n	800bf9e <__sflush_r+0x92>
 800bf98:	4628      	mov	r0, r5
 800bf9a:	f7fc ffb7 	bl	8008f0c <_free_r>
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	6360      	str	r0, [r4, #52]	; 0x34
 800bfa2:	e7c1      	b.n	800bf28 <__sflush_r+0x1c>
 800bfa4:	6a21      	ldr	r1, [r4, #32]
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	47b0      	blx	r6
 800bfac:	1c41      	adds	r1, r0, #1
 800bfae:	d1c7      	bne.n	800bf40 <__sflush_r+0x34>
 800bfb0:	682b      	ldr	r3, [r5, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d0c4      	beq.n	800bf40 <__sflush_r+0x34>
 800bfb6:	2b1d      	cmp	r3, #29
 800bfb8:	d001      	beq.n	800bfbe <__sflush_r+0xb2>
 800bfba:	2b16      	cmp	r3, #22
 800bfbc:	d101      	bne.n	800bfc2 <__sflush_r+0xb6>
 800bfbe:	602f      	str	r7, [r5, #0]
 800bfc0:	e7b1      	b.n	800bf26 <__sflush_r+0x1a>
 800bfc2:	89a3      	ldrh	r3, [r4, #12]
 800bfc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfc8:	81a3      	strh	r3, [r4, #12]
 800bfca:	e7ad      	b.n	800bf28 <__sflush_r+0x1c>
 800bfcc:	690f      	ldr	r7, [r1, #16]
 800bfce:	2f00      	cmp	r7, #0
 800bfd0:	d0a9      	beq.n	800bf26 <__sflush_r+0x1a>
 800bfd2:	0793      	lsls	r3, r2, #30
 800bfd4:	680e      	ldr	r6, [r1, #0]
 800bfd6:	bf08      	it	eq
 800bfd8:	694b      	ldreq	r3, [r1, #20]
 800bfda:	600f      	str	r7, [r1, #0]
 800bfdc:	bf18      	it	ne
 800bfde:	2300      	movne	r3, #0
 800bfe0:	eba6 0807 	sub.w	r8, r6, r7
 800bfe4:	608b      	str	r3, [r1, #8]
 800bfe6:	f1b8 0f00 	cmp.w	r8, #0
 800bfea:	dd9c      	ble.n	800bf26 <__sflush_r+0x1a>
 800bfec:	6a21      	ldr	r1, [r4, #32]
 800bfee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bff0:	4643      	mov	r3, r8
 800bff2:	463a      	mov	r2, r7
 800bff4:	4628      	mov	r0, r5
 800bff6:	47b0      	blx	r6
 800bff8:	2800      	cmp	r0, #0
 800bffa:	dc06      	bgt.n	800c00a <__sflush_r+0xfe>
 800bffc:	89a3      	ldrh	r3, [r4, #12]
 800bffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c002:	81a3      	strh	r3, [r4, #12]
 800c004:	f04f 30ff 	mov.w	r0, #4294967295
 800c008:	e78e      	b.n	800bf28 <__sflush_r+0x1c>
 800c00a:	4407      	add	r7, r0
 800c00c:	eba8 0800 	sub.w	r8, r8, r0
 800c010:	e7e9      	b.n	800bfe6 <__sflush_r+0xda>
 800c012:	bf00      	nop
 800c014:	20400001 	.word	0x20400001

0800c018 <_fflush_r>:
 800c018:	b538      	push	{r3, r4, r5, lr}
 800c01a:	690b      	ldr	r3, [r1, #16]
 800c01c:	4605      	mov	r5, r0
 800c01e:	460c      	mov	r4, r1
 800c020:	b913      	cbnz	r3, 800c028 <_fflush_r+0x10>
 800c022:	2500      	movs	r5, #0
 800c024:	4628      	mov	r0, r5
 800c026:	bd38      	pop	{r3, r4, r5, pc}
 800c028:	b118      	cbz	r0, 800c032 <_fflush_r+0x1a>
 800c02a:	6983      	ldr	r3, [r0, #24]
 800c02c:	b90b      	cbnz	r3, 800c032 <_fflush_r+0x1a>
 800c02e:	f000 f887 	bl	800c140 <__sinit>
 800c032:	4b14      	ldr	r3, [pc, #80]	; (800c084 <_fflush_r+0x6c>)
 800c034:	429c      	cmp	r4, r3
 800c036:	d11b      	bne.n	800c070 <_fflush_r+0x58>
 800c038:	686c      	ldr	r4, [r5, #4]
 800c03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d0ef      	beq.n	800c022 <_fflush_r+0xa>
 800c042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c044:	07d0      	lsls	r0, r2, #31
 800c046:	d404      	bmi.n	800c052 <_fflush_r+0x3a>
 800c048:	0599      	lsls	r1, r3, #22
 800c04a:	d402      	bmi.n	800c052 <_fflush_r+0x3a>
 800c04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c04e:	f000 fc88 	bl	800c962 <__retarget_lock_acquire_recursive>
 800c052:	4628      	mov	r0, r5
 800c054:	4621      	mov	r1, r4
 800c056:	f7ff ff59 	bl	800bf0c <__sflush_r>
 800c05a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c05c:	07da      	lsls	r2, r3, #31
 800c05e:	4605      	mov	r5, r0
 800c060:	d4e0      	bmi.n	800c024 <_fflush_r+0xc>
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	059b      	lsls	r3, r3, #22
 800c066:	d4dd      	bmi.n	800c024 <_fflush_r+0xc>
 800c068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c06a:	f000 fc7b 	bl	800c964 <__retarget_lock_release_recursive>
 800c06e:	e7d9      	b.n	800c024 <_fflush_r+0xc>
 800c070:	4b05      	ldr	r3, [pc, #20]	; (800c088 <_fflush_r+0x70>)
 800c072:	429c      	cmp	r4, r3
 800c074:	d101      	bne.n	800c07a <_fflush_r+0x62>
 800c076:	68ac      	ldr	r4, [r5, #8]
 800c078:	e7df      	b.n	800c03a <_fflush_r+0x22>
 800c07a:	4b04      	ldr	r3, [pc, #16]	; (800c08c <_fflush_r+0x74>)
 800c07c:	429c      	cmp	r4, r3
 800c07e:	bf08      	it	eq
 800c080:	68ec      	ldreq	r4, [r5, #12]
 800c082:	e7da      	b.n	800c03a <_fflush_r+0x22>
 800c084:	0800e678 	.word	0x0800e678
 800c088:	0800e698 	.word	0x0800e698
 800c08c:	0800e658 	.word	0x0800e658

0800c090 <std>:
 800c090:	2300      	movs	r3, #0
 800c092:	b510      	push	{r4, lr}
 800c094:	4604      	mov	r4, r0
 800c096:	e9c0 3300 	strd	r3, r3, [r0]
 800c09a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c09e:	6083      	str	r3, [r0, #8]
 800c0a0:	8181      	strh	r1, [r0, #12]
 800c0a2:	6643      	str	r3, [r0, #100]	; 0x64
 800c0a4:	81c2      	strh	r2, [r0, #14]
 800c0a6:	6183      	str	r3, [r0, #24]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	2208      	movs	r2, #8
 800c0ac:	305c      	adds	r0, #92	; 0x5c
 800c0ae:	f7fc ff25 	bl	8008efc <memset>
 800c0b2:	4b05      	ldr	r3, [pc, #20]	; (800c0c8 <std+0x38>)
 800c0b4:	6263      	str	r3, [r4, #36]	; 0x24
 800c0b6:	4b05      	ldr	r3, [pc, #20]	; (800c0cc <std+0x3c>)
 800c0b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c0ba:	4b05      	ldr	r3, [pc, #20]	; (800c0d0 <std+0x40>)
 800c0bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0be:	4b05      	ldr	r3, [pc, #20]	; (800c0d4 <std+0x44>)
 800c0c0:	6224      	str	r4, [r4, #32]
 800c0c2:	6323      	str	r3, [r4, #48]	; 0x30
 800c0c4:	bd10      	pop	{r4, pc}
 800c0c6:	bf00      	nop
 800c0c8:	0800a165 	.word	0x0800a165
 800c0cc:	0800a18b 	.word	0x0800a18b
 800c0d0:	0800a1c3 	.word	0x0800a1c3
 800c0d4:	0800a1e7 	.word	0x0800a1e7

0800c0d8 <_cleanup_r>:
 800c0d8:	4901      	ldr	r1, [pc, #4]	; (800c0e0 <_cleanup_r+0x8>)
 800c0da:	f000 b8af 	b.w	800c23c <_fwalk_reent>
 800c0de:	bf00      	nop
 800c0e0:	0800c019 	.word	0x0800c019

0800c0e4 <__sfmoreglue>:
 800c0e4:	b570      	push	{r4, r5, r6, lr}
 800c0e6:	2268      	movs	r2, #104	; 0x68
 800c0e8:	1e4d      	subs	r5, r1, #1
 800c0ea:	4355      	muls	r5, r2
 800c0ec:	460e      	mov	r6, r1
 800c0ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c0f2:	f7fc ff77 	bl	8008fe4 <_malloc_r>
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	b140      	cbz	r0, 800c10c <__sfmoreglue+0x28>
 800c0fa:	2100      	movs	r1, #0
 800c0fc:	e9c0 1600 	strd	r1, r6, [r0]
 800c100:	300c      	adds	r0, #12
 800c102:	60a0      	str	r0, [r4, #8]
 800c104:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c108:	f7fc fef8 	bl	8008efc <memset>
 800c10c:	4620      	mov	r0, r4
 800c10e:	bd70      	pop	{r4, r5, r6, pc}

0800c110 <__sfp_lock_acquire>:
 800c110:	4801      	ldr	r0, [pc, #4]	; (800c118 <__sfp_lock_acquire+0x8>)
 800c112:	f000 bc26 	b.w	800c962 <__retarget_lock_acquire_recursive>
 800c116:	bf00      	nop
 800c118:	20001bf1 	.word	0x20001bf1

0800c11c <__sfp_lock_release>:
 800c11c:	4801      	ldr	r0, [pc, #4]	; (800c124 <__sfp_lock_release+0x8>)
 800c11e:	f000 bc21 	b.w	800c964 <__retarget_lock_release_recursive>
 800c122:	bf00      	nop
 800c124:	20001bf1 	.word	0x20001bf1

0800c128 <__sinit_lock_acquire>:
 800c128:	4801      	ldr	r0, [pc, #4]	; (800c130 <__sinit_lock_acquire+0x8>)
 800c12a:	f000 bc1a 	b.w	800c962 <__retarget_lock_acquire_recursive>
 800c12e:	bf00      	nop
 800c130:	20001bf2 	.word	0x20001bf2

0800c134 <__sinit_lock_release>:
 800c134:	4801      	ldr	r0, [pc, #4]	; (800c13c <__sinit_lock_release+0x8>)
 800c136:	f000 bc15 	b.w	800c964 <__retarget_lock_release_recursive>
 800c13a:	bf00      	nop
 800c13c:	20001bf2 	.word	0x20001bf2

0800c140 <__sinit>:
 800c140:	b510      	push	{r4, lr}
 800c142:	4604      	mov	r4, r0
 800c144:	f7ff fff0 	bl	800c128 <__sinit_lock_acquire>
 800c148:	69a3      	ldr	r3, [r4, #24]
 800c14a:	b11b      	cbz	r3, 800c154 <__sinit+0x14>
 800c14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c150:	f7ff bff0 	b.w	800c134 <__sinit_lock_release>
 800c154:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c158:	6523      	str	r3, [r4, #80]	; 0x50
 800c15a:	4b13      	ldr	r3, [pc, #76]	; (800c1a8 <__sinit+0x68>)
 800c15c:	4a13      	ldr	r2, [pc, #76]	; (800c1ac <__sinit+0x6c>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	62a2      	str	r2, [r4, #40]	; 0x28
 800c162:	42a3      	cmp	r3, r4
 800c164:	bf04      	itt	eq
 800c166:	2301      	moveq	r3, #1
 800c168:	61a3      	streq	r3, [r4, #24]
 800c16a:	4620      	mov	r0, r4
 800c16c:	f000 f820 	bl	800c1b0 <__sfp>
 800c170:	6060      	str	r0, [r4, #4]
 800c172:	4620      	mov	r0, r4
 800c174:	f000 f81c 	bl	800c1b0 <__sfp>
 800c178:	60a0      	str	r0, [r4, #8]
 800c17a:	4620      	mov	r0, r4
 800c17c:	f000 f818 	bl	800c1b0 <__sfp>
 800c180:	2200      	movs	r2, #0
 800c182:	60e0      	str	r0, [r4, #12]
 800c184:	2104      	movs	r1, #4
 800c186:	6860      	ldr	r0, [r4, #4]
 800c188:	f7ff ff82 	bl	800c090 <std>
 800c18c:	68a0      	ldr	r0, [r4, #8]
 800c18e:	2201      	movs	r2, #1
 800c190:	2109      	movs	r1, #9
 800c192:	f7ff ff7d 	bl	800c090 <std>
 800c196:	68e0      	ldr	r0, [r4, #12]
 800c198:	2202      	movs	r2, #2
 800c19a:	2112      	movs	r1, #18
 800c19c:	f7ff ff78 	bl	800c090 <std>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	61a3      	str	r3, [r4, #24]
 800c1a4:	e7d2      	b.n	800c14c <__sinit+0xc>
 800c1a6:	bf00      	nop
 800c1a8:	0800e3c8 	.word	0x0800e3c8
 800c1ac:	0800c0d9 	.word	0x0800c0d9

0800c1b0 <__sfp>:
 800c1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b2:	4607      	mov	r7, r0
 800c1b4:	f7ff ffac 	bl	800c110 <__sfp_lock_acquire>
 800c1b8:	4b1e      	ldr	r3, [pc, #120]	; (800c234 <__sfp+0x84>)
 800c1ba:	681e      	ldr	r6, [r3, #0]
 800c1bc:	69b3      	ldr	r3, [r6, #24]
 800c1be:	b913      	cbnz	r3, 800c1c6 <__sfp+0x16>
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	f7ff ffbd 	bl	800c140 <__sinit>
 800c1c6:	3648      	adds	r6, #72	; 0x48
 800c1c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	d503      	bpl.n	800c1d8 <__sfp+0x28>
 800c1d0:	6833      	ldr	r3, [r6, #0]
 800c1d2:	b30b      	cbz	r3, 800c218 <__sfp+0x68>
 800c1d4:	6836      	ldr	r6, [r6, #0]
 800c1d6:	e7f7      	b.n	800c1c8 <__sfp+0x18>
 800c1d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c1dc:	b9d5      	cbnz	r5, 800c214 <__sfp+0x64>
 800c1de:	4b16      	ldr	r3, [pc, #88]	; (800c238 <__sfp+0x88>)
 800c1e0:	60e3      	str	r3, [r4, #12]
 800c1e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c1e6:	6665      	str	r5, [r4, #100]	; 0x64
 800c1e8:	f000 fbba 	bl	800c960 <__retarget_lock_init_recursive>
 800c1ec:	f7ff ff96 	bl	800c11c <__sfp_lock_release>
 800c1f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c1f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c1f8:	6025      	str	r5, [r4, #0]
 800c1fa:	61a5      	str	r5, [r4, #24]
 800c1fc:	2208      	movs	r2, #8
 800c1fe:	4629      	mov	r1, r5
 800c200:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c204:	f7fc fe7a 	bl	8008efc <memset>
 800c208:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c20c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c210:	4620      	mov	r0, r4
 800c212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c214:	3468      	adds	r4, #104	; 0x68
 800c216:	e7d9      	b.n	800c1cc <__sfp+0x1c>
 800c218:	2104      	movs	r1, #4
 800c21a:	4638      	mov	r0, r7
 800c21c:	f7ff ff62 	bl	800c0e4 <__sfmoreglue>
 800c220:	4604      	mov	r4, r0
 800c222:	6030      	str	r0, [r6, #0]
 800c224:	2800      	cmp	r0, #0
 800c226:	d1d5      	bne.n	800c1d4 <__sfp+0x24>
 800c228:	f7ff ff78 	bl	800c11c <__sfp_lock_release>
 800c22c:	230c      	movs	r3, #12
 800c22e:	603b      	str	r3, [r7, #0]
 800c230:	e7ee      	b.n	800c210 <__sfp+0x60>
 800c232:	bf00      	nop
 800c234:	0800e3c8 	.word	0x0800e3c8
 800c238:	ffff0001 	.word	0xffff0001

0800c23c <_fwalk_reent>:
 800c23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c240:	4606      	mov	r6, r0
 800c242:	4688      	mov	r8, r1
 800c244:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c248:	2700      	movs	r7, #0
 800c24a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c24e:	f1b9 0901 	subs.w	r9, r9, #1
 800c252:	d505      	bpl.n	800c260 <_fwalk_reent+0x24>
 800c254:	6824      	ldr	r4, [r4, #0]
 800c256:	2c00      	cmp	r4, #0
 800c258:	d1f7      	bne.n	800c24a <_fwalk_reent+0xe>
 800c25a:	4638      	mov	r0, r7
 800c25c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c260:	89ab      	ldrh	r3, [r5, #12]
 800c262:	2b01      	cmp	r3, #1
 800c264:	d907      	bls.n	800c276 <_fwalk_reent+0x3a>
 800c266:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c26a:	3301      	adds	r3, #1
 800c26c:	d003      	beq.n	800c276 <_fwalk_reent+0x3a>
 800c26e:	4629      	mov	r1, r5
 800c270:	4630      	mov	r0, r6
 800c272:	47c0      	blx	r8
 800c274:	4307      	orrs	r7, r0
 800c276:	3568      	adds	r5, #104	; 0x68
 800c278:	e7e9      	b.n	800c24e <_fwalk_reent+0x12>

0800c27a <rshift>:
 800c27a:	6903      	ldr	r3, [r0, #16]
 800c27c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c284:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c288:	f100 0414 	add.w	r4, r0, #20
 800c28c:	dd45      	ble.n	800c31a <rshift+0xa0>
 800c28e:	f011 011f 	ands.w	r1, r1, #31
 800c292:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c296:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c29a:	d10c      	bne.n	800c2b6 <rshift+0x3c>
 800c29c:	f100 0710 	add.w	r7, r0, #16
 800c2a0:	4629      	mov	r1, r5
 800c2a2:	42b1      	cmp	r1, r6
 800c2a4:	d334      	bcc.n	800c310 <rshift+0x96>
 800c2a6:	1a9b      	subs	r3, r3, r2
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	1eea      	subs	r2, r5, #3
 800c2ac:	4296      	cmp	r6, r2
 800c2ae:	bf38      	it	cc
 800c2b0:	2300      	movcc	r3, #0
 800c2b2:	4423      	add	r3, r4
 800c2b4:	e015      	b.n	800c2e2 <rshift+0x68>
 800c2b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c2ba:	f1c1 0820 	rsb	r8, r1, #32
 800c2be:	40cf      	lsrs	r7, r1
 800c2c0:	f105 0e04 	add.w	lr, r5, #4
 800c2c4:	46a1      	mov	r9, r4
 800c2c6:	4576      	cmp	r6, lr
 800c2c8:	46f4      	mov	ip, lr
 800c2ca:	d815      	bhi.n	800c2f8 <rshift+0x7e>
 800c2cc:	1a9a      	subs	r2, r3, r2
 800c2ce:	0092      	lsls	r2, r2, #2
 800c2d0:	3a04      	subs	r2, #4
 800c2d2:	3501      	adds	r5, #1
 800c2d4:	42ae      	cmp	r6, r5
 800c2d6:	bf38      	it	cc
 800c2d8:	2200      	movcc	r2, #0
 800c2da:	18a3      	adds	r3, r4, r2
 800c2dc:	50a7      	str	r7, [r4, r2]
 800c2de:	b107      	cbz	r7, 800c2e2 <rshift+0x68>
 800c2e0:	3304      	adds	r3, #4
 800c2e2:	1b1a      	subs	r2, r3, r4
 800c2e4:	42a3      	cmp	r3, r4
 800c2e6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c2ea:	bf08      	it	eq
 800c2ec:	2300      	moveq	r3, #0
 800c2ee:	6102      	str	r2, [r0, #16]
 800c2f0:	bf08      	it	eq
 800c2f2:	6143      	streq	r3, [r0, #20]
 800c2f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2f8:	f8dc c000 	ldr.w	ip, [ip]
 800c2fc:	fa0c fc08 	lsl.w	ip, ip, r8
 800c300:	ea4c 0707 	orr.w	r7, ip, r7
 800c304:	f849 7b04 	str.w	r7, [r9], #4
 800c308:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c30c:	40cf      	lsrs	r7, r1
 800c30e:	e7da      	b.n	800c2c6 <rshift+0x4c>
 800c310:	f851 cb04 	ldr.w	ip, [r1], #4
 800c314:	f847 cf04 	str.w	ip, [r7, #4]!
 800c318:	e7c3      	b.n	800c2a2 <rshift+0x28>
 800c31a:	4623      	mov	r3, r4
 800c31c:	e7e1      	b.n	800c2e2 <rshift+0x68>

0800c31e <__hexdig_fun>:
 800c31e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c322:	2b09      	cmp	r3, #9
 800c324:	d802      	bhi.n	800c32c <__hexdig_fun+0xe>
 800c326:	3820      	subs	r0, #32
 800c328:	b2c0      	uxtb	r0, r0
 800c32a:	4770      	bx	lr
 800c32c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c330:	2b05      	cmp	r3, #5
 800c332:	d801      	bhi.n	800c338 <__hexdig_fun+0x1a>
 800c334:	3847      	subs	r0, #71	; 0x47
 800c336:	e7f7      	b.n	800c328 <__hexdig_fun+0xa>
 800c338:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c33c:	2b05      	cmp	r3, #5
 800c33e:	d801      	bhi.n	800c344 <__hexdig_fun+0x26>
 800c340:	3827      	subs	r0, #39	; 0x27
 800c342:	e7f1      	b.n	800c328 <__hexdig_fun+0xa>
 800c344:	2000      	movs	r0, #0
 800c346:	4770      	bx	lr

0800c348 <__gethex>:
 800c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34c:	ed2d 8b02 	vpush	{d8}
 800c350:	b089      	sub	sp, #36	; 0x24
 800c352:	ee08 0a10 	vmov	s16, r0
 800c356:	9304      	str	r3, [sp, #16]
 800c358:	4bb4      	ldr	r3, [pc, #720]	; (800c62c <__gethex+0x2e4>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	9301      	str	r3, [sp, #4]
 800c35e:	4618      	mov	r0, r3
 800c360:	468b      	mov	fp, r1
 800c362:	4690      	mov	r8, r2
 800c364:	f7f3 ff3e 	bl	80001e4 <strlen>
 800c368:	9b01      	ldr	r3, [sp, #4]
 800c36a:	f8db 2000 	ldr.w	r2, [fp]
 800c36e:	4403      	add	r3, r0
 800c370:	4682      	mov	sl, r0
 800c372:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c376:	9305      	str	r3, [sp, #20]
 800c378:	1c93      	adds	r3, r2, #2
 800c37a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c37e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c382:	32fe      	adds	r2, #254	; 0xfe
 800c384:	18d1      	adds	r1, r2, r3
 800c386:	461f      	mov	r7, r3
 800c388:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c38c:	9100      	str	r1, [sp, #0]
 800c38e:	2830      	cmp	r0, #48	; 0x30
 800c390:	d0f8      	beq.n	800c384 <__gethex+0x3c>
 800c392:	f7ff ffc4 	bl	800c31e <__hexdig_fun>
 800c396:	4604      	mov	r4, r0
 800c398:	2800      	cmp	r0, #0
 800c39a:	d13a      	bne.n	800c412 <__gethex+0xca>
 800c39c:	9901      	ldr	r1, [sp, #4]
 800c39e:	4652      	mov	r2, sl
 800c3a0:	4638      	mov	r0, r7
 800c3a2:	f001 fe05 	bl	800dfb0 <strncmp>
 800c3a6:	4605      	mov	r5, r0
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	d168      	bne.n	800c47e <__gethex+0x136>
 800c3ac:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c3b0:	eb07 060a 	add.w	r6, r7, sl
 800c3b4:	f7ff ffb3 	bl	800c31e <__hexdig_fun>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	d062      	beq.n	800c482 <__gethex+0x13a>
 800c3bc:	4633      	mov	r3, r6
 800c3be:	7818      	ldrb	r0, [r3, #0]
 800c3c0:	2830      	cmp	r0, #48	; 0x30
 800c3c2:	461f      	mov	r7, r3
 800c3c4:	f103 0301 	add.w	r3, r3, #1
 800c3c8:	d0f9      	beq.n	800c3be <__gethex+0x76>
 800c3ca:	f7ff ffa8 	bl	800c31e <__hexdig_fun>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	fab0 f480 	clz	r4, r0
 800c3d4:	0964      	lsrs	r4, r4, #5
 800c3d6:	4635      	mov	r5, r6
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	463a      	mov	r2, r7
 800c3dc:	4616      	mov	r6, r2
 800c3de:	3201      	adds	r2, #1
 800c3e0:	7830      	ldrb	r0, [r6, #0]
 800c3e2:	f7ff ff9c 	bl	800c31e <__hexdig_fun>
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	d1f8      	bne.n	800c3dc <__gethex+0x94>
 800c3ea:	9901      	ldr	r1, [sp, #4]
 800c3ec:	4652      	mov	r2, sl
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	f001 fdde 	bl	800dfb0 <strncmp>
 800c3f4:	b980      	cbnz	r0, 800c418 <__gethex+0xd0>
 800c3f6:	b94d      	cbnz	r5, 800c40c <__gethex+0xc4>
 800c3f8:	eb06 050a 	add.w	r5, r6, sl
 800c3fc:	462a      	mov	r2, r5
 800c3fe:	4616      	mov	r6, r2
 800c400:	3201      	adds	r2, #1
 800c402:	7830      	ldrb	r0, [r6, #0]
 800c404:	f7ff ff8b 	bl	800c31e <__hexdig_fun>
 800c408:	2800      	cmp	r0, #0
 800c40a:	d1f8      	bne.n	800c3fe <__gethex+0xb6>
 800c40c:	1bad      	subs	r5, r5, r6
 800c40e:	00ad      	lsls	r5, r5, #2
 800c410:	e004      	b.n	800c41c <__gethex+0xd4>
 800c412:	2400      	movs	r4, #0
 800c414:	4625      	mov	r5, r4
 800c416:	e7e0      	b.n	800c3da <__gethex+0x92>
 800c418:	2d00      	cmp	r5, #0
 800c41a:	d1f7      	bne.n	800c40c <__gethex+0xc4>
 800c41c:	7833      	ldrb	r3, [r6, #0]
 800c41e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c422:	2b50      	cmp	r3, #80	; 0x50
 800c424:	d13b      	bne.n	800c49e <__gethex+0x156>
 800c426:	7873      	ldrb	r3, [r6, #1]
 800c428:	2b2b      	cmp	r3, #43	; 0x2b
 800c42a:	d02c      	beq.n	800c486 <__gethex+0x13e>
 800c42c:	2b2d      	cmp	r3, #45	; 0x2d
 800c42e:	d02e      	beq.n	800c48e <__gethex+0x146>
 800c430:	1c71      	adds	r1, r6, #1
 800c432:	f04f 0900 	mov.w	r9, #0
 800c436:	7808      	ldrb	r0, [r1, #0]
 800c438:	f7ff ff71 	bl	800c31e <__hexdig_fun>
 800c43c:	1e43      	subs	r3, r0, #1
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	2b18      	cmp	r3, #24
 800c442:	d82c      	bhi.n	800c49e <__gethex+0x156>
 800c444:	f1a0 0210 	sub.w	r2, r0, #16
 800c448:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c44c:	f7ff ff67 	bl	800c31e <__hexdig_fun>
 800c450:	1e43      	subs	r3, r0, #1
 800c452:	b2db      	uxtb	r3, r3
 800c454:	2b18      	cmp	r3, #24
 800c456:	d91d      	bls.n	800c494 <__gethex+0x14c>
 800c458:	f1b9 0f00 	cmp.w	r9, #0
 800c45c:	d000      	beq.n	800c460 <__gethex+0x118>
 800c45e:	4252      	negs	r2, r2
 800c460:	4415      	add	r5, r2
 800c462:	f8cb 1000 	str.w	r1, [fp]
 800c466:	b1e4      	cbz	r4, 800c4a2 <__gethex+0x15a>
 800c468:	9b00      	ldr	r3, [sp, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	bf14      	ite	ne
 800c46e:	2700      	movne	r7, #0
 800c470:	2706      	moveq	r7, #6
 800c472:	4638      	mov	r0, r7
 800c474:	b009      	add	sp, #36	; 0x24
 800c476:	ecbd 8b02 	vpop	{d8}
 800c47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c47e:	463e      	mov	r6, r7
 800c480:	4625      	mov	r5, r4
 800c482:	2401      	movs	r4, #1
 800c484:	e7ca      	b.n	800c41c <__gethex+0xd4>
 800c486:	f04f 0900 	mov.w	r9, #0
 800c48a:	1cb1      	adds	r1, r6, #2
 800c48c:	e7d3      	b.n	800c436 <__gethex+0xee>
 800c48e:	f04f 0901 	mov.w	r9, #1
 800c492:	e7fa      	b.n	800c48a <__gethex+0x142>
 800c494:	230a      	movs	r3, #10
 800c496:	fb03 0202 	mla	r2, r3, r2, r0
 800c49a:	3a10      	subs	r2, #16
 800c49c:	e7d4      	b.n	800c448 <__gethex+0x100>
 800c49e:	4631      	mov	r1, r6
 800c4a0:	e7df      	b.n	800c462 <__gethex+0x11a>
 800c4a2:	1bf3      	subs	r3, r6, r7
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	4621      	mov	r1, r4
 800c4a8:	2b07      	cmp	r3, #7
 800c4aa:	dc0b      	bgt.n	800c4c4 <__gethex+0x17c>
 800c4ac:	ee18 0a10 	vmov	r0, s16
 800c4b0:	f000 fb18 	bl	800cae4 <_Balloc>
 800c4b4:	4604      	mov	r4, r0
 800c4b6:	b940      	cbnz	r0, 800c4ca <__gethex+0x182>
 800c4b8:	4b5d      	ldr	r3, [pc, #372]	; (800c630 <__gethex+0x2e8>)
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	21de      	movs	r1, #222	; 0xde
 800c4be:	485d      	ldr	r0, [pc, #372]	; (800c634 <__gethex+0x2ec>)
 800c4c0:	f7fc fcb2 	bl	8008e28 <__assert_func>
 800c4c4:	3101      	adds	r1, #1
 800c4c6:	105b      	asrs	r3, r3, #1
 800c4c8:	e7ee      	b.n	800c4a8 <__gethex+0x160>
 800c4ca:	f100 0914 	add.w	r9, r0, #20
 800c4ce:	f04f 0b00 	mov.w	fp, #0
 800c4d2:	f1ca 0301 	rsb	r3, sl, #1
 800c4d6:	f8cd 9008 	str.w	r9, [sp, #8]
 800c4da:	f8cd b000 	str.w	fp, [sp]
 800c4de:	9306      	str	r3, [sp, #24]
 800c4e0:	42b7      	cmp	r7, r6
 800c4e2:	d340      	bcc.n	800c566 <__gethex+0x21e>
 800c4e4:	9802      	ldr	r0, [sp, #8]
 800c4e6:	9b00      	ldr	r3, [sp, #0]
 800c4e8:	f840 3b04 	str.w	r3, [r0], #4
 800c4ec:	eba0 0009 	sub.w	r0, r0, r9
 800c4f0:	1080      	asrs	r0, r0, #2
 800c4f2:	0146      	lsls	r6, r0, #5
 800c4f4:	6120      	str	r0, [r4, #16]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f000 fbe6 	bl	800ccc8 <__hi0bits>
 800c4fc:	1a30      	subs	r0, r6, r0
 800c4fe:	f8d8 6000 	ldr.w	r6, [r8]
 800c502:	42b0      	cmp	r0, r6
 800c504:	dd63      	ble.n	800c5ce <__gethex+0x286>
 800c506:	1b87      	subs	r7, r0, r6
 800c508:	4639      	mov	r1, r7
 800c50a:	4620      	mov	r0, r4
 800c50c:	f000 ff8a 	bl	800d424 <__any_on>
 800c510:	4682      	mov	sl, r0
 800c512:	b1a8      	cbz	r0, 800c540 <__gethex+0x1f8>
 800c514:	1e7b      	subs	r3, r7, #1
 800c516:	1159      	asrs	r1, r3, #5
 800c518:	f003 021f 	and.w	r2, r3, #31
 800c51c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c520:	f04f 0a01 	mov.w	sl, #1
 800c524:	fa0a f202 	lsl.w	r2, sl, r2
 800c528:	420a      	tst	r2, r1
 800c52a:	d009      	beq.n	800c540 <__gethex+0x1f8>
 800c52c:	4553      	cmp	r3, sl
 800c52e:	dd05      	ble.n	800c53c <__gethex+0x1f4>
 800c530:	1eb9      	subs	r1, r7, #2
 800c532:	4620      	mov	r0, r4
 800c534:	f000 ff76 	bl	800d424 <__any_on>
 800c538:	2800      	cmp	r0, #0
 800c53a:	d145      	bne.n	800c5c8 <__gethex+0x280>
 800c53c:	f04f 0a02 	mov.w	sl, #2
 800c540:	4639      	mov	r1, r7
 800c542:	4620      	mov	r0, r4
 800c544:	f7ff fe99 	bl	800c27a <rshift>
 800c548:	443d      	add	r5, r7
 800c54a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c54e:	42ab      	cmp	r3, r5
 800c550:	da4c      	bge.n	800c5ec <__gethex+0x2a4>
 800c552:	ee18 0a10 	vmov	r0, s16
 800c556:	4621      	mov	r1, r4
 800c558:	f000 fb04 	bl	800cb64 <_Bfree>
 800c55c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c55e:	2300      	movs	r3, #0
 800c560:	6013      	str	r3, [r2, #0]
 800c562:	27a3      	movs	r7, #163	; 0xa3
 800c564:	e785      	b.n	800c472 <__gethex+0x12a>
 800c566:	1e73      	subs	r3, r6, #1
 800c568:	9a05      	ldr	r2, [sp, #20]
 800c56a:	9303      	str	r3, [sp, #12]
 800c56c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c570:	4293      	cmp	r3, r2
 800c572:	d019      	beq.n	800c5a8 <__gethex+0x260>
 800c574:	f1bb 0f20 	cmp.w	fp, #32
 800c578:	d107      	bne.n	800c58a <__gethex+0x242>
 800c57a:	9b02      	ldr	r3, [sp, #8]
 800c57c:	9a00      	ldr	r2, [sp, #0]
 800c57e:	f843 2b04 	str.w	r2, [r3], #4
 800c582:	9302      	str	r3, [sp, #8]
 800c584:	2300      	movs	r3, #0
 800c586:	9300      	str	r3, [sp, #0]
 800c588:	469b      	mov	fp, r3
 800c58a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c58e:	f7ff fec6 	bl	800c31e <__hexdig_fun>
 800c592:	9b00      	ldr	r3, [sp, #0]
 800c594:	f000 000f 	and.w	r0, r0, #15
 800c598:	fa00 f00b 	lsl.w	r0, r0, fp
 800c59c:	4303      	orrs	r3, r0
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	f10b 0b04 	add.w	fp, fp, #4
 800c5a4:	9b03      	ldr	r3, [sp, #12]
 800c5a6:	e00d      	b.n	800c5c4 <__gethex+0x27c>
 800c5a8:	9b03      	ldr	r3, [sp, #12]
 800c5aa:	9a06      	ldr	r2, [sp, #24]
 800c5ac:	4413      	add	r3, r2
 800c5ae:	42bb      	cmp	r3, r7
 800c5b0:	d3e0      	bcc.n	800c574 <__gethex+0x22c>
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	9901      	ldr	r1, [sp, #4]
 800c5b6:	9307      	str	r3, [sp, #28]
 800c5b8:	4652      	mov	r2, sl
 800c5ba:	f001 fcf9 	bl	800dfb0 <strncmp>
 800c5be:	9b07      	ldr	r3, [sp, #28]
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d1d7      	bne.n	800c574 <__gethex+0x22c>
 800c5c4:	461e      	mov	r6, r3
 800c5c6:	e78b      	b.n	800c4e0 <__gethex+0x198>
 800c5c8:	f04f 0a03 	mov.w	sl, #3
 800c5cc:	e7b8      	b.n	800c540 <__gethex+0x1f8>
 800c5ce:	da0a      	bge.n	800c5e6 <__gethex+0x29e>
 800c5d0:	1a37      	subs	r7, r6, r0
 800c5d2:	4621      	mov	r1, r4
 800c5d4:	ee18 0a10 	vmov	r0, s16
 800c5d8:	463a      	mov	r2, r7
 800c5da:	f000 fcdf 	bl	800cf9c <__lshift>
 800c5de:	1bed      	subs	r5, r5, r7
 800c5e0:	4604      	mov	r4, r0
 800c5e2:	f100 0914 	add.w	r9, r0, #20
 800c5e6:	f04f 0a00 	mov.w	sl, #0
 800c5ea:	e7ae      	b.n	800c54a <__gethex+0x202>
 800c5ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c5f0:	42a8      	cmp	r0, r5
 800c5f2:	dd72      	ble.n	800c6da <__gethex+0x392>
 800c5f4:	1b45      	subs	r5, r0, r5
 800c5f6:	42ae      	cmp	r6, r5
 800c5f8:	dc36      	bgt.n	800c668 <__gethex+0x320>
 800c5fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5fe:	2b02      	cmp	r3, #2
 800c600:	d02a      	beq.n	800c658 <__gethex+0x310>
 800c602:	2b03      	cmp	r3, #3
 800c604:	d02c      	beq.n	800c660 <__gethex+0x318>
 800c606:	2b01      	cmp	r3, #1
 800c608:	d11c      	bne.n	800c644 <__gethex+0x2fc>
 800c60a:	42ae      	cmp	r6, r5
 800c60c:	d11a      	bne.n	800c644 <__gethex+0x2fc>
 800c60e:	2e01      	cmp	r6, #1
 800c610:	d112      	bne.n	800c638 <__gethex+0x2f0>
 800c612:	9a04      	ldr	r2, [sp, #16]
 800c614:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c618:	6013      	str	r3, [r2, #0]
 800c61a:	2301      	movs	r3, #1
 800c61c:	6123      	str	r3, [r4, #16]
 800c61e:	f8c9 3000 	str.w	r3, [r9]
 800c622:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c624:	2762      	movs	r7, #98	; 0x62
 800c626:	601c      	str	r4, [r3, #0]
 800c628:	e723      	b.n	800c472 <__gethex+0x12a>
 800c62a:	bf00      	nop
 800c62c:	0800e720 	.word	0x0800e720
 800c630:	0800e645 	.word	0x0800e645
 800c634:	0800e6b8 	.word	0x0800e6b8
 800c638:	1e71      	subs	r1, r6, #1
 800c63a:	4620      	mov	r0, r4
 800c63c:	f000 fef2 	bl	800d424 <__any_on>
 800c640:	2800      	cmp	r0, #0
 800c642:	d1e6      	bne.n	800c612 <__gethex+0x2ca>
 800c644:	ee18 0a10 	vmov	r0, s16
 800c648:	4621      	mov	r1, r4
 800c64a:	f000 fa8b 	bl	800cb64 <_Bfree>
 800c64e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c650:	2300      	movs	r3, #0
 800c652:	6013      	str	r3, [r2, #0]
 800c654:	2750      	movs	r7, #80	; 0x50
 800c656:	e70c      	b.n	800c472 <__gethex+0x12a>
 800c658:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d1f2      	bne.n	800c644 <__gethex+0x2fc>
 800c65e:	e7d8      	b.n	800c612 <__gethex+0x2ca>
 800c660:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c662:	2b00      	cmp	r3, #0
 800c664:	d1d5      	bne.n	800c612 <__gethex+0x2ca>
 800c666:	e7ed      	b.n	800c644 <__gethex+0x2fc>
 800c668:	1e6f      	subs	r7, r5, #1
 800c66a:	f1ba 0f00 	cmp.w	sl, #0
 800c66e:	d131      	bne.n	800c6d4 <__gethex+0x38c>
 800c670:	b127      	cbz	r7, 800c67c <__gethex+0x334>
 800c672:	4639      	mov	r1, r7
 800c674:	4620      	mov	r0, r4
 800c676:	f000 fed5 	bl	800d424 <__any_on>
 800c67a:	4682      	mov	sl, r0
 800c67c:	117b      	asrs	r3, r7, #5
 800c67e:	2101      	movs	r1, #1
 800c680:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c684:	f007 071f 	and.w	r7, r7, #31
 800c688:	fa01 f707 	lsl.w	r7, r1, r7
 800c68c:	421f      	tst	r7, r3
 800c68e:	4629      	mov	r1, r5
 800c690:	4620      	mov	r0, r4
 800c692:	bf18      	it	ne
 800c694:	f04a 0a02 	orrne.w	sl, sl, #2
 800c698:	1b76      	subs	r6, r6, r5
 800c69a:	f7ff fdee 	bl	800c27a <rshift>
 800c69e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c6a2:	2702      	movs	r7, #2
 800c6a4:	f1ba 0f00 	cmp.w	sl, #0
 800c6a8:	d048      	beq.n	800c73c <__gethex+0x3f4>
 800c6aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c6ae:	2b02      	cmp	r3, #2
 800c6b0:	d015      	beq.n	800c6de <__gethex+0x396>
 800c6b2:	2b03      	cmp	r3, #3
 800c6b4:	d017      	beq.n	800c6e6 <__gethex+0x39e>
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d109      	bne.n	800c6ce <__gethex+0x386>
 800c6ba:	f01a 0f02 	tst.w	sl, #2
 800c6be:	d006      	beq.n	800c6ce <__gethex+0x386>
 800c6c0:	f8d9 0000 	ldr.w	r0, [r9]
 800c6c4:	ea4a 0a00 	orr.w	sl, sl, r0
 800c6c8:	f01a 0f01 	tst.w	sl, #1
 800c6cc:	d10e      	bne.n	800c6ec <__gethex+0x3a4>
 800c6ce:	f047 0710 	orr.w	r7, r7, #16
 800c6d2:	e033      	b.n	800c73c <__gethex+0x3f4>
 800c6d4:	f04f 0a01 	mov.w	sl, #1
 800c6d8:	e7d0      	b.n	800c67c <__gethex+0x334>
 800c6da:	2701      	movs	r7, #1
 800c6dc:	e7e2      	b.n	800c6a4 <__gethex+0x35c>
 800c6de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6e0:	f1c3 0301 	rsb	r3, r3, #1
 800c6e4:	9315      	str	r3, [sp, #84]	; 0x54
 800c6e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d0f0      	beq.n	800c6ce <__gethex+0x386>
 800c6ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c6f0:	f104 0314 	add.w	r3, r4, #20
 800c6f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c6f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c6fc:	f04f 0c00 	mov.w	ip, #0
 800c700:	4618      	mov	r0, r3
 800c702:	f853 2b04 	ldr.w	r2, [r3], #4
 800c706:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c70a:	d01c      	beq.n	800c746 <__gethex+0x3fe>
 800c70c:	3201      	adds	r2, #1
 800c70e:	6002      	str	r2, [r0, #0]
 800c710:	2f02      	cmp	r7, #2
 800c712:	f104 0314 	add.w	r3, r4, #20
 800c716:	d13f      	bne.n	800c798 <__gethex+0x450>
 800c718:	f8d8 2000 	ldr.w	r2, [r8]
 800c71c:	3a01      	subs	r2, #1
 800c71e:	42b2      	cmp	r2, r6
 800c720:	d10a      	bne.n	800c738 <__gethex+0x3f0>
 800c722:	1171      	asrs	r1, r6, #5
 800c724:	2201      	movs	r2, #1
 800c726:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c72a:	f006 061f 	and.w	r6, r6, #31
 800c72e:	fa02 f606 	lsl.w	r6, r2, r6
 800c732:	421e      	tst	r6, r3
 800c734:	bf18      	it	ne
 800c736:	4617      	movne	r7, r2
 800c738:	f047 0720 	orr.w	r7, r7, #32
 800c73c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c73e:	601c      	str	r4, [r3, #0]
 800c740:	9b04      	ldr	r3, [sp, #16]
 800c742:	601d      	str	r5, [r3, #0]
 800c744:	e695      	b.n	800c472 <__gethex+0x12a>
 800c746:	4299      	cmp	r1, r3
 800c748:	f843 cc04 	str.w	ip, [r3, #-4]
 800c74c:	d8d8      	bhi.n	800c700 <__gethex+0x3b8>
 800c74e:	68a3      	ldr	r3, [r4, #8]
 800c750:	459b      	cmp	fp, r3
 800c752:	db19      	blt.n	800c788 <__gethex+0x440>
 800c754:	6861      	ldr	r1, [r4, #4]
 800c756:	ee18 0a10 	vmov	r0, s16
 800c75a:	3101      	adds	r1, #1
 800c75c:	f000 f9c2 	bl	800cae4 <_Balloc>
 800c760:	4681      	mov	r9, r0
 800c762:	b918      	cbnz	r0, 800c76c <__gethex+0x424>
 800c764:	4b1a      	ldr	r3, [pc, #104]	; (800c7d0 <__gethex+0x488>)
 800c766:	4602      	mov	r2, r0
 800c768:	2184      	movs	r1, #132	; 0x84
 800c76a:	e6a8      	b.n	800c4be <__gethex+0x176>
 800c76c:	6922      	ldr	r2, [r4, #16]
 800c76e:	3202      	adds	r2, #2
 800c770:	f104 010c 	add.w	r1, r4, #12
 800c774:	0092      	lsls	r2, r2, #2
 800c776:	300c      	adds	r0, #12
 800c778:	f000 f980 	bl	800ca7c <memcpy>
 800c77c:	4621      	mov	r1, r4
 800c77e:	ee18 0a10 	vmov	r0, s16
 800c782:	f000 f9ef 	bl	800cb64 <_Bfree>
 800c786:	464c      	mov	r4, r9
 800c788:	6923      	ldr	r3, [r4, #16]
 800c78a:	1c5a      	adds	r2, r3, #1
 800c78c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c790:	6122      	str	r2, [r4, #16]
 800c792:	2201      	movs	r2, #1
 800c794:	615a      	str	r2, [r3, #20]
 800c796:	e7bb      	b.n	800c710 <__gethex+0x3c8>
 800c798:	6922      	ldr	r2, [r4, #16]
 800c79a:	455a      	cmp	r2, fp
 800c79c:	dd0b      	ble.n	800c7b6 <__gethex+0x46e>
 800c79e:	2101      	movs	r1, #1
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	f7ff fd6a 	bl	800c27a <rshift>
 800c7a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7aa:	3501      	adds	r5, #1
 800c7ac:	42ab      	cmp	r3, r5
 800c7ae:	f6ff aed0 	blt.w	800c552 <__gethex+0x20a>
 800c7b2:	2701      	movs	r7, #1
 800c7b4:	e7c0      	b.n	800c738 <__gethex+0x3f0>
 800c7b6:	f016 061f 	ands.w	r6, r6, #31
 800c7ba:	d0fa      	beq.n	800c7b2 <__gethex+0x46a>
 800c7bc:	4453      	add	r3, sl
 800c7be:	f1c6 0620 	rsb	r6, r6, #32
 800c7c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c7c6:	f000 fa7f 	bl	800ccc8 <__hi0bits>
 800c7ca:	42b0      	cmp	r0, r6
 800c7cc:	dbe7      	blt.n	800c79e <__gethex+0x456>
 800c7ce:	e7f0      	b.n	800c7b2 <__gethex+0x46a>
 800c7d0:	0800e645 	.word	0x0800e645

0800c7d4 <L_shift>:
 800c7d4:	f1c2 0208 	rsb	r2, r2, #8
 800c7d8:	0092      	lsls	r2, r2, #2
 800c7da:	b570      	push	{r4, r5, r6, lr}
 800c7dc:	f1c2 0620 	rsb	r6, r2, #32
 800c7e0:	6843      	ldr	r3, [r0, #4]
 800c7e2:	6804      	ldr	r4, [r0, #0]
 800c7e4:	fa03 f506 	lsl.w	r5, r3, r6
 800c7e8:	432c      	orrs	r4, r5
 800c7ea:	40d3      	lsrs	r3, r2
 800c7ec:	6004      	str	r4, [r0, #0]
 800c7ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800c7f2:	4288      	cmp	r0, r1
 800c7f4:	d3f4      	bcc.n	800c7e0 <L_shift+0xc>
 800c7f6:	bd70      	pop	{r4, r5, r6, pc}

0800c7f8 <__match>:
 800c7f8:	b530      	push	{r4, r5, lr}
 800c7fa:	6803      	ldr	r3, [r0, #0]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c802:	b914      	cbnz	r4, 800c80a <__match+0x12>
 800c804:	6003      	str	r3, [r0, #0]
 800c806:	2001      	movs	r0, #1
 800c808:	bd30      	pop	{r4, r5, pc}
 800c80a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c80e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c812:	2d19      	cmp	r5, #25
 800c814:	bf98      	it	ls
 800c816:	3220      	addls	r2, #32
 800c818:	42a2      	cmp	r2, r4
 800c81a:	d0f0      	beq.n	800c7fe <__match+0x6>
 800c81c:	2000      	movs	r0, #0
 800c81e:	e7f3      	b.n	800c808 <__match+0x10>

0800c820 <__hexnan>:
 800c820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c824:	680b      	ldr	r3, [r1, #0]
 800c826:	115e      	asrs	r6, r3, #5
 800c828:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c82c:	f013 031f 	ands.w	r3, r3, #31
 800c830:	b087      	sub	sp, #28
 800c832:	bf18      	it	ne
 800c834:	3604      	addne	r6, #4
 800c836:	2500      	movs	r5, #0
 800c838:	1f37      	subs	r7, r6, #4
 800c83a:	4690      	mov	r8, r2
 800c83c:	6802      	ldr	r2, [r0, #0]
 800c83e:	9301      	str	r3, [sp, #4]
 800c840:	4682      	mov	sl, r0
 800c842:	f846 5c04 	str.w	r5, [r6, #-4]
 800c846:	46b9      	mov	r9, r7
 800c848:	463c      	mov	r4, r7
 800c84a:	9502      	str	r5, [sp, #8]
 800c84c:	46ab      	mov	fp, r5
 800c84e:	7851      	ldrb	r1, [r2, #1]
 800c850:	1c53      	adds	r3, r2, #1
 800c852:	9303      	str	r3, [sp, #12]
 800c854:	b341      	cbz	r1, 800c8a8 <__hexnan+0x88>
 800c856:	4608      	mov	r0, r1
 800c858:	9205      	str	r2, [sp, #20]
 800c85a:	9104      	str	r1, [sp, #16]
 800c85c:	f7ff fd5f 	bl	800c31e <__hexdig_fun>
 800c860:	2800      	cmp	r0, #0
 800c862:	d14f      	bne.n	800c904 <__hexnan+0xe4>
 800c864:	9904      	ldr	r1, [sp, #16]
 800c866:	9a05      	ldr	r2, [sp, #20]
 800c868:	2920      	cmp	r1, #32
 800c86a:	d818      	bhi.n	800c89e <__hexnan+0x7e>
 800c86c:	9b02      	ldr	r3, [sp, #8]
 800c86e:	459b      	cmp	fp, r3
 800c870:	dd13      	ble.n	800c89a <__hexnan+0x7a>
 800c872:	454c      	cmp	r4, r9
 800c874:	d206      	bcs.n	800c884 <__hexnan+0x64>
 800c876:	2d07      	cmp	r5, #7
 800c878:	dc04      	bgt.n	800c884 <__hexnan+0x64>
 800c87a:	462a      	mov	r2, r5
 800c87c:	4649      	mov	r1, r9
 800c87e:	4620      	mov	r0, r4
 800c880:	f7ff ffa8 	bl	800c7d4 <L_shift>
 800c884:	4544      	cmp	r4, r8
 800c886:	d950      	bls.n	800c92a <__hexnan+0x10a>
 800c888:	2300      	movs	r3, #0
 800c88a:	f1a4 0904 	sub.w	r9, r4, #4
 800c88e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c892:	f8cd b008 	str.w	fp, [sp, #8]
 800c896:	464c      	mov	r4, r9
 800c898:	461d      	mov	r5, r3
 800c89a:	9a03      	ldr	r2, [sp, #12]
 800c89c:	e7d7      	b.n	800c84e <__hexnan+0x2e>
 800c89e:	2929      	cmp	r1, #41	; 0x29
 800c8a0:	d156      	bne.n	800c950 <__hexnan+0x130>
 800c8a2:	3202      	adds	r2, #2
 800c8a4:	f8ca 2000 	str.w	r2, [sl]
 800c8a8:	f1bb 0f00 	cmp.w	fp, #0
 800c8ac:	d050      	beq.n	800c950 <__hexnan+0x130>
 800c8ae:	454c      	cmp	r4, r9
 800c8b0:	d206      	bcs.n	800c8c0 <__hexnan+0xa0>
 800c8b2:	2d07      	cmp	r5, #7
 800c8b4:	dc04      	bgt.n	800c8c0 <__hexnan+0xa0>
 800c8b6:	462a      	mov	r2, r5
 800c8b8:	4649      	mov	r1, r9
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	f7ff ff8a 	bl	800c7d4 <L_shift>
 800c8c0:	4544      	cmp	r4, r8
 800c8c2:	d934      	bls.n	800c92e <__hexnan+0x10e>
 800c8c4:	f1a8 0204 	sub.w	r2, r8, #4
 800c8c8:	4623      	mov	r3, r4
 800c8ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800c8ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800c8d2:	429f      	cmp	r7, r3
 800c8d4:	d2f9      	bcs.n	800c8ca <__hexnan+0xaa>
 800c8d6:	1b3b      	subs	r3, r7, r4
 800c8d8:	f023 0303 	bic.w	r3, r3, #3
 800c8dc:	3304      	adds	r3, #4
 800c8de:	3401      	adds	r4, #1
 800c8e0:	3e03      	subs	r6, #3
 800c8e2:	42b4      	cmp	r4, r6
 800c8e4:	bf88      	it	hi
 800c8e6:	2304      	movhi	r3, #4
 800c8e8:	4443      	add	r3, r8
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f843 2b04 	str.w	r2, [r3], #4
 800c8f0:	429f      	cmp	r7, r3
 800c8f2:	d2fb      	bcs.n	800c8ec <__hexnan+0xcc>
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	b91b      	cbnz	r3, 800c900 <__hexnan+0xe0>
 800c8f8:	4547      	cmp	r7, r8
 800c8fa:	d127      	bne.n	800c94c <__hexnan+0x12c>
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	603b      	str	r3, [r7, #0]
 800c900:	2005      	movs	r0, #5
 800c902:	e026      	b.n	800c952 <__hexnan+0x132>
 800c904:	3501      	adds	r5, #1
 800c906:	2d08      	cmp	r5, #8
 800c908:	f10b 0b01 	add.w	fp, fp, #1
 800c90c:	dd06      	ble.n	800c91c <__hexnan+0xfc>
 800c90e:	4544      	cmp	r4, r8
 800c910:	d9c3      	bls.n	800c89a <__hexnan+0x7a>
 800c912:	2300      	movs	r3, #0
 800c914:	f844 3c04 	str.w	r3, [r4, #-4]
 800c918:	2501      	movs	r5, #1
 800c91a:	3c04      	subs	r4, #4
 800c91c:	6822      	ldr	r2, [r4, #0]
 800c91e:	f000 000f 	and.w	r0, r0, #15
 800c922:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c926:	6022      	str	r2, [r4, #0]
 800c928:	e7b7      	b.n	800c89a <__hexnan+0x7a>
 800c92a:	2508      	movs	r5, #8
 800c92c:	e7b5      	b.n	800c89a <__hexnan+0x7a>
 800c92e:	9b01      	ldr	r3, [sp, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d0df      	beq.n	800c8f4 <__hexnan+0xd4>
 800c934:	f04f 32ff 	mov.w	r2, #4294967295
 800c938:	f1c3 0320 	rsb	r3, r3, #32
 800c93c:	fa22 f303 	lsr.w	r3, r2, r3
 800c940:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c944:	401a      	ands	r2, r3
 800c946:	f846 2c04 	str.w	r2, [r6, #-4]
 800c94a:	e7d3      	b.n	800c8f4 <__hexnan+0xd4>
 800c94c:	3f04      	subs	r7, #4
 800c94e:	e7d1      	b.n	800c8f4 <__hexnan+0xd4>
 800c950:	2004      	movs	r0, #4
 800c952:	b007      	add	sp, #28
 800c954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c958 <_localeconv_r>:
 800c958:	4800      	ldr	r0, [pc, #0]	; (800c95c <_localeconv_r+0x4>)
 800c95a:	4770      	bx	lr
 800c95c:	20001090 	.word	0x20001090

0800c960 <__retarget_lock_init_recursive>:
 800c960:	4770      	bx	lr

0800c962 <__retarget_lock_acquire_recursive>:
 800c962:	4770      	bx	lr

0800c964 <__retarget_lock_release_recursive>:
 800c964:	4770      	bx	lr
	...

0800c968 <_lseek_r>:
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	4d07      	ldr	r5, [pc, #28]	; (800c988 <_lseek_r+0x20>)
 800c96c:	4604      	mov	r4, r0
 800c96e:	4608      	mov	r0, r1
 800c970:	4611      	mov	r1, r2
 800c972:	2200      	movs	r2, #0
 800c974:	602a      	str	r2, [r5, #0]
 800c976:	461a      	mov	r2, r3
 800c978:	f7f7 ff3c 	bl	80047f4 <_lseek>
 800c97c:	1c43      	adds	r3, r0, #1
 800c97e:	d102      	bne.n	800c986 <_lseek_r+0x1e>
 800c980:	682b      	ldr	r3, [r5, #0]
 800c982:	b103      	cbz	r3, 800c986 <_lseek_r+0x1e>
 800c984:	6023      	str	r3, [r4, #0]
 800c986:	bd38      	pop	{r3, r4, r5, pc}
 800c988:	20001bf4 	.word	0x20001bf4

0800c98c <__swhatbuf_r>:
 800c98c:	b570      	push	{r4, r5, r6, lr}
 800c98e:	460e      	mov	r6, r1
 800c990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c994:	2900      	cmp	r1, #0
 800c996:	b096      	sub	sp, #88	; 0x58
 800c998:	4614      	mov	r4, r2
 800c99a:	461d      	mov	r5, r3
 800c99c:	da08      	bge.n	800c9b0 <__swhatbuf_r+0x24>
 800c99e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	602a      	str	r2, [r5, #0]
 800c9a6:	061a      	lsls	r2, r3, #24
 800c9a8:	d410      	bmi.n	800c9cc <__swhatbuf_r+0x40>
 800c9aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9ae:	e00e      	b.n	800c9ce <__swhatbuf_r+0x42>
 800c9b0:	466a      	mov	r2, sp
 800c9b2:	f001 fbcd 	bl	800e150 <_fstat_r>
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	dbf1      	blt.n	800c99e <__swhatbuf_r+0x12>
 800c9ba:	9a01      	ldr	r2, [sp, #4]
 800c9bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c9c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c9c4:	425a      	negs	r2, r3
 800c9c6:	415a      	adcs	r2, r3
 800c9c8:	602a      	str	r2, [r5, #0]
 800c9ca:	e7ee      	b.n	800c9aa <__swhatbuf_r+0x1e>
 800c9cc:	2340      	movs	r3, #64	; 0x40
 800c9ce:	2000      	movs	r0, #0
 800c9d0:	6023      	str	r3, [r4, #0]
 800c9d2:	b016      	add	sp, #88	; 0x58
 800c9d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c9d8 <__smakebuf_r>:
 800c9d8:	898b      	ldrh	r3, [r1, #12]
 800c9da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9dc:	079d      	lsls	r5, r3, #30
 800c9de:	4606      	mov	r6, r0
 800c9e0:	460c      	mov	r4, r1
 800c9e2:	d507      	bpl.n	800c9f4 <__smakebuf_r+0x1c>
 800c9e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9e8:	6023      	str	r3, [r4, #0]
 800c9ea:	6123      	str	r3, [r4, #16]
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	6163      	str	r3, [r4, #20]
 800c9f0:	b002      	add	sp, #8
 800c9f2:	bd70      	pop	{r4, r5, r6, pc}
 800c9f4:	ab01      	add	r3, sp, #4
 800c9f6:	466a      	mov	r2, sp
 800c9f8:	f7ff ffc8 	bl	800c98c <__swhatbuf_r>
 800c9fc:	9900      	ldr	r1, [sp, #0]
 800c9fe:	4605      	mov	r5, r0
 800ca00:	4630      	mov	r0, r6
 800ca02:	f7fc faef 	bl	8008fe4 <_malloc_r>
 800ca06:	b948      	cbnz	r0, 800ca1c <__smakebuf_r+0x44>
 800ca08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca0c:	059a      	lsls	r2, r3, #22
 800ca0e:	d4ef      	bmi.n	800c9f0 <__smakebuf_r+0x18>
 800ca10:	f023 0303 	bic.w	r3, r3, #3
 800ca14:	f043 0302 	orr.w	r3, r3, #2
 800ca18:	81a3      	strh	r3, [r4, #12]
 800ca1a:	e7e3      	b.n	800c9e4 <__smakebuf_r+0xc>
 800ca1c:	4b0d      	ldr	r3, [pc, #52]	; (800ca54 <__smakebuf_r+0x7c>)
 800ca1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ca20:	89a3      	ldrh	r3, [r4, #12]
 800ca22:	6020      	str	r0, [r4, #0]
 800ca24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca28:	81a3      	strh	r3, [r4, #12]
 800ca2a:	9b00      	ldr	r3, [sp, #0]
 800ca2c:	6163      	str	r3, [r4, #20]
 800ca2e:	9b01      	ldr	r3, [sp, #4]
 800ca30:	6120      	str	r0, [r4, #16]
 800ca32:	b15b      	cbz	r3, 800ca4c <__smakebuf_r+0x74>
 800ca34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca38:	4630      	mov	r0, r6
 800ca3a:	f001 fb9b 	bl	800e174 <_isatty_r>
 800ca3e:	b128      	cbz	r0, 800ca4c <__smakebuf_r+0x74>
 800ca40:	89a3      	ldrh	r3, [r4, #12]
 800ca42:	f023 0303 	bic.w	r3, r3, #3
 800ca46:	f043 0301 	orr.w	r3, r3, #1
 800ca4a:	81a3      	strh	r3, [r4, #12]
 800ca4c:	89a0      	ldrh	r0, [r4, #12]
 800ca4e:	4305      	orrs	r5, r0
 800ca50:	81a5      	strh	r5, [r4, #12]
 800ca52:	e7cd      	b.n	800c9f0 <__smakebuf_r+0x18>
 800ca54:	0800c0d9 	.word	0x0800c0d9

0800ca58 <__ascii_mbtowc>:
 800ca58:	b082      	sub	sp, #8
 800ca5a:	b901      	cbnz	r1, 800ca5e <__ascii_mbtowc+0x6>
 800ca5c:	a901      	add	r1, sp, #4
 800ca5e:	b142      	cbz	r2, 800ca72 <__ascii_mbtowc+0x1a>
 800ca60:	b14b      	cbz	r3, 800ca76 <__ascii_mbtowc+0x1e>
 800ca62:	7813      	ldrb	r3, [r2, #0]
 800ca64:	600b      	str	r3, [r1, #0]
 800ca66:	7812      	ldrb	r2, [r2, #0]
 800ca68:	1e10      	subs	r0, r2, #0
 800ca6a:	bf18      	it	ne
 800ca6c:	2001      	movne	r0, #1
 800ca6e:	b002      	add	sp, #8
 800ca70:	4770      	bx	lr
 800ca72:	4610      	mov	r0, r2
 800ca74:	e7fb      	b.n	800ca6e <__ascii_mbtowc+0x16>
 800ca76:	f06f 0001 	mvn.w	r0, #1
 800ca7a:	e7f8      	b.n	800ca6e <__ascii_mbtowc+0x16>

0800ca7c <memcpy>:
 800ca7c:	440a      	add	r2, r1
 800ca7e:	4291      	cmp	r1, r2
 800ca80:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca84:	d100      	bne.n	800ca88 <memcpy+0xc>
 800ca86:	4770      	bx	lr
 800ca88:	b510      	push	{r4, lr}
 800ca8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca92:	4291      	cmp	r1, r2
 800ca94:	d1f9      	bne.n	800ca8a <memcpy+0xe>
 800ca96:	bd10      	pop	{r4, pc}

0800ca98 <memmove>:
 800ca98:	4288      	cmp	r0, r1
 800ca9a:	b510      	push	{r4, lr}
 800ca9c:	eb01 0402 	add.w	r4, r1, r2
 800caa0:	d902      	bls.n	800caa8 <memmove+0x10>
 800caa2:	4284      	cmp	r4, r0
 800caa4:	4623      	mov	r3, r4
 800caa6:	d807      	bhi.n	800cab8 <memmove+0x20>
 800caa8:	1e43      	subs	r3, r0, #1
 800caaa:	42a1      	cmp	r1, r4
 800caac:	d008      	beq.n	800cac0 <memmove+0x28>
 800caae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cab6:	e7f8      	b.n	800caaa <memmove+0x12>
 800cab8:	4402      	add	r2, r0
 800caba:	4601      	mov	r1, r0
 800cabc:	428a      	cmp	r2, r1
 800cabe:	d100      	bne.n	800cac2 <memmove+0x2a>
 800cac0:	bd10      	pop	{r4, pc}
 800cac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800caca:	e7f7      	b.n	800cabc <memmove+0x24>

0800cacc <__malloc_lock>:
 800cacc:	4801      	ldr	r0, [pc, #4]	; (800cad4 <__malloc_lock+0x8>)
 800cace:	f7ff bf48 	b.w	800c962 <__retarget_lock_acquire_recursive>
 800cad2:	bf00      	nop
 800cad4:	20001bf0 	.word	0x20001bf0

0800cad8 <__malloc_unlock>:
 800cad8:	4801      	ldr	r0, [pc, #4]	; (800cae0 <__malloc_unlock+0x8>)
 800cada:	f7ff bf43 	b.w	800c964 <__retarget_lock_release_recursive>
 800cade:	bf00      	nop
 800cae0:	20001bf0 	.word	0x20001bf0

0800cae4 <_Balloc>:
 800cae4:	b570      	push	{r4, r5, r6, lr}
 800cae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cae8:	4604      	mov	r4, r0
 800caea:	460d      	mov	r5, r1
 800caec:	b976      	cbnz	r6, 800cb0c <_Balloc+0x28>
 800caee:	2010      	movs	r0, #16
 800caf0:	f7fc f9f4 	bl	8008edc <malloc>
 800caf4:	4602      	mov	r2, r0
 800caf6:	6260      	str	r0, [r4, #36]	; 0x24
 800caf8:	b920      	cbnz	r0, 800cb04 <_Balloc+0x20>
 800cafa:	4b18      	ldr	r3, [pc, #96]	; (800cb5c <_Balloc+0x78>)
 800cafc:	4818      	ldr	r0, [pc, #96]	; (800cb60 <_Balloc+0x7c>)
 800cafe:	2166      	movs	r1, #102	; 0x66
 800cb00:	f7fc f992 	bl	8008e28 <__assert_func>
 800cb04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb08:	6006      	str	r6, [r0, #0]
 800cb0a:	60c6      	str	r6, [r0, #12]
 800cb0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb0e:	68f3      	ldr	r3, [r6, #12]
 800cb10:	b183      	cbz	r3, 800cb34 <_Balloc+0x50>
 800cb12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb1a:	b9b8      	cbnz	r0, 800cb4c <_Balloc+0x68>
 800cb1c:	2101      	movs	r1, #1
 800cb1e:	fa01 f605 	lsl.w	r6, r1, r5
 800cb22:	1d72      	adds	r2, r6, #5
 800cb24:	0092      	lsls	r2, r2, #2
 800cb26:	4620      	mov	r0, r4
 800cb28:	f000 fc9d 	bl	800d466 <_calloc_r>
 800cb2c:	b160      	cbz	r0, 800cb48 <_Balloc+0x64>
 800cb2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb32:	e00e      	b.n	800cb52 <_Balloc+0x6e>
 800cb34:	2221      	movs	r2, #33	; 0x21
 800cb36:	2104      	movs	r1, #4
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f000 fc94 	bl	800d466 <_calloc_r>
 800cb3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb40:	60f0      	str	r0, [r6, #12]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d1e4      	bne.n	800cb12 <_Balloc+0x2e>
 800cb48:	2000      	movs	r0, #0
 800cb4a:	bd70      	pop	{r4, r5, r6, pc}
 800cb4c:	6802      	ldr	r2, [r0, #0]
 800cb4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb52:	2300      	movs	r3, #0
 800cb54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb58:	e7f7      	b.n	800cb4a <_Balloc+0x66>
 800cb5a:	bf00      	nop
 800cb5c:	0800e468 	.word	0x0800e468
 800cb60:	0800e734 	.word	0x0800e734

0800cb64 <_Bfree>:
 800cb64:	b570      	push	{r4, r5, r6, lr}
 800cb66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb68:	4605      	mov	r5, r0
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	b976      	cbnz	r6, 800cb8c <_Bfree+0x28>
 800cb6e:	2010      	movs	r0, #16
 800cb70:	f7fc f9b4 	bl	8008edc <malloc>
 800cb74:	4602      	mov	r2, r0
 800cb76:	6268      	str	r0, [r5, #36]	; 0x24
 800cb78:	b920      	cbnz	r0, 800cb84 <_Bfree+0x20>
 800cb7a:	4b09      	ldr	r3, [pc, #36]	; (800cba0 <_Bfree+0x3c>)
 800cb7c:	4809      	ldr	r0, [pc, #36]	; (800cba4 <_Bfree+0x40>)
 800cb7e:	218a      	movs	r1, #138	; 0x8a
 800cb80:	f7fc f952 	bl	8008e28 <__assert_func>
 800cb84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb88:	6006      	str	r6, [r0, #0]
 800cb8a:	60c6      	str	r6, [r0, #12]
 800cb8c:	b13c      	cbz	r4, 800cb9e <_Bfree+0x3a>
 800cb8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cb90:	6862      	ldr	r2, [r4, #4]
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb98:	6021      	str	r1, [r4, #0]
 800cb9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb9e:	bd70      	pop	{r4, r5, r6, pc}
 800cba0:	0800e468 	.word	0x0800e468
 800cba4:	0800e734 	.word	0x0800e734

0800cba8 <__multadd>:
 800cba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbac:	690d      	ldr	r5, [r1, #16]
 800cbae:	4607      	mov	r7, r0
 800cbb0:	460c      	mov	r4, r1
 800cbb2:	461e      	mov	r6, r3
 800cbb4:	f101 0c14 	add.w	ip, r1, #20
 800cbb8:	2000      	movs	r0, #0
 800cbba:	f8dc 3000 	ldr.w	r3, [ip]
 800cbbe:	b299      	uxth	r1, r3
 800cbc0:	fb02 6101 	mla	r1, r2, r1, r6
 800cbc4:	0c1e      	lsrs	r6, r3, #16
 800cbc6:	0c0b      	lsrs	r3, r1, #16
 800cbc8:	fb02 3306 	mla	r3, r2, r6, r3
 800cbcc:	b289      	uxth	r1, r1
 800cbce:	3001      	adds	r0, #1
 800cbd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cbd4:	4285      	cmp	r5, r0
 800cbd6:	f84c 1b04 	str.w	r1, [ip], #4
 800cbda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cbde:	dcec      	bgt.n	800cbba <__multadd+0x12>
 800cbe0:	b30e      	cbz	r6, 800cc26 <__multadd+0x7e>
 800cbe2:	68a3      	ldr	r3, [r4, #8]
 800cbe4:	42ab      	cmp	r3, r5
 800cbe6:	dc19      	bgt.n	800cc1c <__multadd+0x74>
 800cbe8:	6861      	ldr	r1, [r4, #4]
 800cbea:	4638      	mov	r0, r7
 800cbec:	3101      	adds	r1, #1
 800cbee:	f7ff ff79 	bl	800cae4 <_Balloc>
 800cbf2:	4680      	mov	r8, r0
 800cbf4:	b928      	cbnz	r0, 800cc02 <__multadd+0x5a>
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	4b0c      	ldr	r3, [pc, #48]	; (800cc2c <__multadd+0x84>)
 800cbfa:	480d      	ldr	r0, [pc, #52]	; (800cc30 <__multadd+0x88>)
 800cbfc:	21b5      	movs	r1, #181	; 0xb5
 800cbfe:	f7fc f913 	bl	8008e28 <__assert_func>
 800cc02:	6922      	ldr	r2, [r4, #16]
 800cc04:	3202      	adds	r2, #2
 800cc06:	f104 010c 	add.w	r1, r4, #12
 800cc0a:	0092      	lsls	r2, r2, #2
 800cc0c:	300c      	adds	r0, #12
 800cc0e:	f7ff ff35 	bl	800ca7c <memcpy>
 800cc12:	4621      	mov	r1, r4
 800cc14:	4638      	mov	r0, r7
 800cc16:	f7ff ffa5 	bl	800cb64 <_Bfree>
 800cc1a:	4644      	mov	r4, r8
 800cc1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc20:	3501      	adds	r5, #1
 800cc22:	615e      	str	r6, [r3, #20]
 800cc24:	6125      	str	r5, [r4, #16]
 800cc26:	4620      	mov	r0, r4
 800cc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc2c:	0800e645 	.word	0x0800e645
 800cc30:	0800e734 	.word	0x0800e734

0800cc34 <__s2b>:
 800cc34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc38:	460c      	mov	r4, r1
 800cc3a:	4615      	mov	r5, r2
 800cc3c:	461f      	mov	r7, r3
 800cc3e:	2209      	movs	r2, #9
 800cc40:	3308      	adds	r3, #8
 800cc42:	4606      	mov	r6, r0
 800cc44:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc48:	2100      	movs	r1, #0
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	db09      	blt.n	800cc64 <__s2b+0x30>
 800cc50:	4630      	mov	r0, r6
 800cc52:	f7ff ff47 	bl	800cae4 <_Balloc>
 800cc56:	b940      	cbnz	r0, 800cc6a <__s2b+0x36>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	4b19      	ldr	r3, [pc, #100]	; (800ccc0 <__s2b+0x8c>)
 800cc5c:	4819      	ldr	r0, [pc, #100]	; (800ccc4 <__s2b+0x90>)
 800cc5e:	21ce      	movs	r1, #206	; 0xce
 800cc60:	f7fc f8e2 	bl	8008e28 <__assert_func>
 800cc64:	0052      	lsls	r2, r2, #1
 800cc66:	3101      	adds	r1, #1
 800cc68:	e7f0      	b.n	800cc4c <__s2b+0x18>
 800cc6a:	9b08      	ldr	r3, [sp, #32]
 800cc6c:	6143      	str	r3, [r0, #20]
 800cc6e:	2d09      	cmp	r5, #9
 800cc70:	f04f 0301 	mov.w	r3, #1
 800cc74:	6103      	str	r3, [r0, #16]
 800cc76:	dd16      	ble.n	800cca6 <__s2b+0x72>
 800cc78:	f104 0909 	add.w	r9, r4, #9
 800cc7c:	46c8      	mov	r8, r9
 800cc7e:	442c      	add	r4, r5
 800cc80:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cc84:	4601      	mov	r1, r0
 800cc86:	3b30      	subs	r3, #48	; 0x30
 800cc88:	220a      	movs	r2, #10
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	f7ff ff8c 	bl	800cba8 <__multadd>
 800cc90:	45a0      	cmp	r8, r4
 800cc92:	d1f5      	bne.n	800cc80 <__s2b+0x4c>
 800cc94:	f1a5 0408 	sub.w	r4, r5, #8
 800cc98:	444c      	add	r4, r9
 800cc9a:	1b2d      	subs	r5, r5, r4
 800cc9c:	1963      	adds	r3, r4, r5
 800cc9e:	42bb      	cmp	r3, r7
 800cca0:	db04      	blt.n	800ccac <__s2b+0x78>
 800cca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cca6:	340a      	adds	r4, #10
 800cca8:	2509      	movs	r5, #9
 800ccaa:	e7f6      	b.n	800cc9a <__s2b+0x66>
 800ccac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ccb0:	4601      	mov	r1, r0
 800ccb2:	3b30      	subs	r3, #48	; 0x30
 800ccb4:	220a      	movs	r2, #10
 800ccb6:	4630      	mov	r0, r6
 800ccb8:	f7ff ff76 	bl	800cba8 <__multadd>
 800ccbc:	e7ee      	b.n	800cc9c <__s2b+0x68>
 800ccbe:	bf00      	nop
 800ccc0:	0800e645 	.word	0x0800e645
 800ccc4:	0800e734 	.word	0x0800e734

0800ccc8 <__hi0bits>:
 800ccc8:	0c03      	lsrs	r3, r0, #16
 800ccca:	041b      	lsls	r3, r3, #16
 800cccc:	b9d3      	cbnz	r3, 800cd04 <__hi0bits+0x3c>
 800ccce:	0400      	lsls	r0, r0, #16
 800ccd0:	2310      	movs	r3, #16
 800ccd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ccd6:	bf04      	itt	eq
 800ccd8:	0200      	lsleq	r0, r0, #8
 800ccda:	3308      	addeq	r3, #8
 800ccdc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cce0:	bf04      	itt	eq
 800cce2:	0100      	lsleq	r0, r0, #4
 800cce4:	3304      	addeq	r3, #4
 800cce6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ccea:	bf04      	itt	eq
 800ccec:	0080      	lsleq	r0, r0, #2
 800ccee:	3302      	addeq	r3, #2
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	db05      	blt.n	800cd00 <__hi0bits+0x38>
 800ccf4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ccf8:	f103 0301 	add.w	r3, r3, #1
 800ccfc:	bf08      	it	eq
 800ccfe:	2320      	moveq	r3, #32
 800cd00:	4618      	mov	r0, r3
 800cd02:	4770      	bx	lr
 800cd04:	2300      	movs	r3, #0
 800cd06:	e7e4      	b.n	800ccd2 <__hi0bits+0xa>

0800cd08 <__lo0bits>:
 800cd08:	6803      	ldr	r3, [r0, #0]
 800cd0a:	f013 0207 	ands.w	r2, r3, #7
 800cd0e:	4601      	mov	r1, r0
 800cd10:	d00b      	beq.n	800cd2a <__lo0bits+0x22>
 800cd12:	07da      	lsls	r2, r3, #31
 800cd14:	d423      	bmi.n	800cd5e <__lo0bits+0x56>
 800cd16:	0798      	lsls	r0, r3, #30
 800cd18:	bf49      	itett	mi
 800cd1a:	085b      	lsrmi	r3, r3, #1
 800cd1c:	089b      	lsrpl	r3, r3, #2
 800cd1e:	2001      	movmi	r0, #1
 800cd20:	600b      	strmi	r3, [r1, #0]
 800cd22:	bf5c      	itt	pl
 800cd24:	600b      	strpl	r3, [r1, #0]
 800cd26:	2002      	movpl	r0, #2
 800cd28:	4770      	bx	lr
 800cd2a:	b298      	uxth	r0, r3
 800cd2c:	b9a8      	cbnz	r0, 800cd5a <__lo0bits+0x52>
 800cd2e:	0c1b      	lsrs	r3, r3, #16
 800cd30:	2010      	movs	r0, #16
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	b90a      	cbnz	r2, 800cd3a <__lo0bits+0x32>
 800cd36:	3008      	adds	r0, #8
 800cd38:	0a1b      	lsrs	r3, r3, #8
 800cd3a:	071a      	lsls	r2, r3, #28
 800cd3c:	bf04      	itt	eq
 800cd3e:	091b      	lsreq	r3, r3, #4
 800cd40:	3004      	addeq	r0, #4
 800cd42:	079a      	lsls	r2, r3, #30
 800cd44:	bf04      	itt	eq
 800cd46:	089b      	lsreq	r3, r3, #2
 800cd48:	3002      	addeq	r0, #2
 800cd4a:	07da      	lsls	r2, r3, #31
 800cd4c:	d403      	bmi.n	800cd56 <__lo0bits+0x4e>
 800cd4e:	085b      	lsrs	r3, r3, #1
 800cd50:	f100 0001 	add.w	r0, r0, #1
 800cd54:	d005      	beq.n	800cd62 <__lo0bits+0x5a>
 800cd56:	600b      	str	r3, [r1, #0]
 800cd58:	4770      	bx	lr
 800cd5a:	4610      	mov	r0, r2
 800cd5c:	e7e9      	b.n	800cd32 <__lo0bits+0x2a>
 800cd5e:	2000      	movs	r0, #0
 800cd60:	4770      	bx	lr
 800cd62:	2020      	movs	r0, #32
 800cd64:	4770      	bx	lr
	...

0800cd68 <__i2b>:
 800cd68:	b510      	push	{r4, lr}
 800cd6a:	460c      	mov	r4, r1
 800cd6c:	2101      	movs	r1, #1
 800cd6e:	f7ff feb9 	bl	800cae4 <_Balloc>
 800cd72:	4602      	mov	r2, r0
 800cd74:	b928      	cbnz	r0, 800cd82 <__i2b+0x1a>
 800cd76:	4b05      	ldr	r3, [pc, #20]	; (800cd8c <__i2b+0x24>)
 800cd78:	4805      	ldr	r0, [pc, #20]	; (800cd90 <__i2b+0x28>)
 800cd7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cd7e:	f7fc f853 	bl	8008e28 <__assert_func>
 800cd82:	2301      	movs	r3, #1
 800cd84:	6144      	str	r4, [r0, #20]
 800cd86:	6103      	str	r3, [r0, #16]
 800cd88:	bd10      	pop	{r4, pc}
 800cd8a:	bf00      	nop
 800cd8c:	0800e645 	.word	0x0800e645
 800cd90:	0800e734 	.word	0x0800e734

0800cd94 <__multiply>:
 800cd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd98:	4691      	mov	r9, r2
 800cd9a:	690a      	ldr	r2, [r1, #16]
 800cd9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	bfb8      	it	lt
 800cda4:	460b      	movlt	r3, r1
 800cda6:	460c      	mov	r4, r1
 800cda8:	bfbc      	itt	lt
 800cdaa:	464c      	movlt	r4, r9
 800cdac:	4699      	movlt	r9, r3
 800cdae:	6927      	ldr	r7, [r4, #16]
 800cdb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cdb4:	68a3      	ldr	r3, [r4, #8]
 800cdb6:	6861      	ldr	r1, [r4, #4]
 800cdb8:	eb07 060a 	add.w	r6, r7, sl
 800cdbc:	42b3      	cmp	r3, r6
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	bfb8      	it	lt
 800cdc2:	3101      	addlt	r1, #1
 800cdc4:	f7ff fe8e 	bl	800cae4 <_Balloc>
 800cdc8:	b930      	cbnz	r0, 800cdd8 <__multiply+0x44>
 800cdca:	4602      	mov	r2, r0
 800cdcc:	4b44      	ldr	r3, [pc, #272]	; (800cee0 <__multiply+0x14c>)
 800cdce:	4845      	ldr	r0, [pc, #276]	; (800cee4 <__multiply+0x150>)
 800cdd0:	f240 115d 	movw	r1, #349	; 0x15d
 800cdd4:	f7fc f828 	bl	8008e28 <__assert_func>
 800cdd8:	f100 0514 	add.w	r5, r0, #20
 800cddc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cde0:	462b      	mov	r3, r5
 800cde2:	2200      	movs	r2, #0
 800cde4:	4543      	cmp	r3, r8
 800cde6:	d321      	bcc.n	800ce2c <__multiply+0x98>
 800cde8:	f104 0314 	add.w	r3, r4, #20
 800cdec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cdf0:	f109 0314 	add.w	r3, r9, #20
 800cdf4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cdf8:	9202      	str	r2, [sp, #8]
 800cdfa:	1b3a      	subs	r2, r7, r4
 800cdfc:	3a15      	subs	r2, #21
 800cdfe:	f022 0203 	bic.w	r2, r2, #3
 800ce02:	3204      	adds	r2, #4
 800ce04:	f104 0115 	add.w	r1, r4, #21
 800ce08:	428f      	cmp	r7, r1
 800ce0a:	bf38      	it	cc
 800ce0c:	2204      	movcc	r2, #4
 800ce0e:	9201      	str	r2, [sp, #4]
 800ce10:	9a02      	ldr	r2, [sp, #8]
 800ce12:	9303      	str	r3, [sp, #12]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d80c      	bhi.n	800ce32 <__multiply+0x9e>
 800ce18:	2e00      	cmp	r6, #0
 800ce1a:	dd03      	ble.n	800ce24 <__multiply+0x90>
 800ce1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d05a      	beq.n	800ceda <__multiply+0x146>
 800ce24:	6106      	str	r6, [r0, #16]
 800ce26:	b005      	add	sp, #20
 800ce28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce2c:	f843 2b04 	str.w	r2, [r3], #4
 800ce30:	e7d8      	b.n	800cde4 <__multiply+0x50>
 800ce32:	f8b3 a000 	ldrh.w	sl, [r3]
 800ce36:	f1ba 0f00 	cmp.w	sl, #0
 800ce3a:	d024      	beq.n	800ce86 <__multiply+0xf2>
 800ce3c:	f104 0e14 	add.w	lr, r4, #20
 800ce40:	46a9      	mov	r9, r5
 800ce42:	f04f 0c00 	mov.w	ip, #0
 800ce46:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ce4a:	f8d9 1000 	ldr.w	r1, [r9]
 800ce4e:	fa1f fb82 	uxth.w	fp, r2
 800ce52:	b289      	uxth	r1, r1
 800ce54:	fb0a 110b 	mla	r1, sl, fp, r1
 800ce58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ce5c:	f8d9 2000 	ldr.w	r2, [r9]
 800ce60:	4461      	add	r1, ip
 800ce62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce66:	fb0a c20b 	mla	r2, sl, fp, ip
 800ce6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ce6e:	b289      	uxth	r1, r1
 800ce70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce74:	4577      	cmp	r7, lr
 800ce76:	f849 1b04 	str.w	r1, [r9], #4
 800ce7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce7e:	d8e2      	bhi.n	800ce46 <__multiply+0xb2>
 800ce80:	9a01      	ldr	r2, [sp, #4]
 800ce82:	f845 c002 	str.w	ip, [r5, r2]
 800ce86:	9a03      	ldr	r2, [sp, #12]
 800ce88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ce8c:	3304      	adds	r3, #4
 800ce8e:	f1b9 0f00 	cmp.w	r9, #0
 800ce92:	d020      	beq.n	800ced6 <__multiply+0x142>
 800ce94:	6829      	ldr	r1, [r5, #0]
 800ce96:	f104 0c14 	add.w	ip, r4, #20
 800ce9a:	46ae      	mov	lr, r5
 800ce9c:	f04f 0a00 	mov.w	sl, #0
 800cea0:	f8bc b000 	ldrh.w	fp, [ip]
 800cea4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cea8:	fb09 220b 	mla	r2, r9, fp, r2
 800ceac:	4492      	add	sl, r2
 800ceae:	b289      	uxth	r1, r1
 800ceb0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ceb4:	f84e 1b04 	str.w	r1, [lr], #4
 800ceb8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cebc:	f8be 1000 	ldrh.w	r1, [lr]
 800cec0:	0c12      	lsrs	r2, r2, #16
 800cec2:	fb09 1102 	mla	r1, r9, r2, r1
 800cec6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ceca:	4567      	cmp	r7, ip
 800cecc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ced0:	d8e6      	bhi.n	800cea0 <__multiply+0x10c>
 800ced2:	9a01      	ldr	r2, [sp, #4]
 800ced4:	50a9      	str	r1, [r5, r2]
 800ced6:	3504      	adds	r5, #4
 800ced8:	e79a      	b.n	800ce10 <__multiply+0x7c>
 800ceda:	3e01      	subs	r6, #1
 800cedc:	e79c      	b.n	800ce18 <__multiply+0x84>
 800cede:	bf00      	nop
 800cee0:	0800e645 	.word	0x0800e645
 800cee4:	0800e734 	.word	0x0800e734

0800cee8 <__pow5mult>:
 800cee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceec:	4615      	mov	r5, r2
 800ceee:	f012 0203 	ands.w	r2, r2, #3
 800cef2:	4606      	mov	r6, r0
 800cef4:	460f      	mov	r7, r1
 800cef6:	d007      	beq.n	800cf08 <__pow5mult+0x20>
 800cef8:	4c25      	ldr	r4, [pc, #148]	; (800cf90 <__pow5mult+0xa8>)
 800cefa:	3a01      	subs	r2, #1
 800cefc:	2300      	movs	r3, #0
 800cefe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf02:	f7ff fe51 	bl	800cba8 <__multadd>
 800cf06:	4607      	mov	r7, r0
 800cf08:	10ad      	asrs	r5, r5, #2
 800cf0a:	d03d      	beq.n	800cf88 <__pow5mult+0xa0>
 800cf0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cf0e:	b97c      	cbnz	r4, 800cf30 <__pow5mult+0x48>
 800cf10:	2010      	movs	r0, #16
 800cf12:	f7fb ffe3 	bl	8008edc <malloc>
 800cf16:	4602      	mov	r2, r0
 800cf18:	6270      	str	r0, [r6, #36]	; 0x24
 800cf1a:	b928      	cbnz	r0, 800cf28 <__pow5mult+0x40>
 800cf1c:	4b1d      	ldr	r3, [pc, #116]	; (800cf94 <__pow5mult+0xac>)
 800cf1e:	481e      	ldr	r0, [pc, #120]	; (800cf98 <__pow5mult+0xb0>)
 800cf20:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cf24:	f7fb ff80 	bl	8008e28 <__assert_func>
 800cf28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf2c:	6004      	str	r4, [r0, #0]
 800cf2e:	60c4      	str	r4, [r0, #12]
 800cf30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cf34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf38:	b94c      	cbnz	r4, 800cf4e <__pow5mult+0x66>
 800cf3a:	f240 2171 	movw	r1, #625	; 0x271
 800cf3e:	4630      	mov	r0, r6
 800cf40:	f7ff ff12 	bl	800cd68 <__i2b>
 800cf44:	2300      	movs	r3, #0
 800cf46:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	6003      	str	r3, [r0, #0]
 800cf4e:	f04f 0900 	mov.w	r9, #0
 800cf52:	07eb      	lsls	r3, r5, #31
 800cf54:	d50a      	bpl.n	800cf6c <__pow5mult+0x84>
 800cf56:	4639      	mov	r1, r7
 800cf58:	4622      	mov	r2, r4
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	f7ff ff1a 	bl	800cd94 <__multiply>
 800cf60:	4639      	mov	r1, r7
 800cf62:	4680      	mov	r8, r0
 800cf64:	4630      	mov	r0, r6
 800cf66:	f7ff fdfd 	bl	800cb64 <_Bfree>
 800cf6a:	4647      	mov	r7, r8
 800cf6c:	106d      	asrs	r5, r5, #1
 800cf6e:	d00b      	beq.n	800cf88 <__pow5mult+0xa0>
 800cf70:	6820      	ldr	r0, [r4, #0]
 800cf72:	b938      	cbnz	r0, 800cf84 <__pow5mult+0x9c>
 800cf74:	4622      	mov	r2, r4
 800cf76:	4621      	mov	r1, r4
 800cf78:	4630      	mov	r0, r6
 800cf7a:	f7ff ff0b 	bl	800cd94 <__multiply>
 800cf7e:	6020      	str	r0, [r4, #0]
 800cf80:	f8c0 9000 	str.w	r9, [r0]
 800cf84:	4604      	mov	r4, r0
 800cf86:	e7e4      	b.n	800cf52 <__pow5mult+0x6a>
 800cf88:	4638      	mov	r0, r7
 800cf8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf8e:	bf00      	nop
 800cf90:	0800e880 	.word	0x0800e880
 800cf94:	0800e468 	.word	0x0800e468
 800cf98:	0800e734 	.word	0x0800e734

0800cf9c <__lshift>:
 800cf9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfa0:	460c      	mov	r4, r1
 800cfa2:	6849      	ldr	r1, [r1, #4]
 800cfa4:	6923      	ldr	r3, [r4, #16]
 800cfa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cfaa:	68a3      	ldr	r3, [r4, #8]
 800cfac:	4607      	mov	r7, r0
 800cfae:	4691      	mov	r9, r2
 800cfb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cfb4:	f108 0601 	add.w	r6, r8, #1
 800cfb8:	42b3      	cmp	r3, r6
 800cfba:	db0b      	blt.n	800cfd4 <__lshift+0x38>
 800cfbc:	4638      	mov	r0, r7
 800cfbe:	f7ff fd91 	bl	800cae4 <_Balloc>
 800cfc2:	4605      	mov	r5, r0
 800cfc4:	b948      	cbnz	r0, 800cfda <__lshift+0x3e>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	4b2a      	ldr	r3, [pc, #168]	; (800d074 <__lshift+0xd8>)
 800cfca:	482b      	ldr	r0, [pc, #172]	; (800d078 <__lshift+0xdc>)
 800cfcc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cfd0:	f7fb ff2a 	bl	8008e28 <__assert_func>
 800cfd4:	3101      	adds	r1, #1
 800cfd6:	005b      	lsls	r3, r3, #1
 800cfd8:	e7ee      	b.n	800cfb8 <__lshift+0x1c>
 800cfda:	2300      	movs	r3, #0
 800cfdc:	f100 0114 	add.w	r1, r0, #20
 800cfe0:	f100 0210 	add.w	r2, r0, #16
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	4553      	cmp	r3, sl
 800cfe8:	db37      	blt.n	800d05a <__lshift+0xbe>
 800cfea:	6920      	ldr	r0, [r4, #16]
 800cfec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cff0:	f104 0314 	add.w	r3, r4, #20
 800cff4:	f019 091f 	ands.w	r9, r9, #31
 800cff8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cffc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d000:	d02f      	beq.n	800d062 <__lshift+0xc6>
 800d002:	f1c9 0e20 	rsb	lr, r9, #32
 800d006:	468a      	mov	sl, r1
 800d008:	f04f 0c00 	mov.w	ip, #0
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	fa02 f209 	lsl.w	r2, r2, r9
 800d012:	ea42 020c 	orr.w	r2, r2, ip
 800d016:	f84a 2b04 	str.w	r2, [sl], #4
 800d01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d01e:	4298      	cmp	r0, r3
 800d020:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d024:	d8f2      	bhi.n	800d00c <__lshift+0x70>
 800d026:	1b03      	subs	r3, r0, r4
 800d028:	3b15      	subs	r3, #21
 800d02a:	f023 0303 	bic.w	r3, r3, #3
 800d02e:	3304      	adds	r3, #4
 800d030:	f104 0215 	add.w	r2, r4, #21
 800d034:	4290      	cmp	r0, r2
 800d036:	bf38      	it	cc
 800d038:	2304      	movcc	r3, #4
 800d03a:	f841 c003 	str.w	ip, [r1, r3]
 800d03e:	f1bc 0f00 	cmp.w	ip, #0
 800d042:	d001      	beq.n	800d048 <__lshift+0xac>
 800d044:	f108 0602 	add.w	r6, r8, #2
 800d048:	3e01      	subs	r6, #1
 800d04a:	4638      	mov	r0, r7
 800d04c:	612e      	str	r6, [r5, #16]
 800d04e:	4621      	mov	r1, r4
 800d050:	f7ff fd88 	bl	800cb64 <_Bfree>
 800d054:	4628      	mov	r0, r5
 800d056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d05a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d05e:	3301      	adds	r3, #1
 800d060:	e7c1      	b.n	800cfe6 <__lshift+0x4a>
 800d062:	3904      	subs	r1, #4
 800d064:	f853 2b04 	ldr.w	r2, [r3], #4
 800d068:	f841 2f04 	str.w	r2, [r1, #4]!
 800d06c:	4298      	cmp	r0, r3
 800d06e:	d8f9      	bhi.n	800d064 <__lshift+0xc8>
 800d070:	e7ea      	b.n	800d048 <__lshift+0xac>
 800d072:	bf00      	nop
 800d074:	0800e645 	.word	0x0800e645
 800d078:	0800e734 	.word	0x0800e734

0800d07c <__mcmp>:
 800d07c:	b530      	push	{r4, r5, lr}
 800d07e:	6902      	ldr	r2, [r0, #16]
 800d080:	690c      	ldr	r4, [r1, #16]
 800d082:	1b12      	subs	r2, r2, r4
 800d084:	d10e      	bne.n	800d0a4 <__mcmp+0x28>
 800d086:	f100 0314 	add.w	r3, r0, #20
 800d08a:	3114      	adds	r1, #20
 800d08c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d090:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d094:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d098:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d09c:	42a5      	cmp	r5, r4
 800d09e:	d003      	beq.n	800d0a8 <__mcmp+0x2c>
 800d0a0:	d305      	bcc.n	800d0ae <__mcmp+0x32>
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	4610      	mov	r0, r2
 800d0a6:	bd30      	pop	{r4, r5, pc}
 800d0a8:	4283      	cmp	r3, r0
 800d0aa:	d3f3      	bcc.n	800d094 <__mcmp+0x18>
 800d0ac:	e7fa      	b.n	800d0a4 <__mcmp+0x28>
 800d0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b2:	e7f7      	b.n	800d0a4 <__mcmp+0x28>

0800d0b4 <__mdiff>:
 800d0b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b8:	460c      	mov	r4, r1
 800d0ba:	4606      	mov	r6, r0
 800d0bc:	4611      	mov	r1, r2
 800d0be:	4620      	mov	r0, r4
 800d0c0:	4690      	mov	r8, r2
 800d0c2:	f7ff ffdb 	bl	800d07c <__mcmp>
 800d0c6:	1e05      	subs	r5, r0, #0
 800d0c8:	d110      	bne.n	800d0ec <__mdiff+0x38>
 800d0ca:	4629      	mov	r1, r5
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	f7ff fd09 	bl	800cae4 <_Balloc>
 800d0d2:	b930      	cbnz	r0, 800d0e2 <__mdiff+0x2e>
 800d0d4:	4b3a      	ldr	r3, [pc, #232]	; (800d1c0 <__mdiff+0x10c>)
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	f240 2132 	movw	r1, #562	; 0x232
 800d0dc:	4839      	ldr	r0, [pc, #228]	; (800d1c4 <__mdiff+0x110>)
 800d0de:	f7fb fea3 	bl	8008e28 <__assert_func>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ec:	bfa4      	itt	ge
 800d0ee:	4643      	movge	r3, r8
 800d0f0:	46a0      	movge	r8, r4
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d0f8:	bfa6      	itte	ge
 800d0fa:	461c      	movge	r4, r3
 800d0fc:	2500      	movge	r5, #0
 800d0fe:	2501      	movlt	r5, #1
 800d100:	f7ff fcf0 	bl	800cae4 <_Balloc>
 800d104:	b920      	cbnz	r0, 800d110 <__mdiff+0x5c>
 800d106:	4b2e      	ldr	r3, [pc, #184]	; (800d1c0 <__mdiff+0x10c>)
 800d108:	4602      	mov	r2, r0
 800d10a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d10e:	e7e5      	b.n	800d0dc <__mdiff+0x28>
 800d110:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d114:	6926      	ldr	r6, [r4, #16]
 800d116:	60c5      	str	r5, [r0, #12]
 800d118:	f104 0914 	add.w	r9, r4, #20
 800d11c:	f108 0514 	add.w	r5, r8, #20
 800d120:	f100 0e14 	add.w	lr, r0, #20
 800d124:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d128:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d12c:	f108 0210 	add.w	r2, r8, #16
 800d130:	46f2      	mov	sl, lr
 800d132:	2100      	movs	r1, #0
 800d134:	f859 3b04 	ldr.w	r3, [r9], #4
 800d138:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d13c:	fa1f f883 	uxth.w	r8, r3
 800d140:	fa11 f18b 	uxtah	r1, r1, fp
 800d144:	0c1b      	lsrs	r3, r3, #16
 800d146:	eba1 0808 	sub.w	r8, r1, r8
 800d14a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d14e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d152:	fa1f f888 	uxth.w	r8, r8
 800d156:	1419      	asrs	r1, r3, #16
 800d158:	454e      	cmp	r6, r9
 800d15a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d15e:	f84a 3b04 	str.w	r3, [sl], #4
 800d162:	d8e7      	bhi.n	800d134 <__mdiff+0x80>
 800d164:	1b33      	subs	r3, r6, r4
 800d166:	3b15      	subs	r3, #21
 800d168:	f023 0303 	bic.w	r3, r3, #3
 800d16c:	3304      	adds	r3, #4
 800d16e:	3415      	adds	r4, #21
 800d170:	42a6      	cmp	r6, r4
 800d172:	bf38      	it	cc
 800d174:	2304      	movcc	r3, #4
 800d176:	441d      	add	r5, r3
 800d178:	4473      	add	r3, lr
 800d17a:	469e      	mov	lr, r3
 800d17c:	462e      	mov	r6, r5
 800d17e:	4566      	cmp	r6, ip
 800d180:	d30e      	bcc.n	800d1a0 <__mdiff+0xec>
 800d182:	f10c 0203 	add.w	r2, ip, #3
 800d186:	1b52      	subs	r2, r2, r5
 800d188:	f022 0203 	bic.w	r2, r2, #3
 800d18c:	3d03      	subs	r5, #3
 800d18e:	45ac      	cmp	ip, r5
 800d190:	bf38      	it	cc
 800d192:	2200      	movcc	r2, #0
 800d194:	441a      	add	r2, r3
 800d196:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d19a:	b17b      	cbz	r3, 800d1bc <__mdiff+0x108>
 800d19c:	6107      	str	r7, [r0, #16]
 800d19e:	e7a3      	b.n	800d0e8 <__mdiff+0x34>
 800d1a0:	f856 8b04 	ldr.w	r8, [r6], #4
 800d1a4:	fa11 f288 	uxtah	r2, r1, r8
 800d1a8:	1414      	asrs	r4, r2, #16
 800d1aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d1ae:	b292      	uxth	r2, r2
 800d1b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d1b4:	f84e 2b04 	str.w	r2, [lr], #4
 800d1b8:	1421      	asrs	r1, r4, #16
 800d1ba:	e7e0      	b.n	800d17e <__mdiff+0xca>
 800d1bc:	3f01      	subs	r7, #1
 800d1be:	e7ea      	b.n	800d196 <__mdiff+0xe2>
 800d1c0:	0800e645 	.word	0x0800e645
 800d1c4:	0800e734 	.word	0x0800e734

0800d1c8 <__ulp>:
 800d1c8:	b082      	sub	sp, #8
 800d1ca:	ed8d 0b00 	vstr	d0, [sp]
 800d1ce:	9b01      	ldr	r3, [sp, #4]
 800d1d0:	4912      	ldr	r1, [pc, #72]	; (800d21c <__ulp+0x54>)
 800d1d2:	4019      	ands	r1, r3
 800d1d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d1d8:	2900      	cmp	r1, #0
 800d1da:	dd05      	ble.n	800d1e8 <__ulp+0x20>
 800d1dc:	2200      	movs	r2, #0
 800d1de:	460b      	mov	r3, r1
 800d1e0:	ec43 2b10 	vmov	d0, r2, r3
 800d1e4:	b002      	add	sp, #8
 800d1e6:	4770      	bx	lr
 800d1e8:	4249      	negs	r1, r1
 800d1ea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d1ee:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d1f2:	f04f 0200 	mov.w	r2, #0
 800d1f6:	f04f 0300 	mov.w	r3, #0
 800d1fa:	da04      	bge.n	800d206 <__ulp+0x3e>
 800d1fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d200:	fa41 f300 	asr.w	r3, r1, r0
 800d204:	e7ec      	b.n	800d1e0 <__ulp+0x18>
 800d206:	f1a0 0114 	sub.w	r1, r0, #20
 800d20a:	291e      	cmp	r1, #30
 800d20c:	bfda      	itte	le
 800d20e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d212:	fa20 f101 	lsrle.w	r1, r0, r1
 800d216:	2101      	movgt	r1, #1
 800d218:	460a      	mov	r2, r1
 800d21a:	e7e1      	b.n	800d1e0 <__ulp+0x18>
 800d21c:	7ff00000 	.word	0x7ff00000

0800d220 <__b2d>:
 800d220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d222:	6905      	ldr	r5, [r0, #16]
 800d224:	f100 0714 	add.w	r7, r0, #20
 800d228:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d22c:	1f2e      	subs	r6, r5, #4
 800d22e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d232:	4620      	mov	r0, r4
 800d234:	f7ff fd48 	bl	800ccc8 <__hi0bits>
 800d238:	f1c0 0320 	rsb	r3, r0, #32
 800d23c:	280a      	cmp	r0, #10
 800d23e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d2bc <__b2d+0x9c>
 800d242:	600b      	str	r3, [r1, #0]
 800d244:	dc14      	bgt.n	800d270 <__b2d+0x50>
 800d246:	f1c0 0e0b 	rsb	lr, r0, #11
 800d24a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d24e:	42b7      	cmp	r7, r6
 800d250:	ea41 030c 	orr.w	r3, r1, ip
 800d254:	bf34      	ite	cc
 800d256:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d25a:	2100      	movcs	r1, #0
 800d25c:	3015      	adds	r0, #21
 800d25e:	fa04 f000 	lsl.w	r0, r4, r0
 800d262:	fa21 f10e 	lsr.w	r1, r1, lr
 800d266:	ea40 0201 	orr.w	r2, r0, r1
 800d26a:	ec43 2b10 	vmov	d0, r2, r3
 800d26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d270:	42b7      	cmp	r7, r6
 800d272:	bf3a      	itte	cc
 800d274:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d278:	f1a5 0608 	subcc.w	r6, r5, #8
 800d27c:	2100      	movcs	r1, #0
 800d27e:	380b      	subs	r0, #11
 800d280:	d017      	beq.n	800d2b2 <__b2d+0x92>
 800d282:	f1c0 0c20 	rsb	ip, r0, #32
 800d286:	fa04 f500 	lsl.w	r5, r4, r0
 800d28a:	42be      	cmp	r6, r7
 800d28c:	fa21 f40c 	lsr.w	r4, r1, ip
 800d290:	ea45 0504 	orr.w	r5, r5, r4
 800d294:	bf8c      	ite	hi
 800d296:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d29a:	2400      	movls	r4, #0
 800d29c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d2a0:	fa01 f000 	lsl.w	r0, r1, r0
 800d2a4:	fa24 f40c 	lsr.w	r4, r4, ip
 800d2a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d2ac:	ea40 0204 	orr.w	r2, r0, r4
 800d2b0:	e7db      	b.n	800d26a <__b2d+0x4a>
 800d2b2:	ea44 030c 	orr.w	r3, r4, ip
 800d2b6:	460a      	mov	r2, r1
 800d2b8:	e7d7      	b.n	800d26a <__b2d+0x4a>
 800d2ba:	bf00      	nop
 800d2bc:	3ff00000 	.word	0x3ff00000

0800d2c0 <__d2b>:
 800d2c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d2c4:	4689      	mov	r9, r1
 800d2c6:	2101      	movs	r1, #1
 800d2c8:	ec57 6b10 	vmov	r6, r7, d0
 800d2cc:	4690      	mov	r8, r2
 800d2ce:	f7ff fc09 	bl	800cae4 <_Balloc>
 800d2d2:	4604      	mov	r4, r0
 800d2d4:	b930      	cbnz	r0, 800d2e4 <__d2b+0x24>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	4b25      	ldr	r3, [pc, #148]	; (800d370 <__d2b+0xb0>)
 800d2da:	4826      	ldr	r0, [pc, #152]	; (800d374 <__d2b+0xb4>)
 800d2dc:	f240 310a 	movw	r1, #778	; 0x30a
 800d2e0:	f7fb fda2 	bl	8008e28 <__assert_func>
 800d2e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d2e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d2ec:	bb35      	cbnz	r5, 800d33c <__d2b+0x7c>
 800d2ee:	2e00      	cmp	r6, #0
 800d2f0:	9301      	str	r3, [sp, #4]
 800d2f2:	d028      	beq.n	800d346 <__d2b+0x86>
 800d2f4:	4668      	mov	r0, sp
 800d2f6:	9600      	str	r6, [sp, #0]
 800d2f8:	f7ff fd06 	bl	800cd08 <__lo0bits>
 800d2fc:	9900      	ldr	r1, [sp, #0]
 800d2fe:	b300      	cbz	r0, 800d342 <__d2b+0x82>
 800d300:	9a01      	ldr	r2, [sp, #4]
 800d302:	f1c0 0320 	rsb	r3, r0, #32
 800d306:	fa02 f303 	lsl.w	r3, r2, r3
 800d30a:	430b      	orrs	r3, r1
 800d30c:	40c2      	lsrs	r2, r0
 800d30e:	6163      	str	r3, [r4, #20]
 800d310:	9201      	str	r2, [sp, #4]
 800d312:	9b01      	ldr	r3, [sp, #4]
 800d314:	61a3      	str	r3, [r4, #24]
 800d316:	2b00      	cmp	r3, #0
 800d318:	bf14      	ite	ne
 800d31a:	2202      	movne	r2, #2
 800d31c:	2201      	moveq	r2, #1
 800d31e:	6122      	str	r2, [r4, #16]
 800d320:	b1d5      	cbz	r5, 800d358 <__d2b+0x98>
 800d322:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d326:	4405      	add	r5, r0
 800d328:	f8c9 5000 	str.w	r5, [r9]
 800d32c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d330:	f8c8 0000 	str.w	r0, [r8]
 800d334:	4620      	mov	r0, r4
 800d336:	b003      	add	sp, #12
 800d338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d33c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d340:	e7d5      	b.n	800d2ee <__d2b+0x2e>
 800d342:	6161      	str	r1, [r4, #20]
 800d344:	e7e5      	b.n	800d312 <__d2b+0x52>
 800d346:	a801      	add	r0, sp, #4
 800d348:	f7ff fcde 	bl	800cd08 <__lo0bits>
 800d34c:	9b01      	ldr	r3, [sp, #4]
 800d34e:	6163      	str	r3, [r4, #20]
 800d350:	2201      	movs	r2, #1
 800d352:	6122      	str	r2, [r4, #16]
 800d354:	3020      	adds	r0, #32
 800d356:	e7e3      	b.n	800d320 <__d2b+0x60>
 800d358:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d35c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d360:	f8c9 0000 	str.w	r0, [r9]
 800d364:	6918      	ldr	r0, [r3, #16]
 800d366:	f7ff fcaf 	bl	800ccc8 <__hi0bits>
 800d36a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d36e:	e7df      	b.n	800d330 <__d2b+0x70>
 800d370:	0800e645 	.word	0x0800e645
 800d374:	0800e734 	.word	0x0800e734

0800d378 <__ratio>:
 800d378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37c:	4688      	mov	r8, r1
 800d37e:	4669      	mov	r1, sp
 800d380:	4681      	mov	r9, r0
 800d382:	f7ff ff4d 	bl	800d220 <__b2d>
 800d386:	a901      	add	r1, sp, #4
 800d388:	4640      	mov	r0, r8
 800d38a:	ec55 4b10 	vmov	r4, r5, d0
 800d38e:	f7ff ff47 	bl	800d220 <__b2d>
 800d392:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d396:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d39a:	eba3 0c02 	sub.w	ip, r3, r2
 800d39e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d3a2:	1a9b      	subs	r3, r3, r2
 800d3a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d3a8:	ec51 0b10 	vmov	r0, r1, d0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	bfd6      	itet	le
 800d3b0:	460a      	movle	r2, r1
 800d3b2:	462a      	movgt	r2, r5
 800d3b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d3b8:	468b      	mov	fp, r1
 800d3ba:	462f      	mov	r7, r5
 800d3bc:	bfd4      	ite	le
 800d3be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d3c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	ee10 2a10 	vmov	r2, s0
 800d3cc:	465b      	mov	r3, fp
 800d3ce:	4639      	mov	r1, r7
 800d3d0:	f7f3 fa4c 	bl	800086c <__aeabi_ddiv>
 800d3d4:	ec41 0b10 	vmov	d0, r0, r1
 800d3d8:	b003      	add	sp, #12
 800d3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d3de <__copybits>:
 800d3de:	3901      	subs	r1, #1
 800d3e0:	b570      	push	{r4, r5, r6, lr}
 800d3e2:	1149      	asrs	r1, r1, #5
 800d3e4:	6914      	ldr	r4, [r2, #16]
 800d3e6:	3101      	adds	r1, #1
 800d3e8:	f102 0314 	add.w	r3, r2, #20
 800d3ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d3f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d3f4:	1f05      	subs	r5, r0, #4
 800d3f6:	42a3      	cmp	r3, r4
 800d3f8:	d30c      	bcc.n	800d414 <__copybits+0x36>
 800d3fa:	1aa3      	subs	r3, r4, r2
 800d3fc:	3b11      	subs	r3, #17
 800d3fe:	f023 0303 	bic.w	r3, r3, #3
 800d402:	3211      	adds	r2, #17
 800d404:	42a2      	cmp	r2, r4
 800d406:	bf88      	it	hi
 800d408:	2300      	movhi	r3, #0
 800d40a:	4418      	add	r0, r3
 800d40c:	2300      	movs	r3, #0
 800d40e:	4288      	cmp	r0, r1
 800d410:	d305      	bcc.n	800d41e <__copybits+0x40>
 800d412:	bd70      	pop	{r4, r5, r6, pc}
 800d414:	f853 6b04 	ldr.w	r6, [r3], #4
 800d418:	f845 6f04 	str.w	r6, [r5, #4]!
 800d41c:	e7eb      	b.n	800d3f6 <__copybits+0x18>
 800d41e:	f840 3b04 	str.w	r3, [r0], #4
 800d422:	e7f4      	b.n	800d40e <__copybits+0x30>

0800d424 <__any_on>:
 800d424:	f100 0214 	add.w	r2, r0, #20
 800d428:	6900      	ldr	r0, [r0, #16]
 800d42a:	114b      	asrs	r3, r1, #5
 800d42c:	4298      	cmp	r0, r3
 800d42e:	b510      	push	{r4, lr}
 800d430:	db11      	blt.n	800d456 <__any_on+0x32>
 800d432:	dd0a      	ble.n	800d44a <__any_on+0x26>
 800d434:	f011 011f 	ands.w	r1, r1, #31
 800d438:	d007      	beq.n	800d44a <__any_on+0x26>
 800d43a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d43e:	fa24 f001 	lsr.w	r0, r4, r1
 800d442:	fa00 f101 	lsl.w	r1, r0, r1
 800d446:	428c      	cmp	r4, r1
 800d448:	d10b      	bne.n	800d462 <__any_on+0x3e>
 800d44a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d44e:	4293      	cmp	r3, r2
 800d450:	d803      	bhi.n	800d45a <__any_on+0x36>
 800d452:	2000      	movs	r0, #0
 800d454:	bd10      	pop	{r4, pc}
 800d456:	4603      	mov	r3, r0
 800d458:	e7f7      	b.n	800d44a <__any_on+0x26>
 800d45a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d45e:	2900      	cmp	r1, #0
 800d460:	d0f5      	beq.n	800d44e <__any_on+0x2a>
 800d462:	2001      	movs	r0, #1
 800d464:	e7f6      	b.n	800d454 <__any_on+0x30>

0800d466 <_calloc_r>:
 800d466:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d468:	fba1 2402 	umull	r2, r4, r1, r2
 800d46c:	b94c      	cbnz	r4, 800d482 <_calloc_r+0x1c>
 800d46e:	4611      	mov	r1, r2
 800d470:	9201      	str	r2, [sp, #4]
 800d472:	f7fb fdb7 	bl	8008fe4 <_malloc_r>
 800d476:	9a01      	ldr	r2, [sp, #4]
 800d478:	4605      	mov	r5, r0
 800d47a:	b930      	cbnz	r0, 800d48a <_calloc_r+0x24>
 800d47c:	4628      	mov	r0, r5
 800d47e:	b003      	add	sp, #12
 800d480:	bd30      	pop	{r4, r5, pc}
 800d482:	220c      	movs	r2, #12
 800d484:	6002      	str	r2, [r0, #0]
 800d486:	2500      	movs	r5, #0
 800d488:	e7f8      	b.n	800d47c <_calloc_r+0x16>
 800d48a:	4621      	mov	r1, r4
 800d48c:	f7fb fd36 	bl	8008efc <memset>
 800d490:	e7f4      	b.n	800d47c <_calloc_r+0x16>

0800d492 <_realloc_r>:
 800d492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d496:	4680      	mov	r8, r0
 800d498:	4614      	mov	r4, r2
 800d49a:	460e      	mov	r6, r1
 800d49c:	b921      	cbnz	r1, 800d4a8 <_realloc_r+0x16>
 800d49e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a2:	4611      	mov	r1, r2
 800d4a4:	f7fb bd9e 	b.w	8008fe4 <_malloc_r>
 800d4a8:	b92a      	cbnz	r2, 800d4b6 <_realloc_r+0x24>
 800d4aa:	f7fb fd2f 	bl	8008f0c <_free_r>
 800d4ae:	4625      	mov	r5, r4
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4b6:	f000 fe6d 	bl	800e194 <_malloc_usable_size_r>
 800d4ba:	4284      	cmp	r4, r0
 800d4bc:	4607      	mov	r7, r0
 800d4be:	d802      	bhi.n	800d4c6 <_realloc_r+0x34>
 800d4c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d4c4:	d812      	bhi.n	800d4ec <_realloc_r+0x5a>
 800d4c6:	4621      	mov	r1, r4
 800d4c8:	4640      	mov	r0, r8
 800d4ca:	f7fb fd8b 	bl	8008fe4 <_malloc_r>
 800d4ce:	4605      	mov	r5, r0
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	d0ed      	beq.n	800d4b0 <_realloc_r+0x1e>
 800d4d4:	42bc      	cmp	r4, r7
 800d4d6:	4622      	mov	r2, r4
 800d4d8:	4631      	mov	r1, r6
 800d4da:	bf28      	it	cs
 800d4dc:	463a      	movcs	r2, r7
 800d4de:	f7ff facd 	bl	800ca7c <memcpy>
 800d4e2:	4631      	mov	r1, r6
 800d4e4:	4640      	mov	r0, r8
 800d4e6:	f7fb fd11 	bl	8008f0c <_free_r>
 800d4ea:	e7e1      	b.n	800d4b0 <_realloc_r+0x1e>
 800d4ec:	4635      	mov	r5, r6
 800d4ee:	e7df      	b.n	800d4b0 <_realloc_r+0x1e>

0800d4f0 <__ssputs_r>:
 800d4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4f4:	688e      	ldr	r6, [r1, #8]
 800d4f6:	429e      	cmp	r6, r3
 800d4f8:	4682      	mov	sl, r0
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	4690      	mov	r8, r2
 800d4fe:	461f      	mov	r7, r3
 800d500:	d838      	bhi.n	800d574 <__ssputs_r+0x84>
 800d502:	898a      	ldrh	r2, [r1, #12]
 800d504:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d508:	d032      	beq.n	800d570 <__ssputs_r+0x80>
 800d50a:	6825      	ldr	r5, [r4, #0]
 800d50c:	6909      	ldr	r1, [r1, #16]
 800d50e:	eba5 0901 	sub.w	r9, r5, r1
 800d512:	6965      	ldr	r5, [r4, #20]
 800d514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d518:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d51c:	3301      	adds	r3, #1
 800d51e:	444b      	add	r3, r9
 800d520:	106d      	asrs	r5, r5, #1
 800d522:	429d      	cmp	r5, r3
 800d524:	bf38      	it	cc
 800d526:	461d      	movcc	r5, r3
 800d528:	0553      	lsls	r3, r2, #21
 800d52a:	d531      	bpl.n	800d590 <__ssputs_r+0xa0>
 800d52c:	4629      	mov	r1, r5
 800d52e:	f7fb fd59 	bl	8008fe4 <_malloc_r>
 800d532:	4606      	mov	r6, r0
 800d534:	b950      	cbnz	r0, 800d54c <__ssputs_r+0x5c>
 800d536:	230c      	movs	r3, #12
 800d538:	f8ca 3000 	str.w	r3, [sl]
 800d53c:	89a3      	ldrh	r3, [r4, #12]
 800d53e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d542:	81a3      	strh	r3, [r4, #12]
 800d544:	f04f 30ff 	mov.w	r0, #4294967295
 800d548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d54c:	6921      	ldr	r1, [r4, #16]
 800d54e:	464a      	mov	r2, r9
 800d550:	f7ff fa94 	bl	800ca7c <memcpy>
 800d554:	89a3      	ldrh	r3, [r4, #12]
 800d556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d55a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d55e:	81a3      	strh	r3, [r4, #12]
 800d560:	6126      	str	r6, [r4, #16]
 800d562:	6165      	str	r5, [r4, #20]
 800d564:	444e      	add	r6, r9
 800d566:	eba5 0509 	sub.w	r5, r5, r9
 800d56a:	6026      	str	r6, [r4, #0]
 800d56c:	60a5      	str	r5, [r4, #8]
 800d56e:	463e      	mov	r6, r7
 800d570:	42be      	cmp	r6, r7
 800d572:	d900      	bls.n	800d576 <__ssputs_r+0x86>
 800d574:	463e      	mov	r6, r7
 800d576:	6820      	ldr	r0, [r4, #0]
 800d578:	4632      	mov	r2, r6
 800d57a:	4641      	mov	r1, r8
 800d57c:	f7ff fa8c 	bl	800ca98 <memmove>
 800d580:	68a3      	ldr	r3, [r4, #8]
 800d582:	1b9b      	subs	r3, r3, r6
 800d584:	60a3      	str	r3, [r4, #8]
 800d586:	6823      	ldr	r3, [r4, #0]
 800d588:	4433      	add	r3, r6
 800d58a:	6023      	str	r3, [r4, #0]
 800d58c:	2000      	movs	r0, #0
 800d58e:	e7db      	b.n	800d548 <__ssputs_r+0x58>
 800d590:	462a      	mov	r2, r5
 800d592:	f7ff ff7e 	bl	800d492 <_realloc_r>
 800d596:	4606      	mov	r6, r0
 800d598:	2800      	cmp	r0, #0
 800d59a:	d1e1      	bne.n	800d560 <__ssputs_r+0x70>
 800d59c:	6921      	ldr	r1, [r4, #16]
 800d59e:	4650      	mov	r0, sl
 800d5a0:	f7fb fcb4 	bl	8008f0c <_free_r>
 800d5a4:	e7c7      	b.n	800d536 <__ssputs_r+0x46>
	...

0800d5a8 <_svfiprintf_r>:
 800d5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ac:	4698      	mov	r8, r3
 800d5ae:	898b      	ldrh	r3, [r1, #12]
 800d5b0:	061b      	lsls	r3, r3, #24
 800d5b2:	b09d      	sub	sp, #116	; 0x74
 800d5b4:	4607      	mov	r7, r0
 800d5b6:	460d      	mov	r5, r1
 800d5b8:	4614      	mov	r4, r2
 800d5ba:	d50e      	bpl.n	800d5da <_svfiprintf_r+0x32>
 800d5bc:	690b      	ldr	r3, [r1, #16]
 800d5be:	b963      	cbnz	r3, 800d5da <_svfiprintf_r+0x32>
 800d5c0:	2140      	movs	r1, #64	; 0x40
 800d5c2:	f7fb fd0f 	bl	8008fe4 <_malloc_r>
 800d5c6:	6028      	str	r0, [r5, #0]
 800d5c8:	6128      	str	r0, [r5, #16]
 800d5ca:	b920      	cbnz	r0, 800d5d6 <_svfiprintf_r+0x2e>
 800d5cc:	230c      	movs	r3, #12
 800d5ce:	603b      	str	r3, [r7, #0]
 800d5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d4:	e0d1      	b.n	800d77a <_svfiprintf_r+0x1d2>
 800d5d6:	2340      	movs	r3, #64	; 0x40
 800d5d8:	616b      	str	r3, [r5, #20]
 800d5da:	2300      	movs	r3, #0
 800d5dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d5de:	2320      	movs	r3, #32
 800d5e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5e8:	2330      	movs	r3, #48	; 0x30
 800d5ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d794 <_svfiprintf_r+0x1ec>
 800d5ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5f2:	f04f 0901 	mov.w	r9, #1
 800d5f6:	4623      	mov	r3, r4
 800d5f8:	469a      	mov	sl, r3
 800d5fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5fe:	b10a      	cbz	r2, 800d604 <_svfiprintf_r+0x5c>
 800d600:	2a25      	cmp	r2, #37	; 0x25
 800d602:	d1f9      	bne.n	800d5f8 <_svfiprintf_r+0x50>
 800d604:	ebba 0b04 	subs.w	fp, sl, r4
 800d608:	d00b      	beq.n	800d622 <_svfiprintf_r+0x7a>
 800d60a:	465b      	mov	r3, fp
 800d60c:	4622      	mov	r2, r4
 800d60e:	4629      	mov	r1, r5
 800d610:	4638      	mov	r0, r7
 800d612:	f7ff ff6d 	bl	800d4f0 <__ssputs_r>
 800d616:	3001      	adds	r0, #1
 800d618:	f000 80aa 	beq.w	800d770 <_svfiprintf_r+0x1c8>
 800d61c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d61e:	445a      	add	r2, fp
 800d620:	9209      	str	r2, [sp, #36]	; 0x24
 800d622:	f89a 3000 	ldrb.w	r3, [sl]
 800d626:	2b00      	cmp	r3, #0
 800d628:	f000 80a2 	beq.w	800d770 <_svfiprintf_r+0x1c8>
 800d62c:	2300      	movs	r3, #0
 800d62e:	f04f 32ff 	mov.w	r2, #4294967295
 800d632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d636:	f10a 0a01 	add.w	sl, sl, #1
 800d63a:	9304      	str	r3, [sp, #16]
 800d63c:	9307      	str	r3, [sp, #28]
 800d63e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d642:	931a      	str	r3, [sp, #104]	; 0x68
 800d644:	4654      	mov	r4, sl
 800d646:	2205      	movs	r2, #5
 800d648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d64c:	4851      	ldr	r0, [pc, #324]	; (800d794 <_svfiprintf_r+0x1ec>)
 800d64e:	f7f2 fdd7 	bl	8000200 <memchr>
 800d652:	9a04      	ldr	r2, [sp, #16]
 800d654:	b9d8      	cbnz	r0, 800d68e <_svfiprintf_r+0xe6>
 800d656:	06d0      	lsls	r0, r2, #27
 800d658:	bf44      	itt	mi
 800d65a:	2320      	movmi	r3, #32
 800d65c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d660:	0711      	lsls	r1, r2, #28
 800d662:	bf44      	itt	mi
 800d664:	232b      	movmi	r3, #43	; 0x2b
 800d666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d66a:	f89a 3000 	ldrb.w	r3, [sl]
 800d66e:	2b2a      	cmp	r3, #42	; 0x2a
 800d670:	d015      	beq.n	800d69e <_svfiprintf_r+0xf6>
 800d672:	9a07      	ldr	r2, [sp, #28]
 800d674:	4654      	mov	r4, sl
 800d676:	2000      	movs	r0, #0
 800d678:	f04f 0c0a 	mov.w	ip, #10
 800d67c:	4621      	mov	r1, r4
 800d67e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d682:	3b30      	subs	r3, #48	; 0x30
 800d684:	2b09      	cmp	r3, #9
 800d686:	d94e      	bls.n	800d726 <_svfiprintf_r+0x17e>
 800d688:	b1b0      	cbz	r0, 800d6b8 <_svfiprintf_r+0x110>
 800d68a:	9207      	str	r2, [sp, #28]
 800d68c:	e014      	b.n	800d6b8 <_svfiprintf_r+0x110>
 800d68e:	eba0 0308 	sub.w	r3, r0, r8
 800d692:	fa09 f303 	lsl.w	r3, r9, r3
 800d696:	4313      	orrs	r3, r2
 800d698:	9304      	str	r3, [sp, #16]
 800d69a:	46a2      	mov	sl, r4
 800d69c:	e7d2      	b.n	800d644 <_svfiprintf_r+0x9c>
 800d69e:	9b03      	ldr	r3, [sp, #12]
 800d6a0:	1d19      	adds	r1, r3, #4
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	9103      	str	r1, [sp, #12]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	bfbb      	ittet	lt
 800d6aa:	425b      	neglt	r3, r3
 800d6ac:	f042 0202 	orrlt.w	r2, r2, #2
 800d6b0:	9307      	strge	r3, [sp, #28]
 800d6b2:	9307      	strlt	r3, [sp, #28]
 800d6b4:	bfb8      	it	lt
 800d6b6:	9204      	strlt	r2, [sp, #16]
 800d6b8:	7823      	ldrb	r3, [r4, #0]
 800d6ba:	2b2e      	cmp	r3, #46	; 0x2e
 800d6bc:	d10c      	bne.n	800d6d8 <_svfiprintf_r+0x130>
 800d6be:	7863      	ldrb	r3, [r4, #1]
 800d6c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d6c2:	d135      	bne.n	800d730 <_svfiprintf_r+0x188>
 800d6c4:	9b03      	ldr	r3, [sp, #12]
 800d6c6:	1d1a      	adds	r2, r3, #4
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	9203      	str	r2, [sp, #12]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	bfb8      	it	lt
 800d6d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6d4:	3402      	adds	r4, #2
 800d6d6:	9305      	str	r3, [sp, #20]
 800d6d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d7a4 <_svfiprintf_r+0x1fc>
 800d6dc:	7821      	ldrb	r1, [r4, #0]
 800d6de:	2203      	movs	r2, #3
 800d6e0:	4650      	mov	r0, sl
 800d6e2:	f7f2 fd8d 	bl	8000200 <memchr>
 800d6e6:	b140      	cbz	r0, 800d6fa <_svfiprintf_r+0x152>
 800d6e8:	2340      	movs	r3, #64	; 0x40
 800d6ea:	eba0 000a 	sub.w	r0, r0, sl
 800d6ee:	fa03 f000 	lsl.w	r0, r3, r0
 800d6f2:	9b04      	ldr	r3, [sp, #16]
 800d6f4:	4303      	orrs	r3, r0
 800d6f6:	3401      	adds	r4, #1
 800d6f8:	9304      	str	r3, [sp, #16]
 800d6fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6fe:	4826      	ldr	r0, [pc, #152]	; (800d798 <_svfiprintf_r+0x1f0>)
 800d700:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d704:	2206      	movs	r2, #6
 800d706:	f7f2 fd7b 	bl	8000200 <memchr>
 800d70a:	2800      	cmp	r0, #0
 800d70c:	d038      	beq.n	800d780 <_svfiprintf_r+0x1d8>
 800d70e:	4b23      	ldr	r3, [pc, #140]	; (800d79c <_svfiprintf_r+0x1f4>)
 800d710:	bb1b      	cbnz	r3, 800d75a <_svfiprintf_r+0x1b2>
 800d712:	9b03      	ldr	r3, [sp, #12]
 800d714:	3307      	adds	r3, #7
 800d716:	f023 0307 	bic.w	r3, r3, #7
 800d71a:	3308      	adds	r3, #8
 800d71c:	9303      	str	r3, [sp, #12]
 800d71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d720:	4433      	add	r3, r6
 800d722:	9309      	str	r3, [sp, #36]	; 0x24
 800d724:	e767      	b.n	800d5f6 <_svfiprintf_r+0x4e>
 800d726:	fb0c 3202 	mla	r2, ip, r2, r3
 800d72a:	460c      	mov	r4, r1
 800d72c:	2001      	movs	r0, #1
 800d72e:	e7a5      	b.n	800d67c <_svfiprintf_r+0xd4>
 800d730:	2300      	movs	r3, #0
 800d732:	3401      	adds	r4, #1
 800d734:	9305      	str	r3, [sp, #20]
 800d736:	4619      	mov	r1, r3
 800d738:	f04f 0c0a 	mov.w	ip, #10
 800d73c:	4620      	mov	r0, r4
 800d73e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d742:	3a30      	subs	r2, #48	; 0x30
 800d744:	2a09      	cmp	r2, #9
 800d746:	d903      	bls.n	800d750 <_svfiprintf_r+0x1a8>
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d0c5      	beq.n	800d6d8 <_svfiprintf_r+0x130>
 800d74c:	9105      	str	r1, [sp, #20]
 800d74e:	e7c3      	b.n	800d6d8 <_svfiprintf_r+0x130>
 800d750:	fb0c 2101 	mla	r1, ip, r1, r2
 800d754:	4604      	mov	r4, r0
 800d756:	2301      	movs	r3, #1
 800d758:	e7f0      	b.n	800d73c <_svfiprintf_r+0x194>
 800d75a:	ab03      	add	r3, sp, #12
 800d75c:	9300      	str	r3, [sp, #0]
 800d75e:	462a      	mov	r2, r5
 800d760:	4b0f      	ldr	r3, [pc, #60]	; (800d7a0 <_svfiprintf_r+0x1f8>)
 800d762:	a904      	add	r1, sp, #16
 800d764:	4638      	mov	r0, r7
 800d766:	f7fb feab 	bl	80094c0 <_printf_float>
 800d76a:	1c42      	adds	r2, r0, #1
 800d76c:	4606      	mov	r6, r0
 800d76e:	d1d6      	bne.n	800d71e <_svfiprintf_r+0x176>
 800d770:	89ab      	ldrh	r3, [r5, #12]
 800d772:	065b      	lsls	r3, r3, #25
 800d774:	f53f af2c 	bmi.w	800d5d0 <_svfiprintf_r+0x28>
 800d778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d77a:	b01d      	add	sp, #116	; 0x74
 800d77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d780:	ab03      	add	r3, sp, #12
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	462a      	mov	r2, r5
 800d786:	4b06      	ldr	r3, [pc, #24]	; (800d7a0 <_svfiprintf_r+0x1f8>)
 800d788:	a904      	add	r1, sp, #16
 800d78a:	4638      	mov	r0, r7
 800d78c:	f7fc f93c 	bl	8009a08 <_printf_i>
 800d790:	e7eb      	b.n	800d76a <_svfiprintf_r+0x1c2>
 800d792:	bf00      	nop
 800d794:	0800e3cc 	.word	0x0800e3cc
 800d798:	0800e3d6 	.word	0x0800e3d6
 800d79c:	080094c1 	.word	0x080094c1
 800d7a0:	0800d4f1 	.word	0x0800d4f1
 800d7a4:	0800e3d2 	.word	0x0800e3d2

0800d7a8 <_sungetc_r>:
 800d7a8:	b538      	push	{r3, r4, r5, lr}
 800d7aa:	1c4b      	adds	r3, r1, #1
 800d7ac:	4614      	mov	r4, r2
 800d7ae:	d103      	bne.n	800d7b8 <_sungetc_r+0x10>
 800d7b0:	f04f 35ff 	mov.w	r5, #4294967295
 800d7b4:	4628      	mov	r0, r5
 800d7b6:	bd38      	pop	{r3, r4, r5, pc}
 800d7b8:	8993      	ldrh	r3, [r2, #12]
 800d7ba:	f023 0320 	bic.w	r3, r3, #32
 800d7be:	8193      	strh	r3, [r2, #12]
 800d7c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d7c2:	6852      	ldr	r2, [r2, #4]
 800d7c4:	b2cd      	uxtb	r5, r1
 800d7c6:	b18b      	cbz	r3, 800d7ec <_sungetc_r+0x44>
 800d7c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	dd08      	ble.n	800d7e0 <_sungetc_r+0x38>
 800d7ce:	6823      	ldr	r3, [r4, #0]
 800d7d0:	1e5a      	subs	r2, r3, #1
 800d7d2:	6022      	str	r2, [r4, #0]
 800d7d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d7d8:	6863      	ldr	r3, [r4, #4]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	6063      	str	r3, [r4, #4]
 800d7de:	e7e9      	b.n	800d7b4 <_sungetc_r+0xc>
 800d7e0:	4621      	mov	r1, r4
 800d7e2:	f000 fc6d 	bl	800e0c0 <__submore>
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	d0f1      	beq.n	800d7ce <_sungetc_r+0x26>
 800d7ea:	e7e1      	b.n	800d7b0 <_sungetc_r+0x8>
 800d7ec:	6921      	ldr	r1, [r4, #16]
 800d7ee:	6823      	ldr	r3, [r4, #0]
 800d7f0:	b151      	cbz	r1, 800d808 <_sungetc_r+0x60>
 800d7f2:	4299      	cmp	r1, r3
 800d7f4:	d208      	bcs.n	800d808 <_sungetc_r+0x60>
 800d7f6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d7fa:	42a9      	cmp	r1, r5
 800d7fc:	d104      	bne.n	800d808 <_sungetc_r+0x60>
 800d7fe:	3b01      	subs	r3, #1
 800d800:	3201      	adds	r2, #1
 800d802:	6023      	str	r3, [r4, #0]
 800d804:	6062      	str	r2, [r4, #4]
 800d806:	e7d5      	b.n	800d7b4 <_sungetc_r+0xc>
 800d808:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d80c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d810:	6363      	str	r3, [r4, #52]	; 0x34
 800d812:	2303      	movs	r3, #3
 800d814:	63a3      	str	r3, [r4, #56]	; 0x38
 800d816:	4623      	mov	r3, r4
 800d818:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d81c:	6023      	str	r3, [r4, #0]
 800d81e:	2301      	movs	r3, #1
 800d820:	e7dc      	b.n	800d7dc <_sungetc_r+0x34>

0800d822 <__ssrefill_r>:
 800d822:	b510      	push	{r4, lr}
 800d824:	460c      	mov	r4, r1
 800d826:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d828:	b169      	cbz	r1, 800d846 <__ssrefill_r+0x24>
 800d82a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d82e:	4299      	cmp	r1, r3
 800d830:	d001      	beq.n	800d836 <__ssrefill_r+0x14>
 800d832:	f7fb fb6b 	bl	8008f0c <_free_r>
 800d836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d838:	6063      	str	r3, [r4, #4]
 800d83a:	2000      	movs	r0, #0
 800d83c:	6360      	str	r0, [r4, #52]	; 0x34
 800d83e:	b113      	cbz	r3, 800d846 <__ssrefill_r+0x24>
 800d840:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d842:	6023      	str	r3, [r4, #0]
 800d844:	bd10      	pop	{r4, pc}
 800d846:	6923      	ldr	r3, [r4, #16]
 800d848:	6023      	str	r3, [r4, #0]
 800d84a:	2300      	movs	r3, #0
 800d84c:	6063      	str	r3, [r4, #4]
 800d84e:	89a3      	ldrh	r3, [r4, #12]
 800d850:	f043 0320 	orr.w	r3, r3, #32
 800d854:	81a3      	strh	r3, [r4, #12]
 800d856:	f04f 30ff 	mov.w	r0, #4294967295
 800d85a:	e7f3      	b.n	800d844 <__ssrefill_r+0x22>

0800d85c <__ssvfiscanf_r>:
 800d85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d860:	460c      	mov	r4, r1
 800d862:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d866:	2100      	movs	r1, #0
 800d868:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d86c:	49a6      	ldr	r1, [pc, #664]	; (800db08 <__ssvfiscanf_r+0x2ac>)
 800d86e:	91a0      	str	r1, [sp, #640]	; 0x280
 800d870:	f10d 0804 	add.w	r8, sp, #4
 800d874:	49a5      	ldr	r1, [pc, #660]	; (800db0c <__ssvfiscanf_r+0x2b0>)
 800d876:	4fa6      	ldr	r7, [pc, #664]	; (800db10 <__ssvfiscanf_r+0x2b4>)
 800d878:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800db14 <__ssvfiscanf_r+0x2b8>
 800d87c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d880:	4606      	mov	r6, r0
 800d882:	91a1      	str	r1, [sp, #644]	; 0x284
 800d884:	9300      	str	r3, [sp, #0]
 800d886:	7813      	ldrb	r3, [r2, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f000 815a 	beq.w	800db42 <__ssvfiscanf_r+0x2e6>
 800d88e:	5dd9      	ldrb	r1, [r3, r7]
 800d890:	f011 0108 	ands.w	r1, r1, #8
 800d894:	f102 0501 	add.w	r5, r2, #1
 800d898:	d019      	beq.n	800d8ce <__ssvfiscanf_r+0x72>
 800d89a:	6863      	ldr	r3, [r4, #4]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	dd0f      	ble.n	800d8c0 <__ssvfiscanf_r+0x64>
 800d8a0:	6823      	ldr	r3, [r4, #0]
 800d8a2:	781a      	ldrb	r2, [r3, #0]
 800d8a4:	5cba      	ldrb	r2, [r7, r2]
 800d8a6:	0712      	lsls	r2, r2, #28
 800d8a8:	d401      	bmi.n	800d8ae <__ssvfiscanf_r+0x52>
 800d8aa:	462a      	mov	r2, r5
 800d8ac:	e7eb      	b.n	800d886 <__ssvfiscanf_r+0x2a>
 800d8ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d8b0:	3201      	adds	r2, #1
 800d8b2:	9245      	str	r2, [sp, #276]	; 0x114
 800d8b4:	6862      	ldr	r2, [r4, #4]
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	3a01      	subs	r2, #1
 800d8ba:	6062      	str	r2, [r4, #4]
 800d8bc:	6023      	str	r3, [r4, #0]
 800d8be:	e7ec      	b.n	800d89a <__ssvfiscanf_r+0x3e>
 800d8c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d8c2:	4621      	mov	r1, r4
 800d8c4:	4630      	mov	r0, r6
 800d8c6:	4798      	blx	r3
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	d0e9      	beq.n	800d8a0 <__ssvfiscanf_r+0x44>
 800d8cc:	e7ed      	b.n	800d8aa <__ssvfiscanf_r+0x4e>
 800d8ce:	2b25      	cmp	r3, #37	; 0x25
 800d8d0:	d012      	beq.n	800d8f8 <__ssvfiscanf_r+0x9c>
 800d8d2:	469a      	mov	sl, r3
 800d8d4:	6863      	ldr	r3, [r4, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	f340 8091 	ble.w	800d9fe <__ssvfiscanf_r+0x1a2>
 800d8dc:	6822      	ldr	r2, [r4, #0]
 800d8de:	7813      	ldrb	r3, [r2, #0]
 800d8e0:	4553      	cmp	r3, sl
 800d8e2:	f040 812e 	bne.w	800db42 <__ssvfiscanf_r+0x2e6>
 800d8e6:	6863      	ldr	r3, [r4, #4]
 800d8e8:	3b01      	subs	r3, #1
 800d8ea:	6063      	str	r3, [r4, #4]
 800d8ec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d8ee:	3201      	adds	r2, #1
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	6022      	str	r2, [r4, #0]
 800d8f4:	9345      	str	r3, [sp, #276]	; 0x114
 800d8f6:	e7d8      	b.n	800d8aa <__ssvfiscanf_r+0x4e>
 800d8f8:	9141      	str	r1, [sp, #260]	; 0x104
 800d8fa:	9143      	str	r1, [sp, #268]	; 0x10c
 800d8fc:	7853      	ldrb	r3, [r2, #1]
 800d8fe:	2b2a      	cmp	r3, #42	; 0x2a
 800d900:	bf02      	ittt	eq
 800d902:	2310      	moveq	r3, #16
 800d904:	1c95      	addeq	r5, r2, #2
 800d906:	9341      	streq	r3, [sp, #260]	; 0x104
 800d908:	220a      	movs	r2, #10
 800d90a:	46aa      	mov	sl, r5
 800d90c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d910:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d914:	2b09      	cmp	r3, #9
 800d916:	d91d      	bls.n	800d954 <__ssvfiscanf_r+0xf8>
 800d918:	487e      	ldr	r0, [pc, #504]	; (800db14 <__ssvfiscanf_r+0x2b8>)
 800d91a:	2203      	movs	r2, #3
 800d91c:	f7f2 fc70 	bl	8000200 <memchr>
 800d920:	b140      	cbz	r0, 800d934 <__ssvfiscanf_r+0xd8>
 800d922:	2301      	movs	r3, #1
 800d924:	eba0 0009 	sub.w	r0, r0, r9
 800d928:	fa03 f000 	lsl.w	r0, r3, r0
 800d92c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d92e:	4318      	orrs	r0, r3
 800d930:	9041      	str	r0, [sp, #260]	; 0x104
 800d932:	4655      	mov	r5, sl
 800d934:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d938:	2b78      	cmp	r3, #120	; 0x78
 800d93a:	d806      	bhi.n	800d94a <__ssvfiscanf_r+0xee>
 800d93c:	2b57      	cmp	r3, #87	; 0x57
 800d93e:	d810      	bhi.n	800d962 <__ssvfiscanf_r+0x106>
 800d940:	2b25      	cmp	r3, #37	; 0x25
 800d942:	d0c6      	beq.n	800d8d2 <__ssvfiscanf_r+0x76>
 800d944:	d856      	bhi.n	800d9f4 <__ssvfiscanf_r+0x198>
 800d946:	2b00      	cmp	r3, #0
 800d948:	d064      	beq.n	800da14 <__ssvfiscanf_r+0x1b8>
 800d94a:	2303      	movs	r3, #3
 800d94c:	9347      	str	r3, [sp, #284]	; 0x11c
 800d94e:	230a      	movs	r3, #10
 800d950:	9342      	str	r3, [sp, #264]	; 0x108
 800d952:	e071      	b.n	800da38 <__ssvfiscanf_r+0x1dc>
 800d954:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d956:	fb02 1103 	mla	r1, r2, r3, r1
 800d95a:	3930      	subs	r1, #48	; 0x30
 800d95c:	9143      	str	r1, [sp, #268]	; 0x10c
 800d95e:	4655      	mov	r5, sl
 800d960:	e7d3      	b.n	800d90a <__ssvfiscanf_r+0xae>
 800d962:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d966:	2a20      	cmp	r2, #32
 800d968:	d8ef      	bhi.n	800d94a <__ssvfiscanf_r+0xee>
 800d96a:	a101      	add	r1, pc, #4	; (adr r1, 800d970 <__ssvfiscanf_r+0x114>)
 800d96c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d970:	0800da23 	.word	0x0800da23
 800d974:	0800d94b 	.word	0x0800d94b
 800d978:	0800d94b 	.word	0x0800d94b
 800d97c:	0800da81 	.word	0x0800da81
 800d980:	0800d94b 	.word	0x0800d94b
 800d984:	0800d94b 	.word	0x0800d94b
 800d988:	0800d94b 	.word	0x0800d94b
 800d98c:	0800d94b 	.word	0x0800d94b
 800d990:	0800d94b 	.word	0x0800d94b
 800d994:	0800d94b 	.word	0x0800d94b
 800d998:	0800d94b 	.word	0x0800d94b
 800d99c:	0800da97 	.word	0x0800da97
 800d9a0:	0800da6d 	.word	0x0800da6d
 800d9a4:	0800d9fb 	.word	0x0800d9fb
 800d9a8:	0800d9fb 	.word	0x0800d9fb
 800d9ac:	0800d9fb 	.word	0x0800d9fb
 800d9b0:	0800d94b 	.word	0x0800d94b
 800d9b4:	0800da71 	.word	0x0800da71
 800d9b8:	0800d94b 	.word	0x0800d94b
 800d9bc:	0800d94b 	.word	0x0800d94b
 800d9c0:	0800d94b 	.word	0x0800d94b
 800d9c4:	0800d94b 	.word	0x0800d94b
 800d9c8:	0800daa7 	.word	0x0800daa7
 800d9cc:	0800da79 	.word	0x0800da79
 800d9d0:	0800da1b 	.word	0x0800da1b
 800d9d4:	0800d94b 	.word	0x0800d94b
 800d9d8:	0800d94b 	.word	0x0800d94b
 800d9dc:	0800daa3 	.word	0x0800daa3
 800d9e0:	0800d94b 	.word	0x0800d94b
 800d9e4:	0800da6d 	.word	0x0800da6d
 800d9e8:	0800d94b 	.word	0x0800d94b
 800d9ec:	0800d94b 	.word	0x0800d94b
 800d9f0:	0800da23 	.word	0x0800da23
 800d9f4:	3b45      	subs	r3, #69	; 0x45
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	d8a7      	bhi.n	800d94a <__ssvfiscanf_r+0xee>
 800d9fa:	2305      	movs	r3, #5
 800d9fc:	e01b      	b.n	800da36 <__ssvfiscanf_r+0x1da>
 800d9fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800da00:	4621      	mov	r1, r4
 800da02:	4630      	mov	r0, r6
 800da04:	4798      	blx	r3
 800da06:	2800      	cmp	r0, #0
 800da08:	f43f af68 	beq.w	800d8dc <__ssvfiscanf_r+0x80>
 800da0c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800da0e:	2800      	cmp	r0, #0
 800da10:	f040 808d 	bne.w	800db2e <__ssvfiscanf_r+0x2d2>
 800da14:	f04f 30ff 	mov.w	r0, #4294967295
 800da18:	e08f      	b.n	800db3a <__ssvfiscanf_r+0x2de>
 800da1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800da1c:	f042 0220 	orr.w	r2, r2, #32
 800da20:	9241      	str	r2, [sp, #260]	; 0x104
 800da22:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800da24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da28:	9241      	str	r2, [sp, #260]	; 0x104
 800da2a:	2210      	movs	r2, #16
 800da2c:	2b6f      	cmp	r3, #111	; 0x6f
 800da2e:	9242      	str	r2, [sp, #264]	; 0x108
 800da30:	bf34      	ite	cc
 800da32:	2303      	movcc	r3, #3
 800da34:	2304      	movcs	r3, #4
 800da36:	9347      	str	r3, [sp, #284]	; 0x11c
 800da38:	6863      	ldr	r3, [r4, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	dd42      	ble.n	800dac4 <__ssvfiscanf_r+0x268>
 800da3e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800da40:	0659      	lsls	r1, r3, #25
 800da42:	d404      	bmi.n	800da4e <__ssvfiscanf_r+0x1f2>
 800da44:	6823      	ldr	r3, [r4, #0]
 800da46:	781a      	ldrb	r2, [r3, #0]
 800da48:	5cba      	ldrb	r2, [r7, r2]
 800da4a:	0712      	lsls	r2, r2, #28
 800da4c:	d441      	bmi.n	800dad2 <__ssvfiscanf_r+0x276>
 800da4e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800da50:	2b02      	cmp	r3, #2
 800da52:	dc50      	bgt.n	800daf6 <__ssvfiscanf_r+0x29a>
 800da54:	466b      	mov	r3, sp
 800da56:	4622      	mov	r2, r4
 800da58:	a941      	add	r1, sp, #260	; 0x104
 800da5a:	4630      	mov	r0, r6
 800da5c:	f000 f876 	bl	800db4c <_scanf_chars>
 800da60:	2801      	cmp	r0, #1
 800da62:	d06e      	beq.n	800db42 <__ssvfiscanf_r+0x2e6>
 800da64:	2802      	cmp	r0, #2
 800da66:	f47f af20 	bne.w	800d8aa <__ssvfiscanf_r+0x4e>
 800da6a:	e7cf      	b.n	800da0c <__ssvfiscanf_r+0x1b0>
 800da6c:	220a      	movs	r2, #10
 800da6e:	e7dd      	b.n	800da2c <__ssvfiscanf_r+0x1d0>
 800da70:	2300      	movs	r3, #0
 800da72:	9342      	str	r3, [sp, #264]	; 0x108
 800da74:	2303      	movs	r3, #3
 800da76:	e7de      	b.n	800da36 <__ssvfiscanf_r+0x1da>
 800da78:	2308      	movs	r3, #8
 800da7a:	9342      	str	r3, [sp, #264]	; 0x108
 800da7c:	2304      	movs	r3, #4
 800da7e:	e7da      	b.n	800da36 <__ssvfiscanf_r+0x1da>
 800da80:	4629      	mov	r1, r5
 800da82:	4640      	mov	r0, r8
 800da84:	f000 fa18 	bl	800deb8 <__sccl>
 800da88:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800da8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da8e:	9341      	str	r3, [sp, #260]	; 0x104
 800da90:	4605      	mov	r5, r0
 800da92:	2301      	movs	r3, #1
 800da94:	e7cf      	b.n	800da36 <__ssvfiscanf_r+0x1da>
 800da96:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800da98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da9c:	9341      	str	r3, [sp, #260]	; 0x104
 800da9e:	2300      	movs	r3, #0
 800daa0:	e7c9      	b.n	800da36 <__ssvfiscanf_r+0x1da>
 800daa2:	2302      	movs	r3, #2
 800daa4:	e7c7      	b.n	800da36 <__ssvfiscanf_r+0x1da>
 800daa6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800daa8:	06c3      	lsls	r3, r0, #27
 800daaa:	f53f aefe 	bmi.w	800d8aa <__ssvfiscanf_r+0x4e>
 800daae:	9b00      	ldr	r3, [sp, #0]
 800dab0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800dab2:	1d19      	adds	r1, r3, #4
 800dab4:	9100      	str	r1, [sp, #0]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f010 0f01 	tst.w	r0, #1
 800dabc:	bf14      	ite	ne
 800dabe:	801a      	strhne	r2, [r3, #0]
 800dac0:	601a      	streq	r2, [r3, #0]
 800dac2:	e6f2      	b.n	800d8aa <__ssvfiscanf_r+0x4e>
 800dac4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dac6:	4621      	mov	r1, r4
 800dac8:	4630      	mov	r0, r6
 800daca:	4798      	blx	r3
 800dacc:	2800      	cmp	r0, #0
 800dace:	d0b6      	beq.n	800da3e <__ssvfiscanf_r+0x1e2>
 800dad0:	e79c      	b.n	800da0c <__ssvfiscanf_r+0x1b0>
 800dad2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800dad4:	3201      	adds	r2, #1
 800dad6:	9245      	str	r2, [sp, #276]	; 0x114
 800dad8:	6862      	ldr	r2, [r4, #4]
 800dada:	3a01      	subs	r2, #1
 800dadc:	2a00      	cmp	r2, #0
 800dade:	6062      	str	r2, [r4, #4]
 800dae0:	dd02      	ble.n	800dae8 <__ssvfiscanf_r+0x28c>
 800dae2:	3301      	adds	r3, #1
 800dae4:	6023      	str	r3, [r4, #0]
 800dae6:	e7ad      	b.n	800da44 <__ssvfiscanf_r+0x1e8>
 800dae8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800daea:	4621      	mov	r1, r4
 800daec:	4630      	mov	r0, r6
 800daee:	4798      	blx	r3
 800daf0:	2800      	cmp	r0, #0
 800daf2:	d0a7      	beq.n	800da44 <__ssvfiscanf_r+0x1e8>
 800daf4:	e78a      	b.n	800da0c <__ssvfiscanf_r+0x1b0>
 800daf6:	2b04      	cmp	r3, #4
 800daf8:	dc0e      	bgt.n	800db18 <__ssvfiscanf_r+0x2bc>
 800dafa:	466b      	mov	r3, sp
 800dafc:	4622      	mov	r2, r4
 800dafe:	a941      	add	r1, sp, #260	; 0x104
 800db00:	4630      	mov	r0, r6
 800db02:	f000 f87d 	bl	800dc00 <_scanf_i>
 800db06:	e7ab      	b.n	800da60 <__ssvfiscanf_r+0x204>
 800db08:	0800d7a9 	.word	0x0800d7a9
 800db0c:	0800d823 	.word	0x0800d823
 800db10:	0800e4dd 	.word	0x0800e4dd
 800db14:	0800e3d2 	.word	0x0800e3d2
 800db18:	4b0b      	ldr	r3, [pc, #44]	; (800db48 <__ssvfiscanf_r+0x2ec>)
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	f43f aec5 	beq.w	800d8aa <__ssvfiscanf_r+0x4e>
 800db20:	466b      	mov	r3, sp
 800db22:	4622      	mov	r2, r4
 800db24:	a941      	add	r1, sp, #260	; 0x104
 800db26:	4630      	mov	r0, r6
 800db28:	f7fc f894 	bl	8009c54 <_scanf_float>
 800db2c:	e798      	b.n	800da60 <__ssvfiscanf_r+0x204>
 800db2e:	89a3      	ldrh	r3, [r4, #12]
 800db30:	f013 0f40 	tst.w	r3, #64	; 0x40
 800db34:	bf18      	it	ne
 800db36:	f04f 30ff 	movne.w	r0, #4294967295
 800db3a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800db3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db42:	9844      	ldr	r0, [sp, #272]	; 0x110
 800db44:	e7f9      	b.n	800db3a <__ssvfiscanf_r+0x2de>
 800db46:	bf00      	nop
 800db48:	08009c55 	.word	0x08009c55

0800db4c <_scanf_chars>:
 800db4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db50:	4615      	mov	r5, r2
 800db52:	688a      	ldr	r2, [r1, #8]
 800db54:	4680      	mov	r8, r0
 800db56:	460c      	mov	r4, r1
 800db58:	b932      	cbnz	r2, 800db68 <_scanf_chars+0x1c>
 800db5a:	698a      	ldr	r2, [r1, #24]
 800db5c:	2a00      	cmp	r2, #0
 800db5e:	bf0c      	ite	eq
 800db60:	2201      	moveq	r2, #1
 800db62:	f04f 32ff 	movne.w	r2, #4294967295
 800db66:	608a      	str	r2, [r1, #8]
 800db68:	6822      	ldr	r2, [r4, #0]
 800db6a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800dbfc <_scanf_chars+0xb0>
 800db6e:	06d1      	lsls	r1, r2, #27
 800db70:	bf5f      	itttt	pl
 800db72:	681a      	ldrpl	r2, [r3, #0]
 800db74:	1d11      	addpl	r1, r2, #4
 800db76:	6019      	strpl	r1, [r3, #0]
 800db78:	6816      	ldrpl	r6, [r2, #0]
 800db7a:	2700      	movs	r7, #0
 800db7c:	69a0      	ldr	r0, [r4, #24]
 800db7e:	b188      	cbz	r0, 800dba4 <_scanf_chars+0x58>
 800db80:	2801      	cmp	r0, #1
 800db82:	d107      	bne.n	800db94 <_scanf_chars+0x48>
 800db84:	682a      	ldr	r2, [r5, #0]
 800db86:	7811      	ldrb	r1, [r2, #0]
 800db88:	6962      	ldr	r2, [r4, #20]
 800db8a:	5c52      	ldrb	r2, [r2, r1]
 800db8c:	b952      	cbnz	r2, 800dba4 <_scanf_chars+0x58>
 800db8e:	2f00      	cmp	r7, #0
 800db90:	d031      	beq.n	800dbf6 <_scanf_chars+0xaa>
 800db92:	e022      	b.n	800dbda <_scanf_chars+0x8e>
 800db94:	2802      	cmp	r0, #2
 800db96:	d120      	bne.n	800dbda <_scanf_chars+0x8e>
 800db98:	682b      	ldr	r3, [r5, #0]
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800dba0:	071b      	lsls	r3, r3, #28
 800dba2:	d41a      	bmi.n	800dbda <_scanf_chars+0x8e>
 800dba4:	6823      	ldr	r3, [r4, #0]
 800dba6:	06da      	lsls	r2, r3, #27
 800dba8:	bf5e      	ittt	pl
 800dbaa:	682b      	ldrpl	r3, [r5, #0]
 800dbac:	781b      	ldrbpl	r3, [r3, #0]
 800dbae:	f806 3b01 	strbpl.w	r3, [r6], #1
 800dbb2:	682a      	ldr	r2, [r5, #0]
 800dbb4:	686b      	ldr	r3, [r5, #4]
 800dbb6:	3201      	adds	r2, #1
 800dbb8:	602a      	str	r2, [r5, #0]
 800dbba:	68a2      	ldr	r2, [r4, #8]
 800dbbc:	3b01      	subs	r3, #1
 800dbbe:	3a01      	subs	r2, #1
 800dbc0:	606b      	str	r3, [r5, #4]
 800dbc2:	3701      	adds	r7, #1
 800dbc4:	60a2      	str	r2, [r4, #8]
 800dbc6:	b142      	cbz	r2, 800dbda <_scanf_chars+0x8e>
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	dcd7      	bgt.n	800db7c <_scanf_chars+0x30>
 800dbcc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	4640      	mov	r0, r8
 800dbd4:	4798      	blx	r3
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	d0d0      	beq.n	800db7c <_scanf_chars+0x30>
 800dbda:	6823      	ldr	r3, [r4, #0]
 800dbdc:	f013 0310 	ands.w	r3, r3, #16
 800dbe0:	d105      	bne.n	800dbee <_scanf_chars+0xa2>
 800dbe2:	68e2      	ldr	r2, [r4, #12]
 800dbe4:	3201      	adds	r2, #1
 800dbe6:	60e2      	str	r2, [r4, #12]
 800dbe8:	69a2      	ldr	r2, [r4, #24]
 800dbea:	b102      	cbz	r2, 800dbee <_scanf_chars+0xa2>
 800dbec:	7033      	strb	r3, [r6, #0]
 800dbee:	6923      	ldr	r3, [r4, #16]
 800dbf0:	443b      	add	r3, r7
 800dbf2:	6123      	str	r3, [r4, #16]
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbfa:	bf00      	nop
 800dbfc:	0800e4dd 	.word	0x0800e4dd

0800dc00 <_scanf_i>:
 800dc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc04:	4698      	mov	r8, r3
 800dc06:	4b76      	ldr	r3, [pc, #472]	; (800dde0 <_scanf_i+0x1e0>)
 800dc08:	460c      	mov	r4, r1
 800dc0a:	4682      	mov	sl, r0
 800dc0c:	4616      	mov	r6, r2
 800dc0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc12:	b087      	sub	sp, #28
 800dc14:	ab03      	add	r3, sp, #12
 800dc16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800dc1a:	4b72      	ldr	r3, [pc, #456]	; (800dde4 <_scanf_i+0x1e4>)
 800dc1c:	69a1      	ldr	r1, [r4, #24]
 800dc1e:	4a72      	ldr	r2, [pc, #456]	; (800dde8 <_scanf_i+0x1e8>)
 800dc20:	2903      	cmp	r1, #3
 800dc22:	bf18      	it	ne
 800dc24:	461a      	movne	r2, r3
 800dc26:	68a3      	ldr	r3, [r4, #8]
 800dc28:	9201      	str	r2, [sp, #4]
 800dc2a:	1e5a      	subs	r2, r3, #1
 800dc2c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dc30:	bf88      	it	hi
 800dc32:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dc36:	4627      	mov	r7, r4
 800dc38:	bf82      	ittt	hi
 800dc3a:	eb03 0905 	addhi.w	r9, r3, r5
 800dc3e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dc42:	60a3      	strhi	r3, [r4, #8]
 800dc44:	f857 3b1c 	ldr.w	r3, [r7], #28
 800dc48:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800dc4c:	bf98      	it	ls
 800dc4e:	f04f 0900 	movls.w	r9, #0
 800dc52:	6023      	str	r3, [r4, #0]
 800dc54:	463d      	mov	r5, r7
 800dc56:	f04f 0b00 	mov.w	fp, #0
 800dc5a:	6831      	ldr	r1, [r6, #0]
 800dc5c:	ab03      	add	r3, sp, #12
 800dc5e:	7809      	ldrb	r1, [r1, #0]
 800dc60:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800dc64:	2202      	movs	r2, #2
 800dc66:	f7f2 facb 	bl	8000200 <memchr>
 800dc6a:	b328      	cbz	r0, 800dcb8 <_scanf_i+0xb8>
 800dc6c:	f1bb 0f01 	cmp.w	fp, #1
 800dc70:	d159      	bne.n	800dd26 <_scanf_i+0x126>
 800dc72:	6862      	ldr	r2, [r4, #4]
 800dc74:	b92a      	cbnz	r2, 800dc82 <_scanf_i+0x82>
 800dc76:	6822      	ldr	r2, [r4, #0]
 800dc78:	2308      	movs	r3, #8
 800dc7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc7e:	6063      	str	r3, [r4, #4]
 800dc80:	6022      	str	r2, [r4, #0]
 800dc82:	6822      	ldr	r2, [r4, #0]
 800dc84:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800dc88:	6022      	str	r2, [r4, #0]
 800dc8a:	68a2      	ldr	r2, [r4, #8]
 800dc8c:	1e51      	subs	r1, r2, #1
 800dc8e:	60a1      	str	r1, [r4, #8]
 800dc90:	b192      	cbz	r2, 800dcb8 <_scanf_i+0xb8>
 800dc92:	6832      	ldr	r2, [r6, #0]
 800dc94:	1c51      	adds	r1, r2, #1
 800dc96:	6031      	str	r1, [r6, #0]
 800dc98:	7812      	ldrb	r2, [r2, #0]
 800dc9a:	f805 2b01 	strb.w	r2, [r5], #1
 800dc9e:	6872      	ldr	r2, [r6, #4]
 800dca0:	3a01      	subs	r2, #1
 800dca2:	2a00      	cmp	r2, #0
 800dca4:	6072      	str	r2, [r6, #4]
 800dca6:	dc07      	bgt.n	800dcb8 <_scanf_i+0xb8>
 800dca8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800dcac:	4631      	mov	r1, r6
 800dcae:	4650      	mov	r0, sl
 800dcb0:	4790      	blx	r2
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	f040 8085 	bne.w	800ddc2 <_scanf_i+0x1c2>
 800dcb8:	f10b 0b01 	add.w	fp, fp, #1
 800dcbc:	f1bb 0f03 	cmp.w	fp, #3
 800dcc0:	d1cb      	bne.n	800dc5a <_scanf_i+0x5a>
 800dcc2:	6863      	ldr	r3, [r4, #4]
 800dcc4:	b90b      	cbnz	r3, 800dcca <_scanf_i+0xca>
 800dcc6:	230a      	movs	r3, #10
 800dcc8:	6063      	str	r3, [r4, #4]
 800dcca:	6863      	ldr	r3, [r4, #4]
 800dccc:	4947      	ldr	r1, [pc, #284]	; (800ddec <_scanf_i+0x1ec>)
 800dcce:	6960      	ldr	r0, [r4, #20]
 800dcd0:	1ac9      	subs	r1, r1, r3
 800dcd2:	f000 f8f1 	bl	800deb8 <__sccl>
 800dcd6:	f04f 0b00 	mov.w	fp, #0
 800dcda:	68a3      	ldr	r3, [r4, #8]
 800dcdc:	6822      	ldr	r2, [r4, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d03d      	beq.n	800dd5e <_scanf_i+0x15e>
 800dce2:	6831      	ldr	r1, [r6, #0]
 800dce4:	6960      	ldr	r0, [r4, #20]
 800dce6:	f891 c000 	ldrb.w	ip, [r1]
 800dcea:	f810 000c 	ldrb.w	r0, [r0, ip]
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	d035      	beq.n	800dd5e <_scanf_i+0x15e>
 800dcf2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800dcf6:	d124      	bne.n	800dd42 <_scanf_i+0x142>
 800dcf8:	0510      	lsls	r0, r2, #20
 800dcfa:	d522      	bpl.n	800dd42 <_scanf_i+0x142>
 800dcfc:	f10b 0b01 	add.w	fp, fp, #1
 800dd00:	f1b9 0f00 	cmp.w	r9, #0
 800dd04:	d003      	beq.n	800dd0e <_scanf_i+0x10e>
 800dd06:	3301      	adds	r3, #1
 800dd08:	f109 39ff 	add.w	r9, r9, #4294967295
 800dd0c:	60a3      	str	r3, [r4, #8]
 800dd0e:	6873      	ldr	r3, [r6, #4]
 800dd10:	3b01      	subs	r3, #1
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	6073      	str	r3, [r6, #4]
 800dd16:	dd1b      	ble.n	800dd50 <_scanf_i+0x150>
 800dd18:	6833      	ldr	r3, [r6, #0]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	6033      	str	r3, [r6, #0]
 800dd1e:	68a3      	ldr	r3, [r4, #8]
 800dd20:	3b01      	subs	r3, #1
 800dd22:	60a3      	str	r3, [r4, #8]
 800dd24:	e7d9      	b.n	800dcda <_scanf_i+0xda>
 800dd26:	f1bb 0f02 	cmp.w	fp, #2
 800dd2a:	d1ae      	bne.n	800dc8a <_scanf_i+0x8a>
 800dd2c:	6822      	ldr	r2, [r4, #0]
 800dd2e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800dd32:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800dd36:	d1bf      	bne.n	800dcb8 <_scanf_i+0xb8>
 800dd38:	2310      	movs	r3, #16
 800dd3a:	6063      	str	r3, [r4, #4]
 800dd3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dd40:	e7a2      	b.n	800dc88 <_scanf_i+0x88>
 800dd42:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800dd46:	6022      	str	r2, [r4, #0]
 800dd48:	780b      	ldrb	r3, [r1, #0]
 800dd4a:	f805 3b01 	strb.w	r3, [r5], #1
 800dd4e:	e7de      	b.n	800dd0e <_scanf_i+0x10e>
 800dd50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dd54:	4631      	mov	r1, r6
 800dd56:	4650      	mov	r0, sl
 800dd58:	4798      	blx	r3
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	d0df      	beq.n	800dd1e <_scanf_i+0x11e>
 800dd5e:	6823      	ldr	r3, [r4, #0]
 800dd60:	05db      	lsls	r3, r3, #23
 800dd62:	d50d      	bpl.n	800dd80 <_scanf_i+0x180>
 800dd64:	42bd      	cmp	r5, r7
 800dd66:	d909      	bls.n	800dd7c <_scanf_i+0x17c>
 800dd68:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800dd6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd70:	4632      	mov	r2, r6
 800dd72:	4650      	mov	r0, sl
 800dd74:	4798      	blx	r3
 800dd76:	f105 39ff 	add.w	r9, r5, #4294967295
 800dd7a:	464d      	mov	r5, r9
 800dd7c:	42bd      	cmp	r5, r7
 800dd7e:	d02d      	beq.n	800dddc <_scanf_i+0x1dc>
 800dd80:	6822      	ldr	r2, [r4, #0]
 800dd82:	f012 0210 	ands.w	r2, r2, #16
 800dd86:	d113      	bne.n	800ddb0 <_scanf_i+0x1b0>
 800dd88:	702a      	strb	r2, [r5, #0]
 800dd8a:	6863      	ldr	r3, [r4, #4]
 800dd8c:	9e01      	ldr	r6, [sp, #4]
 800dd8e:	4639      	mov	r1, r7
 800dd90:	4650      	mov	r0, sl
 800dd92:	47b0      	blx	r6
 800dd94:	6821      	ldr	r1, [r4, #0]
 800dd96:	f8d8 3000 	ldr.w	r3, [r8]
 800dd9a:	f011 0f20 	tst.w	r1, #32
 800dd9e:	d013      	beq.n	800ddc8 <_scanf_i+0x1c8>
 800dda0:	1d1a      	adds	r2, r3, #4
 800dda2:	f8c8 2000 	str.w	r2, [r8]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	6018      	str	r0, [r3, #0]
 800ddaa:	68e3      	ldr	r3, [r4, #12]
 800ddac:	3301      	adds	r3, #1
 800ddae:	60e3      	str	r3, [r4, #12]
 800ddb0:	1bed      	subs	r5, r5, r7
 800ddb2:	44ab      	add	fp, r5
 800ddb4:	6925      	ldr	r5, [r4, #16]
 800ddb6:	445d      	add	r5, fp
 800ddb8:	6125      	str	r5, [r4, #16]
 800ddba:	2000      	movs	r0, #0
 800ddbc:	b007      	add	sp, #28
 800ddbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc2:	f04f 0b00 	mov.w	fp, #0
 800ddc6:	e7ca      	b.n	800dd5e <_scanf_i+0x15e>
 800ddc8:	1d1a      	adds	r2, r3, #4
 800ddca:	f8c8 2000 	str.w	r2, [r8]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f011 0f01 	tst.w	r1, #1
 800ddd4:	bf14      	ite	ne
 800ddd6:	8018      	strhne	r0, [r3, #0]
 800ddd8:	6018      	streq	r0, [r3, #0]
 800ddda:	e7e6      	b.n	800ddaa <_scanf_i+0x1aa>
 800dddc:	2001      	movs	r0, #1
 800ddde:	e7ed      	b.n	800ddbc <_scanf_i+0x1bc>
 800dde0:	0800e354 	.word	0x0800e354
 800dde4:	0800e0bd 	.word	0x0800e0bd
 800dde8:	0800b03d 	.word	0x0800b03d
 800ddec:	0800e8a5 	.word	0x0800e8a5

0800ddf0 <_putc_r>:
 800ddf0:	b570      	push	{r4, r5, r6, lr}
 800ddf2:	460d      	mov	r5, r1
 800ddf4:	4614      	mov	r4, r2
 800ddf6:	4606      	mov	r6, r0
 800ddf8:	b118      	cbz	r0, 800de02 <_putc_r+0x12>
 800ddfa:	6983      	ldr	r3, [r0, #24]
 800ddfc:	b90b      	cbnz	r3, 800de02 <_putc_r+0x12>
 800ddfe:	f7fe f99f 	bl	800c140 <__sinit>
 800de02:	4b1c      	ldr	r3, [pc, #112]	; (800de74 <_putc_r+0x84>)
 800de04:	429c      	cmp	r4, r3
 800de06:	d124      	bne.n	800de52 <_putc_r+0x62>
 800de08:	6874      	ldr	r4, [r6, #4]
 800de0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de0c:	07d8      	lsls	r0, r3, #31
 800de0e:	d405      	bmi.n	800de1c <_putc_r+0x2c>
 800de10:	89a3      	ldrh	r3, [r4, #12]
 800de12:	0599      	lsls	r1, r3, #22
 800de14:	d402      	bmi.n	800de1c <_putc_r+0x2c>
 800de16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de18:	f7fe fda3 	bl	800c962 <__retarget_lock_acquire_recursive>
 800de1c:	68a3      	ldr	r3, [r4, #8]
 800de1e:	3b01      	subs	r3, #1
 800de20:	2b00      	cmp	r3, #0
 800de22:	60a3      	str	r3, [r4, #8]
 800de24:	da05      	bge.n	800de32 <_putc_r+0x42>
 800de26:	69a2      	ldr	r2, [r4, #24]
 800de28:	4293      	cmp	r3, r2
 800de2a:	db1c      	blt.n	800de66 <_putc_r+0x76>
 800de2c:	b2eb      	uxtb	r3, r5
 800de2e:	2b0a      	cmp	r3, #10
 800de30:	d019      	beq.n	800de66 <_putc_r+0x76>
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	1c5a      	adds	r2, r3, #1
 800de36:	6022      	str	r2, [r4, #0]
 800de38:	701d      	strb	r5, [r3, #0]
 800de3a:	b2ed      	uxtb	r5, r5
 800de3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de3e:	07da      	lsls	r2, r3, #31
 800de40:	d405      	bmi.n	800de4e <_putc_r+0x5e>
 800de42:	89a3      	ldrh	r3, [r4, #12]
 800de44:	059b      	lsls	r3, r3, #22
 800de46:	d402      	bmi.n	800de4e <_putc_r+0x5e>
 800de48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de4a:	f7fe fd8b 	bl	800c964 <__retarget_lock_release_recursive>
 800de4e:	4628      	mov	r0, r5
 800de50:	bd70      	pop	{r4, r5, r6, pc}
 800de52:	4b09      	ldr	r3, [pc, #36]	; (800de78 <_putc_r+0x88>)
 800de54:	429c      	cmp	r4, r3
 800de56:	d101      	bne.n	800de5c <_putc_r+0x6c>
 800de58:	68b4      	ldr	r4, [r6, #8]
 800de5a:	e7d6      	b.n	800de0a <_putc_r+0x1a>
 800de5c:	4b07      	ldr	r3, [pc, #28]	; (800de7c <_putc_r+0x8c>)
 800de5e:	429c      	cmp	r4, r3
 800de60:	bf08      	it	eq
 800de62:	68f4      	ldreq	r4, [r6, #12]
 800de64:	e7d1      	b.n	800de0a <_putc_r+0x1a>
 800de66:	4629      	mov	r1, r5
 800de68:	4622      	mov	r2, r4
 800de6a:	4630      	mov	r0, r6
 800de6c:	f7fd f8e8 	bl	800b040 <__swbuf_r>
 800de70:	4605      	mov	r5, r0
 800de72:	e7e3      	b.n	800de3c <_putc_r+0x4c>
 800de74:	0800e678 	.word	0x0800e678
 800de78:	0800e698 	.word	0x0800e698
 800de7c:	0800e658 	.word	0x0800e658

0800de80 <_read_r>:
 800de80:	b538      	push	{r3, r4, r5, lr}
 800de82:	4d07      	ldr	r5, [pc, #28]	; (800dea0 <_read_r+0x20>)
 800de84:	4604      	mov	r4, r0
 800de86:	4608      	mov	r0, r1
 800de88:	4611      	mov	r1, r2
 800de8a:	2200      	movs	r2, #0
 800de8c:	602a      	str	r2, [r5, #0]
 800de8e:	461a      	mov	r2, r3
 800de90:	f7f6 fc50 	bl	8004734 <_read>
 800de94:	1c43      	adds	r3, r0, #1
 800de96:	d102      	bne.n	800de9e <_read_r+0x1e>
 800de98:	682b      	ldr	r3, [r5, #0]
 800de9a:	b103      	cbz	r3, 800de9e <_read_r+0x1e>
 800de9c:	6023      	str	r3, [r4, #0]
 800de9e:	bd38      	pop	{r3, r4, r5, pc}
 800dea0:	20001bf4 	.word	0x20001bf4
 800dea4:	00000000 	.word	0x00000000

0800dea8 <nan>:
 800dea8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800deb0 <nan+0x8>
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop
 800deb0:	00000000 	.word	0x00000000
 800deb4:	7ff80000 	.word	0x7ff80000

0800deb8 <__sccl>:
 800deb8:	b570      	push	{r4, r5, r6, lr}
 800deba:	780b      	ldrb	r3, [r1, #0]
 800debc:	4604      	mov	r4, r0
 800debe:	2b5e      	cmp	r3, #94	; 0x5e
 800dec0:	bf0b      	itete	eq
 800dec2:	784b      	ldrbeq	r3, [r1, #1]
 800dec4:	1c48      	addne	r0, r1, #1
 800dec6:	1c88      	addeq	r0, r1, #2
 800dec8:	2200      	movne	r2, #0
 800deca:	bf08      	it	eq
 800decc:	2201      	moveq	r2, #1
 800dece:	1e61      	subs	r1, r4, #1
 800ded0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ded4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ded8:	42a9      	cmp	r1, r5
 800deda:	d1fb      	bne.n	800ded4 <__sccl+0x1c>
 800dedc:	b90b      	cbnz	r3, 800dee2 <__sccl+0x2a>
 800dede:	3801      	subs	r0, #1
 800dee0:	bd70      	pop	{r4, r5, r6, pc}
 800dee2:	f082 0201 	eor.w	r2, r2, #1
 800dee6:	54e2      	strb	r2, [r4, r3]
 800dee8:	4605      	mov	r5, r0
 800deea:	4628      	mov	r0, r5
 800deec:	f810 1b01 	ldrb.w	r1, [r0], #1
 800def0:	292d      	cmp	r1, #45	; 0x2d
 800def2:	d006      	beq.n	800df02 <__sccl+0x4a>
 800def4:	295d      	cmp	r1, #93	; 0x5d
 800def6:	d0f3      	beq.n	800dee0 <__sccl+0x28>
 800def8:	b909      	cbnz	r1, 800defe <__sccl+0x46>
 800defa:	4628      	mov	r0, r5
 800defc:	e7f0      	b.n	800dee0 <__sccl+0x28>
 800defe:	460b      	mov	r3, r1
 800df00:	e7f1      	b.n	800dee6 <__sccl+0x2e>
 800df02:	786e      	ldrb	r6, [r5, #1]
 800df04:	2e5d      	cmp	r6, #93	; 0x5d
 800df06:	d0fa      	beq.n	800defe <__sccl+0x46>
 800df08:	42b3      	cmp	r3, r6
 800df0a:	dcf8      	bgt.n	800defe <__sccl+0x46>
 800df0c:	3502      	adds	r5, #2
 800df0e:	4619      	mov	r1, r3
 800df10:	3101      	adds	r1, #1
 800df12:	428e      	cmp	r6, r1
 800df14:	5462      	strb	r2, [r4, r1]
 800df16:	dcfb      	bgt.n	800df10 <__sccl+0x58>
 800df18:	1af1      	subs	r1, r6, r3
 800df1a:	3901      	subs	r1, #1
 800df1c:	1c58      	adds	r0, r3, #1
 800df1e:	42b3      	cmp	r3, r6
 800df20:	bfa8      	it	ge
 800df22:	2100      	movge	r1, #0
 800df24:	1843      	adds	r3, r0, r1
 800df26:	e7e0      	b.n	800deea <__sccl+0x32>

0800df28 <_raise_r>:
 800df28:	291f      	cmp	r1, #31
 800df2a:	b538      	push	{r3, r4, r5, lr}
 800df2c:	4604      	mov	r4, r0
 800df2e:	460d      	mov	r5, r1
 800df30:	d904      	bls.n	800df3c <_raise_r+0x14>
 800df32:	2316      	movs	r3, #22
 800df34:	6003      	str	r3, [r0, #0]
 800df36:	f04f 30ff 	mov.w	r0, #4294967295
 800df3a:	bd38      	pop	{r3, r4, r5, pc}
 800df3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800df3e:	b112      	cbz	r2, 800df46 <_raise_r+0x1e>
 800df40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df44:	b94b      	cbnz	r3, 800df5a <_raise_r+0x32>
 800df46:	4620      	mov	r0, r4
 800df48:	f000 f830 	bl	800dfac <_getpid_r>
 800df4c:	462a      	mov	r2, r5
 800df4e:	4601      	mov	r1, r0
 800df50:	4620      	mov	r0, r4
 800df52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df56:	f000 b817 	b.w	800df88 <_kill_r>
 800df5a:	2b01      	cmp	r3, #1
 800df5c:	d00a      	beq.n	800df74 <_raise_r+0x4c>
 800df5e:	1c59      	adds	r1, r3, #1
 800df60:	d103      	bne.n	800df6a <_raise_r+0x42>
 800df62:	2316      	movs	r3, #22
 800df64:	6003      	str	r3, [r0, #0]
 800df66:	2001      	movs	r0, #1
 800df68:	e7e7      	b.n	800df3a <_raise_r+0x12>
 800df6a:	2400      	movs	r4, #0
 800df6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800df70:	4628      	mov	r0, r5
 800df72:	4798      	blx	r3
 800df74:	2000      	movs	r0, #0
 800df76:	e7e0      	b.n	800df3a <_raise_r+0x12>

0800df78 <raise>:
 800df78:	4b02      	ldr	r3, [pc, #8]	; (800df84 <raise+0xc>)
 800df7a:	4601      	mov	r1, r0
 800df7c:	6818      	ldr	r0, [r3, #0]
 800df7e:	f7ff bfd3 	b.w	800df28 <_raise_r>
 800df82:	bf00      	nop
 800df84:	20000f38 	.word	0x20000f38

0800df88 <_kill_r>:
 800df88:	b538      	push	{r3, r4, r5, lr}
 800df8a:	4d07      	ldr	r5, [pc, #28]	; (800dfa8 <_kill_r+0x20>)
 800df8c:	2300      	movs	r3, #0
 800df8e:	4604      	mov	r4, r0
 800df90:	4608      	mov	r0, r1
 800df92:	4611      	mov	r1, r2
 800df94:	602b      	str	r3, [r5, #0]
 800df96:	f7f6 fbb3 	bl	8004700 <_kill>
 800df9a:	1c43      	adds	r3, r0, #1
 800df9c:	d102      	bne.n	800dfa4 <_kill_r+0x1c>
 800df9e:	682b      	ldr	r3, [r5, #0]
 800dfa0:	b103      	cbz	r3, 800dfa4 <_kill_r+0x1c>
 800dfa2:	6023      	str	r3, [r4, #0]
 800dfa4:	bd38      	pop	{r3, r4, r5, pc}
 800dfa6:	bf00      	nop
 800dfa8:	20001bf4 	.word	0x20001bf4

0800dfac <_getpid_r>:
 800dfac:	f7f6 bba0 	b.w	80046f0 <_getpid>

0800dfb0 <strncmp>:
 800dfb0:	b510      	push	{r4, lr}
 800dfb2:	b17a      	cbz	r2, 800dfd4 <strncmp+0x24>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	3901      	subs	r1, #1
 800dfb8:	1884      	adds	r4, r0, r2
 800dfba:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dfbe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dfc2:	4290      	cmp	r0, r2
 800dfc4:	d101      	bne.n	800dfca <strncmp+0x1a>
 800dfc6:	42a3      	cmp	r3, r4
 800dfc8:	d101      	bne.n	800dfce <strncmp+0x1e>
 800dfca:	1a80      	subs	r0, r0, r2
 800dfcc:	bd10      	pop	{r4, pc}
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	d1f3      	bne.n	800dfba <strncmp+0xa>
 800dfd2:	e7fa      	b.n	800dfca <strncmp+0x1a>
 800dfd4:	4610      	mov	r0, r2
 800dfd6:	e7f9      	b.n	800dfcc <strncmp+0x1c>

0800dfd8 <_strtoul_l.constprop.0>:
 800dfd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfdc:	4f36      	ldr	r7, [pc, #216]	; (800e0b8 <_strtoul_l.constprop.0+0xe0>)
 800dfde:	4686      	mov	lr, r0
 800dfe0:	460d      	mov	r5, r1
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfe8:	5de6      	ldrb	r6, [r4, r7]
 800dfea:	f016 0608 	ands.w	r6, r6, #8
 800dfee:	d1f8      	bne.n	800dfe2 <_strtoul_l.constprop.0+0xa>
 800dff0:	2c2d      	cmp	r4, #45	; 0x2d
 800dff2:	d12f      	bne.n	800e054 <_strtoul_l.constprop.0+0x7c>
 800dff4:	782c      	ldrb	r4, [r5, #0]
 800dff6:	2601      	movs	r6, #1
 800dff8:	1c85      	adds	r5, r0, #2
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d057      	beq.n	800e0ae <_strtoul_l.constprop.0+0xd6>
 800dffe:	2b10      	cmp	r3, #16
 800e000:	d109      	bne.n	800e016 <_strtoul_l.constprop.0+0x3e>
 800e002:	2c30      	cmp	r4, #48	; 0x30
 800e004:	d107      	bne.n	800e016 <_strtoul_l.constprop.0+0x3e>
 800e006:	7828      	ldrb	r0, [r5, #0]
 800e008:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e00c:	2858      	cmp	r0, #88	; 0x58
 800e00e:	d149      	bne.n	800e0a4 <_strtoul_l.constprop.0+0xcc>
 800e010:	786c      	ldrb	r4, [r5, #1]
 800e012:	2310      	movs	r3, #16
 800e014:	3502      	adds	r5, #2
 800e016:	f04f 38ff 	mov.w	r8, #4294967295
 800e01a:	2700      	movs	r7, #0
 800e01c:	fbb8 f8f3 	udiv	r8, r8, r3
 800e020:	fb03 f908 	mul.w	r9, r3, r8
 800e024:	ea6f 0909 	mvn.w	r9, r9
 800e028:	4638      	mov	r0, r7
 800e02a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e02e:	f1bc 0f09 	cmp.w	ip, #9
 800e032:	d814      	bhi.n	800e05e <_strtoul_l.constprop.0+0x86>
 800e034:	4664      	mov	r4, ip
 800e036:	42a3      	cmp	r3, r4
 800e038:	dd22      	ble.n	800e080 <_strtoul_l.constprop.0+0xa8>
 800e03a:	2f00      	cmp	r7, #0
 800e03c:	db1d      	blt.n	800e07a <_strtoul_l.constprop.0+0xa2>
 800e03e:	4580      	cmp	r8, r0
 800e040:	d31b      	bcc.n	800e07a <_strtoul_l.constprop.0+0xa2>
 800e042:	d101      	bne.n	800e048 <_strtoul_l.constprop.0+0x70>
 800e044:	45a1      	cmp	r9, r4
 800e046:	db18      	blt.n	800e07a <_strtoul_l.constprop.0+0xa2>
 800e048:	fb00 4003 	mla	r0, r0, r3, r4
 800e04c:	2701      	movs	r7, #1
 800e04e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e052:	e7ea      	b.n	800e02a <_strtoul_l.constprop.0+0x52>
 800e054:	2c2b      	cmp	r4, #43	; 0x2b
 800e056:	bf04      	itt	eq
 800e058:	782c      	ldrbeq	r4, [r5, #0]
 800e05a:	1c85      	addeq	r5, r0, #2
 800e05c:	e7cd      	b.n	800dffa <_strtoul_l.constprop.0+0x22>
 800e05e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e062:	f1bc 0f19 	cmp.w	ip, #25
 800e066:	d801      	bhi.n	800e06c <_strtoul_l.constprop.0+0x94>
 800e068:	3c37      	subs	r4, #55	; 0x37
 800e06a:	e7e4      	b.n	800e036 <_strtoul_l.constprop.0+0x5e>
 800e06c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e070:	f1bc 0f19 	cmp.w	ip, #25
 800e074:	d804      	bhi.n	800e080 <_strtoul_l.constprop.0+0xa8>
 800e076:	3c57      	subs	r4, #87	; 0x57
 800e078:	e7dd      	b.n	800e036 <_strtoul_l.constprop.0+0x5e>
 800e07a:	f04f 37ff 	mov.w	r7, #4294967295
 800e07e:	e7e6      	b.n	800e04e <_strtoul_l.constprop.0+0x76>
 800e080:	2f00      	cmp	r7, #0
 800e082:	da07      	bge.n	800e094 <_strtoul_l.constprop.0+0xbc>
 800e084:	2322      	movs	r3, #34	; 0x22
 800e086:	f8ce 3000 	str.w	r3, [lr]
 800e08a:	f04f 30ff 	mov.w	r0, #4294967295
 800e08e:	b932      	cbnz	r2, 800e09e <_strtoul_l.constprop.0+0xc6>
 800e090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e094:	b106      	cbz	r6, 800e098 <_strtoul_l.constprop.0+0xc0>
 800e096:	4240      	negs	r0, r0
 800e098:	2a00      	cmp	r2, #0
 800e09a:	d0f9      	beq.n	800e090 <_strtoul_l.constprop.0+0xb8>
 800e09c:	b107      	cbz	r7, 800e0a0 <_strtoul_l.constprop.0+0xc8>
 800e09e:	1e69      	subs	r1, r5, #1
 800e0a0:	6011      	str	r1, [r2, #0]
 800e0a2:	e7f5      	b.n	800e090 <_strtoul_l.constprop.0+0xb8>
 800e0a4:	2430      	movs	r4, #48	; 0x30
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d1b5      	bne.n	800e016 <_strtoul_l.constprop.0+0x3e>
 800e0aa:	2308      	movs	r3, #8
 800e0ac:	e7b3      	b.n	800e016 <_strtoul_l.constprop.0+0x3e>
 800e0ae:	2c30      	cmp	r4, #48	; 0x30
 800e0b0:	d0a9      	beq.n	800e006 <_strtoul_l.constprop.0+0x2e>
 800e0b2:	230a      	movs	r3, #10
 800e0b4:	e7af      	b.n	800e016 <_strtoul_l.constprop.0+0x3e>
 800e0b6:	bf00      	nop
 800e0b8:	0800e4dd 	.word	0x0800e4dd

0800e0bc <_strtoul_r>:
 800e0bc:	f7ff bf8c 	b.w	800dfd8 <_strtoul_l.constprop.0>

0800e0c0 <__submore>:
 800e0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c4:	460c      	mov	r4, r1
 800e0c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e0c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0cc:	4299      	cmp	r1, r3
 800e0ce:	d11d      	bne.n	800e10c <__submore+0x4c>
 800e0d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e0d4:	f7fa ff86 	bl	8008fe4 <_malloc_r>
 800e0d8:	b918      	cbnz	r0, 800e0e2 <__submore+0x22>
 800e0da:	f04f 30ff 	mov.w	r0, #4294967295
 800e0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0e6:	63a3      	str	r3, [r4, #56]	; 0x38
 800e0e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e0ec:	6360      	str	r0, [r4, #52]	; 0x34
 800e0ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e0f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e0f6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e0fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e0fe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e102:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e106:	6020      	str	r0, [r4, #0]
 800e108:	2000      	movs	r0, #0
 800e10a:	e7e8      	b.n	800e0de <__submore+0x1e>
 800e10c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e10e:	0077      	lsls	r7, r6, #1
 800e110:	463a      	mov	r2, r7
 800e112:	f7ff f9be 	bl	800d492 <_realloc_r>
 800e116:	4605      	mov	r5, r0
 800e118:	2800      	cmp	r0, #0
 800e11a:	d0de      	beq.n	800e0da <__submore+0x1a>
 800e11c:	eb00 0806 	add.w	r8, r0, r6
 800e120:	4601      	mov	r1, r0
 800e122:	4632      	mov	r2, r6
 800e124:	4640      	mov	r0, r8
 800e126:	f7fe fca9 	bl	800ca7c <memcpy>
 800e12a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e12e:	f8c4 8000 	str.w	r8, [r4]
 800e132:	e7e9      	b.n	800e108 <__submore+0x48>

0800e134 <__ascii_wctomb>:
 800e134:	b149      	cbz	r1, 800e14a <__ascii_wctomb+0x16>
 800e136:	2aff      	cmp	r2, #255	; 0xff
 800e138:	bf85      	ittet	hi
 800e13a:	238a      	movhi	r3, #138	; 0x8a
 800e13c:	6003      	strhi	r3, [r0, #0]
 800e13e:	700a      	strbls	r2, [r1, #0]
 800e140:	f04f 30ff 	movhi.w	r0, #4294967295
 800e144:	bf98      	it	ls
 800e146:	2001      	movls	r0, #1
 800e148:	4770      	bx	lr
 800e14a:	4608      	mov	r0, r1
 800e14c:	4770      	bx	lr
	...

0800e150 <_fstat_r>:
 800e150:	b538      	push	{r3, r4, r5, lr}
 800e152:	4d07      	ldr	r5, [pc, #28]	; (800e170 <_fstat_r+0x20>)
 800e154:	2300      	movs	r3, #0
 800e156:	4604      	mov	r4, r0
 800e158:	4608      	mov	r0, r1
 800e15a:	4611      	mov	r1, r2
 800e15c:	602b      	str	r3, [r5, #0]
 800e15e:	f7f6 fb2e 	bl	80047be <_fstat>
 800e162:	1c43      	adds	r3, r0, #1
 800e164:	d102      	bne.n	800e16c <_fstat_r+0x1c>
 800e166:	682b      	ldr	r3, [r5, #0]
 800e168:	b103      	cbz	r3, 800e16c <_fstat_r+0x1c>
 800e16a:	6023      	str	r3, [r4, #0]
 800e16c:	bd38      	pop	{r3, r4, r5, pc}
 800e16e:	bf00      	nop
 800e170:	20001bf4 	.word	0x20001bf4

0800e174 <_isatty_r>:
 800e174:	b538      	push	{r3, r4, r5, lr}
 800e176:	4d06      	ldr	r5, [pc, #24]	; (800e190 <_isatty_r+0x1c>)
 800e178:	2300      	movs	r3, #0
 800e17a:	4604      	mov	r4, r0
 800e17c:	4608      	mov	r0, r1
 800e17e:	602b      	str	r3, [r5, #0]
 800e180:	f7f6 fb2d 	bl	80047de <_isatty>
 800e184:	1c43      	adds	r3, r0, #1
 800e186:	d102      	bne.n	800e18e <_isatty_r+0x1a>
 800e188:	682b      	ldr	r3, [r5, #0]
 800e18a:	b103      	cbz	r3, 800e18e <_isatty_r+0x1a>
 800e18c:	6023      	str	r3, [r4, #0]
 800e18e:	bd38      	pop	{r3, r4, r5, pc}
 800e190:	20001bf4 	.word	0x20001bf4

0800e194 <_malloc_usable_size_r>:
 800e194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e198:	1f18      	subs	r0, r3, #4
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	bfbc      	itt	lt
 800e19e:	580b      	ldrlt	r3, [r1, r0]
 800e1a0:	18c0      	addlt	r0, r0, r3
 800e1a2:	4770      	bx	lr

0800e1a4 <_init>:
 800e1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1a6:	bf00      	nop
 800e1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1aa:	bc08      	pop	{r3}
 800e1ac:	469e      	mov	lr, r3
 800e1ae:	4770      	bx	lr

0800e1b0 <_fini>:
 800e1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1b2:	bf00      	nop
 800e1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1b6:	bc08      	pop	{r3}
 800e1b8:	469e      	mov	lr, r3
 800e1ba:	4770      	bx	lr
