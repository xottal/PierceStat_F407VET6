
PierceStat_F407VET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001058c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  08010720  08010720  00020720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e78  08010e78  000315b8  2**0
                  CONTENTS
  4 .ARM          00000008  08010e78  08010e78  00020e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e80  08010e80  000315b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e80  08010e80  00020e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e84  08010e84  00020e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000015b8  20000000  08010e88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000315b8  2**0
                  CONTENTS
 10 .bss          00001638  200015b8  200015b8  000315b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002bf0  20002bf0  000315b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000315b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015b45  00000000  00000000  000315e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032f2  00000000  00000000  0004712d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  0004a420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001490  00000000  00000000  0004b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e8e  00000000  00000000  0004ce68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001770f  00000000  00000000  00071cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db064  00000000  00000000  00089405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00164469  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007408  00000000  00000000  001644bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200015b8 	.word	0x200015b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010704 	.word	0x08010704

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200015bc 	.word	0x200015bc
 80001cc:	08010704 	.word	0x08010704

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <limitPID>:
float errorLast[2] = {0.0, 0.0};
uint32_t tStart[2] = {0, 0};
uint32_t tLast[2] = {0, 0};
uint32_t normCoeff[2] = {0, 0};

float limitPID(float PID) {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(PID > 100.0)
 8001022:	edd7 7a01 	vldr	s15, [r7, #4]
 8001026:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001064 <limitPID+0x4c>
 800102a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800102e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001032:	dd01      	ble.n	8001038 <limitPID+0x20>
		return 100.0;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <limitPID+0x50>)
 8001036:	e00b      	b.n	8001050 <limitPID+0x38>
	if(PID < -100.0)
 8001038:	edd7 7a01 	vldr	s15, [r7, #4]
 800103c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800106c <limitPID+0x54>
 8001040:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001048:	d501      	bpl.n	800104e <limitPID+0x36>
		return -100.0;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <limitPID+0x58>)
 800104c:	e000      	b.n	8001050 <limitPID+0x38>
	else
		return PID;
 800104e:	687b      	ldr	r3, [r7, #4]
}
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eeb0 0a67 	vmov.f32	s0, s15
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	42c80000 	.word	0x42c80000
 8001068:	42c80000 	.word	0x42c80000
 800106c:	c2c80000 	.word	0xc2c80000
 8001070:	c2c80000 	.word	0xc2c80000

08001074 <proceedPID>:

float proceedPID(uint8_t channel) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b0a6      	sub	sp, #152	; 0x98
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	switch (channel) { //Channel choice
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <proceedPID+0x18>
 8001084:	2b01      	cmp	r3, #1
 8001086:	f000 81ff 	beq.w	8001488 <proceedPID+0x414>
 800108a:	e3f7      	b.n	800187c <proceedPID+0x808>
	case 0: {
		float tempRead;
		bool isFreq = false;
 800108c:	2300      	movs	r3, #0
 800108e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		float freqRead = getFreq().val_float;
 8001092:	f002 fe4d 	bl	8003d30 <getFreq>
 8001096:	4603      	mov	r3, r0
 8001098:	63fb      	str	r3, [r7, #60]	; 0x3c

		uint8_t source = getSourceSelect1().val_uint8_t;
 800109a:	f002 f91f 	bl	80032dc <getSourceSelect1>
 800109e:	4603      	mov	r3, r0
 80010a0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		switch (source) { //Source choice ch1
 80010a4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d829      	bhi.n	8001100 <proceedPID+0x8c>
 80010ac:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <proceedPID+0x40>)
 80010ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b2:	bf00      	nop
 80010b4:	080010c9 	.word	0x080010c9
 80010b8:	080010d5 	.word	0x080010d5
 80010bc:	080010e1 	.word	0x080010e1
 80010c0:	080010ed 	.word	0x080010ed
 80010c4:	080010f9 	.word	0x080010f9
		case 0:
			tempRead = getTemp1().val_float;
 80010c8:	f001 fd76 	bl	8002bb8 <getTemp1>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			break;
 80010d2:	e015      	b.n	8001100 <proceedPID+0x8c>
		case 1:
			tempRead = getTemp2().val_float;
 80010d4:	f001 fd8c 	bl	8002bf0 <getTemp2>
 80010d8:	4603      	mov	r3, r0
 80010da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			break;
 80010de:	e00f      	b.n	8001100 <proceedPID+0x8c>
		case 2:
			tempRead = getTemp3().val_float;
 80010e0:	f001 fda2 	bl	8002c28 <getTemp3>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			break;
 80010ea:	e009      	b.n	8001100 <proceedPID+0x8c>
		case 3:
			tempRead = getTemp4().val_float;
 80010ec:	f001 fdb8 	bl	8002c60 <getTemp4>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			break;
 80010f6:	e003      	b.n	8001100 <proceedPID+0x8c>
		case 4:
			isFreq = true;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			break;
 80010fe:	bf00      	nop
		}

		if(!isFreq) { //Temp source ch1
 8001100:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001104:	f083 0301 	eor.w	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80d7 	beq.w	80012be <proceedPID+0x24a>
			float P = getPcoeff1Temp().val_float;
 8001110:	f002 f938 	bl	8003384 <getPcoeff1Temp>
 8001114:	4603      	mov	r3, r0
 8001116:	61fb      	str	r3, [r7, #28]
			float PID = 0.0;
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			if(tLast[0] == 0) {
 8001120:	4b7c      	ldr	r3, [pc, #496]	; (8001314 <proceedPID+0x2a0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d11e      	bne.n	8001166 <proceedPID+0xf2>
				tStart[0] = __HAL_TIM_GET_COUNTER(&htim5);
 8001128:	4b7b      	ldr	r3, [pc, #492]	; (8001318 <proceedPID+0x2a4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	4a7b      	ldr	r2, [pc, #492]	; (800131c <proceedPID+0x2a8>)
 8001130:	6013      	str	r3, [r2, #0]
				tLast[0] = tStart[0];
 8001132:	4b7a      	ldr	r3, [pc, #488]	; (800131c <proceedPID+0x2a8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a77      	ldr	r2, [pc, #476]	; (8001314 <proceedPID+0x2a0>)
 8001138:	6013      	str	r3, [r2, #0]
				errorLast[0] = tempRead - getTempCh1Set().val_float;
 800113a:	f002 fb7b 	bl	8003834 <getTempCh1Set>
 800113e:	4603      	mov	r3, r0
 8001140:	ee07 3a10 	vmov	s14, r3
 8001144:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001148:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800114c:	4b74      	ldr	r3, [pc, #464]	; (8001320 <proceedPID+0x2ac>)
 800114e:	edc3 7a00 	vstr	s15, [r3]
				PID = P*errorLast[0];
 8001152:	4b73      	ldr	r3, [pc, #460]	; (8001320 <proceedPID+0x2ac>)
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	ed97 7a07 	vldr	s14, [r7, #28]
 800115c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001160:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8001164:	e0a2      	b.n	80012ac <proceedPID+0x238>
			}
			else {

				float I = getIcoeff1Temp().val_float;
 8001166:	f002 f971 	bl	800344c <getIcoeff1Temp>
 800116a:	4603      	mov	r3, r0
 800116c:	61bb      	str	r3, [r7, #24]
				float D = getDcoeff1Temp().val_float;
 800116e:	f002 f9d1 	bl	8003514 <getDcoeff1Temp>
 8001172:	4603      	mov	r3, r0
 8001174:	617b      	str	r3, [r7, #20]
				float error = tempRead - getTempCh1Set().val_float;
 8001176:	f002 fb5d 	bl	8003834 <getTempCh1Set>
 800117a:	4603      	mov	r3, r0
 800117c:	ee07 3a10 	vmov	s14, r3
 8001180:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001184:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001188:	edc7 7a04 	vstr	s15, [r7, #16]
				uint32_t time = __HAL_TIM_GET_COUNTER(&htim5);
 800118c:	4b62      	ldr	r3, [pc, #392]	; (8001318 <proceedPID+0x2a4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	60fb      	str	r3, [r7, #12]
				if(normCoeff[0] == 0) {
 8001194:	4b63      	ldr	r3, [pc, #396]	; (8001324 <proceedPID+0x2b0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d105      	bne.n	80011a8 <proceedPID+0x134>
					normCoeff[0] = time - tLast[0];
 800119c:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <proceedPID+0x2a0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	4a5f      	ldr	r2, [pc, #380]	; (8001324 <proceedPID+0x2b0>)
 80011a6:	6013      	str	r3, [r2, #0]
				}
				Integral[0] += error*(float)(time - tLast[0])/normCoeff[0];
 80011a8:	4b5f      	ldr	r3, [pc, #380]	; (8001328 <proceedPID+0x2b4>)
 80011aa:	ed93 7a00 	vldr	s14, [r3]
 80011ae:	4b59      	ldr	r3, [pc, #356]	; (8001314 <proceedPID+0x2a0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011be:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80011c6:	4b57      	ldr	r3, [pc, #348]	; (8001324 <proceedPID+0x2b0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011d2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80011d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011da:	4b53      	ldr	r3, [pc, #332]	; (8001328 <proceedPID+0x2b4>)
 80011dc:	edc3 7a00 	vstr	s15, [r3]
				if(I*Integral[0] > 100.0)
 80011e0:	4b51      	ldr	r3, [pc, #324]	; (8001328 <proceedPID+0x2b4>)
 80011e2:	ed93 7a00 	vldr	s14, [r3]
 80011e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80011ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ee:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800132c <proceedPID+0x2b8>
 80011f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fa:	dd08      	ble.n	800120e <proceedPID+0x19a>
					Integral[0] = 100.0/I;
 80011fc:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800132c <proceedPID+0x2b8>
 8001200:	ed97 7a06 	vldr	s14, [r7, #24]
 8001204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001208:	4b47      	ldr	r3, [pc, #284]	; (8001328 <proceedPID+0x2b4>)
 800120a:	edc3 7a00 	vstr	s15, [r3]
				if(!getLoadSelect1().val_bool && Integral[0] > 0)
 800120e:	f001 ffa1 	bl	8003154 <getLoadSelect1>
 8001212:	4603      	mov	r3, r0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f083 0301 	eor.w	r3, r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00b      	beq.n	8001238 <proceedPID+0x1c4>
 8001220:	4b41      	ldr	r3, [pc, #260]	; (8001328 <proceedPID+0x2b4>)
 8001222:	edd3 7a00 	vldr	s15, [r3]
 8001226:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800122a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122e:	dd03      	ble.n	8001238 <proceedPID+0x1c4>
					Integral[0] = 0;
 8001230:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <proceedPID+0x2b4>)
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
				float Der = (error - errorLast[0])/(time - tLast[0])*normCoeff[0];
 8001238:	4b39      	ldr	r3, [pc, #228]	; (8001320 <proceedPID+0x2ac>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001242:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001246:	4b33      	ldr	r3, [pc, #204]	; (8001314 <proceedPID+0x2a0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800125a:	4b32      	ldr	r3, [pc, #200]	; (8001324 <proceedPID+0x2b0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	ee07 3a90 	vmov	s15, r3
 8001262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126a:	edc7 7a02 	vstr	s15, [r7, #8]
				PID = P*error + I*Integral[0] + D*Der;
 800126e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001272:	edd7 7a04 	vldr	s15, [r7, #16]
 8001276:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127a:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <proceedPID+0x2b4>)
 800127c:	edd3 6a00 	vldr	s13, [r3]
 8001280:	edd7 7a06 	vldr	s15, [r7, #24]
 8001284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001288:	ee37 7a27 	vadd.f32	s14, s14, s15
 800128c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001290:	edd7 7a02 	vldr	s15, [r7, #8]
 8001294:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
				tLast[0] = time;
 80012a0:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <proceedPID+0x2a0>)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6013      	str	r3, [r2, #0]
				errorLast[0] = error;
 80012a6:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <proceedPID+0x2ac>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	6013      	str	r3, [r2, #0]
			}
			PID = limitPID(PID);
 80012ac:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 80012b0:	f7ff feb2 	bl	8001018 <limitPID>
 80012b4:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
			return PID;
 80012b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012bc:	e2e0      	b.n	8001880 <proceedPID+0x80c>
		}
		else { //Freq source ch1
			float P = getPcoeff1Freq().val_float;
 80012be:	f002 f98d 	bl	80035dc <getPcoeff1Freq>
 80012c2:	4603      	mov	r3, r0
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
			float PID = 0.0;
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			if(tLast[0] == 0) {
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <proceedPID+0x2a0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d12c      	bne.n	8001330 <proceedPID+0x2bc>
				tStart[0] = __HAL_TIM_GET_COUNTER(&htim5);
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <proceedPID+0x2a4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	4a0f      	ldr	r2, [pc, #60]	; (800131c <proceedPID+0x2a8>)
 80012de:	6013      	str	r3, [r2, #0]
				tLast[0] = tStart[0];
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <proceedPID+0x2a8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <proceedPID+0x2a0>)
 80012e6:	6013      	str	r3, [r2, #0]
				errorLast[0] = freqRead - getFreqSet().val_float;
 80012e8:	f002 fd54 	bl	8003d94 <getFreqSet>
 80012ec:	4603      	mov	r3, r0
 80012ee:	ee07 3a10 	vmov	s14, r3
 80012f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80012f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <proceedPID+0x2ac>)
 80012fc:	edc3 7a00 	vstr	s15, [r3]
				PID = P*errorLast[0];
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <proceedPID+0x2ac>)
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800130a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 8001312:	e0b0      	b.n	8001476 <proceedPID+0x402>
 8001314:	200015ec 	.word	0x200015ec
 8001318:	200022c0 	.word	0x200022c0
 800131c:	200015e4 	.word	0x200015e4
 8001320:	200015dc 	.word	0x200015dc
 8001324:	200015f4 	.word	0x200015f4
 8001328:	200015d4 	.word	0x200015d4
 800132c:	42c80000 	.word	0x42c80000
			}
			else {

				float I = getIcoeff1Freq().val_float;
 8001330:	f002 f9b8 	bl	80036a4 <getIcoeff1Freq>
 8001334:	4603      	mov	r3, r0
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
				float D = getDcoeff1Freq().val_float;
 8001338:	f002 fa18 	bl	800376c <getDcoeff1Freq>
 800133c:	4603      	mov	r3, r0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
				float error = freqRead - getFreqSet().val_float;
 8001340:	f002 fd28 	bl	8003d94 <getFreqSet>
 8001344:	4603      	mov	r3, r0
 8001346:	ee07 3a10 	vmov	s14, r3
 800134a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800134e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001352:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				uint32_t time = __HAL_TIM_GET_COUNTER(&htim5);
 8001356:	4b82      	ldr	r3, [pc, #520]	; (8001560 <proceedPID+0x4ec>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
				if(normCoeff[0] == 0) {
 800135e:	4b81      	ldr	r3, [pc, #516]	; (8001564 <proceedPID+0x4f0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <proceedPID+0x2fe>
					normCoeff[0] = time - tLast[0];
 8001366:	4b80      	ldr	r3, [pc, #512]	; (8001568 <proceedPID+0x4f4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	4a7d      	ldr	r2, [pc, #500]	; (8001564 <proceedPID+0x4f0>)
 8001370:	6013      	str	r3, [r2, #0]
				}
				Integral[0] += error*(float)(time - tLast[0])/normCoeff[0];
 8001372:	4b7e      	ldr	r3, [pc, #504]	; (800156c <proceedPID+0x4f8>)
 8001374:	ed93 7a00 	vldr	s14, [r3]
 8001378:	4b7b      	ldr	r3, [pc, #492]	; (8001568 <proceedPID+0x4f4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001388:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800138c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001390:	4b74      	ldr	r3, [pc, #464]	; (8001564 <proceedPID+0x4f0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800139c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a4:	4b71      	ldr	r3, [pc, #452]	; (800156c <proceedPID+0x4f8>)
 80013a6:	edc3 7a00 	vstr	s15, [r3]
				if(I*Integral[0] > 100.0)
 80013aa:	4b70      	ldr	r3, [pc, #448]	; (800156c <proceedPID+0x4f8>)
 80013ac:	ed93 7a00 	vldr	s14, [r3]
 80013b0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80013b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b8:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001570 <proceedPID+0x4fc>
 80013bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	dd08      	ble.n	80013d8 <proceedPID+0x364>
					Integral[0] = 100.0/I;
 80013c6:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8001570 <proceedPID+0x4fc>
 80013ca:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80013ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d2:	4b66      	ldr	r3, [pc, #408]	; (800156c <proceedPID+0x4f8>)
 80013d4:	edc3 7a00 	vstr	s15, [r3]
				if(!getLoadSelect1().val_bool && Integral[0] > 0)
 80013d8:	f001 febc 	bl	8003154 <getLoadSelect1>
 80013dc:	4603      	mov	r3, r0
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	f083 0301 	eor.w	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00b      	beq.n	8001402 <proceedPID+0x38e>
 80013ea:	4b60      	ldr	r3, [pc, #384]	; (800156c <proceedPID+0x4f8>)
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd03      	ble.n	8001402 <proceedPID+0x38e>
					Integral[0] = 0;
 80013fa:	4b5c      	ldr	r3, [pc, #368]	; (800156c <proceedPID+0x4f8>)
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
				float Der = (error - errorLast[0])/(time - tLast[0])*normCoeff[0];
 8001402:	4b5c      	ldr	r3, [pc, #368]	; (8001574 <proceedPID+0x500>)
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800140c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001410:	4b55      	ldr	r3, [pc, #340]	; (8001568 <proceedPID+0x4f4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	ee07 3a90 	vmov	s15, r3
 800141c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001424:	4b4f      	ldr	r3, [pc, #316]	; (8001564 <proceedPID+0x4f0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001434:	edc7 7a08 	vstr	s15, [r7, #32]
				PID = P*error + I*Integral[0] + D*Der;
 8001438:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800143c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001440:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001444:	4b49      	ldr	r3, [pc, #292]	; (800156c <proceedPID+0x4f8>)
 8001446:	edd3 6a00 	vldr	s13, [r3]
 800144a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800144e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001452:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001456:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800145a:	edd7 7a08 	vldr	s15, [r7, #32]
 800145e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001466:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
				tLast[0] = time;
 800146a:	4a3f      	ldr	r2, [pc, #252]	; (8001568 <proceedPID+0x4f4>)
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	6013      	str	r3, [r2, #0]
				errorLast[0] = error;
 8001470:	4a40      	ldr	r2, [pc, #256]	; (8001574 <proceedPID+0x500>)
 8001472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001474:	6013      	str	r3, [r2, #0]
			}
			PID = limitPID(PID);
 8001476:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 800147a:	f7ff fdcd 	bl	8001018 <limitPID>
 800147e:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88
			return PID;
 8001482:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001486:	e1fb      	b.n	8001880 <proceedPID+0x80c>
		}
		break;
	}
	case 1: {
		float tempRead;
		bool isFreq = false;
 8001488:	2300      	movs	r3, #0
 800148a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		float freqRead = getFreq().val_float;
 800148e:	f002 fc4f 	bl	8003d30 <getFreq>
 8001492:	4603      	mov	r3, r0
 8001494:	677b      	str	r3, [r7, #116]	; 0x74

		uint8_t source = getSourceSelect2().val_uint8_t;
 8001496:	f001 ff43 	bl	8003320 <getSourceSelect2>
 800149a:	4603      	mov	r3, r0
 800149c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		switch (source) {
 80014a0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d829      	bhi.n	80014fc <proceedPID+0x488>
 80014a8:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <proceedPID+0x43c>)
 80014aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ae:	bf00      	nop
 80014b0:	080014c5 	.word	0x080014c5
 80014b4:	080014d1 	.word	0x080014d1
 80014b8:	080014dd 	.word	0x080014dd
 80014bc:	080014e9 	.word	0x080014e9
 80014c0:	080014f5 	.word	0x080014f5
		case 0:
			tempRead = getTemp1().val_float;
 80014c4:	f001 fb78 	bl	8002bb8 <getTemp1>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			break;
 80014ce:	e015      	b.n	80014fc <proceedPID+0x488>
		case 1:
			tempRead = getTemp2().val_float;
 80014d0:	f001 fb8e 	bl	8002bf0 <getTemp2>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			break;
 80014da:	e00f      	b.n	80014fc <proceedPID+0x488>
		case 2:
			tempRead = getTemp3().val_float;
 80014dc:	f001 fba4 	bl	8002c28 <getTemp3>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			break;
 80014e6:	e009      	b.n	80014fc <proceedPID+0x488>
		case 3:
			tempRead = getTemp4().val_float;
 80014e8:	f001 fbba 	bl	8002c60 <getTemp4>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			break;
 80014f2:	e003      	b.n	80014fc <proceedPID+0x488>
		case 4:
			isFreq = true;
 80014f4:	2301      	movs	r3, #1
 80014f6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			break;
 80014fa:	bf00      	nop
		}

		if(!isFreq) { //Temp source ch2
 80014fc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001500:	f083 0301 	eor.w	r3, r3, #1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80e3 	beq.w	80016d2 <proceedPID+0x65e>
			float P = getPcoeff2Temp().val_float;
 800150c:	f001 ff6c 	bl	80033e8 <getPcoeff2Temp>
 8001510:	4603      	mov	r3, r0
 8001512:	657b      	str	r3, [r7, #84]	; 0x54
			float PID = 0.0;
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	67fb      	str	r3, [r7, #124]	; 0x7c
			if(tLast[1] == 0) {
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <proceedPID+0x4f4>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d12c      	bne.n	800157c <proceedPID+0x508>
				tStart[1] = __HAL_TIM_GET_COUNTER(&htim5);
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <proceedPID+0x4ec>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	4a13      	ldr	r2, [pc, #76]	; (8001578 <proceedPID+0x504>)
 800152a:	6053      	str	r3, [r2, #4]
				tLast[1] = tStart[1];
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <proceedPID+0x504>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <proceedPID+0x4f4>)
 8001532:	6053      	str	r3, [r2, #4]
				errorLast[1] = tempRead - getTempCh2Set().val_float;
 8001534:	f002 f9b0 	bl	8003898 <getTempCh2Set>
 8001538:	4603      	mov	r3, r0
 800153a:	ee07 3a10 	vmov	s14, r3
 800153e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001542:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <proceedPID+0x500>)
 8001548:	edc3 7a01 	vstr	s15, [r3, #4]
				PID = P*errorLast[1];
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <proceedPID+0x500>)
 800154e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001552:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 800155e:	e0b0      	b.n	80016c2 <proceedPID+0x64e>
 8001560:	200022c0 	.word	0x200022c0
 8001564:	200015f4 	.word	0x200015f4
 8001568:	200015ec 	.word	0x200015ec
 800156c:	200015d4 	.word	0x200015d4
 8001570:	42c80000 	.word	0x42c80000
 8001574:	200015dc 	.word	0x200015dc
 8001578:	200015e4 	.word	0x200015e4
			}
			else {

				float I = getIcoeff2Temp().val_float;
 800157c:	f001 ff98 	bl	80034b0 <getIcoeff2Temp>
 8001580:	4603      	mov	r3, r0
 8001582:	653b      	str	r3, [r7, #80]	; 0x50
				float D = getDcoeff2Temp().val_float;
 8001584:	f001 fff8 	bl	8003578 <getDcoeff2Temp>
 8001588:	4603      	mov	r3, r0
 800158a:	64fb      	str	r3, [r7, #76]	; 0x4c
				float error = tempRead - getTempCh2Set().val_float;
 800158c:	f002 f984 	bl	8003898 <getTempCh2Set>
 8001590:	4603      	mov	r3, r0
 8001592:	ee07 3a10 	vmov	s14, r3
 8001596:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800159a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800159e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
				uint32_t time = __HAL_TIM_GET_COUNTER(&htim5);
 80015a2:	4bbb      	ldr	r3, [pc, #748]	; (8001890 <proceedPID+0x81c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	647b      	str	r3, [r7, #68]	; 0x44
				if(normCoeff[1] == 0) {
 80015aa:	4bba      	ldr	r3, [pc, #744]	; (8001894 <proceedPID+0x820>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d105      	bne.n	80015be <proceedPID+0x54a>
					normCoeff[1] = time - tLast[1];
 80015b2:	4bb9      	ldr	r3, [pc, #740]	; (8001898 <proceedPID+0x824>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	4ab6      	ldr	r2, [pc, #728]	; (8001894 <proceedPID+0x820>)
 80015bc:	6053      	str	r3, [r2, #4]
				}
				Integral[1] += error*(float)(time - tLast[1])/normCoeff[1];
 80015be:	4bb7      	ldr	r3, [pc, #732]	; (800189c <proceedPID+0x828>)
 80015c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80015c4:	4bb4      	ldr	r3, [pc, #720]	; (8001898 <proceedPID+0x824>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	ee07 3a90 	vmov	s15, r3
 80015d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015d4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80015d8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80015dc:	4bad      	ldr	r3, [pc, #692]	; (8001894 <proceedPID+0x820>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015e8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80015ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f0:	4baa      	ldr	r3, [pc, #680]	; (800189c <proceedPID+0x828>)
 80015f2:	edc3 7a01 	vstr	s15, [r3, #4]
				if(I*Integral[1] > 100.0)
 80015f6:	4ba9      	ldr	r3, [pc, #676]	; (800189c <proceedPID+0x828>)
 80015f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80015fc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001604:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80018a0 <proceedPID+0x82c>
 8001608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800160c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001610:	dd08      	ble.n	8001624 <proceedPID+0x5b0>
					Integral[1] = 100.0/I;
 8001612:	eddf 6aa3 	vldr	s13, [pc, #652]	; 80018a0 <proceedPID+0x82c>
 8001616:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800161a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800161e:	4b9f      	ldr	r3, [pc, #636]	; (800189c <proceedPID+0x828>)
 8001620:	edc3 7a01 	vstr	s15, [r3, #4]
				if(!getLoadSelect2().val_bool && Integral[1] > 0)
 8001624:	f001 fdb8 	bl	8003198 <getLoadSelect2>
 8001628:	4603      	mov	r3, r0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f083 0301 	eor.w	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00b      	beq.n	800164e <proceedPID+0x5da>
 8001636:	4b99      	ldr	r3, [pc, #612]	; (800189c <proceedPID+0x828>)
 8001638:	edd3 7a01 	vldr	s15, [r3, #4]
 800163c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001644:	dd03      	ble.n	800164e <proceedPID+0x5da>
					Integral[1] = 0;
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <proceedPID+0x828>)
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	605a      	str	r2, [r3, #4]
				float Der = (error - errorLast[1])/(time - tLast[1])*normCoeff[1];
 800164e:	4b95      	ldr	r3, [pc, #596]	; (80018a4 <proceedPID+0x830>)
 8001650:	edd3 7a01 	vldr	s15, [r3, #4]
 8001654:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001658:	ee77 6a67 	vsub.f32	s13, s14, s15
 800165c:	4b8e      	ldr	r3, [pc, #568]	; (8001898 <proceedPID+0x824>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800166c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001670:	4b88      	ldr	r3, [pc, #544]	; (8001894 <proceedPID+0x820>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	ee07 3a90 	vmov	s15, r3
 8001678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800167c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001680:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
				PID = P*error + I*Integral[1] + D*Der;
 8001684:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001688:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800168c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001690:	4b82      	ldr	r3, [pc, #520]	; (800189c <proceedPID+0x828>)
 8001692:	edd3 6a01 	vldr	s13, [r3, #4]
 8001696:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800169a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800169e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a2:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80016a6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80016aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
				tLast[1] = time;
 80016b6:	4a78      	ldr	r2, [pc, #480]	; (8001898 <proceedPID+0x824>)
 80016b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ba:	6053      	str	r3, [r2, #4]
				errorLast[1] = error;
 80016bc:	4a79      	ldr	r2, [pc, #484]	; (80018a4 <proceedPID+0x830>)
 80016be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016c0:	6053      	str	r3, [r2, #4]
			}
			PID = limitPID(PID);
 80016c2:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 80016c6:	f7ff fca7 	bl	8001018 <limitPID>
 80016ca:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
			return PID;
 80016ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016d0:	e0d6      	b.n	8001880 <proceedPID+0x80c>
		}
		else { //Freq source ch2
			float P = getPcoeff2Freq().val_float;
 80016d2:	f001 ffb5 	bl	8003640 <getPcoeff2Freq>
 80016d6:	4603      	mov	r3, r0
 80016d8:	66fb      	str	r3, [r7, #108]	; 0x6c
			float PID = 0.0;
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	67bb      	str	r3, [r7, #120]	; 0x78
			if(tLast[1] == 0) {
 80016e0:	4b6d      	ldr	r3, [pc, #436]	; (8001898 <proceedPID+0x824>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d11e      	bne.n	8001726 <proceedPID+0x6b2>
				tStart[1] = __HAL_TIM_GET_COUNTER(&htim5);
 80016e8:	4b69      	ldr	r3, [pc, #420]	; (8001890 <proceedPID+0x81c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	4a6e      	ldr	r2, [pc, #440]	; (80018a8 <proceedPID+0x834>)
 80016f0:	6053      	str	r3, [r2, #4]
				tLast[1] = tStart[1];
 80016f2:	4b6d      	ldr	r3, [pc, #436]	; (80018a8 <proceedPID+0x834>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4a68      	ldr	r2, [pc, #416]	; (8001898 <proceedPID+0x824>)
 80016f8:	6053      	str	r3, [r2, #4]
				errorLast[1] = freqRead - getFreqSet().val_float;
 80016fa:	f002 fb4b 	bl	8003d94 <getFreqSet>
 80016fe:	4603      	mov	r3, r0
 8001700:	ee07 3a10 	vmov	s14, r3
 8001704:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001708:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800170c:	4b65      	ldr	r3, [pc, #404]	; (80018a4 <proceedPID+0x830>)
 800170e:	edc3 7a01 	vstr	s15, [r3, #4]
				PID = P*errorLast[1];
 8001712:	4b64      	ldr	r3, [pc, #400]	; (80018a4 <proceedPID+0x830>)
 8001714:	edd3 7a01 	vldr	s15, [r3, #4]
 8001718:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800171c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001720:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
 8001724:	e0a2      	b.n	800186c <proceedPID+0x7f8>
			}
			else {

				float I = getIcoeff2Freq().val_float;
 8001726:	f001 ffef 	bl	8003708 <getIcoeff2Freq>
 800172a:	4603      	mov	r3, r0
 800172c:	66bb      	str	r3, [r7, #104]	; 0x68
				float D = getDcoeff2Freq().val_float;
 800172e:	f002 f84f 	bl	80037d0 <getDcoeff2Freq>
 8001732:	4603      	mov	r3, r0
 8001734:	667b      	str	r3, [r7, #100]	; 0x64
				float error = freqRead - getFreqSet().val_float;
 8001736:	f002 fb2d 	bl	8003d94 <getFreqSet>
 800173a:	4603      	mov	r3, r0
 800173c:	ee07 3a10 	vmov	s14, r3
 8001740:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001744:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001748:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
				uint32_t time = __HAL_TIM_GET_COUNTER(&htim5);
 800174c:	4b50      	ldr	r3, [pc, #320]	; (8001890 <proceedPID+0x81c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	65fb      	str	r3, [r7, #92]	; 0x5c
				if(normCoeff[1] == 0) {
 8001754:	4b4f      	ldr	r3, [pc, #316]	; (8001894 <proceedPID+0x820>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d105      	bne.n	8001768 <proceedPID+0x6f4>
					normCoeff[1] = time - tLast[1];
 800175c:	4b4e      	ldr	r3, [pc, #312]	; (8001898 <proceedPID+0x824>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	4a4b      	ldr	r2, [pc, #300]	; (8001894 <proceedPID+0x820>)
 8001766:	6053      	str	r3, [r2, #4]
				}
				Integral[1] += error*(time - tLast[1])/normCoeff[1];
 8001768:	4b4c      	ldr	r3, [pc, #304]	; (800189c <proceedPID+0x828>)
 800176a:	ed93 7a01 	vldr	s14, [r3, #4]
 800176e:	4b4a      	ldr	r3, [pc, #296]	; (8001898 <proceedPID+0x824>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800177e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001782:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001786:	4b43      	ldr	r3, [pc, #268]	; (8001894 <proceedPID+0x820>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001792:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179a:	4b40      	ldr	r3, [pc, #256]	; (800189c <proceedPID+0x828>)
 800179c:	edc3 7a01 	vstr	s15, [r3, #4]
				if(I*Integral[1] > 100.0)
 80017a0:	4b3e      	ldr	r3, [pc, #248]	; (800189c <proceedPID+0x828>)
 80017a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80017a6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80017aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ae:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80018a0 <proceedPID+0x82c>
 80017b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ba:	dd08      	ble.n	80017ce <proceedPID+0x75a>
					Integral[1] = 100.0/I;
 80017bc:	eddf 6a38 	vldr	s13, [pc, #224]	; 80018a0 <proceedPID+0x82c>
 80017c0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80017c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c8:	4b34      	ldr	r3, [pc, #208]	; (800189c <proceedPID+0x828>)
 80017ca:	edc3 7a01 	vstr	s15, [r3, #4]
				if(!getLoadSelect2().val_bool && Integral[1] > 0)
 80017ce:	f001 fce3 	bl	8003198 <getLoadSelect2>
 80017d2:	4603      	mov	r3, r0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f083 0301 	eor.w	r3, r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00b      	beq.n	80017f8 <proceedPID+0x784>
 80017e0:	4b2e      	ldr	r3, [pc, #184]	; (800189c <proceedPID+0x828>)
 80017e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80017e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ee:	dd03      	ble.n	80017f8 <proceedPID+0x784>
					Integral[1] = 0;
 80017f0:	4b2a      	ldr	r3, [pc, #168]	; (800189c <proceedPID+0x828>)
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	605a      	str	r2, [r3, #4]
				float Der = (error - errorLast[1])/(time - tLast[1])*normCoeff[1];
 80017f8:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <proceedPID+0x830>)
 80017fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80017fe:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001802:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <proceedPID+0x824>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <proceedPID+0x820>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				PID = P*error + I*Integral[0] + D*Der;
 800182e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001832:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <proceedPID+0x828>)
 800183c:	edd3 6a00 	vldr	s13, [r3]
 8001840:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001848:	ee37 7a27 	vadd.f32	s14, s14, s15
 800184c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001850:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
				tLast[1] = time;
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <proceedPID+0x824>)
 8001862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001864:	6053      	str	r3, [r2, #4]
				errorLast[1] = error;
 8001866:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <proceedPID+0x830>)
 8001868:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800186a:	6053      	str	r3, [r2, #4]
			}
			PID = limitPID(PID);
 800186c:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8001870:	f7ff fbd2 	bl	8001018 <limitPID>
 8001874:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
			return PID;
 8001878:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800187a:	e001      	b.n	8001880 <proceedPID+0x80c>
		}
		break;
	}
	default:
		return 0.0;
 800187c:	f04f 0300 	mov.w	r3, #0
	}

}
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	3798      	adds	r7, #152	; 0x98
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200022c0 	.word	0x200022c0
 8001894:	200015f4 	.word	0x200015f4
 8001898:	200015ec 	.word	0x200015ec
 800189c:	200015d4 	.word	0x200015d4
 80018a0:	42c80000 	.word	0x42c80000
 80018a4:	200015dc 	.word	0x200015dc
 80018a8:	200015e4 	.word	0x200015e4

080018ac <resetPID>:

void resetPID(uint8_t channel) {
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
	if(channel > 1)
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d81d      	bhi.n	80018f8 <resetPID+0x4c>
		return;
	Integral[channel] = 0.0;
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	4a11      	ldr	r2, [pc, #68]	; (8001904 <resetPID+0x58>)
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
	errorLast[channel] = 0.0;
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <resetPID+0x5c>)
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
	tStart[channel] = 0;
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	4a0c      	ldr	r2, [pc, #48]	; (800190c <resetPID+0x60>)
 80018dc:	2100      	movs	r1, #0
 80018de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	tLast[channel] = 0;
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <resetPID+0x64>)
 80018e6:	2100      	movs	r1, #0
 80018e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	normCoeff[channel] = 0;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4a09      	ldr	r2, [pc, #36]	; (8001914 <resetPID+0x68>)
 80018f0:	2100      	movs	r1, #0
 80018f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80018f6:	e000      	b.n	80018fa <resetPID+0x4e>
		return;
 80018f8:	bf00      	nop
}
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	200015d4 	.word	0x200015d4
 8001908:	200015dc 	.word	0x200015dc
 800190c:	200015e4 	.word	0x200015e4
 8001910:	200015ec 	.word	0x200015ec
 8001914:	200015f4 	.word	0x200015f4

08001918 <setPWM>:

void setPWM() {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
	//Heater PWM
	if(!getCh1_OnOff().val_bool) {
 800191e:	f001 fc9d 	bl	800325c <getCh1_OnOff>
 8001922:	4603      	mov	r3, r0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f083 0301 	eor.w	r3, r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d024      	beq.n	800197a <setPWM+0x62>
		setPWM_CH1((valueTypes)0.0f);
 8001930:	2300      	movs	r3, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f002 f950 	bl	8003bd8 <setPWM_CH1>
		setGate1A_OnOff(FALSE);
 8001938:	2300      	movs	r3, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f002 f81c 	bl	8003978 <setGate1A_OnOff>
		setGate1B_OnOff(FALSE);
 8001940:	2300      	movs	r3, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f002 f83e 	bl	80039c4 <setGate1B_OnOff>
		setGateH1A(FALSE);
 8001948:	2300      	movs	r3, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f002 f8ac 	bl	8003aa8 <setGateH1A>
		setGateH1B(FALSE);
 8001950:	2300      	movs	r3, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f002 f8ce 	bl	8003af4 <setGateH1B>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001958:	4b94      	ldr	r3, [pc, #592]	; (8001bac <setPWM+0x294>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2200      	movs	r2, #0
 800195e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001960:	4b92      	ldr	r3, [pc, #584]	; (8001bac <setPWM+0x294>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2200      	movs	r2, #0
 8001966:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001968:	2100      	movs	r1, #0
 800196a:	4890      	ldr	r0, [pc, #576]	; (8001bac <setPWM+0x294>)
 800196c:	f007 fd78 	bl	8009460 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001970:	2104      	movs	r1, #4
 8001972:	488e      	ldr	r0, [pc, #568]	; (8001bac <setPWM+0x294>)
 8001974:	f007 fd74 	bl	8009460 <HAL_TIM_PWM_Stop>
 8001978:	e0cf      	b.n	8001b1a <setPWM+0x202>
	}
	else {
		setGate1A_OnOff(TRUE);
 800197a:	2300      	movs	r3, #0
 800197c:	2201      	movs	r2, #1
 800197e:	f362 0307 	bfi	r3, r2, #0, #8
 8001982:	4618      	mov	r0, r3
 8001984:	f001 fff8 	bl	8003978 <setGate1A_OnOff>
		setGate1B_OnOff(TRUE);
 8001988:	2300      	movs	r3, #0
 800198a:	2201      	movs	r2, #1
 800198c:	f362 0307 	bfi	r3, r2, #0, #8
 8001990:	4618      	mov	r0, r3
 8001992:	f002 f817 	bl	80039c4 <setGate1B_OnOff>
		if(getModeSelect1().val_bool) {
 8001996:	f001 fc21 	bl	80031dc <getModeSelect1>
 800199a:	4603      	mov	r3, r0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <setPWM+0x98>
			setPWM_CH1(getI1Set());
 80019a2:	f001 ffab 	bl	80038fc <getI1Set>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 f915 	bl	8003bd8 <setPWM_CH1>
 80019ae:	e00b      	b.n	80019c8 <setPWM+0xb0>
		}
		else
			setPWM_CH1((valueTypes)(-proceedPID(0)));
 80019b0:	2000      	movs	r0, #0
 80019b2:	f7ff fb5f 	bl	8001074 <proceedPID>
 80019b6:	eef0 7a40 	vmov.f32	s15, s0
 80019ba:	eef1 7a67 	vneg.f32	s15, s15
 80019be:	ee17 3a90 	vmov	r3, s15
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 f908 	bl	8003bd8 <setPWM_CH1>


		float dutyCH1 = getPWM_CH1().val_float/100.0;
 80019c8:	f002 f92c 	bl	8003c24 <getPWM_CH1>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fdca 	bl	8000568 <__aeabi_f2d>
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	4b75      	ldr	r3, [pc, #468]	; (8001bb0 <setPWM+0x298>)
 80019da:	f7fe ff47 	bl	800086c <__aeabi_ddiv>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff f90f 	bl	8000c08 <__aeabi_d2f>
 80019ea:	4603      	mov	r3, r0
 80019ec:	607b      	str	r3, [r7, #4]
		if(!getLoadSelect1().val_bool && dutyCH1 < 0.0f) {
 80019ee:	f001 fbb1 	bl	8003154 <getLoadSelect1>
 80019f2:	4603      	mov	r3, r0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	f083 0301 	eor.w	r3, r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d009      	beq.n	8001a14 <setPWM+0xfc>
 8001a00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0c:	d502      	bpl.n	8001a14 <setPWM+0xfc>
			dutyCH1 = 0.0f;
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
		}
		if(!getCH1_Polarity().val_bool) {
 8001a14:	f002 f954 	bl	8003cc0 <getCH1_Polarity>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f083 0301 	eor.w	r3, r3, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00f      	beq.n	8001a46 <setPWM+0x12e>
			dutyCH1 = dutyCH1*(-1.0);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7fe fd9e 	bl	8000568 <__aeabi_f2d>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f7ff f8e8 	bl	8000c08 <__aeabi_d2f>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	ee07 3a90 	vmov	s15, r3
 8001a3e:	eef1 7a67 	vneg.f32	s15, s15
 8001a42:	edc7 7a01 	vstr	s15, [r7, #4]
		}


		if(dutyCH1 > 0) {
 8001a46:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	dd30      	ble.n	8001ab6 <setPWM+0x19e>
			setGateH1A(FALSE);
 8001a54:	2300      	movs	r3, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 f826 	bl	8003aa8 <setGateH1A>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001a5c:	4b53      	ldr	r3, [pc, #332]	; (8001bac <setPWM+0x294>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2200      	movs	r2, #0
 8001a62:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001a64:	2104      	movs	r1, #4
 8001a66:	4851      	ldr	r0, [pc, #324]	; (8001bac <setPWM+0x294>)
 8001a68:	f007 fcfa 	bl	8009460 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	484f      	ldr	r0, [pc, #316]	; (8001bac <setPWM+0x294>)
 8001a70:	f007 fc2e 	bl	80092d0 <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, freq_PWM_MO/freq_PWM_CH1 * dutyCH1 - 1);
 8001a74:	4b4f      	ldr	r3, [pc, #316]	; (8001bb4 <setPWM+0x29c>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b4f      	ldr	r3, [pc, #316]	; (8001bb8 <setPWM+0x2a0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a98:	4b44      	ldr	r3, [pc, #272]	; (8001bac <setPWM+0x294>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aa0:	ee17 2a90 	vmov	r2, s15
 8001aa4:	635a      	str	r2, [r3, #52]	; 0x34
			setGateH1B(TRUE);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f362 0307 	bfi	r3, r2, #0, #8
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 f820 	bl	8003af4 <setGateH1B>
 8001ab4:	e031      	b.n	8001b1a <setPWM+0x202>
		}
		else {
			setGateH1B(FALSE);
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 f81b 	bl	8003af4 <setGateH1B>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001abe:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <setPWM+0x294>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4838      	ldr	r0, [pc, #224]	; (8001bac <setPWM+0x294>)
 8001aca:	f007 fcc9 	bl	8009460 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001ace:	2104      	movs	r1, #4
 8001ad0:	4836      	ldr	r0, [pc, #216]	; (8001bac <setPWM+0x294>)
 8001ad2:	f007 fbfd 	bl	80092d0 <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, freq_PWM_MO/freq_PWM_CH1 * (-dutyCH1) - 1);
 8001ad6:	4b37      	ldr	r3, [pc, #220]	; (8001bb4 <setPWM+0x29c>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b37      	ldr	r3, [pc, #220]	; (8001bb8 <setPWM+0x2a0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aea:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aee:	eef1 7a67 	vneg.f32	s15, s15
 8001af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001afa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001afe:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <setPWM+0x294>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b06:	ee17 2a90 	vmov	r2, s15
 8001b0a:	639a      	str	r2, [r3, #56]	; 0x38
			setGateH1A(TRUE);
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f362 0307 	bfi	r3, r2, #0, #8
 8001b14:	4618      	mov	r0, r3
 8001b16:	f001 ffc7 	bl	8003aa8 <setGateH1A>
		}
	}
	if(!getCh2_OnOff().val_bool) {
 8001b1a:	f001 fbbd 	bl	8003298 <getCh2_OnOff>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f083 0301 	eor.w	r3, r3, #1
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d024      	beq.n	8001b76 <setPWM+0x25e>
		setPWM_CH2((valueTypes)0.0f);
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f002 f884 	bl	8003c3c <setPWM_CH2>
		setGate2A_OnOff(FALSE);
 8001b34:	2300      	movs	r3, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f001 ff6a 	bl	8003a10 <setGate2A_OnOff>
		setGate2B_OnOff(FALSE);
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f001 ff8c 	bl	8003a5c <setGate2B_OnOff>
		setGateH2A(FALSE);
 8001b44:	2300      	movs	r3, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 fffa 	bl	8003b40 <setGateH2A>
		setGateH2B(FALSE);
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 f81c 	bl	8003b8c <setGateH2B>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <setPWM+0x2a4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001b5c:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <setPWM+0x2a4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2200      	movs	r2, #0
 8001b62:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001b64:	2100      	movs	r1, #0
 8001b66:	4815      	ldr	r0, [pc, #84]	; (8001bbc <setPWM+0x2a4>)
 8001b68:	f007 fc7a 	bl	8009460 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001b6c:	2104      	movs	r1, #4
 8001b6e:	4813      	ldr	r0, [pc, #76]	; (8001bbc <setPWM+0x2a4>)
 8001b70:	f007 fc76 	bl	8009460 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, freq_PWM_MO/freq_PWM_CH2 * (-dutyCH2) + 1);
			setGateH2A(TRUE);
		}
	}
}
 8001b74:	e0c9      	b.n	8001d0a <setPWM+0x3f2>
		setGate2A_OnOff(TRUE);
 8001b76:	2300      	movs	r3, #0
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f362 0307 	bfi	r3, r2, #0, #8
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f001 ff46 	bl	8003a10 <setGate2A_OnOff>
		setGate2B_OnOff(TRUE);
 8001b84:	2300      	movs	r3, #0
 8001b86:	2201      	movs	r2, #1
 8001b88:	f362 0307 	bfi	r3, r2, #0, #8
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f001 ff65 	bl	8003a5c <setGate2B_OnOff>
		if(getModeSelect2().val_bool) {
 8001b92:	f001 fb45 	bl	8003220 <getModeSelect2>
 8001b96:	4603      	mov	r3, r0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d012      	beq.n	8001bc4 <setPWM+0x2ac>
			setPWM_CH2(getI2Set());
 8001b9e:	f001 fedf 	bl	8003960 <getI2Set>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f002 f849 	bl	8003c3c <setPWM_CH2>
 8001baa:	e017      	b.n	8001bdc <setPWM+0x2c4>
 8001bac:	20002230 	.word	0x20002230
 8001bb0:	40590000 	.word	0x40590000
 8001bb4:	20001310 	.word	0x20001310
 8001bb8:	20001314 	.word	0x20001314
 8001bbc:	20002278 	.word	0x20002278
 8001bc0:	42c80000 	.word	0x42c80000
			setPWM_CH2((valueTypes)(-proceedPID(1)));
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f7ff fa55 	bl	8001074 <proceedPID>
 8001bca:	eef0 7a40 	vmov.f32	s15, s0
 8001bce:	eef1 7a67 	vneg.f32	s15, s15
 8001bd2:	ee17 3a90 	vmov	r3, s15
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f002 f830 	bl	8003c3c <setPWM_CH2>
		float dutyCH2 = getPWM_CH2().val_float/100.0f;
 8001bdc:	f002 f854 	bl	8003c88 <getPWM_CH2>
 8001be0:	4603      	mov	r3, r0
 8001be2:	ee06 3a90 	vmov	s13, r3
 8001be6:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8001bc0 <setPWM+0x2a8>
 8001bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bee:	edc7 7a00 	vstr	s15, [r7]
		if(!getLoadSelect1().val_bool && dutyCH2 < 0.0f) {
 8001bf2:	f001 faaf 	bl	8003154 <getLoadSelect1>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f083 0301 	eor.w	r3, r3, #1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d009      	beq.n	8001c18 <setPWM+0x300>
 8001c04:	edd7 7a00 	vldr	s15, [r7]
 8001c08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c10:	d502      	bpl.n	8001c18 <setPWM+0x300>
			dutyCH2 = 0.0f;
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	603b      	str	r3, [r7, #0]
		if(!getCH2_Polarity().val_bool) {
 8001c18:	f002 f86e 	bl	8003cf8 <getCH2_Polarity>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f083 0301 	eor.w	r3, r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <setPWM+0x31e>
			dutyCH2 = dutyCH2*(-1.0f);
 8001c2a:	edd7 7a00 	vldr	s15, [r7]
 8001c2e:	eef1 7a67 	vneg.f32	s15, s15
 8001c32:	edc7 7a00 	vstr	s15, [r7]
		if(dutyCH2 > 0) {
 8001c36:	edd7 7a00 	vldr	s15, [r7]
 8001c3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c42:	dd30      	ble.n	8001ca6 <setPWM+0x38e>
			setGateH2A(FALSE);
 8001c44:	2300      	movs	r3, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f001 ff7a 	bl	8003b40 <setGateH2A>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001c4c:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <setPWM+0x3fc>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2200      	movs	r2, #0
 8001c52:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001c54:	2104      	movs	r1, #4
 8001c56:	482f      	ldr	r0, [pc, #188]	; (8001d14 <setPWM+0x3fc>)
 8001c58:	f007 fc02 	bl	8009460 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	482d      	ldr	r0, [pc, #180]	; (8001d14 <setPWM+0x3fc>)
 8001c60:	f007 fb36 	bl	80092d0 <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, freq_PWM_MO/freq_PWM_CH2 * dutyCH2 - 1);
 8001c64:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <setPWM+0x400>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b2c      	ldr	r3, [pc, #176]	; (8001d1c <setPWM+0x404>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	ee07 3a90 	vmov	s15, r3
 8001c74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c78:	edd7 7a00 	vldr	s15, [r7]
 8001c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c88:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <setPWM+0x3fc>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c90:	ee17 2a90 	vmov	r2, s15
 8001c94:	635a      	str	r2, [r3, #52]	; 0x34
			setGateH2B(TRUE);
 8001c96:	2300      	movs	r3, #0
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f362 0307 	bfi	r3, r2, #0, #8
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f001 ff74 	bl	8003b8c <setGateH2B>
}
 8001ca4:	e031      	b.n	8001d0a <setPWM+0x3f2>
			setGateH2B(FALSE);
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f001 ff6f 	bl	8003b8c <setGateH2B>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <setPWM+0x3fc>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4816      	ldr	r0, [pc, #88]	; (8001d14 <setPWM+0x3fc>)
 8001cba:	f007 fbd1 	bl	8009460 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001cbe:	2104      	movs	r1, #4
 8001cc0:	4814      	ldr	r0, [pc, #80]	; (8001d14 <setPWM+0x3fc>)
 8001cc2:	f007 fb05 	bl	80092d0 <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, freq_PWM_MO/freq_PWM_CH2 * (-dutyCH2) + 1);
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <setPWM+0x400>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <setPWM+0x404>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cda:	edd7 7a00 	vldr	s15, [r7]
 8001cde:	eef1 7a67 	vneg.f32	s15, s15
 8001ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <setPWM+0x3fc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cf6:	ee17 2a90 	vmov	r2, s15
 8001cfa:	639a      	str	r2, [r3, #56]	; 0x38
			setGateH2A(TRUE);
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f362 0307 	bfi	r3, r2, #0, #8
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 ff1b 	bl	8003b40 <setGateH2A>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20002278 	.word	0x20002278
 8001d18:	20001310 	.word	0x20001310
 8001d1c:	20001318 	.word	0x20001318

08001d20 <InitParams>:
							.commandDescription = "Alarm masks vector",
							.type = UINT32_T,
							.value.val_uint32_t = 0};


void InitParams() {
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	71bb      	strb	r3, [r7, #6]
	params[i++] = &ParamList;
 8001d2a:	79bb      	ldrb	r3, [r7, #6]
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	71ba      	strb	r2, [r7, #6]
 8001d30:	4619      	mov	r1, r3
 8001d32:	4bb8      	ldr	r3, [pc, #736]	; (8002014 <InitParams+0x2f4>)
 8001d34:	4ab8      	ldr	r2, [pc, #736]	; (8002018 <InitParams+0x2f8>)
 8001d36:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &SaveFlash;
 8001d3a:	79bb      	ldrb	r3, [r7, #6]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	71ba      	strb	r2, [r7, #6]
 8001d40:	4619      	mov	r1, r3
 8001d42:	4bb4      	ldr	r3, [pc, #720]	; (8002014 <InitParams+0x2f4>)
 8001d44:	4ab5      	ldr	r2, [pc, #724]	; (800201c <InitParams+0x2fc>)
 8001d46:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &U_HeaterSet;
 8001d4a:	79bb      	ldrb	r3, [r7, #6]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	71ba      	strb	r2, [r7, #6]
 8001d50:	4619      	mov	r1, r3
 8001d52:	4bb0      	ldr	r3, [pc, #704]	; (8002014 <InitParams+0x2f4>)
 8001d54:	4ab2      	ldr	r2, [pc, #712]	; (8002020 <InitParams+0x300>)
 8001d56:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_HeaterMin;
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	71ba      	strb	r2, [r7, #6]
 8001d60:	4619      	mov	r1, r3
 8001d62:	4bac      	ldr	r3, [pc, #688]	; (8002014 <InitParams+0x2f4>)
 8001d64:	4aaf      	ldr	r2, [pc, #700]	; (8002024 <InitParams+0x304>)
 8001d66:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_HeaterMax;
 8001d6a:	79bb      	ldrb	r3, [r7, #6]
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	71ba      	strb	r2, [r7, #6]
 8001d70:	4619      	mov	r1, r3
 8001d72:	4ba8      	ldr	r3, [pc, #672]	; (8002014 <InitParams+0x2f4>)
 8001d74:	4aac      	ldr	r2, [pc, #688]	; (8002028 <InitParams+0x308>)
 8001d76:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_HeaterOnOff;
 8001d7a:	79bb      	ldrb	r3, [r7, #6]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	71ba      	strb	r2, [r7, #6]
 8001d80:	4619      	mov	r1, r3
 8001d82:	4ba4      	ldr	r3, [pc, #656]	; (8002014 <InitParams+0x2f4>)
 8001d84:	4aa9      	ldr	r2, [pc, #676]	; (800202c <InitParams+0x30c>)
 8001d86:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_24Vmeas;
 8001d8a:	79bb      	ldrb	r3, [r7, #6]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	71ba      	strb	r2, [r7, #6]
 8001d90:	4619      	mov	r1, r3
 8001d92:	4ba0      	ldr	r3, [pc, #640]	; (8002014 <InitParams+0x2f4>)
 8001d94:	4aa6      	ldr	r2, [pc, #664]	; (8002030 <InitParams+0x310>)
 8001d96:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_24Vcoeff;
 8001d9a:	79bb      	ldrb	r3, [r7, #6]
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	71ba      	strb	r2, [r7, #6]
 8001da0:	4619      	mov	r1, r3
 8001da2:	4b9c      	ldr	r3, [pc, #624]	; (8002014 <InitParams+0x2f4>)
 8001da4:	4aa3      	ldr	r2, [pc, #652]	; (8002034 <InitParams+0x314>)
 8001da6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_HeaterMeas;
 8001daa:	79bb      	ldrb	r3, [r7, #6]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	71ba      	strb	r2, [r7, #6]
 8001db0:	4619      	mov	r1, r3
 8001db2:	4b98      	ldr	r3, [pc, #608]	; (8002014 <InitParams+0x2f4>)
 8001db4:	4aa0      	ldr	r2, [pc, #640]	; (8002038 <InitParams+0x318>)
 8001db6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_HeaterCoeff;
 8001dba:	79bb      	ldrb	r3, [r7, #6]
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	71ba      	strb	r2, [r7, #6]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4b94      	ldr	r3, [pc, #592]	; (8002014 <InitParams+0x2f4>)
 8001dc4:	4a9d      	ldr	r2, [pc, #628]	; (800203c <InitParams+0x31c>)
 8001dc6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_24V_Min;
 8001dca:	79bb      	ldrb	r3, [r7, #6]
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	71ba      	strb	r2, [r7, #6]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4b90      	ldr	r3, [pc, #576]	; (8002014 <InitParams+0x2f4>)
 8001dd4:	4a9a      	ldr	r2, [pc, #616]	; (8002040 <InitParams+0x320>)
 8001dd6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_24V_Max;
 8001dda:	79bb      	ldrb	r3, [r7, #6]
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	71ba      	strb	r2, [r7, #6]
 8001de0:	4619      	mov	r1, r3
 8001de2:	4b8c      	ldr	r3, [pc, #560]	; (8002014 <InitParams+0x2f4>)
 8001de4:	4a97      	ldr	r2, [pc, #604]	; (8002044 <InitParams+0x324>)
 8001de6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &I_1A;
 8001dea:	79bb      	ldrb	r3, [r7, #6]
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	71ba      	strb	r2, [r7, #6]
 8001df0:	4619      	mov	r1, r3
 8001df2:	4b88      	ldr	r3, [pc, #544]	; (8002014 <InitParams+0x2f4>)
 8001df4:	4a94      	ldr	r2, [pc, #592]	; (8002048 <InitParams+0x328>)
 8001df6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1B;
 8001dfa:	79bb      	ldrb	r3, [r7, #6]
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	71ba      	strb	r2, [r7, #6]
 8001e00:	4619      	mov	r1, r3
 8001e02:	4b84      	ldr	r3, [pc, #528]	; (8002014 <InitParams+0x2f4>)
 8001e04:	4a91      	ldr	r2, [pc, #580]	; (800204c <InitParams+0x32c>)
 8001e06:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2A;
 8001e0a:	79bb      	ldrb	r3, [r7, #6]
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	71ba      	strb	r2, [r7, #6]
 8001e10:	4619      	mov	r1, r3
 8001e12:	4b80      	ldr	r3, [pc, #512]	; (8002014 <InitParams+0x2f4>)
 8001e14:	4a8e      	ldr	r2, [pc, #568]	; (8002050 <InitParams+0x330>)
 8001e16:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2B;
 8001e1a:	79bb      	ldrb	r3, [r7, #6]
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	71ba      	strb	r2, [r7, #6]
 8001e20:	4619      	mov	r1, r3
 8001e22:	4b7c      	ldr	r3, [pc, #496]	; (8002014 <InitParams+0x2f4>)
 8001e24:	4a8b      	ldr	r2, [pc, #556]	; (8002054 <InitParams+0x334>)
 8001e26:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1A_Coeff;
 8001e2a:	79bb      	ldrb	r3, [r7, #6]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	71ba      	strb	r2, [r7, #6]
 8001e30:	4619      	mov	r1, r3
 8001e32:	4b78      	ldr	r3, [pc, #480]	; (8002014 <InitParams+0x2f4>)
 8001e34:	4a88      	ldr	r2, [pc, #544]	; (8002058 <InitParams+0x338>)
 8001e36:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1B_Coeff;
 8001e3a:	79bb      	ldrb	r3, [r7, #6]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	71ba      	strb	r2, [r7, #6]
 8001e40:	4619      	mov	r1, r3
 8001e42:	4b74      	ldr	r3, [pc, #464]	; (8002014 <InitParams+0x2f4>)
 8001e44:	4a85      	ldr	r2, [pc, #532]	; (800205c <InitParams+0x33c>)
 8001e46:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2A_Coeff;
 8001e4a:	79bb      	ldrb	r3, [r7, #6]
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	71ba      	strb	r2, [r7, #6]
 8001e50:	4619      	mov	r1, r3
 8001e52:	4b70      	ldr	r3, [pc, #448]	; (8002014 <InitParams+0x2f4>)
 8001e54:	4a82      	ldr	r2, [pc, #520]	; (8002060 <InitParams+0x340>)
 8001e56:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2B_Coeff;
 8001e5a:	79bb      	ldrb	r3, [r7, #6]
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	71ba      	strb	r2, [r7, #6]
 8001e60:	4619      	mov	r1, r3
 8001e62:	4b6c      	ldr	r3, [pc, #432]	; (8002014 <InitParams+0x2f4>)
 8001e64:	4a7f      	ldr	r2, [pc, #508]	; (8002064 <InitParams+0x344>)
 8001e66:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1A_Max;
 8001e6a:	79bb      	ldrb	r3, [r7, #6]
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	71ba      	strb	r2, [r7, #6]
 8001e70:	4619      	mov	r1, r3
 8001e72:	4b68      	ldr	r3, [pc, #416]	; (8002014 <InitParams+0x2f4>)
 8001e74:	4a7c      	ldr	r2, [pc, #496]	; (8002068 <InitParams+0x348>)
 8001e76:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1B_Max;
 8001e7a:	79bb      	ldrb	r3, [r7, #6]
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	71ba      	strb	r2, [r7, #6]
 8001e80:	4619      	mov	r1, r3
 8001e82:	4b64      	ldr	r3, [pc, #400]	; (8002014 <InitParams+0x2f4>)
 8001e84:	4a79      	ldr	r2, [pc, #484]	; (800206c <InitParams+0x34c>)
 8001e86:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2A_Max;
 8001e8a:	79bb      	ldrb	r3, [r7, #6]
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	71ba      	strb	r2, [r7, #6]
 8001e90:	4619      	mov	r1, r3
 8001e92:	4b60      	ldr	r3, [pc, #384]	; (8002014 <InitParams+0x2f4>)
 8001e94:	4a76      	ldr	r2, [pc, #472]	; (8002070 <InitParams+0x350>)
 8001e96:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2B_Max;
 8001e9a:	79bb      	ldrb	r3, [r7, #6]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	71ba      	strb	r2, [r7, #6]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4b5c      	ldr	r3, [pc, #368]	; (8002014 <InitParams+0x2f4>)
 8001ea4:	4a73      	ldr	r2, [pc, #460]	; (8002074 <InitParams+0x354>)
 8001ea6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Temp1;
 8001eaa:	79bb      	ldrb	r3, [r7, #6]
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	71ba      	strb	r2, [r7, #6]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4b58      	ldr	r3, [pc, #352]	; (8002014 <InitParams+0x2f4>)
 8001eb4:	4a70      	ldr	r2, [pc, #448]	; (8002078 <InitParams+0x358>)
 8001eb6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp2;
 8001eba:	79bb      	ldrb	r3, [r7, #6]
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	71ba      	strb	r2, [r7, #6]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4b54      	ldr	r3, [pc, #336]	; (8002014 <InitParams+0x2f4>)
 8001ec4:	4a6d      	ldr	r2, [pc, #436]	; (800207c <InitParams+0x35c>)
 8001ec6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp3;
 8001eca:	79bb      	ldrb	r3, [r7, #6]
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	71ba      	strb	r2, [r7, #6]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4b50      	ldr	r3, [pc, #320]	; (8002014 <InitParams+0x2f4>)
 8001ed4:	4a6a      	ldr	r2, [pc, #424]	; (8002080 <InitParams+0x360>)
 8001ed6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp4;
 8001eda:	79bb      	ldrb	r3, [r7, #6]
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	71ba      	strb	r2, [r7, #6]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <InitParams+0x2f4>)
 8001ee4:	4a67      	ldr	r2, [pc, #412]	; (8002084 <InitParams+0x364>)
 8001ee6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp1_coeff;
 8001eea:	79bb      	ldrb	r3, [r7, #6]
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	71ba      	strb	r2, [r7, #6]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4b48      	ldr	r3, [pc, #288]	; (8002014 <InitParams+0x2f4>)
 8001ef4:	4a64      	ldr	r2, [pc, #400]	; (8002088 <InitParams+0x368>)
 8001ef6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp2_coeff;
 8001efa:	79bb      	ldrb	r3, [r7, #6]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	71ba      	strb	r2, [r7, #6]
 8001f00:	4619      	mov	r1, r3
 8001f02:	4b44      	ldr	r3, [pc, #272]	; (8002014 <InitParams+0x2f4>)
 8001f04:	4a61      	ldr	r2, [pc, #388]	; (800208c <InitParams+0x36c>)
 8001f06:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp3_coeff;
 8001f0a:	79bb      	ldrb	r3, [r7, #6]
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	71ba      	strb	r2, [r7, #6]
 8001f10:	4619      	mov	r1, r3
 8001f12:	4b40      	ldr	r3, [pc, #256]	; (8002014 <InitParams+0x2f4>)
 8001f14:	4a5e      	ldr	r2, [pc, #376]	; (8002090 <InitParams+0x370>)
 8001f16:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp4_coeff;
 8001f1a:	79bb      	ldrb	r3, [r7, #6]
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	71ba      	strb	r2, [r7, #6]
 8001f20:	4619      	mov	r1, r3
 8001f22:	4b3c      	ldr	r3, [pc, #240]	; (8002014 <InitParams+0x2f4>)
 8001f24:	4a5b      	ldr	r2, [pc, #364]	; (8002094 <InitParams+0x374>)
 8001f26:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp1_Min;
 8001f2a:	79bb      	ldrb	r3, [r7, #6]
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	71ba      	strb	r2, [r7, #6]
 8001f30:	4619      	mov	r1, r3
 8001f32:	4b38      	ldr	r3, [pc, #224]	; (8002014 <InitParams+0x2f4>)
 8001f34:	4a58      	ldr	r2, [pc, #352]	; (8002098 <InitParams+0x378>)
 8001f36:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp1_Max;
 8001f3a:	79bb      	ldrb	r3, [r7, #6]
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	71ba      	strb	r2, [r7, #6]
 8001f40:	4619      	mov	r1, r3
 8001f42:	4b34      	ldr	r3, [pc, #208]	; (8002014 <InitParams+0x2f4>)
 8001f44:	4a55      	ldr	r2, [pc, #340]	; (800209c <InitParams+0x37c>)
 8001f46:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp2_Min;
 8001f4a:	79bb      	ldrb	r3, [r7, #6]
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	71ba      	strb	r2, [r7, #6]
 8001f50:	4619      	mov	r1, r3
 8001f52:	4b30      	ldr	r3, [pc, #192]	; (8002014 <InitParams+0x2f4>)
 8001f54:	4a52      	ldr	r2, [pc, #328]	; (80020a0 <InitParams+0x380>)
 8001f56:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp2_Max;
 8001f5a:	79bb      	ldrb	r3, [r7, #6]
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	71ba      	strb	r2, [r7, #6]
 8001f60:	4619      	mov	r1, r3
 8001f62:	4b2c      	ldr	r3, [pc, #176]	; (8002014 <InitParams+0x2f4>)
 8001f64:	4a4f      	ldr	r2, [pc, #316]	; (80020a4 <InitParams+0x384>)
 8001f66:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp3_Min;
 8001f6a:	79bb      	ldrb	r3, [r7, #6]
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	71ba      	strb	r2, [r7, #6]
 8001f70:	4619      	mov	r1, r3
 8001f72:	4b28      	ldr	r3, [pc, #160]	; (8002014 <InitParams+0x2f4>)
 8001f74:	4a4c      	ldr	r2, [pc, #304]	; (80020a8 <InitParams+0x388>)
 8001f76:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp3_Max;
 8001f7a:	79bb      	ldrb	r3, [r7, #6]
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	71ba      	strb	r2, [r7, #6]
 8001f80:	4619      	mov	r1, r3
 8001f82:	4b24      	ldr	r3, [pc, #144]	; (8002014 <InitParams+0x2f4>)
 8001f84:	4a49      	ldr	r2, [pc, #292]	; (80020ac <InitParams+0x38c>)
 8001f86:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp4_Min;
 8001f8a:	79bb      	ldrb	r3, [r7, #6]
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	71ba      	strb	r2, [r7, #6]
 8001f90:	4619      	mov	r1, r3
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <InitParams+0x2f4>)
 8001f94:	4a46      	ldr	r2, [pc, #280]	; (80020b0 <InitParams+0x390>)
 8001f96:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp4_Max;
 8001f9a:	79bb      	ldrb	r3, [r7, #6]
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	71ba      	strb	r2, [r7, #6]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <InitParams+0x2f4>)
 8001fa4:	4a43      	ldr	r2, [pc, #268]	; (80020b4 <InitParams+0x394>)
 8001fa6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &LoadSelect1;
 8001faa:	79bb      	ldrb	r3, [r7, #6]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	71ba      	strb	r2, [r7, #6]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <InitParams+0x2f4>)
 8001fb4:	4a40      	ldr	r2, [pc, #256]	; (80020b8 <InitParams+0x398>)
 8001fb6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &LoadSelect2;
 8001fba:	79bb      	ldrb	r3, [r7, #6]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	71ba      	strb	r2, [r7, #6]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <InitParams+0x2f4>)
 8001fc4:	4a3d      	ldr	r2, [pc, #244]	; (80020bc <InitParams+0x39c>)
 8001fc6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &ModeSelect1;
 8001fca:	79bb      	ldrb	r3, [r7, #6]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	71ba      	strb	r2, [r7, #6]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <InitParams+0x2f4>)
 8001fd4:	4a3a      	ldr	r2, [pc, #232]	; (80020c0 <InitParams+0x3a0>)
 8001fd6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &ModeSelect2;
 8001fda:	79bb      	ldrb	r3, [r7, #6]
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	71ba      	strb	r2, [r7, #6]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <InitParams+0x2f4>)
 8001fe4:	4a37      	ldr	r2, [pc, #220]	; (80020c4 <InitParams+0x3a4>)
 8001fe6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Ch1_OnOff;
 8001fea:	79bb      	ldrb	r3, [r7, #6]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	71ba      	strb	r2, [r7, #6]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <InitParams+0x2f4>)
 8001ff4:	4a34      	ldr	r2, [pc, #208]	; (80020c8 <InitParams+0x3a8>)
 8001ff6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Ch2_OnOff;
 8001ffa:	79bb      	ldrb	r3, [r7, #6]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	71ba      	strb	r2, [r7, #6]
 8002000:	4619      	mov	r1, r3
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <InitParams+0x2f4>)
 8002004:	4a31      	ldr	r2, [pc, #196]	; (80020cc <InitParams+0x3ac>)
 8002006:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &SourceSelect1;
 800200a:	79bb      	ldrb	r3, [r7, #6]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	71ba      	strb	r2, [r7, #6]
 8002010:	4619      	mov	r1, r3
 8002012:	e05d      	b.n	80020d0 <InitParams+0x3b0>
 8002014:	200015fc 	.word	0x200015fc
 8002018:	20000020 	.word	0x20000020
 800201c:	2000005c 	.word	0x2000005c
 8002020:	20000098 	.word	0x20000098
 8002024:	200000d4 	.word	0x200000d4
 8002028:	20000110 	.word	0x20000110
 800202c:	2000014c 	.word	0x2000014c
 8002030:	20000188 	.word	0x20000188
 8002034:	200001c4 	.word	0x200001c4
 8002038:	20000200 	.word	0x20000200
 800203c:	2000023c 	.word	0x2000023c
 8002040:	20000278 	.word	0x20000278
 8002044:	200002b4 	.word	0x200002b4
 8002048:	200002f0 	.word	0x200002f0
 800204c:	2000032c 	.word	0x2000032c
 8002050:	20000368 	.word	0x20000368
 8002054:	200003a4 	.word	0x200003a4
 8002058:	200003e0 	.word	0x200003e0
 800205c:	2000041c 	.word	0x2000041c
 8002060:	20000458 	.word	0x20000458
 8002064:	20000494 	.word	0x20000494
 8002068:	200004d0 	.word	0x200004d0
 800206c:	2000050c 	.word	0x2000050c
 8002070:	20000548 	.word	0x20000548
 8002074:	20000584 	.word	0x20000584
 8002078:	200005c0 	.word	0x200005c0
 800207c:	200005fc 	.word	0x200005fc
 8002080:	20000638 	.word	0x20000638
 8002084:	20000674 	.word	0x20000674
 8002088:	200006b0 	.word	0x200006b0
 800208c:	200006ec 	.word	0x200006ec
 8002090:	20000728 	.word	0x20000728
 8002094:	20000764 	.word	0x20000764
 8002098:	200007a0 	.word	0x200007a0
 800209c:	200007dc 	.word	0x200007dc
 80020a0:	20000818 	.word	0x20000818
 80020a4:	20000854 	.word	0x20000854
 80020a8:	20000890 	.word	0x20000890
 80020ac:	200008cc 	.word	0x200008cc
 80020b0:	20000908 	.word	0x20000908
 80020b4:	20000944 	.word	0x20000944
 80020b8:	20000980 	.word	0x20000980
 80020bc:	200009bc 	.word	0x200009bc
 80020c0:	200009f8 	.word	0x200009f8
 80020c4:	20000a34 	.word	0x20000a34
 80020c8:	20000a70 	.word	0x20000a70
 80020cc:	20000aac 	.word	0x20000aac
 80020d0:	4b93      	ldr	r3, [pc, #588]	; (8002320 <InitParams+0x600>)
 80020d2:	4a94      	ldr	r2, [pc, #592]	; (8002324 <InitParams+0x604>)
 80020d4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &SourceSelect2;
 80020d8:	79bb      	ldrb	r3, [r7, #6]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	71ba      	strb	r2, [r7, #6]
 80020de:	4619      	mov	r1, r3
 80020e0:	4b8f      	ldr	r3, [pc, #572]	; (8002320 <InitParams+0x600>)
 80020e2:	4a91      	ldr	r2, [pc, #580]	; (8002328 <InitParams+0x608>)
 80020e4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Pcoeff1Temp;
 80020e8:	79bb      	ldrb	r3, [r7, #6]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	71ba      	strb	r2, [r7, #6]
 80020ee:	4619      	mov	r1, r3
 80020f0:	4b8b      	ldr	r3, [pc, #556]	; (8002320 <InitParams+0x600>)
 80020f2:	4a8e      	ldr	r2, [pc, #568]	; (800232c <InitParams+0x60c>)
 80020f4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Pcoeff2Temp;
 80020f8:	79bb      	ldrb	r3, [r7, #6]
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	71ba      	strb	r2, [r7, #6]
 80020fe:	4619      	mov	r1, r3
 8002100:	4b87      	ldr	r3, [pc, #540]	; (8002320 <InitParams+0x600>)
 8002102:	4a8b      	ldr	r2, [pc, #556]	; (8002330 <InitParams+0x610>)
 8002104:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Icoeff1Temp;
 8002108:	79bb      	ldrb	r3, [r7, #6]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	71ba      	strb	r2, [r7, #6]
 800210e:	4619      	mov	r1, r3
 8002110:	4b83      	ldr	r3, [pc, #524]	; (8002320 <InitParams+0x600>)
 8002112:	4a88      	ldr	r2, [pc, #544]	; (8002334 <InitParams+0x614>)
 8002114:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Icoeff2Temp;
 8002118:	79bb      	ldrb	r3, [r7, #6]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	71ba      	strb	r2, [r7, #6]
 800211e:	4619      	mov	r1, r3
 8002120:	4b7f      	ldr	r3, [pc, #508]	; (8002320 <InitParams+0x600>)
 8002122:	4a85      	ldr	r2, [pc, #532]	; (8002338 <InitParams+0x618>)
 8002124:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Dcoeff1Temp;
 8002128:	79bb      	ldrb	r3, [r7, #6]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	71ba      	strb	r2, [r7, #6]
 800212e:	4619      	mov	r1, r3
 8002130:	4b7b      	ldr	r3, [pc, #492]	; (8002320 <InitParams+0x600>)
 8002132:	4a82      	ldr	r2, [pc, #520]	; (800233c <InitParams+0x61c>)
 8002134:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Dcoeff2Temp;
 8002138:	79bb      	ldrb	r3, [r7, #6]
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	71ba      	strb	r2, [r7, #6]
 800213e:	4619      	mov	r1, r3
 8002140:	4b77      	ldr	r3, [pc, #476]	; (8002320 <InitParams+0x600>)
 8002142:	4a7f      	ldr	r2, [pc, #508]	; (8002340 <InitParams+0x620>)
 8002144:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Pcoeff1Freq;
 8002148:	79bb      	ldrb	r3, [r7, #6]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	71ba      	strb	r2, [r7, #6]
 800214e:	4619      	mov	r1, r3
 8002150:	4b73      	ldr	r3, [pc, #460]	; (8002320 <InitParams+0x600>)
 8002152:	4a7c      	ldr	r2, [pc, #496]	; (8002344 <InitParams+0x624>)
 8002154:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Pcoeff2Freq;
 8002158:	79bb      	ldrb	r3, [r7, #6]
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	71ba      	strb	r2, [r7, #6]
 800215e:	4619      	mov	r1, r3
 8002160:	4b6f      	ldr	r3, [pc, #444]	; (8002320 <InitParams+0x600>)
 8002162:	4a79      	ldr	r2, [pc, #484]	; (8002348 <InitParams+0x628>)
 8002164:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Icoeff1Freq;
 8002168:	79bb      	ldrb	r3, [r7, #6]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	71ba      	strb	r2, [r7, #6]
 800216e:	4619      	mov	r1, r3
 8002170:	4b6b      	ldr	r3, [pc, #428]	; (8002320 <InitParams+0x600>)
 8002172:	4a76      	ldr	r2, [pc, #472]	; (800234c <InitParams+0x62c>)
 8002174:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Icoeff2Freq;
 8002178:	79bb      	ldrb	r3, [r7, #6]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	71ba      	strb	r2, [r7, #6]
 800217e:	4619      	mov	r1, r3
 8002180:	4b67      	ldr	r3, [pc, #412]	; (8002320 <InitParams+0x600>)
 8002182:	4a73      	ldr	r2, [pc, #460]	; (8002350 <InitParams+0x630>)
 8002184:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Dcoeff1Freq;
 8002188:	79bb      	ldrb	r3, [r7, #6]
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	71ba      	strb	r2, [r7, #6]
 800218e:	4619      	mov	r1, r3
 8002190:	4b63      	ldr	r3, [pc, #396]	; (8002320 <InitParams+0x600>)
 8002192:	4a70      	ldr	r2, [pc, #448]	; (8002354 <InitParams+0x634>)
 8002194:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Dcoeff2Freq;
 8002198:	79bb      	ldrb	r3, [r7, #6]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	71ba      	strb	r2, [r7, #6]
 800219e:	4619      	mov	r1, r3
 80021a0:	4b5f      	ldr	r3, [pc, #380]	; (8002320 <InitParams+0x600>)
 80021a2:	4a6d      	ldr	r2, [pc, #436]	; (8002358 <InitParams+0x638>)
 80021a4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &TempCh1Set;
 80021a8:	79bb      	ldrb	r3, [r7, #6]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	71ba      	strb	r2, [r7, #6]
 80021ae:	4619      	mov	r1, r3
 80021b0:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <InitParams+0x600>)
 80021b2:	4a6a      	ldr	r2, [pc, #424]	; (800235c <InitParams+0x63c>)
 80021b4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &TempCh2Set;
 80021b8:	79bb      	ldrb	r3, [r7, #6]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	71ba      	strb	r2, [r7, #6]
 80021be:	4619      	mov	r1, r3
 80021c0:	4b57      	ldr	r3, [pc, #348]	; (8002320 <InitParams+0x600>)
 80021c2:	4a67      	ldr	r2, [pc, #412]	; (8002360 <InitParams+0x640>)
 80021c4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &I1Set;
 80021c8:	79bb      	ldrb	r3, [r7, #6]
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	71ba      	strb	r2, [r7, #6]
 80021ce:	4619      	mov	r1, r3
 80021d0:	4b53      	ldr	r3, [pc, #332]	; (8002320 <InitParams+0x600>)
 80021d2:	4a64      	ldr	r2, [pc, #400]	; (8002364 <InitParams+0x644>)
 80021d4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I2Set;
 80021d8:	79bb      	ldrb	r3, [r7, #6]
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	71ba      	strb	r2, [r7, #6]
 80021de:	4619      	mov	r1, r3
 80021e0:	4b4f      	ldr	r3, [pc, #316]	; (8002320 <InitParams+0x600>)
 80021e2:	4a61      	ldr	r2, [pc, #388]	; (8002368 <InitParams+0x648>)
 80021e4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Gate1A_OnOff;
 80021e8:	79bb      	ldrb	r3, [r7, #6]
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	71ba      	strb	r2, [r7, #6]
 80021ee:	4619      	mov	r1, r3
 80021f0:	4b4b      	ldr	r3, [pc, #300]	; (8002320 <InitParams+0x600>)
 80021f2:	4a5e      	ldr	r2, [pc, #376]	; (800236c <InitParams+0x64c>)
 80021f4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Gate1B_OnOff;
 80021f8:	79bb      	ldrb	r3, [r7, #6]
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	71ba      	strb	r2, [r7, #6]
 80021fe:	4619      	mov	r1, r3
 8002200:	4b47      	ldr	r3, [pc, #284]	; (8002320 <InitParams+0x600>)
 8002202:	4a5b      	ldr	r2, [pc, #364]	; (8002370 <InitParams+0x650>)
 8002204:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Gate2A_OnOff;
 8002208:	79bb      	ldrb	r3, [r7, #6]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	71ba      	strb	r2, [r7, #6]
 800220e:	4619      	mov	r1, r3
 8002210:	4b43      	ldr	r3, [pc, #268]	; (8002320 <InitParams+0x600>)
 8002212:	4a58      	ldr	r2, [pc, #352]	; (8002374 <InitParams+0x654>)
 8002214:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Gate2B_OnOff;
 8002218:	79bb      	ldrb	r3, [r7, #6]
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	71ba      	strb	r2, [r7, #6]
 800221e:	4619      	mov	r1, r3
 8002220:	4b3f      	ldr	r3, [pc, #252]	; (8002320 <InitParams+0x600>)
 8002222:	4a55      	ldr	r2, [pc, #340]	; (8002378 <InitParams+0x658>)
 8002224:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &GateH1A;
 8002228:	79bb      	ldrb	r3, [r7, #6]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	71ba      	strb	r2, [r7, #6]
 800222e:	4619      	mov	r1, r3
 8002230:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <InitParams+0x600>)
 8002232:	4a52      	ldr	r2, [pc, #328]	; (800237c <InitParams+0x65c>)
 8002234:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &GateH1B;
 8002238:	79bb      	ldrb	r3, [r7, #6]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	71ba      	strb	r2, [r7, #6]
 800223e:	4619      	mov	r1, r3
 8002240:	4b37      	ldr	r3, [pc, #220]	; (8002320 <InitParams+0x600>)
 8002242:	4a4f      	ldr	r2, [pc, #316]	; (8002380 <InitParams+0x660>)
 8002244:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &GateH2A;
 8002248:	79bb      	ldrb	r3, [r7, #6]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	71ba      	strb	r2, [r7, #6]
 800224e:	4619      	mov	r1, r3
 8002250:	4b33      	ldr	r3, [pc, #204]	; (8002320 <InitParams+0x600>)
 8002252:	4a4c      	ldr	r2, [pc, #304]	; (8002384 <InitParams+0x664>)
 8002254:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &GateH2B;
 8002258:	79bb      	ldrb	r3, [r7, #6]
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	71ba      	strb	r2, [r7, #6]
 800225e:	4619      	mov	r1, r3
 8002260:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <InitParams+0x600>)
 8002262:	4a49      	ldr	r2, [pc, #292]	; (8002388 <InitParams+0x668>)
 8002264:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &PWM_CH1;
 8002268:	79bb      	ldrb	r3, [r7, #6]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	71ba      	strb	r2, [r7, #6]
 800226e:	4619      	mov	r1, r3
 8002270:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <InitParams+0x600>)
 8002272:	4a46      	ldr	r2, [pc, #280]	; (800238c <InitParams+0x66c>)
 8002274:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &PWM_CH2;
 8002278:	79bb      	ldrb	r3, [r7, #6]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	71ba      	strb	r2, [r7, #6]
 800227e:	4619      	mov	r1, r3
 8002280:	4b27      	ldr	r3, [pc, #156]	; (8002320 <InitParams+0x600>)
 8002282:	4a43      	ldr	r2, [pc, #268]	; (8002390 <InitParams+0x670>)
 8002284:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &CH1_Polarity;
 8002288:	79bb      	ldrb	r3, [r7, #6]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	71ba      	strb	r2, [r7, #6]
 800228e:	4619      	mov	r1, r3
 8002290:	4b23      	ldr	r3, [pc, #140]	; (8002320 <InitParams+0x600>)
 8002292:	4a40      	ldr	r2, [pc, #256]	; (8002394 <InitParams+0x674>)
 8002294:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &CH2_Polarity;
 8002298:	79bb      	ldrb	r3, [r7, #6]
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	71ba      	strb	r2, [r7, #6]
 800229e:	4619      	mov	r1, r3
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <InitParams+0x600>)
 80022a2:	4a3d      	ldr	r2, [pc, #244]	; (8002398 <InitParams+0x678>)
 80022a4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Freq;
 80022a8:	79bb      	ldrb	r3, [r7, #6]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	71ba      	strb	r2, [r7, #6]
 80022ae:	4619      	mov	r1, r3
 80022b0:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <InitParams+0x600>)
 80022b2:	4a3a      	ldr	r2, [pc, #232]	; (800239c <InitParams+0x67c>)
 80022b4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &FreqSet;
 80022b8:	79bb      	ldrb	r3, [r7, #6]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	71ba      	strb	r2, [r7, #6]
 80022be:	4619      	mov	r1, r3
 80022c0:	4b17      	ldr	r3, [pc, #92]	; (8002320 <InitParams+0x600>)
 80022c2:	4a37      	ldr	r2, [pc, #220]	; (80023a0 <InitParams+0x680>)
 80022c4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Alarms;
 80022c8:	79bb      	ldrb	r3, [r7, #6]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	71ba      	strb	r2, [r7, #6]
 80022ce:	4619      	mov	r1, r3
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <InitParams+0x600>)
 80022d2:	4a34      	ldr	r2, [pc, #208]	; (80023a4 <InitParams+0x684>)
 80022d4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &AlarmMasks;
 80022d8:	79bb      	ldrb	r3, [r7, #6]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	71ba      	strb	r2, [r7, #6]
 80022de:	4619      	mov	r1, r3
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <InitParams+0x600>)
 80022e2:	4a31      	ldr	r2, [pc, #196]	; (80023a8 <InitParams+0x688>)
 80022e4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]


	for(uint8_t j = 0; j < PARAMS_COUNT; j++) {
 80022e8:	2300      	movs	r3, #0
 80022ea:	71fb      	strb	r3, [r7, #7]
 80022ec:	e00d      	b.n	800230a <InitParams+0x5ea>
		paramTable[params[j]->commandNumber] = j+1;
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <InitParams+0x600>)
 80022f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	3301      	adds	r3, #1
 80022fe:	b2d9      	uxtb	r1, r3
 8002300:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <InitParams+0x68c>)
 8002302:	5499      	strb	r1, [r3, r2]
	for(uint8_t j = 0; j < PARAMS_COUNT; j++) {
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	3301      	adds	r3, #1
 8002308:	71fb      	strb	r3, [r7, #7]
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	2b63      	cmp	r3, #99	; 0x63
 800230e:	d9ee      	bls.n	80022ee <InitParams+0x5ce>
	}
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	200015fc 	.word	0x200015fc
 8002324:	20000ae8 	.word	0x20000ae8
 8002328:	20000b24 	.word	0x20000b24
 800232c:	20000b60 	.word	0x20000b60
 8002330:	20000b9c 	.word	0x20000b9c
 8002334:	20000bd8 	.word	0x20000bd8
 8002338:	20000c14 	.word	0x20000c14
 800233c:	20000c50 	.word	0x20000c50
 8002340:	20000c8c 	.word	0x20000c8c
 8002344:	20000cc8 	.word	0x20000cc8
 8002348:	20000d04 	.word	0x20000d04
 800234c:	20000d40 	.word	0x20000d40
 8002350:	20000d7c 	.word	0x20000d7c
 8002354:	20000db8 	.word	0x20000db8
 8002358:	20000df4 	.word	0x20000df4
 800235c:	20000e30 	.word	0x20000e30
 8002360:	20000e6c 	.word	0x20000e6c
 8002364:	20000ea8 	.word	0x20000ea8
 8002368:	20000ee4 	.word	0x20000ee4
 800236c:	20000f20 	.word	0x20000f20
 8002370:	20000f5c 	.word	0x20000f5c
 8002374:	20000f98 	.word	0x20000f98
 8002378:	20000fd4 	.word	0x20000fd4
 800237c:	20001010 	.word	0x20001010
 8002380:	2000104c 	.word	0x2000104c
 8002384:	20001088 	.word	0x20001088
 8002388:	200010c4 	.word	0x200010c4
 800238c:	20001100 	.word	0x20001100
 8002390:	2000113c 	.word	0x2000113c
 8002394:	20001178 	.word	0x20001178
 8002398:	200011b4 	.word	0x200011b4
 800239c:	200011f0 	.word	0x200011f0
 80023a0:	2000122c 	.word	0x2000122c
 80023a4:	20001268 	.word	0x20001268
 80023a8:	200012a4 	.word	0x200012a4
 80023ac:	2000178c 	.word	0x2000178c

080023b0 <setU_HeaterSet>:

bool setU_HeaterSet(valueTypes value) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
    if(value.val_float >= U_HeaterSet.valueAbsMax.val_float ||
 80023b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80023bc:	4b26      	ldr	r3, [pc, #152]	; (8002458 <setU_HeaterSet+0xa8>)
 80023be:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80023c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ca:	da09      	bge.n	80023e0 <setU_HeaterSet+0x30>
       value.val_float <= U_HeaterSet.valueAbsMin.val_float) {
 80023cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80023d0:	4b21      	ldr	r3, [pc, #132]	; (8002458 <setU_HeaterSet+0xa8>)
 80023d2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= U_HeaterSet.valueAbsMax.val_float ||
 80023d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023de:	d801      	bhi.n	80023e4 <setU_HeaterSet+0x34>
       return false;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e02c      	b.n	800243e <setU_HeaterSet+0x8e>
    } else {
    	//Set_U_Heater PWM (10 kHz, 16800)
    	extern TIM_HandleTypeDef htim8;
    	int16_t counterSet = 16800*(1.20 - 0.05 * value.val_float);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f8be 	bl	8000568 <__aeabi_f2d>
 80023ec:	a316      	add	r3, pc, #88	; (adr r3, 8002448 <setU_HeaterSet+0x98>)
 80023ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f2:	f7fe f911 	bl	8000618 <__aeabi_dmul>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	f04f 3033 	mov.w	r0, #858993459	; 0x33333333
 80023fe:	4917      	ldr	r1, [pc, #92]	; (800245c <setU_HeaterSet+0xac>)
 8002400:	f7fd ff52 	bl	80002a8 <__aeabi_dsub>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	a310      	add	r3, pc, #64	; (adr r3, 8002450 <setU_HeaterSet+0xa0>)
 800240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002412:	f7fe f901 	bl	8000618 <__aeabi_dmul>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4610      	mov	r0, r2
 800241c:	4619      	mov	r1, r3
 800241e:	f7fe fbab 	bl	8000b78 <__aeabi_d2iz>
 8002422:	4603      	mov	r3, r0
 8002424:	81fb      	strh	r3, [r7, #14]
    	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, counterSet > 0 ? counterSet : 0);
 8002426:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800242a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800242e:	b21a      	sxth	r2, r3
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <setU_HeaterSet+0xb0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	63da      	str	r2, [r3, #60]	; 0x3c
        U_HeaterSet.value = value;
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <setU_HeaterSet+0xa8>)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800243c:	2301      	movs	r3, #1
    }
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	9999999a 	.word	0x9999999a
 800244c:	3fa99999 	.word	0x3fa99999
 8002450:	00000000 	.word	0x00000000
 8002454:	40d06800 	.word	0x40d06800
 8002458:	20000098 	.word	0x20000098
 800245c:	3ff33333 	.word	0x3ff33333
 8002460:	20002350 	.word	0x20002350

08002464 <getU_HeaterSet>:
valueTypes getU_HeaterSet(void) {
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
    return U_HeaterSet.value;
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <getU_HeaterSet+0x14>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000098 	.word	0x20000098

0800247c <setU_HeaterOnOff>:

bool setU_HeaterOnOff(valueTypes state) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	setU_HeaterSet(getU_HeaterSet());
 8002484:	f7ff ffee 	bl	8002464 <getU_HeaterSet>
 8002488:	4603      	mov	r3, r0
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff ff90 	bl	80023b0 <setU_HeaterSet>
	HAL_GPIO_WritePin(Disable_DC_DC_GPIO_Port, Disable_DC_DC_Pin, state.val_bool);
 8002490:	793b      	ldrb	r3, [r7, #4]
 8002492:	461a      	mov	r2, r3
 8002494:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002498:	4805      	ldr	r0, [pc, #20]	; (80024b0 <setU_HeaterOnOff+0x34>)
 800249a:	f006 f8d3 	bl	8008644 <HAL_GPIO_WritePin>
    U_HeaterOnOff.value = state;
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <setU_HeaterOnOff+0x38>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80024a4:	2301      	movs	r3, #1
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40020800 	.word	0x40020800
 80024b4:	2000014c 	.word	0x2000014c

080024b8 <getU_HeaterOnOff>:
valueTypes getU_HeaterOnOff(void) {
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
    return U_HeaterOnOff.value;
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <getU_HeaterOnOff+0x14>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	2000014c 	.word	0x2000014c

080024d0 <setU_HeaterMin>:

bool setU_HeaterMin(valueTypes value) {
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	if(value.val_float >= U_HeaterMin.valueAbsMax.val_float ||
 80024d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80024dc:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <setU_HeaterMin+0x48>)
 80024de:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80024e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ea:	da09      	bge.n	8002500 <setU_HeaterMin+0x30>
	   value.val_float <= U_HeaterMin.valueAbsMin.val_float) {
 80024ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <setU_HeaterMin+0x48>)
 80024f2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= U_HeaterMin.valueAbsMax.val_float ||
 80024f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fe:	d801      	bhi.n	8002504 <setU_HeaterMin+0x34>
	   return false;
 8002500:	2300      	movs	r3, #0
 8002502:	e003      	b.n	800250c <setU_HeaterMin+0x3c>
	} else {
		U_HeaterMin.value = value;
 8002504:	4a04      	ldr	r2, [pc, #16]	; (8002518 <setU_HeaterMin+0x48>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 800250a:	2301      	movs	r3, #1
	}
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	200000d4 	.word	0x200000d4

0800251c <getU_HeaterMin>:
valueTypes getU_HeaterMin(void) {
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
    return U_HeaterMin.value;
 8002520:	4b03      	ldr	r3, [pc, #12]	; (8002530 <getU_HeaterMin+0x14>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	200000d4 	.word	0x200000d4

08002534 <setU_HeaterMax>:

bool setU_HeaterMax(valueTypes value) {
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	if(value.val_float >= U_HeaterMax.valueAbsMax.val_float ||
 800253c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <setU_HeaterMax+0x48>)
 8002542:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002546:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254e:	da09      	bge.n	8002564 <setU_HeaterMax+0x30>
	   value.val_float <= U_HeaterMax.valueAbsMin.val_float) {
 8002550:	ed97 7a01 	vldr	s14, [r7, #4]
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <setU_HeaterMax+0x48>)
 8002556:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= U_HeaterMax.valueAbsMax.val_float ||
 800255a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002562:	d801      	bhi.n	8002568 <setU_HeaterMax+0x34>
	   return false;
 8002564:	2300      	movs	r3, #0
 8002566:	e003      	b.n	8002570 <setU_HeaterMax+0x3c>
	} else {
		U_HeaterMax.value = value;
 8002568:	4a04      	ldr	r2, [pc, #16]	; (800257c <setU_HeaterMax+0x48>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 800256e:	2301      	movs	r3, #1
	}
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	20000110 	.word	0x20000110

08002580 <getU_HeaterMax>:
valueTypes getU_HeaterMax(void) {
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
    return U_HeaterMax.value;
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <getU_HeaterMax+0x14>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000110 	.word	0x20000110

08002598 <setU_24Vmeas>:


bool setU_24Vmeas(valueTypes value) {
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
    U_24Vmeas.value = value;
 80025a0:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <setU_24Vmeas+0x1c>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	20000188 	.word	0x20000188

080025b8 <getU_24Vmeas>:
valueTypes getU_24Vmeas() {
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
    return U_24Vmeas.value;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <getU_24Vmeas+0x14>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20000188 	.word	0x20000188

080025d0 <setU_24Vcoeff>:

bool setU_24Vcoeff(valueTypes value) {
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
    if(value.val_float >= U_24Vcoeff.valueAbsMax.val_float ||
 80025d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80025dc:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <setU_24Vcoeff+0x48>)
 80025de:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80025e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ea:	da09      	bge.n	8002600 <setU_24Vcoeff+0x30>
       value.val_float <= U_24Vcoeff.valueAbsMin.val_float) {
 80025ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <setU_24Vcoeff+0x48>)
 80025f2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= U_24Vcoeff.valueAbsMax.val_float ||
 80025f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fe:	d801      	bhi.n	8002604 <setU_24Vcoeff+0x34>
       return false;
 8002600:	2300      	movs	r3, #0
 8002602:	e003      	b.n	800260c <setU_24Vcoeff+0x3c>
    } else {
        U_24Vcoeff.value = value;
 8002604:	4a04      	ldr	r2, [pc, #16]	; (8002618 <setU_24Vcoeff+0x48>)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800260a:	2301      	movs	r3, #1
    }
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	200001c4 	.word	0x200001c4

0800261c <getU_24Vcoeff>:

valueTypes getU_24Vcoeff(void) {
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
    return U_24Vcoeff.value;
 8002620:	4b03      	ldr	r3, [pc, #12]	; (8002630 <getU_24Vcoeff+0x14>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	200001c4 	.word	0x200001c4

08002634 <setU_HeaterMeas>:


bool setU_HeaterMeas(valueTypes value) {
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
    U_HeaterMeas.value = value;
 800263c:	4a04      	ldr	r2, [pc, #16]	; (8002650 <setU_HeaterMeas+0x1c>)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8002642:	2301      	movs	r3, #1
}
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	20000200 	.word	0x20000200

08002654 <getU_HeaterMeas>:
valueTypes getU_HeaterMeas() {
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
    return U_HeaterMeas.value;
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <getU_HeaterMeas+0x14>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000200 	.word	0x20000200

0800266c <setU_HeaterCoeff>:

bool setU_HeaterCoeff(valueTypes value) {
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
    if(value.val_float >= U_HeaterCoeff.valueAbsMax.val_float ||
 8002674:	ed97 7a01 	vldr	s14, [r7, #4]
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <setU_HeaterCoeff+0x48>)
 800267a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800267e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002686:	da09      	bge.n	800269c <setU_HeaterCoeff+0x30>
       value.val_float <= U_HeaterCoeff.valueAbsMin.val_float) {
 8002688:	ed97 7a01 	vldr	s14, [r7, #4]
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <setU_HeaterCoeff+0x48>)
 800268e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= U_HeaterCoeff.valueAbsMax.val_float ||
 8002692:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269a:	d801      	bhi.n	80026a0 <setU_HeaterCoeff+0x34>
       return false;
 800269c:	2300      	movs	r3, #0
 800269e:	e003      	b.n	80026a8 <setU_HeaterCoeff+0x3c>
    } else {
       U_HeaterCoeff.value = value;
 80026a0:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <setU_HeaterCoeff+0x48>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
       return true;
 80026a6:	2301      	movs	r3, #1
    }
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	2000023c 	.word	0x2000023c

080026b8 <getU_HeaterCoeff>:

valueTypes getU_HeaterCoeff(void) {
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
    return U_HeaterCoeff.value;
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <getU_HeaterCoeff+0x14>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	2000023c 	.word	0x2000023c

080026d0 <setU_24V_Min>:

bool setU_24V_Min(valueTypes value) {
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	if(value.val_float >= U_24V_Min.valueAbsMax.val_float ||
 80026d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80026dc:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <setU_24V_Min+0x48>)
 80026de:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80026e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ea:	da09      	bge.n	8002700 <setU_24V_Min+0x30>
	   value.val_float <= U_24V_Min.valueAbsMin.val_float) {
 80026ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <setU_24V_Min+0x48>)
 80026f2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= U_24V_Min.valueAbsMax.val_float ||
 80026f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fe:	d801      	bhi.n	8002704 <setU_24V_Min+0x34>
	   return false;
 8002700:	2300      	movs	r3, #0
 8002702:	e003      	b.n	800270c <setU_24V_Min+0x3c>
	} else {
		U_24V_Min.value = value;
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <setU_24V_Min+0x48>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 800270a:	2301      	movs	r3, #1
	}
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	20000278 	.word	0x20000278

0800271c <getU_24V_Min>:
valueTypes getU_24V_Min(void) {
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
    return U_24V_Min.value;
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <getU_24V_Min+0x14>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000278 	.word	0x20000278

08002734 <setU_24V_Max>:

bool setU_24V_Max(valueTypes value) {
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	if(value.val_float >= U_24V_Max.valueAbsMax.val_float ||
 800273c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002740:	4b0e      	ldr	r3, [pc, #56]	; (800277c <setU_24V_Max+0x48>)
 8002742:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274e:	da09      	bge.n	8002764 <setU_24V_Max+0x30>
	   value.val_float <= U_24V_Max.valueAbsMin.val_float) {
 8002750:	ed97 7a01 	vldr	s14, [r7, #4]
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <setU_24V_Max+0x48>)
 8002756:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= U_24V_Max.valueAbsMax.val_float ||
 800275a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002762:	d801      	bhi.n	8002768 <setU_24V_Max+0x34>
	   return false;
 8002764:	2300      	movs	r3, #0
 8002766:	e003      	b.n	8002770 <setU_24V_Max+0x3c>
	} else {
		U_24V_Max.value = value;
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <setU_24V_Max+0x48>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 800276e:	2301      	movs	r3, #1
	}
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	200002b4 	.word	0x200002b4

08002780 <getU_24V_Max>:
valueTypes getU_24V_Max(void) {
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
    return U_24V_Max.value;
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <getU_24V_Max+0x14>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	200002b4 	.word	0x200002b4

08002798 <setI_1A>:

bool setI_1A(valueTypes value) {
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
    I_1A.value = value;
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <setI_1A+0x1c>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	200002f0 	.word	0x200002f0

080027b8 <getI_1A>:
valueTypes getI_1A() {
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
    return I_1A.value;
 80027bc:	4b03      	ldr	r3, [pc, #12]	; (80027cc <getI_1A+0x14>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	200002f0 	.word	0x200002f0

080027d0 <setI_1B>:
bool setI_1B(valueTypes value) {
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
    I_1B.value = value;
 80027d8:	4a04      	ldr	r2, [pc, #16]	; (80027ec <setI_1B+0x1c>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80027de:	2301      	movs	r3, #1
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	2000032c 	.word	0x2000032c

080027f0 <getI_1B>:
valueTypes getI_1B() {
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
    return I_1B.value;
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <getI_1B+0x14>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	2000032c 	.word	0x2000032c

08002808 <setI_2A>:
bool setI_2A(valueTypes value) {
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
    I_2A.value = value;
 8002810:	4a04      	ldr	r2, [pc, #16]	; (8002824 <setI_2A+0x1c>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8002816:	2301      	movs	r3, #1
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	20000368 	.word	0x20000368

08002828 <getI_2A>:
valueTypes getI_2A() {
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
    return I_2A.value;
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <getI_2A+0x14>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000368 	.word	0x20000368

08002840 <setI_2B>:
bool setI_2B(valueTypes value) {
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
    I_2B.value = value;
 8002848:	4a04      	ldr	r2, [pc, #16]	; (800285c <setI_2B+0x1c>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 800284e:	2301      	movs	r3, #1
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	200003a4 	.word	0x200003a4

08002860 <getI_2B>:
valueTypes getI_2B() {
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
    return I_2B.value;
 8002864:	4b03      	ldr	r3, [pc, #12]	; (8002874 <getI_2B+0x14>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	200003a4 	.word	0x200003a4

08002878 <setI_1A_Coeff>:

bool setI_1A_Coeff(valueTypes value) {
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I_1A_Coeff.valueAbsMax.val_float ||
 8002880:	ed97 7a01 	vldr	s14, [r7, #4]
 8002884:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <setI_1A_Coeff+0x48>)
 8002886:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800288a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002892:	da09      	bge.n	80028a8 <setI_1A_Coeff+0x30>
       value.val_float <= I_1A_Coeff.valueAbsMin.val_float) {
 8002894:	ed97 7a01 	vldr	s14, [r7, #4]
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <setI_1A_Coeff+0x48>)
 800289a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I_1A_Coeff.valueAbsMax.val_float ||
 800289e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a6:	d801      	bhi.n	80028ac <setI_1A_Coeff+0x34>
       return false;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e003      	b.n	80028b4 <setI_1A_Coeff+0x3c>
    } else {
        I_1A_Coeff.value = value;
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <setI_1A_Coeff+0x48>)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80028b2:	2301      	movs	r3, #1
    }
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	200003e0 	.word	0x200003e0

080028c4 <getI_1A_Coeff>:
valueTypes getI_1A_Coeff(void) {
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
    return I_1A_Coeff.value;
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <getI_1A_Coeff+0x14>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	200003e0 	.word	0x200003e0

080028dc <setI_1B_Coeff>:
bool setI_1B_Coeff(valueTypes value) {
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I_1B_Coeff.valueAbsMax.val_float ||
 80028e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <setI_1B_Coeff+0x48>)
 80028ea:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80028ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f6:	da09      	bge.n	800290c <setI_1B_Coeff+0x30>
       value.val_float <= I_1B_Coeff.valueAbsMin.val_float) {
 80028f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <setI_1B_Coeff+0x48>)
 80028fe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I_1B_Coeff.valueAbsMax.val_float ||
 8002902:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	d801      	bhi.n	8002910 <setI_1B_Coeff+0x34>
       return false;
 800290c:	2300      	movs	r3, #0
 800290e:	e003      	b.n	8002918 <setI_1B_Coeff+0x3c>
    } else {
        I_1B_Coeff.value = value;
 8002910:	4a04      	ldr	r2, [pc, #16]	; (8002924 <setI_1B_Coeff+0x48>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002916:	2301      	movs	r3, #1
    }
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	2000041c 	.word	0x2000041c

08002928 <getI_1B_Coeff>:
valueTypes getI_1B_Coeff(void) {
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
    return I_1B_Coeff.value;
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <getI_1B_Coeff+0x14>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	2000041c 	.word	0x2000041c

08002940 <setI_2A_Coeff>:
bool setI_2A_Coeff(valueTypes value) {
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I_2A_Coeff.valueAbsMax.val_float ||
 8002948:	ed97 7a01 	vldr	s14, [r7, #4]
 800294c:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <setI_2A_Coeff+0x48>)
 800294e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002952:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295a:	da09      	bge.n	8002970 <setI_2A_Coeff+0x30>
       value.val_float <= I_2A_Coeff.valueAbsMin.val_float) {
 800295c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002960:	4b09      	ldr	r3, [pc, #36]	; (8002988 <setI_2A_Coeff+0x48>)
 8002962:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I_2A_Coeff.valueAbsMax.val_float ||
 8002966:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296e:	d801      	bhi.n	8002974 <setI_2A_Coeff+0x34>
       return false;
 8002970:	2300      	movs	r3, #0
 8002972:	e003      	b.n	800297c <setI_2A_Coeff+0x3c>
    } else {
        I_2A_Coeff.value = value;
 8002974:	4a04      	ldr	r2, [pc, #16]	; (8002988 <setI_2A_Coeff+0x48>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800297a:	2301      	movs	r3, #1
    }
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	20000458 	.word	0x20000458

0800298c <getI_2A_Coeff>:
valueTypes getI_2A_Coeff(void) {
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
    return I_2A_Coeff.value;
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <getI_2A_Coeff+0x14>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000458 	.word	0x20000458

080029a4 <setI_2B_Coeff>:
bool setI_2B_Coeff(valueTypes value) {
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I_2B_Coeff.valueAbsMax.val_float ||
 80029ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80029b0:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <setI_2B_Coeff+0x48>)
 80029b2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80029b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029be:	da09      	bge.n	80029d4 <setI_2B_Coeff+0x30>
       value.val_float <= I_2B_Coeff.valueAbsMin.val_float) {
 80029c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <setI_2B_Coeff+0x48>)
 80029c6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I_2B_Coeff.valueAbsMax.val_float ||
 80029ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d2:	d801      	bhi.n	80029d8 <setI_2B_Coeff+0x34>
       return false;
 80029d4:	2300      	movs	r3, #0
 80029d6:	e003      	b.n	80029e0 <setI_2B_Coeff+0x3c>
    } else {
        I_2B_Coeff.value = value;
 80029d8:	4a04      	ldr	r2, [pc, #16]	; (80029ec <setI_2B_Coeff+0x48>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80029de:	2301      	movs	r3, #1
    }
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	20000494 	.word	0x20000494

080029f0 <getI_2B_Coeff>:
valueTypes getI_2B_Coeff(void) {
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
    return I_2B_Coeff.value;
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <getI_2B_Coeff+0x14>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000494 	.word	0x20000494

08002a08 <setI_1A_Max>:

bool setI_1A_Max(valueTypes value) {
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	if(value.val_float >= I_1A_Max.valueAbsMax.val_float ||
 8002a10:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a14:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <setI_1A_Max+0x48>)
 8002a16:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002a1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a22:	da09      	bge.n	8002a38 <setI_1A_Max+0x30>
	   value.val_float <= I_1A_Max.valueAbsMin.val_float) {
 8002a24:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <setI_1A_Max+0x48>)
 8002a2a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= I_1A_Max.valueAbsMax.val_float ||
 8002a2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a36:	d801      	bhi.n	8002a3c <setI_1A_Max+0x34>
	   return false;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e003      	b.n	8002a44 <setI_1A_Max+0x3c>
	} else {
		I_1A_Max.value = value;
 8002a3c:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <setI_1A_Max+0x48>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8002a42:	2301      	movs	r3, #1
	}
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	200004d0 	.word	0x200004d0

08002a54 <getI_1A_Max>:
valueTypes getI_1A_Max(void) {
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
    return I_1A_Max.value;
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <getI_1A_Max+0x14>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	200004d0 	.word	0x200004d0

08002a6c <setI_1B_Max>:
bool setI_1B_Max(valueTypes value) {
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	if(value.val_float >= I_1B_Max.valueAbsMax.val_float ||
 8002a74:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a78:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <setI_1B_Max+0x48>)
 8002a7a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002a7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a86:	da09      	bge.n	8002a9c <setI_1B_Max+0x30>
	   value.val_float <= I_1B_Max.valueAbsMin.val_float) {
 8002a88:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a8c:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <setI_1B_Max+0x48>)
 8002a8e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= I_1B_Max.valueAbsMax.val_float ||
 8002a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	d801      	bhi.n	8002aa0 <setI_1B_Max+0x34>
	   return false;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	e003      	b.n	8002aa8 <setI_1B_Max+0x3c>
	} else {
		I_1B_Max.value = value;
 8002aa0:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <setI_1B_Max+0x48>)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8002aa6:	2301      	movs	r3, #1
	}
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	2000050c 	.word	0x2000050c

08002ab8 <getI_1B_Max>:
valueTypes getI_1B_Max(void) {
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
    return I_1B_Max.value;
 8002abc:	4b03      	ldr	r3, [pc, #12]	; (8002acc <getI_1B_Max+0x14>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	2000050c 	.word	0x2000050c

08002ad0 <setI_2A_Max>:
bool setI_2A_Max(valueTypes value) {
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	if(value.val_float >= I_2A_Max.valueAbsMax.val_float ||
 8002ad8:	ed97 7a01 	vldr	s14, [r7, #4]
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <setI_2A_Max+0x48>)
 8002ade:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002ae2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aea:	da09      	bge.n	8002b00 <setI_2A_Max+0x30>
	   value.val_float <= I_2A_Max.valueAbsMin.val_float) {
 8002aec:	ed97 7a01 	vldr	s14, [r7, #4]
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <setI_2A_Max+0x48>)
 8002af2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= I_2A_Max.valueAbsMax.val_float ||
 8002af6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afe:	d801      	bhi.n	8002b04 <setI_2A_Max+0x34>
	   return false;
 8002b00:	2300      	movs	r3, #0
 8002b02:	e003      	b.n	8002b0c <setI_2A_Max+0x3c>
	} else {
		I_2A_Max.value = value;
 8002b04:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <setI_2A_Max+0x48>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8002b0a:	2301      	movs	r3, #1
	}
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	20000548 	.word	0x20000548

08002b1c <getI_2A_Max>:
valueTypes getI_2A_Max(void) {
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
    return I_2A_Max.value;
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <getI_2A_Max+0x14>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000548 	.word	0x20000548

08002b34 <setI_2B_Max>:
bool setI_2B_Max(valueTypes value) {
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	if(value.val_float >= I_2B_Max.valueAbsMax.val_float ||
 8002b3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b40:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <setI_2B_Max+0x48>)
 8002b42:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4e:	da09      	bge.n	8002b64 <setI_2B_Max+0x30>
	   value.val_float <= I_2B_Max.valueAbsMin.val_float) {
 8002b50:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <setI_2B_Max+0x48>)
 8002b56:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= I_2B_Max.valueAbsMax.val_float ||
 8002b5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b62:	d801      	bhi.n	8002b68 <setI_2B_Max+0x34>
	   return false;
 8002b64:	2300      	movs	r3, #0
 8002b66:	e003      	b.n	8002b70 <setI_2B_Max+0x3c>
	} else {
		I_2B_Max.value = value;
 8002b68:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <setI_2B_Max+0x48>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8002b6e:	2301      	movs	r3, #1
	}
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	20000584 	.word	0x20000584

08002b80 <getI_2B_Max>:
valueTypes getI_2B_Max(void) {
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
    return I_2B_Max.value;
 8002b84:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <getI_2B_Max+0x14>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000584 	.word	0x20000584

08002b98 <setTemp1>:


bool setTemp1(valueTypes value) {
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
    Temp1.value = value;
 8002ba0:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <setTemp1+0x1c>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8002ba6:	2301      	movs	r3, #1
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	200005c0 	.word	0x200005c0

08002bb8 <getTemp1>:
valueTypes getTemp1() {
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
    return Temp1.value;
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <getTemp1+0x14>)
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	200005c0 	.word	0x200005c0

08002bd0 <setTemp2>:
bool setTemp2(valueTypes value) {
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
    Temp2.value = value;
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <setTemp2+0x1c>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8002bde:	2301      	movs	r3, #1
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	200005fc 	.word	0x200005fc

08002bf0 <getTemp2>:
valueTypes getTemp2() {
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
    return Temp2.value;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	; (8002c04 <getTemp2+0x14>)
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	200005fc 	.word	0x200005fc

08002c08 <setTemp3>:
bool setTemp3(valueTypes value) {
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
    Temp3.value = value;
 8002c10:	4a04      	ldr	r2, [pc, #16]	; (8002c24 <setTemp3+0x1c>)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	20000638 	.word	0x20000638

08002c28 <getTemp3>:
valueTypes getTemp3() {
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
    return Temp3.value;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <getTemp3+0x14>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000638 	.word	0x20000638

08002c40 <setTemp4>:
bool setTemp4(valueTypes value) {
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
    Temp4.value = value;
 8002c48:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <setTemp4+0x1c>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8002c4e:	2301      	movs	r3, #1
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	20000674 	.word	0x20000674

08002c60 <getTemp4>:
valueTypes getTemp4() {
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
    return Temp4.value;
 8002c64:	4b03      	ldr	r3, [pc, #12]	; (8002c74 <getTemp4+0x14>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	20000674 	.word	0x20000674

08002c78 <setTemp1_coeff>:

bool setTemp1_coeff(valueTypes value) {
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Temp1_coeff.valueAbsMax.val_float ||
 8002c80:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c84:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <setTemp1_coeff+0x48>)
 8002c86:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002c8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c92:	da09      	bge.n	8002ca8 <setTemp1_coeff+0x30>
       value.val_float <= Temp1_coeff.valueAbsMin.val_float) {
 8002c94:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <setTemp1_coeff+0x48>)
 8002c9a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Temp1_coeff.valueAbsMax.val_float ||
 8002c9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca6:	d801      	bhi.n	8002cac <setTemp1_coeff+0x34>
       return false;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	e003      	b.n	8002cb4 <setTemp1_coeff+0x3c>
    } else {
        Temp1_coeff.value = value;
 8002cac:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <setTemp1_coeff+0x48>)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002cb2:	2301      	movs	r3, #1
    }
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	200006b0 	.word	0x200006b0

08002cc4 <getTemp1_coeff>:
valueTypes getTemp1_coeff(void) {
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
    return Temp1_coeff.value;
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <getTemp1_coeff+0x14>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	200006b0 	.word	0x200006b0

08002cdc <setTemp2_coeff>:
bool setTemp2_coeff(valueTypes value) {
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Temp2_coeff.valueAbsMax.val_float ||
 8002ce4:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <setTemp2_coeff+0x48>)
 8002cea:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002cee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf6:	da09      	bge.n	8002d0c <setTemp2_coeff+0x30>
       value.val_float <= Temp2_coeff.valueAbsMin.val_float) {
 8002cf8:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cfc:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <setTemp2_coeff+0x48>)
 8002cfe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Temp2_coeff.valueAbsMax.val_float ||
 8002d02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d0a:	d801      	bhi.n	8002d10 <setTemp2_coeff+0x34>
       return false;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e003      	b.n	8002d18 <setTemp2_coeff+0x3c>
    } else {
        Temp2_coeff.value = value;
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <setTemp2_coeff+0x48>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002d16:	2301      	movs	r3, #1
    }
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	200006ec 	.word	0x200006ec

08002d28 <getTemp2_coeff>:
valueTypes getTemp2_coeff(void) {
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
    return Temp2_coeff.value;
 8002d2c:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <getTemp2_coeff+0x14>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	200006ec 	.word	0x200006ec

08002d40 <setTemp3_coeff>:
bool setTemp3_coeff(valueTypes value) {
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Temp3_coeff.valueAbsMax.val_float ||
 8002d48:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <setTemp3_coeff+0x48>)
 8002d4e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002d52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5a:	da09      	bge.n	8002d70 <setTemp3_coeff+0x30>
       value.val_float <= Temp3_coeff.valueAbsMin.val_float) {
 8002d5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d60:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <setTemp3_coeff+0x48>)
 8002d62:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Temp3_coeff.valueAbsMax.val_float ||
 8002d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6e:	d801      	bhi.n	8002d74 <setTemp3_coeff+0x34>
       return false;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e003      	b.n	8002d7c <setTemp3_coeff+0x3c>
    } else {
        Temp3_coeff.value = value;
 8002d74:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <setTemp3_coeff+0x48>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002d7a:	2301      	movs	r3, #1
    }
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	20000728 	.word	0x20000728

08002d8c <getTemp3_coeff>:
valueTypes getTemp3_coeff(void) {
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
    return Temp3_coeff.value;
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <getTemp3_coeff+0x14>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000728 	.word	0x20000728

08002da4 <setTemp4_coeff>:
bool setTemp4_coeff(valueTypes value) {
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Temp4_coeff.valueAbsMax.val_float ||
 8002dac:	ed97 7a01 	vldr	s14, [r7, #4]
 8002db0:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <setTemp4_coeff+0x48>)
 8002db2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dbe:	da09      	bge.n	8002dd4 <setTemp4_coeff+0x30>
       value.val_float <= Temp4_coeff.valueAbsMin.val_float) {
 8002dc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002dc4:	4b09      	ldr	r3, [pc, #36]	; (8002dec <setTemp4_coeff+0x48>)
 8002dc6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Temp4_coeff.valueAbsMax.val_float ||
 8002dca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	d801      	bhi.n	8002dd8 <setTemp4_coeff+0x34>
       return false;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e003      	b.n	8002de0 <setTemp4_coeff+0x3c>
    } else {
        Temp4_coeff.value = value;
 8002dd8:	4a04      	ldr	r2, [pc, #16]	; (8002dec <setTemp4_coeff+0x48>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002dde:	2301      	movs	r3, #1
    }
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	20000764 	.word	0x20000764

08002df0 <getTemp4_coeff>:
valueTypes getTemp4_coeff(void) {
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
    return Temp4_coeff.value;
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <getTemp4_coeff+0x14>)
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000764 	.word	0x20000764

08002e08 <setTemp1_Min>:

bool setTemp1_Min(valueTypes value) {
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	if(value.val_float >= Temp1_Min.valueAbsMax.val_float ||
 8002e10:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e14:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <setTemp1_Min+0x48>)
 8002e16:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002e1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e22:	da09      	bge.n	8002e38 <setTemp1_Min+0x30>
	   value.val_float <= Temp1_Min.valueAbsMin.val_float) {
 8002e24:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <setTemp1_Min+0x48>)
 8002e2a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= Temp1_Min.valueAbsMax.val_float ||
 8002e2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e36:	d801      	bhi.n	8002e3c <setTemp1_Min+0x34>
	   return false;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e003      	b.n	8002e44 <setTemp1_Min+0x3c>
	} else {
		Temp1_Min.value = value;
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <setTemp1_Min+0x48>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8002e42:	2301      	movs	r3, #1
	}
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	200007a0 	.word	0x200007a0

08002e54 <getTemp1_Min>:
valueTypes getTemp1_Min(void) {
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
    return Temp1_Min.value;
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <getTemp1_Min+0x14>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	200007a0 	.word	0x200007a0

08002e6c <setTemp1_Max>:

bool setTemp1_Max(valueTypes value) {
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
	if(value.val_float >= Temp1_Max.valueAbsMax.val_float ||
 8002e74:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e78:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <setTemp1_Max+0x48>)
 8002e7a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002e7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e86:	da09      	bge.n	8002e9c <setTemp1_Max+0x30>
	   value.val_float <= Temp1_Max.valueAbsMin.val_float) {
 8002e88:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e8c:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <setTemp1_Max+0x48>)
 8002e8e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= Temp1_Max.valueAbsMax.val_float ||
 8002e92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9a:	d801      	bhi.n	8002ea0 <setTemp1_Max+0x34>
	   return false;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e003      	b.n	8002ea8 <setTemp1_Max+0x3c>
	} else {
		Temp1_Max.value = value;
 8002ea0:	4a04      	ldr	r2, [pc, #16]	; (8002eb4 <setTemp1_Max+0x48>)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8002ea6:	2301      	movs	r3, #1
	}
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	200007dc 	.word	0x200007dc

08002eb8 <getTemp1_Max>:
valueTypes getTemp1_Max(void) {
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
    return Temp1_Max.value;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <getTemp1_Max+0x14>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	200007dc 	.word	0x200007dc

08002ed0 <setTemp2_Min>:
bool setTemp2_Min(valueTypes value) {
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	if(value.val_float >= Temp2_Min.valueAbsMax.val_float ||
 8002ed8:	ed97 7a01 	vldr	s14, [r7, #4]
 8002edc:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <setTemp2_Min+0x48>)
 8002ede:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002ee2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eea:	da09      	bge.n	8002f00 <setTemp2_Min+0x30>
	   value.val_float <= Temp2_Min.valueAbsMin.val_float) {
 8002eec:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <setTemp2_Min+0x48>)
 8002ef2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= Temp2_Min.valueAbsMax.val_float ||
 8002ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efe:	d801      	bhi.n	8002f04 <setTemp2_Min+0x34>
	   return false;
 8002f00:	2300      	movs	r3, #0
 8002f02:	e003      	b.n	8002f0c <setTemp2_Min+0x3c>
	} else {
		Temp2_Min.value = value;
 8002f04:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <setTemp2_Min+0x48>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8002f0a:	2301      	movs	r3, #1
	}
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	20000818 	.word	0x20000818

08002f1c <getTemp2_Min>:
valueTypes getTemp2_Min(void) {
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
    return Temp2_Min.value;
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <getTemp2_Min+0x14>)
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000818 	.word	0x20000818

08002f34 <setTemp2_Max>:

bool setTemp2_Max(valueTypes value) {
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	if(value.val_float >= Temp2_Max.valueAbsMax.val_float ||
 8002f3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <setTemp2_Max+0x48>)
 8002f42:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002f46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4e:	da09      	bge.n	8002f64 <setTemp2_Max+0x30>
	   value.val_float <= Temp2_Max.valueAbsMin.val_float) {
 8002f50:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f54:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <setTemp2_Max+0x48>)
 8002f56:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= Temp2_Max.valueAbsMax.val_float ||
 8002f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f62:	d801      	bhi.n	8002f68 <setTemp2_Max+0x34>
	   return false;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e003      	b.n	8002f70 <setTemp2_Max+0x3c>
	} else {
		Temp2_Max.value = value;
 8002f68:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <setTemp2_Max+0x48>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8002f6e:	2301      	movs	r3, #1
	}
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	20000854 	.word	0x20000854

08002f80 <getTemp2_Max>:
valueTypes getTemp2_Max(void) {
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
    return Temp2_Max.value;
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <getTemp2_Max+0x14>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000854 	.word	0x20000854

08002f98 <setTemp3_Min>:
bool setTemp3_Min(valueTypes value) {
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
	if(value.val_float >= Temp3_Min.valueAbsMax.val_float ||
 8002fa0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	; (8002fe0 <setTemp3_Min+0x48>)
 8002fa6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002faa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb2:	da09      	bge.n	8002fc8 <setTemp3_Min+0x30>
	   value.val_float <= Temp3_Min.valueAbsMin.val_float) {
 8002fb4:	ed97 7a01 	vldr	s14, [r7, #4]
 8002fb8:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <setTemp3_Min+0x48>)
 8002fba:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= Temp3_Min.valueAbsMax.val_float ||
 8002fbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc6:	d801      	bhi.n	8002fcc <setTemp3_Min+0x34>
	   return false;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e003      	b.n	8002fd4 <setTemp3_Min+0x3c>
	} else {
		Temp3_Min.value = value;
 8002fcc:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <setTemp3_Min+0x48>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8002fd2:	2301      	movs	r3, #1
	}
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	20000890 	.word	0x20000890

08002fe4 <getTemp3_Min>:
valueTypes getTemp3_Min(void) {
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
    return Temp3_Min.value;
 8002fe8:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <getTemp3_Min+0x14>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	20000890 	.word	0x20000890

08002ffc <setTemp3_Max>:

bool setTemp3_Max(valueTypes value) {
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	if(value.val_float >= Temp3_Max.valueAbsMax.val_float ||
 8003004:	ed97 7a01 	vldr	s14, [r7, #4]
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <setTemp3_Max+0x48>)
 800300a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800300e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003016:	da09      	bge.n	800302c <setTemp3_Max+0x30>
	   value.val_float <= Temp3_Max.valueAbsMin.val_float) {
 8003018:	ed97 7a01 	vldr	s14, [r7, #4]
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <setTemp3_Max+0x48>)
 800301e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= Temp3_Max.valueAbsMax.val_float ||
 8003022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302a:	d801      	bhi.n	8003030 <setTemp3_Max+0x34>
	   return false;
 800302c:	2300      	movs	r3, #0
 800302e:	e003      	b.n	8003038 <setTemp3_Max+0x3c>
	} else {
		Temp3_Max.value = value;
 8003030:	4a04      	ldr	r2, [pc, #16]	; (8003044 <setTemp3_Max+0x48>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8003036:	2301      	movs	r3, #1
	}
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	200008cc 	.word	0x200008cc

08003048 <getTemp3_Max>:
valueTypes getTemp3_Max(void) {
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
    return Temp3_Max.value;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <getTemp3_Max+0x14>)
 800304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	200008cc 	.word	0x200008cc

08003060 <setTemp4_Min>:
bool setTemp4_Min(valueTypes value) {
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	if(value.val_float >= Temp4_Min.valueAbsMax.val_float ||
 8003068:	ed97 7a01 	vldr	s14, [r7, #4]
 800306c:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <setTemp4_Min+0x48>)
 800306e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307a:	da09      	bge.n	8003090 <setTemp4_Min+0x30>
	   value.val_float <= Temp4_Min.valueAbsMin.val_float) {
 800307c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <setTemp4_Min+0x48>)
 8003082:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= Temp4_Min.valueAbsMax.val_float ||
 8003086:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800308a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308e:	d801      	bhi.n	8003094 <setTemp4_Min+0x34>
	   return false;
 8003090:	2300      	movs	r3, #0
 8003092:	e003      	b.n	800309c <setTemp4_Min+0x3c>
	} else {
		Temp4_Min.value = value;
 8003094:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <setTemp4_Min+0x48>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 800309a:	2301      	movs	r3, #1
	}
}
 800309c:	4618      	mov	r0, r3
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	20000908 	.word	0x20000908

080030ac <getTemp4_Min>:
valueTypes getTemp4_Min(void) {
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
    return Temp4_Min.value;
 80030b0:	4b03      	ldr	r3, [pc, #12]	; (80030c0 <getTemp4_Min+0x14>)
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20000908 	.word	0x20000908

080030c4 <setTemp4_Max>:

bool setTemp4_Max(valueTypes value) {
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
	if(value.val_float >= Temp4_Max.valueAbsMax.val_float ||
 80030cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80030d0:	4b0e      	ldr	r3, [pc, #56]	; (800310c <setTemp4_Max+0x48>)
 80030d2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80030d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030de:	da09      	bge.n	80030f4 <setTemp4_Max+0x30>
	   value.val_float <= Temp4_Max.valueAbsMin.val_float) {
 80030e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80030e4:	4b09      	ldr	r3, [pc, #36]	; (800310c <setTemp4_Max+0x48>)
 80030e6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= Temp4_Max.valueAbsMax.val_float ||
 80030ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f2:	d801      	bhi.n	80030f8 <setTemp4_Max+0x34>
	   return false;
 80030f4:	2300      	movs	r3, #0
 80030f6:	e003      	b.n	8003100 <setTemp4_Max+0x3c>
	} else {
		Temp4_Max.value = value;
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <setTemp4_Max+0x48>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 80030fe:	2301      	movs	r3, #1
	}
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	20000944 	.word	0x20000944

08003110 <getTemp4_Max>:
valueTypes getTemp4_Max(void) {
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
    return Temp4_Max.value;
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <getTemp4_Max+0x14>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000944 	.word	0x20000944

08003128 <setLoadSelect1>:

bool setLoadSelect1(valueTypes state) {
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	Ch1_OnOff.value.val_bool = false; //Отключение канала
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <setLoadSelect1+0x24>)
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    LoadSelect1.value = state;
 8003138:	4a05      	ldr	r2, [pc, #20]	; (8003150 <setLoadSelect1+0x28>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 800313e:	2301      	movs	r3, #1
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	20000a70 	.word	0x20000a70
 8003150:	20000980 	.word	0x20000980

08003154 <getLoadSelect1>:
valueTypes getLoadSelect1(void) {
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
    return LoadSelect1.value;
 8003158:	4b03      	ldr	r3, [pc, #12]	; (8003168 <getLoadSelect1+0x14>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000980 	.word	0x20000980

0800316c <setLoadSelect2>:
bool setLoadSelect2(valueTypes state) {
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	Ch2_OnOff.value.val_bool = false; //Отключение канала
 8003174:	4b06      	ldr	r3, [pc, #24]	; (8003190 <setLoadSelect2+0x24>)
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    LoadSelect2.value = state;
 800317c:	4a05      	ldr	r2, [pc, #20]	; (8003194 <setLoadSelect2+0x28>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8003182:	2301      	movs	r3, #1
}
 8003184:	4618      	mov	r0, r3
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	20000aac 	.word	0x20000aac
 8003194:	200009bc 	.word	0x200009bc

08003198 <getLoadSelect2>:
valueTypes getLoadSelect2(void) {
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
    return LoadSelect2.value;
 800319c:	4b03      	ldr	r3, [pc, #12]	; (80031ac <getLoadSelect2+0x14>)
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	200009bc 	.word	0x200009bc

080031b0 <setModeSelect1>:

bool setModeSelect1(valueTypes state) {
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
	Ch1_OnOff.value.val_bool = false; //Отключение канала
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <setModeSelect1+0x24>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ModeSelect1.value = state;
 80031c0:	4a05      	ldr	r2, [pc, #20]	; (80031d8 <setModeSelect1+0x28>)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80031c6:	2301      	movs	r3, #1
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	20000a70 	.word	0x20000a70
 80031d8:	200009f8 	.word	0x200009f8

080031dc <getModeSelect1>:
valueTypes getModeSelect1(void) {
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
    return ModeSelect1.value;
 80031e0:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <getModeSelect1+0x14>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	200009f8 	.word	0x200009f8

080031f4 <setModeSelect2>:
bool setModeSelect2(valueTypes state) {
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	Ch2_OnOff.value.val_bool = false; //Отключение канала
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <setModeSelect2+0x24>)
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ModeSelect2.value = state;
 8003204:	4a05      	ldr	r2, [pc, #20]	; (800321c <setModeSelect2+0x28>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 800320a:	2301      	movs	r3, #1
}
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	20000aac 	.word	0x20000aac
 800321c:	20000a34 	.word	0x20000a34

08003220 <getModeSelect2>:
valueTypes getModeSelect2(void) {
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
    return ModeSelect2.value;
 8003224:	4b03      	ldr	r3, [pc, #12]	; (8003234 <getModeSelect2+0x14>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003228:	4618      	mov	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20000a34 	.word	0x20000a34

08003238 <setCh1_OnOff>:

bool setCh1_OnOff(valueTypes state) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
	resetPID(0);
 8003240:	2000      	movs	r0, #0
 8003242:	f7fe fb33 	bl	80018ac <resetPID>
	Ch1_OnOff.value = state;
 8003246:	4a04      	ldr	r2, [pc, #16]	; (8003258 <setCh1_OnOff+0x20>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 800324c:	2301      	movs	r3, #1
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000a70 	.word	0x20000a70

0800325c <getCh1_OnOff>:
valueTypes getCh1_OnOff(void) {
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
    return Ch1_OnOff.value;
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <getCh1_OnOff+0x14>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000a70 	.word	0x20000a70

08003274 <setCh2_OnOff>:
bool setCh2_OnOff(valueTypes state) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
	resetPID(1);
 800327c:	2001      	movs	r0, #1
 800327e:	f7fe fb15 	bl	80018ac <resetPID>
    Ch2_OnOff.value = state;
 8003282:	4a04      	ldr	r2, [pc, #16]	; (8003294 <setCh2_OnOff+0x20>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8003288:	2301      	movs	r3, #1
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20000aac 	.word	0x20000aac

08003298 <getCh2_OnOff>:
valueTypes getCh2_OnOff(void) {
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
    return Ch2_OnOff.value;
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <getCh2_OnOff+0x14>)
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000aac 	.word	0x20000aac

080032b0 <setSourceSelect1>:

bool setSourceSelect1(valueTypes state) {
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	Ch1_OnOff.value.val_bool = false; //Отключение канала
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <setSourceSelect1+0x24>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SourceSelect1.value = state;
 80032c0:	4a05      	ldr	r2, [pc, #20]	; (80032d8 <setSourceSelect1+0x28>)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6313      	str	r3, [r2, #48]	; 0x30
	return true;
 80032c6:	2301      	movs	r3, #1
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	20000a70 	.word	0x20000a70
 80032d8:	20000ae8 	.word	0x20000ae8

080032dc <getSourceSelect1>:
valueTypes getSourceSelect1(void) {
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
    return SourceSelect1.value;
 80032e0:	4b03      	ldr	r3, [pc, #12]	; (80032f0 <getSourceSelect1+0x14>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000ae8 	.word	0x20000ae8

080032f4 <setSourceSelect2>:
bool setSourceSelect2(valueTypes state) {
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
	Ch2_OnOff.value.val_bool = false; //Отключение канала
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <setSourceSelect2+0x24>)
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SourceSelect2.value = state;
 8003304:	4a05      	ldr	r2, [pc, #20]	; (800331c <setSourceSelect2+0x28>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 800330a:	2301      	movs	r3, #1
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	20000aac 	.word	0x20000aac
 800331c:	20000b24 	.word	0x20000b24

08003320 <getSourceSelect2>:
valueTypes getSourceSelect2(void) {
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
    return SourceSelect2.value;
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <getSourceSelect2+0x14>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000b24 	.word	0x20000b24

08003338 <setPcoeff1Temp>:

bool setPcoeff1Temp(valueTypes value) {
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Pcoeff1Temp.valueAbsMax.val_float ||
 8003340:	ed97 7a01 	vldr	s14, [r7, #4]
 8003344:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <setPcoeff1Temp+0x48>)
 8003346:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800334a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800334e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003352:	da09      	bge.n	8003368 <setPcoeff1Temp+0x30>
       value.val_float <= Pcoeff1Temp.valueAbsMin.val_float) {
 8003354:	ed97 7a01 	vldr	s14, [r7, #4]
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <setPcoeff1Temp+0x48>)
 800335a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Pcoeff1Temp.valueAbsMax.val_float ||
 800335e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003366:	d801      	bhi.n	800336c <setPcoeff1Temp+0x34>
       return false;
 8003368:	2300      	movs	r3, #0
 800336a:	e003      	b.n	8003374 <setPcoeff1Temp+0x3c>
    } else {
        Pcoeff1Temp.value = value;
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <setPcoeff1Temp+0x48>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8003372:	2301      	movs	r3, #1
    }
}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	20000b60 	.word	0x20000b60

08003384 <getPcoeff1Temp>:
valueTypes getPcoeff1Temp(void) {
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
    return Pcoeff1Temp.value;
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <getPcoeff1Temp+0x14>)
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000b60 	.word	0x20000b60

0800339c <setPcoeff2Temp>:
bool setPcoeff2Temp(valueTypes value) {
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Pcoeff2Temp.valueAbsMax.val_float ||
 80033a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80033a8:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <setPcoeff2Temp+0x48>)
 80033aa:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80033ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	da09      	bge.n	80033cc <setPcoeff2Temp+0x30>
       value.val_float <= Pcoeff2Temp.valueAbsMin.val_float) {
 80033b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80033bc:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <setPcoeff2Temp+0x48>)
 80033be:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Pcoeff2Temp.valueAbsMax.val_float ||
 80033c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ca:	d801      	bhi.n	80033d0 <setPcoeff2Temp+0x34>
       return false;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e003      	b.n	80033d8 <setPcoeff2Temp+0x3c>
    } else {
        Pcoeff2Temp.value = value;
 80033d0:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <setPcoeff2Temp+0x48>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80033d6:	2301      	movs	r3, #1
    }
}
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	20000b9c 	.word	0x20000b9c

080033e8 <getPcoeff2Temp>:
valueTypes getPcoeff2Temp(void) {
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
    return Pcoeff2Temp.value;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <getPcoeff2Temp+0x14>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000b9c 	.word	0x20000b9c

08003400 <setIcoeff1Temp>:
bool setIcoeff1Temp(valueTypes value) {
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Icoeff1Temp.valueAbsMax.val_float ||
 8003408:	ed97 7a01 	vldr	s14, [r7, #4]
 800340c:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <setIcoeff1Temp+0x48>)
 800340e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341a:	da09      	bge.n	8003430 <setIcoeff1Temp+0x30>
       value.val_float <= Icoeff1Temp.valueAbsMin.val_float) {
 800341c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <setIcoeff1Temp+0x48>)
 8003422:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Icoeff1Temp.valueAbsMax.val_float ||
 8003426:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800342a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342e:	d801      	bhi.n	8003434 <setIcoeff1Temp+0x34>
       return false;
 8003430:	2300      	movs	r3, #0
 8003432:	e003      	b.n	800343c <setIcoeff1Temp+0x3c>
    } else {
        Icoeff1Temp.value = value;
 8003434:	4a04      	ldr	r2, [pc, #16]	; (8003448 <setIcoeff1Temp+0x48>)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800343a:	2301      	movs	r3, #1
    }
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	20000bd8 	.word	0x20000bd8

0800344c <getIcoeff1Temp>:
valueTypes getIcoeff1Temp(void) {
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
    return Icoeff1Temp.value;
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <getIcoeff1Temp+0x14>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000bd8 	.word	0x20000bd8

08003464 <setIcoeff2Temp>:
bool setIcoeff2Temp(valueTypes value) {
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Icoeff2Temp.valueAbsMax.val_float ||
 800346c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003470:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <setIcoeff2Temp+0x48>)
 8003472:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347e:	da09      	bge.n	8003494 <setIcoeff2Temp+0x30>
       value.val_float <= Icoeff2Temp.valueAbsMin.val_float) {
 8003480:	ed97 7a01 	vldr	s14, [r7, #4]
 8003484:	4b09      	ldr	r3, [pc, #36]	; (80034ac <setIcoeff2Temp+0x48>)
 8003486:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Icoeff2Temp.valueAbsMax.val_float ||
 800348a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800348e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003492:	d801      	bhi.n	8003498 <setIcoeff2Temp+0x34>
       return false;
 8003494:	2300      	movs	r3, #0
 8003496:	e003      	b.n	80034a0 <setIcoeff2Temp+0x3c>
    } else {
        Icoeff2Temp.value = value;
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <setIcoeff2Temp+0x48>)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800349e:	2301      	movs	r3, #1
    }
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	20000c14 	.word	0x20000c14

080034b0 <getIcoeff2Temp>:
valueTypes getIcoeff2Temp(void) {
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
    return Icoeff2Temp.value;
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <getIcoeff2Temp+0x14>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20000c14 	.word	0x20000c14

080034c8 <setDcoeff1Temp>:
bool setDcoeff1Temp(valueTypes value) {
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Dcoeff1Temp.valueAbsMax.val_float ||
 80034d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80034d4:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <setDcoeff1Temp+0x48>)
 80034d6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80034da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e2:	da09      	bge.n	80034f8 <setDcoeff1Temp+0x30>
       value.val_float <= Dcoeff1Temp.valueAbsMin.val_float) {
 80034e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <setDcoeff1Temp+0x48>)
 80034ea:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Dcoeff1Temp.valueAbsMax.val_float ||
 80034ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f6:	d801      	bhi.n	80034fc <setDcoeff1Temp+0x34>
       return false;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e003      	b.n	8003504 <setDcoeff1Temp+0x3c>
    } else {
        Dcoeff1Temp.value = value;
 80034fc:	4a04      	ldr	r2, [pc, #16]	; (8003510 <setDcoeff1Temp+0x48>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8003502:	2301      	movs	r3, #1
    }
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	20000c50 	.word	0x20000c50

08003514 <getDcoeff1Temp>:
valueTypes getDcoeff1Temp(void) {
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
    return Dcoeff1Temp.value;
 8003518:	4b03      	ldr	r3, [pc, #12]	; (8003528 <getDcoeff1Temp+0x14>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800351c:	4618      	mov	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	20000c50 	.word	0x20000c50

0800352c <setDcoeff2Temp>:
bool setDcoeff2Temp(valueTypes value) {
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Dcoeff2Temp.valueAbsMax.val_float ||
 8003534:	ed97 7a01 	vldr	s14, [r7, #4]
 8003538:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <setDcoeff2Temp+0x48>)
 800353a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800353e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003546:	da09      	bge.n	800355c <setDcoeff2Temp+0x30>
       value.val_float <= Dcoeff2Temp.valueAbsMin.val_float) {
 8003548:	ed97 7a01 	vldr	s14, [r7, #4]
 800354c:	4b09      	ldr	r3, [pc, #36]	; (8003574 <setDcoeff2Temp+0x48>)
 800354e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Dcoeff2Temp.valueAbsMax.val_float ||
 8003552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355a:	d801      	bhi.n	8003560 <setDcoeff2Temp+0x34>
       return false;
 800355c:	2300      	movs	r3, #0
 800355e:	e003      	b.n	8003568 <setDcoeff2Temp+0x3c>
    } else {
        Dcoeff2Temp.value = value;
 8003560:	4a04      	ldr	r2, [pc, #16]	; (8003574 <setDcoeff2Temp+0x48>)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8003566:	2301      	movs	r3, #1
    }
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	20000c8c 	.word	0x20000c8c

08003578 <getDcoeff2Temp>:

valueTypes getDcoeff2Temp(void) {
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
    return Dcoeff2Temp.value;
 800357c:	4b03      	ldr	r3, [pc, #12]	; (800358c <getDcoeff2Temp+0x14>)
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20000c8c 	.word	0x20000c8c

08003590 <setPcoeff1Freq>:


bool setPcoeff1Freq(valueTypes value) {
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Pcoeff1Freq.valueAbsMax.val_float ||
 8003598:	ed97 7a01 	vldr	s14, [r7, #4]
 800359c:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <setPcoeff1Freq+0x48>)
 800359e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80035a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035aa:	da09      	bge.n	80035c0 <setPcoeff1Freq+0x30>
       value.val_float <= Pcoeff1Freq.valueAbsMin.val_float) {
 80035ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80035b0:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <setPcoeff1Freq+0x48>)
 80035b2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Pcoeff1Freq.valueAbsMax.val_float ||
 80035b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035be:	d801      	bhi.n	80035c4 <setPcoeff1Freq+0x34>
       return false;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e003      	b.n	80035cc <setPcoeff1Freq+0x3c>
    } else {
        Pcoeff1Freq.value = value;
 80035c4:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <setPcoeff1Freq+0x48>)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80035ca:	2301      	movs	r3, #1
    }
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	20000cc8 	.word	0x20000cc8

080035dc <getPcoeff1Freq>:
valueTypes getPcoeff1Freq(void) {
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
    return Pcoeff1Freq.value;
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <getPcoeff1Freq+0x14>)
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000cc8 	.word	0x20000cc8

080035f4 <setPcoeff2Freq>:
bool setPcoeff2Freq(valueTypes value) {
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Pcoeff2Freq.valueAbsMax.val_float ||
 80035fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8003600:	4b0e      	ldr	r3, [pc, #56]	; (800363c <setPcoeff2Freq+0x48>)
 8003602:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003606:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800360a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360e:	da09      	bge.n	8003624 <setPcoeff2Freq+0x30>
       value.val_float <= Pcoeff2Freq.valueAbsMin.val_float) {
 8003610:	ed97 7a01 	vldr	s14, [r7, #4]
 8003614:	4b09      	ldr	r3, [pc, #36]	; (800363c <setPcoeff2Freq+0x48>)
 8003616:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Pcoeff2Freq.valueAbsMax.val_float ||
 800361a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800361e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003622:	d801      	bhi.n	8003628 <setPcoeff2Freq+0x34>
       return false;
 8003624:	2300      	movs	r3, #0
 8003626:	e003      	b.n	8003630 <setPcoeff2Freq+0x3c>
    } else {
        Pcoeff2Freq.value = value;
 8003628:	4a04      	ldr	r2, [pc, #16]	; (800363c <setPcoeff2Freq+0x48>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800362e:	2301      	movs	r3, #1
    }
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	20000d04 	.word	0x20000d04

08003640 <getPcoeff2Freq>:
valueTypes getPcoeff2Freq(void) {
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
    return Pcoeff2Freq.value;
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <getPcoeff2Freq+0x14>)
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000d04 	.word	0x20000d04

08003658 <setIcoeff1Freq>:
bool setIcoeff1Freq(valueTypes value) {
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Icoeff1Freq.valueAbsMax.val_float ||
 8003660:	ed97 7a01 	vldr	s14, [r7, #4]
 8003664:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <setIcoeff1Freq+0x48>)
 8003666:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800366a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800366e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003672:	da09      	bge.n	8003688 <setIcoeff1Freq+0x30>
       value.val_float <= Icoeff1Freq.valueAbsMin.val_float) {
 8003674:	ed97 7a01 	vldr	s14, [r7, #4]
 8003678:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <setIcoeff1Freq+0x48>)
 800367a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Icoeff1Freq.valueAbsMax.val_float ||
 800367e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003686:	d801      	bhi.n	800368c <setIcoeff1Freq+0x34>
       return false;
 8003688:	2300      	movs	r3, #0
 800368a:	e003      	b.n	8003694 <setIcoeff1Freq+0x3c>
    } else {
        Icoeff1Freq.value = value;
 800368c:	4a04      	ldr	r2, [pc, #16]	; (80036a0 <setIcoeff1Freq+0x48>)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8003692:	2301      	movs	r3, #1
    }
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	20000d40 	.word	0x20000d40

080036a4 <getIcoeff1Freq>:
valueTypes getIcoeff1Freq(void) {
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
    return Icoeff1Freq.value;
 80036a8:	4b03      	ldr	r3, [pc, #12]	; (80036b8 <getIcoeff1Freq+0x14>)
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000d40 	.word	0x20000d40

080036bc <setIcoeff2Freq>:
bool setIcoeff2Freq(valueTypes value) {
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Icoeff2Freq.valueAbsMax.val_float ||
 80036c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80036c8:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <setIcoeff2Freq+0x48>)
 80036ca:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80036ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d6:	da09      	bge.n	80036ec <setIcoeff2Freq+0x30>
       value.val_float <= Icoeff2Freq.valueAbsMin.val_float) {
 80036d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80036dc:	4b09      	ldr	r3, [pc, #36]	; (8003704 <setIcoeff2Freq+0x48>)
 80036de:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Icoeff2Freq.valueAbsMax.val_float ||
 80036e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ea:	d801      	bhi.n	80036f0 <setIcoeff2Freq+0x34>
       return false;
 80036ec:	2300      	movs	r3, #0
 80036ee:	e003      	b.n	80036f8 <setIcoeff2Freq+0x3c>
    } else {
        Icoeff2Freq.value = value;
 80036f0:	4a04      	ldr	r2, [pc, #16]	; (8003704 <setIcoeff2Freq+0x48>)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80036f6:	2301      	movs	r3, #1
    }
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	20000d7c 	.word	0x20000d7c

08003708 <getIcoeff2Freq>:
valueTypes getIcoeff2Freq(void) {
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
    return Icoeff2Freq.value;
 800370c:	4b03      	ldr	r3, [pc, #12]	; (800371c <getIcoeff2Freq+0x14>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	20000d7c 	.word	0x20000d7c

08003720 <setDcoeff1Freq>:
bool setDcoeff1Freq(valueTypes value) {
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Dcoeff1Freq.valueAbsMax.val_float ||
 8003728:	ed97 7a01 	vldr	s14, [r7, #4]
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <setDcoeff1Freq+0x48>)
 800372e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373a:	da09      	bge.n	8003750 <setDcoeff1Freq+0x30>
       value.val_float <= Dcoeff1Freq.valueAbsMin.val_float) {
 800373c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <setDcoeff1Freq+0x48>)
 8003742:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Dcoeff1Freq.valueAbsMax.val_float ||
 8003746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800374a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374e:	d801      	bhi.n	8003754 <setDcoeff1Freq+0x34>
       return false;
 8003750:	2300      	movs	r3, #0
 8003752:	e003      	b.n	800375c <setDcoeff1Freq+0x3c>
    } else {
        Dcoeff1Freq.value = value;
 8003754:	4a04      	ldr	r2, [pc, #16]	; (8003768 <setDcoeff1Freq+0x48>)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800375a:	2301      	movs	r3, #1
    }
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	20000db8 	.word	0x20000db8

0800376c <getDcoeff1Freq>:
valueTypes getDcoeff1Freq(void) {
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
    return Dcoeff1Freq.value;
 8003770:	4b03      	ldr	r3, [pc, #12]	; (8003780 <getDcoeff1Freq+0x14>)
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000db8 	.word	0x20000db8

08003784 <setDcoeff2Freq>:
bool setDcoeff2Freq(valueTypes value) {
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Dcoeff2Freq.valueAbsMax.val_float ||
 800378c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003790:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <setDcoeff2Freq+0x48>)
 8003792:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003796:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800379a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379e:	da09      	bge.n	80037b4 <setDcoeff2Freq+0x30>
       value.val_float <= Dcoeff2Freq.valueAbsMin.val_float) {
 80037a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <setDcoeff2Freq+0x48>)
 80037a6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Dcoeff2Freq.valueAbsMax.val_float ||
 80037aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b2:	d801      	bhi.n	80037b8 <setDcoeff2Freq+0x34>
       return false;
 80037b4:	2300      	movs	r3, #0
 80037b6:	e003      	b.n	80037c0 <setDcoeff2Freq+0x3c>
    } else {
        Dcoeff2Freq.value = value;
 80037b8:	4a04      	ldr	r2, [pc, #16]	; (80037cc <setDcoeff2Freq+0x48>)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80037be:	2301      	movs	r3, #1
    }
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	20000df4 	.word	0x20000df4

080037d0 <getDcoeff2Freq>:

valueTypes getDcoeff2Freq(void) {
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
    return Dcoeff2Freq.value;
 80037d4:	4b03      	ldr	r3, [pc, #12]	; (80037e4 <getDcoeff2Freq+0x14>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80037d8:	4618      	mov	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	20000df4 	.word	0x20000df4

080037e8 <setTempCh1Set>:

bool setTempCh1Set(valueTypes value) {
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
    if(value.val_float >= TempCh1Set.valueAbsMax.val_float ||
 80037f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80037f4:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <setTempCh1Set+0x48>)
 80037f6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80037fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003802:	da09      	bge.n	8003818 <setTempCh1Set+0x30>
       value.val_float <= TempCh1Set.valueAbsMin.val_float) {
 8003804:	ed97 7a01 	vldr	s14, [r7, #4]
 8003808:	4b09      	ldr	r3, [pc, #36]	; (8003830 <setTempCh1Set+0x48>)
 800380a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= TempCh1Set.valueAbsMax.val_float ||
 800380e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003816:	d801      	bhi.n	800381c <setTempCh1Set+0x34>
       return false;
 8003818:	2300      	movs	r3, #0
 800381a:	e003      	b.n	8003824 <setTempCh1Set+0x3c>
    } else {
    	TempCh1Set.value = value;
 800381c:	4a04      	ldr	r2, [pc, #16]	; (8003830 <setTempCh1Set+0x48>)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8003822:	2301      	movs	r3, #1
    }
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	20000e30 	.word	0x20000e30

08003834 <getTempCh1Set>:
valueTypes getTempCh1Set(void) {
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
    return TempCh1Set.value;
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <getTempCh1Set+0x14>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800383c:	4618      	mov	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	20000e30 	.word	0x20000e30

0800384c <setTempCh2Set>:
bool setTempCh2Set(valueTypes value) {
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
    if(value.val_float >= TempCh2Set.valueAbsMax.val_float ||
 8003854:	ed97 7a01 	vldr	s14, [r7, #4]
 8003858:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <setTempCh2Set+0x48>)
 800385a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800385e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003866:	da09      	bge.n	800387c <setTempCh2Set+0x30>
       value.val_float <= TempCh2Set.valueAbsMin.val_float) {
 8003868:	ed97 7a01 	vldr	s14, [r7, #4]
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <setTempCh2Set+0x48>)
 800386e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= TempCh2Set.valueAbsMax.val_float ||
 8003872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387a:	d801      	bhi.n	8003880 <setTempCh2Set+0x34>
       return false;
 800387c:	2300      	movs	r3, #0
 800387e:	e003      	b.n	8003888 <setTempCh2Set+0x3c>
    } else {
    	TempCh2Set.value = value;
 8003880:	4a04      	ldr	r2, [pc, #16]	; (8003894 <setTempCh2Set+0x48>)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8003886:	2301      	movs	r3, #1
    }
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	20000e6c 	.word	0x20000e6c

08003898 <getTempCh2Set>:
valueTypes getTempCh2Set(void) {
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
    return TempCh2Set.value;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <getTempCh2Set+0x14>)
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000e6c 	.word	0x20000e6c

080038b0 <setI1Set>:

bool setI1Set(valueTypes value) {
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I1Set.valueAbsMax.val_float ||
 80038b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80038bc:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <setI1Set+0x48>)
 80038be:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80038c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ca:	da09      	bge.n	80038e0 <setI1Set+0x30>
       value.val_float <= I1Set.valueAbsMin.val_float) {
 80038cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80038d0:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <setI1Set+0x48>)
 80038d2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I1Set.valueAbsMax.val_float ||
 80038d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038de:	d801      	bhi.n	80038e4 <setI1Set+0x34>
       return false;
 80038e0:	2300      	movs	r3, #0
 80038e2:	e003      	b.n	80038ec <setI1Set+0x3c>
    } else {
       I1Set.value = value;
 80038e4:	4a04      	ldr	r2, [pc, #16]	; (80038f8 <setI1Set+0x48>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6313      	str	r3, [r2, #48]	; 0x30
       return true;
 80038ea:	2301      	movs	r3, #1
    }
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	20000ea8 	.word	0x20000ea8

080038fc <getI1Set>:
valueTypes getI1Set(void) {
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
    return I1Set.value;
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <getI1Set+0x14>)
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003904:	4618      	mov	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20000ea8 	.word	0x20000ea8

08003914 <setI2Set>:
bool setI2Set(valueTypes value) {
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I2Set.valueAbsMax.val_float ||
 800391c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003920:	4b0e      	ldr	r3, [pc, #56]	; (800395c <setI2Set+0x48>)
 8003922:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003926:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800392a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392e:	da09      	bge.n	8003944 <setI2Set+0x30>
       value.val_float <= I2Set.valueAbsMin.val_float) {
 8003930:	ed97 7a01 	vldr	s14, [r7, #4]
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <setI2Set+0x48>)
 8003936:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I2Set.valueAbsMax.val_float ||
 800393a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800393e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003942:	d801      	bhi.n	8003948 <setI2Set+0x34>
       return false;
 8003944:	2300      	movs	r3, #0
 8003946:	e003      	b.n	8003950 <setI2Set+0x3c>
    } else {
       I2Set.value = value;
 8003948:	4a04      	ldr	r2, [pc, #16]	; (800395c <setI2Set+0x48>)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6313      	str	r3, [r2, #48]	; 0x30
       return true;
 800394e:	2301      	movs	r3, #1
    }
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	20000ee4 	.word	0x20000ee4

08003960 <getI2Set>:
valueTypes getI2Set(void) {
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
    return I2Set.value;
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <getI2Set+0x14>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000ee4 	.word	0x20000ee4

08003978 <setGate1A_OnOff>:

bool setGate1A_OnOff(valueTypes value) {
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	Gate1A_OnOff.value = value;
 8003980:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <setGate1A_OnOff+0x2c>)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6313      	str	r3, [r2, #48]	; 0x30
	HAL_GPIO_WritePin(Gates1_A_Dis_GPIO_Port, Gates1_A_Dis_Pin, !value.val_bool);
 8003986:	793b      	ldrb	r3, [r7, #4]
 8003988:	f083 0301 	eor.w	r3, r3, #1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	461a      	mov	r2, r3
 8003990:	2101      	movs	r1, #1
 8003992:	4805      	ldr	r0, [pc, #20]	; (80039a8 <setGate1A_OnOff+0x30>)
 8003994:	f004 fe56 	bl	8008644 <HAL_GPIO_WritePin>
    return true;
 8003998:	2301      	movs	r3, #1
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000f20 	.word	0x20000f20
 80039a8:	40020400 	.word	0x40020400

080039ac <getGate1A_OnOff>:
valueTypes getGate1A_OnOff(void) {
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
    return Gate1A_OnOff.value;
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <getGate1A_OnOff+0x14>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000f20 	.word	0x20000f20

080039c4 <setGate1B_OnOff>:
bool setGate1B_OnOff(valueTypes value) {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Gates1_B_Dis_GPIO_Port, Gates1_B_Dis_Pin, !value.val_bool);
 80039cc:	793b      	ldrb	r3, [r7, #4]
 80039ce:	f083 0301 	eor.w	r3, r3, #1
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	461a      	mov	r2, r3
 80039d6:	2102      	movs	r1, #2
 80039d8:	4805      	ldr	r0, [pc, #20]	; (80039f0 <setGate1B_OnOff+0x2c>)
 80039da:	f004 fe33 	bl	8008644 <HAL_GPIO_WritePin>
    Gate1B_OnOff.value = value;
 80039de:	4a05      	ldr	r2, [pc, #20]	; (80039f4 <setGate1B_OnOff+0x30>)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80039e4:	2301      	movs	r3, #1
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40020400 	.word	0x40020400
 80039f4:	20000f5c 	.word	0x20000f5c

080039f8 <getGate1B_OnOff>:
valueTypes getGate1B_OnOff(void) {
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
    return Gate1B_OnOff.value;
 80039fc:	4b03      	ldr	r3, [pc, #12]	; (8003a0c <getGate1B_OnOff+0x14>)
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000f5c 	.word	0x20000f5c

08003a10 <setGate2A_OnOff>:
bool setGate2A_OnOff(valueTypes value) {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Gates2_A_Dis_GPIO_Port, Gates2_A_Dis_Pin, !value.val_bool);
 8003a18:	793b      	ldrb	r3, [r7, #4]
 8003a1a:	f083 0301 	eor.w	r3, r3, #1
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	2104      	movs	r1, #4
 8003a24:	4805      	ldr	r0, [pc, #20]	; (8003a3c <setGate2A_OnOff+0x2c>)
 8003a26:	f004 fe0d 	bl	8008644 <HAL_GPIO_WritePin>
	Gate2A_OnOff.value = value;
 8003a2a:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <setGate2A_OnOff+0x30>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8003a30:	2301      	movs	r3, #1
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40020400 	.word	0x40020400
 8003a40:	20000f98 	.word	0x20000f98

08003a44 <getGate2A_OnOff>:
valueTypes getGate2A_OnOff(void) {
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
    return Gate2A_OnOff.value;
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <getGate2A_OnOff+0x14>)
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	20000f98 	.word	0x20000f98

08003a5c <setGate2B_OnOff>:
bool setGate2B_OnOff(valueTypes value) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Gates2_B_Dis_GPIO_Port, Gates2_B_Dis_Pin, !value.val_bool);
 8003a64:	793b      	ldrb	r3, [r7, #4]
 8003a66:	f083 0301 	eor.w	r3, r3, #1
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	2108      	movs	r1, #8
 8003a70:	4805      	ldr	r0, [pc, #20]	; (8003a88 <setGate2B_OnOff+0x2c>)
 8003a72:	f004 fde7 	bl	8008644 <HAL_GPIO_WritePin>
    Gate2B_OnOff.value = value;
 8003a76:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <setGate2B_OnOff+0x30>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8003a7c:	2301      	movs	r3, #1
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40020400 	.word	0x40020400
 8003a8c:	20000fd4 	.word	0x20000fd4

08003a90 <getGate2B_OnOff>:
valueTypes getGate2B_OnOff(void) {
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
    return Gate2B_OnOff.value;
 8003a94:	4b03      	ldr	r3, [pc, #12]	; (8003aa4 <getGate2B_OnOff+0x14>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000fd4 	.word	0x20000fd4

08003aa8 <setGateH1A>:

bool setGateH1A(valueTypes value) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	GateH1A.value = value;
 8003ab0:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <setGateH1A+0x2c>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6313      	str	r3, [r2, #48]	; 0x30
	HAL_GPIO_WritePin(GateH1_A_GPIO_Port, GateH1_A_Pin, !value.val_bool);
 8003ab6:	793b      	ldrb	r3, [r7, #4]
 8003ab8:	f083 0301 	eor.w	r3, r3, #1
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	2110      	movs	r1, #16
 8003ac2:	4805      	ldr	r0, [pc, #20]	; (8003ad8 <setGateH1A+0x30>)
 8003ac4:	f004 fdbe 	bl	8008644 <HAL_GPIO_WritePin>
    return true;
 8003ac8:	2301      	movs	r3, #1
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20001010 	.word	0x20001010
 8003ad8:	40020800 	.word	0x40020800

08003adc <getGateH1A>:
valueTypes getGateH1A(void) {
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
    return GateH1A.value;
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <getGateH1A+0x14>)
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20001010 	.word	0x20001010

08003af4 <setGateH1B>:
bool setGateH1B(valueTypes value) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
    GateH1B.value = value;
 8003afc:	4a08      	ldr	r2, [pc, #32]	; (8003b20 <setGateH1B+0x2c>)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6313      	str	r3, [r2, #48]	; 0x30
    HAL_GPIO_WritePin(GateH1_B_GPIO_Port, GateH1_B_Pin, !value.val_bool);
 8003b02:	793b      	ldrb	r3, [r7, #4]
 8003b04:	f083 0301 	eor.w	r3, r3, #1
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2120      	movs	r1, #32
 8003b0e:	4805      	ldr	r0, [pc, #20]	; (8003b24 <setGateH1B+0x30>)
 8003b10:	f004 fd98 	bl	8008644 <HAL_GPIO_WritePin>
    return true;
 8003b14:	2301      	movs	r3, #1
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	2000104c 	.word	0x2000104c
 8003b24:	40020800 	.word	0x40020800

08003b28 <getGateH1B>:
valueTypes getGateH1B(void) {
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
    return GateH1B.value;
 8003b2c:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <getGateH1B+0x14>)
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	2000104c 	.word	0x2000104c

08003b40 <setGateH2A>:
bool setGateH2A(valueTypes value) {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
	GateH2A.value = value;
 8003b48:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <setGateH2A+0x2c>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6313      	str	r3, [r2, #48]	; 0x30
	HAL_GPIO_WritePin(GateH2_A_GPIO_Port, GateH2_A_Pin, !value.val_bool);
 8003b4e:	793b      	ldrb	r3, [r7, #4]
 8003b50:	f083 0301 	eor.w	r3, r3, #1
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b5c:	4804      	ldr	r0, [pc, #16]	; (8003b70 <setGateH2A+0x30>)
 8003b5e:	f004 fd71 	bl	8008644 <HAL_GPIO_WritePin>
    return true;
 8003b62:	2301      	movs	r3, #1
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20001088 	.word	0x20001088
 8003b70:	40020c00 	.word	0x40020c00

08003b74 <getGateH2A>:
valueTypes getGateH2A(void) {
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
    return GateH2A.value;
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <getGateH2A+0x14>)
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20001088 	.word	0x20001088

08003b8c <setGateH2B>:
bool setGateH2B(valueTypes value) {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
    GateH2B.value = value;
 8003b94:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <setGateH2B+0x2c>)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6313      	str	r3, [r2, #48]	; 0x30
    HAL_GPIO_WritePin(GateH2_B_GPIO_Port, GateH2_B_Pin, !value.val_bool);
 8003b9a:	793b      	ldrb	r3, [r7, #4]
 8003b9c:	f083 0301 	eor.w	r3, r3, #1
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ba8:	4804      	ldr	r0, [pc, #16]	; (8003bbc <setGateH2B+0x30>)
 8003baa:	f004 fd4b 	bl	8008644 <HAL_GPIO_WritePin>
    return true;
 8003bae:	2301      	movs	r3, #1
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	200010c4 	.word	0x200010c4
 8003bbc:	40020c00 	.word	0x40020c00

08003bc0 <getGateH2B>:
valueTypes getGateH2B(void) {
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
    return GateH2B.value;
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <getGateH2B+0x14>)
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	200010c4 	.word	0x200010c4

08003bd8 <setPWM_CH1>:

bool setPWM_CH1(valueTypes value) {
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
    if(value.val_float >= PWM_CH1.valueAbsMax.val_float ||
 8003be0:	ed97 7a01 	vldr	s14, [r7, #4]
 8003be4:	4b0e      	ldr	r3, [pc, #56]	; (8003c20 <setPWM_CH1+0x48>)
 8003be6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003bea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf2:	da09      	bge.n	8003c08 <setPWM_CH1+0x30>
       value.val_float <= PWM_CH1.valueAbsMin.val_float) {
 8003bf4:	ed97 7a01 	vldr	s14, [r7, #4]
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <setPWM_CH1+0x48>)
 8003bfa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= PWM_CH1.valueAbsMax.val_float ||
 8003bfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c06:	d801      	bhi.n	8003c0c <setPWM_CH1+0x34>
       return false;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e003      	b.n	8003c14 <setPWM_CH1+0x3c>
    } else {
        PWM_CH1.value = value;
 8003c0c:	4a04      	ldr	r2, [pc, #16]	; (8003c20 <setPWM_CH1+0x48>)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8003c12:	2301      	movs	r3, #1
    }
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	20001100 	.word	0x20001100

08003c24 <getPWM_CH1>:
valueTypes getPWM_CH1(void) {
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
    return PWM_CH1.value;
 8003c28:	4b03      	ldr	r3, [pc, #12]	; (8003c38 <getPWM_CH1+0x14>)
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	20001100 	.word	0x20001100

08003c3c <setPWM_CH2>:

bool setPWM_CH2(valueTypes value) {
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
    if(value.val_float >= PWM_CH2.valueAbsMax.val_float ||
 8003c44:	ed97 7a01 	vldr	s14, [r7, #4]
 8003c48:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <setPWM_CH2+0x48>)
 8003c4a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003c4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c56:	da09      	bge.n	8003c6c <setPWM_CH2+0x30>
       value.val_float <= PWM_CH2.valueAbsMin.val_float) {
 8003c58:	ed97 7a01 	vldr	s14, [r7, #4]
 8003c5c:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <setPWM_CH2+0x48>)
 8003c5e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= PWM_CH2.valueAbsMax.val_float ||
 8003c62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6a:	d801      	bhi.n	8003c70 <setPWM_CH2+0x34>
       return false;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	e003      	b.n	8003c78 <setPWM_CH2+0x3c>
    } else {
    	PWM_CH2.value = value;
 8003c70:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <setPWM_CH2+0x48>)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8003c76:	2301      	movs	r3, #1
    }
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	2000113c 	.word	0x2000113c

08003c88 <getPWM_CH2>:
valueTypes getPWM_CH2(void) {
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
    return PWM_CH2.value;
 8003c8c:	4b03      	ldr	r3, [pc, #12]	; (8003c9c <getPWM_CH2+0x14>)
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	2000113c 	.word	0x2000113c

08003ca0 <setCH1_Polarity>:

bool setCH1_Polarity(valueTypes value) {
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	CH1_Polarity.value = value;
 8003ca8:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <setCH1_Polarity+0x1c>)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6313      	str	r3, [r2, #48]	; 0x30
	return true;
 8003cae:	2301      	movs	r3, #1
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	20001178 	.word	0x20001178

08003cc0 <getCH1_Polarity>:

valueTypes getCH1_Polarity() {
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
	return CH1_Polarity.value;
 8003cc4:	4b03      	ldr	r3, [pc, #12]	; (8003cd4 <getCH1_Polarity+0x14>)
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	20001178 	.word	0x20001178

08003cd8 <setCH2_Polarity>:

bool setCH2_Polarity(valueTypes value) {
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	CH2_Polarity.value = value;
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <setCH2_Polarity+0x1c>)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6313      	str	r3, [r2, #48]	; 0x30
	return true;
 8003ce6:	2301      	movs	r3, #1
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	200011b4 	.word	0x200011b4

08003cf8 <getCH2_Polarity>:

valueTypes getCH2_Polarity() {
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
	return CH2_Polarity.value;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <getCH2_Polarity+0x14>)
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	200011b4 	.word	0x200011b4

08003d10 <setFreq>:

bool setFreq(valueTypes value) {
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
   Freq.value = value;
 8003d18:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <setFreq+0x1c>)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6313      	str	r3, [r2, #48]	; 0x30
   return true;
 8003d1e:	2301      	movs	r3, #1
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	200011f0 	.word	0x200011f0

08003d30 <getFreq>:
valueTypes getFreq() {
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
    return Freq.value;
 8003d34:	4b03      	ldr	r3, [pc, #12]	; (8003d44 <getFreq+0x14>)
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	200011f0 	.word	0x200011f0

08003d48 <setFreqSet>:

bool setFreqSet(valueTypes value) {
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
    if(value.val_float >= FreqSet.valueAbsMax.val_float ||
 8003d50:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d54:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <setFreqSet+0x48>)
 8003d56:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003d5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d62:	da09      	bge.n	8003d78 <setFreqSet+0x30>
       value.val_float <= FreqSet.valueAbsMin.val_float) {
 8003d64:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d68:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <setFreqSet+0x48>)
 8003d6a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= FreqSet.valueAbsMax.val_float ||
 8003d6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d76:	d801      	bhi.n	8003d7c <setFreqSet+0x34>
       return false;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e003      	b.n	8003d84 <setFreqSet+0x3c>
    } else {
    	FreqSet.value = value;
 8003d7c:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <setFreqSet+0x48>)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8003d82:	2301      	movs	r3, #1
    }
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	2000122c 	.word	0x2000122c

08003d94 <getFreqSet>:
valueTypes getFreqSet(void) {
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
    return FreqSet.value;
 8003d98:	4b03      	ldr	r3, [pc, #12]	; (8003da8 <getFreqSet+0x14>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	2000122c 	.word	0x2000122c

08003dac <commandParamList>:


void commandParamList() {
 8003dac:	b5b0      	push	{r4, r5, r7, lr}
 8003dae:	b0a6      	sub	sp, #152	; 0x98
 8003db0:	af04      	add	r7, sp, #16
	for(int i = 0; i < PARAMS_COUNT; i++) {
 8003db2:	2300      	movs	r3, #0
 8003db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003db8:	e055      	b.n	8003e66 <commandParamList+0xba>
		if(params[i] == 0) {
 8003dba:	4a2f      	ldr	r2, [pc, #188]	; (8003e78 <commandParamList+0xcc>)
 8003dbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d048      	beq.n	8003e5a <commandParamList+0xae>
			continue;
		} else {
			char buffer[128];
			sprintf((char*)buffer, "%u:[%s:%s:%s]:%s",
					params[i]->commandNumber,
 8003dc8:	4a2b      	ldr	r2, [pc, #172]	; (8003e78 <commandParamList+0xcc>)
 8003dca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd2:	881b      	ldrh	r3, [r3, #0]
			sprintf((char*)buffer, "%u:[%s:%s:%s]:%s",
 8003dd4:	461d      	mov	r5, r3
					params[i]->isCommand ? "COMMAND" : typeNames[params[i]->type],
 8003dd6:	4a28      	ldr	r2, [pc, #160]	; (8003e78 <commandParamList+0xcc>)
 8003dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
			sprintf((char*)buffer, "%u:[%s:%s:%s]:%s",
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <commandParamList+0x40>
 8003de8:	4b24      	ldr	r3, [pc, #144]	; (8003e7c <commandParamList+0xd0>)
 8003dea:	e00a      	b.n	8003e02 <commandParamList+0x56>
					params[i]->isCommand ? "COMMAND" : typeNames[params[i]->type],
 8003dec:	4a22      	ldr	r2, [pc, #136]	; (8003e78 <commandParamList+0xcc>)
 8003dee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dfa:	461a      	mov	r2, r3
			sprintf((char*)buffer, "%u:[%s:%s:%s]:%s",
 8003dfc:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <commandParamList+0xd4>)
 8003dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
					params[i]->readOnly ? "R/O" : "",
 8003e02:	491d      	ldr	r1, [pc, #116]	; (8003e78 <commandParamList+0xcc>)
 8003e04:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003e08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003e0c:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
			sprintf((char*)buffer, "%u:[%s:%s:%s]:%s",
 8003e10:	2a00      	cmp	r2, #0
 8003e12:	d001      	beq.n	8003e18 <commandParamList+0x6c>
 8003e14:	4a1b      	ldr	r2, [pc, #108]	; (8003e84 <commandParamList+0xd8>)
 8003e16:	e000      	b.n	8003e1a <commandParamList+0x6e>
 8003e18:	4a1b      	ldr	r2, [pc, #108]	; (8003e88 <commandParamList+0xdc>)
					params[i]->isFlash ? "F" : "",
 8003e1a:	4817      	ldr	r0, [pc, #92]	; (8003e78 <commandParamList+0xcc>)
 8003e1c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003e20:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8003e24:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
			sprintf((char*)buffer, "%u:[%s:%s:%s]:%s",
 8003e28:	2900      	cmp	r1, #0
 8003e2a:	d001      	beq.n	8003e30 <commandParamList+0x84>
 8003e2c:	4917      	ldr	r1, [pc, #92]	; (8003e8c <commandParamList+0xe0>)
 8003e2e:	e000      	b.n	8003e32 <commandParamList+0x86>
 8003e30:	4915      	ldr	r1, [pc, #84]	; (8003e88 <commandParamList+0xdc>)
					params[i]->commandDescription);
 8003e32:	4c11      	ldr	r4, [pc, #68]	; (8003e78 <commandParamList+0xcc>)
 8003e34:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8003e38:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003e3c:	3002      	adds	r0, #2
			sprintf((char*)buffer, "%u:[%s:%s:%s]:%s",
 8003e3e:	1d3c      	adds	r4, r7, #4
 8003e40:	9002      	str	r0, [sp, #8]
 8003e42:	9101      	str	r1, [sp, #4]
 8003e44:	9200      	str	r2, [sp, #0]
 8003e46:	462a      	mov	r2, r5
 8003e48:	4911      	ldr	r1, [pc, #68]	; (8003e90 <commandParamList+0xe4>)
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f008 fbee 	bl	800c62c <siprintf>
			UARTtransmit((char*)buffer);
 8003e50:	1d3b      	adds	r3, r7, #4
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 f8b4 	bl	8003fc0 <UARTtransmit>
 8003e58:	e000      	b.n	8003e5c <commandParamList+0xb0>
			continue;
 8003e5a:	bf00      	nop
	for(int i = 0; i < PARAMS_COUNT; i++) {
 8003e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e60:	3301      	adds	r3, #1
 8003e62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e6a:	2b63      	cmp	r3, #99	; 0x63
 8003e6c:	dda5      	ble.n	8003dba <commandParamList+0xe>
		}
	}
	return;
 8003e6e:	bf00      	nop
}
 8003e70:	3788      	adds	r7, #136	; 0x88
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bdb0      	pop	{r4, r5, r7, pc}
 8003e76:	bf00      	nop
 8003e78:	200015fc 	.word	0x200015fc
 8003e7c:	08010768 	.word	0x08010768
 8003e80:	20000000 	.word	0x20000000
 8003e84:	08010770 	.word	0x08010770
 8003e88:	08010774 	.word	0x08010774
 8003e8c:	08010778 	.word	0x08010778
 8003e90:	0801077c 	.word	0x0801077c

08003e94 <commandSaveFlash>:

void commandSaveFlash() {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
	SaveToFlash();
 8003e98:	f000 fff8 	bl	8004e8c <SaveToFlash>
	UARTtransmit("Flash was succesfully saved");
 8003e9c:	4802      	ldr	r0, [pc, #8]	; (8003ea8 <commandSaveFlash+0x14>)
 8003e9e:	f000 f88f 	bl	8003fc0 <UARTtransmit>
}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	08010790 	.word	0x08010790

08003eac <str_split>:
uint16_t TXtimeout = 1000;
uint8_t RXbufferChar[1];
uint16_t RXbufferElem = 0;

char** str_split(char* a_str, const char a_delim)
{
 8003eac:	b590      	push	{r4, r7, lr}
 8003eae:	b08b      	sub	sp, #44	; 0x2c
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	70fb      	strb	r3, [r7, #3]
    char** result    = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	613b      	str	r3, [r7, #16]
    size_t count     = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
    char* tmp        = a_str;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	623b      	str	r3, [r7, #32]
    char* last_comma = 0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
    char delim[2];
    delim[0] = a_delim;
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	733b      	strb	r3, [r7, #12]
    delim[1] = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	737b      	strb	r3, [r7, #13]

    /* Count how many elements will be extracted. */
    while (*tmp)
 8003ed0:	e00c      	b.n	8003eec <str_split+0x40>
    {
        if (a_delim == *tmp)
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	78fa      	ldrb	r2, [r7, #3]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d104      	bne.n	8003ee6 <str_split+0x3a>
        {
            count++;
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	3301      	adds	r3, #1
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
            last_comma = tmp;
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	61fb      	str	r3, [r7, #28]
        }
        tmp++;
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	623b      	str	r3, [r7, #32]
    while (*tmp)
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1ee      	bne.n	8003ed2 <str_split+0x26>
    }

    /* Add space for trailing token. */
    count += last_comma < (a_str + strlen(a_str) - 1);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7fc f975 	bl	80001e4 <strlen>
 8003efa:	4603      	mov	r3, r0
 8003efc:	3b01      	subs	r3, #1
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	4413      	add	r3, r2
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	bf34      	ite	cc
 8003f08:	2301      	movcc	r3, #1
 8003f0a:	2300      	movcs	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	4413      	add	r3, r2
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24

    /* Add space for terminating null string so caller
       knows where the list of returned strings ends. */
    count++;
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	3301      	adds	r3, #1
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24

    result = malloc(sizeof(char*) * count);
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f007 fa8b 	bl	800b43c <malloc>
 8003f26:	4603      	mov	r3, r0
 8003f28:	613b      	str	r3, [r7, #16]

    if (result)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d039      	beq.n	8003fa4 <str_split+0xf8>
    {
        size_t idx  = 0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	61bb      	str	r3, [r7, #24]
        char* token = strtok(a_str, delim);
 8003f34:	f107 030c 	add.w	r3, r7, #12
 8003f38:	4619      	mov	r1, r3
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f009 fa50 	bl	800d3e0 <strtok>
 8003f40:	6178      	str	r0, [r7, #20]

        while (token)
 8003f42:	e01b      	b.n	8003f7c <str_split+0xd0>
        {
            assert(idx < count);
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d305      	bcc.n	8003f58 <str_split+0xac>
 8003f4c:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <str_split+0x104>)
 8003f4e:	4a19      	ldr	r2, [pc, #100]	; (8003fb4 <str_split+0x108>)
 8003f50:	2137      	movs	r1, #55	; 0x37
 8003f52:	4819      	ldr	r0, [pc, #100]	; (8003fb8 <str_split+0x10c>)
 8003f54:	f007 fa18 	bl	800b388 <__assert_func>
            *(result + idx++) = strdup(token);
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	61ba      	str	r2, [r7, #24]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	18d4      	adds	r4, r2, r3
 8003f64:	6978      	ldr	r0, [r7, #20]
 8003f66:	f008 fbf3 	bl	800c750 <strdup>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	6023      	str	r3, [r4, #0]
            token = strtok(0, delim);
 8003f6e:	f107 030c 	add.w	r3, r7, #12
 8003f72:	4619      	mov	r1, r3
 8003f74:	2000      	movs	r0, #0
 8003f76:	f009 fa33 	bl	800d3e0 <strtok>
 8003f7a:	6178      	str	r0, [r7, #20]
        while (token)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e0      	bne.n	8003f44 <str_split+0x98>
        }
        assert(idx == count - 1);
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	3b01      	subs	r3, #1
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d005      	beq.n	8003f98 <str_split+0xec>
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <str_split+0x110>)
 8003f8e:	4a09      	ldr	r2, [pc, #36]	; (8003fb4 <str_split+0x108>)
 8003f90:	213b      	movs	r1, #59	; 0x3b
 8003f92:	4809      	ldr	r0, [pc, #36]	; (8003fb8 <str_split+0x10c>)
 8003f94:	f007 f9f8 	bl	800b388 <__assert_func>
        *(result + idx) = 0;
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
    }

    return result;
 8003fa4:	693b      	ldr	r3, [r7, #16]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	372c      	adds	r7, #44	; 0x2c
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd90      	pop	{r4, r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	080107ac 	.word	0x080107ac
 8003fb4:	08010930 	.word	0x08010930
 8003fb8:	080107b8 	.word	0x080107b8
 8003fbc:	080107d8 	.word	0x080107d8

08003fc0 <UARTtransmit>:

void UARTtransmit(char* string) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	uint16_t size = sprintf((char*)TXbuffer, "%s%c",string, EOL);
 8003fc8:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <UARTtransmit+0x30>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	4909      	ldr	r1, [pc, #36]	; (8003ff4 <UARTtransmit+0x34>)
 8003fd0:	4809      	ldr	r0, [pc, #36]	; (8003ff8 <UARTtransmit+0x38>)
 8003fd2:	f008 fb2b 	bl	800c62c <siprintf>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, TXbuffer, size, TXtimeout);
 8003fda:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <UARTtransmit+0x3c>)
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	89fa      	ldrh	r2, [r7, #14]
 8003fe0:	4905      	ldr	r1, [pc, #20]	; (8003ff8 <UARTtransmit+0x38>)
 8003fe2:	4807      	ldr	r0, [pc, #28]	; (8004000 <UARTtransmit+0x40>)
 8003fe4:	f006 f9a5 	bl	800a332 <HAL_UART_Transmit>
}
 8003fe8:	bf00      	nop
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	200012e1 	.word	0x200012e1
 8003ff4:	080107ec 	.word	0x080107ec
 8003ff8:	20001d74 	.word	0x20001d74
 8003ffc:	200012e2 	.word	0x200012e2
 8004000:	20002398 	.word	0x20002398

08004004 <UARTget>:

bool UARTget(uint16_t com) {
 8004004:	b590      	push	{r4, r7, lr}
 8004006:	b087      	sub	sp, #28
 8004008:	af02      	add	r7, sp, #8
 800400a:	4603      	mov	r3, r0
 800400c:	80fb      	strh	r3, [r7, #6]
	if(params[paramTable[com]-1]->get) {
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	4a4f      	ldr	r2, [pc, #316]	; (8004150 <UARTget+0x14c>)
 8004012:	5cd3      	ldrb	r3, [r2, r3]
 8004014:	3b01      	subs	r3, #1
 8004016:	4a4f      	ldr	r2, [pc, #316]	; (8004154 <UARTget+0x150>)
 8004018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 808b 	beq.w	800413a <UARTget+0x136>
		valueTypes value = params[paramTable[com]-1]->get();
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	4a4a      	ldr	r2, [pc, #296]	; (8004150 <UARTget+0x14c>)
 8004028:	5cd3      	ldrb	r3, [r2, r3]
 800402a:	3b01      	subs	r3, #1
 800402c:	4a49      	ldr	r2, [pc, #292]	; (8004154 <UARTget+0x150>)
 800402e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	4798      	blx	r3
 8004036:	4603      	mov	r3, r0
 8004038:	60fb      	str	r3, [r7, #12]
		switch(params[paramTable[com]-1]->type) {
 800403a:	88fb      	ldrh	r3, [r7, #6]
 800403c:	4a44      	ldr	r2, [pc, #272]	; (8004150 <UARTget+0x14c>)
 800403e:	5cd3      	ldrb	r3, [r2, r3]
 8004040:	3b01      	subs	r3, #1
 8004042:	4a44      	ldr	r2, [pc, #272]	; (8004154 <UARTget+0x150>)
 8004044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800404c:	2b07      	cmp	r3, #7
 800404e:	d872      	bhi.n	8004136 <UARTget+0x132>
 8004050:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <UARTget+0x54>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	08004079 	.word	0x08004079
 800405c:	0800408d 	.word	0x0800408d
 8004060:	080040a1 	.word	0x080040a1
 8004064:	080040b5 	.word	0x080040b5
 8004068:	080040cb 	.word	0x080040cb
 800406c:	080040e1 	.word	0x080040e1
 8004070:	080040f5 	.word	0x080040f5
 8004074:	08004119 	.word	0x08004119
		case UINT8_T:
			sprintf((char*)TXbuffer, "$%u:%u",com, value.val_uint8_t);
 8004078:	88fa      	ldrh	r2, [r7, #6]
 800407a:	7b3b      	ldrb	r3, [r7, #12]
 800407c:	4936      	ldr	r1, [pc, #216]	; (8004158 <UARTget+0x154>)
 800407e:	4837      	ldr	r0, [pc, #220]	; (800415c <UARTget+0x158>)
 8004080:	f008 fad4 	bl	800c62c <siprintf>
			UARTtransmit((char*)TXbuffer);
 8004084:	4835      	ldr	r0, [pc, #212]	; (800415c <UARTget+0x158>)
 8004086:	f7ff ff9b 	bl	8003fc0 <UARTtransmit>
			break;
 800408a:	e054      	b.n	8004136 <UARTget+0x132>
		case UINT16_T:
				sprintf((char*)TXbuffer, "$%u:%u",com,value.val_uint16_t);
 800408c:	88fa      	ldrh	r2, [r7, #6]
 800408e:	89bb      	ldrh	r3, [r7, #12]
 8004090:	4931      	ldr	r1, [pc, #196]	; (8004158 <UARTget+0x154>)
 8004092:	4832      	ldr	r0, [pc, #200]	; (800415c <UARTget+0x158>)
 8004094:	f008 faca 	bl	800c62c <siprintf>
				UARTtransmit((char*)TXbuffer);
 8004098:	4830      	ldr	r0, [pc, #192]	; (800415c <UARTget+0x158>)
 800409a:	f7ff ff91 	bl	8003fc0 <UARTtransmit>
				break;
 800409e:	e04a      	b.n	8004136 <UARTget+0x132>
		case UINT32_T:
				sprintf((char*)TXbuffer, "$%u:%lu",com, value.val_uint32_t);
 80040a0:	88fa      	ldrh	r2, [r7, #6]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	492e      	ldr	r1, [pc, #184]	; (8004160 <UARTget+0x15c>)
 80040a6:	482d      	ldr	r0, [pc, #180]	; (800415c <UARTget+0x158>)
 80040a8:	f008 fac0 	bl	800c62c <siprintf>
				UARTtransmit((char*)TXbuffer);
 80040ac:	482b      	ldr	r0, [pc, #172]	; (800415c <UARTget+0x158>)
 80040ae:	f7ff ff87 	bl	8003fc0 <UARTtransmit>
				break;
 80040b2:	e040      	b.n	8004136 <UARTget+0x132>
		case INT8_T:
				sprintf((char*)TXbuffer, "$%u:%d",com, value.val_int8_t);
 80040b4:	88fa      	ldrh	r2, [r7, #6]
 80040b6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80040ba:	492a      	ldr	r1, [pc, #168]	; (8004164 <UARTget+0x160>)
 80040bc:	4827      	ldr	r0, [pc, #156]	; (800415c <UARTget+0x158>)
 80040be:	f008 fab5 	bl	800c62c <siprintf>
				UARTtransmit((char*)TXbuffer);
 80040c2:	4826      	ldr	r0, [pc, #152]	; (800415c <UARTget+0x158>)
 80040c4:	f7ff ff7c 	bl	8003fc0 <UARTtransmit>
				break;
 80040c8:	e035      	b.n	8004136 <UARTget+0x132>
		case INT16_T:
				sprintf((char*)TXbuffer, "$%u:%d",com, value.val_int16_t);
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80040d0:	4924      	ldr	r1, [pc, #144]	; (8004164 <UARTget+0x160>)
 80040d2:	4822      	ldr	r0, [pc, #136]	; (800415c <UARTget+0x158>)
 80040d4:	f008 faaa 	bl	800c62c <siprintf>
				UARTtransmit((char*)TXbuffer);
 80040d8:	4820      	ldr	r0, [pc, #128]	; (800415c <UARTget+0x158>)
 80040da:	f7ff ff71 	bl	8003fc0 <UARTtransmit>
				break;
 80040de:	e02a      	b.n	8004136 <UARTget+0x132>
		case INT32_T:
				sprintf((char*)TXbuffer, "$%u:%ld",com, value.val_int32_t);
 80040e0:	88fa      	ldrh	r2, [r7, #6]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4920      	ldr	r1, [pc, #128]	; (8004168 <UARTget+0x164>)
 80040e6:	481d      	ldr	r0, [pc, #116]	; (800415c <UARTget+0x158>)
 80040e8:	f008 faa0 	bl	800c62c <siprintf>
				UARTtransmit((char*)TXbuffer);
 80040ec:	481b      	ldr	r0, [pc, #108]	; (800415c <UARTget+0x158>)
 80040ee:	f7ff ff67 	bl	8003fc0 <UARTtransmit>
				break;
 80040f2:	e020      	b.n	8004136 <UARTget+0x132>
		case FLOAT:
				sprintf((char*)TXbuffer, "$%u:%f",com, value.val_float);
 80040f4:	88fc      	ldrh	r4, [r7, #6]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fc fa35 	bl	8000568 <__aeabi_f2d>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	e9cd 2300 	strd	r2, r3, [sp]
 8004106:	4622      	mov	r2, r4
 8004108:	4918      	ldr	r1, [pc, #96]	; (800416c <UARTget+0x168>)
 800410a:	4814      	ldr	r0, [pc, #80]	; (800415c <UARTget+0x158>)
 800410c:	f008 fa8e 	bl	800c62c <siprintf>
				UARTtransmit((char*)TXbuffer);
 8004110:	4812      	ldr	r0, [pc, #72]	; (800415c <UARTget+0x158>)
 8004112:	f7ff ff55 	bl	8003fc0 <UARTtransmit>
				break;
 8004116:	e00e      	b.n	8004136 <UARTget+0x132>
		case BOOL:
				sprintf((char*)TXbuffer, "$%u:%s",com, value.val_bool ? "true" : "false");
 8004118:	88fa      	ldrh	r2, [r7, #6]
 800411a:	7b3b      	ldrb	r3, [r7, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <UARTget+0x120>
 8004120:	4b13      	ldr	r3, [pc, #76]	; (8004170 <UARTget+0x16c>)
 8004122:	e000      	b.n	8004126 <UARTget+0x122>
 8004124:	4b13      	ldr	r3, [pc, #76]	; (8004174 <UARTget+0x170>)
 8004126:	4914      	ldr	r1, [pc, #80]	; (8004178 <UARTget+0x174>)
 8004128:	480c      	ldr	r0, [pc, #48]	; (800415c <UARTget+0x158>)
 800412a:	f008 fa7f 	bl	800c62c <siprintf>
				UARTtransmit((char*)TXbuffer);
 800412e:	480b      	ldr	r0, [pc, #44]	; (800415c <UARTget+0x158>)
 8004130:	f7ff ff46 	bl	8003fc0 <UARTtransmit>
				break;
 8004134:	bf00      	nop
		}
		return true;
 8004136:	2301      	movs	r3, #1
 8004138:	e005      	b.n	8004146 <UARTget+0x142>
	}
	else {
		UARTtransmitNum(com, "Error\%no get function");
 800413a:	88fb      	ldrh	r3, [r7, #6]
 800413c:	490f      	ldr	r1, [pc, #60]	; (800417c <UARTget+0x178>)
 800413e:	4618      	mov	r0, r3
 8004140:	f000 f8ec 	bl	800431c <UARTtransmitNum>
		return false;
 8004144:	2300      	movs	r3, #0
	}
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bd90      	pop	{r4, r7, pc}
 800414e:	bf00      	nop
 8004150:	2000178c 	.word	0x2000178c
 8004154:	200015fc 	.word	0x200015fc
 8004158:	080107f4 	.word	0x080107f4
 800415c:	20001d74 	.word	0x20001d74
 8004160:	080107fc 	.word	0x080107fc
 8004164:	08010804 	.word	0x08010804
 8004168:	0801080c 	.word	0x0801080c
 800416c:	08010814 	.word	0x08010814
 8004170:	0801081c 	.word	0x0801081c
 8004174:	08010824 	.word	0x08010824
 8004178:	0801082c 	.word	0x0801082c
 800417c:	08010834 	.word	0x08010834

08004180 <UARTset>:

bool UARTset(uint16_t com, char* str) {
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	6039      	str	r1, [r7, #0]
 800418a:	80fb      	strh	r3, [r7, #6]
	if(!params[paramTable[com]-1]->set) {
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	4a53      	ldr	r2, [pc, #332]	; (80042dc <UARTset+0x15c>)
 8004190:	5cd3      	ldrb	r3, [r2, r3]
 8004192:	3b01      	subs	r3, #1
 8004194:	4a52      	ldr	r2, [pc, #328]	; (80042e0 <UARTset+0x160>)
 8004196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	2b00      	cmp	r3, #0
 800419e:	d106      	bne.n	80041ae <UARTset+0x2e>
		UARTtransmitNum(com, "Error\%no set function");
 80041a0:	88fb      	ldrh	r3, [r7, #6]
 80041a2:	4950      	ldr	r1, [pc, #320]	; (80042e4 <UARTset+0x164>)
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 f8b9 	bl	800431c <UARTtransmitNum>
		return false;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e092      	b.n	80042d4 <UARTset+0x154>
	} else if(params[paramTable[com]-1]->readOnly) {
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	4a4a      	ldr	r2, [pc, #296]	; (80042dc <UARTset+0x15c>)
 80041b2:	5cd3      	ldrb	r3, [r2, r3]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	4a4a      	ldr	r2, [pc, #296]	; (80042e0 <UARTset+0x160>)
 80041b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041bc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d006      	beq.n	80041d2 <UARTset+0x52>
		UARTtransmitNum(com, "Error\%read only");
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	4948      	ldr	r1, [pc, #288]	; (80042e8 <UARTset+0x168>)
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 f8a7 	bl	800431c <UARTtransmitNum>
		return false;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e080      	b.n	80042d4 <UARTset+0x154>
	}
	valueTypes value;
	switch(params[paramTable[com] - 1]->type) {
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	4a41      	ldr	r2, [pc, #260]	; (80042dc <UARTset+0x15c>)
 80041d6:	5cd3      	ldrb	r3, [r2, r3]
 80041d8:	3b01      	subs	r3, #1
 80041da:	4a41      	ldr	r2, [pc, #260]	; (80042e0 <UARTset+0x160>)
 80041dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041e4:	2b07      	cmp	r3, #7
 80041e6:	d85a      	bhi.n	800429e <UARTset+0x11e>
 80041e8:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <UARTset+0x70>)
 80041ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ee:	bf00      	nop
 80041f0:	08004211 	.word	0x08004211
 80041f4:	08004221 	.word	0x08004221
 80041f8:	08004231 	.word	0x08004231
 80041fc:	08004241 	.word	0x08004241
 8004200:	08004251 	.word	0x08004251
 8004204:	08004261 	.word	0x08004261
 8004208:	08004271 	.word	0x08004271
 800420c:	08004281 	.word	0x08004281
	case UINT8_T:
		sscanf(str, "%hhu", &value.val_uint8_t);
 8004210:	f107 0308 	add.w	r3, r7, #8
 8004214:	461a      	mov	r2, r3
 8004216:	4935      	ldr	r1, [pc, #212]	; (80042ec <UARTset+0x16c>)
 8004218:	6838      	ldr	r0, [r7, #0]
 800421a:	f008 fa27 	bl	800c66c <siscanf>
		break;
 800421e:	e03e      	b.n	800429e <UARTset+0x11e>
	case UINT16_T:
		sscanf(str, "%hu", &value.val_uint16_t);
 8004220:	f107 0308 	add.w	r3, r7, #8
 8004224:	461a      	mov	r2, r3
 8004226:	4932      	ldr	r1, [pc, #200]	; (80042f0 <UARTset+0x170>)
 8004228:	6838      	ldr	r0, [r7, #0]
 800422a:	f008 fa1f 	bl	800c66c <siscanf>
		break;
 800422e:	e036      	b.n	800429e <UARTset+0x11e>
	case UINT32_T:
		sscanf(str, "%lu", &value.val_uint32_t);
 8004230:	f107 0308 	add.w	r3, r7, #8
 8004234:	461a      	mov	r2, r3
 8004236:	492f      	ldr	r1, [pc, #188]	; (80042f4 <UARTset+0x174>)
 8004238:	6838      	ldr	r0, [r7, #0]
 800423a:	f008 fa17 	bl	800c66c <siscanf>
		break;
 800423e:	e02e      	b.n	800429e <UARTset+0x11e>
	case INT8_T:
		sscanf(str, "%c", &value.val_int8_t);
 8004240:	f107 0308 	add.w	r3, r7, #8
 8004244:	461a      	mov	r2, r3
 8004246:	492c      	ldr	r1, [pc, #176]	; (80042f8 <UARTset+0x178>)
 8004248:	6838      	ldr	r0, [r7, #0]
 800424a:	f008 fa0f 	bl	800c66c <siscanf>
		break;
 800424e:	e026      	b.n	800429e <UARTset+0x11e>
	case INT16_T:
		sscanf(str, "%hd", &value.val_int16_t);
 8004250:	f107 0308 	add.w	r3, r7, #8
 8004254:	461a      	mov	r2, r3
 8004256:	4929      	ldr	r1, [pc, #164]	; (80042fc <UARTset+0x17c>)
 8004258:	6838      	ldr	r0, [r7, #0]
 800425a:	f008 fa07 	bl	800c66c <siscanf>
		break;
 800425e:	e01e      	b.n	800429e <UARTset+0x11e>
	case INT32_T:
		sscanf(str, "%ld", &value.val_int32_t);
 8004260:	f107 0308 	add.w	r3, r7, #8
 8004264:	461a      	mov	r2, r3
 8004266:	4926      	ldr	r1, [pc, #152]	; (8004300 <UARTset+0x180>)
 8004268:	6838      	ldr	r0, [r7, #0]
 800426a:	f008 f9ff 	bl	800c66c <siscanf>
		break;
 800426e:	e016      	b.n	800429e <UARTset+0x11e>
	case FLOAT:
		sscanf(str, "%f", &value.val_float);
 8004270:	f107 0308 	add.w	r3, r7, #8
 8004274:	461a      	mov	r2, r3
 8004276:	4923      	ldr	r1, [pc, #140]	; (8004304 <UARTset+0x184>)
 8004278:	6838      	ldr	r0, [r7, #0]
 800427a:	f008 f9f7 	bl	800c66c <siscanf>
		break;
 800427e:	e00e      	b.n	800429e <UARTset+0x11e>
	case BOOL:
		value = (valueTypes)(bool)!strcmp(str, "true");
 8004280:	4921      	ldr	r1, [pc, #132]	; (8004308 <UARTset+0x188>)
 8004282:	6838      	ldr	r0, [r7, #0]
 8004284:	f7fb ffa4 	bl	80001d0 <strcmp>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	bf0c      	ite	eq
 800428e:	2301      	moveq	r3, #1
 8004290:	2300      	movne	r3, #0
 8004292:	b2da      	uxtb	r2, r3
 8004294:	2300      	movs	r3, #0
 8004296:	60bb      	str	r3, [r7, #8]
 8004298:	4613      	mov	r3, r2
 800429a:	723b      	strb	r3, [r7, #8]
		break;
 800429c:	bf00      	nop
	}
	bool setRes = params[paramTable[com]-1]->set((valueTypes)value);
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	4a0e      	ldr	r2, [pc, #56]	; (80042dc <UARTset+0x15c>)
 80042a2:	5cd3      	ldrb	r3, [r2, r3]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	4a0e      	ldr	r2, [pc, #56]	; (80042e0 <UARTset+0x160>)
 80042a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	68b8      	ldr	r0, [r7, #8]
 80042b0:	4798      	blx	r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	73fb      	strb	r3, [r7, #15]
	sprintf((char*)TXbuffer, "$%u:%s",com, setRes ? "Y" : "N");
 80042b6:	88fa      	ldrh	r2, [r7, #6]
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <UARTset+0x142>
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <UARTset+0x18c>)
 80042c0:	e000      	b.n	80042c4 <UARTset+0x144>
 80042c2:	4b13      	ldr	r3, [pc, #76]	; (8004310 <UARTset+0x190>)
 80042c4:	4913      	ldr	r1, [pc, #76]	; (8004314 <UARTset+0x194>)
 80042c6:	4814      	ldr	r0, [pc, #80]	; (8004318 <UARTset+0x198>)
 80042c8:	f008 f9b0 	bl	800c62c <siprintf>
	UARTtransmit((char*)TXbuffer);
 80042cc:	4812      	ldr	r0, [pc, #72]	; (8004318 <UARTset+0x198>)
 80042ce:	f7ff fe77 	bl	8003fc0 <UARTtransmit>
	return setRes;
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	2000178c 	.word	0x2000178c
 80042e0:	200015fc 	.word	0x200015fc
 80042e4:	0801084c 	.word	0x0801084c
 80042e8:	08010864 	.word	0x08010864
 80042ec:	08010874 	.word	0x08010874
 80042f0:	0801087c 	.word	0x0801087c
 80042f4:	08010880 	.word	0x08010880
 80042f8:	08010884 	.word	0x08010884
 80042fc:	08010888 	.word	0x08010888
 8004300:	0801088c 	.word	0x0801088c
 8004304:	08010890 	.word	0x08010890
 8004308:	0801081c 	.word	0x0801081c
 800430c:	08010894 	.word	0x08010894
 8004310:	08010898 	.word	0x08010898
 8004314:	0801082c 	.word	0x0801082c
 8004318:	20001d74 	.word	0x20001d74

0800431c <UARTtransmitNum>:

void UARTtransmitNum(int com, char* string) {
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
	sprintf((char*)TXbuffer, "%d:%s",com, string);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	4905      	ldr	r1, [pc, #20]	; (8004340 <UARTtransmitNum+0x24>)
 800432c:	4805      	ldr	r0, [pc, #20]	; (8004344 <UARTtransmitNum+0x28>)
 800432e:	f008 f97d 	bl	800c62c <siprintf>
	UARTtransmit((char*)TXbuffer);
 8004332:	4804      	ldr	r0, [pc, #16]	; (8004344 <UARTtransmitNum+0x28>)
 8004334:	f7ff fe44 	bl	8003fc0 <UARTtransmit>
}
 8004338:	bf00      	nop
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	0801089c 	.word	0x0801089c
 8004344:	20001d74 	.word	0x20001d74

08004348 <commandSearch>:

void commandSearch() {
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
	char** commands;
	commands = str_split((char*)RXbuffer, delim);
 800434e:	4b51      	ldr	r3, [pc, #324]	; (8004494 <commandSearch+0x14c>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	4619      	mov	r1, r3
 8004354:	4850      	ldr	r0, [pc, #320]	; (8004498 <commandSearch+0x150>)
 8004356:	f7ff fda9 	bl	8003eac <str_split>
 800435a:	61b8      	str	r0, [r7, #24]
	if (commands)
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 8093 	beq.w	800448a <commandSearch+0x142>
	{
		int i;
		for (i = 0; *(commands + i); i++)
 8004364:	2300      	movs	r3, #0
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	e081      	b.n	800446e <commandSearch+0x126>
		{
			char* command = *(commands + i);
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4413      	add	r3, r2
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	617b      	str	r3, [r7, #20]
			if(strlen(command) < 5) {
 8004376:	6978      	ldr	r0, [r7, #20]
 8004378:	f7fb ff34 	bl	80001e4 <strlen>
 800437c:	4603      	mov	r3, r0
 800437e:	2b04      	cmp	r3, #4
 8004380:	d803      	bhi.n	800438a <commandSearch+0x42>
				UARTtransmit("Error\%invalid command style");
 8004382:	4846      	ldr	r0, [pc, #280]	; (800449c <commandSearch+0x154>)
 8004384:	f7ff fe1c 	bl	8003fc0 <UARTtransmit>
 8004388:	e066      	b.n	8004458 <commandSearch+0x110>
			} else if(!strcmp(command, "*IDN?")) {
 800438a:	4945      	ldr	r1, [pc, #276]	; (80044a0 <commandSearch+0x158>)
 800438c:	6978      	ldr	r0, [r7, #20]
 800438e:	f7fb ff1f 	bl	80001d0 <strcmp>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d103      	bne.n	80043a0 <commandSearch+0x58>
				UARTtransmit(IDNstring);
 8004398:	4842      	ldr	r0, [pc, #264]	; (80044a4 <commandSearch+0x15c>)
 800439a:	f7ff fe11 	bl	8003fc0 <UARTtransmit>
 800439e:	e05b      	b.n	8004458 <commandSearch+0x110>
			} else if(command[0] == '$') {
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b24      	cmp	r3, #36	; 0x24
 80043a6:	d154      	bne.n	8004452 <commandSearch+0x10a>
				char attr[10];
				int com;
				sscanf(&command[1], "%d%s", &com, attr);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	1c58      	adds	r0, r3, #1
 80043ac:	f107 0308 	add.w	r3, r7, #8
 80043b0:	1d3a      	adds	r2, r7, #4
 80043b2:	493d      	ldr	r1, [pc, #244]	; (80044a8 <commandSearch+0x160>)
 80043b4:	f008 f95a 	bl	800c66c <siscanf>
				if(com < 100 || com > PARAMS_RANGE - 1) {
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b63      	cmp	r3, #99	; 0x63
 80043bc:	dd03      	ble.n	80043c6 <commandSearch+0x7e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043c4:	db05      	blt.n	80043d2 <commandSearch+0x8a>
					UARTtransmitNum(com,"Error\%invalid command");
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4938      	ldr	r1, [pc, #224]	; (80044ac <commandSearch+0x164>)
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff ffa6 	bl	800431c <UARTtransmitNum>
 80043d0:	e042      	b.n	8004458 <commandSearch+0x110>
				}
				else if(!params[paramTable[com]-1])
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a36      	ldr	r2, [pc, #216]	; (80044b0 <commandSearch+0x168>)
 80043d6:	5cd3      	ldrb	r3, [r2, r3]
 80043d8:	3b01      	subs	r3, #1
 80043da:	4a36      	ldr	r2, [pc, #216]	; (80044b4 <commandSearch+0x16c>)
 80043dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <commandSearch+0xa8>
				{
					UARTtransmitNum(com,"Error\%invalid parameter");
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4934      	ldr	r1, [pc, #208]	; (80044b8 <commandSearch+0x170>)
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff ff97 	bl	800431c <UARTtransmitNum>
 80043ee:	e033      	b.n	8004458 <commandSearch+0x110>
				}
				else if(attr[0] == '?') {
 80043f0:	7a3b      	ldrb	r3, [r7, #8]
 80043f2:	2b3f      	cmp	r3, #63	; 0x3f
 80043f4:	d11a      	bne.n	800442c <commandSearch+0xe4>
					if(params[paramTable[com]-1]->isCommand) {
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a2d      	ldr	r2, [pc, #180]	; (80044b0 <commandSearch+0x168>)
 80043fa:	5cd3      	ldrb	r3, [r2, r3]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	4a2d      	ldr	r2, [pc, #180]	; (80044b4 <commandSearch+0x16c>)
 8004400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004404:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004408:	2b00      	cmp	r3, #0
 800440a:	d009      	beq.n	8004420 <commandSearch+0xd8>
						params[paramTable[com]-1]->command();
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a28      	ldr	r2, [pc, #160]	; (80044b0 <commandSearch+0x168>)
 8004410:	5cd3      	ldrb	r3, [r2, r3]
 8004412:	3b01      	subs	r3, #1
 8004414:	4a27      	ldr	r2, [pc, #156]	; (80044b4 <commandSearch+0x16c>)
 8004416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	4798      	blx	r3
 800441e:	e01b      	b.n	8004458 <commandSearch+0x110>
					}
					else  {
						UARTget(com);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	b29b      	uxth	r3, r3
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fded 	bl	8004004 <UARTget>
 800442a:	e015      	b.n	8004458 <commandSearch+0x110>
					}
				}
				else if (attr[0] == ':') {
 800442c:	7a3b      	ldrb	r3, [r7, #8]
 800442e:	2b3a      	cmp	r3, #58	; 0x3a
 8004430:	d109      	bne.n	8004446 <commandSearch+0xfe>
					UARTset(com, &attr[1]);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	b29a      	uxth	r2, r3
 8004436:	f107 0308 	add.w	r3, r7, #8
 800443a:	3301      	adds	r3, #1
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f7ff fe9e 	bl	8004180 <UARTset>
 8004444:	e008      	b.n	8004458 <commandSearch+0x110>
				}
				else {
					UARTtransmitNum(com, "Error\%invalid command style");
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4914      	ldr	r1, [pc, #80]	; (800449c <commandSearch+0x154>)
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff ff66 	bl	800431c <UARTtransmitNum>
 8004450:	e002      	b.n	8004458 <commandSearch+0x110>
				}
			} else {
				UARTtransmit("Error\%invalid command style");
 8004452:	4812      	ldr	r0, [pc, #72]	; (800449c <commandSearch+0x154>)
 8004454:	f7ff fdb4 	bl	8003fc0 <UARTtransmit>
			}

			free(*(commands + i));
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4413      	add	r3, r2
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f006 fff2 	bl	800b44c <free>
		for (i = 0; *(commands + i); i++)
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	3301      	adds	r3, #1
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4413      	add	r3, r2
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f47f af76 	bne.w	800436a <commandSearch+0x22>
		}
		printf("\n");
 800447e:	200a      	movs	r0, #10
 8004480:	f008 f8a8 	bl	800c5d4 <putchar>
		free(commands);
 8004484:	69b8      	ldr	r0, [r7, #24]
 8004486:	f006 ffe1 	bl	800b44c <free>
	}
}
 800448a:	bf00      	nop
 800448c:	3720      	adds	r7, #32
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	200012e0 	.word	0x200012e0
 8004498:	20001b74 	.word	0x20001b74
 800449c:	080108a4 	.word	0x080108a4
 80044a0:	080108c0 	.word	0x080108c0
 80044a4:	200012e8 	.word	0x200012e8
 80044a8:	080108c8 	.word	0x080108c8
 80044ac:	080108d0 	.word	0x080108d0
 80044b0:	2000178c 	.word	0x2000178c
 80044b4:	200015fc 	.word	0x200015fc
 80044b8:	080108e8 	.word	0x080108e8

080044bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
    if(RXbufferChar[0] != EOL) {
 80044c4:	4b13      	ldr	r3, [pc, #76]	; (8004514 <HAL_UART_RxCpltCallback+0x58>)
 80044c6:	781a      	ldrb	r2, [r3, #0]
 80044c8:	4b13      	ldr	r3, [pc, #76]	; (8004518 <HAL_UART_RxCpltCallback+0x5c>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d00d      	beq.n	80044ec <HAL_UART_RxCpltCallback+0x30>
    	RXbuffer[RXbufferElem] = RXbufferChar[0];
 80044d0:	4b12      	ldr	r3, [pc, #72]	; (800451c <HAL_UART_RxCpltCallback+0x60>)
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <HAL_UART_RxCpltCallback+0x58>)
 80044d8:	7819      	ldrb	r1, [r3, #0]
 80044da:	4b11      	ldr	r3, [pc, #68]	; (8004520 <HAL_UART_RxCpltCallback+0x64>)
 80044dc:	5499      	strb	r1, [r3, r2]
    	RXbufferElem++;
 80044de:	4b0f      	ldr	r3, [pc, #60]	; (800451c <HAL_UART_RxCpltCallback+0x60>)
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	3301      	adds	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	4b0d      	ldr	r3, [pc, #52]	; (800451c <HAL_UART_RxCpltCallback+0x60>)
 80044e8:	801a      	strh	r2, [r3, #0]
 80044ea:	e00a      	b.n	8004502 <HAL_UART_RxCpltCallback+0x46>
    }
    else {
    	RXbuffer[RXbufferElem] = '\0';
 80044ec:	4b0b      	ldr	r3, [pc, #44]	; (800451c <HAL_UART_RxCpltCallback+0x60>)
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <HAL_UART_RxCpltCallback+0x64>)
 80044f4:	2100      	movs	r1, #0
 80044f6:	5499      	strb	r1, [r3, r2]
    	commandSearch();
 80044f8:	f7ff ff26 	bl	8004348 <commandSearch>
    	RXbufferElem = 0;
 80044fc:	4b07      	ldr	r3, [pc, #28]	; (800451c <HAL_UART_RxCpltCallback+0x60>)
 80044fe:	2200      	movs	r2, #0
 8004500:	801a      	strh	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, RXbufferChar, 1);
 8004502:	2201      	movs	r2, #1
 8004504:	4903      	ldr	r1, [pc, #12]	; (8004514 <HAL_UART_RxCpltCallback+0x58>)
 8004506:	4807      	ldr	r0, [pc, #28]	; (8004524 <HAL_UART_RxCpltCallback+0x68>)
 8004508:	f005 ffa5 	bl	800a456 <HAL_UART_Receive_IT>
}
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20001f74 	.word	0x20001f74
 8004518:	200012e1 	.word	0x200012e1
 800451c:	20001f76 	.word	0x20001f76
 8004520:	20001b74 	.word	0x20001b74
 8004524:	20002398 	.word	0x20002398

08004528 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	; 0x28
 800452c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800452e:	2306      	movs	r3, #6
 8004530:	847b      	strh	r3, [r7, #34]	; 0x22
 8004532:	2306      	movs	r3, #6
 8004534:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8004536:	2300      	movs	r3, #0
 8004538:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800453a:	2300      	movs	r3, #0
 800453c:	83fb      	strh	r3, [r7, #30]
 800453e:	2300      	movs	r3, #0
 8004540:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8004542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004546:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800454c:	4ba1      	ldr	r3, [pc, #644]	; (80047d4 <EE_Init+0x2ac>)
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8004552:	4ba1      	ldr	r3, [pc, #644]	; (80047d8 <EE_Init+0x2b0>)
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8004558:	2300      	movs	r3, #0
 800455a:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 800455c:	2306      	movs	r3, #6
 800455e:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8004560:	2301      	movs	r3, #1
 8004562:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8004564:	2302      	movs	r3, #2
 8004566:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8004568:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800456a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800456e:	4293      	cmp	r3, r2
 8004570:	d00b      	beq.n	800458a <EE_Init+0x62>
 8004572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004576:	f280 8196 	bge.w	80048a6 <EE_Init+0x37e>
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 80f8 	beq.w	8004770 <EE_Init+0x248>
 8004580:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8004584:	4293      	cmp	r3, r2
 8004586:	d050      	beq.n	800462a <EE_Init+0x102>
 8004588:	e18d      	b.n	80048a6 <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800458a:	8c3b      	ldrh	r3, [r7, #32]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d116      	bne.n	80045be <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8004590:	4890      	ldr	r0, [pc, #576]	; (80047d4 <EE_Init+0x2ac>)
 8004592:	f000 f9a9 	bl	80048e8 <EE_VerifyPageFullyErased>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	f040 818e 	bne.w	80048ba <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800459e:	f107 0214 	add.w	r2, r7, #20
 80045a2:	463b      	mov	r3, r7
 80045a4:	4611      	mov	r1, r2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f003 fd8e 	bl	80080c8 <HAL_FLASHEx_Erase>
 80045ac:	4603      	mov	r3, r0
 80045ae:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80045b0:	7efb      	ldrb	r3, [r7, #27]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 8181 	beq.w	80048ba <EE_Init+0x392>
          {
            return FlashStatus;
 80045b8:	7efb      	ldrb	r3, [r7, #27]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	e185      	b.n	80048ca <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80045be:	8c3b      	ldrh	r3, [r7, #32]
 80045c0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d125      	bne.n	8004614 <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80045c8:	4882      	ldr	r0, [pc, #520]	; (80047d4 <EE_Init+0x2ac>)
 80045ca:	f000 f98d 	bl	80048e8 <EE_VerifyPageFullyErased>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10e      	bne.n	80045f2 <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80045d4:	f107 0214 	add.w	r2, r7, #20
 80045d8:	463b      	mov	r3, r7
 80045da:	4611      	mov	r1, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	f003 fd73 	bl	80080c8 <HAL_FLASHEx_Erase>
 80045e2:	4603      	mov	r3, r0
 80045e4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80045e6:	7efb      	ldrb	r3, [r7, #27]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <EE_Init+0xca>
          {
            return FlashStatus;
 80045ec:	7efb      	ldrb	r3, [r7, #27]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	e16b      	b.n	80048ca <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	4977      	ldr	r1, [pc, #476]	; (80047d8 <EE_Init+0x2b0>)
 80045fc:	2001      	movs	r0, #1
 80045fe:	f003 fbbd 	bl	8007d7c <HAL_FLASH_Program>
 8004602:	4603      	mov	r3, r0
 8004604:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8004606:	7efb      	ldrb	r3, [r7, #27]
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8156 	beq.w	80048ba <EE_Init+0x392>
        {
          return FlashStatus;
 800460e:	7efb      	ldrb	r3, [r7, #27]
 8004610:	b29b      	uxth	r3, r3
 8004612:	e15a      	b.n	80048ca <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8004614:	f000 f9f8 	bl	8004a08 <EE_Format>
 8004618:	4603      	mov	r3, r0
 800461a:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800461c:	7efb      	ldrb	r3, [r7, #27]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 814b 	beq.w	80048ba <EE_Init+0x392>
        {
          return FlashStatus;
 8004624:	7efb      	ldrb	r3, [r7, #27]
 8004626:	b29b      	uxth	r3, r3
 8004628:	e14f      	b.n	80048ca <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800462a:	8c3b      	ldrh	r3, [r7, #32]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d163      	bne.n	80046f8 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8004630:	2300      	movs	r3, #0
 8004632:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004634:	e030      	b.n	8004698 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8004636:	4b69      	ldr	r3, [pc, #420]	; (80047dc <EE_Init+0x2b4>)
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b29a      	uxth	r2, r3
 800463c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800463e:	4968      	ldr	r1, [pc, #416]	; (80047e0 <EE_Init+0x2b8>)
 8004640:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004644:	429a      	cmp	r2, r3
 8004646:	d101      	bne.n	800464c <EE_Init+0x124>
          {
            x = VarIdx;
 8004648:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800464a:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 800464c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800464e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004652:	429a      	cmp	r2, r3
 8004654:	d01d      	beq.n	8004692 <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8004656:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004658:	4a61      	ldr	r2, [pc, #388]	; (80047e0 <EE_Init+0x2b8>)
 800465a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800465e:	4961      	ldr	r1, [pc, #388]	; (80047e4 <EE_Init+0x2bc>)
 8004660:	4618      	mov	r0, r3
 8004662:	f000 f967 	bl	8004934 <EE_ReadVariable>
 8004666:	4603      	mov	r3, r0
 8004668:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800466a:	8bbb      	ldrh	r3, [r7, #28]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d010      	beq.n	8004692 <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8004670:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004672:	4a5b      	ldr	r2, [pc, #364]	; (80047e0 <EE_Init+0x2b8>)
 8004674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004678:	4a5a      	ldr	r2, [pc, #360]	; (80047e4 <EE_Init+0x2bc>)
 800467a:	8812      	ldrh	r2, [r2, #0]
 800467c:	4611      	mov	r1, r2
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fa5a 	bl	8004b38 <EE_VerifyPageFullWriteVariable>
 8004684:	4603      	mov	r3, r0
 8004686:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8004688:	8bfb      	ldrh	r3, [r7, #30]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <EE_Init+0x16a>
              {
                return EepromStatus;
 800468e:	8bfb      	ldrh	r3, [r7, #30]
 8004690:	e11b      	b.n	80048ca <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8004692:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004694:	3301      	adds	r3, #1
 8004696:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004698:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800469a:	2b63      	cmp	r3, #99	; 0x63
 800469c:	d9cb      	bls.n	8004636 <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	494b      	ldr	r1, [pc, #300]	; (80047d4 <EE_Init+0x2ac>)
 80046a8:	2001      	movs	r0, #1
 80046aa:	f003 fb67 	bl	8007d7c <HAL_FLASH_Program>
 80046ae:	4603      	mov	r3, r0
 80046b0:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80046b2:	7efb      	ldrb	r3, [r7, #27]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <EE_Init+0x196>
        {
          return FlashStatus;
 80046b8:	7efb      	ldrb	r3, [r7, #27]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	e105      	b.n	80048ca <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 80046be:	2307      	movs	r3, #7
 80046c0:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80046c2:	2301      	movs	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80046c6:	2302      	movs	r3, #2
 80046c8:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80046ca:	4843      	ldr	r0, [pc, #268]	; (80047d8 <EE_Init+0x2b0>)
 80046cc:	f000 f90c 	bl	80048e8 <EE_VerifyPageFullyErased>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f040 80f3 	bne.w	80048be <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80046d8:	f107 0214 	add.w	r2, r7, #20
 80046dc:	463b      	mov	r3, r7
 80046de:	4611      	mov	r1, r2
 80046e0:	4618      	mov	r0, r3
 80046e2:	f003 fcf1 	bl	80080c8 <HAL_FLASHEx_Erase>
 80046e6:	4603      	mov	r3, r0
 80046e8:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80046ea:	7efb      	ldrb	r3, [r7, #27]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80e6 	beq.w	80048be <EE_Init+0x396>
          {
            return FlashStatus;
 80046f2:	7efb      	ldrb	r3, [r7, #27]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	e0e8      	b.n	80048ca <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 80046f8:	8c3b      	ldrh	r3, [r7, #32]
 80046fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046fe:	4293      	cmp	r3, r2
 8004700:	d12b      	bne.n	800475a <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 8004702:	2307      	movs	r3, #7
 8004704:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8004706:	2301      	movs	r3, #1
 8004708:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800470a:	2302      	movs	r3, #2
 800470c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800470e:	4832      	ldr	r0, [pc, #200]	; (80047d8 <EE_Init+0x2b0>)
 8004710:	f000 f8ea 	bl	80048e8 <EE_VerifyPageFullyErased>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10e      	bne.n	8004738 <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800471a:	f107 0214 	add.w	r2, r7, #20
 800471e:	463b      	mov	r3, r7
 8004720:	4611      	mov	r1, r2
 8004722:	4618      	mov	r0, r3
 8004724:	f003 fcd0 	bl	80080c8 <HAL_FLASHEx_Erase>
 8004728:	4603      	mov	r3, r0
 800472a:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800472c:	7efb      	ldrb	r3, [r7, #27]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <EE_Init+0x210>
          {
            return FlashStatus;
 8004732:	7efb      	ldrb	r3, [r7, #27]
 8004734:	b29b      	uxth	r3, r3
 8004736:	e0c8      	b.n	80048ca <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	4924      	ldr	r1, [pc, #144]	; (80047d4 <EE_Init+0x2ac>)
 8004742:	2001      	movs	r0, #1
 8004744:	f003 fb1a 	bl	8007d7c <HAL_FLASH_Program>
 8004748:	4603      	mov	r3, r0
 800474a:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800474c:	7efb      	ldrb	r3, [r7, #27]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 80b5 	beq.w	80048be <EE_Init+0x396>
        {
          return FlashStatus;
 8004754:	7efb      	ldrb	r3, [r7, #27]
 8004756:	b29b      	uxth	r3, r3
 8004758:	e0b7      	b.n	80048ca <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800475a:	f000 f955 	bl	8004a08 <EE_Format>
 800475e:	4603      	mov	r3, r0
 8004760:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8004762:	7efb      	ldrb	r3, [r7, #27]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80aa 	beq.w	80048be <EE_Init+0x396>
        {
          return FlashStatus;
 800476a:	7efb      	ldrb	r3, [r7, #27]
 800476c:	b29b      	uxth	r3, r3
 800476e:	e0ac      	b.n	80048ca <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8004770:	8c3b      	ldrh	r3, [r7, #32]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8004776:	f000 f947 	bl	8004a08 <EE_Format>
 800477a:	4603      	mov	r3, r0
 800477c:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800477e:	7efb      	ldrb	r3, [r7, #27]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 809e 	beq.w	80048c2 <EE_Init+0x39a>
        {
          return FlashStatus;
 8004786:	7efb      	ldrb	r3, [r7, #27]
 8004788:	b29b      	uxth	r3, r3
 800478a:	e09e      	b.n	80048ca <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 800478c:	8c3b      	ldrh	r3, [r7, #32]
 800478e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004792:	4293      	cmp	r3, r2
 8004794:	d11b      	bne.n	80047ce <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 8004796:	2307      	movs	r3, #7
 8004798:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800479a:	2301      	movs	r3, #1
 800479c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800479e:	2302      	movs	r3, #2
 80047a0:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80047a2:	480d      	ldr	r0, [pc, #52]	; (80047d8 <EE_Init+0x2b0>)
 80047a4:	f000 f8a0 	bl	80048e8 <EE_VerifyPageFullyErased>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f040 8089 	bne.w	80048c2 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80047b0:	f107 0214 	add.w	r2, r7, #20
 80047b4:	463b      	mov	r3, r7
 80047b6:	4611      	mov	r1, r2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f003 fc85 	bl	80080c8 <HAL_FLASHEx_Erase>
 80047be:	4603      	mov	r3, r0
 80047c0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80047c2:	7efb      	ldrb	r3, [r7, #27]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d07c      	beq.n	80048c2 <EE_Init+0x39a>
          {
            return FlashStatus;
 80047c8:	7efb      	ldrb	r3, [r7, #27]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	e07d      	b.n	80048ca <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80047ce:	2300      	movs	r3, #0
 80047d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80047d2:	e03a      	b.n	800484a <EE_Init+0x322>
 80047d4:	08040000 	.word	0x08040000
 80047d8:	08060000 	.word	0x08060000
 80047dc:	08040006 	.word	0x08040006
 80047e0:	20001f7c 	.word	0x20001f7c
 80047e4:	20001f78 	.word	0x20001f78
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80047e8:	4b3a      	ldr	r3, [pc, #232]	; (80048d4 <EE_Init+0x3ac>)
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047f0:	4939      	ldr	r1, [pc, #228]	; (80048d8 <EE_Init+0x3b0>)
 80047f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d101      	bne.n	80047fe <EE_Init+0x2d6>
          {
            x = VarIdx;
 80047fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047fc:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80047fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004800:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004804:	429a      	cmp	r2, r3
 8004806:	d01d      	beq.n	8004844 <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8004808:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800480a:	4a33      	ldr	r2, [pc, #204]	; (80048d8 <EE_Init+0x3b0>)
 800480c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004810:	4932      	ldr	r1, [pc, #200]	; (80048dc <EE_Init+0x3b4>)
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f88e 	bl	8004934 <EE_ReadVariable>
 8004818:	4603      	mov	r3, r0
 800481a:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800481c:	8bbb      	ldrh	r3, [r7, #28]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d010      	beq.n	8004844 <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8004822:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004824:	4a2c      	ldr	r2, [pc, #176]	; (80048d8 <EE_Init+0x3b0>)
 8004826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800482a:	4a2c      	ldr	r2, [pc, #176]	; (80048dc <EE_Init+0x3b4>)
 800482c:	8812      	ldrh	r2, [r2, #0]
 800482e:	4611      	mov	r1, r2
 8004830:	4618      	mov	r0, r3
 8004832:	f000 f981 	bl	8004b38 <EE_VerifyPageFullWriteVariable>
 8004836:	4603      	mov	r3, r0
 8004838:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800483a:	8bfb      	ldrh	r3, [r7, #30]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <EE_Init+0x31c>
              {
                return EepromStatus;
 8004840:	8bfb      	ldrh	r3, [r7, #30]
 8004842:	e042      	b.n	80048ca <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8004844:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004846:	3301      	adds	r3, #1
 8004848:	84fb      	strh	r3, [r7, #38]	; 0x26
 800484a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800484c:	2b63      	cmp	r3, #99	; 0x63
 800484e:	d9cb      	bls.n	80047e8 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	4921      	ldr	r1, [pc, #132]	; (80048e0 <EE_Init+0x3b8>)
 800485a:	2001      	movs	r0, #1
 800485c:	f003 fa8e 	bl	8007d7c <HAL_FLASH_Program>
 8004860:	4603      	mov	r3, r0
 8004862:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8004864:	7efb      	ldrb	r3, [r7, #27]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <EE_Init+0x348>
        {
          return FlashStatus;
 800486a:	7efb      	ldrb	r3, [r7, #27]
 800486c:	b29b      	uxth	r3, r3
 800486e:	e02c      	b.n	80048ca <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 8004870:	2306      	movs	r3, #6
 8004872:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8004874:	2301      	movs	r3, #1
 8004876:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8004878:	2302      	movs	r3, #2
 800487a:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800487c:	4819      	ldr	r0, [pc, #100]	; (80048e4 <EE_Init+0x3bc>)
 800487e:	f000 f833 	bl	80048e8 <EE_VerifyPageFullyErased>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d11c      	bne.n	80048c2 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8004888:	f107 0214 	add.w	r2, r7, #20
 800488c:	463b      	mov	r3, r7
 800488e:	4611      	mov	r1, r2
 8004890:	4618      	mov	r0, r3
 8004892:	f003 fc19 	bl	80080c8 <HAL_FLASHEx_Erase>
 8004896:	4603      	mov	r3, r0
 8004898:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800489a:	7efb      	ldrb	r3, [r7, #27]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d010      	beq.n	80048c2 <EE_Init+0x39a>
          {
            return FlashStatus;
 80048a0:	7efb      	ldrb	r3, [r7, #27]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	e011      	b.n	80048ca <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 80048a6:	f000 f8af 	bl	8004a08 <EE_Format>
 80048aa:	4603      	mov	r3, r0
 80048ac:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80048ae:	7efb      	ldrb	r3, [r7, #27]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <EE_Init+0x39e>
      {
        return FlashStatus;
 80048b4:	7efb      	ldrb	r3, [r7, #27]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	e007      	b.n	80048ca <EE_Init+0x3a2>
      break;
 80048ba:	bf00      	nop
 80048bc:	e004      	b.n	80048c8 <EE_Init+0x3a0>
      break;
 80048be:	bf00      	nop
 80048c0:	e002      	b.n	80048c8 <EE_Init+0x3a0>
      break;
 80048c2:	bf00      	nop
 80048c4:	e000      	b.n	80048c8 <EE_Init+0x3a0>
      }
      break;
 80048c6:	bf00      	nop
  }

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3728      	adds	r7, #40	; 0x28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	08060006 	.word	0x08060006
 80048d8:	20001f7c 	.word	0x20001f7c
 80048dc:	20001f78 	.word	0x20001f78
 80048e0:	08060000 	.word	0x08060000
 80048e4:	08040000 	.word	0x08040000

080048e8 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 80048f0:	2301      	movs	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 80048f4:	f245 5355 	movw	r3, #21845	; 0x5555
 80048f8:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 80048fa:	e00d      	b.n	8004918 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8004902:	897b      	ldrh	r3, [r7, #10]
 8004904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004908:	4293      	cmp	r3, r2
 800490a:	d002      	beq.n	8004912 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	60fb      	str	r3, [r7, #12]

      break;
 8004910:	e006      	b.n	8004920 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3304      	adds	r3, #4
 8004916:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a05      	ldr	r2, [pc, #20]	; (8004930 <EE_VerifyPageFullyErased+0x48>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d9ed      	bls.n	80048fc <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	b29b      	uxth	r3, r3
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	0805ffff 	.word	0x0805ffff

08004934 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	6039      	str	r1, [r7, #0]
 800493e:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8004940:	2300      	movs	r3, #0
 8004942:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8004944:	f245 5355 	movw	r3, #21845	; 0x5555
 8004948:	81bb      	strh	r3, [r7, #12]
 800494a:	2301      	movs	r3, #1
 800494c:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 800494e:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <EE_ReadVariable+0x88>)
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	4b1a      	ldr	r3, [pc, #104]	; (80049bc <EE_ReadVariable+0x88>)
 8004954:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8004956:	2000      	movs	r0, #0
 8004958:	f000 f8a8 	bl	8004aac <EE_FindValidPage>
 800495c:	4603      	mov	r3, r0
 800495e:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8004960:	89fb      	ldrh	r3, [r7, #14]
 8004962:	2bab      	cmp	r3, #171	; 0xab
 8004964:	d101      	bne.n	800496a <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8004966:	23ab      	movs	r3, #171	; 0xab
 8004968:	e024      	b.n	80049b4 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800496a:	89fb      	ldrh	r3, [r7, #14]
 800496c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004970:	045b      	lsls	r3, r3, #17
 8004972:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8004974:	89fb      	ldrh	r3, [r7, #14]
 8004976:	3301      	adds	r3, #1
 8004978:	045a      	lsls	r2, r3, #17
 800497a:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <EE_ReadVariable+0x8c>)
 800497c:	4413      	add	r3, r2
 800497e:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8004980:	e012      	b.n	80049a8 <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8004988:	89ba      	ldrh	r2, [r7, #12]
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	429a      	cmp	r2, r3
 800498e:	d108      	bne.n	80049a2 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	3b02      	subs	r3, #2
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29a      	uxth	r2, r3
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	82fb      	strh	r3, [r7, #22]

      break;
 80049a0:	e007      	b.n	80049b2 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	3b04      	subs	r3, #4
 80049a6:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	3302      	adds	r3, #2
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d8e7      	bhi.n	8004982 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 80049b2:	8afb      	ldrh	r3, [r7, #22]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	08040000 	.word	0x08040000
 80049c0:	0803fffe 	.word	0x0803fffe

080049c4 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4603      	mov	r3, r0
 80049cc:	460a      	mov	r2, r1
 80049ce:	80fb      	strh	r3, [r7, #6]
 80049d0:	4613      	mov	r3, r2
 80049d2:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80049d8:	88ba      	ldrh	r2, [r7, #4]
 80049da:	88fb      	ldrh	r3, [r7, #6]
 80049dc:	4611      	mov	r1, r2
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 f8aa 	bl	8004b38 <EE_VerifyPageFullWriteVariable>
 80049e4:	4603      	mov	r3, r0
 80049e6:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80049e8:	89fb      	ldrh	r3, [r7, #14]
 80049ea:	2b80      	cmp	r3, #128	; 0x80
 80049ec:	d107      	bne.n	80049fe <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80049ee:	88ba      	ldrh	r2, [r7, #4]
 80049f0:	88fb      	ldrh	r3, [r7, #6]
 80049f2:	4611      	mov	r1, r2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 f901 	bl	8004bfc <EE_PageTransfer>
 80049fa:	4603      	mov	r3, r0
 80049fc:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80049fe:	89fb      	ldrh	r3, [r7, #14]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 8004a16:	2300      	movs	r3, #0
 8004a18:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8004a1a:	2306      	movs	r3, #6
 8004a1c:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8004a22:	2302      	movs	r3, #2
 8004a24:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8004a26:	481f      	ldr	r0, [pc, #124]	; (8004aa4 <EE_Format+0x9c>)
 8004a28:	f7ff ff5e 	bl	80048e8 <EE_VerifyPageFullyErased>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10d      	bne.n	8004a4e <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8004a32:	f107 0218 	add.w	r2, r7, #24
 8004a36:	1d3b      	adds	r3, r7, #4
 8004a38:	4611      	mov	r1, r2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f003 fb44 	bl	80080c8 <HAL_FLASHEx_Erase>
 8004a40:	4603      	mov	r3, r0
 8004a42:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8004a44:	7ffb      	ldrb	r3, [r7, #31]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <EE_Format+0x46>
    {
      return FlashStatus;
 8004a4a:	7ffb      	ldrb	r3, [r7, #31]
 8004a4c:	e025      	b.n	8004a9a <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	4913      	ldr	r1, [pc, #76]	; (8004aa4 <EE_Format+0x9c>)
 8004a58:	2001      	movs	r0, #1
 8004a5a:	f003 f98f 	bl	8007d7c <HAL_FLASH_Program>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8004a62:	7ffb      	ldrb	r3, [r7, #31]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <EE_Format+0x64>
  {
    return FlashStatus;
 8004a68:	7ffb      	ldrb	r3, [r7, #31]
 8004a6a:	e016      	b.n	8004a9a <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8004a6c:	2307      	movs	r3, #7
 8004a6e:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8004a70:	480d      	ldr	r0, [pc, #52]	; (8004aa8 <EE_Format+0xa0>)
 8004a72:	f7ff ff39 	bl	80048e8 <EE_VerifyPageFullyErased>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10d      	bne.n	8004a98 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8004a7c:	f107 0218 	add.w	r2, r7, #24
 8004a80:	1d3b      	adds	r3, r7, #4
 8004a82:	4611      	mov	r1, r2
 8004a84:	4618      	mov	r0, r3
 8004a86:	f003 fb1f 	bl	80080c8 <HAL_FLASHEx_Erase>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8004a8e:	7ffb      	ldrb	r3, [r7, #31]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <EE_Format+0x90>
    {
      return FlashStatus;
 8004a94:	7ffb      	ldrb	r3, [r7, #31]
 8004a96:	e000      	b.n	8004a9a <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3720      	adds	r7, #32
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	08040000 	.word	0x08040000
 8004aa8:	08060000 	.word	0x08060000

08004aac <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8004ab6:	2306      	movs	r3, #6
 8004ab8:	81fb      	strh	r3, [r7, #14]
 8004aba:	2306      	movs	r3, #6
 8004abc:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8004abe:	4b1c      	ldr	r3, [pc, #112]	; (8004b30 <EE_FindValidPage+0x84>)
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8004ac4:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <EE_FindValidPage+0x88>)
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01b      	beq.n	8004b08 <EE_FindValidPage+0x5c>
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d125      	bne.n	8004b20 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8004ad4:	89bb      	ldrh	r3, [r7, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d108      	bne.n	8004aec <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8004ada:	89fb      	ldrh	r3, [r7, #14]
 8004adc:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d101      	bne.n	8004ae8 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	e01c      	b.n	8004b22 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e01a      	b.n	8004b22 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8004aec:	89fb      	ldrh	r3, [r7, #14]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d108      	bne.n	8004b04 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8004af2:	89bb      	ldrh	r3, [r7, #12]
 8004af4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d101      	bne.n	8004b00 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8004afc:	2301      	movs	r3, #1
 8004afe:	e010      	b.n	8004b22 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8004b00:	2300      	movs	r3, #0
 8004b02:	e00e      	b.n	8004b22 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8004b04:	23ab      	movs	r3, #171	; 0xab
 8004b06:	e00c      	b.n	8004b22 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8004b08:	89fb      	ldrh	r3, [r7, #14]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e007      	b.n	8004b22 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8004b12:	89bb      	ldrh	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e002      	b.n	8004b22 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8004b1c:	23ab      	movs	r3, #171	; 0xab
 8004b1e:	e000      	b.n	8004b22 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8004b20:	2300      	movs	r3, #0
  }
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	08040000 	.word	0x08040000
 8004b34:	08060000 	.word	0x08060000

08004b38 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8004b38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b3c:	b086      	sub	sp, #24
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	4603      	mov	r3, r0
 8004b42:	460a      	mov	r2, r1
 8004b44:	80fb      	strh	r3, [r7, #6]
 8004b46:	4613      	mov	r3, r2
 8004b48:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8004b52:	4b27      	ldr	r3, [pc, #156]	; (8004bf0 <EE_VerifyPageFullWriteVariable+0xb8>)
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <EE_VerifyPageFullWriteVariable+0xbc>)
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8004b5a:	2001      	movs	r0, #1
 8004b5c:	f7ff ffa6 	bl	8004aac <EE_FindValidPage>
 8004b60:	4603      	mov	r3, r0
 8004b62:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8004b64:	8a3b      	ldrh	r3, [r7, #16]
 8004b66:	2bab      	cmp	r3, #171	; 0xab
 8004b68:	d101      	bne.n	8004b6e <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8004b6a:	23ab      	movs	r3, #171	; 0xab
 8004b6c:	e03a      	b.n	8004be4 <EE_VerifyPageFullWriteVariable+0xac>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8004b6e:	8a3b      	ldrh	r3, [r7, #16]
 8004b70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b74:	045b      	lsls	r3, r3, #17
 8004b76:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8004b78:	8a3b      	ldrh	r3, [r7, #16]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	045a      	lsls	r2, r3, #17
 8004b7e:	4b1e      	ldr	r3, [pc, #120]	; (8004bf8 <EE_VerifyPageFullWriteVariable+0xc0>)
 8004b80:	4413      	add	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8004b84:	e029      	b.n	8004bda <EE_VerifyPageFullWriteVariable+0xa2>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8e:	d121      	bne.n	8004bd4 <EE_VerifyPageFullWriteVariable+0x9c>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8004b90:	88bb      	ldrh	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	461c      	mov	r4, r3
 8004b96:	4615      	mov	r5, r2
 8004b98:	4622      	mov	r2, r4
 8004b9a:	462b      	mov	r3, r5
 8004b9c:	6979      	ldr	r1, [r7, #20]
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	f003 f8ec 	bl	8007d7c <HAL_FLASH_Program>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <EE_VerifyPageFullWriteVariable+0x7c>
      {
        return FlashStatus;
 8004bae:	7cfb      	ldrb	r3, [r7, #19]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	e017      	b.n	8004be4 <EE_VerifyPageFullWriteVariable+0xac>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	1c99      	adds	r1, r3, #2
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	4698      	mov	r8, r3
 8004bbe:	4691      	mov	r9, r2
 8004bc0:	4642      	mov	r2, r8
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	f003 f8d9 	bl	8007d7c <HAL_FLASH_Program>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8004bce:	7cfb      	ldrb	r3, [r7, #19]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	e007      	b.n	8004be4 <EE_VerifyPageFullWriteVariable+0xac>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d3d1      	bcc.n	8004b86 <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8004be2:	2380      	movs	r3, #128	; 0x80
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004bee:	bf00      	nop
 8004bf0:	08040000 	.word	0x08040000
 8004bf4:	08060000 	.word	0x08060000
 8004bf8:	0803ffff 	.word	0x0803ffff

08004bfc <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08c      	sub	sp, #48	; 0x30
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	460a      	mov	r2, r1
 8004c06:	80fb      	strh	r3, [r7, #6]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8004c12:	4b54      	ldr	r3, [pc, #336]	; (8004d64 <EE_PageTransfer+0x168>)
 8004c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004c1e:	2300      	movs	r3, #0
 8004c20:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c26:	2300      	movs	r3, #0
 8004c28:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8004c2e:	2000      	movs	r0, #0
 8004c30:	f7ff ff3c 	bl	8004aac <EE_FindValidPage>
 8004c34:	4603      	mov	r3, r0
 8004c36:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8004c38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d104      	bne.n	8004c48 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8004c3e:	4b49      	ldr	r3, [pc, #292]	; (8004d64 <EE_PageTransfer+0x168>)
 8004c40:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8004c42:	2307      	movs	r3, #7
 8004c44:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004c46:	e009      	b.n	8004c5c <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8004c48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d104      	bne.n	8004c58 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8004c4e:	4b46      	ldr	r3, [pc, #280]	; (8004d68 <EE_PageTransfer+0x16c>)
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8004c52:	2306      	movs	r3, #6
 8004c54:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004c56:	e001      	b.n	8004c5c <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8004c58:	23ab      	movs	r3, #171	; 0xab
 8004c5a:	e07e      	b.n	8004d5a <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8004c5c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c66:	2001      	movs	r0, #1
 8004c68:	f003 f888 	bl	8007d7c <HAL_FLASH_Program>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8004c72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8004c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	e06b      	b.n	8004d5a <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8004c82:	88ba      	ldrh	r2, [r7, #4]
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	4611      	mov	r1, r2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff ff55 	bl	8004b38 <EE_VerifyPageFullWriteVariable>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8004c92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8004c98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c9a:	e05e      	b.n	8004d5a <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ca0:	e027      	b.n	8004cf2 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8004ca2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ca4:	4a31      	ldr	r2, [pc, #196]	; (8004d6c <EE_PageTransfer+0x170>)
 8004ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004caa:	88fa      	ldrh	r2, [r7, #6]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d01d      	beq.n	8004cec <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8004cb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004cb2:	4a2e      	ldr	r2, [pc, #184]	; (8004d6c <EE_PageTransfer+0x170>)
 8004cb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cb8:	492d      	ldr	r1, [pc, #180]	; (8004d70 <EE_PageTransfer+0x174>)
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff fe3a 	bl	8004934 <EE_ReadVariable>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8004cc4:	8c3b      	ldrh	r3, [r7, #32]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d010      	beq.n	8004cec <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8004cca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ccc:	4a27      	ldr	r2, [pc, #156]	; (8004d6c <EE_PageTransfer+0x170>)
 8004cce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cd2:	4a27      	ldr	r2, [pc, #156]	; (8004d70 <EE_PageTransfer+0x174>)
 8004cd4:	8812      	ldrh	r2, [r2, #0]
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff ff2d 	bl	8004b38 <EE_VerifyPageFullWriteVariable>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8004ce2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8004ce8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004cea:	e036      	b.n	8004d5a <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8004cec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004cee:	3301      	adds	r3, #1
 8004cf0:	853b      	strh	r3, [r7, #40]	; 0x28
 8004cf2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004cf4:	2b63      	cmp	r3, #99	; 0x63
 8004cf6:	d9d4      	bls.n	8004ca2 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8004cfc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004cfe:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8004d00:	2301      	movs	r3, #1
 8004d02:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8004d04:	2302      	movs	r3, #2
 8004d06:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8004d08:	f107 021c 	add.w	r2, r7, #28
 8004d0c:	f107 0308 	add.w	r3, r7, #8
 8004d10:	4611      	mov	r1, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f003 f9d8 	bl	80080c8 <HAL_FLASHEx_Erase>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8004d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8004d26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	e015      	b.n	8004d5a <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d38:	2001      	movs	r0, #1
 8004d3a:	f003 f81f 	bl	8007d7c <HAL_FLASH_Program>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8004d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8004d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	e002      	b.n	8004d5a <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8004d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d58:	b29b      	uxth	r3, r3
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3730      	adds	r7, #48	; 0x30
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	08040000 	.word	0x08040000
 8004d68:	08060000 	.word	0x08060000
 8004d6c:	20001f7c 	.word	0x20001f7c
 8004d70:	20001f78 	.word	0x20001f78

08004d74 <InitVirtAddTab>:
#include "Parameters.h"

//EEPROM Emulation
uint16_t VirtAddVarTab[NB_OF_VAR];

void InitVirtAddTab() {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8004d7a:	f003 f853 	bl	8007e24 <HAL_FLASH_Unlock>
	EE_Init();
 8004d7e:	f7ff fbd3 	bl	8004528 <EE_Init>
	uint8_t counter = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 8004d86:	2300      	movs	r3, #0
 8004d88:	71bb      	strb	r3, [r7, #6]
 8004d8a:	e01e      	b.n	8004dca <InitVirtAddTab+0x56>
		if(params[i]->isFlash == true) {
 8004d8c:	79bb      	ldrb	r3, [r7, #6]
 8004d8e:	4a13      	ldr	r2, [pc, #76]	; (8004ddc <InitVirtAddTab+0x68>)
 8004d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d94:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d013      	beq.n	8004dc4 <InitVirtAddTab+0x50>
			VirtAddVarTab[counter] = counter+1;
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	3201      	adds	r2, #1
 8004da4:	b291      	uxth	r1, r2
 8004da6:	4a0e      	ldr	r2, [pc, #56]	; (8004de0 <InitVirtAddTab+0x6c>)
 8004da8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			VirtAddVarTab[counter+1] = counter+2;
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	79fb      	ldrb	r3, [r7, #7]
 8004db2:	3301      	adds	r3, #1
 8004db4:	3202      	adds	r2, #2
 8004db6:	b291      	uxth	r1, r2
 8004db8:	4a09      	ldr	r2, [pc, #36]	; (8004de0 <InitVirtAddTab+0x6c>)
 8004dba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			counter +=2;
 8004dbe:	79fb      	ldrb	r3, [r7, #7]
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 8004dc4:	79bb      	ldrb	r3, [r7, #6]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	71bb      	strb	r3, [r7, #6]
 8004dca:	79bb      	ldrb	r3, [r7, #6]
 8004dcc:	2b63      	cmp	r3, #99	; 0x63
 8004dce:	d9dd      	bls.n	8004d8c <InitVirtAddTab+0x18>
		}
	}
}
 8004dd0:	bf00      	nop
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	200015fc 	.word	0x200015fc
 8004de0:	20001f7c 	.word	0x20001f7c

08004de4 <ReadFlash>:

void ReadFlash() {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
	uint8_t counter = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 8004dee:	2300      	movs	r3, #0
 8004df0:	71bb      	strb	r3, [r7, #6]
 8004df2:	e041      	b.n	8004e78 <ReadFlash+0x94>
		if(params[i]->isFlash == true) {
 8004df4:	79bb      	ldrb	r3, [r7, #6]
 8004df6:	4a23      	ldr	r2, [pc, #140]	; (8004e84 <ReadFlash+0xa0>)
 8004df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dfc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d036      	beq.n	8004e72 <ReadFlash+0x8e>
			uint16_t var[2];
			uint16_t flag = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	80bb      	strh	r3, [r7, #4]
			flag += EE_ReadVariable(VirtAddVarTab[counter++], &var[0]);
 8004e08:	79fb      	ldrb	r3, [r7, #7]
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	71fa      	strb	r2, [r7, #7]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <ReadFlash+0xa4>)
 8004e12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004e16:	463a      	mov	r2, r7
 8004e18:	4611      	mov	r1, r2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fd8a 	bl	8004934 <EE_ReadVariable>
 8004e20:	4603      	mov	r3, r0
 8004e22:	461a      	mov	r2, r3
 8004e24:	88bb      	ldrh	r3, [r7, #4]
 8004e26:	4413      	add	r3, r2
 8004e28:	80bb      	strh	r3, [r7, #4]
			flag += EE_ReadVariable(VirtAddVarTab[counter++], &var[1]);
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	71fa      	strb	r2, [r7, #7]
 8004e30:	461a      	mov	r2, r3
 8004e32:	4b15      	ldr	r3, [pc, #84]	; (8004e88 <ReadFlash+0xa4>)
 8004e34:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004e38:	463b      	mov	r3, r7
 8004e3a:	3302      	adds	r3, #2
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	f7ff fd78 	bl	8004934 <EE_ReadVariable>
 8004e44:	4603      	mov	r3, r0
 8004e46:	461a      	mov	r2, r3
 8004e48:	88bb      	ldrh	r3, [r7, #4]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	80bb      	strh	r3, [r7, #4]
			if(flag != 0) { //First start up of new firmware (no flash data)
 8004e4e:	88bb      	ldrh	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <ReadFlash+0x76>
				SaveToFlash();
 8004e54:	f000 f81a 	bl	8004e8c <SaveToFlash>
 8004e58:	e011      	b.n	8004e7e <ReadFlash+0x9a>
				return;
			}
			else {
				params[i]->value.flashType[0] = var[0];
 8004e5a:	79bb      	ldrb	r3, [r7, #6]
 8004e5c:	4a09      	ldr	r2, [pc, #36]	; (8004e84 <ReadFlash+0xa0>)
 8004e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e62:	883a      	ldrh	r2, [r7, #0]
 8004e64:	861a      	strh	r2, [r3, #48]	; 0x30
				params[i]->value.flashType[1] = var[1];
 8004e66:	79bb      	ldrb	r3, [r7, #6]
 8004e68:	4a06      	ldr	r2, [pc, #24]	; (8004e84 <ReadFlash+0xa0>)
 8004e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e6e:	887a      	ldrh	r2, [r7, #2]
 8004e70:	865a      	strh	r2, [r3, #50]	; 0x32
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 8004e72:	79bb      	ldrb	r3, [r7, #6]
 8004e74:	3301      	adds	r3, #1
 8004e76:	71bb      	strb	r3, [r7, #6]
 8004e78:	79bb      	ldrb	r3, [r7, #6]
 8004e7a:	2b63      	cmp	r3, #99	; 0x63
 8004e7c:	d9ba      	bls.n	8004df4 <ReadFlash+0x10>
			}
		}
	}
}
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	200015fc 	.word	0x200015fc
 8004e88:	20001f7c 	.word	0x20001f7c

08004e8c <SaveToFlash>:


void SaveToFlash() {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
	uint8_t counter = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 8004e96:	2300      	movs	r3, #0
 8004e98:	71bb      	strb	r3, [r7, #6]
 8004e9a:	e02e      	b.n	8004efa <SaveToFlash+0x6e>
		if(params[i]->isFlash == true) {
 8004e9c:	79bb      	ldrb	r3, [r7, #6]
 8004e9e:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <SaveToFlash+0x80>)
 8004ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d023      	beq.n	8004ef4 <SaveToFlash+0x68>
			uint16_t var[2];
			var[0] = params[i]->value.flashType[0];
 8004eac:	79bb      	ldrb	r3, [r7, #6]
 8004eae:	4a17      	ldr	r2, [pc, #92]	; (8004f0c <SaveToFlash+0x80>)
 8004eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004eb6:	803b      	strh	r3, [r7, #0]
			var[1] = params[i]->value.flashType[1];
 8004eb8:	79bb      	ldrb	r3, [r7, #6]
 8004eba:	4a14      	ldr	r2, [pc, #80]	; (8004f0c <SaveToFlash+0x80>)
 8004ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ec0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ec2:	807b      	strh	r3, [r7, #2]
			EE_WriteVariable(VirtAddVarTab[counter++], var[0]);
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	71fa      	strb	r2, [r7, #7]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	4b10      	ldr	r3, [pc, #64]	; (8004f10 <SaveToFlash+0x84>)
 8004ece:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004ed2:	883a      	ldrh	r2, [r7, #0]
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff fd74 	bl	80049c4 <EE_WriteVariable>
			EE_WriteVariable(VirtAddVarTab[counter++], var[1]);
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	71fa      	strb	r2, [r7, #7]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <SaveToFlash+0x84>)
 8004ee6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004eea:	887a      	ldrh	r2, [r7, #2]
 8004eec:	4611      	mov	r1, r2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff fd68 	bl	80049c4 <EE_WriteVariable>
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 8004ef4:	79bb      	ldrb	r3, [r7, #6]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	71bb      	strb	r3, [r7, #6]
 8004efa:	79bb      	ldrb	r3, [r7, #6]
 8004efc:	2b63      	cmp	r3, #99	; 0x63
 8004efe:	d9cd      	bls.n	8004e9c <SaveToFlash+0x10>
		}
	}
}
 8004f00:	bf00      	nop
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	200015fc 	.word	0x200015fc
 8004f10:	20001f7c 	.word	0x20001f7c

08004f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  InitParams();
 8004f18:	f7fc ff02 	bl	8001d20 <InitParams>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f1c:	f001 fd96 	bl	8006a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f20:	f000 f8ac 	bl	800507c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f24:	f000 fdb4 	bl	8005a90 <MX_GPIO_Init>
  MX_DMA_Init();
 8004f28:	f000 fd8a 	bl	8005a40 <MX_DMA_Init>
  MX_ADC1_Init();
 8004f2c:	f000 f912 	bl	8005154 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004f30:	f000 f9a8 	bl	8005284 <MX_ADC2_Init>
  MX_TIM1_Init();
 8004f34:	f000 fa3c 	bl	80053b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8004f38:	f000 fae2 	bl	8005500 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004f3c:	f000 fb2c 	bl	8005598 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004f40:	f000 fbac 	bl	800569c <MX_TIM4_Init>
  MX_TIM8_Init();
 8004f44:	f000 fcb0 	bl	80058a8 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8004f48:	f000 fd50 	bl	80059ec <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8004f4c:	f000 fc28 	bl	80057a0 <MX_TIM5_Init>
  MX_TIM6_Init();
 8004f50:	f000 fc74 	bl	800583c <MX_TIM6_Init>
  MX_IWDG_Init();
 8004f54:	f000 fa12 	bl	800537c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  //Init flash reading
  InitVirtAddTab();
 8004f58:	f7ff ff0c 	bl	8004d74 <InitVirtAddTab>
  ReadFlash(); //time consuming
 8004f5c:	f7ff ff42 	bl	8004de4 <ReadFlash>
  setU_HeaterOnOff(getU_HeaterOnOff());
 8004f60:	f7fd faaa 	bl	80024b8 <getU_HeaterOnOff>
 8004f64:	4603      	mov	r3, r0
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fd fa88 	bl	800247c <setU_HeaterOnOff>

  //Global 100us clock start (RTC - 120 hours limit)
  HAL_TIM_Base_Start(&htim5);
 8004f6c:	4831      	ldr	r0, [pc, #196]	; (8005034 <main+0x120>)
 8004f6e:	f004 f87d 	bl	800906c <HAL_TIM_Base_Start>
  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  //Set_U_Heater PWM (10 kHz, 16800)
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8004f72:	2108      	movs	r1, #8
 8004f74:	4830      	ldr	r0, [pc, #192]	; (8005038 <main+0x124>)
 8004f76:	f004 f9ab 	bl	80092d0 <HAL_TIM_PWM_Start>
  //Timer @84MHz for clock reference
  HAL_TIM_Base_Start(&htim2);
 8004f7a:	4830      	ldr	r0, [pc, #192]	; (800503c <main+0x128>)
 8004f7c:	f004 f876 	bl	800906c <HAL_TIM_Base_Start>
  //External clock source for counter
  counterPeriod = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8004f80:	4b2f      	ldr	r3, [pc, #188]	; (8005040 <main+0x12c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	4b2e      	ldr	r3, [pc, #184]	; (8005044 <main+0x130>)
 8004f8a:	801a      	strh	r2, [r3, #0]
  __HAL_TIM_CLEAR_IT(&htim1,TIM_IT_UPDATE);
 8004f8c:	4b2c      	ldr	r3, [pc, #176]	; (8005040 <main+0x12c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0201 	mvn.w	r2, #1
 8004f94:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim1);
 8004f96:	482a      	ldr	r0, [pc, #168]	; (8005040 <main+0x12c>)
 8004f98:	f004 f8d0 	bl	800913c <HAL_TIM_Base_Start_IT>

  //ADC DMA start (10 channels)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)dmaADC1buffer, 600);
 8004f9c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004fa0:	4929      	ldr	r1, [pc, #164]	; (8005048 <main+0x134>)
 8004fa2:	482a      	ldr	r0, [pc, #168]	; (800504c <main+0x138>)
 8004fa4:	f001 fe08 	bl	8006bb8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)dmaADC2buffer, 400);
 8004fa8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004fac:	4928      	ldr	r1, [pc, #160]	; (8005050 <main+0x13c>)
 8004fae:	4829      	ldr	r0, [pc, #164]	; (8005054 <main+0x140>)
 8004fb0:	f001 fe02 	bl	8006bb8 <HAL_ADC_Start_DMA>

  //100ms interrupt for ADC and other staff
  __HAL_TIM_CLEAR_IT(&htim6,TIM_IT_UPDATE);
 8004fb4:	4b28      	ldr	r3, [pc, #160]	; (8005058 <main+0x144>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0201 	mvn.w	r2, #1
 8004fbc:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim6);
 8004fbe:	4826      	ldr	r0, [pc, #152]	; (8005058 <main+0x144>)
 8004fc0:	f004 f8bc 	bl	800913c <HAL_TIM_Base_Start_IT>

  //UART interrupt enabling
  HAL_UART_Receive_IT(&huart1, RXbufferChar, 1);
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	4925      	ldr	r1, [pc, #148]	; (800505c <main+0x148>)
 8004fc8:	4825      	ldr	r0, [pc, #148]	; (8005060 <main+0x14c>)
 8004fca:	f005 fa44 	bl	800a456 <HAL_UART_Receive_IT>

  //Heater PWM init
  __HAL_TIM_SET_PRESCALER(&htim3, 0);
 8004fce:	4b25      	ldr	r3, [pc, #148]	; (8005064 <main+0x150>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_TIM_SET_AUTORELOAD(&htim3, freq_PWM_MO/freq_PWM_CH1 - 1);
 8004fd6:	4b24      	ldr	r3, [pc, #144]	; (8005068 <main+0x154>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4b24      	ldr	r3, [pc, #144]	; (800506c <main+0x158>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fe2:	4b20      	ldr	r3, [pc, #128]	; (8005064 <main+0x150>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3a01      	subs	r2, #1
 8004fe8:	62da      	str	r2, [r3, #44]	; 0x2c
 8004fea:	4b1f      	ldr	r3, [pc, #124]	; (8005068 <main+0x154>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b1f      	ldr	r3, [pc, #124]	; (800506c <main+0x158>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	4a1a      	ldr	r2, [pc, #104]	; (8005064 <main+0x150>)
 8004ffa:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SET_PRESCALER(&htim4, 0);
 8004ffc:	4b1c      	ldr	r3, [pc, #112]	; (8005070 <main+0x15c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2200      	movs	r2, #0
 8005002:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_TIM_SET_AUTORELOAD(&htim4, freq_PWM_MO/freq_PWM_CH2 - 1);
 8005004:	4b18      	ldr	r3, [pc, #96]	; (8005068 <main+0x154>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <main+0x160>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005010:	4b17      	ldr	r3, [pc, #92]	; (8005070 <main+0x15c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3a01      	subs	r2, #1
 8005016:	62da      	str	r2, [r3, #44]	; 0x2c
 8005018:	4b13      	ldr	r3, [pc, #76]	; (8005068 <main+0x154>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	4b15      	ldr	r3, [pc, #84]	; (8005074 <main+0x160>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	fbb2 f3f3 	udiv	r3, r2, r3
 8005024:	3b01      	subs	r3, #1
 8005026:	4a12      	ldr	r2, [pc, #72]	; (8005070 <main+0x15c>)
 8005028:	60d3      	str	r3, [r2, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
{
	//Watch dog reset
	HAL_IWDG_Refresh(&hiwdg);
 800502a:	4813      	ldr	r0, [pc, #76]	; (8005078 <main+0x164>)
 800502c:	f003 fb65 	bl	80086fa <HAL_IWDG_Refresh>
 8005030:	e7fb      	b.n	800502a <main+0x116>
 8005032:	bf00      	nop
 8005034:	200022c0 	.word	0x200022c0
 8005038:	20002350 	.word	0x20002350
 800503c:	200021e8 	.word	0x200021e8
 8005040:	200021a0 	.word	0x200021a0
 8005044:	200023dc 	.word	0x200023dc
 8005048:	200023e8 	.word	0x200023e8
 800504c:	20002044 	.word	0x20002044
 8005050:	20002898 	.word	0x20002898
 8005054:	2000208c 	.word	0x2000208c
 8005058:	20002308 	.word	0x20002308
 800505c:	20001f74 	.word	0x20001f74
 8005060:	20002398 	.word	0x20002398
 8005064:	20002230 	.word	0x20002230
 8005068:	20001310 	.word	0x20001310
 800506c:	20001314 	.word	0x20001314
 8005070:	20002278 	.word	0x20002278
 8005074:	20001318 	.word	0x20001318
 8005078:	20002194 	.word	0x20002194

0800507c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b094      	sub	sp, #80	; 0x50
 8005080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005082:	f107 0320 	add.w	r3, r7, #32
 8005086:	2230      	movs	r2, #48	; 0x30
 8005088:	2100      	movs	r1, #0
 800508a:	4618      	mov	r0, r3
 800508c:	f006 f9e6 	bl	800b45c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005090:	f107 030c 	add.w	r3, r7, #12
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	609a      	str	r2, [r3, #8]
 800509c:	60da      	str	r2, [r3, #12]
 800509e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80050a0:	2300      	movs	r3, #0
 80050a2:	60bb      	str	r3, [r7, #8]
 80050a4:	4b29      	ldr	r3, [pc, #164]	; (800514c <SystemClock_Config+0xd0>)
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	4a28      	ldr	r2, [pc, #160]	; (800514c <SystemClock_Config+0xd0>)
 80050aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ae:	6413      	str	r3, [r2, #64]	; 0x40
 80050b0:	4b26      	ldr	r3, [pc, #152]	; (800514c <SystemClock_Config+0xd0>)
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80050bc:	2300      	movs	r3, #0
 80050be:	607b      	str	r3, [r7, #4]
 80050c0:	4b23      	ldr	r3, [pc, #140]	; (8005150 <SystemClock_Config+0xd4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a22      	ldr	r2, [pc, #136]	; (8005150 <SystemClock_Config+0xd4>)
 80050c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	4b20      	ldr	r3, [pc, #128]	; (8005150 <SystemClock_Config+0xd4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d4:	607b      	str	r3, [r7, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80050d8:	2309      	movs	r3, #9
 80050da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80050dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80050e2:	2301      	movs	r3, #1
 80050e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050e6:	2302      	movs	r3, #2
 80050e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80050ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80050f0:	2306      	movs	r3, #6
 80050f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80050f4:	23a8      	movs	r3, #168	; 0xa8
 80050f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80050f8:	2302      	movs	r3, #2
 80050fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80050fc:	2304      	movs	r3, #4
 80050fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005100:	f107 0320 	add.w	r3, r7, #32
 8005104:	4618      	mov	r0, r3
 8005106:	f003 fb09 	bl	800871c <HAL_RCC_OscConfig>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005110:	f000 ff26 	bl	8005f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005114:	230f      	movs	r3, #15
 8005116:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005118:	2302      	movs	r3, #2
 800511a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005120:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800512a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800512c:	f107 030c 	add.w	r3, r7, #12
 8005130:	2105      	movs	r1, #5
 8005132:	4618      	mov	r0, r3
 8005134:	f003 fd6a 	bl	8008c0c <HAL_RCC_ClockConfig>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800513e:	f000 ff0f 	bl	8005f60 <Error_Handler>
  }
}
 8005142:	bf00      	nop
 8005144:	3750      	adds	r7, #80	; 0x50
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40023800 	.word	0x40023800
 8005150:	40007000 	.word	0x40007000

08005154 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800515a:	463b      	mov	r3, r7
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	605a      	str	r2, [r3, #4]
 8005162:	609a      	str	r2, [r3, #8]
 8005164:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005166:	4b44      	ldr	r3, [pc, #272]	; (8005278 <MX_ADC1_Init+0x124>)
 8005168:	4a44      	ldr	r2, [pc, #272]	; (800527c <MX_ADC1_Init+0x128>)
 800516a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800516c:	4b42      	ldr	r3, [pc, #264]	; (8005278 <MX_ADC1_Init+0x124>)
 800516e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005172:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005174:	4b40      	ldr	r3, [pc, #256]	; (8005278 <MX_ADC1_Init+0x124>)
 8005176:	2200      	movs	r2, #0
 8005178:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800517a:	4b3f      	ldr	r3, [pc, #252]	; (8005278 <MX_ADC1_Init+0x124>)
 800517c:	2201      	movs	r2, #1
 800517e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005180:	4b3d      	ldr	r3, [pc, #244]	; (8005278 <MX_ADC1_Init+0x124>)
 8005182:	2201      	movs	r2, #1
 8005184:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005186:	4b3c      	ldr	r3, [pc, #240]	; (8005278 <MX_ADC1_Init+0x124>)
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800518e:	4b3a      	ldr	r3, [pc, #232]	; (8005278 <MX_ADC1_Init+0x124>)
 8005190:	2200      	movs	r2, #0
 8005192:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005194:	4b38      	ldr	r3, [pc, #224]	; (8005278 <MX_ADC1_Init+0x124>)
 8005196:	4a3a      	ldr	r2, [pc, #232]	; (8005280 <MX_ADC1_Init+0x12c>)
 8005198:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800519a:	4b37      	ldr	r3, [pc, #220]	; (8005278 <MX_ADC1_Init+0x124>)
 800519c:	2200      	movs	r2, #0
 800519e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80051a0:	4b35      	ldr	r3, [pc, #212]	; (8005278 <MX_ADC1_Init+0x124>)
 80051a2:	2206      	movs	r2, #6
 80051a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80051a6:	4b34      	ldr	r3, [pc, #208]	; (8005278 <MX_ADC1_Init+0x124>)
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80051ae:	4b32      	ldr	r3, [pc, #200]	; (8005278 <MX_ADC1_Init+0x124>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80051b4:	4830      	ldr	r0, [pc, #192]	; (8005278 <MX_ADC1_Init+0x124>)
 80051b6:	f001 fcbb 	bl	8006b30 <HAL_ADC_Init>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80051c0:	f000 fece 	bl	8005f60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80051c8:	2301      	movs	r3, #1
 80051ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80051cc:	2306      	movs	r3, #6
 80051ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80051d0:	463b      	mov	r3, r7
 80051d2:	4619      	mov	r1, r3
 80051d4:	4828      	ldr	r0, [pc, #160]	; (8005278 <MX_ADC1_Init+0x124>)
 80051d6:	f001 fe1d 	bl	8006e14 <HAL_ADC_ConfigChannel>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80051e0:	f000 febe 	bl	8005f60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80051e4:	2301      	movs	r3, #1
 80051e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80051e8:	2302      	movs	r3, #2
 80051ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80051ec:	463b      	mov	r3, r7
 80051ee:	4619      	mov	r1, r3
 80051f0:	4821      	ldr	r0, [pc, #132]	; (8005278 <MX_ADC1_Init+0x124>)
 80051f2:	f001 fe0f 	bl	8006e14 <HAL_ADC_ConfigChannel>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80051fc:	f000 feb0 	bl	8005f60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005200:	2302      	movs	r3, #2
 8005202:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005204:	2303      	movs	r3, #3
 8005206:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005208:	463b      	mov	r3, r7
 800520a:	4619      	mov	r1, r3
 800520c:	481a      	ldr	r0, [pc, #104]	; (8005278 <MX_ADC1_Init+0x124>)
 800520e:	f001 fe01 	bl	8006e14 <HAL_ADC_ConfigChannel>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8005218:	f000 fea2 	bl	8005f60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800521c:	2303      	movs	r3, #3
 800521e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005220:	2304      	movs	r3, #4
 8005222:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005224:	463b      	mov	r3, r7
 8005226:	4619      	mov	r1, r3
 8005228:	4813      	ldr	r0, [pc, #76]	; (8005278 <MX_ADC1_Init+0x124>)
 800522a:	f001 fdf3 	bl	8006e14 <HAL_ADC_ConfigChannel>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8005234:	f000 fe94 	bl	8005f60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005238:	2304      	movs	r3, #4
 800523a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800523c:	2305      	movs	r3, #5
 800523e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005240:	463b      	mov	r3, r7
 8005242:	4619      	mov	r1, r3
 8005244:	480c      	ldr	r0, [pc, #48]	; (8005278 <MX_ADC1_Init+0x124>)
 8005246:	f001 fde5 	bl	8006e14 <HAL_ADC_ConfigChannel>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8005250:	f000 fe86 	bl	8005f60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005254:	2305      	movs	r3, #5
 8005256:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005258:	2306      	movs	r3, #6
 800525a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800525c:	463b      	mov	r3, r7
 800525e:	4619      	mov	r1, r3
 8005260:	4805      	ldr	r0, [pc, #20]	; (8005278 <MX_ADC1_Init+0x124>)
 8005262:	f001 fdd7 	bl	8006e14 <HAL_ADC_ConfigChannel>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800526c:	f000 fe78 	bl	8005f60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005270:	bf00      	nop
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20002044 	.word	0x20002044
 800527c:	40012000 	.word	0x40012000
 8005280:	0f000001 	.word	0x0f000001

08005284 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800528a:	463b      	mov	r3, r7
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	605a      	str	r2, [r3, #4]
 8005292:	609a      	str	r2, [r3, #8]
 8005294:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005296:	4b36      	ldr	r3, [pc, #216]	; (8005370 <MX_ADC2_Init+0xec>)
 8005298:	4a36      	ldr	r2, [pc, #216]	; (8005374 <MX_ADC2_Init+0xf0>)
 800529a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800529c:	4b34      	ldr	r3, [pc, #208]	; (8005370 <MX_ADC2_Init+0xec>)
 800529e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80052a4:	4b32      	ldr	r3, [pc, #200]	; (8005370 <MX_ADC2_Init+0xec>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80052aa:	4b31      	ldr	r3, [pc, #196]	; (8005370 <MX_ADC2_Init+0xec>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80052b0:	4b2f      	ldr	r3, [pc, #188]	; (8005370 <MX_ADC2_Init+0xec>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80052b6:	4b2e      	ldr	r3, [pc, #184]	; (8005370 <MX_ADC2_Init+0xec>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80052be:	4b2c      	ldr	r3, [pc, #176]	; (8005370 <MX_ADC2_Init+0xec>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80052c4:	4b2a      	ldr	r3, [pc, #168]	; (8005370 <MX_ADC2_Init+0xec>)
 80052c6:	4a2c      	ldr	r2, [pc, #176]	; (8005378 <MX_ADC2_Init+0xf4>)
 80052c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80052ca:	4b29      	ldr	r3, [pc, #164]	; (8005370 <MX_ADC2_Init+0xec>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80052d0:	4b27      	ldr	r3, [pc, #156]	; (8005370 <MX_ADC2_Init+0xec>)
 80052d2:	2204      	movs	r2, #4
 80052d4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80052d6:	4b26      	ldr	r3, [pc, #152]	; (8005370 <MX_ADC2_Init+0xec>)
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80052de:	4b24      	ldr	r3, [pc, #144]	; (8005370 <MX_ADC2_Init+0xec>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80052e4:	4822      	ldr	r0, [pc, #136]	; (8005370 <MX_ADC2_Init+0xec>)
 80052e6:	f001 fc23 	bl	8006b30 <HAL_ADC_Init>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80052f0:	f000 fe36 	bl	8005f60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80052f4:	230a      	movs	r3, #10
 80052f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80052f8:	2301      	movs	r3, #1
 80052fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80052fc:	2306      	movs	r3, #6
 80052fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005300:	463b      	mov	r3, r7
 8005302:	4619      	mov	r1, r3
 8005304:	481a      	ldr	r0, [pc, #104]	; (8005370 <MX_ADC2_Init+0xec>)
 8005306:	f001 fd85 	bl	8006e14 <HAL_ADC_ConfigChannel>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005310:	f000 fe26 	bl	8005f60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005314:	230b      	movs	r3, #11
 8005316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005318:	2302      	movs	r3, #2
 800531a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800531c:	463b      	mov	r3, r7
 800531e:	4619      	mov	r1, r3
 8005320:	4813      	ldr	r0, [pc, #76]	; (8005370 <MX_ADC2_Init+0xec>)
 8005322:	f001 fd77 	bl	8006e14 <HAL_ADC_ConfigChannel>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800532c:	f000 fe18 	bl	8005f60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005330:	230c      	movs	r3, #12
 8005332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005334:	2303      	movs	r3, #3
 8005336:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005338:	463b      	mov	r3, r7
 800533a:	4619      	mov	r1, r3
 800533c:	480c      	ldr	r0, [pc, #48]	; (8005370 <MX_ADC2_Init+0xec>)
 800533e:	f001 fd69 	bl	8006e14 <HAL_ADC_ConfigChannel>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005348:	f000 fe0a 	bl	8005f60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800534c:	230d      	movs	r3, #13
 800534e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005350:	2304      	movs	r3, #4
 8005352:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005354:	463b      	mov	r3, r7
 8005356:	4619      	mov	r1, r3
 8005358:	4805      	ldr	r0, [pc, #20]	; (8005370 <MX_ADC2_Init+0xec>)
 800535a:	f001 fd5b 	bl	8006e14 <HAL_ADC_ConfigChannel>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005364:	f000 fdfc 	bl	8005f60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	2000208c 	.word	0x2000208c
 8005374:	40012100 	.word	0x40012100
 8005378:	0f000001 	.word	0x0f000001

0800537c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8005380:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <MX_IWDG_Init+0x2c>)
 8005382:	4a0a      	ldr	r2, [pc, #40]	; (80053ac <MX_IWDG_Init+0x30>)
 8005384:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8005386:	4b08      	ldr	r3, [pc, #32]	; (80053a8 <MX_IWDG_Init+0x2c>)
 8005388:	2202      	movs	r2, #2
 800538a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800538c:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <MX_IWDG_Init+0x2c>)
 800538e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005392:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8005394:	4804      	ldr	r0, [pc, #16]	; (80053a8 <MX_IWDG_Init+0x2c>)
 8005396:	f003 f96e 	bl	8008676 <HAL_IWDG_Init>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80053a0:	f000 fdde 	bl	8005f60 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80053a4:	bf00      	nop
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	20002194 	.word	0x20002194
 80053ac:	40003000 	.word	0x40003000

080053b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b096      	sub	sp, #88	; 0x58
 80053b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80053ba:	2200      	movs	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	605a      	str	r2, [r3, #4]
 80053c0:	609a      	str	r2, [r3, #8]
 80053c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80053ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	605a      	str	r2, [r3, #4]
 80053d8:	609a      	str	r2, [r3, #8]
 80053da:	60da      	str	r2, [r3, #12]
 80053dc:	611a      	str	r2, [r3, #16]
 80053de:	615a      	str	r2, [r3, #20]
 80053e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80053e2:	1d3b      	adds	r3, r7, #4
 80053e4:	2220      	movs	r2, #32
 80053e6:	2100      	movs	r1, #0
 80053e8:	4618      	mov	r0, r3
 80053ea:	f006 f837 	bl	800b45c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80053ee:	4b42      	ldr	r3, [pc, #264]	; (80054f8 <MX_TIM1_Init+0x148>)
 80053f0:	4a42      	ldr	r2, [pc, #264]	; (80054fc <MX_TIM1_Init+0x14c>)
 80053f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80053f4:	4b40      	ldr	r3, [pc, #256]	; (80054f8 <MX_TIM1_Init+0x148>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053fa:	4b3f      	ldr	r3, [pc, #252]	; (80054f8 <MX_TIM1_Init+0x148>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8005400:	4b3d      	ldr	r3, [pc, #244]	; (80054f8 <MX_TIM1_Init+0x148>)
 8005402:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005406:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005408:	4b3b      	ldr	r3, [pc, #236]	; (80054f8 <MX_TIM1_Init+0x148>)
 800540a:	2200      	movs	r2, #0
 800540c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800540e:	4b3a      	ldr	r3, [pc, #232]	; (80054f8 <MX_TIM1_Init+0x148>)
 8005410:	2200      	movs	r2, #0
 8005412:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005414:	4b38      	ldr	r3, [pc, #224]	; (80054f8 <MX_TIM1_Init+0x148>)
 8005416:	2200      	movs	r2, #0
 8005418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800541a:	4837      	ldr	r0, [pc, #220]	; (80054f8 <MX_TIM1_Init+0x148>)
 800541c:	f003 fdd6 	bl	8008fcc <HAL_TIM_Base_Init>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005426:	f000 fd9b 	bl	8005f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800542a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800542e:	64bb      	str	r3, [r7, #72]	; 0x48
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8005430:	2300      	movs	r3, #0
 8005432:	64fb      	str	r3, [r7, #76]	; 0x4c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8005434:	2300      	movs	r3, #0
 8005436:	653b      	str	r3, [r7, #80]	; 0x50
  sClockSourceConfig.ClockFilter = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800543c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005440:	4619      	mov	r1, r3
 8005442:	482d      	ldr	r0, [pc, #180]	; (80054f8 <MX_TIM1_Init+0x148>)
 8005444:	f004 fa46 	bl	80098d4 <HAL_TIM_ConfigClockSource>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800544e:	f000 fd87 	bl	8005f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005452:	4829      	ldr	r0, [pc, #164]	; (80054f8 <MX_TIM1_Init+0x148>)
 8005454:	f003 fee2 	bl	800921c <HAL_TIM_PWM_Init>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 800545e:	f000 fd7f 	bl	8005f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005462:	2300      	movs	r3, #0
 8005464:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005466:	2300      	movs	r3, #0
 8005468:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800546a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800546e:	4619      	mov	r1, r3
 8005470:	4821      	ldr	r0, [pc, #132]	; (80054f8 <MX_TIM1_Init+0x148>)
 8005472:	f004 fe2f 	bl	800a0d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 800547c:	f000 fd70 	bl	8005f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005480:	2360      	movs	r3, #96	; 0x60
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 30000-1;
 8005484:	f247 532f 	movw	r3, #29999	; 0x752f
 8005488:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800548a:	2300      	movs	r3, #0
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800548e:	2300      	movs	r3, #0
 8005490:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005492:	2300      	movs	r3, #0
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005496:	2300      	movs	r3, #0
 8005498:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800549a:	2300      	movs	r3, #0
 800549c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800549e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054a2:	2200      	movs	r2, #0
 80054a4:	4619      	mov	r1, r3
 80054a6:	4814      	ldr	r0, [pc, #80]	; (80054f8 <MX_TIM1_Init+0x148>)
 80054a8:	f004 f952 	bl	8009750 <HAL_TIM_PWM_ConfigChannel>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80054b2:	f000 fd55 	bl	8005f60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80054b6:	2300      	movs	r3, #0
 80054b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80054c2:	2300      	movs	r3, #0
 80054c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80054c6:	2300      	movs	r3, #0
 80054c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80054ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80054d0:	2300      	movs	r3, #0
 80054d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80054d4:	1d3b      	adds	r3, r7, #4
 80054d6:	4619      	mov	r1, r3
 80054d8:	4807      	ldr	r0, [pc, #28]	; (80054f8 <MX_TIM1_Init+0x148>)
 80054da:	f004 fe77 	bl	800a1cc <HAL_TIMEx_ConfigBreakDeadTime>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80054e4:	f000 fd3c 	bl	8005f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80054e8:	4803      	ldr	r0, [pc, #12]	; (80054f8 <MX_TIM1_Init+0x148>)
 80054ea:	f000 ff23 	bl	8006334 <HAL_TIM_MspPostInit>

}
 80054ee:	bf00      	nop
 80054f0:	3758      	adds	r7, #88	; 0x58
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	200021a0 	.word	0x200021a0
 80054fc:	40010000 	.word	0x40010000

08005500 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005506:	f107 0308 	add.w	r3, r7, #8
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	605a      	str	r2, [r3, #4]
 8005510:	609a      	str	r2, [r3, #8]
 8005512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005514:	463b      	mov	r3, r7
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800551c:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <MX_TIM2_Init+0x94>)
 800551e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005522:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005524:	4b1b      	ldr	r3, [pc, #108]	; (8005594 <MX_TIM2_Init+0x94>)
 8005526:	2200      	movs	r2, #0
 8005528:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800552a:	4b1a      	ldr	r3, [pc, #104]	; (8005594 <MX_TIM2_Init+0x94>)
 800552c:	2200      	movs	r2, #0
 800552e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005530:	4b18      	ldr	r3, [pc, #96]	; (8005594 <MX_TIM2_Init+0x94>)
 8005532:	f04f 32ff 	mov.w	r2, #4294967295
 8005536:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005538:	4b16      	ldr	r3, [pc, #88]	; (8005594 <MX_TIM2_Init+0x94>)
 800553a:	2200      	movs	r2, #0
 800553c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800553e:	4b15      	ldr	r3, [pc, #84]	; (8005594 <MX_TIM2_Init+0x94>)
 8005540:	2200      	movs	r2, #0
 8005542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005544:	4813      	ldr	r0, [pc, #76]	; (8005594 <MX_TIM2_Init+0x94>)
 8005546:	f003 fd41 	bl	8008fcc <HAL_TIM_Base_Init>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005550:	f000 fd06 	bl	8005f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005558:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800555a:	f107 0308 	add.w	r3, r7, #8
 800555e:	4619      	mov	r1, r3
 8005560:	480c      	ldr	r0, [pc, #48]	; (8005594 <MX_TIM2_Init+0x94>)
 8005562:	f004 f9b7 	bl	80098d4 <HAL_TIM_ConfigClockSource>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800556c:	f000 fcf8 	bl	8005f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005570:	2300      	movs	r3, #0
 8005572:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005574:	2300      	movs	r3, #0
 8005576:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005578:	463b      	mov	r3, r7
 800557a:	4619      	mov	r1, r3
 800557c:	4805      	ldr	r0, [pc, #20]	; (8005594 <MX_TIM2_Init+0x94>)
 800557e:	f004 fda9 	bl	800a0d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005588:	f000 fcea 	bl	8005f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800558c:	bf00      	nop
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	200021e8 	.word	0x200021e8

08005598 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08e      	sub	sp, #56	; 0x38
 800559c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800559e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	605a      	str	r2, [r3, #4]
 80055a8:	609a      	str	r2, [r3, #8]
 80055aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055ac:	f107 0320 	add.w	r3, r7, #32
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80055b6:	1d3b      	adds	r3, r7, #4
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	605a      	str	r2, [r3, #4]
 80055be:	609a      	str	r2, [r3, #8]
 80055c0:	60da      	str	r2, [r3, #12]
 80055c2:	611a      	str	r2, [r3, #16]
 80055c4:	615a      	str	r2, [r3, #20]
 80055c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80055c8:	4b32      	ldr	r3, [pc, #200]	; (8005694 <MX_TIM3_Init+0xfc>)
 80055ca:	4a33      	ldr	r2, [pc, #204]	; (8005698 <MX_TIM3_Init+0x100>)
 80055cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80055ce:	4b31      	ldr	r3, [pc, #196]	; (8005694 <MX_TIM3_Init+0xfc>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055d4:	4b2f      	ldr	r3, [pc, #188]	; (8005694 <MX_TIM3_Init+0xfc>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 840-1;
 80055da:	4b2e      	ldr	r3, [pc, #184]	; (8005694 <MX_TIM3_Init+0xfc>)
 80055dc:	f240 3247 	movw	r2, #839	; 0x347
 80055e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055e2:	4b2c      	ldr	r3, [pc, #176]	; (8005694 <MX_TIM3_Init+0xfc>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055e8:	4b2a      	ldr	r3, [pc, #168]	; (8005694 <MX_TIM3_Init+0xfc>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80055ee:	4829      	ldr	r0, [pc, #164]	; (8005694 <MX_TIM3_Init+0xfc>)
 80055f0:	f003 fcec 	bl	8008fcc <HAL_TIM_Base_Init>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80055fa:	f000 fcb1 	bl	8005f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005604:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005608:	4619      	mov	r1, r3
 800560a:	4822      	ldr	r0, [pc, #136]	; (8005694 <MX_TIM3_Init+0xfc>)
 800560c:	f004 f962 	bl	80098d4 <HAL_TIM_ConfigClockSource>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005616:	f000 fca3 	bl	8005f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800561a:	481e      	ldr	r0, [pc, #120]	; (8005694 <MX_TIM3_Init+0xfc>)
 800561c:	f003 fdfe 	bl	800921c <HAL_TIM_PWM_Init>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005626:	f000 fc9b 	bl	8005f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800562a:	2300      	movs	r3, #0
 800562c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800562e:	2300      	movs	r3, #0
 8005630:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005632:	f107 0320 	add.w	r3, r7, #32
 8005636:	4619      	mov	r1, r3
 8005638:	4816      	ldr	r0, [pc, #88]	; (8005694 <MX_TIM3_Init+0xfc>)
 800563a:	f004 fd4b 	bl	800a0d4 <HAL_TIMEx_MasterConfigSynchronization>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005644:	f000 fc8c 	bl	8005f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005648:	2360      	movs	r3, #96	; 0x60
 800564a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800564c:	2300      	movs	r3, #0
 800564e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005658:	1d3b      	adds	r3, r7, #4
 800565a:	2200      	movs	r2, #0
 800565c:	4619      	mov	r1, r3
 800565e:	480d      	ldr	r0, [pc, #52]	; (8005694 <MX_TIM3_Init+0xfc>)
 8005660:	f004 f876 	bl	8009750 <HAL_TIM_PWM_ConfigChannel>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800566a:	f000 fc79 	bl	8005f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800566e:	1d3b      	adds	r3, r7, #4
 8005670:	2204      	movs	r2, #4
 8005672:	4619      	mov	r1, r3
 8005674:	4807      	ldr	r0, [pc, #28]	; (8005694 <MX_TIM3_Init+0xfc>)
 8005676:	f004 f86b 	bl	8009750 <HAL_TIM_PWM_ConfigChannel>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005680:	f000 fc6e 	bl	8005f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005684:	4803      	ldr	r0, [pc, #12]	; (8005694 <MX_TIM3_Init+0xfc>)
 8005686:	f000 fe55 	bl	8006334 <HAL_TIM_MspPostInit>

}
 800568a:	bf00      	nop
 800568c:	3738      	adds	r7, #56	; 0x38
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20002230 	.word	0x20002230
 8005698:	40000400 	.word	0x40000400

0800569c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08e      	sub	sp, #56	; 0x38
 80056a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	605a      	str	r2, [r3, #4]
 80056ac:	609a      	str	r2, [r3, #8]
 80056ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056b0:	f107 0320 	add.w	r3, r7, #32
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80056ba:	1d3b      	adds	r3, r7, #4
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	605a      	str	r2, [r3, #4]
 80056c2:	609a      	str	r2, [r3, #8]
 80056c4:	60da      	str	r2, [r3, #12]
 80056c6:	611a      	str	r2, [r3, #16]
 80056c8:	615a      	str	r2, [r3, #20]
 80056ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80056cc:	4b32      	ldr	r3, [pc, #200]	; (8005798 <MX_TIM4_Init+0xfc>)
 80056ce:	4a33      	ldr	r2, [pc, #204]	; (800579c <MX_TIM4_Init+0x100>)
 80056d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80056d2:	4b31      	ldr	r3, [pc, #196]	; (8005798 <MX_TIM4_Init+0xfc>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056d8:	4b2f      	ldr	r3, [pc, #188]	; (8005798 <MX_TIM4_Init+0xfc>)
 80056da:	2200      	movs	r2, #0
 80056dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 840-1;
 80056de:	4b2e      	ldr	r3, [pc, #184]	; (8005798 <MX_TIM4_Init+0xfc>)
 80056e0:	f240 3247 	movw	r2, #839	; 0x347
 80056e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056e6:	4b2c      	ldr	r3, [pc, #176]	; (8005798 <MX_TIM4_Init+0xfc>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056ec:	4b2a      	ldr	r3, [pc, #168]	; (8005798 <MX_TIM4_Init+0xfc>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80056f2:	4829      	ldr	r0, [pc, #164]	; (8005798 <MX_TIM4_Init+0xfc>)
 80056f4:	f003 fc6a 	bl	8008fcc <HAL_TIM_Base_Init>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80056fe:	f000 fc2f 	bl	8005f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005706:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005708:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800570c:	4619      	mov	r1, r3
 800570e:	4822      	ldr	r0, [pc, #136]	; (8005798 <MX_TIM4_Init+0xfc>)
 8005710:	f004 f8e0 	bl	80098d4 <HAL_TIM_ConfigClockSource>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800571a:	f000 fc21 	bl	8005f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800571e:	481e      	ldr	r0, [pc, #120]	; (8005798 <MX_TIM4_Init+0xfc>)
 8005720:	f003 fd7c 	bl	800921c <HAL_TIM_PWM_Init>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800572a:	f000 fc19 	bl	8005f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800572e:	2300      	movs	r3, #0
 8005730:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005732:	2300      	movs	r3, #0
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005736:	f107 0320 	add.w	r3, r7, #32
 800573a:	4619      	mov	r1, r3
 800573c:	4816      	ldr	r0, [pc, #88]	; (8005798 <MX_TIM4_Init+0xfc>)
 800573e:	f004 fcc9 	bl	800a0d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8005748:	f000 fc0a 	bl	8005f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800574c:	2360      	movs	r3, #96	; 0x60
 800574e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005750:	2300      	movs	r3, #0
 8005752:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005758:	2300      	movs	r3, #0
 800575a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800575c:	1d3b      	adds	r3, r7, #4
 800575e:	2200      	movs	r2, #0
 8005760:	4619      	mov	r1, r3
 8005762:	480d      	ldr	r0, [pc, #52]	; (8005798 <MX_TIM4_Init+0xfc>)
 8005764:	f003 fff4 	bl	8009750 <HAL_TIM_PWM_ConfigChannel>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800576e:	f000 fbf7 	bl	8005f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005772:	1d3b      	adds	r3, r7, #4
 8005774:	2204      	movs	r2, #4
 8005776:	4619      	mov	r1, r3
 8005778:	4807      	ldr	r0, [pc, #28]	; (8005798 <MX_TIM4_Init+0xfc>)
 800577a:	f003 ffe9 	bl	8009750 <HAL_TIM_PWM_ConfigChannel>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8005784:	f000 fbec 	bl	8005f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005788:	4803      	ldr	r0, [pc, #12]	; (8005798 <MX_TIM4_Init+0xfc>)
 800578a:	f000 fdd3 	bl	8006334 <HAL_TIM_MspPostInit>

}
 800578e:	bf00      	nop
 8005790:	3738      	adds	r7, #56	; 0x38
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20002278 	.word	0x20002278
 800579c:	40000800 	.word	0x40000800

080057a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057a6:	f107 0308 	add.w	r3, r7, #8
 80057aa:	2200      	movs	r2, #0
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	605a      	str	r2, [r3, #4]
 80057b0:	609a      	str	r2, [r3, #8]
 80057b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057b4:	463b      	mov	r3, r7
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80057bc:	4b1d      	ldr	r3, [pc, #116]	; (8005834 <MX_TIM5_Init+0x94>)
 80057be:	4a1e      	ldr	r2, [pc, #120]	; (8005838 <MX_TIM5_Init+0x98>)
 80057c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400-1;
 80057c2:	4b1c      	ldr	r3, [pc, #112]	; (8005834 <MX_TIM5_Init+0x94>)
 80057c4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80057c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057ca:	4b1a      	ldr	r3, [pc, #104]	; (8005834 <MX_TIM5_Init+0x94>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80057d0:	4b18      	ldr	r3, [pc, #96]	; (8005834 <MX_TIM5_Init+0x94>)
 80057d2:	f04f 32ff 	mov.w	r2, #4294967295
 80057d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057d8:	4b16      	ldr	r3, [pc, #88]	; (8005834 <MX_TIM5_Init+0x94>)
 80057da:	2200      	movs	r2, #0
 80057dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057de:	4b15      	ldr	r3, [pc, #84]	; (8005834 <MX_TIM5_Init+0x94>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80057e4:	4813      	ldr	r0, [pc, #76]	; (8005834 <MX_TIM5_Init+0x94>)
 80057e6:	f003 fbf1 	bl	8008fcc <HAL_TIM_Base_Init>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80057f0:	f000 fbb6 	bl	8005f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80057fa:	f107 0308 	add.w	r3, r7, #8
 80057fe:	4619      	mov	r1, r3
 8005800:	480c      	ldr	r0, [pc, #48]	; (8005834 <MX_TIM5_Init+0x94>)
 8005802:	f004 f867 	bl	80098d4 <HAL_TIM_ConfigClockSource>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800580c:	f000 fba8 	bl	8005f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005810:	2300      	movs	r3, #0
 8005812:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005814:	2300      	movs	r3, #0
 8005816:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005818:	463b      	mov	r3, r7
 800581a:	4619      	mov	r1, r3
 800581c:	4805      	ldr	r0, [pc, #20]	; (8005834 <MX_TIM5_Init+0x94>)
 800581e:	f004 fc59 	bl	800a0d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005828:	f000 fb9a 	bl	8005f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800582c:	bf00      	nop
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	200022c0 	.word	0x200022c0
 8005838:	40000c00 	.word	0x40000c00

0800583c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005842:	463b      	mov	r3, r7
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800584a:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <MX_TIM6_Init+0x64>)
 800584c:	4a15      	ldr	r2, [pc, #84]	; (80058a4 <MX_TIM6_Init+0x68>)
 800584e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 8005850:	4b13      	ldr	r3, [pc, #76]	; (80058a0 <MX_TIM6_Init+0x64>)
 8005852:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8005856:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005858:	4b11      	ldr	r3, [pc, #68]	; (80058a0 <MX_TIM6_Init+0x64>)
 800585a:	2200      	movs	r2, #0
 800585c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 800585e:	4b10      	ldr	r3, [pc, #64]	; (80058a0 <MX_TIM6_Init+0x64>)
 8005860:	22c7      	movs	r2, #199	; 0xc7
 8005862:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005864:	4b0e      	ldr	r3, [pc, #56]	; (80058a0 <MX_TIM6_Init+0x64>)
 8005866:	2200      	movs	r2, #0
 8005868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800586a:	480d      	ldr	r0, [pc, #52]	; (80058a0 <MX_TIM6_Init+0x64>)
 800586c:	f003 fbae 	bl	8008fcc <HAL_TIM_Base_Init>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005876:	f000 fb73 	bl	8005f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800587a:	2300      	movs	r3, #0
 800587c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800587e:	2300      	movs	r3, #0
 8005880:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005882:	463b      	mov	r3, r7
 8005884:	4619      	mov	r1, r3
 8005886:	4806      	ldr	r0, [pc, #24]	; (80058a0 <MX_TIM6_Init+0x64>)
 8005888:	f004 fc24 	bl	800a0d4 <HAL_TIMEx_MasterConfigSynchronization>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005892:	f000 fb65 	bl	8005f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20002308 	.word	0x20002308
 80058a4:	40001000 	.word	0x40001000

080058a8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b096      	sub	sp, #88	; 0x58
 80058ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	605a      	str	r2, [r3, #4]
 80058b8:	609a      	str	r2, [r3, #8]
 80058ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80058c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	605a      	str	r2, [r3, #4]
 80058d0:	609a      	str	r2, [r3, #8]
 80058d2:	60da      	str	r2, [r3, #12]
 80058d4:	611a      	str	r2, [r3, #16]
 80058d6:	615a      	str	r2, [r3, #20]
 80058d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80058da:	1d3b      	adds	r3, r7, #4
 80058dc:	2220      	movs	r2, #32
 80058de:	2100      	movs	r1, #0
 80058e0:	4618      	mov	r0, r3
 80058e2:	f005 fdbb 	bl	800b45c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80058e6:	4b3f      	ldr	r3, [pc, #252]	; (80059e4 <MX_TIM8_Init+0x13c>)
 80058e8:	4a3f      	ldr	r2, [pc, #252]	; (80059e8 <MX_TIM8_Init+0x140>)
 80058ea:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80058ec:	4b3d      	ldr	r3, [pc, #244]	; (80059e4 <MX_TIM8_Init+0x13c>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058f2:	4b3c      	ldr	r3, [pc, #240]	; (80059e4 <MX_TIM8_Init+0x13c>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16800-1;
 80058f8:	4b3a      	ldr	r3, [pc, #232]	; (80059e4 <MX_TIM8_Init+0x13c>)
 80058fa:	f244 129f 	movw	r2, #16799	; 0x419f
 80058fe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005900:	4b38      	ldr	r3, [pc, #224]	; (80059e4 <MX_TIM8_Init+0x13c>)
 8005902:	2200      	movs	r2, #0
 8005904:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005906:	4b37      	ldr	r3, [pc, #220]	; (80059e4 <MX_TIM8_Init+0x13c>)
 8005908:	2200      	movs	r2, #0
 800590a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800590c:	4b35      	ldr	r3, [pc, #212]	; (80059e4 <MX_TIM8_Init+0x13c>)
 800590e:	2200      	movs	r2, #0
 8005910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005912:	4834      	ldr	r0, [pc, #208]	; (80059e4 <MX_TIM8_Init+0x13c>)
 8005914:	f003 fb5a 	bl	8008fcc <HAL_TIM_Base_Init>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800591e:	f000 fb1f 	bl	8005f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005926:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005928:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800592c:	4619      	mov	r1, r3
 800592e:	482d      	ldr	r0, [pc, #180]	; (80059e4 <MX_TIM8_Init+0x13c>)
 8005930:	f003 ffd0 	bl	80098d4 <HAL_TIM_ConfigClockSource>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800593a:	f000 fb11 	bl	8005f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800593e:	4829      	ldr	r0, [pc, #164]	; (80059e4 <MX_TIM8_Init+0x13c>)
 8005940:	f003 fc6c 	bl	800921c <HAL_TIM_PWM_Init>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800594a:	f000 fb09 	bl	8005f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800594e:	2300      	movs	r3, #0
 8005950:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005952:	2300      	movs	r3, #0
 8005954:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005956:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800595a:	4619      	mov	r1, r3
 800595c:	4821      	ldr	r0, [pc, #132]	; (80059e4 <MX_TIM8_Init+0x13c>)
 800595e:	f004 fbb9 	bl	800a0d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8005968:	f000 fafa 	bl	8005f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800596c:	2360      	movs	r3, #96	; 0x60
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2100-1;
 8005970:	f640 0333 	movw	r3, #2099	; 0x833
 8005974:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005976:	2300      	movs	r3, #0
 8005978:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800597a:	2300      	movs	r3, #0
 800597c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800597e:	2300      	movs	r3, #0
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005982:	2300      	movs	r3, #0
 8005984:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005986:	2300      	movs	r3, #0
 8005988:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800598a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800598e:	2208      	movs	r2, #8
 8005990:	4619      	mov	r1, r3
 8005992:	4814      	ldr	r0, [pc, #80]	; (80059e4 <MX_TIM8_Init+0x13c>)
 8005994:	f003 fedc 	bl	8009750 <HAL_TIM_PWM_ConfigChannel>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800599e:	f000 fadf 	bl	8005f60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80059a2:	2300      	movs	r3, #0
 80059a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80059b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80059bc:	2300      	movs	r3, #0
 80059be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80059c0:	1d3b      	adds	r3, r7, #4
 80059c2:	4619      	mov	r1, r3
 80059c4:	4807      	ldr	r0, [pc, #28]	; (80059e4 <MX_TIM8_Init+0x13c>)
 80059c6:	f004 fc01 	bl	800a1cc <HAL_TIMEx_ConfigBreakDeadTime>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 80059d0:	f000 fac6 	bl	8005f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80059d4:	4803      	ldr	r0, [pc, #12]	; (80059e4 <MX_TIM8_Init+0x13c>)
 80059d6:	f000 fcad 	bl	8006334 <HAL_TIM_MspPostInit>

}
 80059da:	bf00      	nop
 80059dc:	3758      	adds	r7, #88	; 0x58
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20002350 	.word	0x20002350
 80059e8:	40010400 	.word	0x40010400

080059ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80059f0:	4b11      	ldr	r3, [pc, #68]	; (8005a38 <MX_USART1_UART_Init+0x4c>)
 80059f2:	4a12      	ldr	r2, [pc, #72]	; (8005a3c <MX_USART1_UART_Init+0x50>)
 80059f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1024000;
 80059f6:	4b10      	ldr	r3, [pc, #64]	; (8005a38 <MX_USART1_UART_Init+0x4c>)
 80059f8:	f44f 227a 	mov.w	r2, #1024000	; 0xfa000
 80059fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80059fe:	4b0e      	ldr	r3, [pc, #56]	; (8005a38 <MX_USART1_UART_Init+0x4c>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005a04:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <MX_USART1_UART_Init+0x4c>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005a0a:	4b0b      	ldr	r3, [pc, #44]	; (8005a38 <MX_USART1_UART_Init+0x4c>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005a10:	4b09      	ldr	r3, [pc, #36]	; (8005a38 <MX_USART1_UART_Init+0x4c>)
 8005a12:	220c      	movs	r2, #12
 8005a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a16:	4b08      	ldr	r3, [pc, #32]	; (8005a38 <MX_USART1_UART_Init+0x4c>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a1c:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <MX_USART1_UART_Init+0x4c>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005a22:	4805      	ldr	r0, [pc, #20]	; (8005a38 <MX_USART1_UART_Init+0x4c>)
 8005a24:	f004 fc38 	bl	800a298 <HAL_UART_Init>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005a2e:	f000 fa97 	bl	8005f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005a32:	bf00      	nop
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20002398 	.word	0x20002398
 8005a3c:	40011000 	.word	0x40011000

08005a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005a46:	2300      	movs	r3, #0
 8005a48:	607b      	str	r3, [r7, #4]
 8005a4a:	4b10      	ldr	r3, [pc, #64]	; (8005a8c <MX_DMA_Init+0x4c>)
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	4a0f      	ldr	r2, [pc, #60]	; (8005a8c <MX_DMA_Init+0x4c>)
 8005a50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a54:	6313      	str	r3, [r2, #48]	; 0x30
 8005a56:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <MX_DMA_Init+0x4c>)
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a5e:	607b      	str	r3, [r7, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8005a62:	2200      	movs	r2, #0
 8005a64:	2101      	movs	r1, #1
 8005a66:	2038      	movs	r0, #56	; 0x38
 8005a68:	f001 fd4f 	bl	800750a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005a6c:	2038      	movs	r0, #56	; 0x38
 8005a6e:	f001 fd68 	bl	8007542 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 8005a72:	2200      	movs	r2, #0
 8005a74:	2101      	movs	r1, #1
 8005a76:	203a      	movs	r0, #58	; 0x3a
 8005a78:	f001 fd47 	bl	800750a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005a7c:	203a      	movs	r0, #58	; 0x3a
 8005a7e:	f001 fd60 	bl	8007542 <HAL_NVIC_EnableIRQ>

}
 8005a82:	bf00      	nop
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40023800 	.word	0x40023800

08005a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08c      	sub	sp, #48	; 0x30
 8005a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a96:	f107 031c 	add.w	r3, r7, #28
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	605a      	str	r2, [r3, #4]
 8005aa0:	609a      	str	r2, [r3, #8]
 8005aa2:	60da      	str	r2, [r3, #12]
 8005aa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61bb      	str	r3, [r7, #24]
 8005aaa:	4b4c      	ldr	r3, [pc, #304]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	4a4b      	ldr	r2, [pc, #300]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ab6:	4b49      	ldr	r3, [pc, #292]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abe:	61bb      	str	r3, [r7, #24]
 8005ac0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	4b45      	ldr	r3, [pc, #276]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aca:	4a44      	ldr	r2, [pc, #272]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005acc:	f043 0304 	orr.w	r3, r3, #4
 8005ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ad2:	4b42      	ldr	r3, [pc, #264]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ade:	2300      	movs	r3, #0
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	4b3e      	ldr	r3, [pc, #248]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae6:	4a3d      	ldr	r2, [pc, #244]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005ae8:	f043 0301 	orr.w	r3, r3, #1
 8005aec:	6313      	str	r3, [r2, #48]	; 0x30
 8005aee:	4b3b      	ldr	r3, [pc, #236]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	4b37      	ldr	r3, [pc, #220]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	4a36      	ldr	r2, [pc, #216]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005b04:	f043 0302 	orr.w	r3, r3, #2
 8005b08:	6313      	str	r3, [r2, #48]	; 0x30
 8005b0a:	4b34      	ldr	r3, [pc, #208]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005b16:	2300      	movs	r3, #0
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	4b30      	ldr	r3, [pc, #192]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1e:	4a2f      	ldr	r2, [pc, #188]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005b20:	f043 0310 	orr.w	r3, r3, #16
 8005b24:	6313      	str	r3, [r2, #48]	; 0x30
 8005b26:	4b2d      	ldr	r3, [pc, #180]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	60bb      	str	r3, [r7, #8]
 8005b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b32:	2300      	movs	r3, #0
 8005b34:	607b      	str	r3, [r7, #4]
 8005b36:	4b29      	ldr	r3, [pc, #164]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	4a28      	ldr	r2, [pc, #160]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005b3c:	f043 0308 	orr.w	r3, r3, #8
 8005b40:	6313      	str	r3, [r2, #48]	; 0x30
 8005b42:	4b26      	ldr	r3, [pc, #152]	; (8005bdc <MX_GPIO_Init+0x14c>)
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	607b      	str	r3, [r7, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GateH1_A_Pin|GateH1_B_Pin, GPIO_PIN_SET);
 8005b4e:	2201      	movs	r2, #1
 8005b50:	2130      	movs	r1, #48	; 0x30
 8005b52:	4823      	ldr	r0, [pc, #140]	; (8005be0 <MX_GPIO_Init+0x150>)
 8005b54:	f002 fd76 	bl	8008644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Gates1_A_Dis_Pin|Gates1_B_Dis_Pin|Gates2_A_Dis_Pin|Gates2_B_Dis_Pin, GPIO_PIN_SET);
 8005b58:	2201      	movs	r2, #1
 8005b5a:	210f      	movs	r1, #15
 8005b5c:	4821      	ldr	r0, [pc, #132]	; (8005be4 <MX_GPIO_Init+0x154>)
 8005b5e:	f002 fd71 	bl	8008644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GateH2_A_Pin|GateH2_B_Pin, GPIO_PIN_SET);
 8005b62:	2201      	movs	r2, #1
 8005b64:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8005b68:	481f      	ldr	r0, [pc, #124]	; (8005be8 <MX_GPIO_Init+0x158>)
 8005b6a:	f002 fd6b 	bl	8008644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disable_DC_DC_GPIO_Port, Disable_DC_DC_Pin, GPIO_PIN_RESET);
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b74:	481a      	ldr	r0, [pc, #104]	; (8005be0 <MX_GPIO_Init+0x150>)
 8005b76:	f002 fd65 	bl	8008644 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GateH1_A_Pin GateH1_B_Pin Disable_DC_DC_Pin */
  GPIO_InitStruct.Pin = GateH1_A_Pin|GateH1_B_Pin|Disable_DC_DC_Pin;
 8005b7a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8005b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b80:	2301      	movs	r3, #1
 8005b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b84:	2300      	movs	r3, #0
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b8c:	f107 031c 	add.w	r3, r7, #28
 8005b90:	4619      	mov	r1, r3
 8005b92:	4813      	ldr	r0, [pc, #76]	; (8005be0 <MX_GPIO_Init+0x150>)
 8005b94:	f002 fbba 	bl	800830c <HAL_GPIO_Init>

  /*Configure GPIO pins : Gates1_A_Dis_Pin Gates1_B_Dis_Pin Gates2_A_Dis_Pin Gates2_B_Dis_Pin */
  GPIO_InitStruct.Pin = Gates1_A_Dis_Pin|Gates1_B_Dis_Pin|Gates2_A_Dis_Pin|Gates2_B_Dis_Pin;
 8005b98:	230f      	movs	r3, #15
 8005b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ba8:	f107 031c 	add.w	r3, r7, #28
 8005bac:	4619      	mov	r1, r3
 8005bae:	480d      	ldr	r0, [pc, #52]	; (8005be4 <MX_GPIO_Init+0x154>)
 8005bb0:	f002 fbac 	bl	800830c <HAL_GPIO_Init>

  /*Configure GPIO pins : GateH2_A_Pin GateH2_B_Pin */
  GPIO_InitStruct.Pin = GateH2_A_Pin|GateH2_B_Pin;
 8005bb4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005bc6:	f107 031c 	add.w	r3, r7, #28
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4806      	ldr	r0, [pc, #24]	; (8005be8 <MX_GPIO_Init+0x158>)
 8005bce:	f002 fb9d 	bl	800830c <HAL_GPIO_Init>

}
 8005bd2:	bf00      	nop
 8005bd4:	3730      	adds	r7, #48	; 0x30
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	40020800 	.word	0x40020800
 8005be4:	40020400 	.word	0x40020400
 8005be8:	40020c00 	.word	0x40020c00
 8005bec:	00000000 	.word	0x00000000

08005bf0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8005bf0:	b5b0      	push	{r4, r5, r7, lr}
 8005bf2:	ed2d 8b02 	vpush	{d8}
 8005bf6:	b092      	sub	sp, #72	; 0x48
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]

	if(htim == &htim1) {
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4ace      	ldr	r2, [pc, #824]	; (8005f38 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d159      	bne.n	8005cb8 <HAL_TIM_PeriodElapsedCallback+0xc8>
		uint32_t temp = __HAL_TIM_GET_COUNTER(&htim2);
 8005c04:	4bcd      	ldr	r3, [pc, #820]	; (8005f3c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	63bb      	str	r3, [r7, #56]	; 0x38
		uint32_t delta = temp - counterValue;
 8005c0c:	4bcc      	ldr	r3, [pc, #816]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
		if(delta < 0.05 * TimerFreq) {
 8005c16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005c18:	f7fa fc84 	bl	8000524 <__aeabi_ui2d>
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	460d      	mov	r5, r1
 8005c20:	4bc8      	ldr	r3, [pc, #800]	; (8005f44 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fa fc7d 	bl	8000524 <__aeabi_ui2d>
 8005c2a:	a3c1      	add	r3, pc, #772	; (adr r3, 8005f30 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	f7fa fcf2 	bl	8000618 <__aeabi_dmul>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4620      	mov	r0, r4
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	f7fa ff5e 	bl	8000afc <__aeabi_dcmplt>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d006      	beq.n	8005c54 <HAL_TIM_PeriodElapsedCallback+0x64>
			periodElapsed++;
 8005c46:	4bc0      	ldr	r3, [pc, #768]	; (8005f48 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	4bbe      	ldr	r3, [pc, #760]	; (8005f48 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8005c50:	701a      	strb	r2, [r3, #0]
		setTemp4((valueTypes)(getTempPt1000(ADC2res[3]/100.0f * getTemp4_coeff().val_float)));

		setPWM();
	}

}
 8005c52:	e165      	b.n	8005f20 <HAL_TIM_PeriodElapsedCallback+0x330>
			float freq = ((float)counterPeriod + 1) / (temp - counterValue) * (float)TimerFreq * (periodElapsed + 1);
 8005c54:	4bbd      	ldr	r3, [pc, #756]	; (8005f4c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	ee07 3a90 	vmov	s15, r3
 8005c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c64:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005c68:	4bb5      	ldr	r3, [pc, #724]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	ee07 3a90 	vmov	s15, r3
 8005c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c7c:	4bb1      	ldr	r3, [pc, #708]	; (8005f44 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	ee07 3a90 	vmov	s15, r3
 8005c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c8c:	4bae      	ldr	r3, [pc, #696]	; (8005f48 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	3301      	adds	r3, #1
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			setFreq((valueTypes)freq);
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe f833 	bl	8003d10 <setFreq>
			counterValue = temp;
 8005caa:	4aa5      	ldr	r2, [pc, #660]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8005cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cae:	6013      	str	r3, [r2, #0]
			periodElapsed = 0;
 8005cb0:	4ba5      	ldr	r3, [pc, #660]	; (8005f48 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
}
 8005cb6:	e133      	b.n	8005f20 <HAL_TIM_PeriodElapsedCallback+0x330>
	else if(htim == &htim6) {
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4aa5      	ldr	r2, [pc, #660]	; (8005f50 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	f040 812f 	bne.w	8005f20 <HAL_TIM_PeriodElapsedCallback+0x330>
		float ADC1res[6] = {0};
 8005cc2:	f107 0318 	add.w	r3, r7, #24
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	605a      	str	r2, [r3, #4]
 8005ccc:	609a      	str	r2, [r3, #8]
 8005cce:	60da      	str	r2, [r3, #12]
 8005cd0:	611a      	str	r2, [r3, #16]
 8005cd2:	615a      	str	r2, [r3, #20]
		float ADC2res[4] = {0};
 8005cd4:	f107 0308 	add.w	r3, r7, #8
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	605a      	str	r2, [r3, #4]
 8005cde:	609a      	str	r2, [r3, #8]
 8005ce0:	60da      	str	r2, [r3, #12]
		for(int i = 0; i < 100; i++) {
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ce6:	e04e      	b.n	8005d86 <HAL_TIM_PeriodElapsedCallback+0x196>
			for(int j = 0; j < 6; j++) {
 8005ce8:	2300      	movs	r3, #0
 8005cea:	643b      	str	r3, [r7, #64]	; 0x40
 8005cec:	e021      	b.n	8005d32 <HAL_TIM_PeriodElapsedCallback+0x142>
				ADC1res[j] += dmaADC1buffer[i*6+j];
 8005cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	3348      	adds	r3, #72	; 0x48
 8005cf4:	443b      	add	r3, r7
 8005cf6:	3b30      	subs	r3, #48	; 0x30
 8005cf8:	ed93 7a00 	vldr	s14, [r3]
 8005cfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cfe:	4613      	mov	r3, r2
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	4413      	add	r3, r2
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	461a      	mov	r2, r3
 8005d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d0a:	4413      	add	r3, r2
 8005d0c:	4a91      	ldr	r2, [pc, #580]	; (8005f54 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8005d0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	3348      	adds	r3, #72	; 0x48
 8005d24:	443b      	add	r3, r7
 8005d26:	3b30      	subs	r3, #48	; 0x30
 8005d28:	edc3 7a00 	vstr	s15, [r3]
			for(int j = 0; j < 6; j++) {
 8005d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d2e:	3301      	adds	r3, #1
 8005d30:	643b      	str	r3, [r7, #64]	; 0x40
 8005d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d34:	2b05      	cmp	r3, #5
 8005d36:	ddda      	ble.n	8005cee <HAL_TIM_PeriodElapsedCallback+0xfe>
			for(int j = 0; j < 4; j++) {
 8005d38:	2300      	movs	r3, #0
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d3c:	e01d      	b.n	8005d7a <HAL_TIM_PeriodElapsedCallback+0x18a>
				ADC2res[j] += dmaADC2buffer[i*4+j];
 8005d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	3348      	adds	r3, #72	; 0x48
 8005d44:	443b      	add	r3, r7
 8005d46:	3b40      	subs	r3, #64	; 0x40
 8005d48:	ed93 7a00 	vldr	s14, [r3]
 8005d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d4e:	009a      	lsls	r2, r3, #2
 8005d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d52:	4413      	add	r3, r2
 8005d54:	4a80      	ldr	r2, [pc, #512]	; (8005f58 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8005d56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	3348      	adds	r3, #72	; 0x48
 8005d6c:	443b      	add	r3, r7
 8005d6e:	3b40      	subs	r3, #64	; 0x40
 8005d70:	edc3 7a00 	vstr	s15, [r3]
			for(int j = 0; j < 4; j++) {
 8005d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d76:	3301      	adds	r3, #1
 8005d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	ddde      	ble.n	8005d3e <HAL_TIM_PeriodElapsedCallback+0x14e>
		for(int i = 0; i < 100; i++) {
 8005d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d82:	3301      	adds	r3, #1
 8005d84:	647b      	str	r3, [r7, #68]	; 0x44
 8005d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d88:	2b63      	cmp	r3, #99	; 0x63
 8005d8a:	ddad      	ble.n	8005ce8 <HAL_TIM_PeriodElapsedCallback+0xf8>
		setU_24Vmeas((valueTypes)(ADC1res[0]/100.0f * getU_24Vcoeff().val_float));
 8005d8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d90:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8005f5c <HAL_TIM_PeriodElapsedCallback+0x36c>
 8005d94:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8005d98:	f7fc fc40 	bl	800261c <getU_24Vcoeff>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005da6:	ee17 3a90 	vmov	r3, s15
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fc fbf4 	bl	8002598 <setU_24Vmeas>
		setU_HeaterMeas((valueTypes)(ADC1res[1]/100.0f * getU_HeaterCoeff().val_float));
 8005db0:	edd7 7a07 	vldr	s15, [r7, #28]
 8005db4:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8005f5c <HAL_TIM_PeriodElapsedCallback+0x36c>
 8005db8:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8005dbc:	f7fc fc7c 	bl	80026b8 <getU_HeaterCoeff>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005dca:	ee17 3a90 	vmov	r3, s15
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fc fc30 	bl	8002634 <setU_HeaterMeas>
		setI_1A((valueTypes)(ADC1res[2]/100.0f * getI_1A_Coeff().val_float));
 8005dd4:	edd7 7a08 	vldr	s15, [r7, #32]
 8005dd8:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8005f5c <HAL_TIM_PeriodElapsedCallback+0x36c>
 8005ddc:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8005de0:	f7fc fd70 	bl	80028c4 <getI_1A_Coeff>
 8005de4:	4603      	mov	r3, r0
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005dee:	ee17 3a90 	vmov	r3, s15
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fc fcd0 	bl	8002798 <setI_1A>
		setI_1B((valueTypes)(ADC1res[3]/100.0f * getI_1B_Coeff().val_float));
 8005df8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005dfc:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8005f5c <HAL_TIM_PeriodElapsedCallback+0x36c>
 8005e00:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8005e04:	f7fc fd90 	bl	8002928 <getI_1B_Coeff>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005e12:	ee17 3a90 	vmov	r3, s15
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fc fcda 	bl	80027d0 <setI_1B>
		setI_2A((valueTypes)(ADC1res[4]/100.0f * getI_2A_Coeff().val_float));
 8005e1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e20:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8005f5c <HAL_TIM_PeriodElapsedCallback+0x36c>
 8005e24:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8005e28:	f7fc fdb0 	bl	800298c <getI_2A_Coeff>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005e36:	ee17 3a90 	vmov	r3, s15
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fc fce4 	bl	8002808 <setI_2A>
		setI_2B((valueTypes)(ADC1res[5]/100.0f * getI_2B_Coeff().val_float));
 8005e40:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005e44:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8005f5c <HAL_TIM_PeriodElapsedCallback+0x36c>
 8005e48:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8005e4c:	f7fc fdd0 	bl	80029f0 <getI_2B_Coeff>
 8005e50:	4603      	mov	r3, r0
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005e5a:	ee17 3a90 	vmov	r3, s15
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fc fcee 	bl	8002840 <setI_2B>
		setTemp1((valueTypes)(getTemp3455(ADC2res[0]/100.0f * getTemp1_coeff().val_float)));
 8005e64:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e68:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8005f5c <HAL_TIM_PeriodElapsedCallback+0x36c>
 8005e6c:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8005e70:	f7fc ff28 	bl	8002cc4 <getTemp1_coeff>
 8005e74:	4603      	mov	r3, r0
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8005e82:	f000 fc8f 	bl	80067a4 <getTemp3455>
 8005e86:	ed87 0a00 	vstr	s0, [r7]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7fc fe83 	bl	8002b98 <setTemp1>
		setTemp2((valueTypes)(getTemp3455(ADC2res[1]/100.0f * getTemp2_coeff().val_float)));
 8005e92:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e96:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005f5c <HAL_TIM_PeriodElapsedCallback+0x36c>
 8005e9a:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8005e9e:	f7fc ff43 	bl	8002d28 <getTemp2_coeff>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	ee07 3a90 	vmov	s15, r3
 8005ea8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005eac:	eeb0 0a67 	vmov.f32	s0, s15
 8005eb0:	f000 fc78 	bl	80067a4 <getTemp3455>
 8005eb4:	ed87 0a00 	vstr	s0, [r7]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fc fe88 	bl	8002bd0 <setTemp2>
		setTemp3((valueTypes)(getTempPt1000(ADC2res[2]/100.0f * getTemp3_coeff().val_float)));
 8005ec0:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ec4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8005f5c <HAL_TIM_PeriodElapsedCallback+0x36c>
 8005ec8:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8005ecc:	f7fc ff5e 	bl	8002d8c <getTemp3_coeff>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005eda:	eeb0 0a67 	vmov.f32	s0, s15
 8005ede:	f000 fd01 	bl	80068e4 <getTempPt1000>
 8005ee2:	ed87 0a00 	vstr	s0, [r7]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fc fe8d 	bl	8002c08 <setTemp3>
		setTemp4((valueTypes)(getTempPt1000(ADC2res[3]/100.0f * getTemp4_coeff().val_float)));
 8005eee:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ef2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005f5c <HAL_TIM_PeriodElapsedCallback+0x36c>
 8005ef6:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8005efa:	f7fc ff79 	bl	8002df0 <getTemp4_coeff>
 8005efe:	4603      	mov	r3, r0
 8005f00:	ee07 3a90 	vmov	s15, r3
 8005f04:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005f08:	eeb0 0a67 	vmov.f32	s0, s15
 8005f0c:	f000 fcea 	bl	80068e4 <getTempPt1000>
 8005f10:	ed87 0a00 	vstr	s0, [r7]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fc fe92 	bl	8002c40 <setTemp4>
		setPWM();
 8005f1c:	f7fb fcfc 	bl	8001918 <setPWM>
}
 8005f20:	bf00      	nop
 8005f22:	3748      	adds	r7, #72	; 0x48
 8005f24:	46bd      	mov	sp, r7
 8005f26:	ecbd 8b02 	vpop	{d8}
 8005f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8005f2c:	f3af 8000 	nop.w
 8005f30:	9999999a 	.word	0x9999999a
 8005f34:	3fa99999 	.word	0x3fa99999
 8005f38:	200021a0 	.word	0x200021a0
 8005f3c:	200021e8 	.word	0x200021e8
 8005f40:	200023e0 	.word	0x200023e0
 8005f44:	200012e4 	.word	0x200012e4
 8005f48:	200023e4 	.word	0x200023e4
 8005f4c:	200023dc 	.word	0x200023dc
 8005f50:	20002308 	.word	0x20002308
 8005f54:	200023e8 	.word	0x200023e8
 8005f58:	20002898 	.word	0x20002898
 8005f5c:	42c80000 	.word	0x42c80000

08005f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005f64:	b672      	cpsid	i
}
 8005f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  UARTtransmit("Hard fault! Something went wrong.");
 8005f68:	4801      	ldr	r0, [pc, #4]	; (8005f70 <Error_Handler+0x10>)
 8005f6a:	f7fe f829 	bl	8003fc0 <UARTtransmit>
 8005f6e:	e7fb      	b.n	8005f68 <Error_Handler+0x8>
 8005f70:	08010900 	.word	0x08010900

08005f74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	607b      	str	r3, [r7, #4]
 8005f7e:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f82:	4a0f      	ldr	r2, [pc, #60]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f88:	6453      	str	r3, [r2, #68]	; 0x44
 8005f8a:	4b0d      	ldr	r3, [pc, #52]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f92:	607b      	str	r3, [r7, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f96:	2300      	movs	r3, #0
 8005f98:	603b      	str	r3, [r7, #0]
 8005f9a:	4b09      	ldr	r3, [pc, #36]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	4a08      	ldr	r2, [pc, #32]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fa6:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <HAL_MspInit+0x4c>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	40023800 	.word	0x40023800

08005fc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08c      	sub	sp, #48	; 0x30
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fcc:	f107 031c 	add.w	r3, r7, #28
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	605a      	str	r2, [r3, #4]
 8005fd6:	609a      	str	r2, [r3, #8]
 8005fd8:	60da      	str	r2, [r3, #12]
 8005fda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a5e      	ldr	r2, [pc, #376]	; (800615c <HAL_ADC_MspInit+0x198>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d158      	bne.n	8006098 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	4b5d      	ldr	r3, [pc, #372]	; (8006160 <HAL_ADC_MspInit+0x19c>)
 8005fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fee:	4a5c      	ldr	r2, [pc, #368]	; (8006160 <HAL_ADC_MspInit+0x19c>)
 8005ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ff6:	4b5a      	ldr	r3, [pc, #360]	; (8006160 <HAL_ADC_MspInit+0x19c>)
 8005ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffe:	61bb      	str	r3, [r7, #24]
 8006000:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]
 8006006:	4b56      	ldr	r3, [pc, #344]	; (8006160 <HAL_ADC_MspInit+0x19c>)
 8006008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600a:	4a55      	ldr	r2, [pc, #340]	; (8006160 <HAL_ADC_MspInit+0x19c>)
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	6313      	str	r3, [r2, #48]	; 0x30
 8006012:	4b53      	ldr	r3, [pc, #332]	; (8006160 <HAL_ADC_MspInit+0x19c>)
 8006014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	697b      	ldr	r3, [r7, #20]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = U_Heater_Meas_Pin|U_POWER_Meas_Pin|CurrMeas1_A_Pin|CurrMeas1_B_Pin
 800601e:	233f      	movs	r3, #63	; 0x3f
 8006020:	61fb      	str	r3, [r7, #28]
                          |CurrMeas2_A_Pin|CurrMeas2_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006022:	2303      	movs	r3, #3
 8006024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006026:	2300      	movs	r3, #0
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800602a:	f107 031c 	add.w	r3, r7, #28
 800602e:	4619      	mov	r1, r3
 8006030:	484c      	ldr	r0, [pc, #304]	; (8006164 <HAL_ADC_MspInit+0x1a0>)
 8006032:	f002 f96b 	bl	800830c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8006036:	4b4c      	ldr	r3, [pc, #304]	; (8006168 <HAL_ADC_MspInit+0x1a4>)
 8006038:	4a4c      	ldr	r2, [pc, #304]	; (800616c <HAL_ADC_MspInit+0x1a8>)
 800603a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800603c:	4b4a      	ldr	r3, [pc, #296]	; (8006168 <HAL_ADC_MspInit+0x1a4>)
 800603e:	2200      	movs	r2, #0
 8006040:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006042:	4b49      	ldr	r3, [pc, #292]	; (8006168 <HAL_ADC_MspInit+0x1a4>)
 8006044:	2200      	movs	r2, #0
 8006046:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006048:	4b47      	ldr	r3, [pc, #284]	; (8006168 <HAL_ADC_MspInit+0x1a4>)
 800604a:	2200      	movs	r2, #0
 800604c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800604e:	4b46      	ldr	r3, [pc, #280]	; (8006168 <HAL_ADC_MspInit+0x1a4>)
 8006050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006054:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006056:	4b44      	ldr	r3, [pc, #272]	; (8006168 <HAL_ADC_MspInit+0x1a4>)
 8006058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800605c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800605e:	4b42      	ldr	r3, [pc, #264]	; (8006168 <HAL_ADC_MspInit+0x1a4>)
 8006060:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006064:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006066:	4b40      	ldr	r3, [pc, #256]	; (8006168 <HAL_ADC_MspInit+0x1a4>)
 8006068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800606c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800606e:	4b3e      	ldr	r3, [pc, #248]	; (8006168 <HAL_ADC_MspInit+0x1a4>)
 8006070:	2200      	movs	r2, #0
 8006072:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006074:	4b3c      	ldr	r3, [pc, #240]	; (8006168 <HAL_ADC_MspInit+0x1a4>)
 8006076:	2200      	movs	r2, #0
 8006078:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800607a:	483b      	ldr	r0, [pc, #236]	; (8006168 <HAL_ADC_MspInit+0x1a4>)
 800607c:	f001 fa7c 	bl	8007578 <HAL_DMA_Init>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8006086:	f7ff ff6b 	bl	8005f60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a36      	ldr	r2, [pc, #216]	; (8006168 <HAL_ADC_MspInit+0x1a4>)
 800608e:	639a      	str	r2, [r3, #56]	; 0x38
 8006090:	4a35      	ldr	r2, [pc, #212]	; (8006168 <HAL_ADC_MspInit+0x1a4>)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006096:	e05d      	b.n	8006154 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a34      	ldr	r2, [pc, #208]	; (8006170 <HAL_ADC_MspInit+0x1ac>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d158      	bne.n	8006154 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80060a2:	2300      	movs	r3, #0
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	4b2e      	ldr	r3, [pc, #184]	; (8006160 <HAL_ADC_MspInit+0x19c>)
 80060a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060aa:	4a2d      	ldr	r2, [pc, #180]	; (8006160 <HAL_ADC_MspInit+0x19c>)
 80060ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060b0:	6453      	str	r3, [r2, #68]	; 0x44
 80060b2:	4b2b      	ldr	r3, [pc, #172]	; (8006160 <HAL_ADC_MspInit+0x19c>)
 80060b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060ba:	613b      	str	r3, [r7, #16]
 80060bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	4b27      	ldr	r3, [pc, #156]	; (8006160 <HAL_ADC_MspInit+0x19c>)
 80060c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c6:	4a26      	ldr	r2, [pc, #152]	; (8006160 <HAL_ADC_MspInit+0x19c>)
 80060c8:	f043 0304 	orr.w	r3, r3, #4
 80060cc:	6313      	str	r3, [r2, #48]	; 0x30
 80060ce:	4b24      	ldr	r3, [pc, #144]	; (8006160 <HAL_ADC_MspInit+0x19c>)
 80060d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TempMeas1_Pin|TempMeas2_Pin|TempMeas3_Pin|TempMeas4_Pin;
 80060da:	230f      	movs	r3, #15
 80060dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060de:	2303      	movs	r3, #3
 80060e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060e6:	f107 031c 	add.w	r3, r7, #28
 80060ea:	4619      	mov	r1, r3
 80060ec:	4821      	ldr	r0, [pc, #132]	; (8006174 <HAL_ADC_MspInit+0x1b0>)
 80060ee:	f002 f90d 	bl	800830c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80060f2:	4b21      	ldr	r3, [pc, #132]	; (8006178 <HAL_ADC_MspInit+0x1b4>)
 80060f4:	4a21      	ldr	r2, [pc, #132]	; (800617c <HAL_ADC_MspInit+0x1b8>)
 80060f6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80060f8:	4b1f      	ldr	r3, [pc, #124]	; (8006178 <HAL_ADC_MspInit+0x1b4>)
 80060fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060fe:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006100:	4b1d      	ldr	r3, [pc, #116]	; (8006178 <HAL_ADC_MspInit+0x1b4>)
 8006102:	2200      	movs	r2, #0
 8006104:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006106:	4b1c      	ldr	r3, [pc, #112]	; (8006178 <HAL_ADC_MspInit+0x1b4>)
 8006108:	2200      	movs	r2, #0
 800610a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800610c:	4b1a      	ldr	r3, [pc, #104]	; (8006178 <HAL_ADC_MspInit+0x1b4>)
 800610e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006112:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006114:	4b18      	ldr	r3, [pc, #96]	; (8006178 <HAL_ADC_MspInit+0x1b4>)
 8006116:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800611a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800611c:	4b16      	ldr	r3, [pc, #88]	; (8006178 <HAL_ADC_MspInit+0x1b4>)
 800611e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006122:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006124:	4b14      	ldr	r3, [pc, #80]	; (8006178 <HAL_ADC_MspInit+0x1b4>)
 8006126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800612a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800612c:	4b12      	ldr	r3, [pc, #72]	; (8006178 <HAL_ADC_MspInit+0x1b4>)
 800612e:	2200      	movs	r2, #0
 8006130:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006132:	4b11      	ldr	r3, [pc, #68]	; (8006178 <HAL_ADC_MspInit+0x1b4>)
 8006134:	2200      	movs	r2, #0
 8006136:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006138:	480f      	ldr	r0, [pc, #60]	; (8006178 <HAL_ADC_MspInit+0x1b4>)
 800613a:	f001 fa1d 	bl	8007578 <HAL_DMA_Init>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8006144:	f7ff ff0c 	bl	8005f60 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a0b      	ldr	r2, [pc, #44]	; (8006178 <HAL_ADC_MspInit+0x1b4>)
 800614c:	639a      	str	r2, [r3, #56]	; 0x38
 800614e:	4a0a      	ldr	r2, [pc, #40]	; (8006178 <HAL_ADC_MspInit+0x1b4>)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006154:	bf00      	nop
 8006156:	3730      	adds	r7, #48	; 0x30
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	40012000 	.word	0x40012000
 8006160:	40023800 	.word	0x40023800
 8006164:	40020000 	.word	0x40020000
 8006168:	200020d4 	.word	0x200020d4
 800616c:	40026410 	.word	0x40026410
 8006170:	40012100 	.word	0x40012100
 8006174:	40020800 	.word	0x40020800
 8006178:	20002134 	.word	0x20002134
 800617c:	40026440 	.word	0x40026440

08006180 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b090      	sub	sp, #64	; 0x40
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006188:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800618c:	2200      	movs	r2, #0
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	605a      	str	r2, [r3, #4]
 8006192:	609a      	str	r2, [r3, #8]
 8006194:	60da      	str	r2, [r3, #12]
 8006196:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a5d      	ldr	r2, [pc, #372]	; (8006314 <HAL_TIM_Base_MspInit+0x194>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d134      	bne.n	800620c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80061a2:	2300      	movs	r3, #0
 80061a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061a6:	4b5c      	ldr	r3, [pc, #368]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 80061a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061aa:	4a5b      	ldr	r2, [pc, #364]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 80061ac:	f043 0301 	orr.w	r3, r3, #1
 80061b0:	6453      	str	r3, [r2, #68]	; 0x44
 80061b2:	4b59      	ldr	r3, [pc, #356]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 80061b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80061be:	2300      	movs	r3, #0
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
 80061c2:	4b55      	ldr	r3, [pc, #340]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 80061c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c6:	4a54      	ldr	r2, [pc, #336]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 80061c8:	f043 0310 	orr.w	r3, r3, #16
 80061cc:	6313      	str	r3, [r2, #48]	; 0x30
 80061ce:	4b52      	ldr	r3, [pc, #328]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 80061d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d2:	f003 0310 	and.w	r3, r3, #16
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80061da:	2380      	movs	r3, #128	; 0x80
 80061dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061de:	2302      	movs	r3, #2
 80061e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061e6:	2300      	movs	r3, #0
 80061e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80061ea:	2301      	movs	r3, #1
 80061ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80061ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061f2:	4619      	mov	r1, r3
 80061f4:	4849      	ldr	r0, [pc, #292]	; (800631c <HAL_TIM_Base_MspInit+0x19c>)
 80061f6:	f002 f889 	bl	800830c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80061fa:	2200      	movs	r2, #0
 80061fc:	2100      	movs	r1, #0
 80061fe:	2019      	movs	r0, #25
 8006200:	f001 f983 	bl	800750a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006204:	2019      	movs	r0, #25
 8006206:	f001 f99c 	bl	8007542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800620a:	e07e      	b.n	800630a <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM2)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006214:	d10e      	bne.n	8006234 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006216:	2300      	movs	r3, #0
 8006218:	623b      	str	r3, [r7, #32]
 800621a:	4b3f      	ldr	r3, [pc, #252]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	4a3e      	ldr	r2, [pc, #248]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 8006220:	f043 0301 	orr.w	r3, r3, #1
 8006224:	6413      	str	r3, [r2, #64]	; 0x40
 8006226:	4b3c      	ldr	r3, [pc, #240]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	623b      	str	r3, [r7, #32]
 8006230:	6a3b      	ldr	r3, [r7, #32]
}
 8006232:	e06a      	b.n	800630a <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM3)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a39      	ldr	r2, [pc, #228]	; (8006320 <HAL_TIM_Base_MspInit+0x1a0>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d10e      	bne.n	800625c <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800623e:	2300      	movs	r3, #0
 8006240:	61fb      	str	r3, [r7, #28]
 8006242:	4b35      	ldr	r3, [pc, #212]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	4a34      	ldr	r2, [pc, #208]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 8006248:	f043 0302 	orr.w	r3, r3, #2
 800624c:	6413      	str	r3, [r2, #64]	; 0x40
 800624e:	4b32      	ldr	r3, [pc, #200]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	61fb      	str	r3, [r7, #28]
 8006258:	69fb      	ldr	r3, [r7, #28]
}
 800625a:	e056      	b.n	800630a <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM4)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a30      	ldr	r2, [pc, #192]	; (8006324 <HAL_TIM_Base_MspInit+0x1a4>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d10e      	bne.n	8006284 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006266:	2300      	movs	r3, #0
 8006268:	61bb      	str	r3, [r7, #24]
 800626a:	4b2b      	ldr	r3, [pc, #172]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	4a2a      	ldr	r2, [pc, #168]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 8006270:	f043 0304 	orr.w	r3, r3, #4
 8006274:	6413      	str	r3, [r2, #64]	; 0x40
 8006276:	4b28      	ldr	r3, [pc, #160]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	61bb      	str	r3, [r7, #24]
 8006280:	69bb      	ldr	r3, [r7, #24]
}
 8006282:	e042      	b.n	800630a <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM5)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a27      	ldr	r2, [pc, #156]	; (8006328 <HAL_TIM_Base_MspInit+0x1a8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d10e      	bne.n	80062ac <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800628e:	2300      	movs	r3, #0
 8006290:	617b      	str	r3, [r7, #20]
 8006292:	4b21      	ldr	r3, [pc, #132]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	4a20      	ldr	r2, [pc, #128]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 8006298:	f043 0308 	orr.w	r3, r3, #8
 800629c:	6413      	str	r3, [r2, #64]	; 0x40
 800629e:	4b1e      	ldr	r3, [pc, #120]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	697b      	ldr	r3, [r7, #20]
}
 80062aa:	e02e      	b.n	800630a <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM6)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a1e      	ldr	r2, [pc, #120]	; (800632c <HAL_TIM_Base_MspInit+0x1ac>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d116      	bne.n	80062e4 <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80062b6:	2300      	movs	r3, #0
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	4b17      	ldr	r3, [pc, #92]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	4a16      	ldr	r2, [pc, #88]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 80062c0:	f043 0310 	orr.w	r3, r3, #16
 80062c4:	6413      	str	r3, [r2, #64]	; 0x40
 80062c6:	4b14      	ldr	r3, [pc, #80]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	f003 0310 	and.w	r3, r3, #16
 80062ce:	613b      	str	r3, [r7, #16]
 80062d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80062d2:	2200      	movs	r2, #0
 80062d4:	2103      	movs	r1, #3
 80062d6:	2036      	movs	r0, #54	; 0x36
 80062d8:	f001 f917 	bl	800750a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80062dc:	2036      	movs	r0, #54	; 0x36
 80062de:	f001 f930 	bl	8007542 <HAL_NVIC_EnableIRQ>
}
 80062e2:	e012      	b.n	800630a <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM8)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a11      	ldr	r2, [pc, #68]	; (8006330 <HAL_TIM_Base_MspInit+0x1b0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d10d      	bne.n	800630a <HAL_TIM_Base_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	4b09      	ldr	r3, [pc, #36]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 80062f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f6:	4a08      	ldr	r2, [pc, #32]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 80062f8:	f043 0302 	orr.w	r3, r3, #2
 80062fc:	6453      	str	r3, [r2, #68]	; 0x44
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <HAL_TIM_Base_MspInit+0x198>)
 8006300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
}
 800630a:	bf00      	nop
 800630c:	3740      	adds	r7, #64	; 0x40
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	40010000 	.word	0x40010000
 8006318:	40023800 	.word	0x40023800
 800631c:	40021000 	.word	0x40021000
 8006320:	40000400 	.word	0x40000400
 8006324:	40000800 	.word	0x40000800
 8006328:	40000c00 	.word	0x40000c00
 800632c:	40001000 	.word	0x40001000
 8006330:	40010400 	.word	0x40010400

08006334 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b08c      	sub	sp, #48	; 0x30
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800633c:	f107 031c 	add.w	r3, r7, #28
 8006340:	2200      	movs	r2, #0
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	605a      	str	r2, [r3, #4]
 8006346:	609a      	str	r2, [r3, #8]
 8006348:	60da      	str	r2, [r3, #12]
 800634a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a49      	ldr	r2, [pc, #292]	; (8006478 <HAL_TIM_MspPostInit+0x144>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d11f      	bne.n	8006396 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006356:	2300      	movs	r3, #0
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	4b48      	ldr	r3, [pc, #288]	; (800647c <HAL_TIM_MspPostInit+0x148>)
 800635c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635e:	4a47      	ldr	r2, [pc, #284]	; (800647c <HAL_TIM_MspPostInit+0x148>)
 8006360:	f043 0310 	orr.w	r3, r3, #16
 8006364:	6313      	str	r3, [r2, #48]	; 0x30
 8006366:	4b45      	ldr	r3, [pc, #276]	; (800647c <HAL_TIM_MspPostInit+0x148>)
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	f003 0310 	and.w	r3, r3, #16
 800636e:	61bb      	str	r3, [r7, #24]
 8006370:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006372:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006378:	2302      	movs	r3, #2
 800637a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800637c:	2300      	movs	r3, #0
 800637e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006380:	2300      	movs	r3, #0
 8006382:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006384:	2301      	movs	r3, #1
 8006386:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006388:	f107 031c 	add.w	r3, r7, #28
 800638c:	4619      	mov	r1, r3
 800638e:	483c      	ldr	r0, [pc, #240]	; (8006480 <HAL_TIM_MspPostInit+0x14c>)
 8006390:	f001 ffbc 	bl	800830c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8006394:	e06c      	b.n	8006470 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM3)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a3a      	ldr	r2, [pc, #232]	; (8006484 <HAL_TIM_MspPostInit+0x150>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d11e      	bne.n	80063de <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063a0:	2300      	movs	r3, #0
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	4b35      	ldr	r3, [pc, #212]	; (800647c <HAL_TIM_MspPostInit+0x148>)
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	4a34      	ldr	r2, [pc, #208]	; (800647c <HAL_TIM_MspPostInit+0x148>)
 80063aa:	f043 0301 	orr.w	r3, r3, #1
 80063ae:	6313      	str	r3, [r2, #48]	; 0x30
 80063b0:	4b32      	ldr	r3, [pc, #200]	; (800647c <HAL_TIM_MspPostInit+0x148>)
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GateL1_A_Pin|GateL1_B_Pin;
 80063bc:	23c0      	movs	r3, #192	; 0xc0
 80063be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063c0:	2302      	movs	r3, #2
 80063c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063c8:	2300      	movs	r3, #0
 80063ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80063cc:	2302      	movs	r3, #2
 80063ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063d0:	f107 031c 	add.w	r3, r7, #28
 80063d4:	4619      	mov	r1, r3
 80063d6:	482c      	ldr	r0, [pc, #176]	; (8006488 <HAL_TIM_MspPostInit+0x154>)
 80063d8:	f001 ff98 	bl	800830c <HAL_GPIO_Init>
}
 80063dc:	e048      	b.n	8006470 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a2a      	ldr	r2, [pc, #168]	; (800648c <HAL_TIM_MspPostInit+0x158>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d11f      	bne.n	8006428 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80063e8:	2300      	movs	r3, #0
 80063ea:	613b      	str	r3, [r7, #16]
 80063ec:	4b23      	ldr	r3, [pc, #140]	; (800647c <HAL_TIM_MspPostInit+0x148>)
 80063ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f0:	4a22      	ldr	r2, [pc, #136]	; (800647c <HAL_TIM_MspPostInit+0x148>)
 80063f2:	f043 0308 	orr.w	r3, r3, #8
 80063f6:	6313      	str	r3, [r2, #48]	; 0x30
 80063f8:	4b20      	ldr	r3, [pc, #128]	; (800647c <HAL_TIM_MspPostInit+0x148>)
 80063fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fc:	f003 0308 	and.w	r3, r3, #8
 8006400:	613b      	str	r3, [r7, #16]
 8006402:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GateL2_A_Pin|GateL2_B_Pin;
 8006404:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800640a:	2302      	movs	r3, #2
 800640c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800640e:	2300      	movs	r3, #0
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006412:	2300      	movs	r3, #0
 8006414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006416:	2302      	movs	r3, #2
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800641a:	f107 031c 	add.w	r3, r7, #28
 800641e:	4619      	mov	r1, r3
 8006420:	481b      	ldr	r0, [pc, #108]	; (8006490 <HAL_TIM_MspPostInit+0x15c>)
 8006422:	f001 ff73 	bl	800830c <HAL_GPIO_Init>
}
 8006426:	e023      	b.n	8006470 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM8)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a19      	ldr	r2, [pc, #100]	; (8006494 <HAL_TIM_MspPostInit+0x160>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d11e      	bne.n	8006470 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	4b11      	ldr	r3, [pc, #68]	; (800647c <HAL_TIM_MspPostInit+0x148>)
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	4a10      	ldr	r2, [pc, #64]	; (800647c <HAL_TIM_MspPostInit+0x148>)
 800643c:	f043 0304 	orr.w	r3, r3, #4
 8006440:	6313      	str	r3, [r2, #48]	; 0x30
 8006442:	4b0e      	ldr	r3, [pc, #56]	; (800647c <HAL_TIM_MspPostInit+0x148>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Set_U_Heater_Pin;
 800644e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006454:	2302      	movs	r3, #2
 8006456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006458:	2300      	movs	r3, #0
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800645c:	2300      	movs	r3, #0
 800645e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006460:	2303      	movs	r3, #3
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Set_U_Heater_GPIO_Port, &GPIO_InitStruct);
 8006464:	f107 031c 	add.w	r3, r7, #28
 8006468:	4619      	mov	r1, r3
 800646a:	480b      	ldr	r0, [pc, #44]	; (8006498 <HAL_TIM_MspPostInit+0x164>)
 800646c:	f001 ff4e 	bl	800830c <HAL_GPIO_Init>
}
 8006470:	bf00      	nop
 8006472:	3730      	adds	r7, #48	; 0x30
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	40010000 	.word	0x40010000
 800647c:	40023800 	.word	0x40023800
 8006480:	40021000 	.word	0x40021000
 8006484:	40000400 	.word	0x40000400
 8006488:	40020000 	.word	0x40020000
 800648c:	40000800 	.word	0x40000800
 8006490:	40020c00 	.word	0x40020c00
 8006494:	40010400 	.word	0x40010400
 8006498:	40020800 	.word	0x40020800

0800649c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08a      	sub	sp, #40	; 0x28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064a4:	f107 0314 	add.w	r3, r7, #20
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	605a      	str	r2, [r3, #4]
 80064ae:	609a      	str	r2, [r3, #8]
 80064b0:	60da      	str	r2, [r3, #12]
 80064b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a1d      	ldr	r2, [pc, #116]	; (8006530 <HAL_UART_MspInit+0x94>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d133      	bne.n	8006526 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80064be:	2300      	movs	r3, #0
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	4b1c      	ldr	r3, [pc, #112]	; (8006534 <HAL_UART_MspInit+0x98>)
 80064c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c6:	4a1b      	ldr	r2, [pc, #108]	; (8006534 <HAL_UART_MspInit+0x98>)
 80064c8:	f043 0310 	orr.w	r3, r3, #16
 80064cc:	6453      	str	r3, [r2, #68]	; 0x44
 80064ce:	4b19      	ldr	r3, [pc, #100]	; (8006534 <HAL_UART_MspInit+0x98>)
 80064d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d2:	f003 0310 	and.w	r3, r3, #16
 80064d6:	613b      	str	r3, [r7, #16]
 80064d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	4b15      	ldr	r3, [pc, #84]	; (8006534 <HAL_UART_MspInit+0x98>)
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	4a14      	ldr	r2, [pc, #80]	; (8006534 <HAL_UART_MspInit+0x98>)
 80064e4:	f043 0302 	orr.w	r3, r3, #2
 80064e8:	6313      	str	r3, [r2, #48]	; 0x30
 80064ea:	4b12      	ldr	r3, [pc, #72]	; (8006534 <HAL_UART_MspInit+0x98>)
 80064ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80064f6:	23c0      	movs	r3, #192	; 0xc0
 80064f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064fa:	2302      	movs	r3, #2
 80064fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064fe:	2300      	movs	r3, #0
 8006500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006502:	2303      	movs	r3, #3
 8006504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006506:	2307      	movs	r3, #7
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800650a:	f107 0314 	add.w	r3, r7, #20
 800650e:	4619      	mov	r1, r3
 8006510:	4809      	ldr	r0, [pc, #36]	; (8006538 <HAL_UART_MspInit+0x9c>)
 8006512:	f001 fefb 	bl	800830c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8006516:	2200      	movs	r2, #0
 8006518:	2101      	movs	r1, #1
 800651a:	2025      	movs	r0, #37	; 0x25
 800651c:	f000 fff5 	bl	800750a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006520:	2025      	movs	r0, #37	; 0x25
 8006522:	f001 f80e 	bl	8007542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006526:	bf00      	nop
 8006528:	3728      	adds	r7, #40	; 0x28
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	40011000 	.word	0x40011000
 8006534:	40023800 	.word	0x40023800
 8006538:	40020400 	.word	0x40020400

0800653c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006540:	e7fe      	b.n	8006540 <NMI_Handler+0x4>

08006542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006542:	b480      	push	{r7}
 8006544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006546:	e7fe      	b.n	8006546 <HardFault_Handler+0x4>

08006548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800654c:	e7fe      	b.n	800654c <MemManage_Handler+0x4>

0800654e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800654e:	b480      	push	{r7}
 8006550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006552:	e7fe      	b.n	8006552 <BusFault_Handler+0x4>

08006554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006558:	e7fe      	b.n	8006558 <UsageFault_Handler+0x4>

0800655a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800655a:	b480      	push	{r7}
 800655c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800655e:	bf00      	nop
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800656c:	bf00      	nop
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006576:	b480      	push	{r7}
 8006578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800657a:	bf00      	nop
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006588:	f000 fab2 	bl	8006af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800658c:	bf00      	nop
 800658e:	bd80      	pop	{r7, pc}

08006590 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006594:	4802      	ldr	r0, [pc, #8]	; (80065a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006596:	f002 ffd3 	bl	8009540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800659a:	bf00      	nop
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	200021a0 	.word	0x200021a0

080065a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80065a8:	4802      	ldr	r0, [pc, #8]	; (80065b4 <USART1_IRQHandler+0x10>)
 80065aa:	f003 ff85 	bl	800a4b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80065ae:	bf00      	nop
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20002398 	.word	0x20002398

080065b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80065bc:	4802      	ldr	r0, [pc, #8]	; (80065c8 <TIM6_DAC_IRQHandler+0x10>)
 80065be:	f002 ffbf 	bl	8009540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80065c2:	bf00      	nop
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20002308 	.word	0x20002308

080065cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80065d0:	4802      	ldr	r0, [pc, #8]	; (80065dc <DMA2_Stream0_IRQHandler+0x10>)
 80065d2:	f001 f969 	bl	80078a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80065d6:	bf00      	nop
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	200020d4 	.word	0x200020d4

080065e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80065e4:	4802      	ldr	r0, [pc, #8]	; (80065f0 <DMA2_Stream2_IRQHandler+0x10>)
 80065e6:	f001 f95f 	bl	80078a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80065ea:	bf00      	nop
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20002134 	.word	0x20002134

080065f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80065f4:	b480      	push	{r7}
 80065f6:	af00      	add	r7, sp, #0
	return 1;
 80065f8:	2301      	movs	r3, #1
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <_kill>:

int _kill(int pid, int sig)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800660e:	f004 fed9 	bl	800b3c4 <__errno>
 8006612:	4603      	mov	r3, r0
 8006614:	2216      	movs	r2, #22
 8006616:	601a      	str	r2, [r3, #0]
	return -1;
 8006618:	f04f 33ff 	mov.w	r3, #4294967295
}
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <_exit>:

void _exit (int status)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800662c:	f04f 31ff 	mov.w	r1, #4294967295
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff ffe7 	bl	8006604 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006636:	e7fe      	b.n	8006636 <_exit+0x12>

08006638 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006644:	2300      	movs	r3, #0
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	e00a      	b.n	8006660 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800664a:	f3af 8000 	nop.w
 800664e:	4601      	mov	r1, r0
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	60ba      	str	r2, [r7, #8]
 8006656:	b2ca      	uxtb	r2, r1
 8006658:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	3301      	adds	r3, #1
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	429a      	cmp	r2, r3
 8006666:	dbf0      	blt.n	800664a <_read+0x12>
	}

return len;
 8006668:	687b      	ldr	r3, [r7, #4]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b086      	sub	sp, #24
 8006676:	af00      	add	r7, sp, #0
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800667e:	2300      	movs	r3, #0
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	e009      	b.n	8006698 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	60ba      	str	r2, [r7, #8]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	4618      	mov	r0, r3
 800668e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	3301      	adds	r3, #1
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	429a      	cmp	r2, r3
 800669e:	dbf1      	blt.n	8006684 <_write+0x12>
	}
	return len;
 80066a0:	687b      	ldr	r3, [r7, #4]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <_close>:

int _close(int file)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
	return -1;
 80066b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066d2:	605a      	str	r2, [r3, #4]
	return 0;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <_isatty>:

int _isatty(int file)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
	return 1;
 80066ea:	2301      	movs	r3, #1
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
	return 0;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
	...

08006714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800671c:	4a14      	ldr	r2, [pc, #80]	; (8006770 <_sbrk+0x5c>)
 800671e:	4b15      	ldr	r3, [pc, #84]	; (8006774 <_sbrk+0x60>)
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006728:	4b13      	ldr	r3, [pc, #76]	; (8006778 <_sbrk+0x64>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d102      	bne.n	8006736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006730:	4b11      	ldr	r3, [pc, #68]	; (8006778 <_sbrk+0x64>)
 8006732:	4a12      	ldr	r2, [pc, #72]	; (800677c <_sbrk+0x68>)
 8006734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006736:	4b10      	ldr	r3, [pc, #64]	; (8006778 <_sbrk+0x64>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4413      	add	r3, r2
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	429a      	cmp	r2, r3
 8006742:	d207      	bcs.n	8006754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006744:	f004 fe3e 	bl	800b3c4 <__errno>
 8006748:	4603      	mov	r3, r0
 800674a:	220c      	movs	r2, #12
 800674c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800674e:	f04f 33ff 	mov.w	r3, #4294967295
 8006752:	e009      	b.n	8006768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006754:	4b08      	ldr	r3, [pc, #32]	; (8006778 <_sbrk+0x64>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800675a:	4b07      	ldr	r3, [pc, #28]	; (8006778 <_sbrk+0x64>)
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4413      	add	r3, r2
 8006762:	4a05      	ldr	r2, [pc, #20]	; (8006778 <_sbrk+0x64>)
 8006764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006766:	68fb      	ldr	r3, [r7, #12]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	20020000 	.word	0x20020000
 8006774:	00000400 	.word	0x00000400
 8006778:	20002bb8 	.word	0x20002bb8
 800677c:	20002bf0 	.word	0x20002bf0

08006780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006784:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <SystemInit+0x20>)
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678a:	4a05      	ldr	r2, [pc, #20]	; (80067a0 <SystemInit+0x20>)
 800678c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006794:	bf00      	nop
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	e000ed00 	.word	0xe000ed00

080067a4 <getTemp3455>:
		3266, 3340, 3413, 3487, 3559,
		3632, 3704, 3776, 3848, 3919,
		3990
};

float getTemp3455(float rawData) {
 80067a4:	b5b0      	push	{r4, r5, r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	ed87 0a01 	vstr	s0, [r7, #4]
	if(rawData < rawValues3455[41] ||
 80067ae:	4b49      	ldr	r3, [pc, #292]	; (80068d4 <getTemp3455+0x130>)
 80067b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067b4:	ee07 3a90 	vmov	s15, r3
 80067b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80067c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c8:	d40c      	bmi.n	80067e4 <getTemp3455+0x40>
		rawData > rawValues3455[0]) {
 80067ca:	4b42      	ldr	r3, [pc, #264]	; (80068d4 <getTemp3455+0x130>)
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	ee07 3a90 	vmov	s15, r3
 80067d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	if(rawData < rawValues3455[41] ||
 80067d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80067da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067e2:	dd01      	ble.n	80067e8 <getTemp3455+0x44>
		return 999.9;
 80067e4:	4b3c      	ldr	r3, [pc, #240]	; (80068d8 <getTemp3455+0x134>)
 80067e6:	e06d      	b.n	80068c4 <getTemp3455+0x120>
	}
	else {
		for(int i = 1; i < 42; i++) {
 80067e8:	2301      	movs	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	e066      	b.n	80068bc <getTemp3455+0x118>
			if(rawData >= rawValues3455[i]) {
 80067ee:	4a39      	ldr	r2, [pc, #228]	; (80068d4 <getTemp3455+0x130>)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8006802:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800680a:	db54      	blt.n	80068b6 <getTemp3455+0x112>
				float temp;
				temp = 5.0/(rawValues3455[i-1] - rawValues3455[i]) * (rawValues3455[i-1] - rawData) + i * 5.0 - 60; //C
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3b01      	subs	r3, #1
 8006810:	4a30      	ldr	r2, [pc, #192]	; (80068d4 <getTemp3455+0x130>)
 8006812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006816:	4619      	mov	r1, r3
 8006818:	4a2e      	ldr	r2, [pc, #184]	; (80068d4 <getTemp3455+0x130>)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006820:	1acb      	subs	r3, r1, r3
 8006822:	4618      	mov	r0, r3
 8006824:	f7f9 fe8e 	bl	8000544 <__aeabi_i2d>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	f04f 0000 	mov.w	r0, #0
 8006830:	492a      	ldr	r1, [pc, #168]	; (80068dc <getTemp3455+0x138>)
 8006832:	f7fa f81b 	bl	800086c <__aeabi_ddiv>
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	4614      	mov	r4, r2
 800683c:	461d      	mov	r5, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3b01      	subs	r3, #1
 8006842:	4a24      	ldr	r2, [pc, #144]	; (80068d4 <getTemp3455+0x130>)
 8006844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006848:	ee07 3a90 	vmov	s15, r3
 800684c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006850:	edd7 7a01 	vldr	s15, [r7, #4]
 8006854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006858:	ee17 0a90 	vmov	r0, s15
 800685c:	f7f9 fe84 	bl	8000568 <__aeabi_f2d>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	4620      	mov	r0, r4
 8006866:	4629      	mov	r1, r5
 8006868:	f7f9 fed6 	bl	8000618 <__aeabi_dmul>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4614      	mov	r4, r2
 8006872:	461d      	mov	r5, r3
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f7f9 fe65 	bl	8000544 <__aeabi_i2d>
 800687a:	f04f 0200 	mov.w	r2, #0
 800687e:	4b17      	ldr	r3, [pc, #92]	; (80068dc <getTemp3455+0x138>)
 8006880:	f7f9 feca 	bl	8000618 <__aeabi_dmul>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4620      	mov	r0, r4
 800688a:	4629      	mov	r1, r5
 800688c:	f7f9 fd0e 	bl	80002ac <__adddf3>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4610      	mov	r0, r2
 8006896:	4619      	mov	r1, r3
 8006898:	f04f 0200 	mov.w	r2, #0
 800689c:	4b10      	ldr	r3, [pc, #64]	; (80068e0 <getTemp3455+0x13c>)
 800689e:	f7f9 fd03 	bl	80002a8 <__aeabi_dsub>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	4610      	mov	r0, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	f7fa f9ad 	bl	8000c08 <__aeabi_d2f>
 80068ae:	4603      	mov	r3, r0
 80068b0:	60bb      	str	r3, [r7, #8]
				return temp;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	e006      	b.n	80068c4 <getTemp3455+0x120>
		for(int i = 1; i < 42; i++) {
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3301      	adds	r3, #1
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b29      	cmp	r3, #41	; 0x29
 80068c0:	dd95      	ble.n	80067ee <getTemp3455+0x4a>
			}
		}
		return 999.9;
 80068c2:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <getTemp3455+0x134>)
	}
}
 80068c4:	ee07 3a90 	vmov	s15, r3
 80068c8:	eeb0 0a67 	vmov.f32	s0, s15
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bdb0      	pop	{r4, r5, r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20001320 	.word	0x20001320
 80068d8:	4479f99a 	.word	0x4479f99a
 80068dc:	40140000 	.word	0x40140000
 80068e0:	404e0000 	.word	0x404e0000

080068e4 <getTempPt1000>:

float getTempPt1000(float rawData) {
 80068e4:	b5b0      	push	{r4, r5, r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	ed87 0a01 	vstr	s0, [r7, #4]
	if(rawData > rawValuesPt1000[50]) {
 80068ee:	4b3f      	ldr	r3, [pc, #252]	; (80069ec <getTempPt1000+0x108>)
 80068f0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80068f4:	ee07 3a90 	vmov	s15, r3
 80068f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8006900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006908:	dd01      	ble.n	800690e <getTempPt1000+0x2a>
		return 999.9;
 800690a:	4b39      	ldr	r3, [pc, #228]	; (80069f0 <getTempPt1000+0x10c>)
 800690c:	e066      	b.n	80069dc <getTempPt1000+0xf8>
	}
	else {
		for(int i = 1; i < 51; i++) {
 800690e:	2301      	movs	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	e05f      	b.n	80069d4 <getTempPt1000+0xf0>
			if(rawData <= rawValuesPt1000[i]) {
 8006914:	4a35      	ldr	r2, [pc, #212]	; (80069ec <getTempPt1000+0x108>)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800691c:	ee07 3a90 	vmov	s15, r3
 8006920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006924:	ed97 7a01 	vldr	s14, [r7, #4]
 8006928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800692c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006930:	d84d      	bhi.n	80069ce <getTempPt1000+0xea>
				float temp;
				temp = 5.0/(rawValuesPt1000[i] - rawValuesPt1000[i-1]) * (rawData - rawValuesPt1000[i-1]) + (i-1) * 5.0; //C
 8006932:	4a2e      	ldr	r2, [pc, #184]	; (80069ec <getTempPt1000+0x108>)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800693a:	4619      	mov	r1, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	3b01      	subs	r3, #1
 8006940:	4a2a      	ldr	r2, [pc, #168]	; (80069ec <getTempPt1000+0x108>)
 8006942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006946:	1acb      	subs	r3, r1, r3
 8006948:	4618      	mov	r0, r3
 800694a:	f7f9 fdfb 	bl	8000544 <__aeabi_i2d>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	f04f 0000 	mov.w	r0, #0
 8006956:	4927      	ldr	r1, [pc, #156]	; (80069f4 <getTempPt1000+0x110>)
 8006958:	f7f9 ff88 	bl	800086c <__aeabi_ddiv>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4614      	mov	r4, r2
 8006962:	461d      	mov	r5, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	3b01      	subs	r3, #1
 8006968:	4a20      	ldr	r2, [pc, #128]	; (80069ec <getTempPt1000+0x108>)
 800696a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800696e:	ee07 3a90 	vmov	s15, r3
 8006972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006976:	ed97 7a01 	vldr	s14, [r7, #4]
 800697a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800697e:	ee17 0a90 	vmov	r0, s15
 8006982:	f7f9 fdf1 	bl	8000568 <__aeabi_f2d>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	4620      	mov	r0, r4
 800698c:	4629      	mov	r1, r5
 800698e:	f7f9 fe43 	bl	8000618 <__aeabi_dmul>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	4614      	mov	r4, r2
 8006998:	461d      	mov	r5, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3b01      	subs	r3, #1
 800699e:	4618      	mov	r0, r3
 80069a0:	f7f9 fdd0 	bl	8000544 <__aeabi_i2d>
 80069a4:	f04f 0200 	mov.w	r2, #0
 80069a8:	4b12      	ldr	r3, [pc, #72]	; (80069f4 <getTempPt1000+0x110>)
 80069aa:	f7f9 fe35 	bl	8000618 <__aeabi_dmul>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	4620      	mov	r0, r4
 80069b4:	4629      	mov	r1, r5
 80069b6:	f7f9 fc79 	bl	80002ac <__adddf3>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	4610      	mov	r0, r2
 80069c0:	4619      	mov	r1, r3
 80069c2:	f7fa f921 	bl	8000c08 <__aeabi_d2f>
 80069c6:	4603      	mov	r3, r0
 80069c8:	60bb      	str	r3, [r7, #8]
				return temp;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	e006      	b.n	80069dc <getTempPt1000+0xf8>
		for(int i = 1; i < 51; i++) {
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	3301      	adds	r3, #1
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b32      	cmp	r3, #50	; 0x32
 80069d8:	dd9c      	ble.n	8006914 <getTempPt1000+0x30>
			}
		}
		return 999.9;
 80069da:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <getTempPt1000+0x10c>)
	}
}
 80069dc:	ee07 3a90 	vmov	s15, r3
 80069e0:	eeb0 0a67 	vmov.f32	s0, s15
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bdb0      	pop	{r4, r5, r7, pc}
 80069ea:	bf00      	nop
 80069ec:	20001374 	.word	0x20001374
 80069f0:	4479f99a 	.word	0x4479f99a
 80069f4:	40140000 	.word	0x40140000

080069f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80069f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80069fc:	480d      	ldr	r0, [pc, #52]	; (8006a34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80069fe:	490e      	ldr	r1, [pc, #56]	; (8006a38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006a00:	4a0e      	ldr	r2, [pc, #56]	; (8006a3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a04:	e002      	b.n	8006a0c <LoopCopyDataInit>

08006a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a0a:	3304      	adds	r3, #4

08006a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a10:	d3f9      	bcc.n	8006a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a12:	4a0b      	ldr	r2, [pc, #44]	; (8006a40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006a14:	4c0b      	ldr	r4, [pc, #44]	; (8006a44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a18:	e001      	b.n	8006a1e <LoopFillZerobss>

08006a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a1c:	3204      	adds	r2, #4

08006a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a20:	d3fb      	bcc.n	8006a1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006a22:	f7ff fead 	bl	8006780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a26:	f004 fce5 	bl	800b3f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006a2a:	f7fe fa73 	bl	8004f14 <main>
  bx  lr    
 8006a2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006a30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a38:	200015b8 	.word	0x200015b8
  ldr r2, =_sidata
 8006a3c:	08010e88 	.word	0x08010e88
  ldr r2, =_sbss
 8006a40:	200015b8 	.word	0x200015b8
  ldr r4, =_ebss
 8006a44:	20002bf0 	.word	0x20002bf0

08006a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a48:	e7fe      	b.n	8006a48 <ADC_IRQHandler>
	...

08006a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006a50:	4b0e      	ldr	r3, [pc, #56]	; (8006a8c <HAL_Init+0x40>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a0d      	ldr	r2, [pc, #52]	; (8006a8c <HAL_Init+0x40>)
 8006a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006a5c:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <HAL_Init+0x40>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a0a      	ldr	r2, [pc, #40]	; (8006a8c <HAL_Init+0x40>)
 8006a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a68:	4b08      	ldr	r3, [pc, #32]	; (8006a8c <HAL_Init+0x40>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a07      	ldr	r2, [pc, #28]	; (8006a8c <HAL_Init+0x40>)
 8006a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a74:	2003      	movs	r0, #3
 8006a76:	f000 fd3d 	bl	80074f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006a7a:	200f      	movs	r0, #15
 8006a7c:	f000 f808 	bl	8006a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006a80:	f7ff fa78 	bl	8005f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	40023c00 	.word	0x40023c00

08006a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006a98:	4b12      	ldr	r3, [pc, #72]	; (8006ae4 <HAL_InitTick+0x54>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	4b12      	ldr	r3, [pc, #72]	; (8006ae8 <HAL_InitTick+0x58>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 fd55 	bl	800755e <HAL_SYSTICK_Config>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e00e      	b.n	8006adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b0f      	cmp	r3, #15
 8006ac2:	d80a      	bhi.n	8006ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8006acc:	f000 fd1d 	bl	800750a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ad0:	4a06      	ldr	r2, [pc, #24]	; (8006aec <HAL_InitTick+0x5c>)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	e000      	b.n	8006adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	2000131c 	.word	0x2000131c
 8006ae8:	200013e0 	.word	0x200013e0
 8006aec:	200013dc 	.word	0x200013dc

08006af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006af0:	b480      	push	{r7}
 8006af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006af4:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <HAL_IncTick+0x20>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <HAL_IncTick+0x24>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4413      	add	r3, r2
 8006b00:	4a04      	ldr	r2, [pc, #16]	; (8006b14 <HAL_IncTick+0x24>)
 8006b02:	6013      	str	r3, [r2, #0]
}
 8006b04:	bf00      	nop
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	200013e0 	.word	0x200013e0
 8006b14:	20002bbc 	.word	0x20002bbc

08006b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8006b1c:	4b03      	ldr	r3, [pc, #12]	; (8006b2c <HAL_GetTick+0x14>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	20002bbc 	.word	0x20002bbc

08006b30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e033      	b.n	8006bae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d109      	bne.n	8006b62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7ff fa38 	bl	8005fc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	f003 0310 	and.w	r3, r3, #16
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d118      	bne.n	8006ba0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006b76:	f023 0302 	bic.w	r3, r3, #2
 8006b7a:	f043 0202 	orr.w	r2, r3, #2
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fa68 	bl	8007058 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	f023 0303 	bic.w	r3, r3, #3
 8006b96:	f043 0201 	orr.w	r2, r3, #1
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	641a      	str	r2, [r3, #64]	; 0x40
 8006b9e:	e001      	b.n	8006ba4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d101      	bne.n	8006bd6 <HAL_ADC_Start_DMA+0x1e>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e0e9      	b.n	8006daa <HAL_ADC_Start_DMA+0x1f2>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d018      	beq.n	8006c1e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689a      	ldr	r2, [r3, #8]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006bfc:	4b6d      	ldr	r3, [pc, #436]	; (8006db4 <HAL_ADC_Start_DMA+0x1fc>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a6d      	ldr	r2, [pc, #436]	; (8006db8 <HAL_ADC_Start_DMA+0x200>)
 8006c02:	fba2 2303 	umull	r2, r3, r2, r3
 8006c06:	0c9a      	lsrs	r2, r3, #18
 8006c08:	4613      	mov	r3, r2
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	4413      	add	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006c10:	e002      	b.n	8006c18 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1f9      	bne.n	8006c12 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c2c:	d107      	bne.n	8006c3e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	f040 80a1 	bne.w	8006d90 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006c56:	f023 0301 	bic.w	r3, r3, #1
 8006c5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d007      	beq.n	8006c80 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006c78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c8c:	d106      	bne.n	8006c9c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c92:	f023 0206 	bic.w	r2, r3, #6
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	645a      	str	r2, [r3, #68]	; 0x44
 8006c9a:	e002      	b.n	8006ca2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006caa:	4b44      	ldr	r3, [pc, #272]	; (8006dbc <HAL_ADC_Start_DMA+0x204>)
 8006cac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	4a43      	ldr	r2, [pc, #268]	; (8006dc0 <HAL_ADC_Start_DMA+0x208>)
 8006cb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	4a42      	ldr	r2, [pc, #264]	; (8006dc4 <HAL_ADC_Start_DMA+0x20c>)
 8006cbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc2:	4a41      	ldr	r2, [pc, #260]	; (8006dc8 <HAL_ADC_Start_DMA+0x210>)
 8006cc4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006cce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006cde:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	334c      	adds	r3, #76	; 0x4c
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f000 fce8 	bl	80076d4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f003 031f 	and.w	r3, r3, #31
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d12a      	bne.n	8006d66 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a2d      	ldr	r2, [pc, #180]	; (8006dcc <HAL_ADC_Start_DMA+0x214>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d015      	beq.n	8006d46 <HAL_ADC_Start_DMA+0x18e>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a2c      	ldr	r2, [pc, #176]	; (8006dd0 <HAL_ADC_Start_DMA+0x218>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d105      	bne.n	8006d30 <HAL_ADC_Start_DMA+0x178>
 8006d24:	4b25      	ldr	r3, [pc, #148]	; (8006dbc <HAL_ADC_Start_DMA+0x204>)
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a27      	ldr	r2, [pc, #156]	; (8006dd4 <HAL_ADC_Start_DMA+0x21c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d136      	bne.n	8006da8 <HAL_ADC_Start_DMA+0x1f0>
 8006d3a:	4b20      	ldr	r3, [pc, #128]	; (8006dbc <HAL_ADC_Start_DMA+0x204>)
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f003 0310 	and.w	r3, r3, #16
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d130      	bne.n	8006da8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d129      	bne.n	8006da8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689a      	ldr	r2, [r3, #8]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006d62:	609a      	str	r2, [r3, #8]
 8006d64:	e020      	b.n	8006da8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a18      	ldr	r2, [pc, #96]	; (8006dcc <HAL_ADC_Start_DMA+0x214>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d11b      	bne.n	8006da8 <HAL_ADC_Start_DMA+0x1f0>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d114      	bne.n	8006da8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006d8c:	609a      	str	r2, [r3, #8]
 8006d8e:	e00b      	b.n	8006da8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	f043 0210 	orr.w	r2, r3, #16
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da0:	f043 0201 	orr.w	r2, r3, #1
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	2000131c 	.word	0x2000131c
 8006db8:	431bde83 	.word	0x431bde83
 8006dbc:	40012300 	.word	0x40012300
 8006dc0:	08007251 	.word	0x08007251
 8006dc4:	0800730b 	.word	0x0800730b
 8006dc8:	08007327 	.word	0x08007327
 8006dcc:	40012000 	.word	0x40012000
 8006dd0:	40012100 	.word	0x40012100
 8006dd4:	40012200 	.word	0x40012200

08006dd8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <HAL_ADC_ConfigChannel+0x1c>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	e105      	b.n	800703c <HAL_ADC_ConfigChannel+0x228>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b09      	cmp	r3, #9
 8006e3e:	d925      	bls.n	8006e8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68d9      	ldr	r1, [r3, #12]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4613      	mov	r3, r2
 8006e50:	005b      	lsls	r3, r3, #1
 8006e52:	4413      	add	r3, r2
 8006e54:	3b1e      	subs	r3, #30
 8006e56:	2207      	movs	r2, #7
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	43da      	mvns	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	400a      	ands	r2, r1
 8006e64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68d9      	ldr	r1, [r3, #12]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	4618      	mov	r0, r3
 8006e78:	4603      	mov	r3, r0
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	4403      	add	r3, r0
 8006e7e:	3b1e      	subs	r3, #30
 8006e80:	409a      	lsls	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	60da      	str	r2, [r3, #12]
 8006e8a:	e022      	b.n	8006ed2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6919      	ldr	r1, [r3, #16]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	4413      	add	r3, r2
 8006ea0:	2207      	movs	r2, #7
 8006ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea6:	43da      	mvns	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	400a      	ands	r2, r1
 8006eae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6919      	ldr	r1, [r3, #16]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	4403      	add	r3, r0
 8006ec8:	409a      	lsls	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b06      	cmp	r3, #6
 8006ed8:	d824      	bhi.n	8006f24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	3b05      	subs	r3, #5
 8006eec:	221f      	movs	r2, #31
 8006eee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef2:	43da      	mvns	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	400a      	ands	r2, r1
 8006efa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	4618      	mov	r0, r3
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	3b05      	subs	r3, #5
 8006f16:	fa00 f203 	lsl.w	r2, r0, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	635a      	str	r2, [r3, #52]	; 0x34
 8006f22:	e04c      	b.n	8006fbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b0c      	cmp	r3, #12
 8006f2a:	d824      	bhi.n	8006f76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	3b23      	subs	r3, #35	; 0x23
 8006f3e:	221f      	movs	r2, #31
 8006f40:	fa02 f303 	lsl.w	r3, r2, r3
 8006f44:	43da      	mvns	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	400a      	ands	r2, r1
 8006f4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	3b23      	subs	r3, #35	; 0x23
 8006f68:	fa00 f203 	lsl.w	r2, r0, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	631a      	str	r2, [r3, #48]	; 0x30
 8006f74:	e023      	b.n	8006fbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	4613      	mov	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4413      	add	r3, r2
 8006f86:	3b41      	subs	r3, #65	; 0x41
 8006f88:	221f      	movs	r2, #31
 8006f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8e:	43da      	mvns	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	400a      	ands	r2, r1
 8006f96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	3b41      	subs	r3, #65	; 0x41
 8006fb2:	fa00 f203 	lsl.w	r2, r0, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006fbe:	4b22      	ldr	r3, [pc, #136]	; (8007048 <HAL_ADC_ConfigChannel+0x234>)
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a21      	ldr	r2, [pc, #132]	; (800704c <HAL_ADC_ConfigChannel+0x238>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d109      	bne.n	8006fe0 <HAL_ADC_ConfigChannel+0x1cc>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b12      	cmp	r3, #18
 8006fd2:	d105      	bne.n	8006fe0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a19      	ldr	r2, [pc, #100]	; (800704c <HAL_ADC_ConfigChannel+0x238>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d123      	bne.n	8007032 <HAL_ADC_ConfigChannel+0x21e>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b10      	cmp	r3, #16
 8006ff0:	d003      	beq.n	8006ffa <HAL_ADC_ConfigChannel+0x1e6>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b11      	cmp	r3, #17
 8006ff8:	d11b      	bne.n	8007032 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b10      	cmp	r3, #16
 800700c:	d111      	bne.n	8007032 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800700e:	4b10      	ldr	r3, [pc, #64]	; (8007050 <HAL_ADC_ConfigChannel+0x23c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a10      	ldr	r2, [pc, #64]	; (8007054 <HAL_ADC_ConfigChannel+0x240>)
 8007014:	fba2 2303 	umull	r2, r3, r2, r3
 8007018:	0c9a      	lsrs	r2, r3, #18
 800701a:	4613      	mov	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	005b      	lsls	r3, r3, #1
 8007022:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007024:	e002      	b.n	800702c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	3b01      	subs	r3, #1
 800702a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f9      	bne.n	8007026 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	40012300 	.word	0x40012300
 800704c:	40012000 	.word	0x40012000
 8007050:	2000131c 	.word	0x2000131c
 8007054:	431bde83 	.word	0x431bde83

08007058 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007060:	4b79      	ldr	r3, [pc, #484]	; (8007248 <ADC_Init+0x1f0>)
 8007062:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	431a      	orrs	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800708c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6859      	ldr	r1, [r3, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	021a      	lsls	r2, r3, #8
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80070b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6859      	ldr	r1, [r3, #4]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689a      	ldr	r2, [r3, #8]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6899      	ldr	r1, [r3, #8]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ea:	4a58      	ldr	r2, [pc, #352]	; (800724c <ADC_Init+0x1f4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d022      	beq.n	8007136 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80070fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6899      	ldr	r1, [r3, #8]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007120:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6899      	ldr	r1, [r3, #8]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	609a      	str	r2, [r3, #8]
 8007134:	e00f      	b.n	8007156 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007144:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007154:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0202 	bic.w	r2, r2, #2
 8007164:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6899      	ldr	r1, [r3, #8]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	7e1b      	ldrb	r3, [r3, #24]
 8007170:	005a      	lsls	r2, r3, #1
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d01b      	beq.n	80071bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007192:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80071a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6859      	ldr	r1, [r3, #4]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	3b01      	subs	r3, #1
 80071b0:	035a      	lsls	r2, r3, #13
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	605a      	str	r2, [r3, #4]
 80071ba:	e007      	b.n	80071cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80071da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	3b01      	subs	r3, #1
 80071e8:	051a      	lsls	r2, r3, #20
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007200:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6899      	ldr	r1, [r3, #8]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800720e:	025a      	lsls	r2, r3, #9
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007226:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6899      	ldr	r1, [r3, #8]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	029a      	lsls	r2, r3, #10
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	609a      	str	r2, [r3, #8]
}
 800723c:	bf00      	nop
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	40012300 	.word	0x40012300
 800724c:	0f000001 	.word	0x0f000001

08007250 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007266:	2b00      	cmp	r3, #0
 8007268:	d13c      	bne.n	80072e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d12b      	bne.n	80072dc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007288:	2b00      	cmp	r3, #0
 800728a:	d127      	bne.n	80072dc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007292:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007296:	2b00      	cmp	r3, #0
 8007298:	d006      	beq.n	80072a8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d119      	bne.n	80072dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 0220 	bic.w	r2, r2, #32
 80072b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d105      	bne.n	80072dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d4:	f043 0201 	orr.w	r2, r3, #1
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f7ff fd7b 	bl	8006dd8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80072e2:	e00e      	b.n	8007302 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	f003 0310 	and.w	r3, r3, #16
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f7ff fd85 	bl	8006e00 <HAL_ADC_ErrorCallback>
}
 80072f6:	e004      	b.n	8007302 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	4798      	blx	r3
}
 8007302:	bf00      	nop
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f7ff fd67 	bl	8006dec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800731e:	bf00      	nop
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2240      	movs	r2, #64	; 0x40
 8007338:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733e:	f043 0204 	orr.w	r2, r3, #4
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f7ff fd5a 	bl	8006e00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800734c:	bf00      	nop
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007364:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <__NVIC_SetPriorityGrouping+0x44>)
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007370:	4013      	ands	r3, r2
 8007372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800737c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007386:	4a04      	ldr	r2, [pc, #16]	; (8007398 <__NVIC_SetPriorityGrouping+0x44>)
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	60d3      	str	r3, [r2, #12]
}
 800738c:	bf00      	nop
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	e000ed00 	.word	0xe000ed00

0800739c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073a0:	4b04      	ldr	r3, [pc, #16]	; (80073b4 <__NVIC_GetPriorityGrouping+0x18>)
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	0a1b      	lsrs	r3, r3, #8
 80073a6:	f003 0307 	and.w	r3, r3, #7
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	e000ed00 	.word	0xe000ed00

080073b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	4603      	mov	r3, r0
 80073c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	db0b      	blt.n	80073e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	f003 021f 	and.w	r2, r3, #31
 80073d0:	4907      	ldr	r1, [pc, #28]	; (80073f0 <__NVIC_EnableIRQ+0x38>)
 80073d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073d6:	095b      	lsrs	r3, r3, #5
 80073d8:	2001      	movs	r0, #1
 80073da:	fa00 f202 	lsl.w	r2, r0, r2
 80073de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	e000e100 	.word	0xe000e100

080073f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	6039      	str	r1, [r7, #0]
 80073fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007404:	2b00      	cmp	r3, #0
 8007406:	db0a      	blt.n	800741e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	b2da      	uxtb	r2, r3
 800740c:	490c      	ldr	r1, [pc, #48]	; (8007440 <__NVIC_SetPriority+0x4c>)
 800740e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007412:	0112      	lsls	r2, r2, #4
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	440b      	add	r3, r1
 8007418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800741c:	e00a      	b.n	8007434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	b2da      	uxtb	r2, r3
 8007422:	4908      	ldr	r1, [pc, #32]	; (8007444 <__NVIC_SetPriority+0x50>)
 8007424:	79fb      	ldrb	r3, [r7, #7]
 8007426:	f003 030f 	and.w	r3, r3, #15
 800742a:	3b04      	subs	r3, #4
 800742c:	0112      	lsls	r2, r2, #4
 800742e:	b2d2      	uxtb	r2, r2
 8007430:	440b      	add	r3, r1
 8007432:	761a      	strb	r2, [r3, #24]
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	e000e100 	.word	0xe000e100
 8007444:	e000ed00 	.word	0xe000ed00

08007448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007448:	b480      	push	{r7}
 800744a:	b089      	sub	sp, #36	; 0x24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	f1c3 0307 	rsb	r3, r3, #7
 8007462:	2b04      	cmp	r3, #4
 8007464:	bf28      	it	cs
 8007466:	2304      	movcs	r3, #4
 8007468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	3304      	adds	r3, #4
 800746e:	2b06      	cmp	r3, #6
 8007470:	d902      	bls.n	8007478 <NVIC_EncodePriority+0x30>
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	3b03      	subs	r3, #3
 8007476:	e000      	b.n	800747a <NVIC_EncodePriority+0x32>
 8007478:	2300      	movs	r3, #0
 800747a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800747c:	f04f 32ff 	mov.w	r2, #4294967295
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	fa02 f303 	lsl.w	r3, r2, r3
 8007486:	43da      	mvns	r2, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	401a      	ands	r2, r3
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007490:	f04f 31ff 	mov.w	r1, #4294967295
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	fa01 f303 	lsl.w	r3, r1, r3
 800749a:	43d9      	mvns	r1, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074a0:	4313      	orrs	r3, r2
         );
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3724      	adds	r7, #36	; 0x24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
	...

080074b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074c0:	d301      	bcc.n	80074c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80074c2:	2301      	movs	r3, #1
 80074c4:	e00f      	b.n	80074e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80074c6:	4a0a      	ldr	r2, [pc, #40]	; (80074f0 <SysTick_Config+0x40>)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80074ce:	210f      	movs	r1, #15
 80074d0:	f04f 30ff 	mov.w	r0, #4294967295
 80074d4:	f7ff ff8e 	bl	80073f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80074d8:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <SysTick_Config+0x40>)
 80074da:	2200      	movs	r2, #0
 80074dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80074de:	4b04      	ldr	r3, [pc, #16]	; (80074f0 <SysTick_Config+0x40>)
 80074e0:	2207      	movs	r2, #7
 80074e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	e000e010 	.word	0xe000e010

080074f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7ff ff29 	bl	8007354 <__NVIC_SetPriorityGrouping>
}
 8007502:	bf00      	nop
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800750a:	b580      	push	{r7, lr}
 800750c:	b086      	sub	sp, #24
 800750e:	af00      	add	r7, sp, #0
 8007510:	4603      	mov	r3, r0
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	607a      	str	r2, [r7, #4]
 8007516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007518:	2300      	movs	r3, #0
 800751a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800751c:	f7ff ff3e 	bl	800739c <__NVIC_GetPriorityGrouping>
 8007520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	68b9      	ldr	r1, [r7, #8]
 8007526:	6978      	ldr	r0, [r7, #20]
 8007528:	f7ff ff8e 	bl	8007448 <NVIC_EncodePriority>
 800752c:	4602      	mov	r2, r0
 800752e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007532:	4611      	mov	r1, r2
 8007534:	4618      	mov	r0, r3
 8007536:	f7ff ff5d 	bl	80073f4 <__NVIC_SetPriority>
}
 800753a:	bf00      	nop
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	4603      	mov	r3, r0
 800754a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800754c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007550:	4618      	mov	r0, r3
 8007552:	f7ff ff31 	bl	80073b8 <__NVIC_EnableIRQ>
}
 8007556:	bf00      	nop
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff ffa2 	bl	80074b0 <SysTick_Config>
 800756c:	4603      	mov	r3, r0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007584:	f7ff fac8 	bl	8006b18 <HAL_GetTick>
 8007588:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e099      	b.n	80076c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0201 	bic.w	r2, r2, #1
 80075b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075b4:	e00f      	b.n	80075d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80075b6:	f7ff faaf 	bl	8006b18 <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b05      	cmp	r3, #5
 80075c2:	d908      	bls.n	80075d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2220      	movs	r2, #32
 80075c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2203      	movs	r2, #3
 80075ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e078      	b.n	80076c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e8      	bne.n	80075b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	4b38      	ldr	r3, [pc, #224]	; (80076d0 <HAL_DMA_Init+0x158>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007602:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800760e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800761a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	4313      	orrs	r3, r2
 8007626:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	2b04      	cmp	r3, #4
 800762e:	d107      	bne.n	8007640 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007638:	4313      	orrs	r3, r2
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	4313      	orrs	r3, r2
 800763e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f023 0307 	bic.w	r3, r3, #7
 8007656:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	4313      	orrs	r3, r2
 8007660:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	2b04      	cmp	r3, #4
 8007668:	d117      	bne.n	800769a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	4313      	orrs	r3, r2
 8007672:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00e      	beq.n	800769a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fb01 	bl	8007c84 <DMA_CheckFifoParam>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d008      	beq.n	800769a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2240      	movs	r2, #64	; 0x40
 800768c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007696:	2301      	movs	r3, #1
 8007698:	e016      	b.n	80076c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fab8 	bl	8007c18 <DMA_CalcBaseAndBitshift>
 80076a8:	4603      	mov	r3, r0
 80076aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076b0:	223f      	movs	r2, #63	; 0x3f
 80076b2:	409a      	lsls	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	f010803f 	.word	0xf010803f

080076d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d101      	bne.n	80076fa <HAL_DMA_Start_IT+0x26>
 80076f6:	2302      	movs	r3, #2
 80076f8:	e040      	b.n	800777c <HAL_DMA_Start_IT+0xa8>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b01      	cmp	r3, #1
 800770c:	d12f      	bne.n	800776e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2202      	movs	r2, #2
 8007712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	68b9      	ldr	r1, [r7, #8]
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 fa4a 	bl	8007bbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800772c:	223f      	movs	r2, #63	; 0x3f
 800772e:	409a      	lsls	r2, r3
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0216 	orr.w	r2, r2, #22
 8007742:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007748:	2b00      	cmp	r3, #0
 800774a:	d007      	beq.n	800775c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0208 	orr.w	r2, r2, #8
 800775a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f042 0201 	orr.w	r2, r2, #1
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	e005      	b.n	800777a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007776:	2302      	movs	r3, #2
 8007778:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800777a:	7dfb      	ldrb	r3, [r7, #23]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007790:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007792:	f7ff f9c1 	bl	8006b18 <HAL_GetTick>
 8007796:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d008      	beq.n	80077b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2280      	movs	r2, #128	; 0x80
 80077a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e052      	b.n	800785c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f022 0216 	bic.w	r2, r2, #22
 80077c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	695a      	ldr	r2, [r3, #20]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d103      	bne.n	80077e6 <HAL_DMA_Abort+0x62>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d007      	beq.n	80077f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0208 	bic.w	r2, r2, #8
 80077f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 0201 	bic.w	r2, r2, #1
 8007804:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007806:	e013      	b.n	8007830 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007808:	f7ff f986 	bl	8006b18 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b05      	cmp	r3, #5
 8007814:	d90c      	bls.n	8007830 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2220      	movs	r2, #32
 800781a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2203      	movs	r2, #3
 8007820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e015      	b.n	800785c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e4      	bne.n	8007808 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007842:	223f      	movs	r2, #63	; 0x3f
 8007844:	409a      	lsls	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b02      	cmp	r3, #2
 8007876:	d004      	beq.n	8007882 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2280      	movs	r2, #128	; 0x80
 800787c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e00c      	b.n	800789c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2205      	movs	r2, #5
 8007886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0201 	bic.w	r2, r2, #1
 8007898:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80078b0:	2300      	movs	r3, #0
 80078b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80078b4:	4b8e      	ldr	r3, [pc, #568]	; (8007af0 <HAL_DMA_IRQHandler+0x248>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a8e      	ldr	r2, [pc, #568]	; (8007af4 <HAL_DMA_IRQHandler+0x24c>)
 80078ba:	fba2 2303 	umull	r2, r3, r2, r3
 80078be:	0a9b      	lsrs	r3, r3, #10
 80078c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078d2:	2208      	movs	r2, #8
 80078d4:	409a      	lsls	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	4013      	ands	r3, r2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d01a      	beq.n	8007914 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d013      	beq.n	8007914 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 0204 	bic.w	r2, r2, #4
 80078fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007900:	2208      	movs	r2, #8
 8007902:	409a      	lsls	r2, r3
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790c:	f043 0201 	orr.w	r2, r3, #1
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007918:	2201      	movs	r2, #1
 800791a:	409a      	lsls	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4013      	ands	r3, r2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d012      	beq.n	800794a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00b      	beq.n	800794a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007936:	2201      	movs	r2, #1
 8007938:	409a      	lsls	r2, r3
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007942:	f043 0202 	orr.w	r2, r3, #2
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800794e:	2204      	movs	r2, #4
 8007950:	409a      	lsls	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4013      	ands	r3, r2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d012      	beq.n	8007980 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00b      	beq.n	8007980 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800796c:	2204      	movs	r2, #4
 800796e:	409a      	lsls	r2, r3
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007978:	f043 0204 	orr.w	r2, r3, #4
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007984:	2210      	movs	r2, #16
 8007986:	409a      	lsls	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4013      	ands	r3, r2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d043      	beq.n	8007a18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0308 	and.w	r3, r3, #8
 800799a:	2b00      	cmp	r3, #0
 800799c:	d03c      	beq.n	8007a18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a2:	2210      	movs	r2, #16
 80079a4:	409a      	lsls	r2, r3
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d018      	beq.n	80079ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d108      	bne.n	80079d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d024      	beq.n	8007a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3
 80079d6:	e01f      	b.n	8007a18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01b      	beq.n	8007a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	4798      	blx	r3
 80079e8:	e016      	b.n	8007a18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d107      	bne.n	8007a08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f022 0208 	bic.w	r2, r2, #8
 8007a06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	409a      	lsls	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4013      	ands	r3, r2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 808f 	beq.w	8007b48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0310 	and.w	r3, r3, #16
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 8087 	beq.w	8007b48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a3e:	2220      	movs	r2, #32
 8007a40:	409a      	lsls	r2, r3
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b05      	cmp	r3, #5
 8007a50:	d136      	bne.n	8007ac0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0216 	bic.w	r2, r2, #22
 8007a60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	695a      	ldr	r2, [r3, #20]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d103      	bne.n	8007a82 <HAL_DMA_IRQHandler+0x1da>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d007      	beq.n	8007a92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f022 0208 	bic.w	r2, r2, #8
 8007a90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a96:	223f      	movs	r2, #63	; 0x3f
 8007a98:	409a      	lsls	r2, r3
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d07e      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	4798      	blx	r3
        }
        return;
 8007abe:	e079      	b.n	8007bb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d01d      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10d      	bne.n	8007af8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d031      	beq.n	8007b48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	4798      	blx	r3
 8007aec:	e02c      	b.n	8007b48 <HAL_DMA_IRQHandler+0x2a0>
 8007aee:	bf00      	nop
 8007af0:	2000131c 	.word	0x2000131c
 8007af4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d023      	beq.n	8007b48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	4798      	blx	r3
 8007b08:	e01e      	b.n	8007b48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10f      	bne.n	8007b38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 0210 	bic.w	r2, r2, #16
 8007b26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d003      	beq.n	8007b48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d032      	beq.n	8007bb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d022      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2205      	movs	r2, #5
 8007b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 0201 	bic.w	r2, r2, #1
 8007b72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	3301      	adds	r3, #1
 8007b78:	60bb      	str	r3, [r7, #8]
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d307      	bcc.n	8007b90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1f2      	bne.n	8007b74 <HAL_DMA_IRQHandler+0x2cc>
 8007b8e:	e000      	b.n	8007b92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007b90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d005      	beq.n	8007bb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	4798      	blx	r3
 8007bb2:	e000      	b.n	8007bb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007bb4:	bf00      	nop
    }
  }
}
 8007bb6:	3718      	adds	r7, #24
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
 8007bc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007bd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	2b40      	cmp	r3, #64	; 0x40
 8007be8:	d108      	bne.n	8007bfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007bfa:	e007      	b.n	8007c0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	60da      	str	r2, [r3, #12]
}
 8007c0c:	bf00      	nop
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	3b10      	subs	r3, #16
 8007c28:	4a14      	ldr	r2, [pc, #80]	; (8007c7c <DMA_CalcBaseAndBitshift+0x64>)
 8007c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c2e:	091b      	lsrs	r3, r3, #4
 8007c30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007c32:	4a13      	ldr	r2, [pc, #76]	; (8007c80 <DMA_CalcBaseAndBitshift+0x68>)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4413      	add	r3, r2
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d909      	bls.n	8007c5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007c4e:	f023 0303 	bic.w	r3, r3, #3
 8007c52:	1d1a      	adds	r2, r3, #4
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	659a      	str	r2, [r3, #88]	; 0x58
 8007c58:	e007      	b.n	8007c6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007c62:	f023 0303 	bic.w	r3, r3, #3
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	aaaaaaab 	.word	0xaaaaaaab
 8007c80:	08010954 	.word	0x08010954

08007c84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d11f      	bne.n	8007cde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d856      	bhi.n	8007d52 <DMA_CheckFifoParam+0xce>
 8007ca4:	a201      	add	r2, pc, #4	; (adr r2, 8007cac <DMA_CheckFifoParam+0x28>)
 8007ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007caa:	bf00      	nop
 8007cac:	08007cbd 	.word	0x08007cbd
 8007cb0:	08007ccf 	.word	0x08007ccf
 8007cb4:	08007cbd 	.word	0x08007cbd
 8007cb8:	08007d53 	.word	0x08007d53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d046      	beq.n	8007d56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ccc:	e043      	b.n	8007d56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007cd6:	d140      	bne.n	8007d5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cdc:	e03d      	b.n	8007d5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ce6:	d121      	bne.n	8007d2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d837      	bhi.n	8007d5e <DMA_CheckFifoParam+0xda>
 8007cee:	a201      	add	r2, pc, #4	; (adr r2, 8007cf4 <DMA_CheckFifoParam+0x70>)
 8007cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf4:	08007d05 	.word	0x08007d05
 8007cf8:	08007d0b 	.word	0x08007d0b
 8007cfc:	08007d05 	.word	0x08007d05
 8007d00:	08007d1d 	.word	0x08007d1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	73fb      	strb	r3, [r7, #15]
      break;
 8007d08:	e030      	b.n	8007d6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d025      	beq.n	8007d62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d1a:	e022      	b.n	8007d62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d24:	d11f      	bne.n	8007d66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007d2a:	e01c      	b.n	8007d66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d903      	bls.n	8007d3a <DMA_CheckFifoParam+0xb6>
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	d003      	beq.n	8007d40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007d38:	e018      	b.n	8007d6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d3e:	e015      	b.n	8007d6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00e      	beq.n	8007d6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d50:	e00b      	b.n	8007d6a <DMA_CheckFifoParam+0xe6>
      break;
 8007d52:	bf00      	nop
 8007d54:	e00a      	b.n	8007d6c <DMA_CheckFifoParam+0xe8>
      break;
 8007d56:	bf00      	nop
 8007d58:	e008      	b.n	8007d6c <DMA_CheckFifoParam+0xe8>
      break;
 8007d5a:	bf00      	nop
 8007d5c:	e006      	b.n	8007d6c <DMA_CheckFifoParam+0xe8>
      break;
 8007d5e:	bf00      	nop
 8007d60:	e004      	b.n	8007d6c <DMA_CheckFifoParam+0xe8>
      break;
 8007d62:	bf00      	nop
 8007d64:	e002      	b.n	8007d6c <DMA_CheckFifoParam+0xe8>
      break;   
 8007d66:	bf00      	nop
 8007d68:	e000      	b.n	8007d6c <DMA_CheckFifoParam+0xe8>
      break;
 8007d6a:	bf00      	nop
    }
  } 
  
  return status; 
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop

08007d7c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007d8e:	4b23      	ldr	r3, [pc, #140]	; (8007e1c <HAL_FLASH_Program+0xa0>)
 8007d90:	7e1b      	ldrb	r3, [r3, #24]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d101      	bne.n	8007d9a <HAL_FLASH_Program+0x1e>
 8007d96:	2302      	movs	r3, #2
 8007d98:	e03b      	b.n	8007e12 <HAL_FLASH_Program+0x96>
 8007d9a:	4b20      	ldr	r3, [pc, #128]	; (8007e1c <HAL_FLASH_Program+0xa0>)
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007da0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007da4:	f000 f860 	bl	8007e68 <FLASH_WaitForLastOperation>
 8007da8:	4603      	mov	r3, r0
 8007daa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d12b      	bne.n	8007e0a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d105      	bne.n	8007dc4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007db8:	783b      	ldrb	r3, [r7, #0]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	68b8      	ldr	r0, [r7, #8]
 8007dbe:	f000 f90b 	bl	8007fd8 <FLASH_Program_Byte>
 8007dc2:	e016      	b.n	8007df2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d105      	bne.n	8007dd6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8007dca:	883b      	ldrh	r3, [r7, #0]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	68b8      	ldr	r0, [r7, #8]
 8007dd0:	f000 f8de 	bl	8007f90 <FLASH_Program_HalfWord>
 8007dd4:	e00d      	b.n	8007df2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d105      	bne.n	8007de8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	4619      	mov	r1, r3
 8007de0:	68b8      	ldr	r0, [r7, #8]
 8007de2:	f000 f8b3 	bl	8007f4c <FLASH_Program_Word>
 8007de6:	e004      	b.n	8007df2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dec:	68b8      	ldr	r0, [r7, #8]
 8007dee:	f000 f87b 	bl	8007ee8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007df2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007df6:	f000 f837 	bl	8007e68 <FLASH_WaitForLastOperation>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8007dfe:	4b08      	ldr	r3, [pc, #32]	; (8007e20 <HAL_FLASH_Program+0xa4>)
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	4a07      	ldr	r2, [pc, #28]	; (8007e20 <HAL_FLASH_Program+0xa4>)
 8007e04:	f023 0301 	bic.w	r3, r3, #1
 8007e08:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007e0a:	4b04      	ldr	r3, [pc, #16]	; (8007e1c <HAL_FLASH_Program+0xa0>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20002bc0 	.word	0x20002bc0
 8007e20:	40023c00 	.word	0x40023c00

08007e24 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007e2e:	4b0b      	ldr	r3, [pc, #44]	; (8007e5c <HAL_FLASH_Unlock+0x38>)
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	da0b      	bge.n	8007e4e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007e36:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <HAL_FLASH_Unlock+0x38>)
 8007e38:	4a09      	ldr	r2, [pc, #36]	; (8007e60 <HAL_FLASH_Unlock+0x3c>)
 8007e3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007e3c:	4b07      	ldr	r3, [pc, #28]	; (8007e5c <HAL_FLASH_Unlock+0x38>)
 8007e3e:	4a09      	ldr	r2, [pc, #36]	; (8007e64 <HAL_FLASH_Unlock+0x40>)
 8007e40:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007e42:	4b06      	ldr	r3, [pc, #24]	; (8007e5c <HAL_FLASH_Unlock+0x38>)
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	da01      	bge.n	8007e4e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007e4e:	79fb      	ldrb	r3, [r7, #7]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	40023c00 	.word	0x40023c00
 8007e60:	45670123 	.word	0x45670123
 8007e64:	cdef89ab 	.word	0xcdef89ab

08007e68 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007e74:	4b1a      	ldr	r3, [pc, #104]	; (8007ee0 <FLASH_WaitForLastOperation+0x78>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007e7a:	f7fe fe4d 	bl	8006b18 <HAL_GetTick>
 8007e7e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007e80:	e010      	b.n	8007ea4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e88:	d00c      	beq.n	8007ea4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d007      	beq.n	8007ea0 <FLASH_WaitForLastOperation+0x38>
 8007e90:	f7fe fe42 	bl	8006b18 <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d201      	bcs.n	8007ea4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e019      	b.n	8007ed8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007ea4:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <FLASH_WaitForLastOperation+0x7c>)
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1e8      	bne.n	8007e82 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007eb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <FLASH_WaitForLastOperation+0x7c>)
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007ebc:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <FLASH_WaitForLastOperation+0x7c>)
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007ec2:	4b08      	ldr	r3, [pc, #32]	; (8007ee4 <FLASH_WaitForLastOperation+0x7c>)
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007ece:	f000 f8a5 	bl	800801c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e000      	b.n	8007ed8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
  
}  
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	20002bc0 	.word	0x20002bc0
 8007ee4:	40023c00 	.word	0x40023c00

08007ee8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007ef4:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <FLASH_Program_DoubleWord+0x60>)
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	4a13      	ldr	r2, [pc, #76]	; (8007f48 <FLASH_Program_DoubleWord+0x60>)
 8007efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007efe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007f00:	4b11      	ldr	r3, [pc, #68]	; (8007f48 <FLASH_Program_DoubleWord+0x60>)
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	4a10      	ldr	r2, [pc, #64]	; (8007f48 <FLASH_Program_DoubleWord+0x60>)
 8007f06:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007f0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007f0c:	4b0e      	ldr	r3, [pc, #56]	; (8007f48 <FLASH_Program_DoubleWord+0x60>)
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	4a0d      	ldr	r2, [pc, #52]	; (8007f48 <FLASH_Program_DoubleWord+0x60>)
 8007f12:	f043 0301 	orr.w	r3, r3, #1
 8007f16:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8007f1e:	f3bf 8f6f 	isb	sy
}
 8007f22:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007f24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f28:	f04f 0200 	mov.w	r2, #0
 8007f2c:	f04f 0300 	mov.w	r3, #0
 8007f30:	000a      	movs	r2, r1
 8007f32:	2300      	movs	r3, #0
 8007f34:	68f9      	ldr	r1, [r7, #12]
 8007f36:	3104      	adds	r1, #4
 8007f38:	4613      	mov	r3, r2
 8007f3a:	600b      	str	r3, [r1, #0]
}
 8007f3c:	bf00      	nop
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	40023c00 	.word	0x40023c00

08007f4c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007f56:	4b0d      	ldr	r3, [pc, #52]	; (8007f8c <FLASH_Program_Word+0x40>)
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	4a0c      	ldr	r2, [pc, #48]	; (8007f8c <FLASH_Program_Word+0x40>)
 8007f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f60:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007f62:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <FLASH_Program_Word+0x40>)
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	4a09      	ldr	r2, [pc, #36]	; (8007f8c <FLASH_Program_Word+0x40>)
 8007f68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f6c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007f6e:	4b07      	ldr	r3, [pc, #28]	; (8007f8c <FLASH_Program_Word+0x40>)
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	4a06      	ldr	r2, [pc, #24]	; (8007f8c <FLASH_Program_Word+0x40>)
 8007f74:	f043 0301 	orr.w	r3, r3, #1
 8007f78:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	683a      	ldr	r2, [r7, #0]
 8007f7e:	601a      	str	r2, [r3, #0]
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	40023c00 	.word	0x40023c00

08007f90 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007f9c:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <FLASH_Program_HalfWord+0x44>)
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	4a0c      	ldr	r2, [pc, #48]	; (8007fd4 <FLASH_Program_HalfWord+0x44>)
 8007fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fa6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <FLASH_Program_HalfWord+0x44>)
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	4a09      	ldr	r2, [pc, #36]	; (8007fd4 <FLASH_Program_HalfWord+0x44>)
 8007fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007fb4:	4b07      	ldr	r3, [pc, #28]	; (8007fd4 <FLASH_Program_HalfWord+0x44>)
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	4a06      	ldr	r2, [pc, #24]	; (8007fd4 <FLASH_Program_HalfWord+0x44>)
 8007fba:	f043 0301 	orr.w	r3, r3, #1
 8007fbe:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	887a      	ldrh	r2, [r7, #2]
 8007fc4:	801a      	strh	r2, [r3, #0]
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	40023c00 	.word	0x40023c00

08007fd8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007fe4:	4b0c      	ldr	r3, [pc, #48]	; (8008018 <FLASH_Program_Byte+0x40>)
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	4a0b      	ldr	r2, [pc, #44]	; (8008018 <FLASH_Program_Byte+0x40>)
 8007fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007ff0:	4b09      	ldr	r3, [pc, #36]	; (8008018 <FLASH_Program_Byte+0x40>)
 8007ff2:	4a09      	ldr	r2, [pc, #36]	; (8008018 <FLASH_Program_Byte+0x40>)
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007ff8:	4b07      	ldr	r3, [pc, #28]	; (8008018 <FLASH_Program_Byte+0x40>)
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	4a06      	ldr	r2, [pc, #24]	; (8008018 <FLASH_Program_Byte+0x40>)
 8007ffe:	f043 0301 	orr.w	r3, r3, #1
 8008002:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	78fa      	ldrb	r2, [r7, #3]
 8008008:	701a      	strb	r2, [r3, #0]
}
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	40023c00 	.word	0x40023c00

0800801c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8008020:	4b27      	ldr	r3, [pc, #156]	; (80080c0 <FLASH_SetErrorCode+0xa4>)
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	2b00      	cmp	r3, #0
 800802a:	d008      	beq.n	800803e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800802c:	4b25      	ldr	r3, [pc, #148]	; (80080c4 <FLASH_SetErrorCode+0xa8>)
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	f043 0310 	orr.w	r3, r3, #16
 8008034:	4a23      	ldr	r2, [pc, #140]	; (80080c4 <FLASH_SetErrorCode+0xa8>)
 8008036:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8008038:	4b21      	ldr	r3, [pc, #132]	; (80080c0 <FLASH_SetErrorCode+0xa4>)
 800803a:	2210      	movs	r2, #16
 800803c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800803e:	4b20      	ldr	r3, [pc, #128]	; (80080c0 <FLASH_SetErrorCode+0xa4>)
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f003 0320 	and.w	r3, r3, #32
 8008046:	2b00      	cmp	r3, #0
 8008048:	d008      	beq.n	800805c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800804a:	4b1e      	ldr	r3, [pc, #120]	; (80080c4 <FLASH_SetErrorCode+0xa8>)
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	f043 0308 	orr.w	r3, r3, #8
 8008052:	4a1c      	ldr	r2, [pc, #112]	; (80080c4 <FLASH_SetErrorCode+0xa8>)
 8008054:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8008056:	4b1a      	ldr	r3, [pc, #104]	; (80080c0 <FLASH_SetErrorCode+0xa4>)
 8008058:	2220      	movs	r2, #32
 800805a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800805c:	4b18      	ldr	r3, [pc, #96]	; (80080c0 <FLASH_SetErrorCode+0xa4>)
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008064:	2b00      	cmp	r3, #0
 8008066:	d008      	beq.n	800807a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8008068:	4b16      	ldr	r3, [pc, #88]	; (80080c4 <FLASH_SetErrorCode+0xa8>)
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	f043 0304 	orr.w	r3, r3, #4
 8008070:	4a14      	ldr	r2, [pc, #80]	; (80080c4 <FLASH_SetErrorCode+0xa8>)
 8008072:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8008074:	4b12      	ldr	r3, [pc, #72]	; (80080c0 <FLASH_SetErrorCode+0xa4>)
 8008076:	2240      	movs	r2, #64	; 0x40
 8008078:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800807a:	4b11      	ldr	r3, [pc, #68]	; (80080c0 <FLASH_SetErrorCode+0xa4>)
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008082:	2b00      	cmp	r3, #0
 8008084:	d008      	beq.n	8008098 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8008086:	4b0f      	ldr	r3, [pc, #60]	; (80080c4 <FLASH_SetErrorCode+0xa8>)
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	f043 0302 	orr.w	r3, r3, #2
 800808e:	4a0d      	ldr	r2, [pc, #52]	; (80080c4 <FLASH_SetErrorCode+0xa8>)
 8008090:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8008092:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <FLASH_SetErrorCode+0xa4>)
 8008094:	2280      	movs	r2, #128	; 0x80
 8008096:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8008098:	4b09      	ldr	r3, [pc, #36]	; (80080c0 <FLASH_SetErrorCode+0xa4>)
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	f003 0302 	and.w	r3, r3, #2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d008      	beq.n	80080b6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80080a4:	4b07      	ldr	r3, [pc, #28]	; (80080c4 <FLASH_SetErrorCode+0xa8>)
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	f043 0320 	orr.w	r3, r3, #32
 80080ac:	4a05      	ldr	r2, [pc, #20]	; (80080c4 <FLASH_SetErrorCode+0xa8>)
 80080ae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80080b0:	4b03      	ldr	r3, [pc, #12]	; (80080c0 <FLASH_SetErrorCode+0xa4>)
 80080b2:	2202      	movs	r2, #2
 80080b4:	60da      	str	r2, [r3, #12]
  }
}
 80080b6:	bf00      	nop
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	40023c00 	.word	0x40023c00
 80080c4:	20002bc0 	.word	0x20002bc0

080080c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80080da:	4b31      	ldr	r3, [pc, #196]	; (80081a0 <HAL_FLASHEx_Erase+0xd8>)
 80080dc:	7e1b      	ldrb	r3, [r3, #24]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d101      	bne.n	80080e6 <HAL_FLASHEx_Erase+0x1e>
 80080e2:	2302      	movs	r3, #2
 80080e4:	e058      	b.n	8008198 <HAL_FLASHEx_Erase+0xd0>
 80080e6:	4b2e      	ldr	r3, [pc, #184]	; (80081a0 <HAL_FLASHEx_Erase+0xd8>)
 80080e8:	2201      	movs	r2, #1
 80080ea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80080ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80080f0:	f7ff feba 	bl	8007e68 <FLASH_WaitForLastOperation>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d148      	bne.n	8008190 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	f04f 32ff 	mov.w	r2, #4294967295
 8008104:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d115      	bne.n	800813a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	b2da      	uxtb	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	4619      	mov	r1, r3
 800811a:	4610      	mov	r0, r2
 800811c:	f000 f844 	bl	80081a8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008120:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008124:	f7ff fea0 	bl	8007e68 <FLASH_WaitForLastOperation>
 8008128:	4603      	mov	r3, r0
 800812a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800812c:	4b1d      	ldr	r3, [pc, #116]	; (80081a4 <HAL_FLASHEx_Erase+0xdc>)
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	4a1c      	ldr	r2, [pc, #112]	; (80081a4 <HAL_FLASHEx_Erase+0xdc>)
 8008132:	f023 0304 	bic.w	r3, r3, #4
 8008136:	6113      	str	r3, [r2, #16]
 8008138:	e028      	b.n	800818c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	60bb      	str	r3, [r7, #8]
 8008140:	e01c      	b.n	800817c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	b2db      	uxtb	r3, r3
 8008148:	4619      	mov	r1, r3
 800814a:	68b8      	ldr	r0, [r7, #8]
 800814c:	f000 f850 	bl	80081f0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008150:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008154:	f7ff fe88 	bl	8007e68 <FLASH_WaitForLastOperation>
 8008158:	4603      	mov	r3, r0
 800815a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800815c:	4b11      	ldr	r3, [pc, #68]	; (80081a4 <HAL_FLASHEx_Erase+0xdc>)
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	4a10      	ldr	r2, [pc, #64]	; (80081a4 <HAL_FLASHEx_Erase+0xdc>)
 8008162:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8008166:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	601a      	str	r2, [r3, #0]
          break;
 8008174:	e00a      	b.n	800818c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	3301      	adds	r3, #1
 800817a:	60bb      	str	r3, [r7, #8]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68da      	ldr	r2, [r3, #12]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	4413      	add	r3, r2
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	429a      	cmp	r2, r3
 800818a:	d3da      	bcc.n	8008142 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800818c:	f000 f878 	bl	8008280 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008190:	4b03      	ldr	r3, [pc, #12]	; (80081a0 <HAL_FLASHEx_Erase+0xd8>)
 8008192:	2200      	movs	r2, #0
 8008194:	761a      	strb	r2, [r3, #24]

  return status;
 8008196:	7bfb      	ldrb	r3, [r7, #15]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20002bc0 	.word	0x20002bc0
 80081a4:	40023c00 	.word	0x40023c00

080081a8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	4603      	mov	r3, r0
 80081b0:	6039      	str	r1, [r7, #0]
 80081b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80081b4:	4b0d      	ldr	r3, [pc, #52]	; (80081ec <FLASH_MassErase+0x44>)
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	4a0c      	ldr	r2, [pc, #48]	; (80081ec <FLASH_MassErase+0x44>)
 80081ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80081c0:	4b0a      	ldr	r3, [pc, #40]	; (80081ec <FLASH_MassErase+0x44>)
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	4a09      	ldr	r2, [pc, #36]	; (80081ec <FLASH_MassErase+0x44>)
 80081c6:	f043 0304 	orr.w	r3, r3, #4
 80081ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80081cc:	4b07      	ldr	r3, [pc, #28]	; (80081ec <FLASH_MassErase+0x44>)
 80081ce:	691a      	ldr	r2, [r3, #16]
 80081d0:	79fb      	ldrb	r3, [r7, #7]
 80081d2:	021b      	lsls	r3, r3, #8
 80081d4:	4313      	orrs	r3, r2
 80081d6:	4a05      	ldr	r2, [pc, #20]	; (80081ec <FLASH_MassErase+0x44>)
 80081d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081dc:	6113      	str	r3, [r2, #16]
}
 80081de:	bf00      	nop
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	40023c00 	.word	0x40023c00

080081f0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	460b      	mov	r3, r1
 80081fa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8008200:	78fb      	ldrb	r3, [r7, #3]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d102      	bne.n	800820c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8008206:	2300      	movs	r3, #0
 8008208:	60fb      	str	r3, [r7, #12]
 800820a:	e010      	b.n	800822e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d103      	bne.n	800821a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8008212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	e009      	b.n	800822e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800821a:	78fb      	ldrb	r3, [r7, #3]
 800821c:	2b02      	cmp	r3, #2
 800821e:	d103      	bne.n	8008228 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8008220:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008224:	60fb      	str	r3, [r7, #12]
 8008226:	e002      	b.n	800822e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8008228:	f44f 7340 	mov.w	r3, #768	; 0x300
 800822c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800822e:	4b13      	ldr	r3, [pc, #76]	; (800827c <FLASH_Erase_Sector+0x8c>)
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	4a12      	ldr	r2, [pc, #72]	; (800827c <FLASH_Erase_Sector+0x8c>)
 8008234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008238:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800823a:	4b10      	ldr	r3, [pc, #64]	; (800827c <FLASH_Erase_Sector+0x8c>)
 800823c:	691a      	ldr	r2, [r3, #16]
 800823e:	490f      	ldr	r1, [pc, #60]	; (800827c <FLASH_Erase_Sector+0x8c>)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4313      	orrs	r3, r2
 8008244:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8008246:	4b0d      	ldr	r3, [pc, #52]	; (800827c <FLASH_Erase_Sector+0x8c>)
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	4a0c      	ldr	r2, [pc, #48]	; (800827c <FLASH_Erase_Sector+0x8c>)
 800824c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008250:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8008252:	4b0a      	ldr	r3, [pc, #40]	; (800827c <FLASH_Erase_Sector+0x8c>)
 8008254:	691a      	ldr	r2, [r3, #16]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	00db      	lsls	r3, r3, #3
 800825a:	4313      	orrs	r3, r2
 800825c:	4a07      	ldr	r2, [pc, #28]	; (800827c <FLASH_Erase_Sector+0x8c>)
 800825e:	f043 0302 	orr.w	r3, r3, #2
 8008262:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8008264:	4b05      	ldr	r3, [pc, #20]	; (800827c <FLASH_Erase_Sector+0x8c>)
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	4a04      	ldr	r2, [pc, #16]	; (800827c <FLASH_Erase_Sector+0x8c>)
 800826a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800826e:	6113      	str	r3, [r2, #16]
}
 8008270:	bf00      	nop
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	40023c00 	.word	0x40023c00

08008280 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008280:	b480      	push	{r7}
 8008282:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8008284:	4b20      	ldr	r3, [pc, #128]	; (8008308 <FLASH_FlushCaches+0x88>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800828c:	2b00      	cmp	r3, #0
 800828e:	d017      	beq.n	80082c0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008290:	4b1d      	ldr	r3, [pc, #116]	; (8008308 <FLASH_FlushCaches+0x88>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a1c      	ldr	r2, [pc, #112]	; (8008308 <FLASH_FlushCaches+0x88>)
 8008296:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800829a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800829c:	4b1a      	ldr	r3, [pc, #104]	; (8008308 <FLASH_FlushCaches+0x88>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a19      	ldr	r2, [pc, #100]	; (8008308 <FLASH_FlushCaches+0x88>)
 80082a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	4b17      	ldr	r3, [pc, #92]	; (8008308 <FLASH_FlushCaches+0x88>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a16      	ldr	r2, [pc, #88]	; (8008308 <FLASH_FlushCaches+0x88>)
 80082ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082b2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80082b4:	4b14      	ldr	r3, [pc, #80]	; (8008308 <FLASH_FlushCaches+0x88>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a13      	ldr	r2, [pc, #76]	; (8008308 <FLASH_FlushCaches+0x88>)
 80082ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082be:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80082c0:	4b11      	ldr	r3, [pc, #68]	; (8008308 <FLASH_FlushCaches+0x88>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d017      	beq.n	80082fc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80082cc:	4b0e      	ldr	r3, [pc, #56]	; (8008308 <FLASH_FlushCaches+0x88>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a0d      	ldr	r2, [pc, #52]	; (8008308 <FLASH_FlushCaches+0x88>)
 80082d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082d6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80082d8:	4b0b      	ldr	r3, [pc, #44]	; (8008308 <FLASH_FlushCaches+0x88>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a0a      	ldr	r2, [pc, #40]	; (8008308 <FLASH_FlushCaches+0x88>)
 80082de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	4b08      	ldr	r3, [pc, #32]	; (8008308 <FLASH_FlushCaches+0x88>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a07      	ldr	r2, [pc, #28]	; (8008308 <FLASH_FlushCaches+0x88>)
 80082ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082ee:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80082f0:	4b05      	ldr	r3, [pc, #20]	; (8008308 <FLASH_FlushCaches+0x88>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a04      	ldr	r2, [pc, #16]	; (8008308 <FLASH_FlushCaches+0x88>)
 80082f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80082fa:	6013      	str	r3, [r2, #0]
  }
}
 80082fc:	bf00      	nop
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	40023c00 	.word	0x40023c00

0800830c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800830c:	b480      	push	{r7}
 800830e:	b089      	sub	sp, #36	; 0x24
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008316:	2300      	movs	r3, #0
 8008318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800831a:	2300      	movs	r3, #0
 800831c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800831e:	2300      	movs	r3, #0
 8008320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008322:	2300      	movs	r3, #0
 8008324:	61fb      	str	r3, [r7, #28]
 8008326:	e16b      	b.n	8008600 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008328:	2201      	movs	r2, #1
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	fa02 f303 	lsl.w	r3, r2, r3
 8008330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	4013      	ands	r3, r2
 800833a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	429a      	cmp	r2, r3
 8008342:	f040 815a 	bne.w	80085fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f003 0303 	and.w	r3, r3, #3
 800834e:	2b01      	cmp	r3, #1
 8008350:	d005      	beq.n	800835e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800835a:	2b02      	cmp	r3, #2
 800835c:	d130      	bne.n	80083c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	005b      	lsls	r3, r3, #1
 8008368:	2203      	movs	r2, #3
 800836a:	fa02 f303 	lsl.w	r3, r2, r3
 800836e:	43db      	mvns	r3, r3
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	4013      	ands	r3, r2
 8008374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	68da      	ldr	r2, [r3, #12]
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	fa02 f303 	lsl.w	r3, r2, r3
 8008382:	69ba      	ldr	r2, [r7, #24]
 8008384:	4313      	orrs	r3, r2
 8008386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	69ba      	ldr	r2, [r7, #24]
 800838c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008394:	2201      	movs	r2, #1
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	fa02 f303 	lsl.w	r3, r2, r3
 800839c:	43db      	mvns	r3, r3
 800839e:	69ba      	ldr	r2, [r7, #24]
 80083a0:	4013      	ands	r3, r2
 80083a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	091b      	lsrs	r3, r3, #4
 80083aa:	f003 0201 	and.w	r2, r3, #1
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	fa02 f303 	lsl.w	r3, r2, r3
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	69ba      	ldr	r2, [r7, #24]
 80083be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f003 0303 	and.w	r3, r3, #3
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d017      	beq.n	80083fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	005b      	lsls	r3, r3, #1
 80083d6:	2203      	movs	r2, #3
 80083d8:	fa02 f303 	lsl.w	r3, r2, r3
 80083dc:	43db      	mvns	r3, r3
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	4013      	ands	r3, r2
 80083e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	689a      	ldr	r2, [r3, #8]
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	005b      	lsls	r3, r3, #1
 80083ec:	fa02 f303 	lsl.w	r3, r2, r3
 80083f0:	69ba      	ldr	r2, [r7, #24]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	f003 0303 	and.w	r3, r3, #3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d123      	bne.n	8008450 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	08da      	lsrs	r2, r3, #3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	3208      	adds	r2, #8
 8008410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008414:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	f003 0307 	and.w	r3, r3, #7
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	220f      	movs	r2, #15
 8008420:	fa02 f303 	lsl.w	r3, r2, r3
 8008424:	43db      	mvns	r3, r3
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	4013      	ands	r3, r2
 800842a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	691a      	ldr	r2, [r3, #16]
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	f003 0307 	and.w	r3, r3, #7
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	fa02 f303 	lsl.w	r3, r2, r3
 800843c:	69ba      	ldr	r2, [r7, #24]
 800843e:	4313      	orrs	r3, r2
 8008440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	08da      	lsrs	r2, r3, #3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	3208      	adds	r2, #8
 800844a:	69b9      	ldr	r1, [r7, #24]
 800844c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	2203      	movs	r2, #3
 800845c:	fa02 f303 	lsl.w	r3, r2, r3
 8008460:	43db      	mvns	r3, r3
 8008462:	69ba      	ldr	r2, [r7, #24]
 8008464:	4013      	ands	r3, r2
 8008466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f003 0203 	and.w	r2, r3, #3
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	005b      	lsls	r3, r3, #1
 8008474:	fa02 f303 	lsl.w	r3, r2, r3
 8008478:	69ba      	ldr	r2, [r7, #24]
 800847a:	4313      	orrs	r3, r2
 800847c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	69ba      	ldr	r2, [r7, #24]
 8008482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800848c:	2b00      	cmp	r3, #0
 800848e:	f000 80b4 	beq.w	80085fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008492:	2300      	movs	r3, #0
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	4b60      	ldr	r3, [pc, #384]	; (8008618 <HAL_GPIO_Init+0x30c>)
 8008498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849a:	4a5f      	ldr	r2, [pc, #380]	; (8008618 <HAL_GPIO_Init+0x30c>)
 800849c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084a0:	6453      	str	r3, [r2, #68]	; 0x44
 80084a2:	4b5d      	ldr	r3, [pc, #372]	; (8008618 <HAL_GPIO_Init+0x30c>)
 80084a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80084ae:	4a5b      	ldr	r2, [pc, #364]	; (800861c <HAL_GPIO_Init+0x310>)
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	089b      	lsrs	r3, r3, #2
 80084b4:	3302      	adds	r3, #2
 80084b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	f003 0303 	and.w	r3, r3, #3
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	220f      	movs	r2, #15
 80084c6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ca:	43db      	mvns	r3, r3
 80084cc:	69ba      	ldr	r2, [r7, #24]
 80084ce:	4013      	ands	r3, r2
 80084d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a52      	ldr	r2, [pc, #328]	; (8008620 <HAL_GPIO_Init+0x314>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d02b      	beq.n	8008532 <HAL_GPIO_Init+0x226>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a51      	ldr	r2, [pc, #324]	; (8008624 <HAL_GPIO_Init+0x318>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d025      	beq.n	800852e <HAL_GPIO_Init+0x222>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a50      	ldr	r2, [pc, #320]	; (8008628 <HAL_GPIO_Init+0x31c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d01f      	beq.n	800852a <HAL_GPIO_Init+0x21e>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a4f      	ldr	r2, [pc, #316]	; (800862c <HAL_GPIO_Init+0x320>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d019      	beq.n	8008526 <HAL_GPIO_Init+0x21a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a4e      	ldr	r2, [pc, #312]	; (8008630 <HAL_GPIO_Init+0x324>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d013      	beq.n	8008522 <HAL_GPIO_Init+0x216>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a4d      	ldr	r2, [pc, #308]	; (8008634 <HAL_GPIO_Init+0x328>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d00d      	beq.n	800851e <HAL_GPIO_Init+0x212>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a4c      	ldr	r2, [pc, #304]	; (8008638 <HAL_GPIO_Init+0x32c>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d007      	beq.n	800851a <HAL_GPIO_Init+0x20e>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a4b      	ldr	r2, [pc, #300]	; (800863c <HAL_GPIO_Init+0x330>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d101      	bne.n	8008516 <HAL_GPIO_Init+0x20a>
 8008512:	2307      	movs	r3, #7
 8008514:	e00e      	b.n	8008534 <HAL_GPIO_Init+0x228>
 8008516:	2308      	movs	r3, #8
 8008518:	e00c      	b.n	8008534 <HAL_GPIO_Init+0x228>
 800851a:	2306      	movs	r3, #6
 800851c:	e00a      	b.n	8008534 <HAL_GPIO_Init+0x228>
 800851e:	2305      	movs	r3, #5
 8008520:	e008      	b.n	8008534 <HAL_GPIO_Init+0x228>
 8008522:	2304      	movs	r3, #4
 8008524:	e006      	b.n	8008534 <HAL_GPIO_Init+0x228>
 8008526:	2303      	movs	r3, #3
 8008528:	e004      	b.n	8008534 <HAL_GPIO_Init+0x228>
 800852a:	2302      	movs	r3, #2
 800852c:	e002      	b.n	8008534 <HAL_GPIO_Init+0x228>
 800852e:	2301      	movs	r3, #1
 8008530:	e000      	b.n	8008534 <HAL_GPIO_Init+0x228>
 8008532:	2300      	movs	r3, #0
 8008534:	69fa      	ldr	r2, [r7, #28]
 8008536:	f002 0203 	and.w	r2, r2, #3
 800853a:	0092      	lsls	r2, r2, #2
 800853c:	4093      	lsls	r3, r2
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	4313      	orrs	r3, r2
 8008542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008544:	4935      	ldr	r1, [pc, #212]	; (800861c <HAL_GPIO_Init+0x310>)
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	089b      	lsrs	r3, r3, #2
 800854a:	3302      	adds	r3, #2
 800854c:	69ba      	ldr	r2, [r7, #24]
 800854e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008552:	4b3b      	ldr	r3, [pc, #236]	; (8008640 <HAL_GPIO_Init+0x334>)
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	43db      	mvns	r3, r3
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	4013      	ands	r3, r2
 8008560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800856e:	69ba      	ldr	r2, [r7, #24]
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	4313      	orrs	r3, r2
 8008574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008576:	4a32      	ldr	r2, [pc, #200]	; (8008640 <HAL_GPIO_Init+0x334>)
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800857c:	4b30      	ldr	r3, [pc, #192]	; (8008640 <HAL_GPIO_Init+0x334>)
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	43db      	mvns	r3, r3
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	4013      	ands	r3, r2
 800858a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d003      	beq.n	80085a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	4313      	orrs	r3, r2
 800859e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80085a0:	4a27      	ldr	r2, [pc, #156]	; (8008640 <HAL_GPIO_Init+0x334>)
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80085a6:	4b26      	ldr	r3, [pc, #152]	; (8008640 <HAL_GPIO_Init+0x334>)
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	43db      	mvns	r3, r3
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	4013      	ands	r3, r2
 80085b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d003      	beq.n	80085ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80085c2:	69ba      	ldr	r2, [r7, #24]
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80085ca:	4a1d      	ldr	r2, [pc, #116]	; (8008640 <HAL_GPIO_Init+0x334>)
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80085d0:	4b1b      	ldr	r3, [pc, #108]	; (8008640 <HAL_GPIO_Init+0x334>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	43db      	mvns	r3, r3
 80085da:	69ba      	ldr	r2, [r7, #24]
 80085dc:	4013      	ands	r3, r2
 80085de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80085f4:	4a12      	ldr	r2, [pc, #72]	; (8008640 <HAL_GPIO_Init+0x334>)
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	3301      	adds	r3, #1
 80085fe:	61fb      	str	r3, [r7, #28]
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	2b0f      	cmp	r3, #15
 8008604:	f67f ae90 	bls.w	8008328 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008608:	bf00      	nop
 800860a:	bf00      	nop
 800860c:	3724      	adds	r7, #36	; 0x24
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	40023800 	.word	0x40023800
 800861c:	40013800 	.word	0x40013800
 8008620:	40020000 	.word	0x40020000
 8008624:	40020400 	.word	0x40020400
 8008628:	40020800 	.word	0x40020800
 800862c:	40020c00 	.word	0x40020c00
 8008630:	40021000 	.word	0x40021000
 8008634:	40021400 	.word	0x40021400
 8008638:	40021800 	.word	0x40021800
 800863c:	40021c00 	.word	0x40021c00
 8008640:	40013c00 	.word	0x40013c00

08008644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	460b      	mov	r3, r1
 800864e:	807b      	strh	r3, [r7, #2]
 8008650:	4613      	mov	r3, r2
 8008652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008654:	787b      	ldrb	r3, [r7, #1]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800865a:	887a      	ldrh	r2, [r7, #2]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008660:	e003      	b.n	800866a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008662:	887b      	ldrh	r3, [r7, #2]
 8008664:	041a      	lsls	r2, r3, #16
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	619a      	str	r2, [r3, #24]
}
 800866a:	bf00      	nop
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d101      	bne.n	8008688 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e034      	b.n	80086f2 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8008690:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f245 5255 	movw	r2, #21845	; 0x5555
 800869a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	6852      	ldr	r2, [r2, #4]
 80086a4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	6892      	ldr	r2, [r2, #8]
 80086ae:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80086b0:	f7fe fa32 	bl	8006b18 <HAL_GetTick>
 80086b4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80086b6:	e00f      	b.n	80086d8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80086b8:	f7fe fa2e 	bl	8006b18 <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b31      	cmp	r3, #49	; 0x31
 80086c4:	d908      	bls.n	80086d8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f003 0303 	and.w	r3, r3, #3
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d001      	beq.n	80086d8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e00c      	b.n	80086f2 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	f003 0303 	and.w	r3, r3, #3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1e8      	bne.n	80086b8 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80086ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800870a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
	...

0800871c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d101      	bne.n	800872e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e267      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b00      	cmp	r3, #0
 8008738:	d075      	beq.n	8008826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800873a:	4b88      	ldr	r3, [pc, #544]	; (800895c <HAL_RCC_OscConfig+0x240>)
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f003 030c 	and.w	r3, r3, #12
 8008742:	2b04      	cmp	r3, #4
 8008744:	d00c      	beq.n	8008760 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008746:	4b85      	ldr	r3, [pc, #532]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800874e:	2b08      	cmp	r3, #8
 8008750:	d112      	bne.n	8008778 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008752:	4b82      	ldr	r3, [pc, #520]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800875a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800875e:	d10b      	bne.n	8008778 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008760:	4b7e      	ldr	r3, [pc, #504]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d05b      	beq.n	8008824 <HAL_RCC_OscConfig+0x108>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d157      	bne.n	8008824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e242      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008780:	d106      	bne.n	8008790 <HAL_RCC_OscConfig+0x74>
 8008782:	4b76      	ldr	r3, [pc, #472]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a75      	ldr	r2, [pc, #468]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	e01d      	b.n	80087cc <HAL_RCC_OscConfig+0xb0>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008798:	d10c      	bne.n	80087b4 <HAL_RCC_OscConfig+0x98>
 800879a:	4b70      	ldr	r3, [pc, #448]	; (800895c <HAL_RCC_OscConfig+0x240>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a6f      	ldr	r2, [pc, #444]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	4b6d      	ldr	r3, [pc, #436]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a6c      	ldr	r2, [pc, #432]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	e00b      	b.n	80087cc <HAL_RCC_OscConfig+0xb0>
 80087b4:	4b69      	ldr	r3, [pc, #420]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a68      	ldr	r2, [pc, #416]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	4b66      	ldr	r3, [pc, #408]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a65      	ldr	r2, [pc, #404]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d013      	beq.n	80087fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087d4:	f7fe f9a0 	bl	8006b18 <HAL_GetTick>
 80087d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087da:	e008      	b.n	80087ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087dc:	f7fe f99c 	bl	8006b18 <HAL_GetTick>
 80087e0:	4602      	mov	r2, r0
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	2b64      	cmp	r3, #100	; 0x64
 80087e8:	d901      	bls.n	80087ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e207      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087ee:	4b5b      	ldr	r3, [pc, #364]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0f0      	beq.n	80087dc <HAL_RCC_OscConfig+0xc0>
 80087fa:	e014      	b.n	8008826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087fc:	f7fe f98c 	bl	8006b18 <HAL_GetTick>
 8008800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008802:	e008      	b.n	8008816 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008804:	f7fe f988 	bl	8006b18 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	2b64      	cmp	r3, #100	; 0x64
 8008810:	d901      	bls.n	8008816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e1f3      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008816:	4b51      	ldr	r3, [pc, #324]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1f0      	bne.n	8008804 <HAL_RCC_OscConfig+0xe8>
 8008822:	e000      	b.n	8008826 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0302 	and.w	r3, r3, #2
 800882e:	2b00      	cmp	r3, #0
 8008830:	d063      	beq.n	80088fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008832:	4b4a      	ldr	r3, [pc, #296]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f003 030c 	and.w	r3, r3, #12
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00b      	beq.n	8008856 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800883e:	4b47      	ldr	r3, [pc, #284]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008846:	2b08      	cmp	r3, #8
 8008848:	d11c      	bne.n	8008884 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800884a:	4b44      	ldr	r3, [pc, #272]	; (800895c <HAL_RCC_OscConfig+0x240>)
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d116      	bne.n	8008884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008856:	4b41      	ldr	r3, [pc, #260]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d005      	beq.n	800886e <HAL_RCC_OscConfig+0x152>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d001      	beq.n	800886e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e1c7      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800886e:	4b3b      	ldr	r3, [pc, #236]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	4937      	ldr	r1, [pc, #220]	; (800895c <HAL_RCC_OscConfig+0x240>)
 800887e:	4313      	orrs	r3, r2
 8008880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008882:	e03a      	b.n	80088fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d020      	beq.n	80088ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800888c:	4b34      	ldr	r3, [pc, #208]	; (8008960 <HAL_RCC_OscConfig+0x244>)
 800888e:	2201      	movs	r2, #1
 8008890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008892:	f7fe f941 	bl	8006b18 <HAL_GetTick>
 8008896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008898:	e008      	b.n	80088ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800889a:	f7fe f93d 	bl	8006b18 <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d901      	bls.n	80088ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e1a8      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088ac:	4b2b      	ldr	r3, [pc, #172]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0302 	and.w	r3, r3, #2
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d0f0      	beq.n	800889a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088b8:	4b28      	ldr	r3, [pc, #160]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	4925      	ldr	r1, [pc, #148]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	600b      	str	r3, [r1, #0]
 80088cc:	e015      	b.n	80088fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088ce:	4b24      	ldr	r3, [pc, #144]	; (8008960 <HAL_RCC_OscConfig+0x244>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088d4:	f7fe f920 	bl	8006b18 <HAL_GetTick>
 80088d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088da:	e008      	b.n	80088ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088dc:	f7fe f91c 	bl	8006b18 <HAL_GetTick>
 80088e0:	4602      	mov	r2, r0
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d901      	bls.n	80088ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e187      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088ee:	4b1b      	ldr	r3, [pc, #108]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1f0      	bne.n	80088dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0308 	and.w	r3, r3, #8
 8008902:	2b00      	cmp	r3, #0
 8008904:	d036      	beq.n	8008974 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d016      	beq.n	800893c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800890e:	4b15      	ldr	r3, [pc, #84]	; (8008964 <HAL_RCC_OscConfig+0x248>)
 8008910:	2201      	movs	r2, #1
 8008912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008914:	f7fe f900 	bl	8006b18 <HAL_GetTick>
 8008918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800891a:	e008      	b.n	800892e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800891c:	f7fe f8fc 	bl	8006b18 <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	2b02      	cmp	r3, #2
 8008928:	d901      	bls.n	800892e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e167      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800892e:	4b0b      	ldr	r3, [pc, #44]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0f0      	beq.n	800891c <HAL_RCC_OscConfig+0x200>
 800893a:	e01b      	b.n	8008974 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800893c:	4b09      	ldr	r3, [pc, #36]	; (8008964 <HAL_RCC_OscConfig+0x248>)
 800893e:	2200      	movs	r2, #0
 8008940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008942:	f7fe f8e9 	bl	8006b18 <HAL_GetTick>
 8008946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008948:	e00e      	b.n	8008968 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800894a:	f7fe f8e5 	bl	8006b18 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	2b02      	cmp	r3, #2
 8008956:	d907      	bls.n	8008968 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e150      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
 800895c:	40023800 	.word	0x40023800
 8008960:	42470000 	.word	0x42470000
 8008964:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008968:	4b88      	ldr	r3, [pc, #544]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 800896a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800896c:	f003 0302 	and.w	r3, r3, #2
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1ea      	bne.n	800894a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0304 	and.w	r3, r3, #4
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8097 	beq.w	8008ab0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008982:	2300      	movs	r3, #0
 8008984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008986:	4b81      	ldr	r3, [pc, #516]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10f      	bne.n	80089b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008992:	2300      	movs	r3, #0
 8008994:	60bb      	str	r3, [r7, #8]
 8008996:	4b7d      	ldr	r3, [pc, #500]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899a:	4a7c      	ldr	r2, [pc, #496]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 800899c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089a0:	6413      	str	r3, [r2, #64]	; 0x40
 80089a2:	4b7a      	ldr	r3, [pc, #488]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089aa:	60bb      	str	r3, [r7, #8]
 80089ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089ae:	2301      	movs	r3, #1
 80089b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089b2:	4b77      	ldr	r3, [pc, #476]	; (8008b90 <HAL_RCC_OscConfig+0x474>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d118      	bne.n	80089f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089be:	4b74      	ldr	r3, [pc, #464]	; (8008b90 <HAL_RCC_OscConfig+0x474>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a73      	ldr	r2, [pc, #460]	; (8008b90 <HAL_RCC_OscConfig+0x474>)
 80089c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089ca:	f7fe f8a5 	bl	8006b18 <HAL_GetTick>
 80089ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089d0:	e008      	b.n	80089e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089d2:	f7fe f8a1 	bl	8006b18 <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d901      	bls.n	80089e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e10c      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089e4:	4b6a      	ldr	r3, [pc, #424]	; (8008b90 <HAL_RCC_OscConfig+0x474>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d0f0      	beq.n	80089d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d106      	bne.n	8008a06 <HAL_RCC_OscConfig+0x2ea>
 80089f8:	4b64      	ldr	r3, [pc, #400]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 80089fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089fc:	4a63      	ldr	r2, [pc, #396]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 80089fe:	f043 0301 	orr.w	r3, r3, #1
 8008a02:	6713      	str	r3, [r2, #112]	; 0x70
 8008a04:	e01c      	b.n	8008a40 <HAL_RCC_OscConfig+0x324>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	2b05      	cmp	r3, #5
 8008a0c:	d10c      	bne.n	8008a28 <HAL_RCC_OscConfig+0x30c>
 8008a0e:	4b5f      	ldr	r3, [pc, #380]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a12:	4a5e      	ldr	r2, [pc, #376]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a14:	f043 0304 	orr.w	r3, r3, #4
 8008a18:	6713      	str	r3, [r2, #112]	; 0x70
 8008a1a:	4b5c      	ldr	r3, [pc, #368]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1e:	4a5b      	ldr	r2, [pc, #364]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a20:	f043 0301 	orr.w	r3, r3, #1
 8008a24:	6713      	str	r3, [r2, #112]	; 0x70
 8008a26:	e00b      	b.n	8008a40 <HAL_RCC_OscConfig+0x324>
 8008a28:	4b58      	ldr	r3, [pc, #352]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2c:	4a57      	ldr	r2, [pc, #348]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a2e:	f023 0301 	bic.w	r3, r3, #1
 8008a32:	6713      	str	r3, [r2, #112]	; 0x70
 8008a34:	4b55      	ldr	r3, [pc, #340]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a38:	4a54      	ldr	r2, [pc, #336]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a3a:	f023 0304 	bic.w	r3, r3, #4
 8008a3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d015      	beq.n	8008a74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a48:	f7fe f866 	bl	8006b18 <HAL_GetTick>
 8008a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a4e:	e00a      	b.n	8008a66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a50:	f7fe f862 	bl	8006b18 <HAL_GetTick>
 8008a54:	4602      	mov	r2, r0
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d901      	bls.n	8008a66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e0cb      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a66:	4b49      	ldr	r3, [pc, #292]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0ee      	beq.n	8008a50 <HAL_RCC_OscConfig+0x334>
 8008a72:	e014      	b.n	8008a9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a74:	f7fe f850 	bl	8006b18 <HAL_GetTick>
 8008a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a7a:	e00a      	b.n	8008a92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a7c:	f7fe f84c 	bl	8006b18 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d901      	bls.n	8008a92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e0b5      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a92:	4b3e      	ldr	r3, [pc, #248]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1ee      	bne.n	8008a7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a9e:	7dfb      	ldrb	r3, [r7, #23]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d105      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008aa4:	4b39      	ldr	r3, [pc, #228]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa8:	4a38      	ldr	r2, [pc, #224]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008aae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 80a1 	beq.w	8008bfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008aba:	4b34      	ldr	r3, [pc, #208]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f003 030c 	and.w	r3, r3, #12
 8008ac2:	2b08      	cmp	r3, #8
 8008ac4:	d05c      	beq.n	8008b80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d141      	bne.n	8008b52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ace:	4b31      	ldr	r3, [pc, #196]	; (8008b94 <HAL_RCC_OscConfig+0x478>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ad4:	f7fe f820 	bl	8006b18 <HAL_GetTick>
 8008ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ada:	e008      	b.n	8008aee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008adc:	f7fe f81c 	bl	8006b18 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d901      	bls.n	8008aee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e087      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aee:	4b27      	ldr	r3, [pc, #156]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1f0      	bne.n	8008adc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	69da      	ldr	r2, [r3, #28]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	431a      	orrs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	019b      	lsls	r3, r3, #6
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b10:	085b      	lsrs	r3, r3, #1
 8008b12:	3b01      	subs	r3, #1
 8008b14:	041b      	lsls	r3, r3, #16
 8008b16:	431a      	orrs	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	061b      	lsls	r3, r3, #24
 8008b1e:	491b      	ldr	r1, [pc, #108]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b24:	4b1b      	ldr	r3, [pc, #108]	; (8008b94 <HAL_RCC_OscConfig+0x478>)
 8008b26:	2201      	movs	r2, #1
 8008b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b2a:	f7fd fff5 	bl	8006b18 <HAL_GetTick>
 8008b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b30:	e008      	b.n	8008b44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b32:	f7fd fff1 	bl	8006b18 <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d901      	bls.n	8008b44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e05c      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b44:	4b11      	ldr	r3, [pc, #68]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d0f0      	beq.n	8008b32 <HAL_RCC_OscConfig+0x416>
 8008b50:	e054      	b.n	8008bfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b52:	4b10      	ldr	r3, [pc, #64]	; (8008b94 <HAL_RCC_OscConfig+0x478>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b58:	f7fd ffde 	bl	8006b18 <HAL_GetTick>
 8008b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b5e:	e008      	b.n	8008b72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b60:	f7fd ffda 	bl	8006b18 <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d901      	bls.n	8008b72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e045      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b72:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1f0      	bne.n	8008b60 <HAL_RCC_OscConfig+0x444>
 8008b7e:	e03d      	b.n	8008bfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d107      	bne.n	8008b98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e038      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
 8008b8c:	40023800 	.word	0x40023800
 8008b90:	40007000 	.word	0x40007000
 8008b94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b98:	4b1b      	ldr	r3, [pc, #108]	; (8008c08 <HAL_RCC_OscConfig+0x4ec>)
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d028      	beq.n	8008bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d121      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d11a      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008bc8:	4013      	ands	r3, r2
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008bce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d111      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bde:	085b      	lsrs	r3, r3, #1
 8008be0:	3b01      	subs	r3, #1
 8008be2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d107      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d001      	beq.n	8008bfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e000      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3718      	adds	r7, #24
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	40023800 	.word	0x40023800

08008c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d101      	bne.n	8008c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e0cc      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c20:	4b68      	ldr	r3, [pc, #416]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 0307 	and.w	r3, r3, #7
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d90c      	bls.n	8008c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c2e:	4b65      	ldr	r3, [pc, #404]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c30:	683a      	ldr	r2, [r7, #0]
 8008c32:	b2d2      	uxtb	r2, r2
 8008c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c36:	4b63      	ldr	r3, [pc, #396]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0307 	and.w	r3, r3, #7
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d001      	beq.n	8008c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e0b8      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d020      	beq.n	8008c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0304 	and.w	r3, r3, #4
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d005      	beq.n	8008c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c60:	4b59      	ldr	r3, [pc, #356]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	4a58      	ldr	r2, [pc, #352]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008c6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0308 	and.w	r3, r3, #8
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d005      	beq.n	8008c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c78:	4b53      	ldr	r3, [pc, #332]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	4a52      	ldr	r2, [pc, #328]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c84:	4b50      	ldr	r3, [pc, #320]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	494d      	ldr	r1, [pc, #308]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d044      	beq.n	8008d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d107      	bne.n	8008cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008caa:	4b47      	ldr	r3, [pc, #284]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d119      	bne.n	8008cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e07f      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d003      	beq.n	8008cca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d107      	bne.n	8008cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cca:	4b3f      	ldr	r3, [pc, #252]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d109      	bne.n	8008cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e06f      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cda:	4b3b      	ldr	r3, [pc, #236]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e067      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008cea:	4b37      	ldr	r3, [pc, #220]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f023 0203 	bic.w	r2, r3, #3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	4934      	ldr	r1, [pc, #208]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008cfc:	f7fd ff0c 	bl	8006b18 <HAL_GetTick>
 8008d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d02:	e00a      	b.n	8008d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d04:	f7fd ff08 	bl	8006b18 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d901      	bls.n	8008d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e04f      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d1a:	4b2b      	ldr	r3, [pc, #172]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f003 020c 	and.w	r2, r3, #12
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d1eb      	bne.n	8008d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d2c:	4b25      	ldr	r3, [pc, #148]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0307 	and.w	r3, r3, #7
 8008d34:	683a      	ldr	r2, [r7, #0]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d20c      	bcs.n	8008d54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d3a:	4b22      	ldr	r3, [pc, #136]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	b2d2      	uxtb	r2, r2
 8008d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d42:	4b20      	ldr	r3, [pc, #128]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0307 	and.w	r3, r3, #7
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d001      	beq.n	8008d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e032      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0304 	and.w	r3, r3, #4
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d008      	beq.n	8008d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d60:	4b19      	ldr	r3, [pc, #100]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	4916      	ldr	r1, [pc, #88]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 0308 	and.w	r3, r3, #8
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d009      	beq.n	8008d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d7e:	4b12      	ldr	r3, [pc, #72]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	00db      	lsls	r3, r3, #3
 8008d8c:	490e      	ldr	r1, [pc, #56]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d92:	f000 f821 	bl	8008dd8 <HAL_RCC_GetSysClockFreq>
 8008d96:	4602      	mov	r2, r0
 8008d98:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	091b      	lsrs	r3, r3, #4
 8008d9e:	f003 030f 	and.w	r3, r3, #15
 8008da2:	490a      	ldr	r1, [pc, #40]	; (8008dcc <HAL_RCC_ClockConfig+0x1c0>)
 8008da4:	5ccb      	ldrb	r3, [r1, r3]
 8008da6:	fa22 f303 	lsr.w	r3, r2, r3
 8008daa:	4a09      	ldr	r2, [pc, #36]	; (8008dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008dae:	4b09      	ldr	r3, [pc, #36]	; (8008dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fd fe6c 	bl	8006a90 <HAL_InitTick>

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	40023c00 	.word	0x40023c00
 8008dc8:	40023800 	.word	0x40023800
 8008dcc:	0801093c 	.word	0x0801093c
 8008dd0:	2000131c 	.word	0x2000131c
 8008dd4:	200013dc 	.word	0x200013dc

08008dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ddc:	b090      	sub	sp, #64	; 0x40
 8008dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	637b      	str	r3, [r7, #52]	; 0x34
 8008de4:	2300      	movs	r3, #0
 8008de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008de8:	2300      	movs	r3, #0
 8008dea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008dec:	2300      	movs	r3, #0
 8008dee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008df0:	4b59      	ldr	r3, [pc, #356]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	f003 030c 	and.w	r3, r3, #12
 8008df8:	2b08      	cmp	r3, #8
 8008dfa:	d00d      	beq.n	8008e18 <HAL_RCC_GetSysClockFreq+0x40>
 8008dfc:	2b08      	cmp	r3, #8
 8008dfe:	f200 80a1 	bhi.w	8008f44 <HAL_RCC_GetSysClockFreq+0x16c>
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d002      	beq.n	8008e0c <HAL_RCC_GetSysClockFreq+0x34>
 8008e06:	2b04      	cmp	r3, #4
 8008e08:	d003      	beq.n	8008e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8008e0a:	e09b      	b.n	8008f44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e0c:	4b53      	ldr	r3, [pc, #332]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x184>)
 8008e0e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008e10:	e09b      	b.n	8008f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e12:	4b53      	ldr	r3, [pc, #332]	; (8008f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008e16:	e098      	b.n	8008f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e18:	4b4f      	ldr	r3, [pc, #316]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e20:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008e22:	4b4d      	ldr	r3, [pc, #308]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d028      	beq.n	8008e80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e2e:	4b4a      	ldr	r3, [pc, #296]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	099b      	lsrs	r3, r3, #6
 8008e34:	2200      	movs	r2, #0
 8008e36:	623b      	str	r3, [r7, #32]
 8008e38:	627a      	str	r2, [r7, #36]	; 0x24
 8008e3a:	6a3b      	ldr	r3, [r7, #32]
 8008e3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008e40:	2100      	movs	r1, #0
 8008e42:	4b47      	ldr	r3, [pc, #284]	; (8008f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e44:	fb03 f201 	mul.w	r2, r3, r1
 8008e48:	2300      	movs	r3, #0
 8008e4a:	fb00 f303 	mul.w	r3, r0, r3
 8008e4e:	4413      	add	r3, r2
 8008e50:	4a43      	ldr	r2, [pc, #268]	; (8008f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e52:	fba0 1202 	umull	r1, r2, r0, r2
 8008e56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e58:	460a      	mov	r2, r1
 8008e5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8008e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e5e:	4413      	add	r3, r2
 8008e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e64:	2200      	movs	r2, #0
 8008e66:	61bb      	str	r3, [r7, #24]
 8008e68:	61fa      	str	r2, [r7, #28]
 8008e6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008e72:	f7f7 ff19 	bl	8000ca8 <__aeabi_uldivmod>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e7e:	e053      	b.n	8008f28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e80:	4b35      	ldr	r3, [pc, #212]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	099b      	lsrs	r3, r3, #6
 8008e86:	2200      	movs	r2, #0
 8008e88:	613b      	str	r3, [r7, #16]
 8008e8a:	617a      	str	r2, [r7, #20]
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008e92:	f04f 0b00 	mov.w	fp, #0
 8008e96:	4652      	mov	r2, sl
 8008e98:	465b      	mov	r3, fp
 8008e9a:	f04f 0000 	mov.w	r0, #0
 8008e9e:	f04f 0100 	mov.w	r1, #0
 8008ea2:	0159      	lsls	r1, r3, #5
 8008ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ea8:	0150      	lsls	r0, r2, #5
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	ebb2 080a 	subs.w	r8, r2, sl
 8008eb2:	eb63 090b 	sbc.w	r9, r3, fp
 8008eb6:	f04f 0200 	mov.w	r2, #0
 8008eba:	f04f 0300 	mov.w	r3, #0
 8008ebe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008ec2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008ec6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008eca:	ebb2 0408 	subs.w	r4, r2, r8
 8008ece:	eb63 0509 	sbc.w	r5, r3, r9
 8008ed2:	f04f 0200 	mov.w	r2, #0
 8008ed6:	f04f 0300 	mov.w	r3, #0
 8008eda:	00eb      	lsls	r3, r5, #3
 8008edc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ee0:	00e2      	lsls	r2, r4, #3
 8008ee2:	4614      	mov	r4, r2
 8008ee4:	461d      	mov	r5, r3
 8008ee6:	eb14 030a 	adds.w	r3, r4, sl
 8008eea:	603b      	str	r3, [r7, #0]
 8008eec:	eb45 030b 	adc.w	r3, r5, fp
 8008ef0:	607b      	str	r3, [r7, #4]
 8008ef2:	f04f 0200 	mov.w	r2, #0
 8008ef6:	f04f 0300 	mov.w	r3, #0
 8008efa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008efe:	4629      	mov	r1, r5
 8008f00:	028b      	lsls	r3, r1, #10
 8008f02:	4621      	mov	r1, r4
 8008f04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008f08:	4621      	mov	r1, r4
 8008f0a:	028a      	lsls	r2, r1, #10
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f12:	2200      	movs	r2, #0
 8008f14:	60bb      	str	r3, [r7, #8]
 8008f16:	60fa      	str	r2, [r7, #12]
 8008f18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f1c:	f7f7 fec4 	bl	8000ca8 <__aeabi_uldivmod>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4613      	mov	r3, r2
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008f28:	4b0b      	ldr	r3, [pc, #44]	; (8008f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	0c1b      	lsrs	r3, r3, #16
 8008f2e:	f003 0303 	and.w	r3, r3, #3
 8008f32:	3301      	adds	r3, #1
 8008f34:	005b      	lsls	r3, r3, #1
 8008f36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008f38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008f42:	e002      	b.n	8008f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f44:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <HAL_RCC_GetSysClockFreq+0x184>)
 8008f46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3740      	adds	r7, #64	; 0x40
 8008f50:	46bd      	mov	sp, r7
 8008f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f56:	bf00      	nop
 8008f58:	40023800 	.word	0x40023800
 8008f5c:	00f42400 	.word	0x00f42400
 8008f60:	00b71b00 	.word	0x00b71b00

08008f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f64:	b480      	push	{r7}
 8008f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f68:	4b03      	ldr	r3, [pc, #12]	; (8008f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	2000131c 	.word	0x2000131c

08008f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f80:	f7ff fff0 	bl	8008f64 <HAL_RCC_GetHCLKFreq>
 8008f84:	4602      	mov	r2, r0
 8008f86:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	0a9b      	lsrs	r3, r3, #10
 8008f8c:	f003 0307 	and.w	r3, r3, #7
 8008f90:	4903      	ldr	r1, [pc, #12]	; (8008fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f92:	5ccb      	ldrb	r3, [r1, r3]
 8008f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	40023800 	.word	0x40023800
 8008fa0:	0801094c 	.word	0x0801094c

08008fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008fa8:	f7ff ffdc 	bl	8008f64 <HAL_RCC_GetHCLKFreq>
 8008fac:	4602      	mov	r2, r0
 8008fae:	4b05      	ldr	r3, [pc, #20]	; (8008fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	0b5b      	lsrs	r3, r3, #13
 8008fb4:	f003 0307 	and.w	r3, r3, #7
 8008fb8:	4903      	ldr	r1, [pc, #12]	; (8008fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fba:	5ccb      	ldrb	r3, [r1, r3]
 8008fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	40023800 	.word	0x40023800
 8008fc8:	0801094c 	.word	0x0801094c

08008fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e041      	b.n	8009062 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d106      	bne.n	8008ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7fd f8c4 	bl	8006180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3304      	adds	r3, #4
 8009008:	4619      	mov	r1, r3
 800900a:	4610      	mov	r0, r2
 800900c:	f000 fd52 	bl	8009ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b01      	cmp	r3, #1
 800907e:	d001      	beq.n	8009084 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	e046      	b.n	8009112 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2202      	movs	r2, #2
 8009088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a23      	ldr	r2, [pc, #140]	; (8009120 <HAL_TIM_Base_Start+0xb4>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d022      	beq.n	80090dc <HAL_TIM_Base_Start+0x70>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800909e:	d01d      	beq.n	80090dc <HAL_TIM_Base_Start+0x70>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a1f      	ldr	r2, [pc, #124]	; (8009124 <HAL_TIM_Base_Start+0xb8>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d018      	beq.n	80090dc <HAL_TIM_Base_Start+0x70>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a1e      	ldr	r2, [pc, #120]	; (8009128 <HAL_TIM_Base_Start+0xbc>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d013      	beq.n	80090dc <HAL_TIM_Base_Start+0x70>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a1c      	ldr	r2, [pc, #112]	; (800912c <HAL_TIM_Base_Start+0xc0>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d00e      	beq.n	80090dc <HAL_TIM_Base_Start+0x70>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a1b      	ldr	r2, [pc, #108]	; (8009130 <HAL_TIM_Base_Start+0xc4>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d009      	beq.n	80090dc <HAL_TIM_Base_Start+0x70>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a19      	ldr	r2, [pc, #100]	; (8009134 <HAL_TIM_Base_Start+0xc8>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d004      	beq.n	80090dc <HAL_TIM_Base_Start+0x70>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a18      	ldr	r2, [pc, #96]	; (8009138 <HAL_TIM_Base_Start+0xcc>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d111      	bne.n	8009100 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2b06      	cmp	r3, #6
 80090ec:	d010      	beq.n	8009110 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f042 0201 	orr.w	r2, r2, #1
 80090fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090fe:	e007      	b.n	8009110 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f042 0201 	orr.w	r2, r2, #1
 800910e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	40010000 	.word	0x40010000
 8009124:	40000400 	.word	0x40000400
 8009128:	40000800 	.word	0x40000800
 800912c:	40000c00 	.word	0x40000c00
 8009130:	40010400 	.word	0x40010400
 8009134:	40014000 	.word	0x40014000
 8009138:	40001800 	.word	0x40001800

0800913c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b01      	cmp	r3, #1
 800914e:	d001      	beq.n	8009154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e04e      	b.n	80091f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68da      	ldr	r2, [r3, #12]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f042 0201 	orr.w	r2, r2, #1
 800916a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a23      	ldr	r2, [pc, #140]	; (8009200 <HAL_TIM_Base_Start_IT+0xc4>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d022      	beq.n	80091bc <HAL_TIM_Base_Start_IT+0x80>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800917e:	d01d      	beq.n	80091bc <HAL_TIM_Base_Start_IT+0x80>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a1f      	ldr	r2, [pc, #124]	; (8009204 <HAL_TIM_Base_Start_IT+0xc8>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d018      	beq.n	80091bc <HAL_TIM_Base_Start_IT+0x80>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a1e      	ldr	r2, [pc, #120]	; (8009208 <HAL_TIM_Base_Start_IT+0xcc>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d013      	beq.n	80091bc <HAL_TIM_Base_Start_IT+0x80>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a1c      	ldr	r2, [pc, #112]	; (800920c <HAL_TIM_Base_Start_IT+0xd0>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d00e      	beq.n	80091bc <HAL_TIM_Base_Start_IT+0x80>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a1b      	ldr	r2, [pc, #108]	; (8009210 <HAL_TIM_Base_Start_IT+0xd4>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d009      	beq.n	80091bc <HAL_TIM_Base_Start_IT+0x80>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a19      	ldr	r2, [pc, #100]	; (8009214 <HAL_TIM_Base_Start_IT+0xd8>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d004      	beq.n	80091bc <HAL_TIM_Base_Start_IT+0x80>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a18      	ldr	r2, [pc, #96]	; (8009218 <HAL_TIM_Base_Start_IT+0xdc>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d111      	bne.n	80091e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	f003 0307 	and.w	r3, r3, #7
 80091c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2b06      	cmp	r3, #6
 80091cc:	d010      	beq.n	80091f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f042 0201 	orr.w	r2, r2, #1
 80091dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091de:	e007      	b.n	80091f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f042 0201 	orr.w	r2, r2, #1
 80091ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	40010000 	.word	0x40010000
 8009204:	40000400 	.word	0x40000400
 8009208:	40000800 	.word	0x40000800
 800920c:	40000c00 	.word	0x40000c00
 8009210:	40010400 	.word	0x40010400
 8009214:	40014000 	.word	0x40014000
 8009218:	40001800 	.word	0x40001800

0800921c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e041      	b.n	80092b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b00      	cmp	r3, #0
 8009238:	d106      	bne.n	8009248 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f839 	bl	80092ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2202      	movs	r2, #2
 800924c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	3304      	adds	r3, #4
 8009258:	4619      	mov	r1, r3
 800925a:	4610      	mov	r0, r2
 800925c:	f000 fc2a 	bl	8009ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80092ba:	b480      	push	{r7}
 80092bc:	b083      	sub	sp, #12
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80092c2:	bf00      	nop
 80092c4:	370c      	adds	r7, #12
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
	...

080092d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d109      	bne.n	80092f4 <HAL_TIM_PWM_Start+0x24>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	bf14      	ite	ne
 80092ec:	2301      	movne	r3, #1
 80092ee:	2300      	moveq	r3, #0
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	e022      	b.n	800933a <HAL_TIM_PWM_Start+0x6a>
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2b04      	cmp	r3, #4
 80092f8:	d109      	bne.n	800930e <HAL_TIM_PWM_Start+0x3e>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b01      	cmp	r3, #1
 8009304:	bf14      	ite	ne
 8009306:	2301      	movne	r3, #1
 8009308:	2300      	moveq	r3, #0
 800930a:	b2db      	uxtb	r3, r3
 800930c:	e015      	b.n	800933a <HAL_TIM_PWM_Start+0x6a>
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b08      	cmp	r3, #8
 8009312:	d109      	bne.n	8009328 <HAL_TIM_PWM_Start+0x58>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b01      	cmp	r3, #1
 800931e:	bf14      	ite	ne
 8009320:	2301      	movne	r3, #1
 8009322:	2300      	moveq	r3, #0
 8009324:	b2db      	uxtb	r3, r3
 8009326:	e008      	b.n	800933a <HAL_TIM_PWM_Start+0x6a>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b01      	cmp	r3, #1
 8009332:	bf14      	ite	ne
 8009334:	2301      	movne	r3, #1
 8009336:	2300      	moveq	r3, #0
 8009338:	b2db      	uxtb	r3, r3
 800933a:	2b00      	cmp	r3, #0
 800933c:	d001      	beq.n	8009342 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e07c      	b.n	800943c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d104      	bne.n	8009352 <HAL_TIM_PWM_Start+0x82>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2202      	movs	r2, #2
 800934c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009350:	e013      	b.n	800937a <HAL_TIM_PWM_Start+0xaa>
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	2b04      	cmp	r3, #4
 8009356:	d104      	bne.n	8009362 <HAL_TIM_PWM_Start+0x92>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2202      	movs	r2, #2
 800935c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009360:	e00b      	b.n	800937a <HAL_TIM_PWM_Start+0xaa>
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	2b08      	cmp	r3, #8
 8009366:	d104      	bne.n	8009372 <HAL_TIM_PWM_Start+0xa2>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2202      	movs	r2, #2
 800936c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009370:	e003      	b.n	800937a <HAL_TIM_PWM_Start+0xaa>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2202      	movs	r2, #2
 8009376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2201      	movs	r2, #1
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fe80 	bl	800a088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a2d      	ldr	r2, [pc, #180]	; (8009444 <HAL_TIM_PWM_Start+0x174>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d004      	beq.n	800939c <HAL_TIM_PWM_Start+0xcc>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a2c      	ldr	r2, [pc, #176]	; (8009448 <HAL_TIM_PWM_Start+0x178>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d101      	bne.n	80093a0 <HAL_TIM_PWM_Start+0xd0>
 800939c:	2301      	movs	r3, #1
 800939e:	e000      	b.n	80093a2 <HAL_TIM_PWM_Start+0xd2>
 80093a0:	2300      	movs	r3, #0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d007      	beq.n	80093b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a22      	ldr	r2, [pc, #136]	; (8009444 <HAL_TIM_PWM_Start+0x174>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d022      	beq.n	8009406 <HAL_TIM_PWM_Start+0x136>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c8:	d01d      	beq.n	8009406 <HAL_TIM_PWM_Start+0x136>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a1f      	ldr	r2, [pc, #124]	; (800944c <HAL_TIM_PWM_Start+0x17c>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d018      	beq.n	8009406 <HAL_TIM_PWM_Start+0x136>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a1d      	ldr	r2, [pc, #116]	; (8009450 <HAL_TIM_PWM_Start+0x180>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d013      	beq.n	8009406 <HAL_TIM_PWM_Start+0x136>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a1c      	ldr	r2, [pc, #112]	; (8009454 <HAL_TIM_PWM_Start+0x184>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d00e      	beq.n	8009406 <HAL_TIM_PWM_Start+0x136>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a16      	ldr	r2, [pc, #88]	; (8009448 <HAL_TIM_PWM_Start+0x178>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d009      	beq.n	8009406 <HAL_TIM_PWM_Start+0x136>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a18      	ldr	r2, [pc, #96]	; (8009458 <HAL_TIM_PWM_Start+0x188>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d004      	beq.n	8009406 <HAL_TIM_PWM_Start+0x136>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a16      	ldr	r2, [pc, #88]	; (800945c <HAL_TIM_PWM_Start+0x18c>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d111      	bne.n	800942a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f003 0307 	and.w	r3, r3, #7
 8009410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2b06      	cmp	r3, #6
 8009416:	d010      	beq.n	800943a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f042 0201 	orr.w	r2, r2, #1
 8009426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009428:	e007      	b.n	800943a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f042 0201 	orr.w	r2, r2, #1
 8009438:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	40010000 	.word	0x40010000
 8009448:	40010400 	.word	0x40010400
 800944c:	40000400 	.word	0x40000400
 8009450:	40000800 	.word	0x40000800
 8009454:	40000c00 	.word	0x40000c00
 8009458:	40014000 	.word	0x40014000
 800945c:	40001800 	.word	0x40001800

08009460 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2200      	movs	r2, #0
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	4618      	mov	r0, r3
 8009474:	f000 fe08 	bl	800a088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a2e      	ldr	r2, [pc, #184]	; (8009538 <HAL_TIM_PWM_Stop+0xd8>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d004      	beq.n	800948c <HAL_TIM_PWM_Stop+0x2c>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a2d      	ldr	r2, [pc, #180]	; (800953c <HAL_TIM_PWM_Stop+0xdc>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d101      	bne.n	8009490 <HAL_TIM_PWM_Stop+0x30>
 800948c:	2301      	movs	r3, #1
 800948e:	e000      	b.n	8009492 <HAL_TIM_PWM_Stop+0x32>
 8009490:	2300      	movs	r3, #0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d017      	beq.n	80094c6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	6a1a      	ldr	r2, [r3, #32]
 800949c:	f241 1311 	movw	r3, #4369	; 0x1111
 80094a0:	4013      	ands	r3, r2
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10f      	bne.n	80094c6 <HAL_TIM_PWM_Stop+0x66>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6a1a      	ldr	r2, [r3, #32]
 80094ac:	f240 4344 	movw	r3, #1092	; 0x444
 80094b0:	4013      	ands	r3, r2
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d107      	bne.n	80094c6 <HAL_TIM_PWM_Stop+0x66>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6a1a      	ldr	r2, [r3, #32]
 80094cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80094d0:	4013      	ands	r3, r2
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10f      	bne.n	80094f6 <HAL_TIM_PWM_Stop+0x96>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	6a1a      	ldr	r2, [r3, #32]
 80094dc:	f240 4344 	movw	r3, #1092	; 0x444
 80094e0:	4013      	ands	r3, r2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d107      	bne.n	80094f6 <HAL_TIM_PWM_Stop+0x96>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f022 0201 	bic.w	r2, r2, #1
 80094f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d104      	bne.n	8009506 <HAL_TIM_PWM_Stop+0xa6>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009504:	e013      	b.n	800952e <HAL_TIM_PWM_Stop+0xce>
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2b04      	cmp	r3, #4
 800950a:	d104      	bne.n	8009516 <HAL_TIM_PWM_Stop+0xb6>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009514:	e00b      	b.n	800952e <HAL_TIM_PWM_Stop+0xce>
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2b08      	cmp	r3, #8
 800951a:	d104      	bne.n	8009526 <HAL_TIM_PWM_Stop+0xc6>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009524:	e003      	b.n	800952e <HAL_TIM_PWM_Stop+0xce>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	40010000 	.word	0x40010000
 800953c:	40010400 	.word	0x40010400

08009540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	f003 0302 	and.w	r3, r3, #2
 8009552:	2b02      	cmp	r3, #2
 8009554:	d122      	bne.n	800959c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	f003 0302 	and.w	r3, r3, #2
 8009560:	2b02      	cmp	r3, #2
 8009562:	d11b      	bne.n	800959c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f06f 0202 	mvn.w	r2, #2
 800956c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	f003 0303 	and.w	r3, r3, #3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fa77 	bl	8009a76 <HAL_TIM_IC_CaptureCallback>
 8009588:	e005      	b.n	8009596 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fa69 	bl	8009a62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fa7a 	bl	8009a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	f003 0304 	and.w	r3, r3, #4
 80095a6:	2b04      	cmp	r3, #4
 80095a8:	d122      	bne.n	80095f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	f003 0304 	and.w	r3, r3, #4
 80095b4:	2b04      	cmp	r3, #4
 80095b6:	d11b      	bne.n	80095f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f06f 0204 	mvn.w	r2, #4
 80095c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2202      	movs	r2, #2
 80095c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d003      	beq.n	80095de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 fa4d 	bl	8009a76 <HAL_TIM_IC_CaptureCallback>
 80095dc:	e005      	b.n	80095ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fa3f 	bl	8009a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fa50 	bl	8009a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	f003 0308 	and.w	r3, r3, #8
 80095fa:	2b08      	cmp	r3, #8
 80095fc:	d122      	bne.n	8009644 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f003 0308 	and.w	r3, r3, #8
 8009608:	2b08      	cmp	r3, #8
 800960a:	d11b      	bne.n	8009644 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f06f 0208 	mvn.w	r2, #8
 8009614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2204      	movs	r2, #4
 800961a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	69db      	ldr	r3, [r3, #28]
 8009622:	f003 0303 	and.w	r3, r3, #3
 8009626:	2b00      	cmp	r3, #0
 8009628:	d003      	beq.n	8009632 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fa23 	bl	8009a76 <HAL_TIM_IC_CaptureCallback>
 8009630:	e005      	b.n	800963e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fa15 	bl	8009a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fa26 	bl	8009a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	f003 0310 	and.w	r3, r3, #16
 800964e:	2b10      	cmp	r3, #16
 8009650:	d122      	bne.n	8009698 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	f003 0310 	and.w	r3, r3, #16
 800965c:	2b10      	cmp	r3, #16
 800965e:	d11b      	bne.n	8009698 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f06f 0210 	mvn.w	r2, #16
 8009668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2208      	movs	r2, #8
 800966e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f9f9 	bl	8009a76 <HAL_TIM_IC_CaptureCallback>
 8009684:	e005      	b.n	8009692 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f9eb 	bl	8009a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f9fc 	bl	8009a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d10e      	bne.n	80096c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d107      	bne.n	80096c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f06f 0201 	mvn.w	r2, #1
 80096bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7fc fa96 	bl	8005bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ce:	2b80      	cmp	r3, #128	; 0x80
 80096d0:	d10e      	bne.n	80096f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096dc:	2b80      	cmp	r3, #128	; 0x80
 80096de:	d107      	bne.n	80096f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80096e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fdca 	bl	800a284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096fa:	2b40      	cmp	r3, #64	; 0x40
 80096fc:	d10e      	bne.n	800971c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009708:	2b40      	cmp	r3, #64	; 0x40
 800970a:	d107      	bne.n	800971c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f9c1 	bl	8009a9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	f003 0320 	and.w	r3, r3, #32
 8009726:	2b20      	cmp	r3, #32
 8009728:	d10e      	bne.n	8009748 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	f003 0320 	and.w	r3, r3, #32
 8009734:	2b20      	cmp	r3, #32
 8009736:	d107      	bne.n	8009748 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f06f 0220 	mvn.w	r2, #32
 8009740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fd94 	bl	800a270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009748:	bf00      	nop
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009766:	2b01      	cmp	r3, #1
 8009768:	d101      	bne.n	800976e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800976a:	2302      	movs	r3, #2
 800976c:	e0ae      	b.n	80098cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2201      	movs	r2, #1
 8009772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2b0c      	cmp	r3, #12
 800977a:	f200 809f 	bhi.w	80098bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800977e:	a201      	add	r2, pc, #4	; (adr r2, 8009784 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009784:	080097b9 	.word	0x080097b9
 8009788:	080098bd 	.word	0x080098bd
 800978c:	080098bd 	.word	0x080098bd
 8009790:	080098bd 	.word	0x080098bd
 8009794:	080097f9 	.word	0x080097f9
 8009798:	080098bd 	.word	0x080098bd
 800979c:	080098bd 	.word	0x080098bd
 80097a0:	080098bd 	.word	0x080098bd
 80097a4:	0800983b 	.word	0x0800983b
 80097a8:	080098bd 	.word	0x080098bd
 80097ac:	080098bd 	.word	0x080098bd
 80097b0:	080098bd 	.word	0x080098bd
 80097b4:	0800987b 	.word	0x0800987b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68b9      	ldr	r1, [r7, #8]
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 fa18 	bl	8009bf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	699a      	ldr	r2, [r3, #24]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f042 0208 	orr.w	r2, r2, #8
 80097d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	699a      	ldr	r2, [r3, #24]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0204 	bic.w	r2, r2, #4
 80097e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6999      	ldr	r1, [r3, #24]
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	691a      	ldr	r2, [r3, #16]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	430a      	orrs	r2, r1
 80097f4:	619a      	str	r2, [r3, #24]
      break;
 80097f6:	e064      	b.n	80098c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68b9      	ldr	r1, [r7, #8]
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 fa68 	bl	8009cd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	699a      	ldr	r2, [r3, #24]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	699a      	ldr	r2, [r3, #24]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	6999      	ldr	r1, [r3, #24]
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	021a      	lsls	r2, r3, #8
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	430a      	orrs	r2, r1
 8009836:	619a      	str	r2, [r3, #24]
      break;
 8009838:	e043      	b.n	80098c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68b9      	ldr	r1, [r7, #8]
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fabd 	bl	8009dc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	69da      	ldr	r2, [r3, #28]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f042 0208 	orr.w	r2, r2, #8
 8009854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	69da      	ldr	r2, [r3, #28]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 0204 	bic.w	r2, r2, #4
 8009864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	69d9      	ldr	r1, [r3, #28]
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	691a      	ldr	r2, [r3, #16]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	430a      	orrs	r2, r1
 8009876:	61da      	str	r2, [r3, #28]
      break;
 8009878:	e023      	b.n	80098c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68b9      	ldr	r1, [r7, #8]
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fb11 	bl	8009ea8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	69da      	ldr	r2, [r3, #28]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	69da      	ldr	r2, [r3, #28]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	69d9      	ldr	r1, [r3, #28]
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	021a      	lsls	r2, r3, #8
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	430a      	orrs	r2, r1
 80098b8:	61da      	str	r2, [r3, #28]
      break;
 80098ba:	e002      	b.n	80098c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	75fb      	strb	r3, [r7, #23]
      break;
 80098c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d101      	bne.n	80098f0 <HAL_TIM_ConfigClockSource+0x1c>
 80098ec:	2302      	movs	r3, #2
 80098ee:	e0b4      	b.n	8009a5a <HAL_TIM_ConfigClockSource+0x186>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800990e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009928:	d03e      	beq.n	80099a8 <HAL_TIM_ConfigClockSource+0xd4>
 800992a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800992e:	f200 8087 	bhi.w	8009a40 <HAL_TIM_ConfigClockSource+0x16c>
 8009932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009936:	f000 8086 	beq.w	8009a46 <HAL_TIM_ConfigClockSource+0x172>
 800993a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800993e:	d87f      	bhi.n	8009a40 <HAL_TIM_ConfigClockSource+0x16c>
 8009940:	2b70      	cmp	r3, #112	; 0x70
 8009942:	d01a      	beq.n	800997a <HAL_TIM_ConfigClockSource+0xa6>
 8009944:	2b70      	cmp	r3, #112	; 0x70
 8009946:	d87b      	bhi.n	8009a40 <HAL_TIM_ConfigClockSource+0x16c>
 8009948:	2b60      	cmp	r3, #96	; 0x60
 800994a:	d050      	beq.n	80099ee <HAL_TIM_ConfigClockSource+0x11a>
 800994c:	2b60      	cmp	r3, #96	; 0x60
 800994e:	d877      	bhi.n	8009a40 <HAL_TIM_ConfigClockSource+0x16c>
 8009950:	2b50      	cmp	r3, #80	; 0x50
 8009952:	d03c      	beq.n	80099ce <HAL_TIM_ConfigClockSource+0xfa>
 8009954:	2b50      	cmp	r3, #80	; 0x50
 8009956:	d873      	bhi.n	8009a40 <HAL_TIM_ConfigClockSource+0x16c>
 8009958:	2b40      	cmp	r3, #64	; 0x40
 800995a:	d058      	beq.n	8009a0e <HAL_TIM_ConfigClockSource+0x13a>
 800995c:	2b40      	cmp	r3, #64	; 0x40
 800995e:	d86f      	bhi.n	8009a40 <HAL_TIM_ConfigClockSource+0x16c>
 8009960:	2b30      	cmp	r3, #48	; 0x30
 8009962:	d064      	beq.n	8009a2e <HAL_TIM_ConfigClockSource+0x15a>
 8009964:	2b30      	cmp	r3, #48	; 0x30
 8009966:	d86b      	bhi.n	8009a40 <HAL_TIM_ConfigClockSource+0x16c>
 8009968:	2b20      	cmp	r3, #32
 800996a:	d060      	beq.n	8009a2e <HAL_TIM_ConfigClockSource+0x15a>
 800996c:	2b20      	cmp	r3, #32
 800996e:	d867      	bhi.n	8009a40 <HAL_TIM_ConfigClockSource+0x16c>
 8009970:	2b00      	cmp	r3, #0
 8009972:	d05c      	beq.n	8009a2e <HAL_TIM_ConfigClockSource+0x15a>
 8009974:	2b10      	cmp	r3, #16
 8009976:	d05a      	beq.n	8009a2e <HAL_TIM_ConfigClockSource+0x15a>
 8009978:	e062      	b.n	8009a40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6818      	ldr	r0, [r3, #0]
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	6899      	ldr	r1, [r3, #8]
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	685a      	ldr	r2, [r3, #4]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f000 fb5d 	bl	800a048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800999c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	609a      	str	r2, [r3, #8]
      break;
 80099a6:	e04f      	b.n	8009a48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6818      	ldr	r0, [r3, #0]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	6899      	ldr	r1, [r3, #8]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	f000 fb46 	bl	800a048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	689a      	ldr	r2, [r3, #8]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80099ca:	609a      	str	r2, [r3, #8]
      break;
 80099cc:	e03c      	b.n	8009a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6818      	ldr	r0, [r3, #0]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	6859      	ldr	r1, [r3, #4]
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	461a      	mov	r2, r3
 80099dc:	f000 faba 	bl	8009f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2150      	movs	r1, #80	; 0x50
 80099e6:	4618      	mov	r0, r3
 80099e8:	f000 fb13 	bl	800a012 <TIM_ITRx_SetConfig>
      break;
 80099ec:	e02c      	b.n	8009a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6818      	ldr	r0, [r3, #0]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	6859      	ldr	r1, [r3, #4]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	461a      	mov	r2, r3
 80099fc:	f000 fad9 	bl	8009fb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2160      	movs	r1, #96	; 0x60
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 fb03 	bl	800a012 <TIM_ITRx_SetConfig>
      break;
 8009a0c:	e01c      	b.n	8009a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6818      	ldr	r0, [r3, #0]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	6859      	ldr	r1, [r3, #4]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	f000 fa9a 	bl	8009f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2140      	movs	r1, #64	; 0x40
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 faf3 	bl	800a012 <TIM_ITRx_SetConfig>
      break;
 8009a2c:	e00c      	b.n	8009a48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4619      	mov	r1, r3
 8009a38:	4610      	mov	r0, r2
 8009a3a:	f000 faea 	bl	800a012 <TIM_ITRx_SetConfig>
      break;
 8009a3e:	e003      	b.n	8009a48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	73fb      	strb	r3, [r7, #15]
      break;
 8009a44:	e000      	b.n	8009a48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009a46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a62:	b480      	push	{r7}
 8009a64:	b083      	sub	sp, #12
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a6a:	bf00      	nop
 8009a6c:	370c      	adds	r7, #12
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr

08009a76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a76:	b480      	push	{r7}
 8009a78:	b083      	sub	sp, #12
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a7e:	bf00      	nop
 8009a80:	370c      	adds	r7, #12
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr

08009a8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	b083      	sub	sp, #12
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a92:	bf00      	nop
 8009a94:	370c      	adds	r7, #12
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a9e:	b480      	push	{r7}
 8009aa0:	b083      	sub	sp, #12
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009aa6:	bf00      	nop
 8009aa8:	370c      	adds	r7, #12
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
	...

08009ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a40      	ldr	r2, [pc, #256]	; (8009bc8 <TIM_Base_SetConfig+0x114>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d013      	beq.n	8009af4 <TIM_Base_SetConfig+0x40>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ad2:	d00f      	beq.n	8009af4 <TIM_Base_SetConfig+0x40>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a3d      	ldr	r2, [pc, #244]	; (8009bcc <TIM_Base_SetConfig+0x118>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d00b      	beq.n	8009af4 <TIM_Base_SetConfig+0x40>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a3c      	ldr	r2, [pc, #240]	; (8009bd0 <TIM_Base_SetConfig+0x11c>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d007      	beq.n	8009af4 <TIM_Base_SetConfig+0x40>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a3b      	ldr	r2, [pc, #236]	; (8009bd4 <TIM_Base_SetConfig+0x120>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d003      	beq.n	8009af4 <TIM_Base_SetConfig+0x40>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a3a      	ldr	r2, [pc, #232]	; (8009bd8 <TIM_Base_SetConfig+0x124>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d108      	bne.n	8009b06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a2f      	ldr	r2, [pc, #188]	; (8009bc8 <TIM_Base_SetConfig+0x114>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d02b      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b14:	d027      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a2c      	ldr	r2, [pc, #176]	; (8009bcc <TIM_Base_SetConfig+0x118>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d023      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a2b      	ldr	r2, [pc, #172]	; (8009bd0 <TIM_Base_SetConfig+0x11c>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d01f      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a2a      	ldr	r2, [pc, #168]	; (8009bd4 <TIM_Base_SetConfig+0x120>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d01b      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a29      	ldr	r2, [pc, #164]	; (8009bd8 <TIM_Base_SetConfig+0x124>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d017      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a28      	ldr	r2, [pc, #160]	; (8009bdc <TIM_Base_SetConfig+0x128>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d013      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a27      	ldr	r2, [pc, #156]	; (8009be0 <TIM_Base_SetConfig+0x12c>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d00f      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a26      	ldr	r2, [pc, #152]	; (8009be4 <TIM_Base_SetConfig+0x130>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d00b      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a25      	ldr	r2, [pc, #148]	; (8009be8 <TIM_Base_SetConfig+0x134>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d007      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a24      	ldr	r2, [pc, #144]	; (8009bec <TIM_Base_SetConfig+0x138>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d003      	beq.n	8009b66 <TIM_Base_SetConfig+0xb2>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a23      	ldr	r2, [pc, #140]	; (8009bf0 <TIM_Base_SetConfig+0x13c>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d108      	bne.n	8009b78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	689a      	ldr	r2, [r3, #8]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a0a      	ldr	r2, [pc, #40]	; (8009bc8 <TIM_Base_SetConfig+0x114>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d003      	beq.n	8009bac <TIM_Base_SetConfig+0xf8>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a0c      	ldr	r2, [pc, #48]	; (8009bd8 <TIM_Base_SetConfig+0x124>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d103      	bne.n	8009bb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	691a      	ldr	r2, [r3, #16]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	615a      	str	r2, [r3, #20]
}
 8009bba:	bf00      	nop
 8009bbc:	3714      	adds	r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	40010000 	.word	0x40010000
 8009bcc:	40000400 	.word	0x40000400
 8009bd0:	40000800 	.word	0x40000800
 8009bd4:	40000c00 	.word	0x40000c00
 8009bd8:	40010400 	.word	0x40010400
 8009bdc:	40014000 	.word	0x40014000
 8009be0:	40014400 	.word	0x40014400
 8009be4:	40014800 	.word	0x40014800
 8009be8:	40001800 	.word	0x40001800
 8009bec:	40001c00 	.word	0x40001c00
 8009bf0:	40002000 	.word	0x40002000

08009bf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b087      	sub	sp, #28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	f023 0201 	bic.w	r2, r3, #1
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f023 0303 	bic.w	r3, r3, #3
 8009c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	f023 0302 	bic.w	r3, r3, #2
 8009c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a20      	ldr	r2, [pc, #128]	; (8009ccc <TIM_OC1_SetConfig+0xd8>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d003      	beq.n	8009c58 <TIM_OC1_SetConfig+0x64>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a1f      	ldr	r2, [pc, #124]	; (8009cd0 <TIM_OC1_SetConfig+0xdc>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d10c      	bne.n	8009c72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	f023 0308 	bic.w	r3, r3, #8
 8009c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	f023 0304 	bic.w	r3, r3, #4
 8009c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a15      	ldr	r2, [pc, #84]	; (8009ccc <TIM_OC1_SetConfig+0xd8>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d003      	beq.n	8009c82 <TIM_OC1_SetConfig+0x8e>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a14      	ldr	r2, [pc, #80]	; (8009cd0 <TIM_OC1_SetConfig+0xdc>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d111      	bne.n	8009ca6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	693a      	ldr	r2, [r7, #16]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	685a      	ldr	r2, [r3, #4]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	621a      	str	r2, [r3, #32]
}
 8009cc0:	bf00      	nop
 8009cc2:	371c      	adds	r7, #28
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	40010000 	.word	0x40010000
 8009cd0:	40010400 	.word	0x40010400

08009cd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b087      	sub	sp, #28
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	f023 0210 	bic.w	r2, r3, #16
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	021b      	lsls	r3, r3, #8
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	f023 0320 	bic.w	r3, r3, #32
 8009d1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	011b      	lsls	r3, r3, #4
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a22      	ldr	r2, [pc, #136]	; (8009db8 <TIM_OC2_SetConfig+0xe4>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d003      	beq.n	8009d3c <TIM_OC2_SetConfig+0x68>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a21      	ldr	r2, [pc, #132]	; (8009dbc <TIM_OC2_SetConfig+0xe8>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d10d      	bne.n	8009d58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	011b      	lsls	r3, r3, #4
 8009d4a:	697a      	ldr	r2, [r7, #20]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a17      	ldr	r2, [pc, #92]	; (8009db8 <TIM_OC2_SetConfig+0xe4>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d003      	beq.n	8009d68 <TIM_OC2_SetConfig+0x94>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a16      	ldr	r2, [pc, #88]	; (8009dbc <TIM_OC2_SetConfig+0xe8>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d113      	bne.n	8009d90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	695b      	ldr	r3, [r3, #20]
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	621a      	str	r2, [r3, #32]
}
 8009daa:	bf00      	nop
 8009dac:	371c      	adds	r7, #28
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	40010000 	.word	0x40010000
 8009dbc:	40010400 	.word	0x40010400

08009dc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	69db      	ldr	r3, [r3, #28]
 8009de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f023 0303 	bic.w	r3, r3, #3
 8009df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	021b      	lsls	r3, r3, #8
 8009e10:	697a      	ldr	r2, [r7, #20]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a21      	ldr	r2, [pc, #132]	; (8009ea0 <TIM_OC3_SetConfig+0xe0>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d003      	beq.n	8009e26 <TIM_OC3_SetConfig+0x66>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a20      	ldr	r2, [pc, #128]	; (8009ea4 <TIM_OC3_SetConfig+0xe4>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d10d      	bne.n	8009e42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	021b      	lsls	r3, r3, #8
 8009e34:	697a      	ldr	r2, [r7, #20]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a16      	ldr	r2, [pc, #88]	; (8009ea0 <TIM_OC3_SetConfig+0xe0>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d003      	beq.n	8009e52 <TIM_OC3_SetConfig+0x92>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a15      	ldr	r2, [pc, #84]	; (8009ea4 <TIM_OC3_SetConfig+0xe4>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d113      	bne.n	8009e7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	011b      	lsls	r3, r3, #4
 8009e68:	693a      	ldr	r2, [r7, #16]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	699b      	ldr	r3, [r3, #24]
 8009e72:	011b      	lsls	r3, r3, #4
 8009e74:	693a      	ldr	r2, [r7, #16]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	621a      	str	r2, [r3, #32]
}
 8009e94:	bf00      	nop
 8009e96:	371c      	adds	r7, #28
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr
 8009ea0:	40010000 	.word	0x40010000
 8009ea4:	40010400 	.word	0x40010400

08009ea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b087      	sub	sp, #28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
 8009ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	69db      	ldr	r3, [r3, #28]
 8009ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	021b      	lsls	r3, r3, #8
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	031b      	lsls	r3, r3, #12
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a12      	ldr	r2, [pc, #72]	; (8009f4c <TIM_OC4_SetConfig+0xa4>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d003      	beq.n	8009f10 <TIM_OC4_SetConfig+0x68>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a11      	ldr	r2, [pc, #68]	; (8009f50 <TIM_OC4_SetConfig+0xa8>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d109      	bne.n	8009f24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	695b      	ldr	r3, [r3, #20]
 8009f1c:	019b      	lsls	r3, r3, #6
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	685a      	ldr	r2, [r3, #4]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	621a      	str	r2, [r3, #32]
}
 8009f3e:	bf00      	nop
 8009f40:	371c      	adds	r7, #28
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	40010000 	.word	0x40010000
 8009f50:	40010400 	.word	0x40010400

08009f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b087      	sub	sp, #28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6a1b      	ldr	r3, [r3, #32]
 8009f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	f023 0201 	bic.w	r2, r3, #1
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	011b      	lsls	r3, r3, #4
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	f023 030a 	bic.w	r3, r3, #10
 8009f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f92:	697a      	ldr	r2, [r7, #20]
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	621a      	str	r2, [r3, #32]
}
 8009fa6:	bf00      	nop
 8009fa8:	371c      	adds	r7, #28
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fb2:	b480      	push	{r7}
 8009fb4:	b087      	sub	sp, #28
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	60f8      	str	r0, [r7, #12]
 8009fba:	60b9      	str	r1, [r7, #8]
 8009fbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6a1b      	ldr	r3, [r3, #32]
 8009fc2:	f023 0210 	bic.w	r2, r3, #16
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	699b      	ldr	r3, [r3, #24]
 8009fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6a1b      	ldr	r3, [r3, #32]
 8009fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	031b      	lsls	r3, r3, #12
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009fee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	011b      	lsls	r3, r3, #4
 8009ff4:	693a      	ldr	r2, [r7, #16]
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	697a      	ldr	r2, [r7, #20]
 8009ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	693a      	ldr	r2, [r7, #16]
 800a004:	621a      	str	r2, [r3, #32]
}
 800a006:	bf00      	nop
 800a008:	371c      	adds	r7, #28
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a012:	b480      	push	{r7}
 800a014:	b085      	sub	sp, #20
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a028:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	4313      	orrs	r3, r2
 800a030:	f043 0307 	orr.w	r3, r3, #7
 800a034:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	609a      	str	r2, [r3, #8]
}
 800a03c:	bf00      	nop
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a048:	b480      	push	{r7}
 800a04a:	b087      	sub	sp, #28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
 800a054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	021a      	lsls	r2, r3, #8
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	431a      	orrs	r2, r3
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	4313      	orrs	r3, r2
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	4313      	orrs	r3, r2
 800a074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	697a      	ldr	r2, [r7, #20]
 800a07a:	609a      	str	r2, [r3, #8]
}
 800a07c:	bf00      	nop
 800a07e:	371c      	adds	r7, #28
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a088:	b480      	push	{r7}
 800a08a:	b087      	sub	sp, #28
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	f003 031f 	and.w	r3, r3, #31
 800a09a:	2201      	movs	r2, #1
 800a09c:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6a1a      	ldr	r2, [r3, #32]
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	43db      	mvns	r3, r3
 800a0aa:	401a      	ands	r2, r3
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6a1a      	ldr	r2, [r3, #32]
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	f003 031f 	and.w	r3, r3, #31
 800a0ba:	6879      	ldr	r1, [r7, #4]
 800a0bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c0:	431a      	orrs	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	621a      	str	r2, [r3, #32]
}
 800a0c6:	bf00      	nop
 800a0c8:	371c      	adds	r7, #28
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
	...

0800a0d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d101      	bne.n	800a0ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0e8:	2302      	movs	r3, #2
 800a0ea:	e05a      	b.n	800a1a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a112:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a21      	ldr	r2, [pc, #132]	; (800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d022      	beq.n	800a176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a138:	d01d      	beq.n	800a176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a1d      	ldr	r2, [pc, #116]	; (800a1b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d018      	beq.n	800a176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a1b      	ldr	r2, [pc, #108]	; (800a1b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d013      	beq.n	800a176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a1a      	ldr	r2, [pc, #104]	; (800a1bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d00e      	beq.n	800a176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a18      	ldr	r2, [pc, #96]	; (800a1c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d009      	beq.n	800a176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a17      	ldr	r2, [pc, #92]	; (800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d004      	beq.n	800a176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a15      	ldr	r2, [pc, #84]	; (800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d10c      	bne.n	800a190 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a17c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	4313      	orrs	r3, r2
 800a186:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3714      	adds	r7, #20
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	40010000 	.word	0x40010000
 800a1b4:	40000400 	.word	0x40000400
 800a1b8:	40000800 	.word	0x40000800
 800a1bc:	40000c00 	.word	0x40000c00
 800a1c0:	40010400 	.word	0x40010400
 800a1c4:	40014000 	.word	0x40014000
 800a1c8:	40001800 	.word	0x40001800

0800a1cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d101      	bne.n	800a1e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	e03d      	b.n	800a264 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	4313      	orrs	r3, r2
 800a20a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	4313      	orrs	r3, r2
 800a218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4313      	orrs	r3, r2
 800a226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	4313      	orrs	r3, r2
 800a234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	695b      	ldr	r3, [r3, #20]
 800a240:	4313      	orrs	r3, r2
 800a242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	69db      	ldr	r3, [r3, #28]
 800a24e:	4313      	orrs	r3, r2
 800a250:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a28c:	bf00      	nop
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e03f      	b.n	800a32a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d106      	bne.n	800a2c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f7fc f8ec 	bl	800649c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2224      	movs	r2, #36	; 0x24
 800a2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68da      	ldr	r2, [r3, #12]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a2da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 fddf 	bl	800aea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	691a      	ldr	r2, [r3, #16]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a2f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	695a      	ldr	r2, [r3, #20]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a300:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68da      	ldr	r2, [r3, #12]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a310:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2220      	movs	r2, #32
 800a31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2220      	movs	r2, #32
 800a324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b08a      	sub	sp, #40	; 0x28
 800a336:	af02      	add	r7, sp, #8
 800a338:	60f8      	str	r0, [r7, #12]
 800a33a:	60b9      	str	r1, [r7, #8]
 800a33c:	603b      	str	r3, [r7, #0]
 800a33e:	4613      	mov	r3, r2
 800a340:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a342:	2300      	movs	r3, #0
 800a344:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b20      	cmp	r3, #32
 800a350:	d17c      	bne.n	800a44c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d002      	beq.n	800a35e <HAL_UART_Transmit+0x2c>
 800a358:	88fb      	ldrh	r3, [r7, #6]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d101      	bne.n	800a362 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	e075      	b.n	800a44e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d101      	bne.n	800a370 <HAL_UART_Transmit+0x3e>
 800a36c:	2302      	movs	r3, #2
 800a36e:	e06e      	b.n	800a44e <HAL_UART_Transmit+0x11c>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2221      	movs	r2, #33	; 0x21
 800a382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a386:	f7fc fbc7 	bl	8006b18 <HAL_GetTick>
 800a38a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	88fa      	ldrh	r2, [r7, #6]
 800a390:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	88fa      	ldrh	r2, [r7, #6]
 800a396:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3a0:	d108      	bne.n	800a3b4 <HAL_UART_Transmit+0x82>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d104      	bne.n	800a3b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	61bb      	str	r3, [r7, #24]
 800a3b2:	e003      	b.n	800a3bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a3c4:	e02a      	b.n	800a41c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	2180      	movs	r1, #128	; 0x80
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f000 fb1f 	bl	800aa14 <UART_WaitOnFlagUntilTimeout>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	e036      	b.n	800a44e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10b      	bne.n	800a3fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	881b      	ldrh	r3, [r3, #0]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	3302      	adds	r3, #2
 800a3fa:	61bb      	str	r3, [r7, #24]
 800a3fc:	e007      	b.n	800a40e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	781a      	ldrb	r2, [r3, #0]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	3301      	adds	r3, #1
 800a40c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a412:	b29b      	uxth	r3, r3
 800a414:	3b01      	subs	r3, #1
 800a416:	b29a      	uxth	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a420:	b29b      	uxth	r3, r3
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1cf      	bne.n	800a3c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	2200      	movs	r2, #0
 800a42e:	2140      	movs	r1, #64	; 0x40
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 faef 	bl	800aa14 <UART_WaitOnFlagUntilTimeout>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d001      	beq.n	800a440 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a43c:	2303      	movs	r3, #3
 800a43e:	e006      	b.n	800a44e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2220      	movs	r2, #32
 800a444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a448:	2300      	movs	r3, #0
 800a44a:	e000      	b.n	800a44e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a44c:	2302      	movs	r3, #2
  }
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3720      	adds	r7, #32
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b084      	sub	sp, #16
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	60f8      	str	r0, [r7, #12]
 800a45e:	60b9      	str	r1, [r7, #8]
 800a460:	4613      	mov	r3, r2
 800a462:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b20      	cmp	r3, #32
 800a46e:	d11d      	bne.n	800a4ac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d002      	beq.n	800a47c <HAL_UART_Receive_IT+0x26>
 800a476:	88fb      	ldrh	r3, [r7, #6]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e016      	b.n	800a4ae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a486:	2b01      	cmp	r3, #1
 800a488:	d101      	bne.n	800a48e <HAL_UART_Receive_IT+0x38>
 800a48a:	2302      	movs	r3, #2
 800a48c:	e00f      	b.n	800a4ae <HAL_UART_Receive_IT+0x58>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2201      	movs	r2, #1
 800a492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a49c:	88fb      	ldrh	r3, [r7, #6]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	68b9      	ldr	r1, [r7, #8]
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f000 fb24 	bl	800aaf0 <UART_Start_Receive_IT>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	e000      	b.n	800a4ae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a4ac:	2302      	movs	r3, #2
  }
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
	...

0800a4b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b0ba      	sub	sp, #232	; 0xe8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a4ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4ee:	f003 030f 	and.w	r3, r3, #15
 800a4f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a4f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d10f      	bne.n	800a51e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a502:	f003 0320 	and.w	r3, r3, #32
 800a506:	2b00      	cmp	r3, #0
 800a508:	d009      	beq.n	800a51e <HAL_UART_IRQHandler+0x66>
 800a50a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a50e:	f003 0320 	and.w	r3, r3, #32
 800a512:	2b00      	cmp	r3, #0
 800a514:	d003      	beq.n	800a51e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fc07 	bl	800ad2a <UART_Receive_IT>
      return;
 800a51c:	e256      	b.n	800a9cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a51e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a522:	2b00      	cmp	r3, #0
 800a524:	f000 80de 	beq.w	800a6e4 <HAL_UART_IRQHandler+0x22c>
 800a528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a52c:	f003 0301 	and.w	r3, r3, #1
 800a530:	2b00      	cmp	r3, #0
 800a532:	d106      	bne.n	800a542 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a538:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 80d1 	beq.w	800a6e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00b      	beq.n	800a566 <HAL_UART_IRQHandler+0xae>
 800a54e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a556:	2b00      	cmp	r3, #0
 800a558:	d005      	beq.n	800a566 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a55e:	f043 0201 	orr.w	r2, r3, #1
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a56a:	f003 0304 	and.w	r3, r3, #4
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00b      	beq.n	800a58a <HAL_UART_IRQHandler+0xd2>
 800a572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d005      	beq.n	800a58a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a582:	f043 0202 	orr.w	r2, r3, #2
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a58a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a58e:	f003 0302 	and.w	r3, r3, #2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00b      	beq.n	800a5ae <HAL_UART_IRQHandler+0xf6>
 800a596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d005      	beq.n	800a5ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a6:	f043 0204 	orr.w	r2, r3, #4
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a5ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5b2:	f003 0308 	and.w	r3, r3, #8
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d011      	beq.n	800a5de <HAL_UART_IRQHandler+0x126>
 800a5ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5be:	f003 0320 	and.w	r3, r3, #32
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d105      	bne.n	800a5d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a5c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5ca:	f003 0301 	and.w	r3, r3, #1
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d005      	beq.n	800a5de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d6:	f043 0208 	orr.w	r2, r3, #8
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 81ed 	beq.w	800a9c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5ec:	f003 0320 	and.w	r3, r3, #32
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d008      	beq.n	800a606 <HAL_UART_IRQHandler+0x14e>
 800a5f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5f8:	f003 0320 	and.w	r3, r3, #32
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d002      	beq.n	800a606 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fb92 	bl	800ad2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	695b      	ldr	r3, [r3, #20]
 800a60c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a610:	2b40      	cmp	r3, #64	; 0x40
 800a612:	bf0c      	ite	eq
 800a614:	2301      	moveq	r3, #1
 800a616:	2300      	movne	r3, #0
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a622:	f003 0308 	and.w	r3, r3, #8
 800a626:	2b00      	cmp	r3, #0
 800a628:	d103      	bne.n	800a632 <HAL_UART_IRQHandler+0x17a>
 800a62a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d04f      	beq.n	800a6d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fa9a 	bl	800ab6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a642:	2b40      	cmp	r3, #64	; 0x40
 800a644:	d141      	bne.n	800a6ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	3314      	adds	r3, #20
 800a64c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a650:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a654:	e853 3f00 	ldrex	r3, [r3]
 800a658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a65c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3314      	adds	r3, #20
 800a66e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a672:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a67e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a682:	e841 2300 	strex	r3, r2, [r1]
 800a686:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a68a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1d9      	bne.n	800a646 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a696:	2b00      	cmp	r3, #0
 800a698:	d013      	beq.n	800a6c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69e:	4a7d      	ldr	r2, [pc, #500]	; (800a894 <HAL_UART_IRQHandler+0x3dc>)
 800a6a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fd f8dc 	bl	8007864 <HAL_DMA_Abort_IT>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d016      	beq.n	800a6e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a6bc:	4610      	mov	r0, r2
 800a6be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c0:	e00e      	b.n	800a6e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f990 	bl	800a9e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c8:	e00a      	b.n	800a6e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f98c 	bl	800a9e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6d0:	e006      	b.n	800a6e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f988 	bl	800a9e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a6de:	e170      	b.n	800a9c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6e0:	bf00      	nop
    return;
 800a6e2:	e16e      	b.n	800a9c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	f040 814a 	bne.w	800a982 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a6ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6f2:	f003 0310 	and.w	r3, r3, #16
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 8143 	beq.w	800a982 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a700:	f003 0310 	and.w	r3, r3, #16
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 813c 	beq.w	800a982 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a70a:	2300      	movs	r3, #0
 800a70c:	60bb      	str	r3, [r7, #8]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	60bb      	str	r3, [r7, #8]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	60bb      	str	r3, [r7, #8]
 800a71e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a72a:	2b40      	cmp	r3, #64	; 0x40
 800a72c:	f040 80b4 	bne.w	800a898 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a73c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 8140 	beq.w	800a9c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a74a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a74e:	429a      	cmp	r2, r3
 800a750:	f080 8139 	bcs.w	800a9c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a75a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a766:	f000 8088 	beq.w	800a87a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	330c      	adds	r3, #12
 800a770:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a774:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a778:	e853 3f00 	ldrex	r3, [r3]
 800a77c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a780:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a788:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	330c      	adds	r3, #12
 800a792:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a796:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a79a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a7a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a7a6:	e841 2300 	strex	r3, r2, [r1]
 800a7aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a7ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1d9      	bne.n	800a76a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	3314      	adds	r3, #20
 800a7bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7c0:	e853 3f00 	ldrex	r3, [r3]
 800a7c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a7c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7c8:	f023 0301 	bic.w	r3, r3, #1
 800a7cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3314      	adds	r3, #20
 800a7d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a7da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a7de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a7e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a7e6:	e841 2300 	strex	r3, r2, [r1]
 800a7ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a7ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1e1      	bne.n	800a7b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3314      	adds	r3, #20
 800a7f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7fc:	e853 3f00 	ldrex	r3, [r3]
 800a800:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a808:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	3314      	adds	r3, #20
 800a812:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a816:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a818:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a81c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a81e:	e841 2300 	strex	r3, r2, [r1]
 800a822:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1e3      	bne.n	800a7f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2220      	movs	r2, #32
 800a82e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	330c      	adds	r3, #12
 800a83e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a842:	e853 3f00 	ldrex	r3, [r3]
 800a846:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a84a:	f023 0310 	bic.w	r3, r3, #16
 800a84e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	330c      	adds	r3, #12
 800a858:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a85c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a85e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a860:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a862:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a864:	e841 2300 	strex	r3, r2, [r1]
 800a868:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a86a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1e3      	bne.n	800a838 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a874:	4618      	mov	r0, r3
 800a876:	f7fc ff85 	bl	8007784 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a882:	b29b      	uxth	r3, r3
 800a884:	1ad3      	subs	r3, r2, r3
 800a886:	b29b      	uxth	r3, r3
 800a888:	4619      	mov	r1, r3
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f8b6 	bl	800a9fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a890:	e099      	b.n	800a9c6 <HAL_UART_IRQHandler+0x50e>
 800a892:	bf00      	nop
 800a894:	0800ac33 	.word	0x0800ac33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f000 808b 	beq.w	800a9ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a8b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f000 8086 	beq.w	800a9ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	330c      	adds	r3, #12
 800a8c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c8:	e853 3f00 	ldrex	r3, [r3]
 800a8cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	330c      	adds	r3, #12
 800a8de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a8e2:	647a      	str	r2, [r7, #68]	; 0x44
 800a8e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8ea:	e841 2300 	strex	r3, r2, [r1]
 800a8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1e3      	bne.n	800a8be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	3314      	adds	r3, #20
 800a8fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a900:	e853 3f00 	ldrex	r3, [r3]
 800a904:	623b      	str	r3, [r7, #32]
   return(result);
 800a906:	6a3b      	ldr	r3, [r7, #32]
 800a908:	f023 0301 	bic.w	r3, r3, #1
 800a90c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3314      	adds	r3, #20
 800a916:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a91a:	633a      	str	r2, [r7, #48]	; 0x30
 800a91c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a922:	e841 2300 	strex	r3, r2, [r1]
 800a926:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1e3      	bne.n	800a8f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2220      	movs	r2, #32
 800a932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	330c      	adds	r3, #12
 800a942:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	e853 3f00 	ldrex	r3, [r3]
 800a94a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f023 0310 	bic.w	r3, r3, #16
 800a952:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	330c      	adds	r3, #12
 800a95c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a960:	61fa      	str	r2, [r7, #28]
 800a962:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a964:	69b9      	ldr	r1, [r7, #24]
 800a966:	69fa      	ldr	r2, [r7, #28]
 800a968:	e841 2300 	strex	r3, r2, [r1]
 800a96c:	617b      	str	r3, [r7, #20]
   return(result);
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1e3      	bne.n	800a93c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a978:	4619      	mov	r1, r3
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f83e 	bl	800a9fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a980:	e023      	b.n	800a9ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d009      	beq.n	800a9a2 <HAL_UART_IRQHandler+0x4ea>
 800a98e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f95d 	bl	800ac5a <UART_Transmit_IT>
    return;
 800a9a0:	e014      	b.n	800a9cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a9a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00e      	beq.n	800a9cc <HAL_UART_IRQHandler+0x514>
 800a9ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d008      	beq.n	800a9cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 f99d 	bl	800acfa <UART_EndTransmit_IT>
    return;
 800a9c0:	e004      	b.n	800a9cc <HAL_UART_IRQHandler+0x514>
    return;
 800a9c2:	bf00      	nop
 800a9c4:	e002      	b.n	800a9cc <HAL_UART_IRQHandler+0x514>
      return;
 800a9c6:	bf00      	nop
 800a9c8:	e000      	b.n	800a9cc <HAL_UART_IRQHandler+0x514>
      return;
 800a9ca:	bf00      	nop
  }
}
 800a9cc:	37e8      	adds	r7, #232	; 0xe8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop

0800a9d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a9dc:	bf00      	nop
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	460b      	mov	r3, r1
 800aa06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa08:	bf00      	nop
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b090      	sub	sp, #64	; 0x40
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	603b      	str	r3, [r7, #0]
 800aa20:	4613      	mov	r3, r2
 800aa22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa24:	e050      	b.n	800aac8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2c:	d04c      	beq.n	800aac8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800aa2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d007      	beq.n	800aa44 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa34:	f7fc f870 	bl	8006b18 <HAL_GetTick>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d241      	bcs.n	800aac8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	330c      	adds	r3, #12
 800aa4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4e:	e853 3f00 	ldrex	r3, [r3]
 800aa52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	330c      	adds	r3, #12
 800aa62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa64:	637a      	str	r2, [r7, #52]	; 0x34
 800aa66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa6c:	e841 2300 	strex	r3, r2, [r1]
 800aa70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1e5      	bne.n	800aa44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	3314      	adds	r3, #20
 800aa7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	e853 3f00 	ldrex	r3, [r3]
 800aa86:	613b      	str	r3, [r7, #16]
   return(result);
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	f023 0301 	bic.w	r3, r3, #1
 800aa8e:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	3314      	adds	r3, #20
 800aa96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa98:	623a      	str	r2, [r7, #32]
 800aa9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9c:	69f9      	ldr	r1, [r7, #28]
 800aa9e:	6a3a      	ldr	r2, [r7, #32]
 800aaa0:	e841 2300 	strex	r3, r2, [r1]
 800aaa4:	61bb      	str	r3, [r7, #24]
   return(result);
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d1e5      	bne.n	800aa78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2220      	movs	r2, #32
 800aab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2220      	movs	r2, #32
 800aab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800aac4:	2303      	movs	r3, #3
 800aac6:	e00f      	b.n	800aae8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	4013      	ands	r3, r2
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	bf0c      	ite	eq
 800aad8:	2301      	moveq	r3, #1
 800aada:	2300      	movne	r3, #0
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	461a      	mov	r2, r3
 800aae0:	79fb      	ldrb	r3, [r7, #7]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d09f      	beq.n	800aa26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3740      	adds	r7, #64	; 0x40
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	4613      	mov	r3, r2
 800aafc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	68ba      	ldr	r2, [r7, #8]
 800ab02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	88fa      	ldrh	r2, [r7, #6]
 800ab08:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	88fa      	ldrh	r2, [r7, #6]
 800ab0e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2222      	movs	r2, #34	; 0x22
 800ab1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2200      	movs	r2, #0
 800ab22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d007      	beq.n	800ab3e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	68da      	ldr	r2, [r3, #12]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab3c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	695a      	ldr	r2, [r3, #20]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f042 0201 	orr.w	r2, r2, #1
 800ab4c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	68da      	ldr	r2, [r3, #12]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f042 0220 	orr.w	r2, r2, #32
 800ab5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b095      	sub	sp, #84	; 0x54
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	330c      	adds	r3, #12
 800ab7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab7e:	e853 3f00 	ldrex	r3, [r3]
 800ab82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	330c      	adds	r3, #12
 800ab92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab94:	643a      	str	r2, [r7, #64]	; 0x40
 800ab96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab9c:	e841 2300 	strex	r3, r2, [r1]
 800aba0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1e5      	bne.n	800ab74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	3314      	adds	r3, #20
 800abae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb0:	6a3b      	ldr	r3, [r7, #32]
 800abb2:	e853 3f00 	ldrex	r3, [r3]
 800abb6:	61fb      	str	r3, [r7, #28]
   return(result);
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	f023 0301 	bic.w	r3, r3, #1
 800abbe:	64bb      	str	r3, [r7, #72]	; 0x48
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	3314      	adds	r3, #20
 800abc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800abca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abd0:	e841 2300 	strex	r3, r2, [r1]
 800abd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1e5      	bne.n	800aba8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d119      	bne.n	800ac18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	330c      	adds	r3, #12
 800abea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	e853 3f00 	ldrex	r3, [r3]
 800abf2:	60bb      	str	r3, [r7, #8]
   return(result);
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	f023 0310 	bic.w	r3, r3, #16
 800abfa:	647b      	str	r3, [r7, #68]	; 0x44
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	330c      	adds	r3, #12
 800ac02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac04:	61ba      	str	r2, [r7, #24]
 800ac06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac08:	6979      	ldr	r1, [r7, #20]
 800ac0a:	69ba      	ldr	r2, [r7, #24]
 800ac0c:	e841 2300 	strex	r3, r2, [r1]
 800ac10:	613b      	str	r3, [r7, #16]
   return(result);
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1e5      	bne.n	800abe4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2220      	movs	r2, #32
 800ac1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ac26:	bf00      	nop
 800ac28:	3754      	adds	r7, #84	; 0x54
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b084      	sub	sp, #16
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2200      	movs	r2, #0
 800ac44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f7ff fecb 	bl	800a9e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac52:	bf00      	nop
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b085      	sub	sp, #20
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	2b21      	cmp	r3, #33	; 0x21
 800ac6c:	d13e      	bne.n	800acec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac76:	d114      	bne.n	800aca2 <UART_Transmit_IT+0x48>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d110      	bne.n	800aca2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a1b      	ldr	r3, [r3, #32]
 800ac84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	881b      	ldrh	r3, [r3, #0]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	1c9a      	adds	r2, r3, #2
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	621a      	str	r2, [r3, #32]
 800aca0:	e008      	b.n	800acb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a1b      	ldr	r3, [r3, #32]
 800aca6:	1c59      	adds	r1, r3, #1
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	6211      	str	r1, [r2, #32]
 800acac:	781a      	ldrb	r2, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800acb8:	b29b      	uxth	r3, r3
 800acba:	3b01      	subs	r3, #1
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	4619      	mov	r1, r3
 800acc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d10f      	bne.n	800ace8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	68da      	ldr	r2, [r3, #12]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800acd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68da      	ldr	r2, [r3, #12]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ace6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ace8:	2300      	movs	r3, #0
 800acea:	e000      	b.n	800acee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800acec:	2302      	movs	r3, #2
  }
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr

0800acfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b082      	sub	sp, #8
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	68da      	ldr	r2, [r3, #12]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2220      	movs	r2, #32
 800ad16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7ff fe5a 	bl	800a9d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b08c      	sub	sp, #48	; 0x30
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	2b22      	cmp	r3, #34	; 0x22
 800ad3c:	f040 80ab 	bne.w	800ae96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad48:	d117      	bne.n	800ad7a <UART_Receive_IT+0x50>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d113      	bne.n	800ad7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ad52:	2300      	movs	r3, #0
 800ad54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad72:	1c9a      	adds	r2, r3, #2
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	629a      	str	r2, [r3, #40]	; 0x28
 800ad78:	e026      	b.n	800adc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ad80:	2300      	movs	r3, #0
 800ad82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad8c:	d007      	beq.n	800ad9e <UART_Receive_IT+0x74>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10a      	bne.n	800adac <UART_Receive_IT+0x82>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d106      	bne.n	800adac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada8:	701a      	strb	r2, [r3, #0]
 800adaa:	e008      	b.n	800adbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc2:	1c5a      	adds	r2, r3, #1
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800adcc:	b29b      	uxth	r3, r3
 800adce:	3b01      	subs	r3, #1
 800add0:	b29b      	uxth	r3, r3
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	4619      	mov	r1, r3
 800add6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800add8:	2b00      	cmp	r3, #0
 800adda:	d15a      	bne.n	800ae92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68da      	ldr	r2, [r3, #12]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f022 0220 	bic.w	r2, r2, #32
 800adea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68da      	ldr	r2, [r3, #12]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800adfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	695a      	ldr	r2, [r3, #20]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f022 0201 	bic.w	r2, r2, #1
 800ae0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2220      	movs	r2, #32
 800ae10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d135      	bne.n	800ae88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	330c      	adds	r3, #12
 800ae28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	e853 3f00 	ldrex	r3, [r3]
 800ae30:	613b      	str	r3, [r7, #16]
   return(result);
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	f023 0310 	bic.w	r3, r3, #16
 800ae38:	627b      	str	r3, [r7, #36]	; 0x24
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	330c      	adds	r3, #12
 800ae40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae42:	623a      	str	r2, [r7, #32]
 800ae44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae46:	69f9      	ldr	r1, [r7, #28]
 800ae48:	6a3a      	ldr	r2, [r7, #32]
 800ae4a:	e841 2300 	strex	r3, r2, [r1]
 800ae4e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1e5      	bne.n	800ae22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 0310 	and.w	r3, r3, #16
 800ae60:	2b10      	cmp	r3, #16
 800ae62:	d10a      	bne.n	800ae7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ae64:	2300      	movs	r3, #0
 800ae66:	60fb      	str	r3, [r7, #12]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	60fb      	str	r3, [r7, #12]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	60fb      	str	r3, [r7, #12]
 800ae78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae7e:	4619      	mov	r1, r3
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f7ff fdbb 	bl	800a9fc <HAL_UARTEx_RxEventCallback>
 800ae86:	e002      	b.n	800ae8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7f9 fb17 	bl	80044bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	e002      	b.n	800ae98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ae92:	2300      	movs	r3, #0
 800ae94:	e000      	b.n	800ae98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ae96:	2302      	movs	r3, #2
  }
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3730      	adds	r7, #48	; 0x30
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aea4:	b0c0      	sub	sp, #256	; 0x100
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aeac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aeb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aebc:	68d9      	ldr	r1, [r3, #12]
 800aebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	ea40 0301 	orr.w	r3, r0, r1
 800aec8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aeca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aece:	689a      	ldr	r2, [r3, #8]
 800aed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	431a      	orrs	r2, r3
 800aed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aedc:	695b      	ldr	r3, [r3, #20]
 800aede:	431a      	orrs	r2, r3
 800aee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aee4:	69db      	ldr	r3, [r3, #28]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aeec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aef8:	f021 010c 	bic.w	r1, r1, #12
 800aefc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af06:	430b      	orrs	r3, r1
 800af08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	695b      	ldr	r3, [r3, #20]
 800af12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800af16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af1a:	6999      	ldr	r1, [r3, #24]
 800af1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	ea40 0301 	orr.w	r3, r0, r1
 800af26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	4b8f      	ldr	r3, [pc, #572]	; (800b16c <UART_SetConfig+0x2cc>)
 800af30:	429a      	cmp	r2, r3
 800af32:	d005      	beq.n	800af40 <UART_SetConfig+0xa0>
 800af34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	4b8d      	ldr	r3, [pc, #564]	; (800b170 <UART_SetConfig+0x2d0>)
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d104      	bne.n	800af4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800af40:	f7fe f830 	bl	8008fa4 <HAL_RCC_GetPCLK2Freq>
 800af44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800af48:	e003      	b.n	800af52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800af4a:	f7fe f817 	bl	8008f7c <HAL_RCC_GetPCLK1Freq>
 800af4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af56:	69db      	ldr	r3, [r3, #28]
 800af58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af5c:	f040 810c 	bne.w	800b178 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af64:	2200      	movs	r2, #0
 800af66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800af6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800af72:	4622      	mov	r2, r4
 800af74:	462b      	mov	r3, r5
 800af76:	1891      	adds	r1, r2, r2
 800af78:	65b9      	str	r1, [r7, #88]	; 0x58
 800af7a:	415b      	adcs	r3, r3
 800af7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800af82:	4621      	mov	r1, r4
 800af84:	eb12 0801 	adds.w	r8, r2, r1
 800af88:	4629      	mov	r1, r5
 800af8a:	eb43 0901 	adc.w	r9, r3, r1
 800af8e:	f04f 0200 	mov.w	r2, #0
 800af92:	f04f 0300 	mov.w	r3, #0
 800af96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800afa2:	4690      	mov	r8, r2
 800afa4:	4699      	mov	r9, r3
 800afa6:	4623      	mov	r3, r4
 800afa8:	eb18 0303 	adds.w	r3, r8, r3
 800afac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800afb0:	462b      	mov	r3, r5
 800afb2:	eb49 0303 	adc.w	r3, r9, r3
 800afb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800afba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800afc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800afca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800afce:	460b      	mov	r3, r1
 800afd0:	18db      	adds	r3, r3, r3
 800afd2:	653b      	str	r3, [r7, #80]	; 0x50
 800afd4:	4613      	mov	r3, r2
 800afd6:	eb42 0303 	adc.w	r3, r2, r3
 800afda:	657b      	str	r3, [r7, #84]	; 0x54
 800afdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800afe0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800afe4:	f7f5 fe60 	bl	8000ca8 <__aeabi_uldivmod>
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	4b61      	ldr	r3, [pc, #388]	; (800b174 <UART_SetConfig+0x2d4>)
 800afee:	fba3 2302 	umull	r2, r3, r3, r2
 800aff2:	095b      	lsrs	r3, r3, #5
 800aff4:	011c      	lsls	r4, r3, #4
 800aff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800affa:	2200      	movs	r2, #0
 800affc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b000:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b004:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b008:	4642      	mov	r2, r8
 800b00a:	464b      	mov	r3, r9
 800b00c:	1891      	adds	r1, r2, r2
 800b00e:	64b9      	str	r1, [r7, #72]	; 0x48
 800b010:	415b      	adcs	r3, r3
 800b012:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b014:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b018:	4641      	mov	r1, r8
 800b01a:	eb12 0a01 	adds.w	sl, r2, r1
 800b01e:	4649      	mov	r1, r9
 800b020:	eb43 0b01 	adc.w	fp, r3, r1
 800b024:	f04f 0200 	mov.w	r2, #0
 800b028:	f04f 0300 	mov.w	r3, #0
 800b02c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b030:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b034:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b038:	4692      	mov	sl, r2
 800b03a:	469b      	mov	fp, r3
 800b03c:	4643      	mov	r3, r8
 800b03e:	eb1a 0303 	adds.w	r3, sl, r3
 800b042:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b046:	464b      	mov	r3, r9
 800b048:	eb4b 0303 	adc.w	r3, fp, r3
 800b04c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b05c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b060:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b064:	460b      	mov	r3, r1
 800b066:	18db      	adds	r3, r3, r3
 800b068:	643b      	str	r3, [r7, #64]	; 0x40
 800b06a:	4613      	mov	r3, r2
 800b06c:	eb42 0303 	adc.w	r3, r2, r3
 800b070:	647b      	str	r3, [r7, #68]	; 0x44
 800b072:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b076:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b07a:	f7f5 fe15 	bl	8000ca8 <__aeabi_uldivmod>
 800b07e:	4602      	mov	r2, r0
 800b080:	460b      	mov	r3, r1
 800b082:	4611      	mov	r1, r2
 800b084:	4b3b      	ldr	r3, [pc, #236]	; (800b174 <UART_SetConfig+0x2d4>)
 800b086:	fba3 2301 	umull	r2, r3, r3, r1
 800b08a:	095b      	lsrs	r3, r3, #5
 800b08c:	2264      	movs	r2, #100	; 0x64
 800b08e:	fb02 f303 	mul.w	r3, r2, r3
 800b092:	1acb      	subs	r3, r1, r3
 800b094:	00db      	lsls	r3, r3, #3
 800b096:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b09a:	4b36      	ldr	r3, [pc, #216]	; (800b174 <UART_SetConfig+0x2d4>)
 800b09c:	fba3 2302 	umull	r2, r3, r3, r2
 800b0a0:	095b      	lsrs	r3, r3, #5
 800b0a2:	005b      	lsls	r3, r3, #1
 800b0a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b0a8:	441c      	add	r4, r3
 800b0aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b0b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b0bc:	4642      	mov	r2, r8
 800b0be:	464b      	mov	r3, r9
 800b0c0:	1891      	adds	r1, r2, r2
 800b0c2:	63b9      	str	r1, [r7, #56]	; 0x38
 800b0c4:	415b      	adcs	r3, r3
 800b0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b0cc:	4641      	mov	r1, r8
 800b0ce:	1851      	adds	r1, r2, r1
 800b0d0:	6339      	str	r1, [r7, #48]	; 0x30
 800b0d2:	4649      	mov	r1, r9
 800b0d4:	414b      	adcs	r3, r1
 800b0d6:	637b      	str	r3, [r7, #52]	; 0x34
 800b0d8:	f04f 0200 	mov.w	r2, #0
 800b0dc:	f04f 0300 	mov.w	r3, #0
 800b0e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b0e4:	4659      	mov	r1, fp
 800b0e6:	00cb      	lsls	r3, r1, #3
 800b0e8:	4651      	mov	r1, sl
 800b0ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0ee:	4651      	mov	r1, sl
 800b0f0:	00ca      	lsls	r2, r1, #3
 800b0f2:	4610      	mov	r0, r2
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	4642      	mov	r2, r8
 800b0fa:	189b      	adds	r3, r3, r2
 800b0fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b100:	464b      	mov	r3, r9
 800b102:	460a      	mov	r2, r1
 800b104:	eb42 0303 	adc.w	r3, r2, r3
 800b108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b10c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b118:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b11c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b120:	460b      	mov	r3, r1
 800b122:	18db      	adds	r3, r3, r3
 800b124:	62bb      	str	r3, [r7, #40]	; 0x28
 800b126:	4613      	mov	r3, r2
 800b128:	eb42 0303 	adc.w	r3, r2, r3
 800b12c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b12e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b132:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b136:	f7f5 fdb7 	bl	8000ca8 <__aeabi_uldivmod>
 800b13a:	4602      	mov	r2, r0
 800b13c:	460b      	mov	r3, r1
 800b13e:	4b0d      	ldr	r3, [pc, #52]	; (800b174 <UART_SetConfig+0x2d4>)
 800b140:	fba3 1302 	umull	r1, r3, r3, r2
 800b144:	095b      	lsrs	r3, r3, #5
 800b146:	2164      	movs	r1, #100	; 0x64
 800b148:	fb01 f303 	mul.w	r3, r1, r3
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	00db      	lsls	r3, r3, #3
 800b150:	3332      	adds	r3, #50	; 0x32
 800b152:	4a08      	ldr	r2, [pc, #32]	; (800b174 <UART_SetConfig+0x2d4>)
 800b154:	fba2 2303 	umull	r2, r3, r2, r3
 800b158:	095b      	lsrs	r3, r3, #5
 800b15a:	f003 0207 	and.w	r2, r3, #7
 800b15e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4422      	add	r2, r4
 800b166:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b168:	e105      	b.n	800b376 <UART_SetConfig+0x4d6>
 800b16a:	bf00      	nop
 800b16c:	40011000 	.word	0x40011000
 800b170:	40011400 	.word	0x40011400
 800b174:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b17c:	2200      	movs	r2, #0
 800b17e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b182:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b186:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b18a:	4642      	mov	r2, r8
 800b18c:	464b      	mov	r3, r9
 800b18e:	1891      	adds	r1, r2, r2
 800b190:	6239      	str	r1, [r7, #32]
 800b192:	415b      	adcs	r3, r3
 800b194:	627b      	str	r3, [r7, #36]	; 0x24
 800b196:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b19a:	4641      	mov	r1, r8
 800b19c:	1854      	adds	r4, r2, r1
 800b19e:	4649      	mov	r1, r9
 800b1a0:	eb43 0501 	adc.w	r5, r3, r1
 800b1a4:	f04f 0200 	mov.w	r2, #0
 800b1a8:	f04f 0300 	mov.w	r3, #0
 800b1ac:	00eb      	lsls	r3, r5, #3
 800b1ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b1b2:	00e2      	lsls	r2, r4, #3
 800b1b4:	4614      	mov	r4, r2
 800b1b6:	461d      	mov	r5, r3
 800b1b8:	4643      	mov	r3, r8
 800b1ba:	18e3      	adds	r3, r4, r3
 800b1bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b1c0:	464b      	mov	r3, r9
 800b1c2:	eb45 0303 	adc.w	r3, r5, r3
 800b1c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b1ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b1d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b1da:	f04f 0200 	mov.w	r2, #0
 800b1de:	f04f 0300 	mov.w	r3, #0
 800b1e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	008b      	lsls	r3, r1, #2
 800b1ea:	4621      	mov	r1, r4
 800b1ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1f0:	4621      	mov	r1, r4
 800b1f2:	008a      	lsls	r2, r1, #2
 800b1f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b1f8:	f7f5 fd56 	bl	8000ca8 <__aeabi_uldivmod>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	460b      	mov	r3, r1
 800b200:	4b60      	ldr	r3, [pc, #384]	; (800b384 <UART_SetConfig+0x4e4>)
 800b202:	fba3 2302 	umull	r2, r3, r3, r2
 800b206:	095b      	lsrs	r3, r3, #5
 800b208:	011c      	lsls	r4, r3, #4
 800b20a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b20e:	2200      	movs	r2, #0
 800b210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b214:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b218:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b21c:	4642      	mov	r2, r8
 800b21e:	464b      	mov	r3, r9
 800b220:	1891      	adds	r1, r2, r2
 800b222:	61b9      	str	r1, [r7, #24]
 800b224:	415b      	adcs	r3, r3
 800b226:	61fb      	str	r3, [r7, #28]
 800b228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b22c:	4641      	mov	r1, r8
 800b22e:	1851      	adds	r1, r2, r1
 800b230:	6139      	str	r1, [r7, #16]
 800b232:	4649      	mov	r1, r9
 800b234:	414b      	adcs	r3, r1
 800b236:	617b      	str	r3, [r7, #20]
 800b238:	f04f 0200 	mov.w	r2, #0
 800b23c:	f04f 0300 	mov.w	r3, #0
 800b240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b244:	4659      	mov	r1, fp
 800b246:	00cb      	lsls	r3, r1, #3
 800b248:	4651      	mov	r1, sl
 800b24a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b24e:	4651      	mov	r1, sl
 800b250:	00ca      	lsls	r2, r1, #3
 800b252:	4610      	mov	r0, r2
 800b254:	4619      	mov	r1, r3
 800b256:	4603      	mov	r3, r0
 800b258:	4642      	mov	r2, r8
 800b25a:	189b      	adds	r3, r3, r2
 800b25c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b260:	464b      	mov	r3, r9
 800b262:	460a      	mov	r2, r1
 800b264:	eb42 0303 	adc.w	r3, r2, r3
 800b268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	67bb      	str	r3, [r7, #120]	; 0x78
 800b276:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b278:	f04f 0200 	mov.w	r2, #0
 800b27c:	f04f 0300 	mov.w	r3, #0
 800b280:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b284:	4649      	mov	r1, r9
 800b286:	008b      	lsls	r3, r1, #2
 800b288:	4641      	mov	r1, r8
 800b28a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b28e:	4641      	mov	r1, r8
 800b290:	008a      	lsls	r2, r1, #2
 800b292:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b296:	f7f5 fd07 	bl	8000ca8 <__aeabi_uldivmod>
 800b29a:	4602      	mov	r2, r0
 800b29c:	460b      	mov	r3, r1
 800b29e:	4b39      	ldr	r3, [pc, #228]	; (800b384 <UART_SetConfig+0x4e4>)
 800b2a0:	fba3 1302 	umull	r1, r3, r3, r2
 800b2a4:	095b      	lsrs	r3, r3, #5
 800b2a6:	2164      	movs	r1, #100	; 0x64
 800b2a8:	fb01 f303 	mul.w	r3, r1, r3
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	011b      	lsls	r3, r3, #4
 800b2b0:	3332      	adds	r3, #50	; 0x32
 800b2b2:	4a34      	ldr	r2, [pc, #208]	; (800b384 <UART_SetConfig+0x4e4>)
 800b2b4:	fba2 2303 	umull	r2, r3, r2, r3
 800b2b8:	095b      	lsrs	r3, r3, #5
 800b2ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2be:	441c      	add	r4, r3
 800b2c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	673b      	str	r3, [r7, #112]	; 0x70
 800b2c8:	677a      	str	r2, [r7, #116]	; 0x74
 800b2ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b2ce:	4642      	mov	r2, r8
 800b2d0:	464b      	mov	r3, r9
 800b2d2:	1891      	adds	r1, r2, r2
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	415b      	adcs	r3, r3
 800b2d8:	60fb      	str	r3, [r7, #12]
 800b2da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b2de:	4641      	mov	r1, r8
 800b2e0:	1851      	adds	r1, r2, r1
 800b2e2:	6039      	str	r1, [r7, #0]
 800b2e4:	4649      	mov	r1, r9
 800b2e6:	414b      	adcs	r3, r1
 800b2e8:	607b      	str	r3, [r7, #4]
 800b2ea:	f04f 0200 	mov.w	r2, #0
 800b2ee:	f04f 0300 	mov.w	r3, #0
 800b2f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b2f6:	4659      	mov	r1, fp
 800b2f8:	00cb      	lsls	r3, r1, #3
 800b2fa:	4651      	mov	r1, sl
 800b2fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b300:	4651      	mov	r1, sl
 800b302:	00ca      	lsls	r2, r1, #3
 800b304:	4610      	mov	r0, r2
 800b306:	4619      	mov	r1, r3
 800b308:	4603      	mov	r3, r0
 800b30a:	4642      	mov	r2, r8
 800b30c:	189b      	adds	r3, r3, r2
 800b30e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b310:	464b      	mov	r3, r9
 800b312:	460a      	mov	r2, r1
 800b314:	eb42 0303 	adc.w	r3, r2, r3
 800b318:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b31a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	663b      	str	r3, [r7, #96]	; 0x60
 800b324:	667a      	str	r2, [r7, #100]	; 0x64
 800b326:	f04f 0200 	mov.w	r2, #0
 800b32a:	f04f 0300 	mov.w	r3, #0
 800b32e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b332:	4649      	mov	r1, r9
 800b334:	008b      	lsls	r3, r1, #2
 800b336:	4641      	mov	r1, r8
 800b338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b33c:	4641      	mov	r1, r8
 800b33e:	008a      	lsls	r2, r1, #2
 800b340:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b344:	f7f5 fcb0 	bl	8000ca8 <__aeabi_uldivmod>
 800b348:	4602      	mov	r2, r0
 800b34a:	460b      	mov	r3, r1
 800b34c:	4b0d      	ldr	r3, [pc, #52]	; (800b384 <UART_SetConfig+0x4e4>)
 800b34e:	fba3 1302 	umull	r1, r3, r3, r2
 800b352:	095b      	lsrs	r3, r3, #5
 800b354:	2164      	movs	r1, #100	; 0x64
 800b356:	fb01 f303 	mul.w	r3, r1, r3
 800b35a:	1ad3      	subs	r3, r2, r3
 800b35c:	011b      	lsls	r3, r3, #4
 800b35e:	3332      	adds	r3, #50	; 0x32
 800b360:	4a08      	ldr	r2, [pc, #32]	; (800b384 <UART_SetConfig+0x4e4>)
 800b362:	fba2 2303 	umull	r2, r3, r2, r3
 800b366:	095b      	lsrs	r3, r3, #5
 800b368:	f003 020f 	and.w	r2, r3, #15
 800b36c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4422      	add	r2, r4
 800b374:	609a      	str	r2, [r3, #8]
}
 800b376:	bf00      	nop
 800b378:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b37c:	46bd      	mov	sp, r7
 800b37e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b382:	bf00      	nop
 800b384:	51eb851f 	.word	0x51eb851f

0800b388 <__assert_func>:
 800b388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b38a:	4614      	mov	r4, r2
 800b38c:	461a      	mov	r2, r3
 800b38e:	4b09      	ldr	r3, [pc, #36]	; (800b3b4 <__assert_func+0x2c>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4605      	mov	r5, r0
 800b394:	68d8      	ldr	r0, [r3, #12]
 800b396:	b14c      	cbz	r4, 800b3ac <__assert_func+0x24>
 800b398:	4b07      	ldr	r3, [pc, #28]	; (800b3b8 <__assert_func+0x30>)
 800b39a:	9100      	str	r1, [sp, #0]
 800b39c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b3a0:	4906      	ldr	r1, [pc, #24]	; (800b3bc <__assert_func+0x34>)
 800b3a2:	462b      	mov	r3, r5
 800b3a4:	f000 f814 	bl	800b3d0 <fiprintf>
 800b3a8:	f002 f9cc 	bl	800d744 <abort>
 800b3ac:	4b04      	ldr	r3, [pc, #16]	; (800b3c0 <__assert_func+0x38>)
 800b3ae:	461c      	mov	r4, r3
 800b3b0:	e7f3      	b.n	800b39a <__assert_func+0x12>
 800b3b2:	bf00      	nop
 800b3b4:	200013e4 	.word	0x200013e4
 800b3b8:	0801095c 	.word	0x0801095c
 800b3bc:	08010969 	.word	0x08010969
 800b3c0:	08010997 	.word	0x08010997

0800b3c4 <__errno>:
 800b3c4:	4b01      	ldr	r3, [pc, #4]	; (800b3cc <__errno+0x8>)
 800b3c6:	6818      	ldr	r0, [r3, #0]
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	200013e4 	.word	0x200013e4

0800b3d0 <fiprintf>:
 800b3d0:	b40e      	push	{r1, r2, r3}
 800b3d2:	b503      	push	{r0, r1, lr}
 800b3d4:	4601      	mov	r1, r0
 800b3d6:	ab03      	add	r3, sp, #12
 800b3d8:	4805      	ldr	r0, [pc, #20]	; (800b3f0 <fiprintf+0x20>)
 800b3da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3de:	6800      	ldr	r0, [r0, #0]
 800b3e0:	9301      	str	r3, [sp, #4]
 800b3e2:	f000 f94d 	bl	800b680 <_vfiprintf_r>
 800b3e6:	b002      	add	sp, #8
 800b3e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3ec:	b003      	add	sp, #12
 800b3ee:	4770      	bx	lr
 800b3f0:	200013e4 	.word	0x200013e4

0800b3f4 <__libc_init_array>:
 800b3f4:	b570      	push	{r4, r5, r6, lr}
 800b3f6:	4d0d      	ldr	r5, [pc, #52]	; (800b42c <__libc_init_array+0x38>)
 800b3f8:	4c0d      	ldr	r4, [pc, #52]	; (800b430 <__libc_init_array+0x3c>)
 800b3fa:	1b64      	subs	r4, r4, r5
 800b3fc:	10a4      	asrs	r4, r4, #2
 800b3fe:	2600      	movs	r6, #0
 800b400:	42a6      	cmp	r6, r4
 800b402:	d109      	bne.n	800b418 <__libc_init_array+0x24>
 800b404:	4d0b      	ldr	r5, [pc, #44]	; (800b434 <__libc_init_array+0x40>)
 800b406:	4c0c      	ldr	r4, [pc, #48]	; (800b438 <__libc_init_array+0x44>)
 800b408:	f005 f97c 	bl	8010704 <_init>
 800b40c:	1b64      	subs	r4, r4, r5
 800b40e:	10a4      	asrs	r4, r4, #2
 800b410:	2600      	movs	r6, #0
 800b412:	42a6      	cmp	r6, r4
 800b414:	d105      	bne.n	800b422 <__libc_init_array+0x2e>
 800b416:	bd70      	pop	{r4, r5, r6, pc}
 800b418:	f855 3b04 	ldr.w	r3, [r5], #4
 800b41c:	4798      	blx	r3
 800b41e:	3601      	adds	r6, #1
 800b420:	e7ee      	b.n	800b400 <__libc_init_array+0xc>
 800b422:	f855 3b04 	ldr.w	r3, [r5], #4
 800b426:	4798      	blx	r3
 800b428:	3601      	adds	r6, #1
 800b42a:	e7f2      	b.n	800b412 <__libc_init_array+0x1e>
 800b42c:	08010e80 	.word	0x08010e80
 800b430:	08010e80 	.word	0x08010e80
 800b434:	08010e80 	.word	0x08010e80
 800b438:	08010e84 	.word	0x08010e84

0800b43c <malloc>:
 800b43c:	4b02      	ldr	r3, [pc, #8]	; (800b448 <malloc+0xc>)
 800b43e:	4601      	mov	r1, r0
 800b440:	6818      	ldr	r0, [r3, #0]
 800b442:	f000 b87f 	b.w	800b544 <_malloc_r>
 800b446:	bf00      	nop
 800b448:	200013e4 	.word	0x200013e4

0800b44c <free>:
 800b44c:	4b02      	ldr	r3, [pc, #8]	; (800b458 <free+0xc>)
 800b44e:	4601      	mov	r1, r0
 800b450:	6818      	ldr	r0, [r3, #0]
 800b452:	f000 b80b 	b.w	800b46c <_free_r>
 800b456:	bf00      	nop
 800b458:	200013e4 	.word	0x200013e4

0800b45c <memset>:
 800b45c:	4402      	add	r2, r0
 800b45e:	4603      	mov	r3, r0
 800b460:	4293      	cmp	r3, r2
 800b462:	d100      	bne.n	800b466 <memset+0xa>
 800b464:	4770      	bx	lr
 800b466:	f803 1b01 	strb.w	r1, [r3], #1
 800b46a:	e7f9      	b.n	800b460 <memset+0x4>

0800b46c <_free_r>:
 800b46c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b46e:	2900      	cmp	r1, #0
 800b470:	d044      	beq.n	800b4fc <_free_r+0x90>
 800b472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b476:	9001      	str	r0, [sp, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f1a1 0404 	sub.w	r4, r1, #4
 800b47e:	bfb8      	it	lt
 800b480:	18e4      	addlt	r4, r4, r3
 800b482:	f003 fdd3 	bl	800f02c <__malloc_lock>
 800b486:	4a1e      	ldr	r2, [pc, #120]	; (800b500 <_free_r+0x94>)
 800b488:	9801      	ldr	r0, [sp, #4]
 800b48a:	6813      	ldr	r3, [r2, #0]
 800b48c:	b933      	cbnz	r3, 800b49c <_free_r+0x30>
 800b48e:	6063      	str	r3, [r4, #4]
 800b490:	6014      	str	r4, [r2, #0]
 800b492:	b003      	add	sp, #12
 800b494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b498:	f003 bdce 	b.w	800f038 <__malloc_unlock>
 800b49c:	42a3      	cmp	r3, r4
 800b49e:	d908      	bls.n	800b4b2 <_free_r+0x46>
 800b4a0:	6825      	ldr	r5, [r4, #0]
 800b4a2:	1961      	adds	r1, r4, r5
 800b4a4:	428b      	cmp	r3, r1
 800b4a6:	bf01      	itttt	eq
 800b4a8:	6819      	ldreq	r1, [r3, #0]
 800b4aa:	685b      	ldreq	r3, [r3, #4]
 800b4ac:	1949      	addeq	r1, r1, r5
 800b4ae:	6021      	streq	r1, [r4, #0]
 800b4b0:	e7ed      	b.n	800b48e <_free_r+0x22>
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	b10b      	cbz	r3, 800b4bc <_free_r+0x50>
 800b4b8:	42a3      	cmp	r3, r4
 800b4ba:	d9fa      	bls.n	800b4b2 <_free_r+0x46>
 800b4bc:	6811      	ldr	r1, [r2, #0]
 800b4be:	1855      	adds	r5, r2, r1
 800b4c0:	42a5      	cmp	r5, r4
 800b4c2:	d10b      	bne.n	800b4dc <_free_r+0x70>
 800b4c4:	6824      	ldr	r4, [r4, #0]
 800b4c6:	4421      	add	r1, r4
 800b4c8:	1854      	adds	r4, r2, r1
 800b4ca:	42a3      	cmp	r3, r4
 800b4cc:	6011      	str	r1, [r2, #0]
 800b4ce:	d1e0      	bne.n	800b492 <_free_r+0x26>
 800b4d0:	681c      	ldr	r4, [r3, #0]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	6053      	str	r3, [r2, #4]
 800b4d6:	4421      	add	r1, r4
 800b4d8:	6011      	str	r1, [r2, #0]
 800b4da:	e7da      	b.n	800b492 <_free_r+0x26>
 800b4dc:	d902      	bls.n	800b4e4 <_free_r+0x78>
 800b4de:	230c      	movs	r3, #12
 800b4e0:	6003      	str	r3, [r0, #0]
 800b4e2:	e7d6      	b.n	800b492 <_free_r+0x26>
 800b4e4:	6825      	ldr	r5, [r4, #0]
 800b4e6:	1961      	adds	r1, r4, r5
 800b4e8:	428b      	cmp	r3, r1
 800b4ea:	bf04      	itt	eq
 800b4ec:	6819      	ldreq	r1, [r3, #0]
 800b4ee:	685b      	ldreq	r3, [r3, #4]
 800b4f0:	6063      	str	r3, [r4, #4]
 800b4f2:	bf04      	itt	eq
 800b4f4:	1949      	addeq	r1, r1, r5
 800b4f6:	6021      	streq	r1, [r4, #0]
 800b4f8:	6054      	str	r4, [r2, #4]
 800b4fa:	e7ca      	b.n	800b492 <_free_r+0x26>
 800b4fc:	b003      	add	sp, #12
 800b4fe:	bd30      	pop	{r4, r5, pc}
 800b500:	20002be0 	.word	0x20002be0

0800b504 <sbrk_aligned>:
 800b504:	b570      	push	{r4, r5, r6, lr}
 800b506:	4e0e      	ldr	r6, [pc, #56]	; (800b540 <sbrk_aligned+0x3c>)
 800b508:	460c      	mov	r4, r1
 800b50a:	6831      	ldr	r1, [r6, #0]
 800b50c:	4605      	mov	r5, r0
 800b50e:	b911      	cbnz	r1, 800b516 <sbrk_aligned+0x12>
 800b510:	f001 f876 	bl	800c600 <_sbrk_r>
 800b514:	6030      	str	r0, [r6, #0]
 800b516:	4621      	mov	r1, r4
 800b518:	4628      	mov	r0, r5
 800b51a:	f001 f871 	bl	800c600 <_sbrk_r>
 800b51e:	1c43      	adds	r3, r0, #1
 800b520:	d00a      	beq.n	800b538 <sbrk_aligned+0x34>
 800b522:	1cc4      	adds	r4, r0, #3
 800b524:	f024 0403 	bic.w	r4, r4, #3
 800b528:	42a0      	cmp	r0, r4
 800b52a:	d007      	beq.n	800b53c <sbrk_aligned+0x38>
 800b52c:	1a21      	subs	r1, r4, r0
 800b52e:	4628      	mov	r0, r5
 800b530:	f001 f866 	bl	800c600 <_sbrk_r>
 800b534:	3001      	adds	r0, #1
 800b536:	d101      	bne.n	800b53c <sbrk_aligned+0x38>
 800b538:	f04f 34ff 	mov.w	r4, #4294967295
 800b53c:	4620      	mov	r0, r4
 800b53e:	bd70      	pop	{r4, r5, r6, pc}
 800b540:	20002be4 	.word	0x20002be4

0800b544 <_malloc_r>:
 800b544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b548:	1ccd      	adds	r5, r1, #3
 800b54a:	f025 0503 	bic.w	r5, r5, #3
 800b54e:	3508      	adds	r5, #8
 800b550:	2d0c      	cmp	r5, #12
 800b552:	bf38      	it	cc
 800b554:	250c      	movcc	r5, #12
 800b556:	2d00      	cmp	r5, #0
 800b558:	4607      	mov	r7, r0
 800b55a:	db01      	blt.n	800b560 <_malloc_r+0x1c>
 800b55c:	42a9      	cmp	r1, r5
 800b55e:	d905      	bls.n	800b56c <_malloc_r+0x28>
 800b560:	230c      	movs	r3, #12
 800b562:	603b      	str	r3, [r7, #0]
 800b564:	2600      	movs	r6, #0
 800b566:	4630      	mov	r0, r6
 800b568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b56c:	4e2e      	ldr	r6, [pc, #184]	; (800b628 <_malloc_r+0xe4>)
 800b56e:	f003 fd5d 	bl	800f02c <__malloc_lock>
 800b572:	6833      	ldr	r3, [r6, #0]
 800b574:	461c      	mov	r4, r3
 800b576:	bb34      	cbnz	r4, 800b5c6 <_malloc_r+0x82>
 800b578:	4629      	mov	r1, r5
 800b57a:	4638      	mov	r0, r7
 800b57c:	f7ff ffc2 	bl	800b504 <sbrk_aligned>
 800b580:	1c43      	adds	r3, r0, #1
 800b582:	4604      	mov	r4, r0
 800b584:	d14d      	bne.n	800b622 <_malloc_r+0xde>
 800b586:	6834      	ldr	r4, [r6, #0]
 800b588:	4626      	mov	r6, r4
 800b58a:	2e00      	cmp	r6, #0
 800b58c:	d140      	bne.n	800b610 <_malloc_r+0xcc>
 800b58e:	6823      	ldr	r3, [r4, #0]
 800b590:	4631      	mov	r1, r6
 800b592:	4638      	mov	r0, r7
 800b594:	eb04 0803 	add.w	r8, r4, r3
 800b598:	f001 f832 	bl	800c600 <_sbrk_r>
 800b59c:	4580      	cmp	r8, r0
 800b59e:	d13a      	bne.n	800b616 <_malloc_r+0xd2>
 800b5a0:	6821      	ldr	r1, [r4, #0]
 800b5a2:	3503      	adds	r5, #3
 800b5a4:	1a6d      	subs	r5, r5, r1
 800b5a6:	f025 0503 	bic.w	r5, r5, #3
 800b5aa:	3508      	adds	r5, #8
 800b5ac:	2d0c      	cmp	r5, #12
 800b5ae:	bf38      	it	cc
 800b5b0:	250c      	movcc	r5, #12
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	4638      	mov	r0, r7
 800b5b6:	f7ff ffa5 	bl	800b504 <sbrk_aligned>
 800b5ba:	3001      	adds	r0, #1
 800b5bc:	d02b      	beq.n	800b616 <_malloc_r+0xd2>
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	442b      	add	r3, r5
 800b5c2:	6023      	str	r3, [r4, #0]
 800b5c4:	e00e      	b.n	800b5e4 <_malloc_r+0xa0>
 800b5c6:	6822      	ldr	r2, [r4, #0]
 800b5c8:	1b52      	subs	r2, r2, r5
 800b5ca:	d41e      	bmi.n	800b60a <_malloc_r+0xc6>
 800b5cc:	2a0b      	cmp	r2, #11
 800b5ce:	d916      	bls.n	800b5fe <_malloc_r+0xba>
 800b5d0:	1961      	adds	r1, r4, r5
 800b5d2:	42a3      	cmp	r3, r4
 800b5d4:	6025      	str	r5, [r4, #0]
 800b5d6:	bf18      	it	ne
 800b5d8:	6059      	strne	r1, [r3, #4]
 800b5da:	6863      	ldr	r3, [r4, #4]
 800b5dc:	bf08      	it	eq
 800b5de:	6031      	streq	r1, [r6, #0]
 800b5e0:	5162      	str	r2, [r4, r5]
 800b5e2:	604b      	str	r3, [r1, #4]
 800b5e4:	4638      	mov	r0, r7
 800b5e6:	f104 060b 	add.w	r6, r4, #11
 800b5ea:	f003 fd25 	bl	800f038 <__malloc_unlock>
 800b5ee:	f026 0607 	bic.w	r6, r6, #7
 800b5f2:	1d23      	adds	r3, r4, #4
 800b5f4:	1af2      	subs	r2, r6, r3
 800b5f6:	d0b6      	beq.n	800b566 <_malloc_r+0x22>
 800b5f8:	1b9b      	subs	r3, r3, r6
 800b5fa:	50a3      	str	r3, [r4, r2]
 800b5fc:	e7b3      	b.n	800b566 <_malloc_r+0x22>
 800b5fe:	6862      	ldr	r2, [r4, #4]
 800b600:	42a3      	cmp	r3, r4
 800b602:	bf0c      	ite	eq
 800b604:	6032      	streq	r2, [r6, #0]
 800b606:	605a      	strne	r2, [r3, #4]
 800b608:	e7ec      	b.n	800b5e4 <_malloc_r+0xa0>
 800b60a:	4623      	mov	r3, r4
 800b60c:	6864      	ldr	r4, [r4, #4]
 800b60e:	e7b2      	b.n	800b576 <_malloc_r+0x32>
 800b610:	4634      	mov	r4, r6
 800b612:	6876      	ldr	r6, [r6, #4]
 800b614:	e7b9      	b.n	800b58a <_malloc_r+0x46>
 800b616:	230c      	movs	r3, #12
 800b618:	603b      	str	r3, [r7, #0]
 800b61a:	4638      	mov	r0, r7
 800b61c:	f003 fd0c 	bl	800f038 <__malloc_unlock>
 800b620:	e7a1      	b.n	800b566 <_malloc_r+0x22>
 800b622:	6025      	str	r5, [r4, #0]
 800b624:	e7de      	b.n	800b5e4 <_malloc_r+0xa0>
 800b626:	bf00      	nop
 800b628:	20002be0 	.word	0x20002be0

0800b62c <__sfputc_r>:
 800b62c:	6893      	ldr	r3, [r2, #8]
 800b62e:	3b01      	subs	r3, #1
 800b630:	2b00      	cmp	r3, #0
 800b632:	b410      	push	{r4}
 800b634:	6093      	str	r3, [r2, #8]
 800b636:	da08      	bge.n	800b64a <__sfputc_r+0x1e>
 800b638:	6994      	ldr	r4, [r2, #24]
 800b63a:	42a3      	cmp	r3, r4
 800b63c:	db01      	blt.n	800b642 <__sfputc_r+0x16>
 800b63e:	290a      	cmp	r1, #10
 800b640:	d103      	bne.n	800b64a <__sfputc_r+0x1e>
 800b642:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b646:	f001 bfab 	b.w	800d5a0 <__swbuf_r>
 800b64a:	6813      	ldr	r3, [r2, #0]
 800b64c:	1c58      	adds	r0, r3, #1
 800b64e:	6010      	str	r0, [r2, #0]
 800b650:	7019      	strb	r1, [r3, #0]
 800b652:	4608      	mov	r0, r1
 800b654:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <__sfputs_r>:
 800b65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65c:	4606      	mov	r6, r0
 800b65e:	460f      	mov	r7, r1
 800b660:	4614      	mov	r4, r2
 800b662:	18d5      	adds	r5, r2, r3
 800b664:	42ac      	cmp	r4, r5
 800b666:	d101      	bne.n	800b66c <__sfputs_r+0x12>
 800b668:	2000      	movs	r0, #0
 800b66a:	e007      	b.n	800b67c <__sfputs_r+0x22>
 800b66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b670:	463a      	mov	r2, r7
 800b672:	4630      	mov	r0, r6
 800b674:	f7ff ffda 	bl	800b62c <__sfputc_r>
 800b678:	1c43      	adds	r3, r0, #1
 800b67a:	d1f3      	bne.n	800b664 <__sfputs_r+0xa>
 800b67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b680 <_vfiprintf_r>:
 800b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	460d      	mov	r5, r1
 800b686:	b09d      	sub	sp, #116	; 0x74
 800b688:	4614      	mov	r4, r2
 800b68a:	4698      	mov	r8, r3
 800b68c:	4606      	mov	r6, r0
 800b68e:	b118      	cbz	r0, 800b698 <_vfiprintf_r+0x18>
 800b690:	6983      	ldr	r3, [r0, #24]
 800b692:	b90b      	cbnz	r3, 800b698 <_vfiprintf_r+0x18>
 800b694:	f003 f804 	bl	800e6a0 <__sinit>
 800b698:	4b89      	ldr	r3, [pc, #548]	; (800b8c0 <_vfiprintf_r+0x240>)
 800b69a:	429d      	cmp	r5, r3
 800b69c:	d11b      	bne.n	800b6d6 <_vfiprintf_r+0x56>
 800b69e:	6875      	ldr	r5, [r6, #4]
 800b6a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6a2:	07d9      	lsls	r1, r3, #31
 800b6a4:	d405      	bmi.n	800b6b2 <_vfiprintf_r+0x32>
 800b6a6:	89ab      	ldrh	r3, [r5, #12]
 800b6a8:	059a      	lsls	r2, r3, #22
 800b6aa:	d402      	bmi.n	800b6b2 <_vfiprintf_r+0x32>
 800b6ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6ae:	f003 fc08 	bl	800eec2 <__retarget_lock_acquire_recursive>
 800b6b2:	89ab      	ldrh	r3, [r5, #12]
 800b6b4:	071b      	lsls	r3, r3, #28
 800b6b6:	d501      	bpl.n	800b6bc <_vfiprintf_r+0x3c>
 800b6b8:	692b      	ldr	r3, [r5, #16]
 800b6ba:	b9eb      	cbnz	r3, 800b6f8 <_vfiprintf_r+0x78>
 800b6bc:	4629      	mov	r1, r5
 800b6be:	4630      	mov	r0, r6
 800b6c0:	f001 ffd2 	bl	800d668 <__swsetup_r>
 800b6c4:	b1c0      	cbz	r0, 800b6f8 <_vfiprintf_r+0x78>
 800b6c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6c8:	07dc      	lsls	r4, r3, #31
 800b6ca:	d50e      	bpl.n	800b6ea <_vfiprintf_r+0x6a>
 800b6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d0:	b01d      	add	sp, #116	; 0x74
 800b6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d6:	4b7b      	ldr	r3, [pc, #492]	; (800b8c4 <_vfiprintf_r+0x244>)
 800b6d8:	429d      	cmp	r5, r3
 800b6da:	d101      	bne.n	800b6e0 <_vfiprintf_r+0x60>
 800b6dc:	68b5      	ldr	r5, [r6, #8]
 800b6de:	e7df      	b.n	800b6a0 <_vfiprintf_r+0x20>
 800b6e0:	4b79      	ldr	r3, [pc, #484]	; (800b8c8 <_vfiprintf_r+0x248>)
 800b6e2:	429d      	cmp	r5, r3
 800b6e4:	bf08      	it	eq
 800b6e6:	68f5      	ldreq	r5, [r6, #12]
 800b6e8:	e7da      	b.n	800b6a0 <_vfiprintf_r+0x20>
 800b6ea:	89ab      	ldrh	r3, [r5, #12]
 800b6ec:	0598      	lsls	r0, r3, #22
 800b6ee:	d4ed      	bmi.n	800b6cc <_vfiprintf_r+0x4c>
 800b6f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6f2:	f003 fbe7 	bl	800eec4 <__retarget_lock_release_recursive>
 800b6f6:	e7e9      	b.n	800b6cc <_vfiprintf_r+0x4c>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b6fc:	2320      	movs	r3, #32
 800b6fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b702:	f8cd 800c 	str.w	r8, [sp, #12]
 800b706:	2330      	movs	r3, #48	; 0x30
 800b708:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b8cc <_vfiprintf_r+0x24c>
 800b70c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b710:	f04f 0901 	mov.w	r9, #1
 800b714:	4623      	mov	r3, r4
 800b716:	469a      	mov	sl, r3
 800b718:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b71c:	b10a      	cbz	r2, 800b722 <_vfiprintf_r+0xa2>
 800b71e:	2a25      	cmp	r2, #37	; 0x25
 800b720:	d1f9      	bne.n	800b716 <_vfiprintf_r+0x96>
 800b722:	ebba 0b04 	subs.w	fp, sl, r4
 800b726:	d00b      	beq.n	800b740 <_vfiprintf_r+0xc0>
 800b728:	465b      	mov	r3, fp
 800b72a:	4622      	mov	r2, r4
 800b72c:	4629      	mov	r1, r5
 800b72e:	4630      	mov	r0, r6
 800b730:	f7ff ff93 	bl	800b65a <__sfputs_r>
 800b734:	3001      	adds	r0, #1
 800b736:	f000 80aa 	beq.w	800b88e <_vfiprintf_r+0x20e>
 800b73a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b73c:	445a      	add	r2, fp
 800b73e:	9209      	str	r2, [sp, #36]	; 0x24
 800b740:	f89a 3000 	ldrb.w	r3, [sl]
 800b744:	2b00      	cmp	r3, #0
 800b746:	f000 80a2 	beq.w	800b88e <_vfiprintf_r+0x20e>
 800b74a:	2300      	movs	r3, #0
 800b74c:	f04f 32ff 	mov.w	r2, #4294967295
 800b750:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b754:	f10a 0a01 	add.w	sl, sl, #1
 800b758:	9304      	str	r3, [sp, #16]
 800b75a:	9307      	str	r3, [sp, #28]
 800b75c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b760:	931a      	str	r3, [sp, #104]	; 0x68
 800b762:	4654      	mov	r4, sl
 800b764:	2205      	movs	r2, #5
 800b766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b76a:	4858      	ldr	r0, [pc, #352]	; (800b8cc <_vfiprintf_r+0x24c>)
 800b76c:	f7f4 fd48 	bl	8000200 <memchr>
 800b770:	9a04      	ldr	r2, [sp, #16]
 800b772:	b9d8      	cbnz	r0, 800b7ac <_vfiprintf_r+0x12c>
 800b774:	06d1      	lsls	r1, r2, #27
 800b776:	bf44      	itt	mi
 800b778:	2320      	movmi	r3, #32
 800b77a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b77e:	0713      	lsls	r3, r2, #28
 800b780:	bf44      	itt	mi
 800b782:	232b      	movmi	r3, #43	; 0x2b
 800b784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b788:	f89a 3000 	ldrb.w	r3, [sl]
 800b78c:	2b2a      	cmp	r3, #42	; 0x2a
 800b78e:	d015      	beq.n	800b7bc <_vfiprintf_r+0x13c>
 800b790:	9a07      	ldr	r2, [sp, #28]
 800b792:	4654      	mov	r4, sl
 800b794:	2000      	movs	r0, #0
 800b796:	f04f 0c0a 	mov.w	ip, #10
 800b79a:	4621      	mov	r1, r4
 800b79c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7a0:	3b30      	subs	r3, #48	; 0x30
 800b7a2:	2b09      	cmp	r3, #9
 800b7a4:	d94e      	bls.n	800b844 <_vfiprintf_r+0x1c4>
 800b7a6:	b1b0      	cbz	r0, 800b7d6 <_vfiprintf_r+0x156>
 800b7a8:	9207      	str	r2, [sp, #28]
 800b7aa:	e014      	b.n	800b7d6 <_vfiprintf_r+0x156>
 800b7ac:	eba0 0308 	sub.w	r3, r0, r8
 800b7b0:	fa09 f303 	lsl.w	r3, r9, r3
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	9304      	str	r3, [sp, #16]
 800b7b8:	46a2      	mov	sl, r4
 800b7ba:	e7d2      	b.n	800b762 <_vfiprintf_r+0xe2>
 800b7bc:	9b03      	ldr	r3, [sp, #12]
 800b7be:	1d19      	adds	r1, r3, #4
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	9103      	str	r1, [sp, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	bfbb      	ittet	lt
 800b7c8:	425b      	neglt	r3, r3
 800b7ca:	f042 0202 	orrlt.w	r2, r2, #2
 800b7ce:	9307      	strge	r3, [sp, #28]
 800b7d0:	9307      	strlt	r3, [sp, #28]
 800b7d2:	bfb8      	it	lt
 800b7d4:	9204      	strlt	r2, [sp, #16]
 800b7d6:	7823      	ldrb	r3, [r4, #0]
 800b7d8:	2b2e      	cmp	r3, #46	; 0x2e
 800b7da:	d10c      	bne.n	800b7f6 <_vfiprintf_r+0x176>
 800b7dc:	7863      	ldrb	r3, [r4, #1]
 800b7de:	2b2a      	cmp	r3, #42	; 0x2a
 800b7e0:	d135      	bne.n	800b84e <_vfiprintf_r+0x1ce>
 800b7e2:	9b03      	ldr	r3, [sp, #12]
 800b7e4:	1d1a      	adds	r2, r3, #4
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	9203      	str	r2, [sp, #12]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	bfb8      	it	lt
 800b7ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7f2:	3402      	adds	r4, #2
 800b7f4:	9305      	str	r3, [sp, #20]
 800b7f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b8dc <_vfiprintf_r+0x25c>
 800b7fa:	7821      	ldrb	r1, [r4, #0]
 800b7fc:	2203      	movs	r2, #3
 800b7fe:	4650      	mov	r0, sl
 800b800:	f7f4 fcfe 	bl	8000200 <memchr>
 800b804:	b140      	cbz	r0, 800b818 <_vfiprintf_r+0x198>
 800b806:	2340      	movs	r3, #64	; 0x40
 800b808:	eba0 000a 	sub.w	r0, r0, sl
 800b80c:	fa03 f000 	lsl.w	r0, r3, r0
 800b810:	9b04      	ldr	r3, [sp, #16]
 800b812:	4303      	orrs	r3, r0
 800b814:	3401      	adds	r4, #1
 800b816:	9304      	str	r3, [sp, #16]
 800b818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b81c:	482c      	ldr	r0, [pc, #176]	; (800b8d0 <_vfiprintf_r+0x250>)
 800b81e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b822:	2206      	movs	r2, #6
 800b824:	f7f4 fcec 	bl	8000200 <memchr>
 800b828:	2800      	cmp	r0, #0
 800b82a:	d03f      	beq.n	800b8ac <_vfiprintf_r+0x22c>
 800b82c:	4b29      	ldr	r3, [pc, #164]	; (800b8d4 <_vfiprintf_r+0x254>)
 800b82e:	bb1b      	cbnz	r3, 800b878 <_vfiprintf_r+0x1f8>
 800b830:	9b03      	ldr	r3, [sp, #12]
 800b832:	3307      	adds	r3, #7
 800b834:	f023 0307 	bic.w	r3, r3, #7
 800b838:	3308      	adds	r3, #8
 800b83a:	9303      	str	r3, [sp, #12]
 800b83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b83e:	443b      	add	r3, r7
 800b840:	9309      	str	r3, [sp, #36]	; 0x24
 800b842:	e767      	b.n	800b714 <_vfiprintf_r+0x94>
 800b844:	fb0c 3202 	mla	r2, ip, r2, r3
 800b848:	460c      	mov	r4, r1
 800b84a:	2001      	movs	r0, #1
 800b84c:	e7a5      	b.n	800b79a <_vfiprintf_r+0x11a>
 800b84e:	2300      	movs	r3, #0
 800b850:	3401      	adds	r4, #1
 800b852:	9305      	str	r3, [sp, #20]
 800b854:	4619      	mov	r1, r3
 800b856:	f04f 0c0a 	mov.w	ip, #10
 800b85a:	4620      	mov	r0, r4
 800b85c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b860:	3a30      	subs	r2, #48	; 0x30
 800b862:	2a09      	cmp	r2, #9
 800b864:	d903      	bls.n	800b86e <_vfiprintf_r+0x1ee>
 800b866:	2b00      	cmp	r3, #0
 800b868:	d0c5      	beq.n	800b7f6 <_vfiprintf_r+0x176>
 800b86a:	9105      	str	r1, [sp, #20]
 800b86c:	e7c3      	b.n	800b7f6 <_vfiprintf_r+0x176>
 800b86e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b872:	4604      	mov	r4, r0
 800b874:	2301      	movs	r3, #1
 800b876:	e7f0      	b.n	800b85a <_vfiprintf_r+0x1da>
 800b878:	ab03      	add	r3, sp, #12
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	462a      	mov	r2, r5
 800b87e:	4b16      	ldr	r3, [pc, #88]	; (800b8d8 <_vfiprintf_r+0x258>)
 800b880:	a904      	add	r1, sp, #16
 800b882:	4630      	mov	r0, r6
 800b884:	f000 f8cc 	bl	800ba20 <_printf_float>
 800b888:	4607      	mov	r7, r0
 800b88a:	1c78      	adds	r0, r7, #1
 800b88c:	d1d6      	bne.n	800b83c <_vfiprintf_r+0x1bc>
 800b88e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b890:	07d9      	lsls	r1, r3, #31
 800b892:	d405      	bmi.n	800b8a0 <_vfiprintf_r+0x220>
 800b894:	89ab      	ldrh	r3, [r5, #12]
 800b896:	059a      	lsls	r2, r3, #22
 800b898:	d402      	bmi.n	800b8a0 <_vfiprintf_r+0x220>
 800b89a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b89c:	f003 fb12 	bl	800eec4 <__retarget_lock_release_recursive>
 800b8a0:	89ab      	ldrh	r3, [r5, #12]
 800b8a2:	065b      	lsls	r3, r3, #25
 800b8a4:	f53f af12 	bmi.w	800b6cc <_vfiprintf_r+0x4c>
 800b8a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8aa:	e711      	b.n	800b6d0 <_vfiprintf_r+0x50>
 800b8ac:	ab03      	add	r3, sp, #12
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	462a      	mov	r2, r5
 800b8b2:	4b09      	ldr	r3, [pc, #36]	; (800b8d8 <_vfiprintf_r+0x258>)
 800b8b4:	a904      	add	r1, sp, #16
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f000 fb56 	bl	800bf68 <_printf_i>
 800b8bc:	e7e4      	b.n	800b888 <_vfiprintf_r+0x208>
 800b8be:	bf00      	nop
 800b8c0:	08010c48 	.word	0x08010c48
 800b8c4:	08010c68 	.word	0x08010c68
 800b8c8:	08010c28 	.word	0x08010c28
 800b8cc:	0801099c 	.word	0x0801099c
 800b8d0:	080109a6 	.word	0x080109a6
 800b8d4:	0800ba21 	.word	0x0800ba21
 800b8d8:	0800b65b 	.word	0x0800b65b
 800b8dc:	080109a2 	.word	0x080109a2

0800b8e0 <__cvt>:
 800b8e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e4:	ec55 4b10 	vmov	r4, r5, d0
 800b8e8:	2d00      	cmp	r5, #0
 800b8ea:	460e      	mov	r6, r1
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	462b      	mov	r3, r5
 800b8f0:	bfbb      	ittet	lt
 800b8f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b8f6:	461d      	movlt	r5, r3
 800b8f8:	2300      	movge	r3, #0
 800b8fa:	232d      	movlt	r3, #45	; 0x2d
 800b8fc:	700b      	strb	r3, [r1, #0]
 800b8fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b900:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b904:	4691      	mov	r9, r2
 800b906:	f023 0820 	bic.w	r8, r3, #32
 800b90a:	bfbc      	itt	lt
 800b90c:	4622      	movlt	r2, r4
 800b90e:	4614      	movlt	r4, r2
 800b910:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b914:	d005      	beq.n	800b922 <__cvt+0x42>
 800b916:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b91a:	d100      	bne.n	800b91e <__cvt+0x3e>
 800b91c:	3601      	adds	r6, #1
 800b91e:	2102      	movs	r1, #2
 800b920:	e000      	b.n	800b924 <__cvt+0x44>
 800b922:	2103      	movs	r1, #3
 800b924:	ab03      	add	r3, sp, #12
 800b926:	9301      	str	r3, [sp, #4]
 800b928:	ab02      	add	r3, sp, #8
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	ec45 4b10 	vmov	d0, r4, r5
 800b930:	4653      	mov	r3, sl
 800b932:	4632      	mov	r2, r6
 800b934:	f001 ffac 	bl	800d890 <_dtoa_r>
 800b938:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b93c:	4607      	mov	r7, r0
 800b93e:	d102      	bne.n	800b946 <__cvt+0x66>
 800b940:	f019 0f01 	tst.w	r9, #1
 800b944:	d022      	beq.n	800b98c <__cvt+0xac>
 800b946:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b94a:	eb07 0906 	add.w	r9, r7, r6
 800b94e:	d110      	bne.n	800b972 <__cvt+0x92>
 800b950:	783b      	ldrb	r3, [r7, #0]
 800b952:	2b30      	cmp	r3, #48	; 0x30
 800b954:	d10a      	bne.n	800b96c <__cvt+0x8c>
 800b956:	2200      	movs	r2, #0
 800b958:	2300      	movs	r3, #0
 800b95a:	4620      	mov	r0, r4
 800b95c:	4629      	mov	r1, r5
 800b95e:	f7f5 f8c3 	bl	8000ae8 <__aeabi_dcmpeq>
 800b962:	b918      	cbnz	r0, 800b96c <__cvt+0x8c>
 800b964:	f1c6 0601 	rsb	r6, r6, #1
 800b968:	f8ca 6000 	str.w	r6, [sl]
 800b96c:	f8da 3000 	ldr.w	r3, [sl]
 800b970:	4499      	add	r9, r3
 800b972:	2200      	movs	r2, #0
 800b974:	2300      	movs	r3, #0
 800b976:	4620      	mov	r0, r4
 800b978:	4629      	mov	r1, r5
 800b97a:	f7f5 f8b5 	bl	8000ae8 <__aeabi_dcmpeq>
 800b97e:	b108      	cbz	r0, 800b984 <__cvt+0xa4>
 800b980:	f8cd 900c 	str.w	r9, [sp, #12]
 800b984:	2230      	movs	r2, #48	; 0x30
 800b986:	9b03      	ldr	r3, [sp, #12]
 800b988:	454b      	cmp	r3, r9
 800b98a:	d307      	bcc.n	800b99c <__cvt+0xbc>
 800b98c:	9b03      	ldr	r3, [sp, #12]
 800b98e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b990:	1bdb      	subs	r3, r3, r7
 800b992:	4638      	mov	r0, r7
 800b994:	6013      	str	r3, [r2, #0]
 800b996:	b004      	add	sp, #16
 800b998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b99c:	1c59      	adds	r1, r3, #1
 800b99e:	9103      	str	r1, [sp, #12]
 800b9a0:	701a      	strb	r2, [r3, #0]
 800b9a2:	e7f0      	b.n	800b986 <__cvt+0xa6>

0800b9a4 <__exponent>:
 800b9a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2900      	cmp	r1, #0
 800b9aa:	bfb8      	it	lt
 800b9ac:	4249      	neglt	r1, r1
 800b9ae:	f803 2b02 	strb.w	r2, [r3], #2
 800b9b2:	bfb4      	ite	lt
 800b9b4:	222d      	movlt	r2, #45	; 0x2d
 800b9b6:	222b      	movge	r2, #43	; 0x2b
 800b9b8:	2909      	cmp	r1, #9
 800b9ba:	7042      	strb	r2, [r0, #1]
 800b9bc:	dd2a      	ble.n	800ba14 <__exponent+0x70>
 800b9be:	f10d 0407 	add.w	r4, sp, #7
 800b9c2:	46a4      	mov	ip, r4
 800b9c4:	270a      	movs	r7, #10
 800b9c6:	46a6      	mov	lr, r4
 800b9c8:	460a      	mov	r2, r1
 800b9ca:	fb91 f6f7 	sdiv	r6, r1, r7
 800b9ce:	fb07 1516 	mls	r5, r7, r6, r1
 800b9d2:	3530      	adds	r5, #48	; 0x30
 800b9d4:	2a63      	cmp	r2, #99	; 0x63
 800b9d6:	f104 34ff 	add.w	r4, r4, #4294967295
 800b9da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b9de:	4631      	mov	r1, r6
 800b9e0:	dcf1      	bgt.n	800b9c6 <__exponent+0x22>
 800b9e2:	3130      	adds	r1, #48	; 0x30
 800b9e4:	f1ae 0502 	sub.w	r5, lr, #2
 800b9e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b9ec:	1c44      	adds	r4, r0, #1
 800b9ee:	4629      	mov	r1, r5
 800b9f0:	4561      	cmp	r1, ip
 800b9f2:	d30a      	bcc.n	800ba0a <__exponent+0x66>
 800b9f4:	f10d 0209 	add.w	r2, sp, #9
 800b9f8:	eba2 020e 	sub.w	r2, r2, lr
 800b9fc:	4565      	cmp	r5, ip
 800b9fe:	bf88      	it	hi
 800ba00:	2200      	movhi	r2, #0
 800ba02:	4413      	add	r3, r2
 800ba04:	1a18      	subs	r0, r3, r0
 800ba06:	b003      	add	sp, #12
 800ba08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ba12:	e7ed      	b.n	800b9f0 <__exponent+0x4c>
 800ba14:	2330      	movs	r3, #48	; 0x30
 800ba16:	3130      	adds	r1, #48	; 0x30
 800ba18:	7083      	strb	r3, [r0, #2]
 800ba1a:	70c1      	strb	r1, [r0, #3]
 800ba1c:	1d03      	adds	r3, r0, #4
 800ba1e:	e7f1      	b.n	800ba04 <__exponent+0x60>

0800ba20 <_printf_float>:
 800ba20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba24:	ed2d 8b02 	vpush	{d8}
 800ba28:	b08d      	sub	sp, #52	; 0x34
 800ba2a:	460c      	mov	r4, r1
 800ba2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ba30:	4616      	mov	r6, r2
 800ba32:	461f      	mov	r7, r3
 800ba34:	4605      	mov	r5, r0
 800ba36:	f003 fa3f 	bl	800eeb8 <_localeconv_r>
 800ba3a:	f8d0 a000 	ldr.w	sl, [r0]
 800ba3e:	4650      	mov	r0, sl
 800ba40:	f7f4 fbd0 	bl	80001e4 <strlen>
 800ba44:	2300      	movs	r3, #0
 800ba46:	930a      	str	r3, [sp, #40]	; 0x28
 800ba48:	6823      	ldr	r3, [r4, #0]
 800ba4a:	9305      	str	r3, [sp, #20]
 800ba4c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba50:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ba54:	3307      	adds	r3, #7
 800ba56:	f023 0307 	bic.w	r3, r3, #7
 800ba5a:	f103 0208 	add.w	r2, r3, #8
 800ba5e:	f8c8 2000 	str.w	r2, [r8]
 800ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ba6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ba6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba72:	9307      	str	r3, [sp, #28]
 800ba74:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba78:	ee08 0a10 	vmov	s16, r0
 800ba7c:	4b9f      	ldr	r3, [pc, #636]	; (800bcfc <_printf_float+0x2dc>)
 800ba7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba82:	f04f 32ff 	mov.w	r2, #4294967295
 800ba86:	f7f5 f861 	bl	8000b4c <__aeabi_dcmpun>
 800ba8a:	bb88      	cbnz	r0, 800baf0 <_printf_float+0xd0>
 800ba8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba90:	4b9a      	ldr	r3, [pc, #616]	; (800bcfc <_printf_float+0x2dc>)
 800ba92:	f04f 32ff 	mov.w	r2, #4294967295
 800ba96:	f7f5 f83b 	bl	8000b10 <__aeabi_dcmple>
 800ba9a:	bb48      	cbnz	r0, 800baf0 <_printf_float+0xd0>
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	2300      	movs	r3, #0
 800baa0:	4640      	mov	r0, r8
 800baa2:	4649      	mov	r1, r9
 800baa4:	f7f5 f82a 	bl	8000afc <__aeabi_dcmplt>
 800baa8:	b110      	cbz	r0, 800bab0 <_printf_float+0x90>
 800baaa:	232d      	movs	r3, #45	; 0x2d
 800baac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bab0:	4b93      	ldr	r3, [pc, #588]	; (800bd00 <_printf_float+0x2e0>)
 800bab2:	4894      	ldr	r0, [pc, #592]	; (800bd04 <_printf_float+0x2e4>)
 800bab4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bab8:	bf94      	ite	ls
 800baba:	4698      	movls	r8, r3
 800babc:	4680      	movhi	r8, r0
 800babe:	2303      	movs	r3, #3
 800bac0:	6123      	str	r3, [r4, #16]
 800bac2:	9b05      	ldr	r3, [sp, #20]
 800bac4:	f023 0204 	bic.w	r2, r3, #4
 800bac8:	6022      	str	r2, [r4, #0]
 800baca:	f04f 0900 	mov.w	r9, #0
 800bace:	9700      	str	r7, [sp, #0]
 800bad0:	4633      	mov	r3, r6
 800bad2:	aa0b      	add	r2, sp, #44	; 0x2c
 800bad4:	4621      	mov	r1, r4
 800bad6:	4628      	mov	r0, r5
 800bad8:	f000 f9d8 	bl	800be8c <_printf_common>
 800badc:	3001      	adds	r0, #1
 800bade:	f040 8090 	bne.w	800bc02 <_printf_float+0x1e2>
 800bae2:	f04f 30ff 	mov.w	r0, #4294967295
 800bae6:	b00d      	add	sp, #52	; 0x34
 800bae8:	ecbd 8b02 	vpop	{d8}
 800baec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf0:	4642      	mov	r2, r8
 800baf2:	464b      	mov	r3, r9
 800baf4:	4640      	mov	r0, r8
 800baf6:	4649      	mov	r1, r9
 800baf8:	f7f5 f828 	bl	8000b4c <__aeabi_dcmpun>
 800bafc:	b140      	cbz	r0, 800bb10 <_printf_float+0xf0>
 800bafe:	464b      	mov	r3, r9
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	bfbc      	itt	lt
 800bb04:	232d      	movlt	r3, #45	; 0x2d
 800bb06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bb0a:	487f      	ldr	r0, [pc, #508]	; (800bd08 <_printf_float+0x2e8>)
 800bb0c:	4b7f      	ldr	r3, [pc, #508]	; (800bd0c <_printf_float+0x2ec>)
 800bb0e:	e7d1      	b.n	800bab4 <_printf_float+0x94>
 800bb10:	6863      	ldr	r3, [r4, #4]
 800bb12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bb16:	9206      	str	r2, [sp, #24]
 800bb18:	1c5a      	adds	r2, r3, #1
 800bb1a:	d13f      	bne.n	800bb9c <_printf_float+0x17c>
 800bb1c:	2306      	movs	r3, #6
 800bb1e:	6063      	str	r3, [r4, #4]
 800bb20:	9b05      	ldr	r3, [sp, #20]
 800bb22:	6861      	ldr	r1, [r4, #4]
 800bb24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bb28:	2300      	movs	r3, #0
 800bb2a:	9303      	str	r3, [sp, #12]
 800bb2c:	ab0a      	add	r3, sp, #40	; 0x28
 800bb2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bb32:	ab09      	add	r3, sp, #36	; 0x24
 800bb34:	ec49 8b10 	vmov	d0, r8, r9
 800bb38:	9300      	str	r3, [sp, #0]
 800bb3a:	6022      	str	r2, [r4, #0]
 800bb3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bb40:	4628      	mov	r0, r5
 800bb42:	f7ff fecd 	bl	800b8e0 <__cvt>
 800bb46:	9b06      	ldr	r3, [sp, #24]
 800bb48:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb4a:	2b47      	cmp	r3, #71	; 0x47
 800bb4c:	4680      	mov	r8, r0
 800bb4e:	d108      	bne.n	800bb62 <_printf_float+0x142>
 800bb50:	1cc8      	adds	r0, r1, #3
 800bb52:	db02      	blt.n	800bb5a <_printf_float+0x13a>
 800bb54:	6863      	ldr	r3, [r4, #4]
 800bb56:	4299      	cmp	r1, r3
 800bb58:	dd41      	ble.n	800bbde <_printf_float+0x1be>
 800bb5a:	f1ab 0b02 	sub.w	fp, fp, #2
 800bb5e:	fa5f fb8b 	uxtb.w	fp, fp
 800bb62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb66:	d820      	bhi.n	800bbaa <_printf_float+0x18a>
 800bb68:	3901      	subs	r1, #1
 800bb6a:	465a      	mov	r2, fp
 800bb6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bb70:	9109      	str	r1, [sp, #36]	; 0x24
 800bb72:	f7ff ff17 	bl	800b9a4 <__exponent>
 800bb76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb78:	1813      	adds	r3, r2, r0
 800bb7a:	2a01      	cmp	r2, #1
 800bb7c:	4681      	mov	r9, r0
 800bb7e:	6123      	str	r3, [r4, #16]
 800bb80:	dc02      	bgt.n	800bb88 <_printf_float+0x168>
 800bb82:	6822      	ldr	r2, [r4, #0]
 800bb84:	07d2      	lsls	r2, r2, #31
 800bb86:	d501      	bpl.n	800bb8c <_printf_float+0x16c>
 800bb88:	3301      	adds	r3, #1
 800bb8a:	6123      	str	r3, [r4, #16]
 800bb8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d09c      	beq.n	800bace <_printf_float+0xae>
 800bb94:	232d      	movs	r3, #45	; 0x2d
 800bb96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb9a:	e798      	b.n	800bace <_printf_float+0xae>
 800bb9c:	9a06      	ldr	r2, [sp, #24]
 800bb9e:	2a47      	cmp	r2, #71	; 0x47
 800bba0:	d1be      	bne.n	800bb20 <_printf_float+0x100>
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d1bc      	bne.n	800bb20 <_printf_float+0x100>
 800bba6:	2301      	movs	r3, #1
 800bba8:	e7b9      	b.n	800bb1e <_printf_float+0xfe>
 800bbaa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bbae:	d118      	bne.n	800bbe2 <_printf_float+0x1c2>
 800bbb0:	2900      	cmp	r1, #0
 800bbb2:	6863      	ldr	r3, [r4, #4]
 800bbb4:	dd0b      	ble.n	800bbce <_printf_float+0x1ae>
 800bbb6:	6121      	str	r1, [r4, #16]
 800bbb8:	b913      	cbnz	r3, 800bbc0 <_printf_float+0x1a0>
 800bbba:	6822      	ldr	r2, [r4, #0]
 800bbbc:	07d0      	lsls	r0, r2, #31
 800bbbe:	d502      	bpl.n	800bbc6 <_printf_float+0x1a6>
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	440b      	add	r3, r1
 800bbc4:	6123      	str	r3, [r4, #16]
 800bbc6:	65a1      	str	r1, [r4, #88]	; 0x58
 800bbc8:	f04f 0900 	mov.w	r9, #0
 800bbcc:	e7de      	b.n	800bb8c <_printf_float+0x16c>
 800bbce:	b913      	cbnz	r3, 800bbd6 <_printf_float+0x1b6>
 800bbd0:	6822      	ldr	r2, [r4, #0]
 800bbd2:	07d2      	lsls	r2, r2, #31
 800bbd4:	d501      	bpl.n	800bbda <_printf_float+0x1ba>
 800bbd6:	3302      	adds	r3, #2
 800bbd8:	e7f4      	b.n	800bbc4 <_printf_float+0x1a4>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e7f2      	b.n	800bbc4 <_printf_float+0x1a4>
 800bbde:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bbe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbe4:	4299      	cmp	r1, r3
 800bbe6:	db05      	blt.n	800bbf4 <_printf_float+0x1d4>
 800bbe8:	6823      	ldr	r3, [r4, #0]
 800bbea:	6121      	str	r1, [r4, #16]
 800bbec:	07d8      	lsls	r0, r3, #31
 800bbee:	d5ea      	bpl.n	800bbc6 <_printf_float+0x1a6>
 800bbf0:	1c4b      	adds	r3, r1, #1
 800bbf2:	e7e7      	b.n	800bbc4 <_printf_float+0x1a4>
 800bbf4:	2900      	cmp	r1, #0
 800bbf6:	bfd4      	ite	le
 800bbf8:	f1c1 0202 	rsble	r2, r1, #2
 800bbfc:	2201      	movgt	r2, #1
 800bbfe:	4413      	add	r3, r2
 800bc00:	e7e0      	b.n	800bbc4 <_printf_float+0x1a4>
 800bc02:	6823      	ldr	r3, [r4, #0]
 800bc04:	055a      	lsls	r2, r3, #21
 800bc06:	d407      	bmi.n	800bc18 <_printf_float+0x1f8>
 800bc08:	6923      	ldr	r3, [r4, #16]
 800bc0a:	4642      	mov	r2, r8
 800bc0c:	4631      	mov	r1, r6
 800bc0e:	4628      	mov	r0, r5
 800bc10:	47b8      	blx	r7
 800bc12:	3001      	adds	r0, #1
 800bc14:	d12c      	bne.n	800bc70 <_printf_float+0x250>
 800bc16:	e764      	b.n	800bae2 <_printf_float+0xc2>
 800bc18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bc1c:	f240 80e0 	bls.w	800bde0 <_printf_float+0x3c0>
 800bc20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc24:	2200      	movs	r2, #0
 800bc26:	2300      	movs	r3, #0
 800bc28:	f7f4 ff5e 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d034      	beq.n	800bc9a <_printf_float+0x27a>
 800bc30:	4a37      	ldr	r2, [pc, #220]	; (800bd10 <_printf_float+0x2f0>)
 800bc32:	2301      	movs	r3, #1
 800bc34:	4631      	mov	r1, r6
 800bc36:	4628      	mov	r0, r5
 800bc38:	47b8      	blx	r7
 800bc3a:	3001      	adds	r0, #1
 800bc3c:	f43f af51 	beq.w	800bae2 <_printf_float+0xc2>
 800bc40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc44:	429a      	cmp	r2, r3
 800bc46:	db02      	blt.n	800bc4e <_printf_float+0x22e>
 800bc48:	6823      	ldr	r3, [r4, #0]
 800bc4a:	07d8      	lsls	r0, r3, #31
 800bc4c:	d510      	bpl.n	800bc70 <_printf_float+0x250>
 800bc4e:	ee18 3a10 	vmov	r3, s16
 800bc52:	4652      	mov	r2, sl
 800bc54:	4631      	mov	r1, r6
 800bc56:	4628      	mov	r0, r5
 800bc58:	47b8      	blx	r7
 800bc5a:	3001      	adds	r0, #1
 800bc5c:	f43f af41 	beq.w	800bae2 <_printf_float+0xc2>
 800bc60:	f04f 0800 	mov.w	r8, #0
 800bc64:	f104 091a 	add.w	r9, r4, #26
 800bc68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	4543      	cmp	r3, r8
 800bc6e:	dc09      	bgt.n	800bc84 <_printf_float+0x264>
 800bc70:	6823      	ldr	r3, [r4, #0]
 800bc72:	079b      	lsls	r3, r3, #30
 800bc74:	f100 8105 	bmi.w	800be82 <_printf_float+0x462>
 800bc78:	68e0      	ldr	r0, [r4, #12]
 800bc7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc7c:	4298      	cmp	r0, r3
 800bc7e:	bfb8      	it	lt
 800bc80:	4618      	movlt	r0, r3
 800bc82:	e730      	b.n	800bae6 <_printf_float+0xc6>
 800bc84:	2301      	movs	r3, #1
 800bc86:	464a      	mov	r2, r9
 800bc88:	4631      	mov	r1, r6
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	47b8      	blx	r7
 800bc8e:	3001      	adds	r0, #1
 800bc90:	f43f af27 	beq.w	800bae2 <_printf_float+0xc2>
 800bc94:	f108 0801 	add.w	r8, r8, #1
 800bc98:	e7e6      	b.n	800bc68 <_printf_float+0x248>
 800bc9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	dc39      	bgt.n	800bd14 <_printf_float+0x2f4>
 800bca0:	4a1b      	ldr	r2, [pc, #108]	; (800bd10 <_printf_float+0x2f0>)
 800bca2:	2301      	movs	r3, #1
 800bca4:	4631      	mov	r1, r6
 800bca6:	4628      	mov	r0, r5
 800bca8:	47b8      	blx	r7
 800bcaa:	3001      	adds	r0, #1
 800bcac:	f43f af19 	beq.w	800bae2 <_printf_float+0xc2>
 800bcb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	d102      	bne.n	800bcbe <_printf_float+0x29e>
 800bcb8:	6823      	ldr	r3, [r4, #0]
 800bcba:	07d9      	lsls	r1, r3, #31
 800bcbc:	d5d8      	bpl.n	800bc70 <_printf_float+0x250>
 800bcbe:	ee18 3a10 	vmov	r3, s16
 800bcc2:	4652      	mov	r2, sl
 800bcc4:	4631      	mov	r1, r6
 800bcc6:	4628      	mov	r0, r5
 800bcc8:	47b8      	blx	r7
 800bcca:	3001      	adds	r0, #1
 800bccc:	f43f af09 	beq.w	800bae2 <_printf_float+0xc2>
 800bcd0:	f04f 0900 	mov.w	r9, #0
 800bcd4:	f104 0a1a 	add.w	sl, r4, #26
 800bcd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcda:	425b      	negs	r3, r3
 800bcdc:	454b      	cmp	r3, r9
 800bcde:	dc01      	bgt.n	800bce4 <_printf_float+0x2c4>
 800bce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bce2:	e792      	b.n	800bc0a <_printf_float+0x1ea>
 800bce4:	2301      	movs	r3, #1
 800bce6:	4652      	mov	r2, sl
 800bce8:	4631      	mov	r1, r6
 800bcea:	4628      	mov	r0, r5
 800bcec:	47b8      	blx	r7
 800bcee:	3001      	adds	r0, #1
 800bcf0:	f43f aef7 	beq.w	800bae2 <_printf_float+0xc2>
 800bcf4:	f109 0901 	add.w	r9, r9, #1
 800bcf8:	e7ee      	b.n	800bcd8 <_printf_float+0x2b8>
 800bcfa:	bf00      	nop
 800bcfc:	7fefffff 	.word	0x7fefffff
 800bd00:	080109ad 	.word	0x080109ad
 800bd04:	080109b1 	.word	0x080109b1
 800bd08:	080109b9 	.word	0x080109b9
 800bd0c:	080109b5 	.word	0x080109b5
 800bd10:	08010e60 	.word	0x08010e60
 800bd14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	bfa8      	it	ge
 800bd1c:	461a      	movge	r2, r3
 800bd1e:	2a00      	cmp	r2, #0
 800bd20:	4691      	mov	r9, r2
 800bd22:	dc37      	bgt.n	800bd94 <_printf_float+0x374>
 800bd24:	f04f 0b00 	mov.w	fp, #0
 800bd28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd2c:	f104 021a 	add.w	r2, r4, #26
 800bd30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd32:	9305      	str	r3, [sp, #20]
 800bd34:	eba3 0309 	sub.w	r3, r3, r9
 800bd38:	455b      	cmp	r3, fp
 800bd3a:	dc33      	bgt.n	800bda4 <_printf_float+0x384>
 800bd3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd40:	429a      	cmp	r2, r3
 800bd42:	db3b      	blt.n	800bdbc <_printf_float+0x39c>
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	07da      	lsls	r2, r3, #31
 800bd48:	d438      	bmi.n	800bdbc <_printf_float+0x39c>
 800bd4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd4c:	9a05      	ldr	r2, [sp, #20]
 800bd4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd50:	1a9a      	subs	r2, r3, r2
 800bd52:	eba3 0901 	sub.w	r9, r3, r1
 800bd56:	4591      	cmp	r9, r2
 800bd58:	bfa8      	it	ge
 800bd5a:	4691      	movge	r9, r2
 800bd5c:	f1b9 0f00 	cmp.w	r9, #0
 800bd60:	dc35      	bgt.n	800bdce <_printf_float+0x3ae>
 800bd62:	f04f 0800 	mov.w	r8, #0
 800bd66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd6a:	f104 0a1a 	add.w	sl, r4, #26
 800bd6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd72:	1a9b      	subs	r3, r3, r2
 800bd74:	eba3 0309 	sub.w	r3, r3, r9
 800bd78:	4543      	cmp	r3, r8
 800bd7a:	f77f af79 	ble.w	800bc70 <_printf_float+0x250>
 800bd7e:	2301      	movs	r3, #1
 800bd80:	4652      	mov	r2, sl
 800bd82:	4631      	mov	r1, r6
 800bd84:	4628      	mov	r0, r5
 800bd86:	47b8      	blx	r7
 800bd88:	3001      	adds	r0, #1
 800bd8a:	f43f aeaa 	beq.w	800bae2 <_printf_float+0xc2>
 800bd8e:	f108 0801 	add.w	r8, r8, #1
 800bd92:	e7ec      	b.n	800bd6e <_printf_float+0x34e>
 800bd94:	4613      	mov	r3, r2
 800bd96:	4631      	mov	r1, r6
 800bd98:	4642      	mov	r2, r8
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	47b8      	blx	r7
 800bd9e:	3001      	adds	r0, #1
 800bda0:	d1c0      	bne.n	800bd24 <_printf_float+0x304>
 800bda2:	e69e      	b.n	800bae2 <_printf_float+0xc2>
 800bda4:	2301      	movs	r3, #1
 800bda6:	4631      	mov	r1, r6
 800bda8:	4628      	mov	r0, r5
 800bdaa:	9205      	str	r2, [sp, #20]
 800bdac:	47b8      	blx	r7
 800bdae:	3001      	adds	r0, #1
 800bdb0:	f43f ae97 	beq.w	800bae2 <_printf_float+0xc2>
 800bdb4:	9a05      	ldr	r2, [sp, #20]
 800bdb6:	f10b 0b01 	add.w	fp, fp, #1
 800bdba:	e7b9      	b.n	800bd30 <_printf_float+0x310>
 800bdbc:	ee18 3a10 	vmov	r3, s16
 800bdc0:	4652      	mov	r2, sl
 800bdc2:	4631      	mov	r1, r6
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	47b8      	blx	r7
 800bdc8:	3001      	adds	r0, #1
 800bdca:	d1be      	bne.n	800bd4a <_printf_float+0x32a>
 800bdcc:	e689      	b.n	800bae2 <_printf_float+0xc2>
 800bdce:	9a05      	ldr	r2, [sp, #20]
 800bdd0:	464b      	mov	r3, r9
 800bdd2:	4442      	add	r2, r8
 800bdd4:	4631      	mov	r1, r6
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	47b8      	blx	r7
 800bdda:	3001      	adds	r0, #1
 800bddc:	d1c1      	bne.n	800bd62 <_printf_float+0x342>
 800bdde:	e680      	b.n	800bae2 <_printf_float+0xc2>
 800bde0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bde2:	2a01      	cmp	r2, #1
 800bde4:	dc01      	bgt.n	800bdea <_printf_float+0x3ca>
 800bde6:	07db      	lsls	r3, r3, #31
 800bde8:	d538      	bpl.n	800be5c <_printf_float+0x43c>
 800bdea:	2301      	movs	r3, #1
 800bdec:	4642      	mov	r2, r8
 800bdee:	4631      	mov	r1, r6
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	47b8      	blx	r7
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	f43f ae74 	beq.w	800bae2 <_printf_float+0xc2>
 800bdfa:	ee18 3a10 	vmov	r3, s16
 800bdfe:	4652      	mov	r2, sl
 800be00:	4631      	mov	r1, r6
 800be02:	4628      	mov	r0, r5
 800be04:	47b8      	blx	r7
 800be06:	3001      	adds	r0, #1
 800be08:	f43f ae6b 	beq.w	800bae2 <_printf_float+0xc2>
 800be0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be10:	2200      	movs	r2, #0
 800be12:	2300      	movs	r3, #0
 800be14:	f7f4 fe68 	bl	8000ae8 <__aeabi_dcmpeq>
 800be18:	b9d8      	cbnz	r0, 800be52 <_printf_float+0x432>
 800be1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be1c:	f108 0201 	add.w	r2, r8, #1
 800be20:	3b01      	subs	r3, #1
 800be22:	4631      	mov	r1, r6
 800be24:	4628      	mov	r0, r5
 800be26:	47b8      	blx	r7
 800be28:	3001      	adds	r0, #1
 800be2a:	d10e      	bne.n	800be4a <_printf_float+0x42a>
 800be2c:	e659      	b.n	800bae2 <_printf_float+0xc2>
 800be2e:	2301      	movs	r3, #1
 800be30:	4652      	mov	r2, sl
 800be32:	4631      	mov	r1, r6
 800be34:	4628      	mov	r0, r5
 800be36:	47b8      	blx	r7
 800be38:	3001      	adds	r0, #1
 800be3a:	f43f ae52 	beq.w	800bae2 <_printf_float+0xc2>
 800be3e:	f108 0801 	add.w	r8, r8, #1
 800be42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be44:	3b01      	subs	r3, #1
 800be46:	4543      	cmp	r3, r8
 800be48:	dcf1      	bgt.n	800be2e <_printf_float+0x40e>
 800be4a:	464b      	mov	r3, r9
 800be4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800be50:	e6dc      	b.n	800bc0c <_printf_float+0x1ec>
 800be52:	f04f 0800 	mov.w	r8, #0
 800be56:	f104 0a1a 	add.w	sl, r4, #26
 800be5a:	e7f2      	b.n	800be42 <_printf_float+0x422>
 800be5c:	2301      	movs	r3, #1
 800be5e:	4642      	mov	r2, r8
 800be60:	e7df      	b.n	800be22 <_printf_float+0x402>
 800be62:	2301      	movs	r3, #1
 800be64:	464a      	mov	r2, r9
 800be66:	4631      	mov	r1, r6
 800be68:	4628      	mov	r0, r5
 800be6a:	47b8      	blx	r7
 800be6c:	3001      	adds	r0, #1
 800be6e:	f43f ae38 	beq.w	800bae2 <_printf_float+0xc2>
 800be72:	f108 0801 	add.w	r8, r8, #1
 800be76:	68e3      	ldr	r3, [r4, #12]
 800be78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be7a:	1a5b      	subs	r3, r3, r1
 800be7c:	4543      	cmp	r3, r8
 800be7e:	dcf0      	bgt.n	800be62 <_printf_float+0x442>
 800be80:	e6fa      	b.n	800bc78 <_printf_float+0x258>
 800be82:	f04f 0800 	mov.w	r8, #0
 800be86:	f104 0919 	add.w	r9, r4, #25
 800be8a:	e7f4      	b.n	800be76 <_printf_float+0x456>

0800be8c <_printf_common>:
 800be8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be90:	4616      	mov	r6, r2
 800be92:	4699      	mov	r9, r3
 800be94:	688a      	ldr	r2, [r1, #8]
 800be96:	690b      	ldr	r3, [r1, #16]
 800be98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be9c:	4293      	cmp	r3, r2
 800be9e:	bfb8      	it	lt
 800bea0:	4613      	movlt	r3, r2
 800bea2:	6033      	str	r3, [r6, #0]
 800bea4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bea8:	4607      	mov	r7, r0
 800beaa:	460c      	mov	r4, r1
 800beac:	b10a      	cbz	r2, 800beb2 <_printf_common+0x26>
 800beae:	3301      	adds	r3, #1
 800beb0:	6033      	str	r3, [r6, #0]
 800beb2:	6823      	ldr	r3, [r4, #0]
 800beb4:	0699      	lsls	r1, r3, #26
 800beb6:	bf42      	ittt	mi
 800beb8:	6833      	ldrmi	r3, [r6, #0]
 800beba:	3302      	addmi	r3, #2
 800bebc:	6033      	strmi	r3, [r6, #0]
 800bebe:	6825      	ldr	r5, [r4, #0]
 800bec0:	f015 0506 	ands.w	r5, r5, #6
 800bec4:	d106      	bne.n	800bed4 <_printf_common+0x48>
 800bec6:	f104 0a19 	add.w	sl, r4, #25
 800beca:	68e3      	ldr	r3, [r4, #12]
 800becc:	6832      	ldr	r2, [r6, #0]
 800bece:	1a9b      	subs	r3, r3, r2
 800bed0:	42ab      	cmp	r3, r5
 800bed2:	dc26      	bgt.n	800bf22 <_printf_common+0x96>
 800bed4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bed8:	1e13      	subs	r3, r2, #0
 800beda:	6822      	ldr	r2, [r4, #0]
 800bedc:	bf18      	it	ne
 800bede:	2301      	movne	r3, #1
 800bee0:	0692      	lsls	r2, r2, #26
 800bee2:	d42b      	bmi.n	800bf3c <_printf_common+0xb0>
 800bee4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bee8:	4649      	mov	r1, r9
 800beea:	4638      	mov	r0, r7
 800beec:	47c0      	blx	r8
 800beee:	3001      	adds	r0, #1
 800bef0:	d01e      	beq.n	800bf30 <_printf_common+0xa4>
 800bef2:	6823      	ldr	r3, [r4, #0]
 800bef4:	68e5      	ldr	r5, [r4, #12]
 800bef6:	6832      	ldr	r2, [r6, #0]
 800bef8:	f003 0306 	and.w	r3, r3, #6
 800befc:	2b04      	cmp	r3, #4
 800befe:	bf08      	it	eq
 800bf00:	1aad      	subeq	r5, r5, r2
 800bf02:	68a3      	ldr	r3, [r4, #8]
 800bf04:	6922      	ldr	r2, [r4, #16]
 800bf06:	bf0c      	ite	eq
 800bf08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf0c:	2500      	movne	r5, #0
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	bfc4      	itt	gt
 800bf12:	1a9b      	subgt	r3, r3, r2
 800bf14:	18ed      	addgt	r5, r5, r3
 800bf16:	2600      	movs	r6, #0
 800bf18:	341a      	adds	r4, #26
 800bf1a:	42b5      	cmp	r5, r6
 800bf1c:	d11a      	bne.n	800bf54 <_printf_common+0xc8>
 800bf1e:	2000      	movs	r0, #0
 800bf20:	e008      	b.n	800bf34 <_printf_common+0xa8>
 800bf22:	2301      	movs	r3, #1
 800bf24:	4652      	mov	r2, sl
 800bf26:	4649      	mov	r1, r9
 800bf28:	4638      	mov	r0, r7
 800bf2a:	47c0      	blx	r8
 800bf2c:	3001      	adds	r0, #1
 800bf2e:	d103      	bne.n	800bf38 <_printf_common+0xac>
 800bf30:	f04f 30ff 	mov.w	r0, #4294967295
 800bf34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf38:	3501      	adds	r5, #1
 800bf3a:	e7c6      	b.n	800beca <_printf_common+0x3e>
 800bf3c:	18e1      	adds	r1, r4, r3
 800bf3e:	1c5a      	adds	r2, r3, #1
 800bf40:	2030      	movs	r0, #48	; 0x30
 800bf42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf46:	4422      	add	r2, r4
 800bf48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf50:	3302      	adds	r3, #2
 800bf52:	e7c7      	b.n	800bee4 <_printf_common+0x58>
 800bf54:	2301      	movs	r3, #1
 800bf56:	4622      	mov	r2, r4
 800bf58:	4649      	mov	r1, r9
 800bf5a:	4638      	mov	r0, r7
 800bf5c:	47c0      	blx	r8
 800bf5e:	3001      	adds	r0, #1
 800bf60:	d0e6      	beq.n	800bf30 <_printf_common+0xa4>
 800bf62:	3601      	adds	r6, #1
 800bf64:	e7d9      	b.n	800bf1a <_printf_common+0x8e>
	...

0800bf68 <_printf_i>:
 800bf68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf6c:	7e0f      	ldrb	r7, [r1, #24]
 800bf6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf70:	2f78      	cmp	r7, #120	; 0x78
 800bf72:	4691      	mov	r9, r2
 800bf74:	4680      	mov	r8, r0
 800bf76:	460c      	mov	r4, r1
 800bf78:	469a      	mov	sl, r3
 800bf7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf7e:	d807      	bhi.n	800bf90 <_printf_i+0x28>
 800bf80:	2f62      	cmp	r7, #98	; 0x62
 800bf82:	d80a      	bhi.n	800bf9a <_printf_i+0x32>
 800bf84:	2f00      	cmp	r7, #0
 800bf86:	f000 80d8 	beq.w	800c13a <_printf_i+0x1d2>
 800bf8a:	2f58      	cmp	r7, #88	; 0x58
 800bf8c:	f000 80a3 	beq.w	800c0d6 <_printf_i+0x16e>
 800bf90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf98:	e03a      	b.n	800c010 <_printf_i+0xa8>
 800bf9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf9e:	2b15      	cmp	r3, #21
 800bfa0:	d8f6      	bhi.n	800bf90 <_printf_i+0x28>
 800bfa2:	a101      	add	r1, pc, #4	; (adr r1, 800bfa8 <_printf_i+0x40>)
 800bfa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfa8:	0800c001 	.word	0x0800c001
 800bfac:	0800c015 	.word	0x0800c015
 800bfb0:	0800bf91 	.word	0x0800bf91
 800bfb4:	0800bf91 	.word	0x0800bf91
 800bfb8:	0800bf91 	.word	0x0800bf91
 800bfbc:	0800bf91 	.word	0x0800bf91
 800bfc0:	0800c015 	.word	0x0800c015
 800bfc4:	0800bf91 	.word	0x0800bf91
 800bfc8:	0800bf91 	.word	0x0800bf91
 800bfcc:	0800bf91 	.word	0x0800bf91
 800bfd0:	0800bf91 	.word	0x0800bf91
 800bfd4:	0800c121 	.word	0x0800c121
 800bfd8:	0800c045 	.word	0x0800c045
 800bfdc:	0800c103 	.word	0x0800c103
 800bfe0:	0800bf91 	.word	0x0800bf91
 800bfe4:	0800bf91 	.word	0x0800bf91
 800bfe8:	0800c143 	.word	0x0800c143
 800bfec:	0800bf91 	.word	0x0800bf91
 800bff0:	0800c045 	.word	0x0800c045
 800bff4:	0800bf91 	.word	0x0800bf91
 800bff8:	0800bf91 	.word	0x0800bf91
 800bffc:	0800c10b 	.word	0x0800c10b
 800c000:	682b      	ldr	r3, [r5, #0]
 800c002:	1d1a      	adds	r2, r3, #4
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	602a      	str	r2, [r5, #0]
 800c008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c00c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c010:	2301      	movs	r3, #1
 800c012:	e0a3      	b.n	800c15c <_printf_i+0x1f4>
 800c014:	6820      	ldr	r0, [r4, #0]
 800c016:	6829      	ldr	r1, [r5, #0]
 800c018:	0606      	lsls	r6, r0, #24
 800c01a:	f101 0304 	add.w	r3, r1, #4
 800c01e:	d50a      	bpl.n	800c036 <_printf_i+0xce>
 800c020:	680e      	ldr	r6, [r1, #0]
 800c022:	602b      	str	r3, [r5, #0]
 800c024:	2e00      	cmp	r6, #0
 800c026:	da03      	bge.n	800c030 <_printf_i+0xc8>
 800c028:	232d      	movs	r3, #45	; 0x2d
 800c02a:	4276      	negs	r6, r6
 800c02c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c030:	485e      	ldr	r0, [pc, #376]	; (800c1ac <_printf_i+0x244>)
 800c032:	230a      	movs	r3, #10
 800c034:	e019      	b.n	800c06a <_printf_i+0x102>
 800c036:	680e      	ldr	r6, [r1, #0]
 800c038:	602b      	str	r3, [r5, #0]
 800c03a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c03e:	bf18      	it	ne
 800c040:	b236      	sxthne	r6, r6
 800c042:	e7ef      	b.n	800c024 <_printf_i+0xbc>
 800c044:	682b      	ldr	r3, [r5, #0]
 800c046:	6820      	ldr	r0, [r4, #0]
 800c048:	1d19      	adds	r1, r3, #4
 800c04a:	6029      	str	r1, [r5, #0]
 800c04c:	0601      	lsls	r1, r0, #24
 800c04e:	d501      	bpl.n	800c054 <_printf_i+0xec>
 800c050:	681e      	ldr	r6, [r3, #0]
 800c052:	e002      	b.n	800c05a <_printf_i+0xf2>
 800c054:	0646      	lsls	r6, r0, #25
 800c056:	d5fb      	bpl.n	800c050 <_printf_i+0xe8>
 800c058:	881e      	ldrh	r6, [r3, #0]
 800c05a:	4854      	ldr	r0, [pc, #336]	; (800c1ac <_printf_i+0x244>)
 800c05c:	2f6f      	cmp	r7, #111	; 0x6f
 800c05e:	bf0c      	ite	eq
 800c060:	2308      	moveq	r3, #8
 800c062:	230a      	movne	r3, #10
 800c064:	2100      	movs	r1, #0
 800c066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c06a:	6865      	ldr	r5, [r4, #4]
 800c06c:	60a5      	str	r5, [r4, #8]
 800c06e:	2d00      	cmp	r5, #0
 800c070:	bfa2      	ittt	ge
 800c072:	6821      	ldrge	r1, [r4, #0]
 800c074:	f021 0104 	bicge.w	r1, r1, #4
 800c078:	6021      	strge	r1, [r4, #0]
 800c07a:	b90e      	cbnz	r6, 800c080 <_printf_i+0x118>
 800c07c:	2d00      	cmp	r5, #0
 800c07e:	d04d      	beq.n	800c11c <_printf_i+0x1b4>
 800c080:	4615      	mov	r5, r2
 800c082:	fbb6 f1f3 	udiv	r1, r6, r3
 800c086:	fb03 6711 	mls	r7, r3, r1, r6
 800c08a:	5dc7      	ldrb	r7, [r0, r7]
 800c08c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c090:	4637      	mov	r7, r6
 800c092:	42bb      	cmp	r3, r7
 800c094:	460e      	mov	r6, r1
 800c096:	d9f4      	bls.n	800c082 <_printf_i+0x11a>
 800c098:	2b08      	cmp	r3, #8
 800c09a:	d10b      	bne.n	800c0b4 <_printf_i+0x14c>
 800c09c:	6823      	ldr	r3, [r4, #0]
 800c09e:	07de      	lsls	r6, r3, #31
 800c0a0:	d508      	bpl.n	800c0b4 <_printf_i+0x14c>
 800c0a2:	6923      	ldr	r3, [r4, #16]
 800c0a4:	6861      	ldr	r1, [r4, #4]
 800c0a6:	4299      	cmp	r1, r3
 800c0a8:	bfde      	ittt	le
 800c0aa:	2330      	movle	r3, #48	; 0x30
 800c0ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c0b4:	1b52      	subs	r2, r2, r5
 800c0b6:	6122      	str	r2, [r4, #16]
 800c0b8:	f8cd a000 	str.w	sl, [sp]
 800c0bc:	464b      	mov	r3, r9
 800c0be:	aa03      	add	r2, sp, #12
 800c0c0:	4621      	mov	r1, r4
 800c0c2:	4640      	mov	r0, r8
 800c0c4:	f7ff fee2 	bl	800be8c <_printf_common>
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	d14c      	bne.n	800c166 <_printf_i+0x1fe>
 800c0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d0:	b004      	add	sp, #16
 800c0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0d6:	4835      	ldr	r0, [pc, #212]	; (800c1ac <_printf_i+0x244>)
 800c0d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c0dc:	6829      	ldr	r1, [r5, #0]
 800c0de:	6823      	ldr	r3, [r4, #0]
 800c0e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c0e4:	6029      	str	r1, [r5, #0]
 800c0e6:	061d      	lsls	r5, r3, #24
 800c0e8:	d514      	bpl.n	800c114 <_printf_i+0x1ac>
 800c0ea:	07df      	lsls	r7, r3, #31
 800c0ec:	bf44      	itt	mi
 800c0ee:	f043 0320 	orrmi.w	r3, r3, #32
 800c0f2:	6023      	strmi	r3, [r4, #0]
 800c0f4:	b91e      	cbnz	r6, 800c0fe <_printf_i+0x196>
 800c0f6:	6823      	ldr	r3, [r4, #0]
 800c0f8:	f023 0320 	bic.w	r3, r3, #32
 800c0fc:	6023      	str	r3, [r4, #0]
 800c0fe:	2310      	movs	r3, #16
 800c100:	e7b0      	b.n	800c064 <_printf_i+0xfc>
 800c102:	6823      	ldr	r3, [r4, #0]
 800c104:	f043 0320 	orr.w	r3, r3, #32
 800c108:	6023      	str	r3, [r4, #0]
 800c10a:	2378      	movs	r3, #120	; 0x78
 800c10c:	4828      	ldr	r0, [pc, #160]	; (800c1b0 <_printf_i+0x248>)
 800c10e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c112:	e7e3      	b.n	800c0dc <_printf_i+0x174>
 800c114:	0659      	lsls	r1, r3, #25
 800c116:	bf48      	it	mi
 800c118:	b2b6      	uxthmi	r6, r6
 800c11a:	e7e6      	b.n	800c0ea <_printf_i+0x182>
 800c11c:	4615      	mov	r5, r2
 800c11e:	e7bb      	b.n	800c098 <_printf_i+0x130>
 800c120:	682b      	ldr	r3, [r5, #0]
 800c122:	6826      	ldr	r6, [r4, #0]
 800c124:	6961      	ldr	r1, [r4, #20]
 800c126:	1d18      	adds	r0, r3, #4
 800c128:	6028      	str	r0, [r5, #0]
 800c12a:	0635      	lsls	r5, r6, #24
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	d501      	bpl.n	800c134 <_printf_i+0x1cc>
 800c130:	6019      	str	r1, [r3, #0]
 800c132:	e002      	b.n	800c13a <_printf_i+0x1d2>
 800c134:	0670      	lsls	r0, r6, #25
 800c136:	d5fb      	bpl.n	800c130 <_printf_i+0x1c8>
 800c138:	8019      	strh	r1, [r3, #0]
 800c13a:	2300      	movs	r3, #0
 800c13c:	6123      	str	r3, [r4, #16]
 800c13e:	4615      	mov	r5, r2
 800c140:	e7ba      	b.n	800c0b8 <_printf_i+0x150>
 800c142:	682b      	ldr	r3, [r5, #0]
 800c144:	1d1a      	adds	r2, r3, #4
 800c146:	602a      	str	r2, [r5, #0]
 800c148:	681d      	ldr	r5, [r3, #0]
 800c14a:	6862      	ldr	r2, [r4, #4]
 800c14c:	2100      	movs	r1, #0
 800c14e:	4628      	mov	r0, r5
 800c150:	f7f4 f856 	bl	8000200 <memchr>
 800c154:	b108      	cbz	r0, 800c15a <_printf_i+0x1f2>
 800c156:	1b40      	subs	r0, r0, r5
 800c158:	6060      	str	r0, [r4, #4]
 800c15a:	6863      	ldr	r3, [r4, #4]
 800c15c:	6123      	str	r3, [r4, #16]
 800c15e:	2300      	movs	r3, #0
 800c160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c164:	e7a8      	b.n	800c0b8 <_printf_i+0x150>
 800c166:	6923      	ldr	r3, [r4, #16]
 800c168:	462a      	mov	r2, r5
 800c16a:	4649      	mov	r1, r9
 800c16c:	4640      	mov	r0, r8
 800c16e:	47d0      	blx	sl
 800c170:	3001      	adds	r0, #1
 800c172:	d0ab      	beq.n	800c0cc <_printf_i+0x164>
 800c174:	6823      	ldr	r3, [r4, #0]
 800c176:	079b      	lsls	r3, r3, #30
 800c178:	d413      	bmi.n	800c1a2 <_printf_i+0x23a>
 800c17a:	68e0      	ldr	r0, [r4, #12]
 800c17c:	9b03      	ldr	r3, [sp, #12]
 800c17e:	4298      	cmp	r0, r3
 800c180:	bfb8      	it	lt
 800c182:	4618      	movlt	r0, r3
 800c184:	e7a4      	b.n	800c0d0 <_printf_i+0x168>
 800c186:	2301      	movs	r3, #1
 800c188:	4632      	mov	r2, r6
 800c18a:	4649      	mov	r1, r9
 800c18c:	4640      	mov	r0, r8
 800c18e:	47d0      	blx	sl
 800c190:	3001      	adds	r0, #1
 800c192:	d09b      	beq.n	800c0cc <_printf_i+0x164>
 800c194:	3501      	adds	r5, #1
 800c196:	68e3      	ldr	r3, [r4, #12]
 800c198:	9903      	ldr	r1, [sp, #12]
 800c19a:	1a5b      	subs	r3, r3, r1
 800c19c:	42ab      	cmp	r3, r5
 800c19e:	dcf2      	bgt.n	800c186 <_printf_i+0x21e>
 800c1a0:	e7eb      	b.n	800c17a <_printf_i+0x212>
 800c1a2:	2500      	movs	r5, #0
 800c1a4:	f104 0619 	add.w	r6, r4, #25
 800c1a8:	e7f5      	b.n	800c196 <_printf_i+0x22e>
 800c1aa:	bf00      	nop
 800c1ac:	080109bd 	.word	0x080109bd
 800c1b0:	080109ce 	.word	0x080109ce

0800c1b4 <_scanf_float>:
 800c1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b8:	b087      	sub	sp, #28
 800c1ba:	4617      	mov	r7, r2
 800c1bc:	9303      	str	r3, [sp, #12]
 800c1be:	688b      	ldr	r3, [r1, #8]
 800c1c0:	1e5a      	subs	r2, r3, #1
 800c1c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c1c6:	bf83      	ittte	hi
 800c1c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c1cc:	195b      	addhi	r3, r3, r5
 800c1ce:	9302      	strhi	r3, [sp, #8]
 800c1d0:	2300      	movls	r3, #0
 800c1d2:	bf86      	itte	hi
 800c1d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c1d8:	608b      	strhi	r3, [r1, #8]
 800c1da:	9302      	strls	r3, [sp, #8]
 800c1dc:	680b      	ldr	r3, [r1, #0]
 800c1de:	468b      	mov	fp, r1
 800c1e0:	2500      	movs	r5, #0
 800c1e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c1e6:	f84b 3b1c 	str.w	r3, [fp], #28
 800c1ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c1ee:	4680      	mov	r8, r0
 800c1f0:	460c      	mov	r4, r1
 800c1f2:	465e      	mov	r6, fp
 800c1f4:	46aa      	mov	sl, r5
 800c1f6:	46a9      	mov	r9, r5
 800c1f8:	9501      	str	r5, [sp, #4]
 800c1fa:	68a2      	ldr	r2, [r4, #8]
 800c1fc:	b152      	cbz	r2, 800c214 <_scanf_float+0x60>
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	2b4e      	cmp	r3, #78	; 0x4e
 800c204:	d864      	bhi.n	800c2d0 <_scanf_float+0x11c>
 800c206:	2b40      	cmp	r3, #64	; 0x40
 800c208:	d83c      	bhi.n	800c284 <_scanf_float+0xd0>
 800c20a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c20e:	b2c8      	uxtb	r0, r1
 800c210:	280e      	cmp	r0, #14
 800c212:	d93a      	bls.n	800c28a <_scanf_float+0xd6>
 800c214:	f1b9 0f00 	cmp.w	r9, #0
 800c218:	d003      	beq.n	800c222 <_scanf_float+0x6e>
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c220:	6023      	str	r3, [r4, #0]
 800c222:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c226:	f1ba 0f01 	cmp.w	sl, #1
 800c22a:	f200 8113 	bhi.w	800c454 <_scanf_float+0x2a0>
 800c22e:	455e      	cmp	r6, fp
 800c230:	f200 8105 	bhi.w	800c43e <_scanf_float+0x28a>
 800c234:	2501      	movs	r5, #1
 800c236:	4628      	mov	r0, r5
 800c238:	b007      	add	sp, #28
 800c23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c23e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c242:	2a0d      	cmp	r2, #13
 800c244:	d8e6      	bhi.n	800c214 <_scanf_float+0x60>
 800c246:	a101      	add	r1, pc, #4	; (adr r1, 800c24c <_scanf_float+0x98>)
 800c248:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c24c:	0800c38b 	.word	0x0800c38b
 800c250:	0800c215 	.word	0x0800c215
 800c254:	0800c215 	.word	0x0800c215
 800c258:	0800c215 	.word	0x0800c215
 800c25c:	0800c3eb 	.word	0x0800c3eb
 800c260:	0800c3c3 	.word	0x0800c3c3
 800c264:	0800c215 	.word	0x0800c215
 800c268:	0800c215 	.word	0x0800c215
 800c26c:	0800c399 	.word	0x0800c399
 800c270:	0800c215 	.word	0x0800c215
 800c274:	0800c215 	.word	0x0800c215
 800c278:	0800c215 	.word	0x0800c215
 800c27c:	0800c215 	.word	0x0800c215
 800c280:	0800c351 	.word	0x0800c351
 800c284:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c288:	e7db      	b.n	800c242 <_scanf_float+0x8e>
 800c28a:	290e      	cmp	r1, #14
 800c28c:	d8c2      	bhi.n	800c214 <_scanf_float+0x60>
 800c28e:	a001      	add	r0, pc, #4	; (adr r0, 800c294 <_scanf_float+0xe0>)
 800c290:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c294:	0800c343 	.word	0x0800c343
 800c298:	0800c215 	.word	0x0800c215
 800c29c:	0800c343 	.word	0x0800c343
 800c2a0:	0800c3d7 	.word	0x0800c3d7
 800c2a4:	0800c215 	.word	0x0800c215
 800c2a8:	0800c2f1 	.word	0x0800c2f1
 800c2ac:	0800c32d 	.word	0x0800c32d
 800c2b0:	0800c32d 	.word	0x0800c32d
 800c2b4:	0800c32d 	.word	0x0800c32d
 800c2b8:	0800c32d 	.word	0x0800c32d
 800c2bc:	0800c32d 	.word	0x0800c32d
 800c2c0:	0800c32d 	.word	0x0800c32d
 800c2c4:	0800c32d 	.word	0x0800c32d
 800c2c8:	0800c32d 	.word	0x0800c32d
 800c2cc:	0800c32d 	.word	0x0800c32d
 800c2d0:	2b6e      	cmp	r3, #110	; 0x6e
 800c2d2:	d809      	bhi.n	800c2e8 <_scanf_float+0x134>
 800c2d4:	2b60      	cmp	r3, #96	; 0x60
 800c2d6:	d8b2      	bhi.n	800c23e <_scanf_float+0x8a>
 800c2d8:	2b54      	cmp	r3, #84	; 0x54
 800c2da:	d077      	beq.n	800c3cc <_scanf_float+0x218>
 800c2dc:	2b59      	cmp	r3, #89	; 0x59
 800c2de:	d199      	bne.n	800c214 <_scanf_float+0x60>
 800c2e0:	2d07      	cmp	r5, #7
 800c2e2:	d197      	bne.n	800c214 <_scanf_float+0x60>
 800c2e4:	2508      	movs	r5, #8
 800c2e6:	e029      	b.n	800c33c <_scanf_float+0x188>
 800c2e8:	2b74      	cmp	r3, #116	; 0x74
 800c2ea:	d06f      	beq.n	800c3cc <_scanf_float+0x218>
 800c2ec:	2b79      	cmp	r3, #121	; 0x79
 800c2ee:	e7f6      	b.n	800c2de <_scanf_float+0x12a>
 800c2f0:	6821      	ldr	r1, [r4, #0]
 800c2f2:	05c8      	lsls	r0, r1, #23
 800c2f4:	d51a      	bpl.n	800c32c <_scanf_float+0x178>
 800c2f6:	9b02      	ldr	r3, [sp, #8]
 800c2f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c2fc:	6021      	str	r1, [r4, #0]
 800c2fe:	f109 0901 	add.w	r9, r9, #1
 800c302:	b11b      	cbz	r3, 800c30c <_scanf_float+0x158>
 800c304:	3b01      	subs	r3, #1
 800c306:	3201      	adds	r2, #1
 800c308:	9302      	str	r3, [sp, #8]
 800c30a:	60a2      	str	r2, [r4, #8]
 800c30c:	68a3      	ldr	r3, [r4, #8]
 800c30e:	3b01      	subs	r3, #1
 800c310:	60a3      	str	r3, [r4, #8]
 800c312:	6923      	ldr	r3, [r4, #16]
 800c314:	3301      	adds	r3, #1
 800c316:	6123      	str	r3, [r4, #16]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	3b01      	subs	r3, #1
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	607b      	str	r3, [r7, #4]
 800c320:	f340 8084 	ble.w	800c42c <_scanf_float+0x278>
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	3301      	adds	r3, #1
 800c328:	603b      	str	r3, [r7, #0]
 800c32a:	e766      	b.n	800c1fa <_scanf_float+0x46>
 800c32c:	eb1a 0f05 	cmn.w	sl, r5
 800c330:	f47f af70 	bne.w	800c214 <_scanf_float+0x60>
 800c334:	6822      	ldr	r2, [r4, #0]
 800c336:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c33a:	6022      	str	r2, [r4, #0]
 800c33c:	f806 3b01 	strb.w	r3, [r6], #1
 800c340:	e7e4      	b.n	800c30c <_scanf_float+0x158>
 800c342:	6822      	ldr	r2, [r4, #0]
 800c344:	0610      	lsls	r0, r2, #24
 800c346:	f57f af65 	bpl.w	800c214 <_scanf_float+0x60>
 800c34a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c34e:	e7f4      	b.n	800c33a <_scanf_float+0x186>
 800c350:	f1ba 0f00 	cmp.w	sl, #0
 800c354:	d10e      	bne.n	800c374 <_scanf_float+0x1c0>
 800c356:	f1b9 0f00 	cmp.w	r9, #0
 800c35a:	d10e      	bne.n	800c37a <_scanf_float+0x1c6>
 800c35c:	6822      	ldr	r2, [r4, #0]
 800c35e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c362:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c366:	d108      	bne.n	800c37a <_scanf_float+0x1c6>
 800c368:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c36c:	6022      	str	r2, [r4, #0]
 800c36e:	f04f 0a01 	mov.w	sl, #1
 800c372:	e7e3      	b.n	800c33c <_scanf_float+0x188>
 800c374:	f1ba 0f02 	cmp.w	sl, #2
 800c378:	d055      	beq.n	800c426 <_scanf_float+0x272>
 800c37a:	2d01      	cmp	r5, #1
 800c37c:	d002      	beq.n	800c384 <_scanf_float+0x1d0>
 800c37e:	2d04      	cmp	r5, #4
 800c380:	f47f af48 	bne.w	800c214 <_scanf_float+0x60>
 800c384:	3501      	adds	r5, #1
 800c386:	b2ed      	uxtb	r5, r5
 800c388:	e7d8      	b.n	800c33c <_scanf_float+0x188>
 800c38a:	f1ba 0f01 	cmp.w	sl, #1
 800c38e:	f47f af41 	bne.w	800c214 <_scanf_float+0x60>
 800c392:	f04f 0a02 	mov.w	sl, #2
 800c396:	e7d1      	b.n	800c33c <_scanf_float+0x188>
 800c398:	b97d      	cbnz	r5, 800c3ba <_scanf_float+0x206>
 800c39a:	f1b9 0f00 	cmp.w	r9, #0
 800c39e:	f47f af3c 	bne.w	800c21a <_scanf_float+0x66>
 800c3a2:	6822      	ldr	r2, [r4, #0]
 800c3a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c3a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c3ac:	f47f af39 	bne.w	800c222 <_scanf_float+0x6e>
 800c3b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c3b4:	6022      	str	r2, [r4, #0]
 800c3b6:	2501      	movs	r5, #1
 800c3b8:	e7c0      	b.n	800c33c <_scanf_float+0x188>
 800c3ba:	2d03      	cmp	r5, #3
 800c3bc:	d0e2      	beq.n	800c384 <_scanf_float+0x1d0>
 800c3be:	2d05      	cmp	r5, #5
 800c3c0:	e7de      	b.n	800c380 <_scanf_float+0x1cc>
 800c3c2:	2d02      	cmp	r5, #2
 800c3c4:	f47f af26 	bne.w	800c214 <_scanf_float+0x60>
 800c3c8:	2503      	movs	r5, #3
 800c3ca:	e7b7      	b.n	800c33c <_scanf_float+0x188>
 800c3cc:	2d06      	cmp	r5, #6
 800c3ce:	f47f af21 	bne.w	800c214 <_scanf_float+0x60>
 800c3d2:	2507      	movs	r5, #7
 800c3d4:	e7b2      	b.n	800c33c <_scanf_float+0x188>
 800c3d6:	6822      	ldr	r2, [r4, #0]
 800c3d8:	0591      	lsls	r1, r2, #22
 800c3da:	f57f af1b 	bpl.w	800c214 <_scanf_float+0x60>
 800c3de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c3e2:	6022      	str	r2, [r4, #0]
 800c3e4:	f8cd 9004 	str.w	r9, [sp, #4]
 800c3e8:	e7a8      	b.n	800c33c <_scanf_float+0x188>
 800c3ea:	6822      	ldr	r2, [r4, #0]
 800c3ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c3f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c3f4:	d006      	beq.n	800c404 <_scanf_float+0x250>
 800c3f6:	0550      	lsls	r0, r2, #21
 800c3f8:	f57f af0c 	bpl.w	800c214 <_scanf_float+0x60>
 800c3fc:	f1b9 0f00 	cmp.w	r9, #0
 800c400:	f43f af0f 	beq.w	800c222 <_scanf_float+0x6e>
 800c404:	0591      	lsls	r1, r2, #22
 800c406:	bf58      	it	pl
 800c408:	9901      	ldrpl	r1, [sp, #4]
 800c40a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c40e:	bf58      	it	pl
 800c410:	eba9 0101 	subpl.w	r1, r9, r1
 800c414:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c418:	bf58      	it	pl
 800c41a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c41e:	6022      	str	r2, [r4, #0]
 800c420:	f04f 0900 	mov.w	r9, #0
 800c424:	e78a      	b.n	800c33c <_scanf_float+0x188>
 800c426:	f04f 0a03 	mov.w	sl, #3
 800c42a:	e787      	b.n	800c33c <_scanf_float+0x188>
 800c42c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c430:	4639      	mov	r1, r7
 800c432:	4640      	mov	r0, r8
 800c434:	4798      	blx	r3
 800c436:	2800      	cmp	r0, #0
 800c438:	f43f aedf 	beq.w	800c1fa <_scanf_float+0x46>
 800c43c:	e6ea      	b.n	800c214 <_scanf_float+0x60>
 800c43e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c442:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c446:	463a      	mov	r2, r7
 800c448:	4640      	mov	r0, r8
 800c44a:	4798      	blx	r3
 800c44c:	6923      	ldr	r3, [r4, #16]
 800c44e:	3b01      	subs	r3, #1
 800c450:	6123      	str	r3, [r4, #16]
 800c452:	e6ec      	b.n	800c22e <_scanf_float+0x7a>
 800c454:	1e6b      	subs	r3, r5, #1
 800c456:	2b06      	cmp	r3, #6
 800c458:	d825      	bhi.n	800c4a6 <_scanf_float+0x2f2>
 800c45a:	2d02      	cmp	r5, #2
 800c45c:	d836      	bhi.n	800c4cc <_scanf_float+0x318>
 800c45e:	455e      	cmp	r6, fp
 800c460:	f67f aee8 	bls.w	800c234 <_scanf_float+0x80>
 800c464:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c468:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c46c:	463a      	mov	r2, r7
 800c46e:	4640      	mov	r0, r8
 800c470:	4798      	blx	r3
 800c472:	6923      	ldr	r3, [r4, #16]
 800c474:	3b01      	subs	r3, #1
 800c476:	6123      	str	r3, [r4, #16]
 800c478:	e7f1      	b.n	800c45e <_scanf_float+0x2aa>
 800c47a:	9802      	ldr	r0, [sp, #8]
 800c47c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c480:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c484:	9002      	str	r0, [sp, #8]
 800c486:	463a      	mov	r2, r7
 800c488:	4640      	mov	r0, r8
 800c48a:	4798      	blx	r3
 800c48c:	6923      	ldr	r3, [r4, #16]
 800c48e:	3b01      	subs	r3, #1
 800c490:	6123      	str	r3, [r4, #16]
 800c492:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c496:	fa5f fa8a 	uxtb.w	sl, sl
 800c49a:	f1ba 0f02 	cmp.w	sl, #2
 800c49e:	d1ec      	bne.n	800c47a <_scanf_float+0x2c6>
 800c4a0:	3d03      	subs	r5, #3
 800c4a2:	b2ed      	uxtb	r5, r5
 800c4a4:	1b76      	subs	r6, r6, r5
 800c4a6:	6823      	ldr	r3, [r4, #0]
 800c4a8:	05da      	lsls	r2, r3, #23
 800c4aa:	d52f      	bpl.n	800c50c <_scanf_float+0x358>
 800c4ac:	055b      	lsls	r3, r3, #21
 800c4ae:	d510      	bpl.n	800c4d2 <_scanf_float+0x31e>
 800c4b0:	455e      	cmp	r6, fp
 800c4b2:	f67f aebf 	bls.w	800c234 <_scanf_float+0x80>
 800c4b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c4ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c4be:	463a      	mov	r2, r7
 800c4c0:	4640      	mov	r0, r8
 800c4c2:	4798      	blx	r3
 800c4c4:	6923      	ldr	r3, [r4, #16]
 800c4c6:	3b01      	subs	r3, #1
 800c4c8:	6123      	str	r3, [r4, #16]
 800c4ca:	e7f1      	b.n	800c4b0 <_scanf_float+0x2fc>
 800c4cc:	46aa      	mov	sl, r5
 800c4ce:	9602      	str	r6, [sp, #8]
 800c4d0:	e7df      	b.n	800c492 <_scanf_float+0x2de>
 800c4d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c4d6:	6923      	ldr	r3, [r4, #16]
 800c4d8:	2965      	cmp	r1, #101	; 0x65
 800c4da:	f103 33ff 	add.w	r3, r3, #4294967295
 800c4de:	f106 35ff 	add.w	r5, r6, #4294967295
 800c4e2:	6123      	str	r3, [r4, #16]
 800c4e4:	d00c      	beq.n	800c500 <_scanf_float+0x34c>
 800c4e6:	2945      	cmp	r1, #69	; 0x45
 800c4e8:	d00a      	beq.n	800c500 <_scanf_float+0x34c>
 800c4ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c4ee:	463a      	mov	r2, r7
 800c4f0:	4640      	mov	r0, r8
 800c4f2:	4798      	blx	r3
 800c4f4:	6923      	ldr	r3, [r4, #16]
 800c4f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c4fa:	3b01      	subs	r3, #1
 800c4fc:	1eb5      	subs	r5, r6, #2
 800c4fe:	6123      	str	r3, [r4, #16]
 800c500:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c504:	463a      	mov	r2, r7
 800c506:	4640      	mov	r0, r8
 800c508:	4798      	blx	r3
 800c50a:	462e      	mov	r6, r5
 800c50c:	6825      	ldr	r5, [r4, #0]
 800c50e:	f015 0510 	ands.w	r5, r5, #16
 800c512:	d159      	bne.n	800c5c8 <_scanf_float+0x414>
 800c514:	7035      	strb	r5, [r6, #0]
 800c516:	6823      	ldr	r3, [r4, #0]
 800c518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c51c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c520:	d11b      	bne.n	800c55a <_scanf_float+0x3a6>
 800c522:	9b01      	ldr	r3, [sp, #4]
 800c524:	454b      	cmp	r3, r9
 800c526:	eba3 0209 	sub.w	r2, r3, r9
 800c52a:	d123      	bne.n	800c574 <_scanf_float+0x3c0>
 800c52c:	2200      	movs	r2, #0
 800c52e:	4659      	mov	r1, fp
 800c530:	4640      	mov	r0, r8
 800c532:	f000 ff4f 	bl	800d3d4 <_strtod_r>
 800c536:	6822      	ldr	r2, [r4, #0]
 800c538:	9b03      	ldr	r3, [sp, #12]
 800c53a:	f012 0f02 	tst.w	r2, #2
 800c53e:	ec57 6b10 	vmov	r6, r7, d0
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	d021      	beq.n	800c58a <_scanf_float+0x3d6>
 800c546:	9903      	ldr	r1, [sp, #12]
 800c548:	1d1a      	adds	r2, r3, #4
 800c54a:	600a      	str	r2, [r1, #0]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	e9c3 6700 	strd	r6, r7, [r3]
 800c552:	68e3      	ldr	r3, [r4, #12]
 800c554:	3301      	adds	r3, #1
 800c556:	60e3      	str	r3, [r4, #12]
 800c558:	e66d      	b.n	800c236 <_scanf_float+0x82>
 800c55a:	9b04      	ldr	r3, [sp, #16]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d0e5      	beq.n	800c52c <_scanf_float+0x378>
 800c560:	9905      	ldr	r1, [sp, #20]
 800c562:	230a      	movs	r3, #10
 800c564:	462a      	mov	r2, r5
 800c566:	3101      	adds	r1, #1
 800c568:	4640      	mov	r0, r8
 800c56a:	f001 f817 	bl	800d59c <_strtol_r>
 800c56e:	9b04      	ldr	r3, [sp, #16]
 800c570:	9e05      	ldr	r6, [sp, #20]
 800c572:	1ac2      	subs	r2, r0, r3
 800c574:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c578:	429e      	cmp	r6, r3
 800c57a:	bf28      	it	cs
 800c57c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c580:	4912      	ldr	r1, [pc, #72]	; (800c5cc <_scanf_float+0x418>)
 800c582:	4630      	mov	r0, r6
 800c584:	f000 f852 	bl	800c62c <siprintf>
 800c588:	e7d0      	b.n	800c52c <_scanf_float+0x378>
 800c58a:	9903      	ldr	r1, [sp, #12]
 800c58c:	f012 0f04 	tst.w	r2, #4
 800c590:	f103 0204 	add.w	r2, r3, #4
 800c594:	600a      	str	r2, [r1, #0]
 800c596:	d1d9      	bne.n	800c54c <_scanf_float+0x398>
 800c598:	f8d3 8000 	ldr.w	r8, [r3]
 800c59c:	ee10 2a10 	vmov	r2, s0
 800c5a0:	ee10 0a10 	vmov	r0, s0
 800c5a4:	463b      	mov	r3, r7
 800c5a6:	4639      	mov	r1, r7
 800c5a8:	f7f4 fad0 	bl	8000b4c <__aeabi_dcmpun>
 800c5ac:	b128      	cbz	r0, 800c5ba <_scanf_float+0x406>
 800c5ae:	4808      	ldr	r0, [pc, #32]	; (800c5d0 <_scanf_float+0x41c>)
 800c5b0:	f000 f836 	bl	800c620 <nanf>
 800c5b4:	ed88 0a00 	vstr	s0, [r8]
 800c5b8:	e7cb      	b.n	800c552 <_scanf_float+0x39e>
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	4639      	mov	r1, r7
 800c5be:	f7f4 fb23 	bl	8000c08 <__aeabi_d2f>
 800c5c2:	f8c8 0000 	str.w	r0, [r8]
 800c5c6:	e7c4      	b.n	800c552 <_scanf_float+0x39e>
 800c5c8:	2500      	movs	r5, #0
 800c5ca:	e634      	b.n	800c236 <_scanf_float+0x82>
 800c5cc:	080109df 	.word	0x080109df
 800c5d0:	08010997 	.word	0x08010997

0800c5d4 <putchar>:
 800c5d4:	4b09      	ldr	r3, [pc, #36]	; (800c5fc <putchar+0x28>)
 800c5d6:	b513      	push	{r0, r1, r4, lr}
 800c5d8:	681c      	ldr	r4, [r3, #0]
 800c5da:	4601      	mov	r1, r0
 800c5dc:	b134      	cbz	r4, 800c5ec <putchar+0x18>
 800c5de:	69a3      	ldr	r3, [r4, #24]
 800c5e0:	b923      	cbnz	r3, 800c5ec <putchar+0x18>
 800c5e2:	9001      	str	r0, [sp, #4]
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	f002 f85b 	bl	800e6a0 <__sinit>
 800c5ea:	9901      	ldr	r1, [sp, #4]
 800c5ec:	68a2      	ldr	r2, [r4, #8]
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	b002      	add	sp, #8
 800c5f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5f6:	f003 beab 	b.w	8010350 <_putc_r>
 800c5fa:	bf00      	nop
 800c5fc:	200013e4 	.word	0x200013e4

0800c600 <_sbrk_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4d06      	ldr	r5, [pc, #24]	; (800c61c <_sbrk_r+0x1c>)
 800c604:	2300      	movs	r3, #0
 800c606:	4604      	mov	r4, r0
 800c608:	4608      	mov	r0, r1
 800c60a:	602b      	str	r3, [r5, #0]
 800c60c:	f7fa f882 	bl	8006714 <_sbrk>
 800c610:	1c43      	adds	r3, r0, #1
 800c612:	d102      	bne.n	800c61a <_sbrk_r+0x1a>
 800c614:	682b      	ldr	r3, [r5, #0]
 800c616:	b103      	cbz	r3, 800c61a <_sbrk_r+0x1a>
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	20002bec 	.word	0x20002bec

0800c620 <nanf>:
 800c620:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c628 <nanf+0x8>
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	7fc00000 	.word	0x7fc00000

0800c62c <siprintf>:
 800c62c:	b40e      	push	{r1, r2, r3}
 800c62e:	b500      	push	{lr}
 800c630:	b09c      	sub	sp, #112	; 0x70
 800c632:	ab1d      	add	r3, sp, #116	; 0x74
 800c634:	9002      	str	r0, [sp, #8]
 800c636:	9006      	str	r0, [sp, #24]
 800c638:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c63c:	4809      	ldr	r0, [pc, #36]	; (800c664 <siprintf+0x38>)
 800c63e:	9107      	str	r1, [sp, #28]
 800c640:	9104      	str	r1, [sp, #16]
 800c642:	4909      	ldr	r1, [pc, #36]	; (800c668 <siprintf+0x3c>)
 800c644:	f853 2b04 	ldr.w	r2, [r3], #4
 800c648:	9105      	str	r1, [sp, #20]
 800c64a:	6800      	ldr	r0, [r0, #0]
 800c64c:	9301      	str	r3, [sp, #4]
 800c64e:	a902      	add	r1, sp, #8
 800c650:	f003 fa5a 	bl	800fb08 <_svfiprintf_r>
 800c654:	9b02      	ldr	r3, [sp, #8]
 800c656:	2200      	movs	r2, #0
 800c658:	701a      	strb	r2, [r3, #0]
 800c65a:	b01c      	add	sp, #112	; 0x70
 800c65c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c660:	b003      	add	sp, #12
 800c662:	4770      	bx	lr
 800c664:	200013e4 	.word	0x200013e4
 800c668:	ffff0208 	.word	0xffff0208

0800c66c <siscanf>:
 800c66c:	b40e      	push	{r1, r2, r3}
 800c66e:	b510      	push	{r4, lr}
 800c670:	b09f      	sub	sp, #124	; 0x7c
 800c672:	ac21      	add	r4, sp, #132	; 0x84
 800c674:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c678:	f854 2b04 	ldr.w	r2, [r4], #4
 800c67c:	9201      	str	r2, [sp, #4]
 800c67e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c682:	9004      	str	r0, [sp, #16]
 800c684:	9008      	str	r0, [sp, #32]
 800c686:	f7f3 fdad 	bl	80001e4 <strlen>
 800c68a:	4b0c      	ldr	r3, [pc, #48]	; (800c6bc <siscanf+0x50>)
 800c68c:	9005      	str	r0, [sp, #20]
 800c68e:	9009      	str	r0, [sp, #36]	; 0x24
 800c690:	930d      	str	r3, [sp, #52]	; 0x34
 800c692:	480b      	ldr	r0, [pc, #44]	; (800c6c0 <siscanf+0x54>)
 800c694:	9a01      	ldr	r2, [sp, #4]
 800c696:	6800      	ldr	r0, [r0, #0]
 800c698:	9403      	str	r4, [sp, #12]
 800c69a:	2300      	movs	r3, #0
 800c69c:	9311      	str	r3, [sp, #68]	; 0x44
 800c69e:	9316      	str	r3, [sp, #88]	; 0x58
 800c6a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c6a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c6a8:	a904      	add	r1, sp, #16
 800c6aa:	4623      	mov	r3, r4
 800c6ac:	f003 fb86 	bl	800fdbc <__ssvfiscanf_r>
 800c6b0:	b01f      	add	sp, #124	; 0x7c
 800c6b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6b6:	b003      	add	sp, #12
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	0800c6e7 	.word	0x0800c6e7
 800c6c0:	200013e4 	.word	0x200013e4

0800c6c4 <__sread>:
 800c6c4:	b510      	push	{r4, lr}
 800c6c6:	460c      	mov	r4, r1
 800c6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6cc:	f003 fe88 	bl	80103e0 <_read_r>
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	bfab      	itete	ge
 800c6d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6d6:	89a3      	ldrhlt	r3, [r4, #12]
 800c6d8:	181b      	addge	r3, r3, r0
 800c6da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6de:	bfac      	ite	ge
 800c6e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6e2:	81a3      	strhlt	r3, [r4, #12]
 800c6e4:	bd10      	pop	{r4, pc}

0800c6e6 <__seofread>:
 800c6e6:	2000      	movs	r0, #0
 800c6e8:	4770      	bx	lr

0800c6ea <__swrite>:
 800c6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ee:	461f      	mov	r7, r3
 800c6f0:	898b      	ldrh	r3, [r1, #12]
 800c6f2:	05db      	lsls	r3, r3, #23
 800c6f4:	4605      	mov	r5, r0
 800c6f6:	460c      	mov	r4, r1
 800c6f8:	4616      	mov	r6, r2
 800c6fa:	d505      	bpl.n	800c708 <__swrite+0x1e>
 800c6fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c700:	2302      	movs	r3, #2
 800c702:	2200      	movs	r2, #0
 800c704:	f002 fbe0 	bl	800eec8 <_lseek_r>
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c70e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c712:	81a3      	strh	r3, [r4, #12]
 800c714:	4632      	mov	r2, r6
 800c716:	463b      	mov	r3, r7
 800c718:	4628      	mov	r0, r5
 800c71a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c71e:	f000 bf91 	b.w	800d644 <_write_r>

0800c722 <__sseek>:
 800c722:	b510      	push	{r4, lr}
 800c724:	460c      	mov	r4, r1
 800c726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c72a:	f002 fbcd 	bl	800eec8 <_lseek_r>
 800c72e:	1c43      	adds	r3, r0, #1
 800c730:	89a3      	ldrh	r3, [r4, #12]
 800c732:	bf15      	itete	ne
 800c734:	6560      	strne	r0, [r4, #84]	; 0x54
 800c736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c73a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c73e:	81a3      	strheq	r3, [r4, #12]
 800c740:	bf18      	it	ne
 800c742:	81a3      	strhne	r3, [r4, #12]
 800c744:	bd10      	pop	{r4, pc}

0800c746 <__sclose>:
 800c746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c74a:	f001 b803 	b.w	800d754 <_close_r>
	...

0800c750 <strdup>:
 800c750:	4b02      	ldr	r3, [pc, #8]	; (800c75c <strdup+0xc>)
 800c752:	4601      	mov	r1, r0
 800c754:	6818      	ldr	r0, [r3, #0]
 800c756:	f000 b803 	b.w	800c760 <_strdup_r>
 800c75a:	bf00      	nop
 800c75c:	200013e4 	.word	0x200013e4

0800c760 <_strdup_r>:
 800c760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c762:	4604      	mov	r4, r0
 800c764:	4608      	mov	r0, r1
 800c766:	460d      	mov	r5, r1
 800c768:	f7f3 fd3c 	bl	80001e4 <strlen>
 800c76c:	1c42      	adds	r2, r0, #1
 800c76e:	4611      	mov	r1, r2
 800c770:	4620      	mov	r0, r4
 800c772:	9201      	str	r2, [sp, #4]
 800c774:	f7fe fee6 	bl	800b544 <_malloc_r>
 800c778:	4604      	mov	r4, r0
 800c77a:	b118      	cbz	r0, 800c784 <_strdup_r+0x24>
 800c77c:	9a01      	ldr	r2, [sp, #4]
 800c77e:	4629      	mov	r1, r5
 800c780:	f002 fc2c 	bl	800efdc <memcpy>
 800c784:	4620      	mov	r0, r4
 800c786:	b003      	add	sp, #12
 800c788:	bd30      	pop	{r4, r5, pc}

0800c78a <sulp>:
 800c78a:	b570      	push	{r4, r5, r6, lr}
 800c78c:	4604      	mov	r4, r0
 800c78e:	460d      	mov	r5, r1
 800c790:	ec45 4b10 	vmov	d0, r4, r5
 800c794:	4616      	mov	r6, r2
 800c796:	f002 ffc7 	bl	800f728 <__ulp>
 800c79a:	ec51 0b10 	vmov	r0, r1, d0
 800c79e:	b17e      	cbz	r6, 800c7c0 <sulp+0x36>
 800c7a0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c7a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	dd09      	ble.n	800c7c0 <sulp+0x36>
 800c7ac:	051b      	lsls	r3, r3, #20
 800c7ae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c7b2:	2400      	movs	r4, #0
 800c7b4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c7b8:	4622      	mov	r2, r4
 800c7ba:	462b      	mov	r3, r5
 800c7bc:	f7f3 ff2c 	bl	8000618 <__aeabi_dmul>
 800c7c0:	bd70      	pop	{r4, r5, r6, pc}
 800c7c2:	0000      	movs	r0, r0
 800c7c4:	0000      	movs	r0, r0
	...

0800c7c8 <_strtod_l>:
 800c7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7cc:	ed2d 8b02 	vpush	{d8}
 800c7d0:	b09d      	sub	sp, #116	; 0x74
 800c7d2:	461f      	mov	r7, r3
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	9318      	str	r3, [sp, #96]	; 0x60
 800c7d8:	4ba2      	ldr	r3, [pc, #648]	; (800ca64 <_strtod_l+0x29c>)
 800c7da:	9213      	str	r2, [sp, #76]	; 0x4c
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	9305      	str	r3, [sp, #20]
 800c7e0:	4604      	mov	r4, r0
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	4688      	mov	r8, r1
 800c7e6:	f7f3 fcfd 	bl	80001e4 <strlen>
 800c7ea:	f04f 0a00 	mov.w	sl, #0
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	f04f 0b00 	mov.w	fp, #0
 800c7f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c7f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7fa:	781a      	ldrb	r2, [r3, #0]
 800c7fc:	2a2b      	cmp	r2, #43	; 0x2b
 800c7fe:	d04e      	beq.n	800c89e <_strtod_l+0xd6>
 800c800:	d83b      	bhi.n	800c87a <_strtod_l+0xb2>
 800c802:	2a0d      	cmp	r2, #13
 800c804:	d834      	bhi.n	800c870 <_strtod_l+0xa8>
 800c806:	2a08      	cmp	r2, #8
 800c808:	d834      	bhi.n	800c874 <_strtod_l+0xac>
 800c80a:	2a00      	cmp	r2, #0
 800c80c:	d03e      	beq.n	800c88c <_strtod_l+0xc4>
 800c80e:	2300      	movs	r3, #0
 800c810:	930a      	str	r3, [sp, #40]	; 0x28
 800c812:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c814:	7833      	ldrb	r3, [r6, #0]
 800c816:	2b30      	cmp	r3, #48	; 0x30
 800c818:	f040 80b0 	bne.w	800c97c <_strtod_l+0x1b4>
 800c81c:	7873      	ldrb	r3, [r6, #1]
 800c81e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c822:	2b58      	cmp	r3, #88	; 0x58
 800c824:	d168      	bne.n	800c8f8 <_strtod_l+0x130>
 800c826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c828:	9301      	str	r3, [sp, #4]
 800c82a:	ab18      	add	r3, sp, #96	; 0x60
 800c82c:	9702      	str	r7, [sp, #8]
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	4a8d      	ldr	r2, [pc, #564]	; (800ca68 <_strtod_l+0x2a0>)
 800c832:	ab19      	add	r3, sp, #100	; 0x64
 800c834:	a917      	add	r1, sp, #92	; 0x5c
 800c836:	4620      	mov	r0, r4
 800c838:	f002 f836 	bl	800e8a8 <__gethex>
 800c83c:	f010 0707 	ands.w	r7, r0, #7
 800c840:	4605      	mov	r5, r0
 800c842:	d005      	beq.n	800c850 <_strtod_l+0x88>
 800c844:	2f06      	cmp	r7, #6
 800c846:	d12c      	bne.n	800c8a2 <_strtod_l+0xda>
 800c848:	3601      	adds	r6, #1
 800c84a:	2300      	movs	r3, #0
 800c84c:	9617      	str	r6, [sp, #92]	; 0x5c
 800c84e:	930a      	str	r3, [sp, #40]	; 0x28
 800c850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c852:	2b00      	cmp	r3, #0
 800c854:	f040 8590 	bne.w	800d378 <_strtod_l+0xbb0>
 800c858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c85a:	b1eb      	cbz	r3, 800c898 <_strtod_l+0xd0>
 800c85c:	4652      	mov	r2, sl
 800c85e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c862:	ec43 2b10 	vmov	d0, r2, r3
 800c866:	b01d      	add	sp, #116	; 0x74
 800c868:	ecbd 8b02 	vpop	{d8}
 800c86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c870:	2a20      	cmp	r2, #32
 800c872:	d1cc      	bne.n	800c80e <_strtod_l+0x46>
 800c874:	3301      	adds	r3, #1
 800c876:	9317      	str	r3, [sp, #92]	; 0x5c
 800c878:	e7be      	b.n	800c7f8 <_strtod_l+0x30>
 800c87a:	2a2d      	cmp	r2, #45	; 0x2d
 800c87c:	d1c7      	bne.n	800c80e <_strtod_l+0x46>
 800c87e:	2201      	movs	r2, #1
 800c880:	920a      	str	r2, [sp, #40]	; 0x28
 800c882:	1c5a      	adds	r2, r3, #1
 800c884:	9217      	str	r2, [sp, #92]	; 0x5c
 800c886:	785b      	ldrb	r3, [r3, #1]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d1c2      	bne.n	800c812 <_strtod_l+0x4a>
 800c88c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c88e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c892:	2b00      	cmp	r3, #0
 800c894:	f040 856e 	bne.w	800d374 <_strtod_l+0xbac>
 800c898:	4652      	mov	r2, sl
 800c89a:	465b      	mov	r3, fp
 800c89c:	e7e1      	b.n	800c862 <_strtod_l+0x9a>
 800c89e:	2200      	movs	r2, #0
 800c8a0:	e7ee      	b.n	800c880 <_strtod_l+0xb8>
 800c8a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c8a4:	b13a      	cbz	r2, 800c8b6 <_strtod_l+0xee>
 800c8a6:	2135      	movs	r1, #53	; 0x35
 800c8a8:	a81a      	add	r0, sp, #104	; 0x68
 800c8aa:	f003 f848 	bl	800f93e <__copybits>
 800c8ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f002 fc07 	bl	800f0c4 <_Bfree>
 800c8b6:	3f01      	subs	r7, #1
 800c8b8:	2f04      	cmp	r7, #4
 800c8ba:	d806      	bhi.n	800c8ca <_strtod_l+0x102>
 800c8bc:	e8df f007 	tbb	[pc, r7]
 800c8c0:	1714030a 	.word	0x1714030a
 800c8c4:	0a          	.byte	0x0a
 800c8c5:	00          	.byte	0x00
 800c8c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c8ca:	0728      	lsls	r0, r5, #28
 800c8cc:	d5c0      	bpl.n	800c850 <_strtod_l+0x88>
 800c8ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c8d2:	e7bd      	b.n	800c850 <_strtod_l+0x88>
 800c8d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c8d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c8da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c8de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c8e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c8e6:	e7f0      	b.n	800c8ca <_strtod_l+0x102>
 800c8e8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ca6c <_strtod_l+0x2a4>
 800c8ec:	e7ed      	b.n	800c8ca <_strtod_l+0x102>
 800c8ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c8f2:	f04f 3aff 	mov.w	sl, #4294967295
 800c8f6:	e7e8      	b.n	800c8ca <_strtod_l+0x102>
 800c8f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8fa:	1c5a      	adds	r2, r3, #1
 800c8fc:	9217      	str	r2, [sp, #92]	; 0x5c
 800c8fe:	785b      	ldrb	r3, [r3, #1]
 800c900:	2b30      	cmp	r3, #48	; 0x30
 800c902:	d0f9      	beq.n	800c8f8 <_strtod_l+0x130>
 800c904:	2b00      	cmp	r3, #0
 800c906:	d0a3      	beq.n	800c850 <_strtod_l+0x88>
 800c908:	2301      	movs	r3, #1
 800c90a:	f04f 0900 	mov.w	r9, #0
 800c90e:	9304      	str	r3, [sp, #16]
 800c910:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c912:	9308      	str	r3, [sp, #32]
 800c914:	f8cd 901c 	str.w	r9, [sp, #28]
 800c918:	464f      	mov	r7, r9
 800c91a:	220a      	movs	r2, #10
 800c91c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c91e:	7806      	ldrb	r6, [r0, #0]
 800c920:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c924:	b2d9      	uxtb	r1, r3
 800c926:	2909      	cmp	r1, #9
 800c928:	d92a      	bls.n	800c980 <_strtod_l+0x1b8>
 800c92a:	9905      	ldr	r1, [sp, #20]
 800c92c:	462a      	mov	r2, r5
 800c92e:	f003 fdef 	bl	8010510 <strncmp>
 800c932:	b398      	cbz	r0, 800c99c <_strtod_l+0x1d4>
 800c934:	2000      	movs	r0, #0
 800c936:	4632      	mov	r2, r6
 800c938:	463d      	mov	r5, r7
 800c93a:	9005      	str	r0, [sp, #20]
 800c93c:	4603      	mov	r3, r0
 800c93e:	2a65      	cmp	r2, #101	; 0x65
 800c940:	d001      	beq.n	800c946 <_strtod_l+0x17e>
 800c942:	2a45      	cmp	r2, #69	; 0x45
 800c944:	d118      	bne.n	800c978 <_strtod_l+0x1b0>
 800c946:	b91d      	cbnz	r5, 800c950 <_strtod_l+0x188>
 800c948:	9a04      	ldr	r2, [sp, #16]
 800c94a:	4302      	orrs	r2, r0
 800c94c:	d09e      	beq.n	800c88c <_strtod_l+0xc4>
 800c94e:	2500      	movs	r5, #0
 800c950:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c954:	f108 0201 	add.w	r2, r8, #1
 800c958:	9217      	str	r2, [sp, #92]	; 0x5c
 800c95a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c95e:	2a2b      	cmp	r2, #43	; 0x2b
 800c960:	d075      	beq.n	800ca4e <_strtod_l+0x286>
 800c962:	2a2d      	cmp	r2, #45	; 0x2d
 800c964:	d07b      	beq.n	800ca5e <_strtod_l+0x296>
 800c966:	f04f 0c00 	mov.w	ip, #0
 800c96a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c96e:	2909      	cmp	r1, #9
 800c970:	f240 8082 	bls.w	800ca78 <_strtod_l+0x2b0>
 800c974:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c978:	2600      	movs	r6, #0
 800c97a:	e09d      	b.n	800cab8 <_strtod_l+0x2f0>
 800c97c:	2300      	movs	r3, #0
 800c97e:	e7c4      	b.n	800c90a <_strtod_l+0x142>
 800c980:	2f08      	cmp	r7, #8
 800c982:	bfd8      	it	le
 800c984:	9907      	ldrle	r1, [sp, #28]
 800c986:	f100 0001 	add.w	r0, r0, #1
 800c98a:	bfda      	itte	le
 800c98c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c990:	9307      	strle	r3, [sp, #28]
 800c992:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c996:	3701      	adds	r7, #1
 800c998:	9017      	str	r0, [sp, #92]	; 0x5c
 800c99a:	e7bf      	b.n	800c91c <_strtod_l+0x154>
 800c99c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c99e:	195a      	adds	r2, r3, r5
 800c9a0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c9a2:	5d5a      	ldrb	r2, [r3, r5]
 800c9a4:	2f00      	cmp	r7, #0
 800c9a6:	d037      	beq.n	800ca18 <_strtod_l+0x250>
 800c9a8:	9005      	str	r0, [sp, #20]
 800c9aa:	463d      	mov	r5, r7
 800c9ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c9b0:	2b09      	cmp	r3, #9
 800c9b2:	d912      	bls.n	800c9da <_strtod_l+0x212>
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e7c2      	b.n	800c93e <_strtod_l+0x176>
 800c9b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9ba:	1c5a      	adds	r2, r3, #1
 800c9bc:	9217      	str	r2, [sp, #92]	; 0x5c
 800c9be:	785a      	ldrb	r2, [r3, #1]
 800c9c0:	3001      	adds	r0, #1
 800c9c2:	2a30      	cmp	r2, #48	; 0x30
 800c9c4:	d0f8      	beq.n	800c9b8 <_strtod_l+0x1f0>
 800c9c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c9ca:	2b08      	cmp	r3, #8
 800c9cc:	f200 84d9 	bhi.w	800d382 <_strtod_l+0xbba>
 800c9d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9d2:	9005      	str	r0, [sp, #20]
 800c9d4:	2000      	movs	r0, #0
 800c9d6:	9308      	str	r3, [sp, #32]
 800c9d8:	4605      	mov	r5, r0
 800c9da:	3a30      	subs	r2, #48	; 0x30
 800c9dc:	f100 0301 	add.w	r3, r0, #1
 800c9e0:	d014      	beq.n	800ca0c <_strtod_l+0x244>
 800c9e2:	9905      	ldr	r1, [sp, #20]
 800c9e4:	4419      	add	r1, r3
 800c9e6:	9105      	str	r1, [sp, #20]
 800c9e8:	462b      	mov	r3, r5
 800c9ea:	eb00 0e05 	add.w	lr, r0, r5
 800c9ee:	210a      	movs	r1, #10
 800c9f0:	4573      	cmp	r3, lr
 800c9f2:	d113      	bne.n	800ca1c <_strtod_l+0x254>
 800c9f4:	182b      	adds	r3, r5, r0
 800c9f6:	2b08      	cmp	r3, #8
 800c9f8:	f105 0501 	add.w	r5, r5, #1
 800c9fc:	4405      	add	r5, r0
 800c9fe:	dc1c      	bgt.n	800ca3a <_strtod_l+0x272>
 800ca00:	9907      	ldr	r1, [sp, #28]
 800ca02:	230a      	movs	r3, #10
 800ca04:	fb03 2301 	mla	r3, r3, r1, r2
 800ca08:	9307      	str	r3, [sp, #28]
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ca0e:	1c51      	adds	r1, r2, #1
 800ca10:	9117      	str	r1, [sp, #92]	; 0x5c
 800ca12:	7852      	ldrb	r2, [r2, #1]
 800ca14:	4618      	mov	r0, r3
 800ca16:	e7c9      	b.n	800c9ac <_strtod_l+0x1e4>
 800ca18:	4638      	mov	r0, r7
 800ca1a:	e7d2      	b.n	800c9c2 <_strtod_l+0x1fa>
 800ca1c:	2b08      	cmp	r3, #8
 800ca1e:	dc04      	bgt.n	800ca2a <_strtod_l+0x262>
 800ca20:	9e07      	ldr	r6, [sp, #28]
 800ca22:	434e      	muls	r6, r1
 800ca24:	9607      	str	r6, [sp, #28]
 800ca26:	3301      	adds	r3, #1
 800ca28:	e7e2      	b.n	800c9f0 <_strtod_l+0x228>
 800ca2a:	f103 0c01 	add.w	ip, r3, #1
 800ca2e:	f1bc 0f10 	cmp.w	ip, #16
 800ca32:	bfd8      	it	le
 800ca34:	fb01 f909 	mulle.w	r9, r1, r9
 800ca38:	e7f5      	b.n	800ca26 <_strtod_l+0x25e>
 800ca3a:	2d10      	cmp	r5, #16
 800ca3c:	bfdc      	itt	le
 800ca3e:	230a      	movle	r3, #10
 800ca40:	fb03 2909 	mlale	r9, r3, r9, r2
 800ca44:	e7e1      	b.n	800ca0a <_strtod_l+0x242>
 800ca46:	2300      	movs	r3, #0
 800ca48:	9305      	str	r3, [sp, #20]
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	e77c      	b.n	800c948 <_strtod_l+0x180>
 800ca4e:	f04f 0c00 	mov.w	ip, #0
 800ca52:	f108 0202 	add.w	r2, r8, #2
 800ca56:	9217      	str	r2, [sp, #92]	; 0x5c
 800ca58:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ca5c:	e785      	b.n	800c96a <_strtod_l+0x1a2>
 800ca5e:	f04f 0c01 	mov.w	ip, #1
 800ca62:	e7f6      	b.n	800ca52 <_strtod_l+0x28a>
 800ca64:	08010cf0 	.word	0x08010cf0
 800ca68:	080109e4 	.word	0x080109e4
 800ca6c:	7ff00000 	.word	0x7ff00000
 800ca70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ca72:	1c51      	adds	r1, r2, #1
 800ca74:	9117      	str	r1, [sp, #92]	; 0x5c
 800ca76:	7852      	ldrb	r2, [r2, #1]
 800ca78:	2a30      	cmp	r2, #48	; 0x30
 800ca7a:	d0f9      	beq.n	800ca70 <_strtod_l+0x2a8>
 800ca7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ca80:	2908      	cmp	r1, #8
 800ca82:	f63f af79 	bhi.w	800c978 <_strtod_l+0x1b0>
 800ca86:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ca8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ca8c:	9206      	str	r2, [sp, #24]
 800ca8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ca90:	1c51      	adds	r1, r2, #1
 800ca92:	9117      	str	r1, [sp, #92]	; 0x5c
 800ca94:	7852      	ldrb	r2, [r2, #1]
 800ca96:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ca9a:	2e09      	cmp	r6, #9
 800ca9c:	d937      	bls.n	800cb0e <_strtod_l+0x346>
 800ca9e:	9e06      	ldr	r6, [sp, #24]
 800caa0:	1b89      	subs	r1, r1, r6
 800caa2:	2908      	cmp	r1, #8
 800caa4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800caa8:	dc02      	bgt.n	800cab0 <_strtod_l+0x2e8>
 800caaa:	4576      	cmp	r6, lr
 800caac:	bfa8      	it	ge
 800caae:	4676      	movge	r6, lr
 800cab0:	f1bc 0f00 	cmp.w	ip, #0
 800cab4:	d000      	beq.n	800cab8 <_strtod_l+0x2f0>
 800cab6:	4276      	negs	r6, r6
 800cab8:	2d00      	cmp	r5, #0
 800caba:	d14d      	bne.n	800cb58 <_strtod_l+0x390>
 800cabc:	9904      	ldr	r1, [sp, #16]
 800cabe:	4301      	orrs	r1, r0
 800cac0:	f47f aec6 	bne.w	800c850 <_strtod_l+0x88>
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f47f aee1 	bne.w	800c88c <_strtod_l+0xc4>
 800caca:	2a69      	cmp	r2, #105	; 0x69
 800cacc:	d027      	beq.n	800cb1e <_strtod_l+0x356>
 800cace:	dc24      	bgt.n	800cb1a <_strtod_l+0x352>
 800cad0:	2a49      	cmp	r2, #73	; 0x49
 800cad2:	d024      	beq.n	800cb1e <_strtod_l+0x356>
 800cad4:	2a4e      	cmp	r2, #78	; 0x4e
 800cad6:	f47f aed9 	bne.w	800c88c <_strtod_l+0xc4>
 800cada:	499f      	ldr	r1, [pc, #636]	; (800cd58 <_strtod_l+0x590>)
 800cadc:	a817      	add	r0, sp, #92	; 0x5c
 800cade:	f002 f93b 	bl	800ed58 <__match>
 800cae2:	2800      	cmp	r0, #0
 800cae4:	f43f aed2 	beq.w	800c88c <_strtod_l+0xc4>
 800cae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	2b28      	cmp	r3, #40	; 0x28
 800caee:	d12d      	bne.n	800cb4c <_strtod_l+0x384>
 800caf0:	499a      	ldr	r1, [pc, #616]	; (800cd5c <_strtod_l+0x594>)
 800caf2:	aa1a      	add	r2, sp, #104	; 0x68
 800caf4:	a817      	add	r0, sp, #92	; 0x5c
 800caf6:	f002 f943 	bl	800ed80 <__hexnan>
 800cafa:	2805      	cmp	r0, #5
 800cafc:	d126      	bne.n	800cb4c <_strtod_l+0x384>
 800cafe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb00:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cb04:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cb08:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cb0c:	e6a0      	b.n	800c850 <_strtod_l+0x88>
 800cb0e:	210a      	movs	r1, #10
 800cb10:	fb01 2e0e 	mla	lr, r1, lr, r2
 800cb14:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cb18:	e7b9      	b.n	800ca8e <_strtod_l+0x2c6>
 800cb1a:	2a6e      	cmp	r2, #110	; 0x6e
 800cb1c:	e7db      	b.n	800cad6 <_strtod_l+0x30e>
 800cb1e:	4990      	ldr	r1, [pc, #576]	; (800cd60 <_strtod_l+0x598>)
 800cb20:	a817      	add	r0, sp, #92	; 0x5c
 800cb22:	f002 f919 	bl	800ed58 <__match>
 800cb26:	2800      	cmp	r0, #0
 800cb28:	f43f aeb0 	beq.w	800c88c <_strtod_l+0xc4>
 800cb2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb2e:	498d      	ldr	r1, [pc, #564]	; (800cd64 <_strtod_l+0x59c>)
 800cb30:	3b01      	subs	r3, #1
 800cb32:	a817      	add	r0, sp, #92	; 0x5c
 800cb34:	9317      	str	r3, [sp, #92]	; 0x5c
 800cb36:	f002 f90f 	bl	800ed58 <__match>
 800cb3a:	b910      	cbnz	r0, 800cb42 <_strtod_l+0x37a>
 800cb3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb3e:	3301      	adds	r3, #1
 800cb40:	9317      	str	r3, [sp, #92]	; 0x5c
 800cb42:	f8df b230 	ldr.w	fp, [pc, #560]	; 800cd74 <_strtod_l+0x5ac>
 800cb46:	f04f 0a00 	mov.w	sl, #0
 800cb4a:	e681      	b.n	800c850 <_strtod_l+0x88>
 800cb4c:	4886      	ldr	r0, [pc, #536]	; (800cd68 <_strtod_l+0x5a0>)
 800cb4e:	f003 fc5b 	bl	8010408 <nan>
 800cb52:	ec5b ab10 	vmov	sl, fp, d0
 800cb56:	e67b      	b.n	800c850 <_strtod_l+0x88>
 800cb58:	9b05      	ldr	r3, [sp, #20]
 800cb5a:	9807      	ldr	r0, [sp, #28]
 800cb5c:	1af3      	subs	r3, r6, r3
 800cb5e:	2f00      	cmp	r7, #0
 800cb60:	bf08      	it	eq
 800cb62:	462f      	moveq	r7, r5
 800cb64:	2d10      	cmp	r5, #16
 800cb66:	9306      	str	r3, [sp, #24]
 800cb68:	46a8      	mov	r8, r5
 800cb6a:	bfa8      	it	ge
 800cb6c:	f04f 0810 	movge.w	r8, #16
 800cb70:	f7f3 fcd8 	bl	8000524 <__aeabi_ui2d>
 800cb74:	2d09      	cmp	r5, #9
 800cb76:	4682      	mov	sl, r0
 800cb78:	468b      	mov	fp, r1
 800cb7a:	dd13      	ble.n	800cba4 <_strtod_l+0x3dc>
 800cb7c:	4b7b      	ldr	r3, [pc, #492]	; (800cd6c <_strtod_l+0x5a4>)
 800cb7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cb82:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cb86:	f7f3 fd47 	bl	8000618 <__aeabi_dmul>
 800cb8a:	4682      	mov	sl, r0
 800cb8c:	4648      	mov	r0, r9
 800cb8e:	468b      	mov	fp, r1
 800cb90:	f7f3 fcc8 	bl	8000524 <__aeabi_ui2d>
 800cb94:	4602      	mov	r2, r0
 800cb96:	460b      	mov	r3, r1
 800cb98:	4650      	mov	r0, sl
 800cb9a:	4659      	mov	r1, fp
 800cb9c:	f7f3 fb86 	bl	80002ac <__adddf3>
 800cba0:	4682      	mov	sl, r0
 800cba2:	468b      	mov	fp, r1
 800cba4:	2d0f      	cmp	r5, #15
 800cba6:	dc38      	bgt.n	800cc1a <_strtod_l+0x452>
 800cba8:	9b06      	ldr	r3, [sp, #24]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	f43f ae50 	beq.w	800c850 <_strtod_l+0x88>
 800cbb0:	dd24      	ble.n	800cbfc <_strtod_l+0x434>
 800cbb2:	2b16      	cmp	r3, #22
 800cbb4:	dc0b      	bgt.n	800cbce <_strtod_l+0x406>
 800cbb6:	496d      	ldr	r1, [pc, #436]	; (800cd6c <_strtod_l+0x5a4>)
 800cbb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cbbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbc0:	4652      	mov	r2, sl
 800cbc2:	465b      	mov	r3, fp
 800cbc4:	f7f3 fd28 	bl	8000618 <__aeabi_dmul>
 800cbc8:	4682      	mov	sl, r0
 800cbca:	468b      	mov	fp, r1
 800cbcc:	e640      	b.n	800c850 <_strtod_l+0x88>
 800cbce:	9a06      	ldr	r2, [sp, #24]
 800cbd0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	db20      	blt.n	800cc1a <_strtod_l+0x452>
 800cbd8:	4c64      	ldr	r4, [pc, #400]	; (800cd6c <_strtod_l+0x5a4>)
 800cbda:	f1c5 050f 	rsb	r5, r5, #15
 800cbde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cbe2:	4652      	mov	r2, sl
 800cbe4:	465b      	mov	r3, fp
 800cbe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbea:	f7f3 fd15 	bl	8000618 <__aeabi_dmul>
 800cbee:	9b06      	ldr	r3, [sp, #24]
 800cbf0:	1b5d      	subs	r5, r3, r5
 800cbf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cbf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cbfa:	e7e3      	b.n	800cbc4 <_strtod_l+0x3fc>
 800cbfc:	9b06      	ldr	r3, [sp, #24]
 800cbfe:	3316      	adds	r3, #22
 800cc00:	db0b      	blt.n	800cc1a <_strtod_l+0x452>
 800cc02:	9b05      	ldr	r3, [sp, #20]
 800cc04:	1b9e      	subs	r6, r3, r6
 800cc06:	4b59      	ldr	r3, [pc, #356]	; (800cd6c <_strtod_l+0x5a4>)
 800cc08:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cc0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cc10:	4650      	mov	r0, sl
 800cc12:	4659      	mov	r1, fp
 800cc14:	f7f3 fe2a 	bl	800086c <__aeabi_ddiv>
 800cc18:	e7d6      	b.n	800cbc8 <_strtod_l+0x400>
 800cc1a:	9b06      	ldr	r3, [sp, #24]
 800cc1c:	eba5 0808 	sub.w	r8, r5, r8
 800cc20:	4498      	add	r8, r3
 800cc22:	f1b8 0f00 	cmp.w	r8, #0
 800cc26:	dd74      	ble.n	800cd12 <_strtod_l+0x54a>
 800cc28:	f018 030f 	ands.w	r3, r8, #15
 800cc2c:	d00a      	beq.n	800cc44 <_strtod_l+0x47c>
 800cc2e:	494f      	ldr	r1, [pc, #316]	; (800cd6c <_strtod_l+0x5a4>)
 800cc30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cc34:	4652      	mov	r2, sl
 800cc36:	465b      	mov	r3, fp
 800cc38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc3c:	f7f3 fcec 	bl	8000618 <__aeabi_dmul>
 800cc40:	4682      	mov	sl, r0
 800cc42:	468b      	mov	fp, r1
 800cc44:	f038 080f 	bics.w	r8, r8, #15
 800cc48:	d04f      	beq.n	800ccea <_strtod_l+0x522>
 800cc4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cc4e:	dd22      	ble.n	800cc96 <_strtod_l+0x4ce>
 800cc50:	2500      	movs	r5, #0
 800cc52:	462e      	mov	r6, r5
 800cc54:	9507      	str	r5, [sp, #28]
 800cc56:	9505      	str	r5, [sp, #20]
 800cc58:	2322      	movs	r3, #34	; 0x22
 800cc5a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800cd74 <_strtod_l+0x5ac>
 800cc5e:	6023      	str	r3, [r4, #0]
 800cc60:	f04f 0a00 	mov.w	sl, #0
 800cc64:	9b07      	ldr	r3, [sp, #28]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	f43f adf2 	beq.w	800c850 <_strtod_l+0x88>
 800cc6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cc6e:	4620      	mov	r0, r4
 800cc70:	f002 fa28 	bl	800f0c4 <_Bfree>
 800cc74:	9905      	ldr	r1, [sp, #20]
 800cc76:	4620      	mov	r0, r4
 800cc78:	f002 fa24 	bl	800f0c4 <_Bfree>
 800cc7c:	4631      	mov	r1, r6
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f002 fa20 	bl	800f0c4 <_Bfree>
 800cc84:	9907      	ldr	r1, [sp, #28]
 800cc86:	4620      	mov	r0, r4
 800cc88:	f002 fa1c 	bl	800f0c4 <_Bfree>
 800cc8c:	4629      	mov	r1, r5
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f002 fa18 	bl	800f0c4 <_Bfree>
 800cc94:	e5dc      	b.n	800c850 <_strtod_l+0x88>
 800cc96:	4b36      	ldr	r3, [pc, #216]	; (800cd70 <_strtod_l+0x5a8>)
 800cc98:	9304      	str	r3, [sp, #16]
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cca0:	4650      	mov	r0, sl
 800cca2:	4659      	mov	r1, fp
 800cca4:	4699      	mov	r9, r3
 800cca6:	f1b8 0f01 	cmp.w	r8, #1
 800ccaa:	dc21      	bgt.n	800ccf0 <_strtod_l+0x528>
 800ccac:	b10b      	cbz	r3, 800ccb2 <_strtod_l+0x4ea>
 800ccae:	4682      	mov	sl, r0
 800ccb0:	468b      	mov	fp, r1
 800ccb2:	4b2f      	ldr	r3, [pc, #188]	; (800cd70 <_strtod_l+0x5a8>)
 800ccb4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ccb8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ccbc:	4652      	mov	r2, sl
 800ccbe:	465b      	mov	r3, fp
 800ccc0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ccc4:	f7f3 fca8 	bl	8000618 <__aeabi_dmul>
 800ccc8:	4b2a      	ldr	r3, [pc, #168]	; (800cd74 <_strtod_l+0x5ac>)
 800ccca:	460a      	mov	r2, r1
 800cccc:	400b      	ands	r3, r1
 800ccce:	492a      	ldr	r1, [pc, #168]	; (800cd78 <_strtod_l+0x5b0>)
 800ccd0:	428b      	cmp	r3, r1
 800ccd2:	4682      	mov	sl, r0
 800ccd4:	d8bc      	bhi.n	800cc50 <_strtod_l+0x488>
 800ccd6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ccda:	428b      	cmp	r3, r1
 800ccdc:	bf86      	itte	hi
 800ccde:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800cd7c <_strtod_l+0x5b4>
 800cce2:	f04f 3aff 	movhi.w	sl, #4294967295
 800cce6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ccea:	2300      	movs	r3, #0
 800ccec:	9304      	str	r3, [sp, #16]
 800ccee:	e084      	b.n	800cdfa <_strtod_l+0x632>
 800ccf0:	f018 0f01 	tst.w	r8, #1
 800ccf4:	d005      	beq.n	800cd02 <_strtod_l+0x53a>
 800ccf6:	9b04      	ldr	r3, [sp, #16]
 800ccf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfc:	f7f3 fc8c 	bl	8000618 <__aeabi_dmul>
 800cd00:	2301      	movs	r3, #1
 800cd02:	9a04      	ldr	r2, [sp, #16]
 800cd04:	3208      	adds	r2, #8
 800cd06:	f109 0901 	add.w	r9, r9, #1
 800cd0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cd0e:	9204      	str	r2, [sp, #16]
 800cd10:	e7c9      	b.n	800cca6 <_strtod_l+0x4de>
 800cd12:	d0ea      	beq.n	800ccea <_strtod_l+0x522>
 800cd14:	f1c8 0800 	rsb	r8, r8, #0
 800cd18:	f018 020f 	ands.w	r2, r8, #15
 800cd1c:	d00a      	beq.n	800cd34 <_strtod_l+0x56c>
 800cd1e:	4b13      	ldr	r3, [pc, #76]	; (800cd6c <_strtod_l+0x5a4>)
 800cd20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd24:	4650      	mov	r0, sl
 800cd26:	4659      	mov	r1, fp
 800cd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2c:	f7f3 fd9e 	bl	800086c <__aeabi_ddiv>
 800cd30:	4682      	mov	sl, r0
 800cd32:	468b      	mov	fp, r1
 800cd34:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cd38:	d0d7      	beq.n	800ccea <_strtod_l+0x522>
 800cd3a:	f1b8 0f1f 	cmp.w	r8, #31
 800cd3e:	dd1f      	ble.n	800cd80 <_strtod_l+0x5b8>
 800cd40:	2500      	movs	r5, #0
 800cd42:	462e      	mov	r6, r5
 800cd44:	9507      	str	r5, [sp, #28]
 800cd46:	9505      	str	r5, [sp, #20]
 800cd48:	2322      	movs	r3, #34	; 0x22
 800cd4a:	f04f 0a00 	mov.w	sl, #0
 800cd4e:	f04f 0b00 	mov.w	fp, #0
 800cd52:	6023      	str	r3, [r4, #0]
 800cd54:	e786      	b.n	800cc64 <_strtod_l+0x49c>
 800cd56:	bf00      	nop
 800cd58:	080109ba 	.word	0x080109ba
 800cd5c:	080109f8 	.word	0x080109f8
 800cd60:	080109b2 	.word	0x080109b2
 800cd64:	08010bb0 	.word	0x08010bb0
 800cd68:	08010997 	.word	0x08010997
 800cd6c:	08010d88 	.word	0x08010d88
 800cd70:	08010d60 	.word	0x08010d60
 800cd74:	7ff00000 	.word	0x7ff00000
 800cd78:	7ca00000 	.word	0x7ca00000
 800cd7c:	7fefffff 	.word	0x7fefffff
 800cd80:	f018 0310 	ands.w	r3, r8, #16
 800cd84:	bf18      	it	ne
 800cd86:	236a      	movne	r3, #106	; 0x6a
 800cd88:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d138 <_strtod_l+0x970>
 800cd8c:	9304      	str	r3, [sp, #16]
 800cd8e:	4650      	mov	r0, sl
 800cd90:	4659      	mov	r1, fp
 800cd92:	2300      	movs	r3, #0
 800cd94:	f018 0f01 	tst.w	r8, #1
 800cd98:	d004      	beq.n	800cda4 <_strtod_l+0x5dc>
 800cd9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cd9e:	f7f3 fc3b 	bl	8000618 <__aeabi_dmul>
 800cda2:	2301      	movs	r3, #1
 800cda4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cda8:	f109 0908 	add.w	r9, r9, #8
 800cdac:	d1f2      	bne.n	800cd94 <_strtod_l+0x5cc>
 800cdae:	b10b      	cbz	r3, 800cdb4 <_strtod_l+0x5ec>
 800cdb0:	4682      	mov	sl, r0
 800cdb2:	468b      	mov	fp, r1
 800cdb4:	9b04      	ldr	r3, [sp, #16]
 800cdb6:	b1c3      	cbz	r3, 800cdea <_strtod_l+0x622>
 800cdb8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cdbc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	4659      	mov	r1, fp
 800cdc4:	dd11      	ble.n	800cdea <_strtod_l+0x622>
 800cdc6:	2b1f      	cmp	r3, #31
 800cdc8:	f340 8124 	ble.w	800d014 <_strtod_l+0x84c>
 800cdcc:	2b34      	cmp	r3, #52	; 0x34
 800cdce:	bfde      	ittt	le
 800cdd0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cdd4:	f04f 33ff 	movle.w	r3, #4294967295
 800cdd8:	fa03 f202 	lslle.w	r2, r3, r2
 800cddc:	f04f 0a00 	mov.w	sl, #0
 800cde0:	bfcc      	ite	gt
 800cde2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cde6:	ea02 0b01 	andle.w	fp, r2, r1
 800cdea:	2200      	movs	r2, #0
 800cdec:	2300      	movs	r3, #0
 800cdee:	4650      	mov	r0, sl
 800cdf0:	4659      	mov	r1, fp
 800cdf2:	f7f3 fe79 	bl	8000ae8 <__aeabi_dcmpeq>
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	d1a2      	bne.n	800cd40 <_strtod_l+0x578>
 800cdfa:	9b07      	ldr	r3, [sp, #28]
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	9908      	ldr	r1, [sp, #32]
 800ce00:	462b      	mov	r3, r5
 800ce02:	463a      	mov	r2, r7
 800ce04:	4620      	mov	r0, r4
 800ce06:	f002 f9c5 	bl	800f194 <__s2b>
 800ce0a:	9007      	str	r0, [sp, #28]
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	f43f af1f 	beq.w	800cc50 <_strtod_l+0x488>
 800ce12:	9b05      	ldr	r3, [sp, #20]
 800ce14:	1b9e      	subs	r6, r3, r6
 800ce16:	9b06      	ldr	r3, [sp, #24]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	bfb4      	ite	lt
 800ce1c:	4633      	movlt	r3, r6
 800ce1e:	2300      	movge	r3, #0
 800ce20:	930c      	str	r3, [sp, #48]	; 0x30
 800ce22:	9b06      	ldr	r3, [sp, #24]
 800ce24:	2500      	movs	r5, #0
 800ce26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ce2a:	9312      	str	r3, [sp, #72]	; 0x48
 800ce2c:	462e      	mov	r6, r5
 800ce2e:	9b07      	ldr	r3, [sp, #28]
 800ce30:	4620      	mov	r0, r4
 800ce32:	6859      	ldr	r1, [r3, #4]
 800ce34:	f002 f906 	bl	800f044 <_Balloc>
 800ce38:	9005      	str	r0, [sp, #20]
 800ce3a:	2800      	cmp	r0, #0
 800ce3c:	f43f af0c 	beq.w	800cc58 <_strtod_l+0x490>
 800ce40:	9b07      	ldr	r3, [sp, #28]
 800ce42:	691a      	ldr	r2, [r3, #16]
 800ce44:	3202      	adds	r2, #2
 800ce46:	f103 010c 	add.w	r1, r3, #12
 800ce4a:	0092      	lsls	r2, r2, #2
 800ce4c:	300c      	adds	r0, #12
 800ce4e:	f002 f8c5 	bl	800efdc <memcpy>
 800ce52:	ec4b ab10 	vmov	d0, sl, fp
 800ce56:	aa1a      	add	r2, sp, #104	; 0x68
 800ce58:	a919      	add	r1, sp, #100	; 0x64
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f002 fce0 	bl	800f820 <__d2b>
 800ce60:	ec4b ab18 	vmov	d8, sl, fp
 800ce64:	9018      	str	r0, [sp, #96]	; 0x60
 800ce66:	2800      	cmp	r0, #0
 800ce68:	f43f aef6 	beq.w	800cc58 <_strtod_l+0x490>
 800ce6c:	2101      	movs	r1, #1
 800ce6e:	4620      	mov	r0, r4
 800ce70:	f002 fa2a 	bl	800f2c8 <__i2b>
 800ce74:	4606      	mov	r6, r0
 800ce76:	2800      	cmp	r0, #0
 800ce78:	f43f aeee 	beq.w	800cc58 <_strtod_l+0x490>
 800ce7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ce7e:	9904      	ldr	r1, [sp, #16]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	bfab      	itete	ge
 800ce84:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ce86:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ce88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ce8a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ce8e:	bfac      	ite	ge
 800ce90:	eb03 0902 	addge.w	r9, r3, r2
 800ce94:	1ad7      	sublt	r7, r2, r3
 800ce96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ce98:	eba3 0801 	sub.w	r8, r3, r1
 800ce9c:	4490      	add	r8, r2
 800ce9e:	4ba1      	ldr	r3, [pc, #644]	; (800d124 <_strtod_l+0x95c>)
 800cea0:	f108 38ff 	add.w	r8, r8, #4294967295
 800cea4:	4598      	cmp	r8, r3
 800cea6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ceaa:	f280 80c7 	bge.w	800d03c <_strtod_l+0x874>
 800ceae:	eba3 0308 	sub.w	r3, r3, r8
 800ceb2:	2b1f      	cmp	r3, #31
 800ceb4:	eba2 0203 	sub.w	r2, r2, r3
 800ceb8:	f04f 0101 	mov.w	r1, #1
 800cebc:	f300 80b1 	bgt.w	800d022 <_strtod_l+0x85a>
 800cec0:	fa01 f303 	lsl.w	r3, r1, r3
 800cec4:	930d      	str	r3, [sp, #52]	; 0x34
 800cec6:	2300      	movs	r3, #0
 800cec8:	9308      	str	r3, [sp, #32]
 800ceca:	eb09 0802 	add.w	r8, r9, r2
 800cece:	9b04      	ldr	r3, [sp, #16]
 800ced0:	45c1      	cmp	r9, r8
 800ced2:	4417      	add	r7, r2
 800ced4:	441f      	add	r7, r3
 800ced6:	464b      	mov	r3, r9
 800ced8:	bfa8      	it	ge
 800ceda:	4643      	movge	r3, r8
 800cedc:	42bb      	cmp	r3, r7
 800cede:	bfa8      	it	ge
 800cee0:	463b      	movge	r3, r7
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	bfc2      	ittt	gt
 800cee6:	eba8 0803 	subgt.w	r8, r8, r3
 800ceea:	1aff      	subgt	r7, r7, r3
 800ceec:	eba9 0903 	subgt.w	r9, r9, r3
 800cef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	dd17      	ble.n	800cf26 <_strtod_l+0x75e>
 800cef6:	4631      	mov	r1, r6
 800cef8:	461a      	mov	r2, r3
 800cefa:	4620      	mov	r0, r4
 800cefc:	f002 faa4 	bl	800f448 <__pow5mult>
 800cf00:	4606      	mov	r6, r0
 800cf02:	2800      	cmp	r0, #0
 800cf04:	f43f aea8 	beq.w	800cc58 <_strtod_l+0x490>
 800cf08:	4601      	mov	r1, r0
 800cf0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	f002 f9f1 	bl	800f2f4 <__multiply>
 800cf12:	900b      	str	r0, [sp, #44]	; 0x2c
 800cf14:	2800      	cmp	r0, #0
 800cf16:	f43f ae9f 	beq.w	800cc58 <_strtod_l+0x490>
 800cf1a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	f002 f8d1 	bl	800f0c4 <_Bfree>
 800cf22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf24:	9318      	str	r3, [sp, #96]	; 0x60
 800cf26:	f1b8 0f00 	cmp.w	r8, #0
 800cf2a:	f300 808c 	bgt.w	800d046 <_strtod_l+0x87e>
 800cf2e:	9b06      	ldr	r3, [sp, #24]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	dd08      	ble.n	800cf46 <_strtod_l+0x77e>
 800cf34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf36:	9905      	ldr	r1, [sp, #20]
 800cf38:	4620      	mov	r0, r4
 800cf3a:	f002 fa85 	bl	800f448 <__pow5mult>
 800cf3e:	9005      	str	r0, [sp, #20]
 800cf40:	2800      	cmp	r0, #0
 800cf42:	f43f ae89 	beq.w	800cc58 <_strtod_l+0x490>
 800cf46:	2f00      	cmp	r7, #0
 800cf48:	dd08      	ble.n	800cf5c <_strtod_l+0x794>
 800cf4a:	9905      	ldr	r1, [sp, #20]
 800cf4c:	463a      	mov	r2, r7
 800cf4e:	4620      	mov	r0, r4
 800cf50:	f002 fad4 	bl	800f4fc <__lshift>
 800cf54:	9005      	str	r0, [sp, #20]
 800cf56:	2800      	cmp	r0, #0
 800cf58:	f43f ae7e 	beq.w	800cc58 <_strtod_l+0x490>
 800cf5c:	f1b9 0f00 	cmp.w	r9, #0
 800cf60:	dd08      	ble.n	800cf74 <_strtod_l+0x7ac>
 800cf62:	4631      	mov	r1, r6
 800cf64:	464a      	mov	r2, r9
 800cf66:	4620      	mov	r0, r4
 800cf68:	f002 fac8 	bl	800f4fc <__lshift>
 800cf6c:	4606      	mov	r6, r0
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	f43f ae72 	beq.w	800cc58 <_strtod_l+0x490>
 800cf74:	9a05      	ldr	r2, [sp, #20]
 800cf76:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cf78:	4620      	mov	r0, r4
 800cf7a:	f002 fb4b 	bl	800f614 <__mdiff>
 800cf7e:	4605      	mov	r5, r0
 800cf80:	2800      	cmp	r0, #0
 800cf82:	f43f ae69 	beq.w	800cc58 <_strtod_l+0x490>
 800cf86:	68c3      	ldr	r3, [r0, #12]
 800cf88:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	60c3      	str	r3, [r0, #12]
 800cf8e:	4631      	mov	r1, r6
 800cf90:	f002 fb24 	bl	800f5dc <__mcmp>
 800cf94:	2800      	cmp	r0, #0
 800cf96:	da60      	bge.n	800d05a <_strtod_l+0x892>
 800cf98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf9a:	ea53 030a 	orrs.w	r3, r3, sl
 800cf9e:	f040 8082 	bne.w	800d0a6 <_strtod_l+0x8de>
 800cfa2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d17d      	bne.n	800d0a6 <_strtod_l+0x8de>
 800cfaa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cfae:	0d1b      	lsrs	r3, r3, #20
 800cfb0:	051b      	lsls	r3, r3, #20
 800cfb2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cfb6:	d976      	bls.n	800d0a6 <_strtod_l+0x8de>
 800cfb8:	696b      	ldr	r3, [r5, #20]
 800cfba:	b913      	cbnz	r3, 800cfc2 <_strtod_l+0x7fa>
 800cfbc:	692b      	ldr	r3, [r5, #16]
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	dd71      	ble.n	800d0a6 <_strtod_l+0x8de>
 800cfc2:	4629      	mov	r1, r5
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f002 fa98 	bl	800f4fc <__lshift>
 800cfcc:	4631      	mov	r1, r6
 800cfce:	4605      	mov	r5, r0
 800cfd0:	f002 fb04 	bl	800f5dc <__mcmp>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	dd66      	ble.n	800d0a6 <_strtod_l+0x8de>
 800cfd8:	9904      	ldr	r1, [sp, #16]
 800cfda:	4a53      	ldr	r2, [pc, #332]	; (800d128 <_strtod_l+0x960>)
 800cfdc:	465b      	mov	r3, fp
 800cfde:	2900      	cmp	r1, #0
 800cfe0:	f000 8081 	beq.w	800d0e6 <_strtod_l+0x91e>
 800cfe4:	ea02 010b 	and.w	r1, r2, fp
 800cfe8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cfec:	dc7b      	bgt.n	800d0e6 <_strtod_l+0x91e>
 800cfee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cff2:	f77f aea9 	ble.w	800cd48 <_strtod_l+0x580>
 800cff6:	4b4d      	ldr	r3, [pc, #308]	; (800d12c <_strtod_l+0x964>)
 800cff8:	4650      	mov	r0, sl
 800cffa:	4659      	mov	r1, fp
 800cffc:	2200      	movs	r2, #0
 800cffe:	f7f3 fb0b 	bl	8000618 <__aeabi_dmul>
 800d002:	460b      	mov	r3, r1
 800d004:	4303      	orrs	r3, r0
 800d006:	bf08      	it	eq
 800d008:	2322      	moveq	r3, #34	; 0x22
 800d00a:	4682      	mov	sl, r0
 800d00c:	468b      	mov	fp, r1
 800d00e:	bf08      	it	eq
 800d010:	6023      	streq	r3, [r4, #0]
 800d012:	e62b      	b.n	800cc6c <_strtod_l+0x4a4>
 800d014:	f04f 32ff 	mov.w	r2, #4294967295
 800d018:	fa02 f303 	lsl.w	r3, r2, r3
 800d01c:	ea03 0a0a 	and.w	sl, r3, sl
 800d020:	e6e3      	b.n	800cdea <_strtod_l+0x622>
 800d022:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d026:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d02a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d02e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d032:	fa01 f308 	lsl.w	r3, r1, r8
 800d036:	9308      	str	r3, [sp, #32]
 800d038:	910d      	str	r1, [sp, #52]	; 0x34
 800d03a:	e746      	b.n	800ceca <_strtod_l+0x702>
 800d03c:	2300      	movs	r3, #0
 800d03e:	9308      	str	r3, [sp, #32]
 800d040:	2301      	movs	r3, #1
 800d042:	930d      	str	r3, [sp, #52]	; 0x34
 800d044:	e741      	b.n	800ceca <_strtod_l+0x702>
 800d046:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d048:	4642      	mov	r2, r8
 800d04a:	4620      	mov	r0, r4
 800d04c:	f002 fa56 	bl	800f4fc <__lshift>
 800d050:	9018      	str	r0, [sp, #96]	; 0x60
 800d052:	2800      	cmp	r0, #0
 800d054:	f47f af6b 	bne.w	800cf2e <_strtod_l+0x766>
 800d058:	e5fe      	b.n	800cc58 <_strtod_l+0x490>
 800d05a:	465f      	mov	r7, fp
 800d05c:	d16e      	bne.n	800d13c <_strtod_l+0x974>
 800d05e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d060:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d064:	b342      	cbz	r2, 800d0b8 <_strtod_l+0x8f0>
 800d066:	4a32      	ldr	r2, [pc, #200]	; (800d130 <_strtod_l+0x968>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d128      	bne.n	800d0be <_strtod_l+0x8f6>
 800d06c:	9b04      	ldr	r3, [sp, #16]
 800d06e:	4651      	mov	r1, sl
 800d070:	b1eb      	cbz	r3, 800d0ae <_strtod_l+0x8e6>
 800d072:	4b2d      	ldr	r3, [pc, #180]	; (800d128 <_strtod_l+0x960>)
 800d074:	403b      	ands	r3, r7
 800d076:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d07a:	f04f 32ff 	mov.w	r2, #4294967295
 800d07e:	d819      	bhi.n	800d0b4 <_strtod_l+0x8ec>
 800d080:	0d1b      	lsrs	r3, r3, #20
 800d082:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d086:	fa02 f303 	lsl.w	r3, r2, r3
 800d08a:	4299      	cmp	r1, r3
 800d08c:	d117      	bne.n	800d0be <_strtod_l+0x8f6>
 800d08e:	4b29      	ldr	r3, [pc, #164]	; (800d134 <_strtod_l+0x96c>)
 800d090:	429f      	cmp	r7, r3
 800d092:	d102      	bne.n	800d09a <_strtod_l+0x8d2>
 800d094:	3101      	adds	r1, #1
 800d096:	f43f addf 	beq.w	800cc58 <_strtod_l+0x490>
 800d09a:	4b23      	ldr	r3, [pc, #140]	; (800d128 <_strtod_l+0x960>)
 800d09c:	403b      	ands	r3, r7
 800d09e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d0a2:	f04f 0a00 	mov.w	sl, #0
 800d0a6:	9b04      	ldr	r3, [sp, #16]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d1a4      	bne.n	800cff6 <_strtod_l+0x82e>
 800d0ac:	e5de      	b.n	800cc6c <_strtod_l+0x4a4>
 800d0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d0b2:	e7ea      	b.n	800d08a <_strtod_l+0x8c2>
 800d0b4:	4613      	mov	r3, r2
 800d0b6:	e7e8      	b.n	800d08a <_strtod_l+0x8c2>
 800d0b8:	ea53 030a 	orrs.w	r3, r3, sl
 800d0bc:	d08c      	beq.n	800cfd8 <_strtod_l+0x810>
 800d0be:	9b08      	ldr	r3, [sp, #32]
 800d0c0:	b1db      	cbz	r3, 800d0fa <_strtod_l+0x932>
 800d0c2:	423b      	tst	r3, r7
 800d0c4:	d0ef      	beq.n	800d0a6 <_strtod_l+0x8de>
 800d0c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0c8:	9a04      	ldr	r2, [sp, #16]
 800d0ca:	4650      	mov	r0, sl
 800d0cc:	4659      	mov	r1, fp
 800d0ce:	b1c3      	cbz	r3, 800d102 <_strtod_l+0x93a>
 800d0d0:	f7ff fb5b 	bl	800c78a <sulp>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	ec51 0b18 	vmov	r0, r1, d8
 800d0dc:	f7f3 f8e6 	bl	80002ac <__adddf3>
 800d0e0:	4682      	mov	sl, r0
 800d0e2:	468b      	mov	fp, r1
 800d0e4:	e7df      	b.n	800d0a6 <_strtod_l+0x8de>
 800d0e6:	4013      	ands	r3, r2
 800d0e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d0ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d0f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d0f4:	f04f 3aff 	mov.w	sl, #4294967295
 800d0f8:	e7d5      	b.n	800d0a6 <_strtod_l+0x8de>
 800d0fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0fc:	ea13 0f0a 	tst.w	r3, sl
 800d100:	e7e0      	b.n	800d0c4 <_strtod_l+0x8fc>
 800d102:	f7ff fb42 	bl	800c78a <sulp>
 800d106:	4602      	mov	r2, r0
 800d108:	460b      	mov	r3, r1
 800d10a:	ec51 0b18 	vmov	r0, r1, d8
 800d10e:	f7f3 f8cb 	bl	80002a8 <__aeabi_dsub>
 800d112:	2200      	movs	r2, #0
 800d114:	2300      	movs	r3, #0
 800d116:	4682      	mov	sl, r0
 800d118:	468b      	mov	fp, r1
 800d11a:	f7f3 fce5 	bl	8000ae8 <__aeabi_dcmpeq>
 800d11e:	2800      	cmp	r0, #0
 800d120:	d0c1      	beq.n	800d0a6 <_strtod_l+0x8de>
 800d122:	e611      	b.n	800cd48 <_strtod_l+0x580>
 800d124:	fffffc02 	.word	0xfffffc02
 800d128:	7ff00000 	.word	0x7ff00000
 800d12c:	39500000 	.word	0x39500000
 800d130:	000fffff 	.word	0x000fffff
 800d134:	7fefffff 	.word	0x7fefffff
 800d138:	08010a10 	.word	0x08010a10
 800d13c:	4631      	mov	r1, r6
 800d13e:	4628      	mov	r0, r5
 800d140:	f002 fbca 	bl	800f8d8 <__ratio>
 800d144:	ec59 8b10 	vmov	r8, r9, d0
 800d148:	ee10 0a10 	vmov	r0, s0
 800d14c:	2200      	movs	r2, #0
 800d14e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d152:	4649      	mov	r1, r9
 800d154:	f7f3 fcdc 	bl	8000b10 <__aeabi_dcmple>
 800d158:	2800      	cmp	r0, #0
 800d15a:	d07a      	beq.n	800d252 <_strtod_l+0xa8a>
 800d15c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d04a      	beq.n	800d1f8 <_strtod_l+0xa30>
 800d162:	4b95      	ldr	r3, [pc, #596]	; (800d3b8 <_strtod_l+0xbf0>)
 800d164:	2200      	movs	r2, #0
 800d166:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d16a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d3b8 <_strtod_l+0xbf0>
 800d16e:	f04f 0800 	mov.w	r8, #0
 800d172:	4b92      	ldr	r3, [pc, #584]	; (800d3bc <_strtod_l+0xbf4>)
 800d174:	403b      	ands	r3, r7
 800d176:	930d      	str	r3, [sp, #52]	; 0x34
 800d178:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d17a:	4b91      	ldr	r3, [pc, #580]	; (800d3c0 <_strtod_l+0xbf8>)
 800d17c:	429a      	cmp	r2, r3
 800d17e:	f040 80b0 	bne.w	800d2e2 <_strtod_l+0xb1a>
 800d182:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d186:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d18a:	ec4b ab10 	vmov	d0, sl, fp
 800d18e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d192:	f002 fac9 	bl	800f728 <__ulp>
 800d196:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d19a:	ec53 2b10 	vmov	r2, r3, d0
 800d19e:	f7f3 fa3b 	bl	8000618 <__aeabi_dmul>
 800d1a2:	4652      	mov	r2, sl
 800d1a4:	465b      	mov	r3, fp
 800d1a6:	f7f3 f881 	bl	80002ac <__adddf3>
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	4983      	ldr	r1, [pc, #524]	; (800d3bc <_strtod_l+0xbf4>)
 800d1ae:	4a85      	ldr	r2, [pc, #532]	; (800d3c4 <_strtod_l+0xbfc>)
 800d1b0:	4019      	ands	r1, r3
 800d1b2:	4291      	cmp	r1, r2
 800d1b4:	4682      	mov	sl, r0
 800d1b6:	d960      	bls.n	800d27a <_strtod_l+0xab2>
 800d1b8:	ee18 3a90 	vmov	r3, s17
 800d1bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d104      	bne.n	800d1ce <_strtod_l+0xa06>
 800d1c4:	ee18 3a10 	vmov	r3, s16
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	f43f ad45 	beq.w	800cc58 <_strtod_l+0x490>
 800d1ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d3d0 <_strtod_l+0xc08>
 800d1d2:	f04f 3aff 	mov.w	sl, #4294967295
 800d1d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f001 ff73 	bl	800f0c4 <_Bfree>
 800d1de:	9905      	ldr	r1, [sp, #20]
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	f001 ff6f 	bl	800f0c4 <_Bfree>
 800d1e6:	4631      	mov	r1, r6
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	f001 ff6b 	bl	800f0c4 <_Bfree>
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	f001 ff67 	bl	800f0c4 <_Bfree>
 800d1f6:	e61a      	b.n	800ce2e <_strtod_l+0x666>
 800d1f8:	f1ba 0f00 	cmp.w	sl, #0
 800d1fc:	d11b      	bne.n	800d236 <_strtod_l+0xa6e>
 800d1fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d202:	b9f3      	cbnz	r3, 800d242 <_strtod_l+0xa7a>
 800d204:	4b6c      	ldr	r3, [pc, #432]	; (800d3b8 <_strtod_l+0xbf0>)
 800d206:	2200      	movs	r2, #0
 800d208:	4640      	mov	r0, r8
 800d20a:	4649      	mov	r1, r9
 800d20c:	f7f3 fc76 	bl	8000afc <__aeabi_dcmplt>
 800d210:	b9d0      	cbnz	r0, 800d248 <_strtod_l+0xa80>
 800d212:	4640      	mov	r0, r8
 800d214:	4649      	mov	r1, r9
 800d216:	4b6c      	ldr	r3, [pc, #432]	; (800d3c8 <_strtod_l+0xc00>)
 800d218:	2200      	movs	r2, #0
 800d21a:	f7f3 f9fd 	bl	8000618 <__aeabi_dmul>
 800d21e:	4680      	mov	r8, r0
 800d220:	4689      	mov	r9, r1
 800d222:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d226:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d22a:	9315      	str	r3, [sp, #84]	; 0x54
 800d22c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d230:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d234:	e79d      	b.n	800d172 <_strtod_l+0x9aa>
 800d236:	f1ba 0f01 	cmp.w	sl, #1
 800d23a:	d102      	bne.n	800d242 <_strtod_l+0xa7a>
 800d23c:	2f00      	cmp	r7, #0
 800d23e:	f43f ad83 	beq.w	800cd48 <_strtod_l+0x580>
 800d242:	4b62      	ldr	r3, [pc, #392]	; (800d3cc <_strtod_l+0xc04>)
 800d244:	2200      	movs	r2, #0
 800d246:	e78e      	b.n	800d166 <_strtod_l+0x99e>
 800d248:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d3c8 <_strtod_l+0xc00>
 800d24c:	f04f 0800 	mov.w	r8, #0
 800d250:	e7e7      	b.n	800d222 <_strtod_l+0xa5a>
 800d252:	4b5d      	ldr	r3, [pc, #372]	; (800d3c8 <_strtod_l+0xc00>)
 800d254:	4640      	mov	r0, r8
 800d256:	4649      	mov	r1, r9
 800d258:	2200      	movs	r2, #0
 800d25a:	f7f3 f9dd 	bl	8000618 <__aeabi_dmul>
 800d25e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d260:	4680      	mov	r8, r0
 800d262:	4689      	mov	r9, r1
 800d264:	b933      	cbnz	r3, 800d274 <_strtod_l+0xaac>
 800d266:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d26a:	900e      	str	r0, [sp, #56]	; 0x38
 800d26c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d26e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d272:	e7dd      	b.n	800d230 <_strtod_l+0xa68>
 800d274:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d278:	e7f9      	b.n	800d26e <_strtod_l+0xaa6>
 800d27a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d27e:	9b04      	ldr	r3, [sp, #16]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d1a8      	bne.n	800d1d6 <_strtod_l+0xa0e>
 800d284:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d288:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d28a:	0d1b      	lsrs	r3, r3, #20
 800d28c:	051b      	lsls	r3, r3, #20
 800d28e:	429a      	cmp	r2, r3
 800d290:	d1a1      	bne.n	800d1d6 <_strtod_l+0xa0e>
 800d292:	4640      	mov	r0, r8
 800d294:	4649      	mov	r1, r9
 800d296:	f7f3 fd1f 	bl	8000cd8 <__aeabi_d2lz>
 800d29a:	f7f3 f98f 	bl	80005bc <__aeabi_l2d>
 800d29e:	4602      	mov	r2, r0
 800d2a0:	460b      	mov	r3, r1
 800d2a2:	4640      	mov	r0, r8
 800d2a4:	4649      	mov	r1, r9
 800d2a6:	f7f2 ffff 	bl	80002a8 <__aeabi_dsub>
 800d2aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d2ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2b0:	ea43 030a 	orr.w	r3, r3, sl
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	4680      	mov	r8, r0
 800d2b8:	4689      	mov	r9, r1
 800d2ba:	d055      	beq.n	800d368 <_strtod_l+0xba0>
 800d2bc:	a336      	add	r3, pc, #216	; (adr r3, 800d398 <_strtod_l+0xbd0>)
 800d2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c2:	f7f3 fc1b 	bl	8000afc <__aeabi_dcmplt>
 800d2c6:	2800      	cmp	r0, #0
 800d2c8:	f47f acd0 	bne.w	800cc6c <_strtod_l+0x4a4>
 800d2cc:	a334      	add	r3, pc, #208	; (adr r3, 800d3a0 <_strtod_l+0xbd8>)
 800d2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d2:	4640      	mov	r0, r8
 800d2d4:	4649      	mov	r1, r9
 800d2d6:	f7f3 fc2f 	bl	8000b38 <__aeabi_dcmpgt>
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	f43f af7b 	beq.w	800d1d6 <_strtod_l+0xa0e>
 800d2e0:	e4c4      	b.n	800cc6c <_strtod_l+0x4a4>
 800d2e2:	9b04      	ldr	r3, [sp, #16]
 800d2e4:	b333      	cbz	r3, 800d334 <_strtod_l+0xb6c>
 800d2e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d2ec:	d822      	bhi.n	800d334 <_strtod_l+0xb6c>
 800d2ee:	a32e      	add	r3, pc, #184	; (adr r3, 800d3a8 <_strtod_l+0xbe0>)
 800d2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f4:	4640      	mov	r0, r8
 800d2f6:	4649      	mov	r1, r9
 800d2f8:	f7f3 fc0a 	bl	8000b10 <__aeabi_dcmple>
 800d2fc:	b1a0      	cbz	r0, 800d328 <_strtod_l+0xb60>
 800d2fe:	4649      	mov	r1, r9
 800d300:	4640      	mov	r0, r8
 800d302:	f7f3 fc61 	bl	8000bc8 <__aeabi_d2uiz>
 800d306:	2801      	cmp	r0, #1
 800d308:	bf38      	it	cc
 800d30a:	2001      	movcc	r0, #1
 800d30c:	f7f3 f90a 	bl	8000524 <__aeabi_ui2d>
 800d310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d312:	4680      	mov	r8, r0
 800d314:	4689      	mov	r9, r1
 800d316:	bb23      	cbnz	r3, 800d362 <_strtod_l+0xb9a>
 800d318:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d31c:	9010      	str	r0, [sp, #64]	; 0x40
 800d31e:	9311      	str	r3, [sp, #68]	; 0x44
 800d320:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d324:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d32a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d32c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d330:	1a9b      	subs	r3, r3, r2
 800d332:	9309      	str	r3, [sp, #36]	; 0x24
 800d334:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d338:	eeb0 0a48 	vmov.f32	s0, s16
 800d33c:	eef0 0a68 	vmov.f32	s1, s17
 800d340:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d344:	f002 f9f0 	bl	800f728 <__ulp>
 800d348:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d34c:	ec53 2b10 	vmov	r2, r3, d0
 800d350:	f7f3 f962 	bl	8000618 <__aeabi_dmul>
 800d354:	ec53 2b18 	vmov	r2, r3, d8
 800d358:	f7f2 ffa8 	bl	80002ac <__adddf3>
 800d35c:	4682      	mov	sl, r0
 800d35e:	468b      	mov	fp, r1
 800d360:	e78d      	b.n	800d27e <_strtod_l+0xab6>
 800d362:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d366:	e7db      	b.n	800d320 <_strtod_l+0xb58>
 800d368:	a311      	add	r3, pc, #68	; (adr r3, 800d3b0 <_strtod_l+0xbe8>)
 800d36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36e:	f7f3 fbc5 	bl	8000afc <__aeabi_dcmplt>
 800d372:	e7b2      	b.n	800d2da <_strtod_l+0xb12>
 800d374:	2300      	movs	r3, #0
 800d376:	930a      	str	r3, [sp, #40]	; 0x28
 800d378:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d37a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d37c:	6013      	str	r3, [r2, #0]
 800d37e:	f7ff ba6b 	b.w	800c858 <_strtod_l+0x90>
 800d382:	2a65      	cmp	r2, #101	; 0x65
 800d384:	f43f ab5f 	beq.w	800ca46 <_strtod_l+0x27e>
 800d388:	2a45      	cmp	r2, #69	; 0x45
 800d38a:	f43f ab5c 	beq.w	800ca46 <_strtod_l+0x27e>
 800d38e:	2301      	movs	r3, #1
 800d390:	f7ff bb94 	b.w	800cabc <_strtod_l+0x2f4>
 800d394:	f3af 8000 	nop.w
 800d398:	94a03595 	.word	0x94a03595
 800d39c:	3fdfffff 	.word	0x3fdfffff
 800d3a0:	35afe535 	.word	0x35afe535
 800d3a4:	3fe00000 	.word	0x3fe00000
 800d3a8:	ffc00000 	.word	0xffc00000
 800d3ac:	41dfffff 	.word	0x41dfffff
 800d3b0:	94a03595 	.word	0x94a03595
 800d3b4:	3fcfffff 	.word	0x3fcfffff
 800d3b8:	3ff00000 	.word	0x3ff00000
 800d3bc:	7ff00000 	.word	0x7ff00000
 800d3c0:	7fe00000 	.word	0x7fe00000
 800d3c4:	7c9fffff 	.word	0x7c9fffff
 800d3c8:	3fe00000 	.word	0x3fe00000
 800d3cc:	bff00000 	.word	0xbff00000
 800d3d0:	7fefffff 	.word	0x7fefffff

0800d3d4 <_strtod_r>:
 800d3d4:	4b01      	ldr	r3, [pc, #4]	; (800d3dc <_strtod_r+0x8>)
 800d3d6:	f7ff b9f7 	b.w	800c7c8 <_strtod_l>
 800d3da:	bf00      	nop
 800d3dc:	2000144c 	.word	0x2000144c

0800d3e0 <strtok>:
 800d3e0:	4b16      	ldr	r3, [pc, #88]	; (800d43c <strtok+0x5c>)
 800d3e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3e4:	681e      	ldr	r6, [r3, #0]
 800d3e6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800d3e8:	4605      	mov	r5, r0
 800d3ea:	b9fc      	cbnz	r4, 800d42c <strtok+0x4c>
 800d3ec:	2050      	movs	r0, #80	; 0x50
 800d3ee:	9101      	str	r1, [sp, #4]
 800d3f0:	f7fe f824 	bl	800b43c <malloc>
 800d3f4:	9901      	ldr	r1, [sp, #4]
 800d3f6:	65b0      	str	r0, [r6, #88]	; 0x58
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	b920      	cbnz	r0, 800d406 <strtok+0x26>
 800d3fc:	4b10      	ldr	r3, [pc, #64]	; (800d440 <strtok+0x60>)
 800d3fe:	4811      	ldr	r0, [pc, #68]	; (800d444 <strtok+0x64>)
 800d400:	2157      	movs	r1, #87	; 0x57
 800d402:	f7fd ffc1 	bl	800b388 <__assert_func>
 800d406:	e9c0 4400 	strd	r4, r4, [r0]
 800d40a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d40e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d412:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d416:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d41a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d41e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d422:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d426:	6184      	str	r4, [r0, #24]
 800d428:	7704      	strb	r4, [r0, #28]
 800d42a:	6244      	str	r4, [r0, #36]	; 0x24
 800d42c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800d42e:	2301      	movs	r3, #1
 800d430:	4628      	mov	r0, r5
 800d432:	b002      	add	sp, #8
 800d434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d438:	f000 b806 	b.w	800d448 <__strtok_r>
 800d43c:	200013e4 	.word	0x200013e4
 800d440:	08010a38 	.word	0x08010a38
 800d444:	08010a4f 	.word	0x08010a4f

0800d448 <__strtok_r>:
 800d448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d44a:	b908      	cbnz	r0, 800d450 <__strtok_r+0x8>
 800d44c:	6810      	ldr	r0, [r2, #0]
 800d44e:	b188      	cbz	r0, 800d474 <__strtok_r+0x2c>
 800d450:	4604      	mov	r4, r0
 800d452:	4620      	mov	r0, r4
 800d454:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d458:	460f      	mov	r7, r1
 800d45a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d45e:	b91e      	cbnz	r6, 800d468 <__strtok_r+0x20>
 800d460:	b965      	cbnz	r5, 800d47c <__strtok_r+0x34>
 800d462:	6015      	str	r5, [r2, #0]
 800d464:	4628      	mov	r0, r5
 800d466:	e005      	b.n	800d474 <__strtok_r+0x2c>
 800d468:	42b5      	cmp	r5, r6
 800d46a:	d1f6      	bne.n	800d45a <__strtok_r+0x12>
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d1f0      	bne.n	800d452 <__strtok_r+0xa>
 800d470:	6014      	str	r4, [r2, #0]
 800d472:	7003      	strb	r3, [r0, #0]
 800d474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d476:	461c      	mov	r4, r3
 800d478:	e00c      	b.n	800d494 <__strtok_r+0x4c>
 800d47a:	b915      	cbnz	r5, 800d482 <__strtok_r+0x3a>
 800d47c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d480:	460e      	mov	r6, r1
 800d482:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d486:	42ab      	cmp	r3, r5
 800d488:	d1f7      	bne.n	800d47a <__strtok_r+0x32>
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d0f3      	beq.n	800d476 <__strtok_r+0x2e>
 800d48e:	2300      	movs	r3, #0
 800d490:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d494:	6014      	str	r4, [r2, #0]
 800d496:	e7ed      	b.n	800d474 <__strtok_r+0x2c>

0800d498 <_strtol_l.constprop.0>:
 800d498:	2b01      	cmp	r3, #1
 800d49a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d49e:	d001      	beq.n	800d4a4 <_strtol_l.constprop.0+0xc>
 800d4a0:	2b24      	cmp	r3, #36	; 0x24
 800d4a2:	d906      	bls.n	800d4b2 <_strtol_l.constprop.0+0x1a>
 800d4a4:	f7fd ff8e 	bl	800b3c4 <__errno>
 800d4a8:	2316      	movs	r3, #22
 800d4aa:	6003      	str	r3, [r0, #0]
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d598 <_strtol_l.constprop.0+0x100>
 800d4b6:	460d      	mov	r5, r1
 800d4b8:	462e      	mov	r6, r5
 800d4ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4be:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d4c2:	f017 0708 	ands.w	r7, r7, #8
 800d4c6:	d1f7      	bne.n	800d4b8 <_strtol_l.constprop.0+0x20>
 800d4c8:	2c2d      	cmp	r4, #45	; 0x2d
 800d4ca:	d132      	bne.n	800d532 <_strtol_l.constprop.0+0x9a>
 800d4cc:	782c      	ldrb	r4, [r5, #0]
 800d4ce:	2701      	movs	r7, #1
 800d4d0:	1cb5      	adds	r5, r6, #2
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d05b      	beq.n	800d58e <_strtol_l.constprop.0+0xf6>
 800d4d6:	2b10      	cmp	r3, #16
 800d4d8:	d109      	bne.n	800d4ee <_strtol_l.constprop.0+0x56>
 800d4da:	2c30      	cmp	r4, #48	; 0x30
 800d4dc:	d107      	bne.n	800d4ee <_strtol_l.constprop.0+0x56>
 800d4de:	782c      	ldrb	r4, [r5, #0]
 800d4e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d4e4:	2c58      	cmp	r4, #88	; 0x58
 800d4e6:	d14d      	bne.n	800d584 <_strtol_l.constprop.0+0xec>
 800d4e8:	786c      	ldrb	r4, [r5, #1]
 800d4ea:	2310      	movs	r3, #16
 800d4ec:	3502      	adds	r5, #2
 800d4ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d4f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d4f6:	f04f 0c00 	mov.w	ip, #0
 800d4fa:	fbb8 f9f3 	udiv	r9, r8, r3
 800d4fe:	4666      	mov	r6, ip
 800d500:	fb03 8a19 	mls	sl, r3, r9, r8
 800d504:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d508:	f1be 0f09 	cmp.w	lr, #9
 800d50c:	d816      	bhi.n	800d53c <_strtol_l.constprop.0+0xa4>
 800d50e:	4674      	mov	r4, lr
 800d510:	42a3      	cmp	r3, r4
 800d512:	dd24      	ble.n	800d55e <_strtol_l.constprop.0+0xc6>
 800d514:	f1bc 0f00 	cmp.w	ip, #0
 800d518:	db1e      	blt.n	800d558 <_strtol_l.constprop.0+0xc0>
 800d51a:	45b1      	cmp	r9, r6
 800d51c:	d31c      	bcc.n	800d558 <_strtol_l.constprop.0+0xc0>
 800d51e:	d101      	bne.n	800d524 <_strtol_l.constprop.0+0x8c>
 800d520:	45a2      	cmp	sl, r4
 800d522:	db19      	blt.n	800d558 <_strtol_l.constprop.0+0xc0>
 800d524:	fb06 4603 	mla	r6, r6, r3, r4
 800d528:	f04f 0c01 	mov.w	ip, #1
 800d52c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d530:	e7e8      	b.n	800d504 <_strtol_l.constprop.0+0x6c>
 800d532:	2c2b      	cmp	r4, #43	; 0x2b
 800d534:	bf04      	itt	eq
 800d536:	782c      	ldrbeq	r4, [r5, #0]
 800d538:	1cb5      	addeq	r5, r6, #2
 800d53a:	e7ca      	b.n	800d4d2 <_strtol_l.constprop.0+0x3a>
 800d53c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d540:	f1be 0f19 	cmp.w	lr, #25
 800d544:	d801      	bhi.n	800d54a <_strtol_l.constprop.0+0xb2>
 800d546:	3c37      	subs	r4, #55	; 0x37
 800d548:	e7e2      	b.n	800d510 <_strtol_l.constprop.0+0x78>
 800d54a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d54e:	f1be 0f19 	cmp.w	lr, #25
 800d552:	d804      	bhi.n	800d55e <_strtol_l.constprop.0+0xc6>
 800d554:	3c57      	subs	r4, #87	; 0x57
 800d556:	e7db      	b.n	800d510 <_strtol_l.constprop.0+0x78>
 800d558:	f04f 3cff 	mov.w	ip, #4294967295
 800d55c:	e7e6      	b.n	800d52c <_strtol_l.constprop.0+0x94>
 800d55e:	f1bc 0f00 	cmp.w	ip, #0
 800d562:	da05      	bge.n	800d570 <_strtol_l.constprop.0+0xd8>
 800d564:	2322      	movs	r3, #34	; 0x22
 800d566:	6003      	str	r3, [r0, #0]
 800d568:	4646      	mov	r6, r8
 800d56a:	b942      	cbnz	r2, 800d57e <_strtol_l.constprop.0+0xe6>
 800d56c:	4630      	mov	r0, r6
 800d56e:	e79e      	b.n	800d4ae <_strtol_l.constprop.0+0x16>
 800d570:	b107      	cbz	r7, 800d574 <_strtol_l.constprop.0+0xdc>
 800d572:	4276      	negs	r6, r6
 800d574:	2a00      	cmp	r2, #0
 800d576:	d0f9      	beq.n	800d56c <_strtol_l.constprop.0+0xd4>
 800d578:	f1bc 0f00 	cmp.w	ip, #0
 800d57c:	d000      	beq.n	800d580 <_strtol_l.constprop.0+0xe8>
 800d57e:	1e69      	subs	r1, r5, #1
 800d580:	6011      	str	r1, [r2, #0]
 800d582:	e7f3      	b.n	800d56c <_strtol_l.constprop.0+0xd4>
 800d584:	2430      	movs	r4, #48	; 0x30
 800d586:	2b00      	cmp	r3, #0
 800d588:	d1b1      	bne.n	800d4ee <_strtol_l.constprop.0+0x56>
 800d58a:	2308      	movs	r3, #8
 800d58c:	e7af      	b.n	800d4ee <_strtol_l.constprop.0+0x56>
 800d58e:	2c30      	cmp	r4, #48	; 0x30
 800d590:	d0a5      	beq.n	800d4de <_strtol_l.constprop.0+0x46>
 800d592:	230a      	movs	r3, #10
 800d594:	e7ab      	b.n	800d4ee <_strtol_l.constprop.0+0x56>
 800d596:	bf00      	nop
 800d598:	08010aad 	.word	0x08010aad

0800d59c <_strtol_r>:
 800d59c:	f7ff bf7c 	b.w	800d498 <_strtol_l.constprop.0>

0800d5a0 <__swbuf_r>:
 800d5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5a2:	460e      	mov	r6, r1
 800d5a4:	4614      	mov	r4, r2
 800d5a6:	4605      	mov	r5, r0
 800d5a8:	b118      	cbz	r0, 800d5b2 <__swbuf_r+0x12>
 800d5aa:	6983      	ldr	r3, [r0, #24]
 800d5ac:	b90b      	cbnz	r3, 800d5b2 <__swbuf_r+0x12>
 800d5ae:	f001 f877 	bl	800e6a0 <__sinit>
 800d5b2:	4b21      	ldr	r3, [pc, #132]	; (800d638 <__swbuf_r+0x98>)
 800d5b4:	429c      	cmp	r4, r3
 800d5b6:	d12b      	bne.n	800d610 <__swbuf_r+0x70>
 800d5b8:	686c      	ldr	r4, [r5, #4]
 800d5ba:	69a3      	ldr	r3, [r4, #24]
 800d5bc:	60a3      	str	r3, [r4, #8]
 800d5be:	89a3      	ldrh	r3, [r4, #12]
 800d5c0:	071a      	lsls	r2, r3, #28
 800d5c2:	d52f      	bpl.n	800d624 <__swbuf_r+0x84>
 800d5c4:	6923      	ldr	r3, [r4, #16]
 800d5c6:	b36b      	cbz	r3, 800d624 <__swbuf_r+0x84>
 800d5c8:	6923      	ldr	r3, [r4, #16]
 800d5ca:	6820      	ldr	r0, [r4, #0]
 800d5cc:	1ac0      	subs	r0, r0, r3
 800d5ce:	6963      	ldr	r3, [r4, #20]
 800d5d0:	b2f6      	uxtb	r6, r6
 800d5d2:	4283      	cmp	r3, r0
 800d5d4:	4637      	mov	r7, r6
 800d5d6:	dc04      	bgt.n	800d5e2 <__swbuf_r+0x42>
 800d5d8:	4621      	mov	r1, r4
 800d5da:	4628      	mov	r0, r5
 800d5dc:	f000 ffcc 	bl	800e578 <_fflush_r>
 800d5e0:	bb30      	cbnz	r0, 800d630 <__swbuf_r+0x90>
 800d5e2:	68a3      	ldr	r3, [r4, #8]
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	60a3      	str	r3, [r4, #8]
 800d5e8:	6823      	ldr	r3, [r4, #0]
 800d5ea:	1c5a      	adds	r2, r3, #1
 800d5ec:	6022      	str	r2, [r4, #0]
 800d5ee:	701e      	strb	r6, [r3, #0]
 800d5f0:	6963      	ldr	r3, [r4, #20]
 800d5f2:	3001      	adds	r0, #1
 800d5f4:	4283      	cmp	r3, r0
 800d5f6:	d004      	beq.n	800d602 <__swbuf_r+0x62>
 800d5f8:	89a3      	ldrh	r3, [r4, #12]
 800d5fa:	07db      	lsls	r3, r3, #31
 800d5fc:	d506      	bpl.n	800d60c <__swbuf_r+0x6c>
 800d5fe:	2e0a      	cmp	r6, #10
 800d600:	d104      	bne.n	800d60c <__swbuf_r+0x6c>
 800d602:	4621      	mov	r1, r4
 800d604:	4628      	mov	r0, r5
 800d606:	f000 ffb7 	bl	800e578 <_fflush_r>
 800d60a:	b988      	cbnz	r0, 800d630 <__swbuf_r+0x90>
 800d60c:	4638      	mov	r0, r7
 800d60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d610:	4b0a      	ldr	r3, [pc, #40]	; (800d63c <__swbuf_r+0x9c>)
 800d612:	429c      	cmp	r4, r3
 800d614:	d101      	bne.n	800d61a <__swbuf_r+0x7a>
 800d616:	68ac      	ldr	r4, [r5, #8]
 800d618:	e7cf      	b.n	800d5ba <__swbuf_r+0x1a>
 800d61a:	4b09      	ldr	r3, [pc, #36]	; (800d640 <__swbuf_r+0xa0>)
 800d61c:	429c      	cmp	r4, r3
 800d61e:	bf08      	it	eq
 800d620:	68ec      	ldreq	r4, [r5, #12]
 800d622:	e7ca      	b.n	800d5ba <__swbuf_r+0x1a>
 800d624:	4621      	mov	r1, r4
 800d626:	4628      	mov	r0, r5
 800d628:	f000 f81e 	bl	800d668 <__swsetup_r>
 800d62c:	2800      	cmp	r0, #0
 800d62e:	d0cb      	beq.n	800d5c8 <__swbuf_r+0x28>
 800d630:	f04f 37ff 	mov.w	r7, #4294967295
 800d634:	e7ea      	b.n	800d60c <__swbuf_r+0x6c>
 800d636:	bf00      	nop
 800d638:	08010c48 	.word	0x08010c48
 800d63c:	08010c68 	.word	0x08010c68
 800d640:	08010c28 	.word	0x08010c28

0800d644 <_write_r>:
 800d644:	b538      	push	{r3, r4, r5, lr}
 800d646:	4d07      	ldr	r5, [pc, #28]	; (800d664 <_write_r+0x20>)
 800d648:	4604      	mov	r4, r0
 800d64a:	4608      	mov	r0, r1
 800d64c:	4611      	mov	r1, r2
 800d64e:	2200      	movs	r2, #0
 800d650:	602a      	str	r2, [r5, #0]
 800d652:	461a      	mov	r2, r3
 800d654:	f7f9 f80d 	bl	8006672 <_write>
 800d658:	1c43      	adds	r3, r0, #1
 800d65a:	d102      	bne.n	800d662 <_write_r+0x1e>
 800d65c:	682b      	ldr	r3, [r5, #0]
 800d65e:	b103      	cbz	r3, 800d662 <_write_r+0x1e>
 800d660:	6023      	str	r3, [r4, #0]
 800d662:	bd38      	pop	{r3, r4, r5, pc}
 800d664:	20002bec 	.word	0x20002bec

0800d668 <__swsetup_r>:
 800d668:	4b32      	ldr	r3, [pc, #200]	; (800d734 <__swsetup_r+0xcc>)
 800d66a:	b570      	push	{r4, r5, r6, lr}
 800d66c:	681d      	ldr	r5, [r3, #0]
 800d66e:	4606      	mov	r6, r0
 800d670:	460c      	mov	r4, r1
 800d672:	b125      	cbz	r5, 800d67e <__swsetup_r+0x16>
 800d674:	69ab      	ldr	r3, [r5, #24]
 800d676:	b913      	cbnz	r3, 800d67e <__swsetup_r+0x16>
 800d678:	4628      	mov	r0, r5
 800d67a:	f001 f811 	bl	800e6a0 <__sinit>
 800d67e:	4b2e      	ldr	r3, [pc, #184]	; (800d738 <__swsetup_r+0xd0>)
 800d680:	429c      	cmp	r4, r3
 800d682:	d10f      	bne.n	800d6a4 <__swsetup_r+0x3c>
 800d684:	686c      	ldr	r4, [r5, #4]
 800d686:	89a3      	ldrh	r3, [r4, #12]
 800d688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d68c:	0719      	lsls	r1, r3, #28
 800d68e:	d42c      	bmi.n	800d6ea <__swsetup_r+0x82>
 800d690:	06dd      	lsls	r5, r3, #27
 800d692:	d411      	bmi.n	800d6b8 <__swsetup_r+0x50>
 800d694:	2309      	movs	r3, #9
 800d696:	6033      	str	r3, [r6, #0]
 800d698:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d69c:	81a3      	strh	r3, [r4, #12]
 800d69e:	f04f 30ff 	mov.w	r0, #4294967295
 800d6a2:	e03e      	b.n	800d722 <__swsetup_r+0xba>
 800d6a4:	4b25      	ldr	r3, [pc, #148]	; (800d73c <__swsetup_r+0xd4>)
 800d6a6:	429c      	cmp	r4, r3
 800d6a8:	d101      	bne.n	800d6ae <__swsetup_r+0x46>
 800d6aa:	68ac      	ldr	r4, [r5, #8]
 800d6ac:	e7eb      	b.n	800d686 <__swsetup_r+0x1e>
 800d6ae:	4b24      	ldr	r3, [pc, #144]	; (800d740 <__swsetup_r+0xd8>)
 800d6b0:	429c      	cmp	r4, r3
 800d6b2:	bf08      	it	eq
 800d6b4:	68ec      	ldreq	r4, [r5, #12]
 800d6b6:	e7e6      	b.n	800d686 <__swsetup_r+0x1e>
 800d6b8:	0758      	lsls	r0, r3, #29
 800d6ba:	d512      	bpl.n	800d6e2 <__swsetup_r+0x7a>
 800d6bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6be:	b141      	cbz	r1, 800d6d2 <__swsetup_r+0x6a>
 800d6c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6c4:	4299      	cmp	r1, r3
 800d6c6:	d002      	beq.n	800d6ce <__swsetup_r+0x66>
 800d6c8:	4630      	mov	r0, r6
 800d6ca:	f7fd fecf 	bl	800b46c <_free_r>
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	6363      	str	r3, [r4, #52]	; 0x34
 800d6d2:	89a3      	ldrh	r3, [r4, #12]
 800d6d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d6d8:	81a3      	strh	r3, [r4, #12]
 800d6da:	2300      	movs	r3, #0
 800d6dc:	6063      	str	r3, [r4, #4]
 800d6de:	6923      	ldr	r3, [r4, #16]
 800d6e0:	6023      	str	r3, [r4, #0]
 800d6e2:	89a3      	ldrh	r3, [r4, #12]
 800d6e4:	f043 0308 	orr.w	r3, r3, #8
 800d6e8:	81a3      	strh	r3, [r4, #12]
 800d6ea:	6923      	ldr	r3, [r4, #16]
 800d6ec:	b94b      	cbnz	r3, 800d702 <__swsetup_r+0x9a>
 800d6ee:	89a3      	ldrh	r3, [r4, #12]
 800d6f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d6f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6f8:	d003      	beq.n	800d702 <__swsetup_r+0x9a>
 800d6fa:	4621      	mov	r1, r4
 800d6fc:	4630      	mov	r0, r6
 800d6fe:	f001 fc1b 	bl	800ef38 <__smakebuf_r>
 800d702:	89a0      	ldrh	r0, [r4, #12]
 800d704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d708:	f010 0301 	ands.w	r3, r0, #1
 800d70c:	d00a      	beq.n	800d724 <__swsetup_r+0xbc>
 800d70e:	2300      	movs	r3, #0
 800d710:	60a3      	str	r3, [r4, #8]
 800d712:	6963      	ldr	r3, [r4, #20]
 800d714:	425b      	negs	r3, r3
 800d716:	61a3      	str	r3, [r4, #24]
 800d718:	6923      	ldr	r3, [r4, #16]
 800d71a:	b943      	cbnz	r3, 800d72e <__swsetup_r+0xc6>
 800d71c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d720:	d1ba      	bne.n	800d698 <__swsetup_r+0x30>
 800d722:	bd70      	pop	{r4, r5, r6, pc}
 800d724:	0781      	lsls	r1, r0, #30
 800d726:	bf58      	it	pl
 800d728:	6963      	ldrpl	r3, [r4, #20]
 800d72a:	60a3      	str	r3, [r4, #8]
 800d72c:	e7f4      	b.n	800d718 <__swsetup_r+0xb0>
 800d72e:	2000      	movs	r0, #0
 800d730:	e7f7      	b.n	800d722 <__swsetup_r+0xba>
 800d732:	bf00      	nop
 800d734:	200013e4 	.word	0x200013e4
 800d738:	08010c48 	.word	0x08010c48
 800d73c:	08010c68 	.word	0x08010c68
 800d740:	08010c28 	.word	0x08010c28

0800d744 <abort>:
 800d744:	b508      	push	{r3, lr}
 800d746:	2006      	movs	r0, #6
 800d748:	f002 fec6 	bl	80104d8 <raise>
 800d74c:	2001      	movs	r0, #1
 800d74e:	f7f8 ff69 	bl	8006624 <_exit>
	...

0800d754 <_close_r>:
 800d754:	b538      	push	{r3, r4, r5, lr}
 800d756:	4d06      	ldr	r5, [pc, #24]	; (800d770 <_close_r+0x1c>)
 800d758:	2300      	movs	r3, #0
 800d75a:	4604      	mov	r4, r0
 800d75c:	4608      	mov	r0, r1
 800d75e:	602b      	str	r3, [r5, #0]
 800d760:	f7f8 ffa3 	bl	80066aa <_close>
 800d764:	1c43      	adds	r3, r0, #1
 800d766:	d102      	bne.n	800d76e <_close_r+0x1a>
 800d768:	682b      	ldr	r3, [r5, #0]
 800d76a:	b103      	cbz	r3, 800d76e <_close_r+0x1a>
 800d76c:	6023      	str	r3, [r4, #0]
 800d76e:	bd38      	pop	{r3, r4, r5, pc}
 800d770:	20002bec 	.word	0x20002bec

0800d774 <quorem>:
 800d774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d778:	6903      	ldr	r3, [r0, #16]
 800d77a:	690c      	ldr	r4, [r1, #16]
 800d77c:	42a3      	cmp	r3, r4
 800d77e:	4607      	mov	r7, r0
 800d780:	f2c0 8081 	blt.w	800d886 <quorem+0x112>
 800d784:	3c01      	subs	r4, #1
 800d786:	f101 0814 	add.w	r8, r1, #20
 800d78a:	f100 0514 	add.w	r5, r0, #20
 800d78e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d792:	9301      	str	r3, [sp, #4]
 800d794:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d798:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d79c:	3301      	adds	r3, #1
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d7a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d7a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d7ac:	d331      	bcc.n	800d812 <quorem+0x9e>
 800d7ae:	f04f 0e00 	mov.w	lr, #0
 800d7b2:	4640      	mov	r0, r8
 800d7b4:	46ac      	mov	ip, r5
 800d7b6:	46f2      	mov	sl, lr
 800d7b8:	f850 2b04 	ldr.w	r2, [r0], #4
 800d7bc:	b293      	uxth	r3, r2
 800d7be:	fb06 e303 	mla	r3, r6, r3, lr
 800d7c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	ebaa 0303 	sub.w	r3, sl, r3
 800d7cc:	f8dc a000 	ldr.w	sl, [ip]
 800d7d0:	0c12      	lsrs	r2, r2, #16
 800d7d2:	fa13 f38a 	uxtah	r3, r3, sl
 800d7d6:	fb06 e202 	mla	r2, r6, r2, lr
 800d7da:	9300      	str	r3, [sp, #0]
 800d7dc:	9b00      	ldr	r3, [sp, #0]
 800d7de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d7e2:	b292      	uxth	r2, r2
 800d7e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d7e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d7ec:	f8bd 3000 	ldrh.w	r3, [sp]
 800d7f0:	4581      	cmp	r9, r0
 800d7f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7f6:	f84c 3b04 	str.w	r3, [ip], #4
 800d7fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d7fe:	d2db      	bcs.n	800d7b8 <quorem+0x44>
 800d800:	f855 300b 	ldr.w	r3, [r5, fp]
 800d804:	b92b      	cbnz	r3, 800d812 <quorem+0x9e>
 800d806:	9b01      	ldr	r3, [sp, #4]
 800d808:	3b04      	subs	r3, #4
 800d80a:	429d      	cmp	r5, r3
 800d80c:	461a      	mov	r2, r3
 800d80e:	d32e      	bcc.n	800d86e <quorem+0xfa>
 800d810:	613c      	str	r4, [r7, #16]
 800d812:	4638      	mov	r0, r7
 800d814:	f001 fee2 	bl	800f5dc <__mcmp>
 800d818:	2800      	cmp	r0, #0
 800d81a:	db24      	blt.n	800d866 <quorem+0xf2>
 800d81c:	3601      	adds	r6, #1
 800d81e:	4628      	mov	r0, r5
 800d820:	f04f 0c00 	mov.w	ip, #0
 800d824:	f858 2b04 	ldr.w	r2, [r8], #4
 800d828:	f8d0 e000 	ldr.w	lr, [r0]
 800d82c:	b293      	uxth	r3, r2
 800d82e:	ebac 0303 	sub.w	r3, ip, r3
 800d832:	0c12      	lsrs	r2, r2, #16
 800d834:	fa13 f38e 	uxtah	r3, r3, lr
 800d838:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d83c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d840:	b29b      	uxth	r3, r3
 800d842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d846:	45c1      	cmp	r9, r8
 800d848:	f840 3b04 	str.w	r3, [r0], #4
 800d84c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d850:	d2e8      	bcs.n	800d824 <quorem+0xb0>
 800d852:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d856:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d85a:	b922      	cbnz	r2, 800d866 <quorem+0xf2>
 800d85c:	3b04      	subs	r3, #4
 800d85e:	429d      	cmp	r5, r3
 800d860:	461a      	mov	r2, r3
 800d862:	d30a      	bcc.n	800d87a <quorem+0x106>
 800d864:	613c      	str	r4, [r7, #16]
 800d866:	4630      	mov	r0, r6
 800d868:	b003      	add	sp, #12
 800d86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d86e:	6812      	ldr	r2, [r2, #0]
 800d870:	3b04      	subs	r3, #4
 800d872:	2a00      	cmp	r2, #0
 800d874:	d1cc      	bne.n	800d810 <quorem+0x9c>
 800d876:	3c01      	subs	r4, #1
 800d878:	e7c7      	b.n	800d80a <quorem+0x96>
 800d87a:	6812      	ldr	r2, [r2, #0]
 800d87c:	3b04      	subs	r3, #4
 800d87e:	2a00      	cmp	r2, #0
 800d880:	d1f0      	bne.n	800d864 <quorem+0xf0>
 800d882:	3c01      	subs	r4, #1
 800d884:	e7eb      	b.n	800d85e <quorem+0xea>
 800d886:	2000      	movs	r0, #0
 800d888:	e7ee      	b.n	800d868 <quorem+0xf4>
 800d88a:	0000      	movs	r0, r0
 800d88c:	0000      	movs	r0, r0
	...

0800d890 <_dtoa_r>:
 800d890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d894:	ed2d 8b04 	vpush	{d8-d9}
 800d898:	ec57 6b10 	vmov	r6, r7, d0
 800d89c:	b093      	sub	sp, #76	; 0x4c
 800d89e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d8a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d8a4:	9106      	str	r1, [sp, #24]
 800d8a6:	ee10 aa10 	vmov	sl, s0
 800d8aa:	4604      	mov	r4, r0
 800d8ac:	9209      	str	r2, [sp, #36]	; 0x24
 800d8ae:	930c      	str	r3, [sp, #48]	; 0x30
 800d8b0:	46bb      	mov	fp, r7
 800d8b2:	b975      	cbnz	r5, 800d8d2 <_dtoa_r+0x42>
 800d8b4:	2010      	movs	r0, #16
 800d8b6:	f7fd fdc1 	bl	800b43c <malloc>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	6260      	str	r0, [r4, #36]	; 0x24
 800d8be:	b920      	cbnz	r0, 800d8ca <_dtoa_r+0x3a>
 800d8c0:	4ba7      	ldr	r3, [pc, #668]	; (800db60 <_dtoa_r+0x2d0>)
 800d8c2:	21ea      	movs	r1, #234	; 0xea
 800d8c4:	48a7      	ldr	r0, [pc, #668]	; (800db64 <_dtoa_r+0x2d4>)
 800d8c6:	f7fd fd5f 	bl	800b388 <__assert_func>
 800d8ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d8ce:	6005      	str	r5, [r0, #0]
 800d8d0:	60c5      	str	r5, [r0, #12]
 800d8d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8d4:	6819      	ldr	r1, [r3, #0]
 800d8d6:	b151      	cbz	r1, 800d8ee <_dtoa_r+0x5e>
 800d8d8:	685a      	ldr	r2, [r3, #4]
 800d8da:	604a      	str	r2, [r1, #4]
 800d8dc:	2301      	movs	r3, #1
 800d8de:	4093      	lsls	r3, r2
 800d8e0:	608b      	str	r3, [r1, #8]
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	f001 fbee 	bl	800f0c4 <_Bfree>
 800d8e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	601a      	str	r2, [r3, #0]
 800d8ee:	1e3b      	subs	r3, r7, #0
 800d8f0:	bfaa      	itet	ge
 800d8f2:	2300      	movge	r3, #0
 800d8f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d8f8:	f8c8 3000 	strge.w	r3, [r8]
 800d8fc:	4b9a      	ldr	r3, [pc, #616]	; (800db68 <_dtoa_r+0x2d8>)
 800d8fe:	bfbc      	itt	lt
 800d900:	2201      	movlt	r2, #1
 800d902:	f8c8 2000 	strlt.w	r2, [r8]
 800d906:	ea33 030b 	bics.w	r3, r3, fp
 800d90a:	d11b      	bne.n	800d944 <_dtoa_r+0xb4>
 800d90c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d90e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d912:	6013      	str	r3, [r2, #0]
 800d914:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d918:	4333      	orrs	r3, r6
 800d91a:	f000 8592 	beq.w	800e442 <_dtoa_r+0xbb2>
 800d91e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d920:	b963      	cbnz	r3, 800d93c <_dtoa_r+0xac>
 800d922:	4b92      	ldr	r3, [pc, #584]	; (800db6c <_dtoa_r+0x2dc>)
 800d924:	e022      	b.n	800d96c <_dtoa_r+0xdc>
 800d926:	4b92      	ldr	r3, [pc, #584]	; (800db70 <_dtoa_r+0x2e0>)
 800d928:	9301      	str	r3, [sp, #4]
 800d92a:	3308      	adds	r3, #8
 800d92c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d92e:	6013      	str	r3, [r2, #0]
 800d930:	9801      	ldr	r0, [sp, #4]
 800d932:	b013      	add	sp, #76	; 0x4c
 800d934:	ecbd 8b04 	vpop	{d8-d9}
 800d938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d93c:	4b8b      	ldr	r3, [pc, #556]	; (800db6c <_dtoa_r+0x2dc>)
 800d93e:	9301      	str	r3, [sp, #4]
 800d940:	3303      	adds	r3, #3
 800d942:	e7f3      	b.n	800d92c <_dtoa_r+0x9c>
 800d944:	2200      	movs	r2, #0
 800d946:	2300      	movs	r3, #0
 800d948:	4650      	mov	r0, sl
 800d94a:	4659      	mov	r1, fp
 800d94c:	f7f3 f8cc 	bl	8000ae8 <__aeabi_dcmpeq>
 800d950:	ec4b ab19 	vmov	d9, sl, fp
 800d954:	4680      	mov	r8, r0
 800d956:	b158      	cbz	r0, 800d970 <_dtoa_r+0xe0>
 800d958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d95a:	2301      	movs	r3, #1
 800d95c:	6013      	str	r3, [r2, #0]
 800d95e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d960:	2b00      	cmp	r3, #0
 800d962:	f000 856b 	beq.w	800e43c <_dtoa_r+0xbac>
 800d966:	4883      	ldr	r0, [pc, #524]	; (800db74 <_dtoa_r+0x2e4>)
 800d968:	6018      	str	r0, [r3, #0]
 800d96a:	1e43      	subs	r3, r0, #1
 800d96c:	9301      	str	r3, [sp, #4]
 800d96e:	e7df      	b.n	800d930 <_dtoa_r+0xa0>
 800d970:	ec4b ab10 	vmov	d0, sl, fp
 800d974:	aa10      	add	r2, sp, #64	; 0x40
 800d976:	a911      	add	r1, sp, #68	; 0x44
 800d978:	4620      	mov	r0, r4
 800d97a:	f001 ff51 	bl	800f820 <__d2b>
 800d97e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d982:	ee08 0a10 	vmov	s16, r0
 800d986:	2d00      	cmp	r5, #0
 800d988:	f000 8084 	beq.w	800da94 <_dtoa_r+0x204>
 800d98c:	ee19 3a90 	vmov	r3, s19
 800d990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d994:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d998:	4656      	mov	r6, sl
 800d99a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d99e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d9a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d9a6:	4b74      	ldr	r3, [pc, #464]	; (800db78 <_dtoa_r+0x2e8>)
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	4630      	mov	r0, r6
 800d9ac:	4639      	mov	r1, r7
 800d9ae:	f7f2 fc7b 	bl	80002a8 <__aeabi_dsub>
 800d9b2:	a365      	add	r3, pc, #404	; (adr r3, 800db48 <_dtoa_r+0x2b8>)
 800d9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b8:	f7f2 fe2e 	bl	8000618 <__aeabi_dmul>
 800d9bc:	a364      	add	r3, pc, #400	; (adr r3, 800db50 <_dtoa_r+0x2c0>)
 800d9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c2:	f7f2 fc73 	bl	80002ac <__adddf3>
 800d9c6:	4606      	mov	r6, r0
 800d9c8:	4628      	mov	r0, r5
 800d9ca:	460f      	mov	r7, r1
 800d9cc:	f7f2 fdba 	bl	8000544 <__aeabi_i2d>
 800d9d0:	a361      	add	r3, pc, #388	; (adr r3, 800db58 <_dtoa_r+0x2c8>)
 800d9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d6:	f7f2 fe1f 	bl	8000618 <__aeabi_dmul>
 800d9da:	4602      	mov	r2, r0
 800d9dc:	460b      	mov	r3, r1
 800d9de:	4630      	mov	r0, r6
 800d9e0:	4639      	mov	r1, r7
 800d9e2:	f7f2 fc63 	bl	80002ac <__adddf3>
 800d9e6:	4606      	mov	r6, r0
 800d9e8:	460f      	mov	r7, r1
 800d9ea:	f7f3 f8c5 	bl	8000b78 <__aeabi_d2iz>
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	9000      	str	r0, [sp, #0]
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	4639      	mov	r1, r7
 800d9f8:	f7f3 f880 	bl	8000afc <__aeabi_dcmplt>
 800d9fc:	b150      	cbz	r0, 800da14 <_dtoa_r+0x184>
 800d9fe:	9800      	ldr	r0, [sp, #0]
 800da00:	f7f2 fda0 	bl	8000544 <__aeabi_i2d>
 800da04:	4632      	mov	r2, r6
 800da06:	463b      	mov	r3, r7
 800da08:	f7f3 f86e 	bl	8000ae8 <__aeabi_dcmpeq>
 800da0c:	b910      	cbnz	r0, 800da14 <_dtoa_r+0x184>
 800da0e:	9b00      	ldr	r3, [sp, #0]
 800da10:	3b01      	subs	r3, #1
 800da12:	9300      	str	r3, [sp, #0]
 800da14:	9b00      	ldr	r3, [sp, #0]
 800da16:	2b16      	cmp	r3, #22
 800da18:	d85a      	bhi.n	800dad0 <_dtoa_r+0x240>
 800da1a:	9a00      	ldr	r2, [sp, #0]
 800da1c:	4b57      	ldr	r3, [pc, #348]	; (800db7c <_dtoa_r+0x2ec>)
 800da1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da26:	ec51 0b19 	vmov	r0, r1, d9
 800da2a:	f7f3 f867 	bl	8000afc <__aeabi_dcmplt>
 800da2e:	2800      	cmp	r0, #0
 800da30:	d050      	beq.n	800dad4 <_dtoa_r+0x244>
 800da32:	9b00      	ldr	r3, [sp, #0]
 800da34:	3b01      	subs	r3, #1
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	2300      	movs	r3, #0
 800da3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800da3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da3e:	1b5d      	subs	r5, r3, r5
 800da40:	1e6b      	subs	r3, r5, #1
 800da42:	9305      	str	r3, [sp, #20]
 800da44:	bf45      	ittet	mi
 800da46:	f1c5 0301 	rsbmi	r3, r5, #1
 800da4a:	9304      	strmi	r3, [sp, #16]
 800da4c:	2300      	movpl	r3, #0
 800da4e:	2300      	movmi	r3, #0
 800da50:	bf4c      	ite	mi
 800da52:	9305      	strmi	r3, [sp, #20]
 800da54:	9304      	strpl	r3, [sp, #16]
 800da56:	9b00      	ldr	r3, [sp, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	db3d      	blt.n	800dad8 <_dtoa_r+0x248>
 800da5c:	9b05      	ldr	r3, [sp, #20]
 800da5e:	9a00      	ldr	r2, [sp, #0]
 800da60:	920a      	str	r2, [sp, #40]	; 0x28
 800da62:	4413      	add	r3, r2
 800da64:	9305      	str	r3, [sp, #20]
 800da66:	2300      	movs	r3, #0
 800da68:	9307      	str	r3, [sp, #28]
 800da6a:	9b06      	ldr	r3, [sp, #24]
 800da6c:	2b09      	cmp	r3, #9
 800da6e:	f200 8089 	bhi.w	800db84 <_dtoa_r+0x2f4>
 800da72:	2b05      	cmp	r3, #5
 800da74:	bfc4      	itt	gt
 800da76:	3b04      	subgt	r3, #4
 800da78:	9306      	strgt	r3, [sp, #24]
 800da7a:	9b06      	ldr	r3, [sp, #24]
 800da7c:	f1a3 0302 	sub.w	r3, r3, #2
 800da80:	bfcc      	ite	gt
 800da82:	2500      	movgt	r5, #0
 800da84:	2501      	movle	r5, #1
 800da86:	2b03      	cmp	r3, #3
 800da88:	f200 8087 	bhi.w	800db9a <_dtoa_r+0x30a>
 800da8c:	e8df f003 	tbb	[pc, r3]
 800da90:	59383a2d 	.word	0x59383a2d
 800da94:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800da98:	441d      	add	r5, r3
 800da9a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800da9e:	2b20      	cmp	r3, #32
 800daa0:	bfc1      	itttt	gt
 800daa2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800daa6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800daaa:	fa0b f303 	lslgt.w	r3, fp, r3
 800daae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dab2:	bfda      	itte	le
 800dab4:	f1c3 0320 	rsble	r3, r3, #32
 800dab8:	fa06 f003 	lslle.w	r0, r6, r3
 800dabc:	4318      	orrgt	r0, r3
 800dabe:	f7f2 fd31 	bl	8000524 <__aeabi_ui2d>
 800dac2:	2301      	movs	r3, #1
 800dac4:	4606      	mov	r6, r0
 800dac6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800daca:	3d01      	subs	r5, #1
 800dacc:	930e      	str	r3, [sp, #56]	; 0x38
 800dace:	e76a      	b.n	800d9a6 <_dtoa_r+0x116>
 800dad0:	2301      	movs	r3, #1
 800dad2:	e7b2      	b.n	800da3a <_dtoa_r+0x1aa>
 800dad4:	900b      	str	r0, [sp, #44]	; 0x2c
 800dad6:	e7b1      	b.n	800da3c <_dtoa_r+0x1ac>
 800dad8:	9b04      	ldr	r3, [sp, #16]
 800dada:	9a00      	ldr	r2, [sp, #0]
 800dadc:	1a9b      	subs	r3, r3, r2
 800dade:	9304      	str	r3, [sp, #16]
 800dae0:	4253      	negs	r3, r2
 800dae2:	9307      	str	r3, [sp, #28]
 800dae4:	2300      	movs	r3, #0
 800dae6:	930a      	str	r3, [sp, #40]	; 0x28
 800dae8:	e7bf      	b.n	800da6a <_dtoa_r+0x1da>
 800daea:	2300      	movs	r3, #0
 800daec:	9308      	str	r3, [sp, #32]
 800daee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	dc55      	bgt.n	800dba0 <_dtoa_r+0x310>
 800daf4:	2301      	movs	r3, #1
 800daf6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dafa:	461a      	mov	r2, r3
 800dafc:	9209      	str	r2, [sp, #36]	; 0x24
 800dafe:	e00c      	b.n	800db1a <_dtoa_r+0x28a>
 800db00:	2301      	movs	r3, #1
 800db02:	e7f3      	b.n	800daec <_dtoa_r+0x25c>
 800db04:	2300      	movs	r3, #0
 800db06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db08:	9308      	str	r3, [sp, #32]
 800db0a:	9b00      	ldr	r3, [sp, #0]
 800db0c:	4413      	add	r3, r2
 800db0e:	9302      	str	r3, [sp, #8]
 800db10:	3301      	adds	r3, #1
 800db12:	2b01      	cmp	r3, #1
 800db14:	9303      	str	r3, [sp, #12]
 800db16:	bfb8      	it	lt
 800db18:	2301      	movlt	r3, #1
 800db1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800db1c:	2200      	movs	r2, #0
 800db1e:	6042      	str	r2, [r0, #4]
 800db20:	2204      	movs	r2, #4
 800db22:	f102 0614 	add.w	r6, r2, #20
 800db26:	429e      	cmp	r6, r3
 800db28:	6841      	ldr	r1, [r0, #4]
 800db2a:	d93d      	bls.n	800dba8 <_dtoa_r+0x318>
 800db2c:	4620      	mov	r0, r4
 800db2e:	f001 fa89 	bl	800f044 <_Balloc>
 800db32:	9001      	str	r0, [sp, #4]
 800db34:	2800      	cmp	r0, #0
 800db36:	d13b      	bne.n	800dbb0 <_dtoa_r+0x320>
 800db38:	4b11      	ldr	r3, [pc, #68]	; (800db80 <_dtoa_r+0x2f0>)
 800db3a:	4602      	mov	r2, r0
 800db3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800db40:	e6c0      	b.n	800d8c4 <_dtoa_r+0x34>
 800db42:	2301      	movs	r3, #1
 800db44:	e7df      	b.n	800db06 <_dtoa_r+0x276>
 800db46:	bf00      	nop
 800db48:	636f4361 	.word	0x636f4361
 800db4c:	3fd287a7 	.word	0x3fd287a7
 800db50:	8b60c8b3 	.word	0x8b60c8b3
 800db54:	3fc68a28 	.word	0x3fc68a28
 800db58:	509f79fb 	.word	0x509f79fb
 800db5c:	3fd34413 	.word	0x3fd34413
 800db60:	08010a38 	.word	0x08010a38
 800db64:	08010bba 	.word	0x08010bba
 800db68:	7ff00000 	.word	0x7ff00000
 800db6c:	08010bb6 	.word	0x08010bb6
 800db70:	08010bad 	.word	0x08010bad
 800db74:	08010e61 	.word	0x08010e61
 800db78:	3ff80000 	.word	0x3ff80000
 800db7c:	08010d88 	.word	0x08010d88
 800db80:	08010c15 	.word	0x08010c15
 800db84:	2501      	movs	r5, #1
 800db86:	2300      	movs	r3, #0
 800db88:	9306      	str	r3, [sp, #24]
 800db8a:	9508      	str	r5, [sp, #32]
 800db8c:	f04f 33ff 	mov.w	r3, #4294967295
 800db90:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800db94:	2200      	movs	r2, #0
 800db96:	2312      	movs	r3, #18
 800db98:	e7b0      	b.n	800dafc <_dtoa_r+0x26c>
 800db9a:	2301      	movs	r3, #1
 800db9c:	9308      	str	r3, [sp, #32]
 800db9e:	e7f5      	b.n	800db8c <_dtoa_r+0x2fc>
 800dba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dba2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dba6:	e7b8      	b.n	800db1a <_dtoa_r+0x28a>
 800dba8:	3101      	adds	r1, #1
 800dbaa:	6041      	str	r1, [r0, #4]
 800dbac:	0052      	lsls	r2, r2, #1
 800dbae:	e7b8      	b.n	800db22 <_dtoa_r+0x292>
 800dbb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbb2:	9a01      	ldr	r2, [sp, #4]
 800dbb4:	601a      	str	r2, [r3, #0]
 800dbb6:	9b03      	ldr	r3, [sp, #12]
 800dbb8:	2b0e      	cmp	r3, #14
 800dbba:	f200 809d 	bhi.w	800dcf8 <_dtoa_r+0x468>
 800dbbe:	2d00      	cmp	r5, #0
 800dbc0:	f000 809a 	beq.w	800dcf8 <_dtoa_r+0x468>
 800dbc4:	9b00      	ldr	r3, [sp, #0]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	dd32      	ble.n	800dc30 <_dtoa_r+0x3a0>
 800dbca:	4ab7      	ldr	r2, [pc, #732]	; (800dea8 <_dtoa_r+0x618>)
 800dbcc:	f003 030f 	and.w	r3, r3, #15
 800dbd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dbd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dbd8:	9b00      	ldr	r3, [sp, #0]
 800dbda:	05d8      	lsls	r0, r3, #23
 800dbdc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800dbe0:	d516      	bpl.n	800dc10 <_dtoa_r+0x380>
 800dbe2:	4bb2      	ldr	r3, [pc, #712]	; (800deac <_dtoa_r+0x61c>)
 800dbe4:	ec51 0b19 	vmov	r0, r1, d9
 800dbe8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dbec:	f7f2 fe3e 	bl	800086c <__aeabi_ddiv>
 800dbf0:	f007 070f 	and.w	r7, r7, #15
 800dbf4:	4682      	mov	sl, r0
 800dbf6:	468b      	mov	fp, r1
 800dbf8:	2503      	movs	r5, #3
 800dbfa:	4eac      	ldr	r6, [pc, #688]	; (800deac <_dtoa_r+0x61c>)
 800dbfc:	b957      	cbnz	r7, 800dc14 <_dtoa_r+0x384>
 800dbfe:	4642      	mov	r2, r8
 800dc00:	464b      	mov	r3, r9
 800dc02:	4650      	mov	r0, sl
 800dc04:	4659      	mov	r1, fp
 800dc06:	f7f2 fe31 	bl	800086c <__aeabi_ddiv>
 800dc0a:	4682      	mov	sl, r0
 800dc0c:	468b      	mov	fp, r1
 800dc0e:	e028      	b.n	800dc62 <_dtoa_r+0x3d2>
 800dc10:	2502      	movs	r5, #2
 800dc12:	e7f2      	b.n	800dbfa <_dtoa_r+0x36a>
 800dc14:	07f9      	lsls	r1, r7, #31
 800dc16:	d508      	bpl.n	800dc2a <_dtoa_r+0x39a>
 800dc18:	4640      	mov	r0, r8
 800dc1a:	4649      	mov	r1, r9
 800dc1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dc20:	f7f2 fcfa 	bl	8000618 <__aeabi_dmul>
 800dc24:	3501      	adds	r5, #1
 800dc26:	4680      	mov	r8, r0
 800dc28:	4689      	mov	r9, r1
 800dc2a:	107f      	asrs	r7, r7, #1
 800dc2c:	3608      	adds	r6, #8
 800dc2e:	e7e5      	b.n	800dbfc <_dtoa_r+0x36c>
 800dc30:	f000 809b 	beq.w	800dd6a <_dtoa_r+0x4da>
 800dc34:	9b00      	ldr	r3, [sp, #0]
 800dc36:	4f9d      	ldr	r7, [pc, #628]	; (800deac <_dtoa_r+0x61c>)
 800dc38:	425e      	negs	r6, r3
 800dc3a:	4b9b      	ldr	r3, [pc, #620]	; (800dea8 <_dtoa_r+0x618>)
 800dc3c:	f006 020f 	and.w	r2, r6, #15
 800dc40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc48:	ec51 0b19 	vmov	r0, r1, d9
 800dc4c:	f7f2 fce4 	bl	8000618 <__aeabi_dmul>
 800dc50:	1136      	asrs	r6, r6, #4
 800dc52:	4682      	mov	sl, r0
 800dc54:	468b      	mov	fp, r1
 800dc56:	2300      	movs	r3, #0
 800dc58:	2502      	movs	r5, #2
 800dc5a:	2e00      	cmp	r6, #0
 800dc5c:	d17a      	bne.n	800dd54 <_dtoa_r+0x4c4>
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d1d3      	bne.n	800dc0a <_dtoa_r+0x37a>
 800dc62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f000 8082 	beq.w	800dd6e <_dtoa_r+0x4de>
 800dc6a:	4b91      	ldr	r3, [pc, #580]	; (800deb0 <_dtoa_r+0x620>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	4650      	mov	r0, sl
 800dc70:	4659      	mov	r1, fp
 800dc72:	f7f2 ff43 	bl	8000afc <__aeabi_dcmplt>
 800dc76:	2800      	cmp	r0, #0
 800dc78:	d079      	beq.n	800dd6e <_dtoa_r+0x4de>
 800dc7a:	9b03      	ldr	r3, [sp, #12]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d076      	beq.n	800dd6e <_dtoa_r+0x4de>
 800dc80:	9b02      	ldr	r3, [sp, #8]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	dd36      	ble.n	800dcf4 <_dtoa_r+0x464>
 800dc86:	9b00      	ldr	r3, [sp, #0]
 800dc88:	4650      	mov	r0, sl
 800dc8a:	4659      	mov	r1, fp
 800dc8c:	1e5f      	subs	r7, r3, #1
 800dc8e:	2200      	movs	r2, #0
 800dc90:	4b88      	ldr	r3, [pc, #544]	; (800deb4 <_dtoa_r+0x624>)
 800dc92:	f7f2 fcc1 	bl	8000618 <__aeabi_dmul>
 800dc96:	9e02      	ldr	r6, [sp, #8]
 800dc98:	4682      	mov	sl, r0
 800dc9a:	468b      	mov	fp, r1
 800dc9c:	3501      	adds	r5, #1
 800dc9e:	4628      	mov	r0, r5
 800dca0:	f7f2 fc50 	bl	8000544 <__aeabi_i2d>
 800dca4:	4652      	mov	r2, sl
 800dca6:	465b      	mov	r3, fp
 800dca8:	f7f2 fcb6 	bl	8000618 <__aeabi_dmul>
 800dcac:	4b82      	ldr	r3, [pc, #520]	; (800deb8 <_dtoa_r+0x628>)
 800dcae:	2200      	movs	r2, #0
 800dcb0:	f7f2 fafc 	bl	80002ac <__adddf3>
 800dcb4:	46d0      	mov	r8, sl
 800dcb6:	46d9      	mov	r9, fp
 800dcb8:	4682      	mov	sl, r0
 800dcba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800dcbe:	2e00      	cmp	r6, #0
 800dcc0:	d158      	bne.n	800dd74 <_dtoa_r+0x4e4>
 800dcc2:	4b7e      	ldr	r3, [pc, #504]	; (800debc <_dtoa_r+0x62c>)
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	4640      	mov	r0, r8
 800dcc8:	4649      	mov	r1, r9
 800dcca:	f7f2 faed 	bl	80002a8 <__aeabi_dsub>
 800dcce:	4652      	mov	r2, sl
 800dcd0:	465b      	mov	r3, fp
 800dcd2:	4680      	mov	r8, r0
 800dcd4:	4689      	mov	r9, r1
 800dcd6:	f7f2 ff2f 	bl	8000b38 <__aeabi_dcmpgt>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	f040 8295 	bne.w	800e20a <_dtoa_r+0x97a>
 800dce0:	4652      	mov	r2, sl
 800dce2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dce6:	4640      	mov	r0, r8
 800dce8:	4649      	mov	r1, r9
 800dcea:	f7f2 ff07 	bl	8000afc <__aeabi_dcmplt>
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	f040 8289 	bne.w	800e206 <_dtoa_r+0x976>
 800dcf4:	ec5b ab19 	vmov	sl, fp, d9
 800dcf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f2c0 8148 	blt.w	800df90 <_dtoa_r+0x700>
 800dd00:	9a00      	ldr	r2, [sp, #0]
 800dd02:	2a0e      	cmp	r2, #14
 800dd04:	f300 8144 	bgt.w	800df90 <_dtoa_r+0x700>
 800dd08:	4b67      	ldr	r3, [pc, #412]	; (800dea8 <_dtoa_r+0x618>)
 800dd0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	f280 80d5 	bge.w	800dec4 <_dtoa_r+0x634>
 800dd1a:	9b03      	ldr	r3, [sp, #12]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	f300 80d1 	bgt.w	800dec4 <_dtoa_r+0x634>
 800dd22:	f040 826f 	bne.w	800e204 <_dtoa_r+0x974>
 800dd26:	4b65      	ldr	r3, [pc, #404]	; (800debc <_dtoa_r+0x62c>)
 800dd28:	2200      	movs	r2, #0
 800dd2a:	4640      	mov	r0, r8
 800dd2c:	4649      	mov	r1, r9
 800dd2e:	f7f2 fc73 	bl	8000618 <__aeabi_dmul>
 800dd32:	4652      	mov	r2, sl
 800dd34:	465b      	mov	r3, fp
 800dd36:	f7f2 fef5 	bl	8000b24 <__aeabi_dcmpge>
 800dd3a:	9e03      	ldr	r6, [sp, #12]
 800dd3c:	4637      	mov	r7, r6
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	f040 8245 	bne.w	800e1ce <_dtoa_r+0x93e>
 800dd44:	9d01      	ldr	r5, [sp, #4]
 800dd46:	2331      	movs	r3, #49	; 0x31
 800dd48:	f805 3b01 	strb.w	r3, [r5], #1
 800dd4c:	9b00      	ldr	r3, [sp, #0]
 800dd4e:	3301      	adds	r3, #1
 800dd50:	9300      	str	r3, [sp, #0]
 800dd52:	e240      	b.n	800e1d6 <_dtoa_r+0x946>
 800dd54:	07f2      	lsls	r2, r6, #31
 800dd56:	d505      	bpl.n	800dd64 <_dtoa_r+0x4d4>
 800dd58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd5c:	f7f2 fc5c 	bl	8000618 <__aeabi_dmul>
 800dd60:	3501      	adds	r5, #1
 800dd62:	2301      	movs	r3, #1
 800dd64:	1076      	asrs	r6, r6, #1
 800dd66:	3708      	adds	r7, #8
 800dd68:	e777      	b.n	800dc5a <_dtoa_r+0x3ca>
 800dd6a:	2502      	movs	r5, #2
 800dd6c:	e779      	b.n	800dc62 <_dtoa_r+0x3d2>
 800dd6e:	9f00      	ldr	r7, [sp, #0]
 800dd70:	9e03      	ldr	r6, [sp, #12]
 800dd72:	e794      	b.n	800dc9e <_dtoa_r+0x40e>
 800dd74:	9901      	ldr	r1, [sp, #4]
 800dd76:	4b4c      	ldr	r3, [pc, #304]	; (800dea8 <_dtoa_r+0x618>)
 800dd78:	4431      	add	r1, r6
 800dd7a:	910d      	str	r1, [sp, #52]	; 0x34
 800dd7c:	9908      	ldr	r1, [sp, #32]
 800dd7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dd82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dd86:	2900      	cmp	r1, #0
 800dd88:	d043      	beq.n	800de12 <_dtoa_r+0x582>
 800dd8a:	494d      	ldr	r1, [pc, #308]	; (800dec0 <_dtoa_r+0x630>)
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	f7f2 fd6d 	bl	800086c <__aeabi_ddiv>
 800dd92:	4652      	mov	r2, sl
 800dd94:	465b      	mov	r3, fp
 800dd96:	f7f2 fa87 	bl	80002a8 <__aeabi_dsub>
 800dd9a:	9d01      	ldr	r5, [sp, #4]
 800dd9c:	4682      	mov	sl, r0
 800dd9e:	468b      	mov	fp, r1
 800dda0:	4649      	mov	r1, r9
 800dda2:	4640      	mov	r0, r8
 800dda4:	f7f2 fee8 	bl	8000b78 <__aeabi_d2iz>
 800dda8:	4606      	mov	r6, r0
 800ddaa:	f7f2 fbcb 	bl	8000544 <__aeabi_i2d>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	4640      	mov	r0, r8
 800ddb4:	4649      	mov	r1, r9
 800ddb6:	f7f2 fa77 	bl	80002a8 <__aeabi_dsub>
 800ddba:	3630      	adds	r6, #48	; 0x30
 800ddbc:	f805 6b01 	strb.w	r6, [r5], #1
 800ddc0:	4652      	mov	r2, sl
 800ddc2:	465b      	mov	r3, fp
 800ddc4:	4680      	mov	r8, r0
 800ddc6:	4689      	mov	r9, r1
 800ddc8:	f7f2 fe98 	bl	8000afc <__aeabi_dcmplt>
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	d163      	bne.n	800de98 <_dtoa_r+0x608>
 800ddd0:	4642      	mov	r2, r8
 800ddd2:	464b      	mov	r3, r9
 800ddd4:	4936      	ldr	r1, [pc, #216]	; (800deb0 <_dtoa_r+0x620>)
 800ddd6:	2000      	movs	r0, #0
 800ddd8:	f7f2 fa66 	bl	80002a8 <__aeabi_dsub>
 800dddc:	4652      	mov	r2, sl
 800ddde:	465b      	mov	r3, fp
 800dde0:	f7f2 fe8c 	bl	8000afc <__aeabi_dcmplt>
 800dde4:	2800      	cmp	r0, #0
 800dde6:	f040 80b5 	bne.w	800df54 <_dtoa_r+0x6c4>
 800ddea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ddec:	429d      	cmp	r5, r3
 800ddee:	d081      	beq.n	800dcf4 <_dtoa_r+0x464>
 800ddf0:	4b30      	ldr	r3, [pc, #192]	; (800deb4 <_dtoa_r+0x624>)
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	4650      	mov	r0, sl
 800ddf6:	4659      	mov	r1, fp
 800ddf8:	f7f2 fc0e 	bl	8000618 <__aeabi_dmul>
 800ddfc:	4b2d      	ldr	r3, [pc, #180]	; (800deb4 <_dtoa_r+0x624>)
 800ddfe:	4682      	mov	sl, r0
 800de00:	468b      	mov	fp, r1
 800de02:	4640      	mov	r0, r8
 800de04:	4649      	mov	r1, r9
 800de06:	2200      	movs	r2, #0
 800de08:	f7f2 fc06 	bl	8000618 <__aeabi_dmul>
 800de0c:	4680      	mov	r8, r0
 800de0e:	4689      	mov	r9, r1
 800de10:	e7c6      	b.n	800dda0 <_dtoa_r+0x510>
 800de12:	4650      	mov	r0, sl
 800de14:	4659      	mov	r1, fp
 800de16:	f7f2 fbff 	bl	8000618 <__aeabi_dmul>
 800de1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de1c:	9d01      	ldr	r5, [sp, #4]
 800de1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800de20:	4682      	mov	sl, r0
 800de22:	468b      	mov	fp, r1
 800de24:	4649      	mov	r1, r9
 800de26:	4640      	mov	r0, r8
 800de28:	f7f2 fea6 	bl	8000b78 <__aeabi_d2iz>
 800de2c:	4606      	mov	r6, r0
 800de2e:	f7f2 fb89 	bl	8000544 <__aeabi_i2d>
 800de32:	3630      	adds	r6, #48	; 0x30
 800de34:	4602      	mov	r2, r0
 800de36:	460b      	mov	r3, r1
 800de38:	4640      	mov	r0, r8
 800de3a:	4649      	mov	r1, r9
 800de3c:	f7f2 fa34 	bl	80002a8 <__aeabi_dsub>
 800de40:	f805 6b01 	strb.w	r6, [r5], #1
 800de44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de46:	429d      	cmp	r5, r3
 800de48:	4680      	mov	r8, r0
 800de4a:	4689      	mov	r9, r1
 800de4c:	f04f 0200 	mov.w	r2, #0
 800de50:	d124      	bne.n	800de9c <_dtoa_r+0x60c>
 800de52:	4b1b      	ldr	r3, [pc, #108]	; (800dec0 <_dtoa_r+0x630>)
 800de54:	4650      	mov	r0, sl
 800de56:	4659      	mov	r1, fp
 800de58:	f7f2 fa28 	bl	80002ac <__adddf3>
 800de5c:	4602      	mov	r2, r0
 800de5e:	460b      	mov	r3, r1
 800de60:	4640      	mov	r0, r8
 800de62:	4649      	mov	r1, r9
 800de64:	f7f2 fe68 	bl	8000b38 <__aeabi_dcmpgt>
 800de68:	2800      	cmp	r0, #0
 800de6a:	d173      	bne.n	800df54 <_dtoa_r+0x6c4>
 800de6c:	4652      	mov	r2, sl
 800de6e:	465b      	mov	r3, fp
 800de70:	4913      	ldr	r1, [pc, #76]	; (800dec0 <_dtoa_r+0x630>)
 800de72:	2000      	movs	r0, #0
 800de74:	f7f2 fa18 	bl	80002a8 <__aeabi_dsub>
 800de78:	4602      	mov	r2, r0
 800de7a:	460b      	mov	r3, r1
 800de7c:	4640      	mov	r0, r8
 800de7e:	4649      	mov	r1, r9
 800de80:	f7f2 fe3c 	bl	8000afc <__aeabi_dcmplt>
 800de84:	2800      	cmp	r0, #0
 800de86:	f43f af35 	beq.w	800dcf4 <_dtoa_r+0x464>
 800de8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800de8c:	1e6b      	subs	r3, r5, #1
 800de8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800de90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800de94:	2b30      	cmp	r3, #48	; 0x30
 800de96:	d0f8      	beq.n	800de8a <_dtoa_r+0x5fa>
 800de98:	9700      	str	r7, [sp, #0]
 800de9a:	e049      	b.n	800df30 <_dtoa_r+0x6a0>
 800de9c:	4b05      	ldr	r3, [pc, #20]	; (800deb4 <_dtoa_r+0x624>)
 800de9e:	f7f2 fbbb 	bl	8000618 <__aeabi_dmul>
 800dea2:	4680      	mov	r8, r0
 800dea4:	4689      	mov	r9, r1
 800dea6:	e7bd      	b.n	800de24 <_dtoa_r+0x594>
 800dea8:	08010d88 	.word	0x08010d88
 800deac:	08010d60 	.word	0x08010d60
 800deb0:	3ff00000 	.word	0x3ff00000
 800deb4:	40240000 	.word	0x40240000
 800deb8:	401c0000 	.word	0x401c0000
 800debc:	40140000 	.word	0x40140000
 800dec0:	3fe00000 	.word	0x3fe00000
 800dec4:	9d01      	ldr	r5, [sp, #4]
 800dec6:	4656      	mov	r6, sl
 800dec8:	465f      	mov	r7, fp
 800deca:	4642      	mov	r2, r8
 800decc:	464b      	mov	r3, r9
 800dece:	4630      	mov	r0, r6
 800ded0:	4639      	mov	r1, r7
 800ded2:	f7f2 fccb 	bl	800086c <__aeabi_ddiv>
 800ded6:	f7f2 fe4f 	bl	8000b78 <__aeabi_d2iz>
 800deda:	4682      	mov	sl, r0
 800dedc:	f7f2 fb32 	bl	8000544 <__aeabi_i2d>
 800dee0:	4642      	mov	r2, r8
 800dee2:	464b      	mov	r3, r9
 800dee4:	f7f2 fb98 	bl	8000618 <__aeabi_dmul>
 800dee8:	4602      	mov	r2, r0
 800deea:	460b      	mov	r3, r1
 800deec:	4630      	mov	r0, r6
 800deee:	4639      	mov	r1, r7
 800def0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800def4:	f7f2 f9d8 	bl	80002a8 <__aeabi_dsub>
 800def8:	f805 6b01 	strb.w	r6, [r5], #1
 800defc:	9e01      	ldr	r6, [sp, #4]
 800defe:	9f03      	ldr	r7, [sp, #12]
 800df00:	1bae      	subs	r6, r5, r6
 800df02:	42b7      	cmp	r7, r6
 800df04:	4602      	mov	r2, r0
 800df06:	460b      	mov	r3, r1
 800df08:	d135      	bne.n	800df76 <_dtoa_r+0x6e6>
 800df0a:	f7f2 f9cf 	bl	80002ac <__adddf3>
 800df0e:	4642      	mov	r2, r8
 800df10:	464b      	mov	r3, r9
 800df12:	4606      	mov	r6, r0
 800df14:	460f      	mov	r7, r1
 800df16:	f7f2 fe0f 	bl	8000b38 <__aeabi_dcmpgt>
 800df1a:	b9d0      	cbnz	r0, 800df52 <_dtoa_r+0x6c2>
 800df1c:	4642      	mov	r2, r8
 800df1e:	464b      	mov	r3, r9
 800df20:	4630      	mov	r0, r6
 800df22:	4639      	mov	r1, r7
 800df24:	f7f2 fde0 	bl	8000ae8 <__aeabi_dcmpeq>
 800df28:	b110      	cbz	r0, 800df30 <_dtoa_r+0x6a0>
 800df2a:	f01a 0f01 	tst.w	sl, #1
 800df2e:	d110      	bne.n	800df52 <_dtoa_r+0x6c2>
 800df30:	4620      	mov	r0, r4
 800df32:	ee18 1a10 	vmov	r1, s16
 800df36:	f001 f8c5 	bl	800f0c4 <_Bfree>
 800df3a:	2300      	movs	r3, #0
 800df3c:	9800      	ldr	r0, [sp, #0]
 800df3e:	702b      	strb	r3, [r5, #0]
 800df40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df42:	3001      	adds	r0, #1
 800df44:	6018      	str	r0, [r3, #0]
 800df46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df48:	2b00      	cmp	r3, #0
 800df4a:	f43f acf1 	beq.w	800d930 <_dtoa_r+0xa0>
 800df4e:	601d      	str	r5, [r3, #0]
 800df50:	e4ee      	b.n	800d930 <_dtoa_r+0xa0>
 800df52:	9f00      	ldr	r7, [sp, #0]
 800df54:	462b      	mov	r3, r5
 800df56:	461d      	mov	r5, r3
 800df58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df5c:	2a39      	cmp	r2, #57	; 0x39
 800df5e:	d106      	bne.n	800df6e <_dtoa_r+0x6de>
 800df60:	9a01      	ldr	r2, [sp, #4]
 800df62:	429a      	cmp	r2, r3
 800df64:	d1f7      	bne.n	800df56 <_dtoa_r+0x6c6>
 800df66:	9901      	ldr	r1, [sp, #4]
 800df68:	2230      	movs	r2, #48	; 0x30
 800df6a:	3701      	adds	r7, #1
 800df6c:	700a      	strb	r2, [r1, #0]
 800df6e:	781a      	ldrb	r2, [r3, #0]
 800df70:	3201      	adds	r2, #1
 800df72:	701a      	strb	r2, [r3, #0]
 800df74:	e790      	b.n	800de98 <_dtoa_r+0x608>
 800df76:	4ba6      	ldr	r3, [pc, #664]	; (800e210 <_dtoa_r+0x980>)
 800df78:	2200      	movs	r2, #0
 800df7a:	f7f2 fb4d 	bl	8000618 <__aeabi_dmul>
 800df7e:	2200      	movs	r2, #0
 800df80:	2300      	movs	r3, #0
 800df82:	4606      	mov	r6, r0
 800df84:	460f      	mov	r7, r1
 800df86:	f7f2 fdaf 	bl	8000ae8 <__aeabi_dcmpeq>
 800df8a:	2800      	cmp	r0, #0
 800df8c:	d09d      	beq.n	800deca <_dtoa_r+0x63a>
 800df8e:	e7cf      	b.n	800df30 <_dtoa_r+0x6a0>
 800df90:	9a08      	ldr	r2, [sp, #32]
 800df92:	2a00      	cmp	r2, #0
 800df94:	f000 80d7 	beq.w	800e146 <_dtoa_r+0x8b6>
 800df98:	9a06      	ldr	r2, [sp, #24]
 800df9a:	2a01      	cmp	r2, #1
 800df9c:	f300 80ba 	bgt.w	800e114 <_dtoa_r+0x884>
 800dfa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfa2:	2a00      	cmp	r2, #0
 800dfa4:	f000 80b2 	beq.w	800e10c <_dtoa_r+0x87c>
 800dfa8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dfac:	9e07      	ldr	r6, [sp, #28]
 800dfae:	9d04      	ldr	r5, [sp, #16]
 800dfb0:	9a04      	ldr	r2, [sp, #16]
 800dfb2:	441a      	add	r2, r3
 800dfb4:	9204      	str	r2, [sp, #16]
 800dfb6:	9a05      	ldr	r2, [sp, #20]
 800dfb8:	2101      	movs	r1, #1
 800dfba:	441a      	add	r2, r3
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	9205      	str	r2, [sp, #20]
 800dfc0:	f001 f982 	bl	800f2c8 <__i2b>
 800dfc4:	4607      	mov	r7, r0
 800dfc6:	2d00      	cmp	r5, #0
 800dfc8:	dd0c      	ble.n	800dfe4 <_dtoa_r+0x754>
 800dfca:	9b05      	ldr	r3, [sp, #20]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	dd09      	ble.n	800dfe4 <_dtoa_r+0x754>
 800dfd0:	42ab      	cmp	r3, r5
 800dfd2:	9a04      	ldr	r2, [sp, #16]
 800dfd4:	bfa8      	it	ge
 800dfd6:	462b      	movge	r3, r5
 800dfd8:	1ad2      	subs	r2, r2, r3
 800dfda:	9204      	str	r2, [sp, #16]
 800dfdc:	9a05      	ldr	r2, [sp, #20]
 800dfde:	1aed      	subs	r5, r5, r3
 800dfe0:	1ad3      	subs	r3, r2, r3
 800dfe2:	9305      	str	r3, [sp, #20]
 800dfe4:	9b07      	ldr	r3, [sp, #28]
 800dfe6:	b31b      	cbz	r3, 800e030 <_dtoa_r+0x7a0>
 800dfe8:	9b08      	ldr	r3, [sp, #32]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	f000 80af 	beq.w	800e14e <_dtoa_r+0x8be>
 800dff0:	2e00      	cmp	r6, #0
 800dff2:	dd13      	ble.n	800e01c <_dtoa_r+0x78c>
 800dff4:	4639      	mov	r1, r7
 800dff6:	4632      	mov	r2, r6
 800dff8:	4620      	mov	r0, r4
 800dffa:	f001 fa25 	bl	800f448 <__pow5mult>
 800dffe:	ee18 2a10 	vmov	r2, s16
 800e002:	4601      	mov	r1, r0
 800e004:	4607      	mov	r7, r0
 800e006:	4620      	mov	r0, r4
 800e008:	f001 f974 	bl	800f2f4 <__multiply>
 800e00c:	ee18 1a10 	vmov	r1, s16
 800e010:	4680      	mov	r8, r0
 800e012:	4620      	mov	r0, r4
 800e014:	f001 f856 	bl	800f0c4 <_Bfree>
 800e018:	ee08 8a10 	vmov	s16, r8
 800e01c:	9b07      	ldr	r3, [sp, #28]
 800e01e:	1b9a      	subs	r2, r3, r6
 800e020:	d006      	beq.n	800e030 <_dtoa_r+0x7a0>
 800e022:	ee18 1a10 	vmov	r1, s16
 800e026:	4620      	mov	r0, r4
 800e028:	f001 fa0e 	bl	800f448 <__pow5mult>
 800e02c:	ee08 0a10 	vmov	s16, r0
 800e030:	2101      	movs	r1, #1
 800e032:	4620      	mov	r0, r4
 800e034:	f001 f948 	bl	800f2c8 <__i2b>
 800e038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	4606      	mov	r6, r0
 800e03e:	f340 8088 	ble.w	800e152 <_dtoa_r+0x8c2>
 800e042:	461a      	mov	r2, r3
 800e044:	4601      	mov	r1, r0
 800e046:	4620      	mov	r0, r4
 800e048:	f001 f9fe 	bl	800f448 <__pow5mult>
 800e04c:	9b06      	ldr	r3, [sp, #24]
 800e04e:	2b01      	cmp	r3, #1
 800e050:	4606      	mov	r6, r0
 800e052:	f340 8081 	ble.w	800e158 <_dtoa_r+0x8c8>
 800e056:	f04f 0800 	mov.w	r8, #0
 800e05a:	6933      	ldr	r3, [r6, #16]
 800e05c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e060:	6918      	ldr	r0, [r3, #16]
 800e062:	f001 f8e1 	bl	800f228 <__hi0bits>
 800e066:	f1c0 0020 	rsb	r0, r0, #32
 800e06a:	9b05      	ldr	r3, [sp, #20]
 800e06c:	4418      	add	r0, r3
 800e06e:	f010 001f 	ands.w	r0, r0, #31
 800e072:	f000 8092 	beq.w	800e19a <_dtoa_r+0x90a>
 800e076:	f1c0 0320 	rsb	r3, r0, #32
 800e07a:	2b04      	cmp	r3, #4
 800e07c:	f340 808a 	ble.w	800e194 <_dtoa_r+0x904>
 800e080:	f1c0 001c 	rsb	r0, r0, #28
 800e084:	9b04      	ldr	r3, [sp, #16]
 800e086:	4403      	add	r3, r0
 800e088:	9304      	str	r3, [sp, #16]
 800e08a:	9b05      	ldr	r3, [sp, #20]
 800e08c:	4403      	add	r3, r0
 800e08e:	4405      	add	r5, r0
 800e090:	9305      	str	r3, [sp, #20]
 800e092:	9b04      	ldr	r3, [sp, #16]
 800e094:	2b00      	cmp	r3, #0
 800e096:	dd07      	ble.n	800e0a8 <_dtoa_r+0x818>
 800e098:	ee18 1a10 	vmov	r1, s16
 800e09c:	461a      	mov	r2, r3
 800e09e:	4620      	mov	r0, r4
 800e0a0:	f001 fa2c 	bl	800f4fc <__lshift>
 800e0a4:	ee08 0a10 	vmov	s16, r0
 800e0a8:	9b05      	ldr	r3, [sp, #20]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	dd05      	ble.n	800e0ba <_dtoa_r+0x82a>
 800e0ae:	4631      	mov	r1, r6
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f001 fa22 	bl	800f4fc <__lshift>
 800e0b8:	4606      	mov	r6, r0
 800e0ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d06e      	beq.n	800e19e <_dtoa_r+0x90e>
 800e0c0:	ee18 0a10 	vmov	r0, s16
 800e0c4:	4631      	mov	r1, r6
 800e0c6:	f001 fa89 	bl	800f5dc <__mcmp>
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	da67      	bge.n	800e19e <_dtoa_r+0x90e>
 800e0ce:	9b00      	ldr	r3, [sp, #0]
 800e0d0:	3b01      	subs	r3, #1
 800e0d2:	ee18 1a10 	vmov	r1, s16
 800e0d6:	9300      	str	r3, [sp, #0]
 800e0d8:	220a      	movs	r2, #10
 800e0da:	2300      	movs	r3, #0
 800e0dc:	4620      	mov	r0, r4
 800e0de:	f001 f813 	bl	800f108 <__multadd>
 800e0e2:	9b08      	ldr	r3, [sp, #32]
 800e0e4:	ee08 0a10 	vmov	s16, r0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	f000 81b1 	beq.w	800e450 <_dtoa_r+0xbc0>
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	4639      	mov	r1, r7
 800e0f2:	220a      	movs	r2, #10
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	f001 f807 	bl	800f108 <__multadd>
 800e0fa:	9b02      	ldr	r3, [sp, #8]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	4607      	mov	r7, r0
 800e100:	f300 808e 	bgt.w	800e220 <_dtoa_r+0x990>
 800e104:	9b06      	ldr	r3, [sp, #24]
 800e106:	2b02      	cmp	r3, #2
 800e108:	dc51      	bgt.n	800e1ae <_dtoa_r+0x91e>
 800e10a:	e089      	b.n	800e220 <_dtoa_r+0x990>
 800e10c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e10e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e112:	e74b      	b.n	800dfac <_dtoa_r+0x71c>
 800e114:	9b03      	ldr	r3, [sp, #12]
 800e116:	1e5e      	subs	r6, r3, #1
 800e118:	9b07      	ldr	r3, [sp, #28]
 800e11a:	42b3      	cmp	r3, r6
 800e11c:	bfbf      	itttt	lt
 800e11e:	9b07      	ldrlt	r3, [sp, #28]
 800e120:	9607      	strlt	r6, [sp, #28]
 800e122:	1af2      	sublt	r2, r6, r3
 800e124:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e126:	bfb6      	itet	lt
 800e128:	189b      	addlt	r3, r3, r2
 800e12a:	1b9e      	subge	r6, r3, r6
 800e12c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e12e:	9b03      	ldr	r3, [sp, #12]
 800e130:	bfb8      	it	lt
 800e132:	2600      	movlt	r6, #0
 800e134:	2b00      	cmp	r3, #0
 800e136:	bfb7      	itett	lt
 800e138:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e13c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e140:	1a9d      	sublt	r5, r3, r2
 800e142:	2300      	movlt	r3, #0
 800e144:	e734      	b.n	800dfb0 <_dtoa_r+0x720>
 800e146:	9e07      	ldr	r6, [sp, #28]
 800e148:	9d04      	ldr	r5, [sp, #16]
 800e14a:	9f08      	ldr	r7, [sp, #32]
 800e14c:	e73b      	b.n	800dfc6 <_dtoa_r+0x736>
 800e14e:	9a07      	ldr	r2, [sp, #28]
 800e150:	e767      	b.n	800e022 <_dtoa_r+0x792>
 800e152:	9b06      	ldr	r3, [sp, #24]
 800e154:	2b01      	cmp	r3, #1
 800e156:	dc18      	bgt.n	800e18a <_dtoa_r+0x8fa>
 800e158:	f1ba 0f00 	cmp.w	sl, #0
 800e15c:	d115      	bne.n	800e18a <_dtoa_r+0x8fa>
 800e15e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e162:	b993      	cbnz	r3, 800e18a <_dtoa_r+0x8fa>
 800e164:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e168:	0d1b      	lsrs	r3, r3, #20
 800e16a:	051b      	lsls	r3, r3, #20
 800e16c:	b183      	cbz	r3, 800e190 <_dtoa_r+0x900>
 800e16e:	9b04      	ldr	r3, [sp, #16]
 800e170:	3301      	adds	r3, #1
 800e172:	9304      	str	r3, [sp, #16]
 800e174:	9b05      	ldr	r3, [sp, #20]
 800e176:	3301      	adds	r3, #1
 800e178:	9305      	str	r3, [sp, #20]
 800e17a:	f04f 0801 	mov.w	r8, #1
 800e17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e180:	2b00      	cmp	r3, #0
 800e182:	f47f af6a 	bne.w	800e05a <_dtoa_r+0x7ca>
 800e186:	2001      	movs	r0, #1
 800e188:	e76f      	b.n	800e06a <_dtoa_r+0x7da>
 800e18a:	f04f 0800 	mov.w	r8, #0
 800e18e:	e7f6      	b.n	800e17e <_dtoa_r+0x8ee>
 800e190:	4698      	mov	r8, r3
 800e192:	e7f4      	b.n	800e17e <_dtoa_r+0x8ee>
 800e194:	f43f af7d 	beq.w	800e092 <_dtoa_r+0x802>
 800e198:	4618      	mov	r0, r3
 800e19a:	301c      	adds	r0, #28
 800e19c:	e772      	b.n	800e084 <_dtoa_r+0x7f4>
 800e19e:	9b03      	ldr	r3, [sp, #12]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	dc37      	bgt.n	800e214 <_dtoa_r+0x984>
 800e1a4:	9b06      	ldr	r3, [sp, #24]
 800e1a6:	2b02      	cmp	r3, #2
 800e1a8:	dd34      	ble.n	800e214 <_dtoa_r+0x984>
 800e1aa:	9b03      	ldr	r3, [sp, #12]
 800e1ac:	9302      	str	r3, [sp, #8]
 800e1ae:	9b02      	ldr	r3, [sp, #8]
 800e1b0:	b96b      	cbnz	r3, 800e1ce <_dtoa_r+0x93e>
 800e1b2:	4631      	mov	r1, r6
 800e1b4:	2205      	movs	r2, #5
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	f000 ffa6 	bl	800f108 <__multadd>
 800e1bc:	4601      	mov	r1, r0
 800e1be:	4606      	mov	r6, r0
 800e1c0:	ee18 0a10 	vmov	r0, s16
 800e1c4:	f001 fa0a 	bl	800f5dc <__mcmp>
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	f73f adbb 	bgt.w	800dd44 <_dtoa_r+0x4b4>
 800e1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1d0:	9d01      	ldr	r5, [sp, #4]
 800e1d2:	43db      	mvns	r3, r3
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	f04f 0800 	mov.w	r8, #0
 800e1da:	4631      	mov	r1, r6
 800e1dc:	4620      	mov	r0, r4
 800e1de:	f000 ff71 	bl	800f0c4 <_Bfree>
 800e1e2:	2f00      	cmp	r7, #0
 800e1e4:	f43f aea4 	beq.w	800df30 <_dtoa_r+0x6a0>
 800e1e8:	f1b8 0f00 	cmp.w	r8, #0
 800e1ec:	d005      	beq.n	800e1fa <_dtoa_r+0x96a>
 800e1ee:	45b8      	cmp	r8, r7
 800e1f0:	d003      	beq.n	800e1fa <_dtoa_r+0x96a>
 800e1f2:	4641      	mov	r1, r8
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	f000 ff65 	bl	800f0c4 <_Bfree>
 800e1fa:	4639      	mov	r1, r7
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	f000 ff61 	bl	800f0c4 <_Bfree>
 800e202:	e695      	b.n	800df30 <_dtoa_r+0x6a0>
 800e204:	2600      	movs	r6, #0
 800e206:	4637      	mov	r7, r6
 800e208:	e7e1      	b.n	800e1ce <_dtoa_r+0x93e>
 800e20a:	9700      	str	r7, [sp, #0]
 800e20c:	4637      	mov	r7, r6
 800e20e:	e599      	b.n	800dd44 <_dtoa_r+0x4b4>
 800e210:	40240000 	.word	0x40240000
 800e214:	9b08      	ldr	r3, [sp, #32]
 800e216:	2b00      	cmp	r3, #0
 800e218:	f000 80ca 	beq.w	800e3b0 <_dtoa_r+0xb20>
 800e21c:	9b03      	ldr	r3, [sp, #12]
 800e21e:	9302      	str	r3, [sp, #8]
 800e220:	2d00      	cmp	r5, #0
 800e222:	dd05      	ble.n	800e230 <_dtoa_r+0x9a0>
 800e224:	4639      	mov	r1, r7
 800e226:	462a      	mov	r2, r5
 800e228:	4620      	mov	r0, r4
 800e22a:	f001 f967 	bl	800f4fc <__lshift>
 800e22e:	4607      	mov	r7, r0
 800e230:	f1b8 0f00 	cmp.w	r8, #0
 800e234:	d05b      	beq.n	800e2ee <_dtoa_r+0xa5e>
 800e236:	6879      	ldr	r1, [r7, #4]
 800e238:	4620      	mov	r0, r4
 800e23a:	f000 ff03 	bl	800f044 <_Balloc>
 800e23e:	4605      	mov	r5, r0
 800e240:	b928      	cbnz	r0, 800e24e <_dtoa_r+0x9be>
 800e242:	4b87      	ldr	r3, [pc, #540]	; (800e460 <_dtoa_r+0xbd0>)
 800e244:	4602      	mov	r2, r0
 800e246:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e24a:	f7ff bb3b 	b.w	800d8c4 <_dtoa_r+0x34>
 800e24e:	693a      	ldr	r2, [r7, #16]
 800e250:	3202      	adds	r2, #2
 800e252:	0092      	lsls	r2, r2, #2
 800e254:	f107 010c 	add.w	r1, r7, #12
 800e258:	300c      	adds	r0, #12
 800e25a:	f000 febf 	bl	800efdc <memcpy>
 800e25e:	2201      	movs	r2, #1
 800e260:	4629      	mov	r1, r5
 800e262:	4620      	mov	r0, r4
 800e264:	f001 f94a 	bl	800f4fc <__lshift>
 800e268:	9b01      	ldr	r3, [sp, #4]
 800e26a:	f103 0901 	add.w	r9, r3, #1
 800e26e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e272:	4413      	add	r3, r2
 800e274:	9305      	str	r3, [sp, #20]
 800e276:	f00a 0301 	and.w	r3, sl, #1
 800e27a:	46b8      	mov	r8, r7
 800e27c:	9304      	str	r3, [sp, #16]
 800e27e:	4607      	mov	r7, r0
 800e280:	4631      	mov	r1, r6
 800e282:	ee18 0a10 	vmov	r0, s16
 800e286:	f7ff fa75 	bl	800d774 <quorem>
 800e28a:	4641      	mov	r1, r8
 800e28c:	9002      	str	r0, [sp, #8]
 800e28e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e292:	ee18 0a10 	vmov	r0, s16
 800e296:	f001 f9a1 	bl	800f5dc <__mcmp>
 800e29a:	463a      	mov	r2, r7
 800e29c:	9003      	str	r0, [sp, #12]
 800e29e:	4631      	mov	r1, r6
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	f001 f9b7 	bl	800f614 <__mdiff>
 800e2a6:	68c2      	ldr	r2, [r0, #12]
 800e2a8:	f109 3bff 	add.w	fp, r9, #4294967295
 800e2ac:	4605      	mov	r5, r0
 800e2ae:	bb02      	cbnz	r2, 800e2f2 <_dtoa_r+0xa62>
 800e2b0:	4601      	mov	r1, r0
 800e2b2:	ee18 0a10 	vmov	r0, s16
 800e2b6:	f001 f991 	bl	800f5dc <__mcmp>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	4629      	mov	r1, r5
 800e2be:	4620      	mov	r0, r4
 800e2c0:	9207      	str	r2, [sp, #28]
 800e2c2:	f000 feff 	bl	800f0c4 <_Bfree>
 800e2c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e2ca:	ea43 0102 	orr.w	r1, r3, r2
 800e2ce:	9b04      	ldr	r3, [sp, #16]
 800e2d0:	430b      	orrs	r3, r1
 800e2d2:	464d      	mov	r5, r9
 800e2d4:	d10f      	bne.n	800e2f6 <_dtoa_r+0xa66>
 800e2d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e2da:	d02a      	beq.n	800e332 <_dtoa_r+0xaa2>
 800e2dc:	9b03      	ldr	r3, [sp, #12]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	dd02      	ble.n	800e2e8 <_dtoa_r+0xa58>
 800e2e2:	9b02      	ldr	r3, [sp, #8]
 800e2e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e2e8:	f88b a000 	strb.w	sl, [fp]
 800e2ec:	e775      	b.n	800e1da <_dtoa_r+0x94a>
 800e2ee:	4638      	mov	r0, r7
 800e2f0:	e7ba      	b.n	800e268 <_dtoa_r+0x9d8>
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	e7e2      	b.n	800e2bc <_dtoa_r+0xa2c>
 800e2f6:	9b03      	ldr	r3, [sp, #12]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	db04      	blt.n	800e306 <_dtoa_r+0xa76>
 800e2fc:	9906      	ldr	r1, [sp, #24]
 800e2fe:	430b      	orrs	r3, r1
 800e300:	9904      	ldr	r1, [sp, #16]
 800e302:	430b      	orrs	r3, r1
 800e304:	d122      	bne.n	800e34c <_dtoa_r+0xabc>
 800e306:	2a00      	cmp	r2, #0
 800e308:	ddee      	ble.n	800e2e8 <_dtoa_r+0xa58>
 800e30a:	ee18 1a10 	vmov	r1, s16
 800e30e:	2201      	movs	r2, #1
 800e310:	4620      	mov	r0, r4
 800e312:	f001 f8f3 	bl	800f4fc <__lshift>
 800e316:	4631      	mov	r1, r6
 800e318:	ee08 0a10 	vmov	s16, r0
 800e31c:	f001 f95e 	bl	800f5dc <__mcmp>
 800e320:	2800      	cmp	r0, #0
 800e322:	dc03      	bgt.n	800e32c <_dtoa_r+0xa9c>
 800e324:	d1e0      	bne.n	800e2e8 <_dtoa_r+0xa58>
 800e326:	f01a 0f01 	tst.w	sl, #1
 800e32a:	d0dd      	beq.n	800e2e8 <_dtoa_r+0xa58>
 800e32c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e330:	d1d7      	bne.n	800e2e2 <_dtoa_r+0xa52>
 800e332:	2339      	movs	r3, #57	; 0x39
 800e334:	f88b 3000 	strb.w	r3, [fp]
 800e338:	462b      	mov	r3, r5
 800e33a:	461d      	mov	r5, r3
 800e33c:	3b01      	subs	r3, #1
 800e33e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e342:	2a39      	cmp	r2, #57	; 0x39
 800e344:	d071      	beq.n	800e42a <_dtoa_r+0xb9a>
 800e346:	3201      	adds	r2, #1
 800e348:	701a      	strb	r2, [r3, #0]
 800e34a:	e746      	b.n	800e1da <_dtoa_r+0x94a>
 800e34c:	2a00      	cmp	r2, #0
 800e34e:	dd07      	ble.n	800e360 <_dtoa_r+0xad0>
 800e350:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e354:	d0ed      	beq.n	800e332 <_dtoa_r+0xaa2>
 800e356:	f10a 0301 	add.w	r3, sl, #1
 800e35a:	f88b 3000 	strb.w	r3, [fp]
 800e35e:	e73c      	b.n	800e1da <_dtoa_r+0x94a>
 800e360:	9b05      	ldr	r3, [sp, #20]
 800e362:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e366:	4599      	cmp	r9, r3
 800e368:	d047      	beq.n	800e3fa <_dtoa_r+0xb6a>
 800e36a:	ee18 1a10 	vmov	r1, s16
 800e36e:	2300      	movs	r3, #0
 800e370:	220a      	movs	r2, #10
 800e372:	4620      	mov	r0, r4
 800e374:	f000 fec8 	bl	800f108 <__multadd>
 800e378:	45b8      	cmp	r8, r7
 800e37a:	ee08 0a10 	vmov	s16, r0
 800e37e:	f04f 0300 	mov.w	r3, #0
 800e382:	f04f 020a 	mov.w	r2, #10
 800e386:	4641      	mov	r1, r8
 800e388:	4620      	mov	r0, r4
 800e38a:	d106      	bne.n	800e39a <_dtoa_r+0xb0a>
 800e38c:	f000 febc 	bl	800f108 <__multadd>
 800e390:	4680      	mov	r8, r0
 800e392:	4607      	mov	r7, r0
 800e394:	f109 0901 	add.w	r9, r9, #1
 800e398:	e772      	b.n	800e280 <_dtoa_r+0x9f0>
 800e39a:	f000 feb5 	bl	800f108 <__multadd>
 800e39e:	4639      	mov	r1, r7
 800e3a0:	4680      	mov	r8, r0
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	220a      	movs	r2, #10
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	f000 feae 	bl	800f108 <__multadd>
 800e3ac:	4607      	mov	r7, r0
 800e3ae:	e7f1      	b.n	800e394 <_dtoa_r+0xb04>
 800e3b0:	9b03      	ldr	r3, [sp, #12]
 800e3b2:	9302      	str	r3, [sp, #8]
 800e3b4:	9d01      	ldr	r5, [sp, #4]
 800e3b6:	ee18 0a10 	vmov	r0, s16
 800e3ba:	4631      	mov	r1, r6
 800e3bc:	f7ff f9da 	bl	800d774 <quorem>
 800e3c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e3c4:	9b01      	ldr	r3, [sp, #4]
 800e3c6:	f805 ab01 	strb.w	sl, [r5], #1
 800e3ca:	1aea      	subs	r2, r5, r3
 800e3cc:	9b02      	ldr	r3, [sp, #8]
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	dd09      	ble.n	800e3e6 <_dtoa_r+0xb56>
 800e3d2:	ee18 1a10 	vmov	r1, s16
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	220a      	movs	r2, #10
 800e3da:	4620      	mov	r0, r4
 800e3dc:	f000 fe94 	bl	800f108 <__multadd>
 800e3e0:	ee08 0a10 	vmov	s16, r0
 800e3e4:	e7e7      	b.n	800e3b6 <_dtoa_r+0xb26>
 800e3e6:	9b02      	ldr	r3, [sp, #8]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	bfc8      	it	gt
 800e3ec:	461d      	movgt	r5, r3
 800e3ee:	9b01      	ldr	r3, [sp, #4]
 800e3f0:	bfd8      	it	le
 800e3f2:	2501      	movle	r5, #1
 800e3f4:	441d      	add	r5, r3
 800e3f6:	f04f 0800 	mov.w	r8, #0
 800e3fa:	ee18 1a10 	vmov	r1, s16
 800e3fe:	2201      	movs	r2, #1
 800e400:	4620      	mov	r0, r4
 800e402:	f001 f87b 	bl	800f4fc <__lshift>
 800e406:	4631      	mov	r1, r6
 800e408:	ee08 0a10 	vmov	s16, r0
 800e40c:	f001 f8e6 	bl	800f5dc <__mcmp>
 800e410:	2800      	cmp	r0, #0
 800e412:	dc91      	bgt.n	800e338 <_dtoa_r+0xaa8>
 800e414:	d102      	bne.n	800e41c <_dtoa_r+0xb8c>
 800e416:	f01a 0f01 	tst.w	sl, #1
 800e41a:	d18d      	bne.n	800e338 <_dtoa_r+0xaa8>
 800e41c:	462b      	mov	r3, r5
 800e41e:	461d      	mov	r5, r3
 800e420:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e424:	2a30      	cmp	r2, #48	; 0x30
 800e426:	d0fa      	beq.n	800e41e <_dtoa_r+0xb8e>
 800e428:	e6d7      	b.n	800e1da <_dtoa_r+0x94a>
 800e42a:	9a01      	ldr	r2, [sp, #4]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d184      	bne.n	800e33a <_dtoa_r+0xaaa>
 800e430:	9b00      	ldr	r3, [sp, #0]
 800e432:	3301      	adds	r3, #1
 800e434:	9300      	str	r3, [sp, #0]
 800e436:	2331      	movs	r3, #49	; 0x31
 800e438:	7013      	strb	r3, [r2, #0]
 800e43a:	e6ce      	b.n	800e1da <_dtoa_r+0x94a>
 800e43c:	4b09      	ldr	r3, [pc, #36]	; (800e464 <_dtoa_r+0xbd4>)
 800e43e:	f7ff ba95 	b.w	800d96c <_dtoa_r+0xdc>
 800e442:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e444:	2b00      	cmp	r3, #0
 800e446:	f47f aa6e 	bne.w	800d926 <_dtoa_r+0x96>
 800e44a:	4b07      	ldr	r3, [pc, #28]	; (800e468 <_dtoa_r+0xbd8>)
 800e44c:	f7ff ba8e 	b.w	800d96c <_dtoa_r+0xdc>
 800e450:	9b02      	ldr	r3, [sp, #8]
 800e452:	2b00      	cmp	r3, #0
 800e454:	dcae      	bgt.n	800e3b4 <_dtoa_r+0xb24>
 800e456:	9b06      	ldr	r3, [sp, #24]
 800e458:	2b02      	cmp	r3, #2
 800e45a:	f73f aea8 	bgt.w	800e1ae <_dtoa_r+0x91e>
 800e45e:	e7a9      	b.n	800e3b4 <_dtoa_r+0xb24>
 800e460:	08010c15 	.word	0x08010c15
 800e464:	08010e60 	.word	0x08010e60
 800e468:	08010bad 	.word	0x08010bad

0800e46c <__sflush_r>:
 800e46c:	898a      	ldrh	r2, [r1, #12]
 800e46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e472:	4605      	mov	r5, r0
 800e474:	0710      	lsls	r0, r2, #28
 800e476:	460c      	mov	r4, r1
 800e478:	d458      	bmi.n	800e52c <__sflush_r+0xc0>
 800e47a:	684b      	ldr	r3, [r1, #4]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	dc05      	bgt.n	800e48c <__sflush_r+0x20>
 800e480:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e482:	2b00      	cmp	r3, #0
 800e484:	dc02      	bgt.n	800e48c <__sflush_r+0x20>
 800e486:	2000      	movs	r0, #0
 800e488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e48c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e48e:	2e00      	cmp	r6, #0
 800e490:	d0f9      	beq.n	800e486 <__sflush_r+0x1a>
 800e492:	2300      	movs	r3, #0
 800e494:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e498:	682f      	ldr	r7, [r5, #0]
 800e49a:	602b      	str	r3, [r5, #0]
 800e49c:	d032      	beq.n	800e504 <__sflush_r+0x98>
 800e49e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e4a0:	89a3      	ldrh	r3, [r4, #12]
 800e4a2:	075a      	lsls	r2, r3, #29
 800e4a4:	d505      	bpl.n	800e4b2 <__sflush_r+0x46>
 800e4a6:	6863      	ldr	r3, [r4, #4]
 800e4a8:	1ac0      	subs	r0, r0, r3
 800e4aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4ac:	b10b      	cbz	r3, 800e4b2 <__sflush_r+0x46>
 800e4ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4b0:	1ac0      	subs	r0, r0, r3
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4b8:	6a21      	ldr	r1, [r4, #32]
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	47b0      	blx	r6
 800e4be:	1c43      	adds	r3, r0, #1
 800e4c0:	89a3      	ldrh	r3, [r4, #12]
 800e4c2:	d106      	bne.n	800e4d2 <__sflush_r+0x66>
 800e4c4:	6829      	ldr	r1, [r5, #0]
 800e4c6:	291d      	cmp	r1, #29
 800e4c8:	d82c      	bhi.n	800e524 <__sflush_r+0xb8>
 800e4ca:	4a2a      	ldr	r2, [pc, #168]	; (800e574 <__sflush_r+0x108>)
 800e4cc:	40ca      	lsrs	r2, r1
 800e4ce:	07d6      	lsls	r6, r2, #31
 800e4d0:	d528      	bpl.n	800e524 <__sflush_r+0xb8>
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	6062      	str	r2, [r4, #4]
 800e4d6:	04d9      	lsls	r1, r3, #19
 800e4d8:	6922      	ldr	r2, [r4, #16]
 800e4da:	6022      	str	r2, [r4, #0]
 800e4dc:	d504      	bpl.n	800e4e8 <__sflush_r+0x7c>
 800e4de:	1c42      	adds	r2, r0, #1
 800e4e0:	d101      	bne.n	800e4e6 <__sflush_r+0x7a>
 800e4e2:	682b      	ldr	r3, [r5, #0]
 800e4e4:	b903      	cbnz	r3, 800e4e8 <__sflush_r+0x7c>
 800e4e6:	6560      	str	r0, [r4, #84]	; 0x54
 800e4e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4ea:	602f      	str	r7, [r5, #0]
 800e4ec:	2900      	cmp	r1, #0
 800e4ee:	d0ca      	beq.n	800e486 <__sflush_r+0x1a>
 800e4f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4f4:	4299      	cmp	r1, r3
 800e4f6:	d002      	beq.n	800e4fe <__sflush_r+0x92>
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	f7fc ffb7 	bl	800b46c <_free_r>
 800e4fe:	2000      	movs	r0, #0
 800e500:	6360      	str	r0, [r4, #52]	; 0x34
 800e502:	e7c1      	b.n	800e488 <__sflush_r+0x1c>
 800e504:	6a21      	ldr	r1, [r4, #32]
 800e506:	2301      	movs	r3, #1
 800e508:	4628      	mov	r0, r5
 800e50a:	47b0      	blx	r6
 800e50c:	1c41      	adds	r1, r0, #1
 800e50e:	d1c7      	bne.n	800e4a0 <__sflush_r+0x34>
 800e510:	682b      	ldr	r3, [r5, #0]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d0c4      	beq.n	800e4a0 <__sflush_r+0x34>
 800e516:	2b1d      	cmp	r3, #29
 800e518:	d001      	beq.n	800e51e <__sflush_r+0xb2>
 800e51a:	2b16      	cmp	r3, #22
 800e51c:	d101      	bne.n	800e522 <__sflush_r+0xb6>
 800e51e:	602f      	str	r7, [r5, #0]
 800e520:	e7b1      	b.n	800e486 <__sflush_r+0x1a>
 800e522:	89a3      	ldrh	r3, [r4, #12]
 800e524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e528:	81a3      	strh	r3, [r4, #12]
 800e52a:	e7ad      	b.n	800e488 <__sflush_r+0x1c>
 800e52c:	690f      	ldr	r7, [r1, #16]
 800e52e:	2f00      	cmp	r7, #0
 800e530:	d0a9      	beq.n	800e486 <__sflush_r+0x1a>
 800e532:	0793      	lsls	r3, r2, #30
 800e534:	680e      	ldr	r6, [r1, #0]
 800e536:	bf08      	it	eq
 800e538:	694b      	ldreq	r3, [r1, #20]
 800e53a:	600f      	str	r7, [r1, #0]
 800e53c:	bf18      	it	ne
 800e53e:	2300      	movne	r3, #0
 800e540:	eba6 0807 	sub.w	r8, r6, r7
 800e544:	608b      	str	r3, [r1, #8]
 800e546:	f1b8 0f00 	cmp.w	r8, #0
 800e54a:	dd9c      	ble.n	800e486 <__sflush_r+0x1a>
 800e54c:	6a21      	ldr	r1, [r4, #32]
 800e54e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e550:	4643      	mov	r3, r8
 800e552:	463a      	mov	r2, r7
 800e554:	4628      	mov	r0, r5
 800e556:	47b0      	blx	r6
 800e558:	2800      	cmp	r0, #0
 800e55a:	dc06      	bgt.n	800e56a <__sflush_r+0xfe>
 800e55c:	89a3      	ldrh	r3, [r4, #12]
 800e55e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e562:	81a3      	strh	r3, [r4, #12]
 800e564:	f04f 30ff 	mov.w	r0, #4294967295
 800e568:	e78e      	b.n	800e488 <__sflush_r+0x1c>
 800e56a:	4407      	add	r7, r0
 800e56c:	eba8 0800 	sub.w	r8, r8, r0
 800e570:	e7e9      	b.n	800e546 <__sflush_r+0xda>
 800e572:	bf00      	nop
 800e574:	20400001 	.word	0x20400001

0800e578 <_fflush_r>:
 800e578:	b538      	push	{r3, r4, r5, lr}
 800e57a:	690b      	ldr	r3, [r1, #16]
 800e57c:	4605      	mov	r5, r0
 800e57e:	460c      	mov	r4, r1
 800e580:	b913      	cbnz	r3, 800e588 <_fflush_r+0x10>
 800e582:	2500      	movs	r5, #0
 800e584:	4628      	mov	r0, r5
 800e586:	bd38      	pop	{r3, r4, r5, pc}
 800e588:	b118      	cbz	r0, 800e592 <_fflush_r+0x1a>
 800e58a:	6983      	ldr	r3, [r0, #24]
 800e58c:	b90b      	cbnz	r3, 800e592 <_fflush_r+0x1a>
 800e58e:	f000 f887 	bl	800e6a0 <__sinit>
 800e592:	4b14      	ldr	r3, [pc, #80]	; (800e5e4 <_fflush_r+0x6c>)
 800e594:	429c      	cmp	r4, r3
 800e596:	d11b      	bne.n	800e5d0 <_fflush_r+0x58>
 800e598:	686c      	ldr	r4, [r5, #4]
 800e59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d0ef      	beq.n	800e582 <_fflush_r+0xa>
 800e5a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e5a4:	07d0      	lsls	r0, r2, #31
 800e5a6:	d404      	bmi.n	800e5b2 <_fflush_r+0x3a>
 800e5a8:	0599      	lsls	r1, r3, #22
 800e5aa:	d402      	bmi.n	800e5b2 <_fflush_r+0x3a>
 800e5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5ae:	f000 fc88 	bl	800eec2 <__retarget_lock_acquire_recursive>
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	4621      	mov	r1, r4
 800e5b6:	f7ff ff59 	bl	800e46c <__sflush_r>
 800e5ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5bc:	07da      	lsls	r2, r3, #31
 800e5be:	4605      	mov	r5, r0
 800e5c0:	d4e0      	bmi.n	800e584 <_fflush_r+0xc>
 800e5c2:	89a3      	ldrh	r3, [r4, #12]
 800e5c4:	059b      	lsls	r3, r3, #22
 800e5c6:	d4dd      	bmi.n	800e584 <_fflush_r+0xc>
 800e5c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5ca:	f000 fc7b 	bl	800eec4 <__retarget_lock_release_recursive>
 800e5ce:	e7d9      	b.n	800e584 <_fflush_r+0xc>
 800e5d0:	4b05      	ldr	r3, [pc, #20]	; (800e5e8 <_fflush_r+0x70>)
 800e5d2:	429c      	cmp	r4, r3
 800e5d4:	d101      	bne.n	800e5da <_fflush_r+0x62>
 800e5d6:	68ac      	ldr	r4, [r5, #8]
 800e5d8:	e7df      	b.n	800e59a <_fflush_r+0x22>
 800e5da:	4b04      	ldr	r3, [pc, #16]	; (800e5ec <_fflush_r+0x74>)
 800e5dc:	429c      	cmp	r4, r3
 800e5de:	bf08      	it	eq
 800e5e0:	68ec      	ldreq	r4, [r5, #12]
 800e5e2:	e7da      	b.n	800e59a <_fflush_r+0x22>
 800e5e4:	08010c48 	.word	0x08010c48
 800e5e8:	08010c68 	.word	0x08010c68
 800e5ec:	08010c28 	.word	0x08010c28

0800e5f0 <std>:
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	b510      	push	{r4, lr}
 800e5f4:	4604      	mov	r4, r0
 800e5f6:	e9c0 3300 	strd	r3, r3, [r0]
 800e5fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5fe:	6083      	str	r3, [r0, #8]
 800e600:	8181      	strh	r1, [r0, #12]
 800e602:	6643      	str	r3, [r0, #100]	; 0x64
 800e604:	81c2      	strh	r2, [r0, #14]
 800e606:	6183      	str	r3, [r0, #24]
 800e608:	4619      	mov	r1, r3
 800e60a:	2208      	movs	r2, #8
 800e60c:	305c      	adds	r0, #92	; 0x5c
 800e60e:	f7fc ff25 	bl	800b45c <memset>
 800e612:	4b05      	ldr	r3, [pc, #20]	; (800e628 <std+0x38>)
 800e614:	6263      	str	r3, [r4, #36]	; 0x24
 800e616:	4b05      	ldr	r3, [pc, #20]	; (800e62c <std+0x3c>)
 800e618:	62a3      	str	r3, [r4, #40]	; 0x28
 800e61a:	4b05      	ldr	r3, [pc, #20]	; (800e630 <std+0x40>)
 800e61c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e61e:	4b05      	ldr	r3, [pc, #20]	; (800e634 <std+0x44>)
 800e620:	6224      	str	r4, [r4, #32]
 800e622:	6323      	str	r3, [r4, #48]	; 0x30
 800e624:	bd10      	pop	{r4, pc}
 800e626:	bf00      	nop
 800e628:	0800c6c5 	.word	0x0800c6c5
 800e62c:	0800c6eb 	.word	0x0800c6eb
 800e630:	0800c723 	.word	0x0800c723
 800e634:	0800c747 	.word	0x0800c747

0800e638 <_cleanup_r>:
 800e638:	4901      	ldr	r1, [pc, #4]	; (800e640 <_cleanup_r+0x8>)
 800e63a:	f000 b8af 	b.w	800e79c <_fwalk_reent>
 800e63e:	bf00      	nop
 800e640:	0800e579 	.word	0x0800e579

0800e644 <__sfmoreglue>:
 800e644:	b570      	push	{r4, r5, r6, lr}
 800e646:	2268      	movs	r2, #104	; 0x68
 800e648:	1e4d      	subs	r5, r1, #1
 800e64a:	4355      	muls	r5, r2
 800e64c:	460e      	mov	r6, r1
 800e64e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e652:	f7fc ff77 	bl	800b544 <_malloc_r>
 800e656:	4604      	mov	r4, r0
 800e658:	b140      	cbz	r0, 800e66c <__sfmoreglue+0x28>
 800e65a:	2100      	movs	r1, #0
 800e65c:	e9c0 1600 	strd	r1, r6, [r0]
 800e660:	300c      	adds	r0, #12
 800e662:	60a0      	str	r0, [r4, #8]
 800e664:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e668:	f7fc fef8 	bl	800b45c <memset>
 800e66c:	4620      	mov	r0, r4
 800e66e:	bd70      	pop	{r4, r5, r6, pc}

0800e670 <__sfp_lock_acquire>:
 800e670:	4801      	ldr	r0, [pc, #4]	; (800e678 <__sfp_lock_acquire+0x8>)
 800e672:	f000 bc26 	b.w	800eec2 <__retarget_lock_acquire_recursive>
 800e676:	bf00      	nop
 800e678:	20002be9 	.word	0x20002be9

0800e67c <__sfp_lock_release>:
 800e67c:	4801      	ldr	r0, [pc, #4]	; (800e684 <__sfp_lock_release+0x8>)
 800e67e:	f000 bc21 	b.w	800eec4 <__retarget_lock_release_recursive>
 800e682:	bf00      	nop
 800e684:	20002be9 	.word	0x20002be9

0800e688 <__sinit_lock_acquire>:
 800e688:	4801      	ldr	r0, [pc, #4]	; (800e690 <__sinit_lock_acquire+0x8>)
 800e68a:	f000 bc1a 	b.w	800eec2 <__retarget_lock_acquire_recursive>
 800e68e:	bf00      	nop
 800e690:	20002bea 	.word	0x20002bea

0800e694 <__sinit_lock_release>:
 800e694:	4801      	ldr	r0, [pc, #4]	; (800e69c <__sinit_lock_release+0x8>)
 800e696:	f000 bc15 	b.w	800eec4 <__retarget_lock_release_recursive>
 800e69a:	bf00      	nop
 800e69c:	20002bea 	.word	0x20002bea

0800e6a0 <__sinit>:
 800e6a0:	b510      	push	{r4, lr}
 800e6a2:	4604      	mov	r4, r0
 800e6a4:	f7ff fff0 	bl	800e688 <__sinit_lock_acquire>
 800e6a8:	69a3      	ldr	r3, [r4, #24]
 800e6aa:	b11b      	cbz	r3, 800e6b4 <__sinit+0x14>
 800e6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6b0:	f7ff bff0 	b.w	800e694 <__sinit_lock_release>
 800e6b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e6b8:	6523      	str	r3, [r4, #80]	; 0x50
 800e6ba:	4b13      	ldr	r3, [pc, #76]	; (800e708 <__sinit+0x68>)
 800e6bc:	4a13      	ldr	r2, [pc, #76]	; (800e70c <__sinit+0x6c>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800e6c2:	42a3      	cmp	r3, r4
 800e6c4:	bf04      	itt	eq
 800e6c6:	2301      	moveq	r3, #1
 800e6c8:	61a3      	streq	r3, [r4, #24]
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f000 f820 	bl	800e710 <__sfp>
 800e6d0:	6060      	str	r0, [r4, #4]
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	f000 f81c 	bl	800e710 <__sfp>
 800e6d8:	60a0      	str	r0, [r4, #8]
 800e6da:	4620      	mov	r0, r4
 800e6dc:	f000 f818 	bl	800e710 <__sfp>
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	60e0      	str	r0, [r4, #12]
 800e6e4:	2104      	movs	r1, #4
 800e6e6:	6860      	ldr	r0, [r4, #4]
 800e6e8:	f7ff ff82 	bl	800e5f0 <std>
 800e6ec:	68a0      	ldr	r0, [r4, #8]
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	2109      	movs	r1, #9
 800e6f2:	f7ff ff7d 	bl	800e5f0 <std>
 800e6f6:	68e0      	ldr	r0, [r4, #12]
 800e6f8:	2202      	movs	r2, #2
 800e6fa:	2112      	movs	r1, #18
 800e6fc:	f7ff ff78 	bl	800e5f0 <std>
 800e700:	2301      	movs	r3, #1
 800e702:	61a3      	str	r3, [r4, #24]
 800e704:	e7d2      	b.n	800e6ac <__sinit+0xc>
 800e706:	bf00      	nop
 800e708:	08010998 	.word	0x08010998
 800e70c:	0800e639 	.word	0x0800e639

0800e710 <__sfp>:
 800e710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e712:	4607      	mov	r7, r0
 800e714:	f7ff ffac 	bl	800e670 <__sfp_lock_acquire>
 800e718:	4b1e      	ldr	r3, [pc, #120]	; (800e794 <__sfp+0x84>)
 800e71a:	681e      	ldr	r6, [r3, #0]
 800e71c:	69b3      	ldr	r3, [r6, #24]
 800e71e:	b913      	cbnz	r3, 800e726 <__sfp+0x16>
 800e720:	4630      	mov	r0, r6
 800e722:	f7ff ffbd 	bl	800e6a0 <__sinit>
 800e726:	3648      	adds	r6, #72	; 0x48
 800e728:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e72c:	3b01      	subs	r3, #1
 800e72e:	d503      	bpl.n	800e738 <__sfp+0x28>
 800e730:	6833      	ldr	r3, [r6, #0]
 800e732:	b30b      	cbz	r3, 800e778 <__sfp+0x68>
 800e734:	6836      	ldr	r6, [r6, #0]
 800e736:	e7f7      	b.n	800e728 <__sfp+0x18>
 800e738:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e73c:	b9d5      	cbnz	r5, 800e774 <__sfp+0x64>
 800e73e:	4b16      	ldr	r3, [pc, #88]	; (800e798 <__sfp+0x88>)
 800e740:	60e3      	str	r3, [r4, #12]
 800e742:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e746:	6665      	str	r5, [r4, #100]	; 0x64
 800e748:	f000 fbba 	bl	800eec0 <__retarget_lock_init_recursive>
 800e74c:	f7ff ff96 	bl	800e67c <__sfp_lock_release>
 800e750:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e754:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e758:	6025      	str	r5, [r4, #0]
 800e75a:	61a5      	str	r5, [r4, #24]
 800e75c:	2208      	movs	r2, #8
 800e75e:	4629      	mov	r1, r5
 800e760:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e764:	f7fc fe7a 	bl	800b45c <memset>
 800e768:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e76c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e770:	4620      	mov	r0, r4
 800e772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e774:	3468      	adds	r4, #104	; 0x68
 800e776:	e7d9      	b.n	800e72c <__sfp+0x1c>
 800e778:	2104      	movs	r1, #4
 800e77a:	4638      	mov	r0, r7
 800e77c:	f7ff ff62 	bl	800e644 <__sfmoreglue>
 800e780:	4604      	mov	r4, r0
 800e782:	6030      	str	r0, [r6, #0]
 800e784:	2800      	cmp	r0, #0
 800e786:	d1d5      	bne.n	800e734 <__sfp+0x24>
 800e788:	f7ff ff78 	bl	800e67c <__sfp_lock_release>
 800e78c:	230c      	movs	r3, #12
 800e78e:	603b      	str	r3, [r7, #0]
 800e790:	e7ee      	b.n	800e770 <__sfp+0x60>
 800e792:	bf00      	nop
 800e794:	08010998 	.word	0x08010998
 800e798:	ffff0001 	.word	0xffff0001

0800e79c <_fwalk_reent>:
 800e79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7a0:	4606      	mov	r6, r0
 800e7a2:	4688      	mov	r8, r1
 800e7a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e7a8:	2700      	movs	r7, #0
 800e7aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e7ae:	f1b9 0901 	subs.w	r9, r9, #1
 800e7b2:	d505      	bpl.n	800e7c0 <_fwalk_reent+0x24>
 800e7b4:	6824      	ldr	r4, [r4, #0]
 800e7b6:	2c00      	cmp	r4, #0
 800e7b8:	d1f7      	bne.n	800e7aa <_fwalk_reent+0xe>
 800e7ba:	4638      	mov	r0, r7
 800e7bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7c0:	89ab      	ldrh	r3, [r5, #12]
 800e7c2:	2b01      	cmp	r3, #1
 800e7c4:	d907      	bls.n	800e7d6 <_fwalk_reent+0x3a>
 800e7c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	d003      	beq.n	800e7d6 <_fwalk_reent+0x3a>
 800e7ce:	4629      	mov	r1, r5
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	47c0      	blx	r8
 800e7d4:	4307      	orrs	r7, r0
 800e7d6:	3568      	adds	r5, #104	; 0x68
 800e7d8:	e7e9      	b.n	800e7ae <_fwalk_reent+0x12>

0800e7da <rshift>:
 800e7da:	6903      	ldr	r3, [r0, #16]
 800e7dc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e7e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7e4:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e7e8:	f100 0414 	add.w	r4, r0, #20
 800e7ec:	dd45      	ble.n	800e87a <rshift+0xa0>
 800e7ee:	f011 011f 	ands.w	r1, r1, #31
 800e7f2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e7f6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e7fa:	d10c      	bne.n	800e816 <rshift+0x3c>
 800e7fc:	f100 0710 	add.w	r7, r0, #16
 800e800:	4629      	mov	r1, r5
 800e802:	42b1      	cmp	r1, r6
 800e804:	d334      	bcc.n	800e870 <rshift+0x96>
 800e806:	1a9b      	subs	r3, r3, r2
 800e808:	009b      	lsls	r3, r3, #2
 800e80a:	1eea      	subs	r2, r5, #3
 800e80c:	4296      	cmp	r6, r2
 800e80e:	bf38      	it	cc
 800e810:	2300      	movcc	r3, #0
 800e812:	4423      	add	r3, r4
 800e814:	e015      	b.n	800e842 <rshift+0x68>
 800e816:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e81a:	f1c1 0820 	rsb	r8, r1, #32
 800e81e:	40cf      	lsrs	r7, r1
 800e820:	f105 0e04 	add.w	lr, r5, #4
 800e824:	46a1      	mov	r9, r4
 800e826:	4576      	cmp	r6, lr
 800e828:	46f4      	mov	ip, lr
 800e82a:	d815      	bhi.n	800e858 <rshift+0x7e>
 800e82c:	1a9a      	subs	r2, r3, r2
 800e82e:	0092      	lsls	r2, r2, #2
 800e830:	3a04      	subs	r2, #4
 800e832:	3501      	adds	r5, #1
 800e834:	42ae      	cmp	r6, r5
 800e836:	bf38      	it	cc
 800e838:	2200      	movcc	r2, #0
 800e83a:	18a3      	adds	r3, r4, r2
 800e83c:	50a7      	str	r7, [r4, r2]
 800e83e:	b107      	cbz	r7, 800e842 <rshift+0x68>
 800e840:	3304      	adds	r3, #4
 800e842:	1b1a      	subs	r2, r3, r4
 800e844:	42a3      	cmp	r3, r4
 800e846:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e84a:	bf08      	it	eq
 800e84c:	2300      	moveq	r3, #0
 800e84e:	6102      	str	r2, [r0, #16]
 800e850:	bf08      	it	eq
 800e852:	6143      	streq	r3, [r0, #20]
 800e854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e858:	f8dc c000 	ldr.w	ip, [ip]
 800e85c:	fa0c fc08 	lsl.w	ip, ip, r8
 800e860:	ea4c 0707 	orr.w	r7, ip, r7
 800e864:	f849 7b04 	str.w	r7, [r9], #4
 800e868:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e86c:	40cf      	lsrs	r7, r1
 800e86e:	e7da      	b.n	800e826 <rshift+0x4c>
 800e870:	f851 cb04 	ldr.w	ip, [r1], #4
 800e874:	f847 cf04 	str.w	ip, [r7, #4]!
 800e878:	e7c3      	b.n	800e802 <rshift+0x28>
 800e87a:	4623      	mov	r3, r4
 800e87c:	e7e1      	b.n	800e842 <rshift+0x68>

0800e87e <__hexdig_fun>:
 800e87e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e882:	2b09      	cmp	r3, #9
 800e884:	d802      	bhi.n	800e88c <__hexdig_fun+0xe>
 800e886:	3820      	subs	r0, #32
 800e888:	b2c0      	uxtb	r0, r0
 800e88a:	4770      	bx	lr
 800e88c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e890:	2b05      	cmp	r3, #5
 800e892:	d801      	bhi.n	800e898 <__hexdig_fun+0x1a>
 800e894:	3847      	subs	r0, #71	; 0x47
 800e896:	e7f7      	b.n	800e888 <__hexdig_fun+0xa>
 800e898:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e89c:	2b05      	cmp	r3, #5
 800e89e:	d801      	bhi.n	800e8a4 <__hexdig_fun+0x26>
 800e8a0:	3827      	subs	r0, #39	; 0x27
 800e8a2:	e7f1      	b.n	800e888 <__hexdig_fun+0xa>
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	4770      	bx	lr

0800e8a8 <__gethex>:
 800e8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ac:	ed2d 8b02 	vpush	{d8}
 800e8b0:	b089      	sub	sp, #36	; 0x24
 800e8b2:	ee08 0a10 	vmov	s16, r0
 800e8b6:	9304      	str	r3, [sp, #16]
 800e8b8:	4bb4      	ldr	r3, [pc, #720]	; (800eb8c <__gethex+0x2e4>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	9301      	str	r3, [sp, #4]
 800e8be:	4618      	mov	r0, r3
 800e8c0:	468b      	mov	fp, r1
 800e8c2:	4690      	mov	r8, r2
 800e8c4:	f7f1 fc8e 	bl	80001e4 <strlen>
 800e8c8:	9b01      	ldr	r3, [sp, #4]
 800e8ca:	f8db 2000 	ldr.w	r2, [fp]
 800e8ce:	4403      	add	r3, r0
 800e8d0:	4682      	mov	sl, r0
 800e8d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e8d6:	9305      	str	r3, [sp, #20]
 800e8d8:	1c93      	adds	r3, r2, #2
 800e8da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e8de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e8e2:	32fe      	adds	r2, #254	; 0xfe
 800e8e4:	18d1      	adds	r1, r2, r3
 800e8e6:	461f      	mov	r7, r3
 800e8e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e8ec:	9100      	str	r1, [sp, #0]
 800e8ee:	2830      	cmp	r0, #48	; 0x30
 800e8f0:	d0f8      	beq.n	800e8e4 <__gethex+0x3c>
 800e8f2:	f7ff ffc4 	bl	800e87e <__hexdig_fun>
 800e8f6:	4604      	mov	r4, r0
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	d13a      	bne.n	800e972 <__gethex+0xca>
 800e8fc:	9901      	ldr	r1, [sp, #4]
 800e8fe:	4652      	mov	r2, sl
 800e900:	4638      	mov	r0, r7
 800e902:	f001 fe05 	bl	8010510 <strncmp>
 800e906:	4605      	mov	r5, r0
 800e908:	2800      	cmp	r0, #0
 800e90a:	d168      	bne.n	800e9de <__gethex+0x136>
 800e90c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e910:	eb07 060a 	add.w	r6, r7, sl
 800e914:	f7ff ffb3 	bl	800e87e <__hexdig_fun>
 800e918:	2800      	cmp	r0, #0
 800e91a:	d062      	beq.n	800e9e2 <__gethex+0x13a>
 800e91c:	4633      	mov	r3, r6
 800e91e:	7818      	ldrb	r0, [r3, #0]
 800e920:	2830      	cmp	r0, #48	; 0x30
 800e922:	461f      	mov	r7, r3
 800e924:	f103 0301 	add.w	r3, r3, #1
 800e928:	d0f9      	beq.n	800e91e <__gethex+0x76>
 800e92a:	f7ff ffa8 	bl	800e87e <__hexdig_fun>
 800e92e:	2301      	movs	r3, #1
 800e930:	fab0 f480 	clz	r4, r0
 800e934:	0964      	lsrs	r4, r4, #5
 800e936:	4635      	mov	r5, r6
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	463a      	mov	r2, r7
 800e93c:	4616      	mov	r6, r2
 800e93e:	3201      	adds	r2, #1
 800e940:	7830      	ldrb	r0, [r6, #0]
 800e942:	f7ff ff9c 	bl	800e87e <__hexdig_fun>
 800e946:	2800      	cmp	r0, #0
 800e948:	d1f8      	bne.n	800e93c <__gethex+0x94>
 800e94a:	9901      	ldr	r1, [sp, #4]
 800e94c:	4652      	mov	r2, sl
 800e94e:	4630      	mov	r0, r6
 800e950:	f001 fdde 	bl	8010510 <strncmp>
 800e954:	b980      	cbnz	r0, 800e978 <__gethex+0xd0>
 800e956:	b94d      	cbnz	r5, 800e96c <__gethex+0xc4>
 800e958:	eb06 050a 	add.w	r5, r6, sl
 800e95c:	462a      	mov	r2, r5
 800e95e:	4616      	mov	r6, r2
 800e960:	3201      	adds	r2, #1
 800e962:	7830      	ldrb	r0, [r6, #0]
 800e964:	f7ff ff8b 	bl	800e87e <__hexdig_fun>
 800e968:	2800      	cmp	r0, #0
 800e96a:	d1f8      	bne.n	800e95e <__gethex+0xb6>
 800e96c:	1bad      	subs	r5, r5, r6
 800e96e:	00ad      	lsls	r5, r5, #2
 800e970:	e004      	b.n	800e97c <__gethex+0xd4>
 800e972:	2400      	movs	r4, #0
 800e974:	4625      	mov	r5, r4
 800e976:	e7e0      	b.n	800e93a <__gethex+0x92>
 800e978:	2d00      	cmp	r5, #0
 800e97a:	d1f7      	bne.n	800e96c <__gethex+0xc4>
 800e97c:	7833      	ldrb	r3, [r6, #0]
 800e97e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e982:	2b50      	cmp	r3, #80	; 0x50
 800e984:	d13b      	bne.n	800e9fe <__gethex+0x156>
 800e986:	7873      	ldrb	r3, [r6, #1]
 800e988:	2b2b      	cmp	r3, #43	; 0x2b
 800e98a:	d02c      	beq.n	800e9e6 <__gethex+0x13e>
 800e98c:	2b2d      	cmp	r3, #45	; 0x2d
 800e98e:	d02e      	beq.n	800e9ee <__gethex+0x146>
 800e990:	1c71      	adds	r1, r6, #1
 800e992:	f04f 0900 	mov.w	r9, #0
 800e996:	7808      	ldrb	r0, [r1, #0]
 800e998:	f7ff ff71 	bl	800e87e <__hexdig_fun>
 800e99c:	1e43      	subs	r3, r0, #1
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	2b18      	cmp	r3, #24
 800e9a2:	d82c      	bhi.n	800e9fe <__gethex+0x156>
 800e9a4:	f1a0 0210 	sub.w	r2, r0, #16
 800e9a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e9ac:	f7ff ff67 	bl	800e87e <__hexdig_fun>
 800e9b0:	1e43      	subs	r3, r0, #1
 800e9b2:	b2db      	uxtb	r3, r3
 800e9b4:	2b18      	cmp	r3, #24
 800e9b6:	d91d      	bls.n	800e9f4 <__gethex+0x14c>
 800e9b8:	f1b9 0f00 	cmp.w	r9, #0
 800e9bc:	d000      	beq.n	800e9c0 <__gethex+0x118>
 800e9be:	4252      	negs	r2, r2
 800e9c0:	4415      	add	r5, r2
 800e9c2:	f8cb 1000 	str.w	r1, [fp]
 800e9c6:	b1e4      	cbz	r4, 800ea02 <__gethex+0x15a>
 800e9c8:	9b00      	ldr	r3, [sp, #0]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	bf14      	ite	ne
 800e9ce:	2700      	movne	r7, #0
 800e9d0:	2706      	moveq	r7, #6
 800e9d2:	4638      	mov	r0, r7
 800e9d4:	b009      	add	sp, #36	; 0x24
 800e9d6:	ecbd 8b02 	vpop	{d8}
 800e9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9de:	463e      	mov	r6, r7
 800e9e0:	4625      	mov	r5, r4
 800e9e2:	2401      	movs	r4, #1
 800e9e4:	e7ca      	b.n	800e97c <__gethex+0xd4>
 800e9e6:	f04f 0900 	mov.w	r9, #0
 800e9ea:	1cb1      	adds	r1, r6, #2
 800e9ec:	e7d3      	b.n	800e996 <__gethex+0xee>
 800e9ee:	f04f 0901 	mov.w	r9, #1
 800e9f2:	e7fa      	b.n	800e9ea <__gethex+0x142>
 800e9f4:	230a      	movs	r3, #10
 800e9f6:	fb03 0202 	mla	r2, r3, r2, r0
 800e9fa:	3a10      	subs	r2, #16
 800e9fc:	e7d4      	b.n	800e9a8 <__gethex+0x100>
 800e9fe:	4631      	mov	r1, r6
 800ea00:	e7df      	b.n	800e9c2 <__gethex+0x11a>
 800ea02:	1bf3      	subs	r3, r6, r7
 800ea04:	3b01      	subs	r3, #1
 800ea06:	4621      	mov	r1, r4
 800ea08:	2b07      	cmp	r3, #7
 800ea0a:	dc0b      	bgt.n	800ea24 <__gethex+0x17c>
 800ea0c:	ee18 0a10 	vmov	r0, s16
 800ea10:	f000 fb18 	bl	800f044 <_Balloc>
 800ea14:	4604      	mov	r4, r0
 800ea16:	b940      	cbnz	r0, 800ea2a <__gethex+0x182>
 800ea18:	4b5d      	ldr	r3, [pc, #372]	; (800eb90 <__gethex+0x2e8>)
 800ea1a:	4602      	mov	r2, r0
 800ea1c:	21de      	movs	r1, #222	; 0xde
 800ea1e:	485d      	ldr	r0, [pc, #372]	; (800eb94 <__gethex+0x2ec>)
 800ea20:	f7fc fcb2 	bl	800b388 <__assert_func>
 800ea24:	3101      	adds	r1, #1
 800ea26:	105b      	asrs	r3, r3, #1
 800ea28:	e7ee      	b.n	800ea08 <__gethex+0x160>
 800ea2a:	f100 0914 	add.w	r9, r0, #20
 800ea2e:	f04f 0b00 	mov.w	fp, #0
 800ea32:	f1ca 0301 	rsb	r3, sl, #1
 800ea36:	f8cd 9008 	str.w	r9, [sp, #8]
 800ea3a:	f8cd b000 	str.w	fp, [sp]
 800ea3e:	9306      	str	r3, [sp, #24]
 800ea40:	42b7      	cmp	r7, r6
 800ea42:	d340      	bcc.n	800eac6 <__gethex+0x21e>
 800ea44:	9802      	ldr	r0, [sp, #8]
 800ea46:	9b00      	ldr	r3, [sp, #0]
 800ea48:	f840 3b04 	str.w	r3, [r0], #4
 800ea4c:	eba0 0009 	sub.w	r0, r0, r9
 800ea50:	1080      	asrs	r0, r0, #2
 800ea52:	0146      	lsls	r6, r0, #5
 800ea54:	6120      	str	r0, [r4, #16]
 800ea56:	4618      	mov	r0, r3
 800ea58:	f000 fbe6 	bl	800f228 <__hi0bits>
 800ea5c:	1a30      	subs	r0, r6, r0
 800ea5e:	f8d8 6000 	ldr.w	r6, [r8]
 800ea62:	42b0      	cmp	r0, r6
 800ea64:	dd63      	ble.n	800eb2e <__gethex+0x286>
 800ea66:	1b87      	subs	r7, r0, r6
 800ea68:	4639      	mov	r1, r7
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	f000 ff8a 	bl	800f984 <__any_on>
 800ea70:	4682      	mov	sl, r0
 800ea72:	b1a8      	cbz	r0, 800eaa0 <__gethex+0x1f8>
 800ea74:	1e7b      	subs	r3, r7, #1
 800ea76:	1159      	asrs	r1, r3, #5
 800ea78:	f003 021f 	and.w	r2, r3, #31
 800ea7c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ea80:	f04f 0a01 	mov.w	sl, #1
 800ea84:	fa0a f202 	lsl.w	r2, sl, r2
 800ea88:	420a      	tst	r2, r1
 800ea8a:	d009      	beq.n	800eaa0 <__gethex+0x1f8>
 800ea8c:	4553      	cmp	r3, sl
 800ea8e:	dd05      	ble.n	800ea9c <__gethex+0x1f4>
 800ea90:	1eb9      	subs	r1, r7, #2
 800ea92:	4620      	mov	r0, r4
 800ea94:	f000 ff76 	bl	800f984 <__any_on>
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	d145      	bne.n	800eb28 <__gethex+0x280>
 800ea9c:	f04f 0a02 	mov.w	sl, #2
 800eaa0:	4639      	mov	r1, r7
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	f7ff fe99 	bl	800e7da <rshift>
 800eaa8:	443d      	add	r5, r7
 800eaaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eaae:	42ab      	cmp	r3, r5
 800eab0:	da4c      	bge.n	800eb4c <__gethex+0x2a4>
 800eab2:	ee18 0a10 	vmov	r0, s16
 800eab6:	4621      	mov	r1, r4
 800eab8:	f000 fb04 	bl	800f0c4 <_Bfree>
 800eabc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eabe:	2300      	movs	r3, #0
 800eac0:	6013      	str	r3, [r2, #0]
 800eac2:	27a3      	movs	r7, #163	; 0xa3
 800eac4:	e785      	b.n	800e9d2 <__gethex+0x12a>
 800eac6:	1e73      	subs	r3, r6, #1
 800eac8:	9a05      	ldr	r2, [sp, #20]
 800eaca:	9303      	str	r3, [sp, #12]
 800eacc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ead0:	4293      	cmp	r3, r2
 800ead2:	d019      	beq.n	800eb08 <__gethex+0x260>
 800ead4:	f1bb 0f20 	cmp.w	fp, #32
 800ead8:	d107      	bne.n	800eaea <__gethex+0x242>
 800eada:	9b02      	ldr	r3, [sp, #8]
 800eadc:	9a00      	ldr	r2, [sp, #0]
 800eade:	f843 2b04 	str.w	r2, [r3], #4
 800eae2:	9302      	str	r3, [sp, #8]
 800eae4:	2300      	movs	r3, #0
 800eae6:	9300      	str	r3, [sp, #0]
 800eae8:	469b      	mov	fp, r3
 800eaea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800eaee:	f7ff fec6 	bl	800e87e <__hexdig_fun>
 800eaf2:	9b00      	ldr	r3, [sp, #0]
 800eaf4:	f000 000f 	and.w	r0, r0, #15
 800eaf8:	fa00 f00b 	lsl.w	r0, r0, fp
 800eafc:	4303      	orrs	r3, r0
 800eafe:	9300      	str	r3, [sp, #0]
 800eb00:	f10b 0b04 	add.w	fp, fp, #4
 800eb04:	9b03      	ldr	r3, [sp, #12]
 800eb06:	e00d      	b.n	800eb24 <__gethex+0x27c>
 800eb08:	9b03      	ldr	r3, [sp, #12]
 800eb0a:	9a06      	ldr	r2, [sp, #24]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	42bb      	cmp	r3, r7
 800eb10:	d3e0      	bcc.n	800ead4 <__gethex+0x22c>
 800eb12:	4618      	mov	r0, r3
 800eb14:	9901      	ldr	r1, [sp, #4]
 800eb16:	9307      	str	r3, [sp, #28]
 800eb18:	4652      	mov	r2, sl
 800eb1a:	f001 fcf9 	bl	8010510 <strncmp>
 800eb1e:	9b07      	ldr	r3, [sp, #28]
 800eb20:	2800      	cmp	r0, #0
 800eb22:	d1d7      	bne.n	800ead4 <__gethex+0x22c>
 800eb24:	461e      	mov	r6, r3
 800eb26:	e78b      	b.n	800ea40 <__gethex+0x198>
 800eb28:	f04f 0a03 	mov.w	sl, #3
 800eb2c:	e7b8      	b.n	800eaa0 <__gethex+0x1f8>
 800eb2e:	da0a      	bge.n	800eb46 <__gethex+0x29e>
 800eb30:	1a37      	subs	r7, r6, r0
 800eb32:	4621      	mov	r1, r4
 800eb34:	ee18 0a10 	vmov	r0, s16
 800eb38:	463a      	mov	r2, r7
 800eb3a:	f000 fcdf 	bl	800f4fc <__lshift>
 800eb3e:	1bed      	subs	r5, r5, r7
 800eb40:	4604      	mov	r4, r0
 800eb42:	f100 0914 	add.w	r9, r0, #20
 800eb46:	f04f 0a00 	mov.w	sl, #0
 800eb4a:	e7ae      	b.n	800eaaa <__gethex+0x202>
 800eb4c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800eb50:	42a8      	cmp	r0, r5
 800eb52:	dd72      	ble.n	800ec3a <__gethex+0x392>
 800eb54:	1b45      	subs	r5, r0, r5
 800eb56:	42ae      	cmp	r6, r5
 800eb58:	dc36      	bgt.n	800ebc8 <__gethex+0x320>
 800eb5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eb5e:	2b02      	cmp	r3, #2
 800eb60:	d02a      	beq.n	800ebb8 <__gethex+0x310>
 800eb62:	2b03      	cmp	r3, #3
 800eb64:	d02c      	beq.n	800ebc0 <__gethex+0x318>
 800eb66:	2b01      	cmp	r3, #1
 800eb68:	d11c      	bne.n	800eba4 <__gethex+0x2fc>
 800eb6a:	42ae      	cmp	r6, r5
 800eb6c:	d11a      	bne.n	800eba4 <__gethex+0x2fc>
 800eb6e:	2e01      	cmp	r6, #1
 800eb70:	d112      	bne.n	800eb98 <__gethex+0x2f0>
 800eb72:	9a04      	ldr	r2, [sp, #16]
 800eb74:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eb78:	6013      	str	r3, [r2, #0]
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	6123      	str	r3, [r4, #16]
 800eb7e:	f8c9 3000 	str.w	r3, [r9]
 800eb82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb84:	2762      	movs	r7, #98	; 0x62
 800eb86:	601c      	str	r4, [r3, #0]
 800eb88:	e723      	b.n	800e9d2 <__gethex+0x12a>
 800eb8a:	bf00      	nop
 800eb8c:	08010cf0 	.word	0x08010cf0
 800eb90:	08010c15 	.word	0x08010c15
 800eb94:	08010c88 	.word	0x08010c88
 800eb98:	1e71      	subs	r1, r6, #1
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f000 fef2 	bl	800f984 <__any_on>
 800eba0:	2800      	cmp	r0, #0
 800eba2:	d1e6      	bne.n	800eb72 <__gethex+0x2ca>
 800eba4:	ee18 0a10 	vmov	r0, s16
 800eba8:	4621      	mov	r1, r4
 800ebaa:	f000 fa8b 	bl	800f0c4 <_Bfree>
 800ebae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	6013      	str	r3, [r2, #0]
 800ebb4:	2750      	movs	r7, #80	; 0x50
 800ebb6:	e70c      	b.n	800e9d2 <__gethex+0x12a>
 800ebb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d1f2      	bne.n	800eba4 <__gethex+0x2fc>
 800ebbe:	e7d8      	b.n	800eb72 <__gethex+0x2ca>
 800ebc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d1d5      	bne.n	800eb72 <__gethex+0x2ca>
 800ebc6:	e7ed      	b.n	800eba4 <__gethex+0x2fc>
 800ebc8:	1e6f      	subs	r7, r5, #1
 800ebca:	f1ba 0f00 	cmp.w	sl, #0
 800ebce:	d131      	bne.n	800ec34 <__gethex+0x38c>
 800ebd0:	b127      	cbz	r7, 800ebdc <__gethex+0x334>
 800ebd2:	4639      	mov	r1, r7
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	f000 fed5 	bl	800f984 <__any_on>
 800ebda:	4682      	mov	sl, r0
 800ebdc:	117b      	asrs	r3, r7, #5
 800ebde:	2101      	movs	r1, #1
 800ebe0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ebe4:	f007 071f 	and.w	r7, r7, #31
 800ebe8:	fa01 f707 	lsl.w	r7, r1, r7
 800ebec:	421f      	tst	r7, r3
 800ebee:	4629      	mov	r1, r5
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	bf18      	it	ne
 800ebf4:	f04a 0a02 	orrne.w	sl, sl, #2
 800ebf8:	1b76      	subs	r6, r6, r5
 800ebfa:	f7ff fdee 	bl	800e7da <rshift>
 800ebfe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ec02:	2702      	movs	r7, #2
 800ec04:	f1ba 0f00 	cmp.w	sl, #0
 800ec08:	d048      	beq.n	800ec9c <__gethex+0x3f4>
 800ec0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ec0e:	2b02      	cmp	r3, #2
 800ec10:	d015      	beq.n	800ec3e <__gethex+0x396>
 800ec12:	2b03      	cmp	r3, #3
 800ec14:	d017      	beq.n	800ec46 <__gethex+0x39e>
 800ec16:	2b01      	cmp	r3, #1
 800ec18:	d109      	bne.n	800ec2e <__gethex+0x386>
 800ec1a:	f01a 0f02 	tst.w	sl, #2
 800ec1e:	d006      	beq.n	800ec2e <__gethex+0x386>
 800ec20:	f8d9 0000 	ldr.w	r0, [r9]
 800ec24:	ea4a 0a00 	orr.w	sl, sl, r0
 800ec28:	f01a 0f01 	tst.w	sl, #1
 800ec2c:	d10e      	bne.n	800ec4c <__gethex+0x3a4>
 800ec2e:	f047 0710 	orr.w	r7, r7, #16
 800ec32:	e033      	b.n	800ec9c <__gethex+0x3f4>
 800ec34:	f04f 0a01 	mov.w	sl, #1
 800ec38:	e7d0      	b.n	800ebdc <__gethex+0x334>
 800ec3a:	2701      	movs	r7, #1
 800ec3c:	e7e2      	b.n	800ec04 <__gethex+0x35c>
 800ec3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec40:	f1c3 0301 	rsb	r3, r3, #1
 800ec44:	9315      	str	r3, [sp, #84]	; 0x54
 800ec46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d0f0      	beq.n	800ec2e <__gethex+0x386>
 800ec4c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ec50:	f104 0314 	add.w	r3, r4, #20
 800ec54:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ec58:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ec5c:	f04f 0c00 	mov.w	ip, #0
 800ec60:	4618      	mov	r0, r3
 800ec62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec66:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ec6a:	d01c      	beq.n	800eca6 <__gethex+0x3fe>
 800ec6c:	3201      	adds	r2, #1
 800ec6e:	6002      	str	r2, [r0, #0]
 800ec70:	2f02      	cmp	r7, #2
 800ec72:	f104 0314 	add.w	r3, r4, #20
 800ec76:	d13f      	bne.n	800ecf8 <__gethex+0x450>
 800ec78:	f8d8 2000 	ldr.w	r2, [r8]
 800ec7c:	3a01      	subs	r2, #1
 800ec7e:	42b2      	cmp	r2, r6
 800ec80:	d10a      	bne.n	800ec98 <__gethex+0x3f0>
 800ec82:	1171      	asrs	r1, r6, #5
 800ec84:	2201      	movs	r2, #1
 800ec86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ec8a:	f006 061f 	and.w	r6, r6, #31
 800ec8e:	fa02 f606 	lsl.w	r6, r2, r6
 800ec92:	421e      	tst	r6, r3
 800ec94:	bf18      	it	ne
 800ec96:	4617      	movne	r7, r2
 800ec98:	f047 0720 	orr.w	r7, r7, #32
 800ec9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec9e:	601c      	str	r4, [r3, #0]
 800eca0:	9b04      	ldr	r3, [sp, #16]
 800eca2:	601d      	str	r5, [r3, #0]
 800eca4:	e695      	b.n	800e9d2 <__gethex+0x12a>
 800eca6:	4299      	cmp	r1, r3
 800eca8:	f843 cc04 	str.w	ip, [r3, #-4]
 800ecac:	d8d8      	bhi.n	800ec60 <__gethex+0x3b8>
 800ecae:	68a3      	ldr	r3, [r4, #8]
 800ecb0:	459b      	cmp	fp, r3
 800ecb2:	db19      	blt.n	800ece8 <__gethex+0x440>
 800ecb4:	6861      	ldr	r1, [r4, #4]
 800ecb6:	ee18 0a10 	vmov	r0, s16
 800ecba:	3101      	adds	r1, #1
 800ecbc:	f000 f9c2 	bl	800f044 <_Balloc>
 800ecc0:	4681      	mov	r9, r0
 800ecc2:	b918      	cbnz	r0, 800eccc <__gethex+0x424>
 800ecc4:	4b1a      	ldr	r3, [pc, #104]	; (800ed30 <__gethex+0x488>)
 800ecc6:	4602      	mov	r2, r0
 800ecc8:	2184      	movs	r1, #132	; 0x84
 800ecca:	e6a8      	b.n	800ea1e <__gethex+0x176>
 800eccc:	6922      	ldr	r2, [r4, #16]
 800ecce:	3202      	adds	r2, #2
 800ecd0:	f104 010c 	add.w	r1, r4, #12
 800ecd4:	0092      	lsls	r2, r2, #2
 800ecd6:	300c      	adds	r0, #12
 800ecd8:	f000 f980 	bl	800efdc <memcpy>
 800ecdc:	4621      	mov	r1, r4
 800ecde:	ee18 0a10 	vmov	r0, s16
 800ece2:	f000 f9ef 	bl	800f0c4 <_Bfree>
 800ece6:	464c      	mov	r4, r9
 800ece8:	6923      	ldr	r3, [r4, #16]
 800ecea:	1c5a      	adds	r2, r3, #1
 800ecec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ecf0:	6122      	str	r2, [r4, #16]
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	615a      	str	r2, [r3, #20]
 800ecf6:	e7bb      	b.n	800ec70 <__gethex+0x3c8>
 800ecf8:	6922      	ldr	r2, [r4, #16]
 800ecfa:	455a      	cmp	r2, fp
 800ecfc:	dd0b      	ble.n	800ed16 <__gethex+0x46e>
 800ecfe:	2101      	movs	r1, #1
 800ed00:	4620      	mov	r0, r4
 800ed02:	f7ff fd6a 	bl	800e7da <rshift>
 800ed06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed0a:	3501      	adds	r5, #1
 800ed0c:	42ab      	cmp	r3, r5
 800ed0e:	f6ff aed0 	blt.w	800eab2 <__gethex+0x20a>
 800ed12:	2701      	movs	r7, #1
 800ed14:	e7c0      	b.n	800ec98 <__gethex+0x3f0>
 800ed16:	f016 061f 	ands.w	r6, r6, #31
 800ed1a:	d0fa      	beq.n	800ed12 <__gethex+0x46a>
 800ed1c:	4453      	add	r3, sl
 800ed1e:	f1c6 0620 	rsb	r6, r6, #32
 800ed22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ed26:	f000 fa7f 	bl	800f228 <__hi0bits>
 800ed2a:	42b0      	cmp	r0, r6
 800ed2c:	dbe7      	blt.n	800ecfe <__gethex+0x456>
 800ed2e:	e7f0      	b.n	800ed12 <__gethex+0x46a>
 800ed30:	08010c15 	.word	0x08010c15

0800ed34 <L_shift>:
 800ed34:	f1c2 0208 	rsb	r2, r2, #8
 800ed38:	0092      	lsls	r2, r2, #2
 800ed3a:	b570      	push	{r4, r5, r6, lr}
 800ed3c:	f1c2 0620 	rsb	r6, r2, #32
 800ed40:	6843      	ldr	r3, [r0, #4]
 800ed42:	6804      	ldr	r4, [r0, #0]
 800ed44:	fa03 f506 	lsl.w	r5, r3, r6
 800ed48:	432c      	orrs	r4, r5
 800ed4a:	40d3      	lsrs	r3, r2
 800ed4c:	6004      	str	r4, [r0, #0]
 800ed4e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ed52:	4288      	cmp	r0, r1
 800ed54:	d3f4      	bcc.n	800ed40 <L_shift+0xc>
 800ed56:	bd70      	pop	{r4, r5, r6, pc}

0800ed58 <__match>:
 800ed58:	b530      	push	{r4, r5, lr}
 800ed5a:	6803      	ldr	r3, [r0, #0]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed62:	b914      	cbnz	r4, 800ed6a <__match+0x12>
 800ed64:	6003      	str	r3, [r0, #0]
 800ed66:	2001      	movs	r0, #1
 800ed68:	bd30      	pop	{r4, r5, pc}
 800ed6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ed72:	2d19      	cmp	r5, #25
 800ed74:	bf98      	it	ls
 800ed76:	3220      	addls	r2, #32
 800ed78:	42a2      	cmp	r2, r4
 800ed7a:	d0f0      	beq.n	800ed5e <__match+0x6>
 800ed7c:	2000      	movs	r0, #0
 800ed7e:	e7f3      	b.n	800ed68 <__match+0x10>

0800ed80 <__hexnan>:
 800ed80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed84:	680b      	ldr	r3, [r1, #0]
 800ed86:	115e      	asrs	r6, r3, #5
 800ed88:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ed8c:	f013 031f 	ands.w	r3, r3, #31
 800ed90:	b087      	sub	sp, #28
 800ed92:	bf18      	it	ne
 800ed94:	3604      	addne	r6, #4
 800ed96:	2500      	movs	r5, #0
 800ed98:	1f37      	subs	r7, r6, #4
 800ed9a:	4690      	mov	r8, r2
 800ed9c:	6802      	ldr	r2, [r0, #0]
 800ed9e:	9301      	str	r3, [sp, #4]
 800eda0:	4682      	mov	sl, r0
 800eda2:	f846 5c04 	str.w	r5, [r6, #-4]
 800eda6:	46b9      	mov	r9, r7
 800eda8:	463c      	mov	r4, r7
 800edaa:	9502      	str	r5, [sp, #8]
 800edac:	46ab      	mov	fp, r5
 800edae:	7851      	ldrb	r1, [r2, #1]
 800edb0:	1c53      	adds	r3, r2, #1
 800edb2:	9303      	str	r3, [sp, #12]
 800edb4:	b341      	cbz	r1, 800ee08 <__hexnan+0x88>
 800edb6:	4608      	mov	r0, r1
 800edb8:	9205      	str	r2, [sp, #20]
 800edba:	9104      	str	r1, [sp, #16]
 800edbc:	f7ff fd5f 	bl	800e87e <__hexdig_fun>
 800edc0:	2800      	cmp	r0, #0
 800edc2:	d14f      	bne.n	800ee64 <__hexnan+0xe4>
 800edc4:	9904      	ldr	r1, [sp, #16]
 800edc6:	9a05      	ldr	r2, [sp, #20]
 800edc8:	2920      	cmp	r1, #32
 800edca:	d818      	bhi.n	800edfe <__hexnan+0x7e>
 800edcc:	9b02      	ldr	r3, [sp, #8]
 800edce:	459b      	cmp	fp, r3
 800edd0:	dd13      	ble.n	800edfa <__hexnan+0x7a>
 800edd2:	454c      	cmp	r4, r9
 800edd4:	d206      	bcs.n	800ede4 <__hexnan+0x64>
 800edd6:	2d07      	cmp	r5, #7
 800edd8:	dc04      	bgt.n	800ede4 <__hexnan+0x64>
 800edda:	462a      	mov	r2, r5
 800eddc:	4649      	mov	r1, r9
 800edde:	4620      	mov	r0, r4
 800ede0:	f7ff ffa8 	bl	800ed34 <L_shift>
 800ede4:	4544      	cmp	r4, r8
 800ede6:	d950      	bls.n	800ee8a <__hexnan+0x10a>
 800ede8:	2300      	movs	r3, #0
 800edea:	f1a4 0904 	sub.w	r9, r4, #4
 800edee:	f844 3c04 	str.w	r3, [r4, #-4]
 800edf2:	f8cd b008 	str.w	fp, [sp, #8]
 800edf6:	464c      	mov	r4, r9
 800edf8:	461d      	mov	r5, r3
 800edfa:	9a03      	ldr	r2, [sp, #12]
 800edfc:	e7d7      	b.n	800edae <__hexnan+0x2e>
 800edfe:	2929      	cmp	r1, #41	; 0x29
 800ee00:	d156      	bne.n	800eeb0 <__hexnan+0x130>
 800ee02:	3202      	adds	r2, #2
 800ee04:	f8ca 2000 	str.w	r2, [sl]
 800ee08:	f1bb 0f00 	cmp.w	fp, #0
 800ee0c:	d050      	beq.n	800eeb0 <__hexnan+0x130>
 800ee0e:	454c      	cmp	r4, r9
 800ee10:	d206      	bcs.n	800ee20 <__hexnan+0xa0>
 800ee12:	2d07      	cmp	r5, #7
 800ee14:	dc04      	bgt.n	800ee20 <__hexnan+0xa0>
 800ee16:	462a      	mov	r2, r5
 800ee18:	4649      	mov	r1, r9
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	f7ff ff8a 	bl	800ed34 <L_shift>
 800ee20:	4544      	cmp	r4, r8
 800ee22:	d934      	bls.n	800ee8e <__hexnan+0x10e>
 800ee24:	f1a8 0204 	sub.w	r2, r8, #4
 800ee28:	4623      	mov	r3, r4
 800ee2a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ee2e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ee32:	429f      	cmp	r7, r3
 800ee34:	d2f9      	bcs.n	800ee2a <__hexnan+0xaa>
 800ee36:	1b3b      	subs	r3, r7, r4
 800ee38:	f023 0303 	bic.w	r3, r3, #3
 800ee3c:	3304      	adds	r3, #4
 800ee3e:	3401      	adds	r4, #1
 800ee40:	3e03      	subs	r6, #3
 800ee42:	42b4      	cmp	r4, r6
 800ee44:	bf88      	it	hi
 800ee46:	2304      	movhi	r3, #4
 800ee48:	4443      	add	r3, r8
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	f843 2b04 	str.w	r2, [r3], #4
 800ee50:	429f      	cmp	r7, r3
 800ee52:	d2fb      	bcs.n	800ee4c <__hexnan+0xcc>
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	b91b      	cbnz	r3, 800ee60 <__hexnan+0xe0>
 800ee58:	4547      	cmp	r7, r8
 800ee5a:	d127      	bne.n	800eeac <__hexnan+0x12c>
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	603b      	str	r3, [r7, #0]
 800ee60:	2005      	movs	r0, #5
 800ee62:	e026      	b.n	800eeb2 <__hexnan+0x132>
 800ee64:	3501      	adds	r5, #1
 800ee66:	2d08      	cmp	r5, #8
 800ee68:	f10b 0b01 	add.w	fp, fp, #1
 800ee6c:	dd06      	ble.n	800ee7c <__hexnan+0xfc>
 800ee6e:	4544      	cmp	r4, r8
 800ee70:	d9c3      	bls.n	800edfa <__hexnan+0x7a>
 800ee72:	2300      	movs	r3, #0
 800ee74:	f844 3c04 	str.w	r3, [r4, #-4]
 800ee78:	2501      	movs	r5, #1
 800ee7a:	3c04      	subs	r4, #4
 800ee7c:	6822      	ldr	r2, [r4, #0]
 800ee7e:	f000 000f 	and.w	r0, r0, #15
 800ee82:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ee86:	6022      	str	r2, [r4, #0]
 800ee88:	e7b7      	b.n	800edfa <__hexnan+0x7a>
 800ee8a:	2508      	movs	r5, #8
 800ee8c:	e7b5      	b.n	800edfa <__hexnan+0x7a>
 800ee8e:	9b01      	ldr	r3, [sp, #4]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d0df      	beq.n	800ee54 <__hexnan+0xd4>
 800ee94:	f04f 32ff 	mov.w	r2, #4294967295
 800ee98:	f1c3 0320 	rsb	r3, r3, #32
 800ee9c:	fa22 f303 	lsr.w	r3, r2, r3
 800eea0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eea4:	401a      	ands	r2, r3
 800eea6:	f846 2c04 	str.w	r2, [r6, #-4]
 800eeaa:	e7d3      	b.n	800ee54 <__hexnan+0xd4>
 800eeac:	3f04      	subs	r7, #4
 800eeae:	e7d1      	b.n	800ee54 <__hexnan+0xd4>
 800eeb0:	2004      	movs	r0, #4
 800eeb2:	b007      	add	sp, #28
 800eeb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eeb8 <_localeconv_r>:
 800eeb8:	4800      	ldr	r0, [pc, #0]	; (800eebc <_localeconv_r+0x4>)
 800eeba:	4770      	bx	lr
 800eebc:	2000153c 	.word	0x2000153c

0800eec0 <__retarget_lock_init_recursive>:
 800eec0:	4770      	bx	lr

0800eec2 <__retarget_lock_acquire_recursive>:
 800eec2:	4770      	bx	lr

0800eec4 <__retarget_lock_release_recursive>:
 800eec4:	4770      	bx	lr
	...

0800eec8 <_lseek_r>:
 800eec8:	b538      	push	{r3, r4, r5, lr}
 800eeca:	4d07      	ldr	r5, [pc, #28]	; (800eee8 <_lseek_r+0x20>)
 800eecc:	4604      	mov	r4, r0
 800eece:	4608      	mov	r0, r1
 800eed0:	4611      	mov	r1, r2
 800eed2:	2200      	movs	r2, #0
 800eed4:	602a      	str	r2, [r5, #0]
 800eed6:	461a      	mov	r2, r3
 800eed8:	f7f7 fc0e 	bl	80066f8 <_lseek>
 800eedc:	1c43      	adds	r3, r0, #1
 800eede:	d102      	bne.n	800eee6 <_lseek_r+0x1e>
 800eee0:	682b      	ldr	r3, [r5, #0]
 800eee2:	b103      	cbz	r3, 800eee6 <_lseek_r+0x1e>
 800eee4:	6023      	str	r3, [r4, #0]
 800eee6:	bd38      	pop	{r3, r4, r5, pc}
 800eee8:	20002bec 	.word	0x20002bec

0800eeec <__swhatbuf_r>:
 800eeec:	b570      	push	{r4, r5, r6, lr}
 800eeee:	460e      	mov	r6, r1
 800eef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eef4:	2900      	cmp	r1, #0
 800eef6:	b096      	sub	sp, #88	; 0x58
 800eef8:	4614      	mov	r4, r2
 800eefa:	461d      	mov	r5, r3
 800eefc:	da08      	bge.n	800ef10 <__swhatbuf_r+0x24>
 800eefe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ef02:	2200      	movs	r2, #0
 800ef04:	602a      	str	r2, [r5, #0]
 800ef06:	061a      	lsls	r2, r3, #24
 800ef08:	d410      	bmi.n	800ef2c <__swhatbuf_r+0x40>
 800ef0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef0e:	e00e      	b.n	800ef2e <__swhatbuf_r+0x42>
 800ef10:	466a      	mov	r2, sp
 800ef12:	f001 fbcd 	bl	80106b0 <_fstat_r>
 800ef16:	2800      	cmp	r0, #0
 800ef18:	dbf1      	blt.n	800eefe <__swhatbuf_r+0x12>
 800ef1a:	9a01      	ldr	r2, [sp, #4]
 800ef1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef24:	425a      	negs	r2, r3
 800ef26:	415a      	adcs	r2, r3
 800ef28:	602a      	str	r2, [r5, #0]
 800ef2a:	e7ee      	b.n	800ef0a <__swhatbuf_r+0x1e>
 800ef2c:	2340      	movs	r3, #64	; 0x40
 800ef2e:	2000      	movs	r0, #0
 800ef30:	6023      	str	r3, [r4, #0]
 800ef32:	b016      	add	sp, #88	; 0x58
 800ef34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ef38 <__smakebuf_r>:
 800ef38:	898b      	ldrh	r3, [r1, #12]
 800ef3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef3c:	079d      	lsls	r5, r3, #30
 800ef3e:	4606      	mov	r6, r0
 800ef40:	460c      	mov	r4, r1
 800ef42:	d507      	bpl.n	800ef54 <__smakebuf_r+0x1c>
 800ef44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef48:	6023      	str	r3, [r4, #0]
 800ef4a:	6123      	str	r3, [r4, #16]
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	6163      	str	r3, [r4, #20]
 800ef50:	b002      	add	sp, #8
 800ef52:	bd70      	pop	{r4, r5, r6, pc}
 800ef54:	ab01      	add	r3, sp, #4
 800ef56:	466a      	mov	r2, sp
 800ef58:	f7ff ffc8 	bl	800eeec <__swhatbuf_r>
 800ef5c:	9900      	ldr	r1, [sp, #0]
 800ef5e:	4605      	mov	r5, r0
 800ef60:	4630      	mov	r0, r6
 800ef62:	f7fc faef 	bl	800b544 <_malloc_r>
 800ef66:	b948      	cbnz	r0, 800ef7c <__smakebuf_r+0x44>
 800ef68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef6c:	059a      	lsls	r2, r3, #22
 800ef6e:	d4ef      	bmi.n	800ef50 <__smakebuf_r+0x18>
 800ef70:	f023 0303 	bic.w	r3, r3, #3
 800ef74:	f043 0302 	orr.w	r3, r3, #2
 800ef78:	81a3      	strh	r3, [r4, #12]
 800ef7a:	e7e3      	b.n	800ef44 <__smakebuf_r+0xc>
 800ef7c:	4b0d      	ldr	r3, [pc, #52]	; (800efb4 <__smakebuf_r+0x7c>)
 800ef7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ef80:	89a3      	ldrh	r3, [r4, #12]
 800ef82:	6020      	str	r0, [r4, #0]
 800ef84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef88:	81a3      	strh	r3, [r4, #12]
 800ef8a:	9b00      	ldr	r3, [sp, #0]
 800ef8c:	6163      	str	r3, [r4, #20]
 800ef8e:	9b01      	ldr	r3, [sp, #4]
 800ef90:	6120      	str	r0, [r4, #16]
 800ef92:	b15b      	cbz	r3, 800efac <__smakebuf_r+0x74>
 800ef94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef98:	4630      	mov	r0, r6
 800ef9a:	f001 fb9b 	bl	80106d4 <_isatty_r>
 800ef9e:	b128      	cbz	r0, 800efac <__smakebuf_r+0x74>
 800efa0:	89a3      	ldrh	r3, [r4, #12]
 800efa2:	f023 0303 	bic.w	r3, r3, #3
 800efa6:	f043 0301 	orr.w	r3, r3, #1
 800efaa:	81a3      	strh	r3, [r4, #12]
 800efac:	89a0      	ldrh	r0, [r4, #12]
 800efae:	4305      	orrs	r5, r0
 800efb0:	81a5      	strh	r5, [r4, #12]
 800efb2:	e7cd      	b.n	800ef50 <__smakebuf_r+0x18>
 800efb4:	0800e639 	.word	0x0800e639

0800efb8 <__ascii_mbtowc>:
 800efb8:	b082      	sub	sp, #8
 800efba:	b901      	cbnz	r1, 800efbe <__ascii_mbtowc+0x6>
 800efbc:	a901      	add	r1, sp, #4
 800efbe:	b142      	cbz	r2, 800efd2 <__ascii_mbtowc+0x1a>
 800efc0:	b14b      	cbz	r3, 800efd6 <__ascii_mbtowc+0x1e>
 800efc2:	7813      	ldrb	r3, [r2, #0]
 800efc4:	600b      	str	r3, [r1, #0]
 800efc6:	7812      	ldrb	r2, [r2, #0]
 800efc8:	1e10      	subs	r0, r2, #0
 800efca:	bf18      	it	ne
 800efcc:	2001      	movne	r0, #1
 800efce:	b002      	add	sp, #8
 800efd0:	4770      	bx	lr
 800efd2:	4610      	mov	r0, r2
 800efd4:	e7fb      	b.n	800efce <__ascii_mbtowc+0x16>
 800efd6:	f06f 0001 	mvn.w	r0, #1
 800efda:	e7f8      	b.n	800efce <__ascii_mbtowc+0x16>

0800efdc <memcpy>:
 800efdc:	440a      	add	r2, r1
 800efde:	4291      	cmp	r1, r2
 800efe0:	f100 33ff 	add.w	r3, r0, #4294967295
 800efe4:	d100      	bne.n	800efe8 <memcpy+0xc>
 800efe6:	4770      	bx	lr
 800efe8:	b510      	push	{r4, lr}
 800efea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eff2:	4291      	cmp	r1, r2
 800eff4:	d1f9      	bne.n	800efea <memcpy+0xe>
 800eff6:	bd10      	pop	{r4, pc}

0800eff8 <memmove>:
 800eff8:	4288      	cmp	r0, r1
 800effa:	b510      	push	{r4, lr}
 800effc:	eb01 0402 	add.w	r4, r1, r2
 800f000:	d902      	bls.n	800f008 <memmove+0x10>
 800f002:	4284      	cmp	r4, r0
 800f004:	4623      	mov	r3, r4
 800f006:	d807      	bhi.n	800f018 <memmove+0x20>
 800f008:	1e43      	subs	r3, r0, #1
 800f00a:	42a1      	cmp	r1, r4
 800f00c:	d008      	beq.n	800f020 <memmove+0x28>
 800f00e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f012:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f016:	e7f8      	b.n	800f00a <memmove+0x12>
 800f018:	4402      	add	r2, r0
 800f01a:	4601      	mov	r1, r0
 800f01c:	428a      	cmp	r2, r1
 800f01e:	d100      	bne.n	800f022 <memmove+0x2a>
 800f020:	bd10      	pop	{r4, pc}
 800f022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f026:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f02a:	e7f7      	b.n	800f01c <memmove+0x24>

0800f02c <__malloc_lock>:
 800f02c:	4801      	ldr	r0, [pc, #4]	; (800f034 <__malloc_lock+0x8>)
 800f02e:	f7ff bf48 	b.w	800eec2 <__retarget_lock_acquire_recursive>
 800f032:	bf00      	nop
 800f034:	20002be8 	.word	0x20002be8

0800f038 <__malloc_unlock>:
 800f038:	4801      	ldr	r0, [pc, #4]	; (800f040 <__malloc_unlock+0x8>)
 800f03a:	f7ff bf43 	b.w	800eec4 <__retarget_lock_release_recursive>
 800f03e:	bf00      	nop
 800f040:	20002be8 	.word	0x20002be8

0800f044 <_Balloc>:
 800f044:	b570      	push	{r4, r5, r6, lr}
 800f046:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f048:	4604      	mov	r4, r0
 800f04a:	460d      	mov	r5, r1
 800f04c:	b976      	cbnz	r6, 800f06c <_Balloc+0x28>
 800f04e:	2010      	movs	r0, #16
 800f050:	f7fc f9f4 	bl	800b43c <malloc>
 800f054:	4602      	mov	r2, r0
 800f056:	6260      	str	r0, [r4, #36]	; 0x24
 800f058:	b920      	cbnz	r0, 800f064 <_Balloc+0x20>
 800f05a:	4b18      	ldr	r3, [pc, #96]	; (800f0bc <_Balloc+0x78>)
 800f05c:	4818      	ldr	r0, [pc, #96]	; (800f0c0 <_Balloc+0x7c>)
 800f05e:	2166      	movs	r1, #102	; 0x66
 800f060:	f7fc f992 	bl	800b388 <__assert_func>
 800f064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f068:	6006      	str	r6, [r0, #0]
 800f06a:	60c6      	str	r6, [r0, #12]
 800f06c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f06e:	68f3      	ldr	r3, [r6, #12]
 800f070:	b183      	cbz	r3, 800f094 <_Balloc+0x50>
 800f072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f074:	68db      	ldr	r3, [r3, #12]
 800f076:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f07a:	b9b8      	cbnz	r0, 800f0ac <_Balloc+0x68>
 800f07c:	2101      	movs	r1, #1
 800f07e:	fa01 f605 	lsl.w	r6, r1, r5
 800f082:	1d72      	adds	r2, r6, #5
 800f084:	0092      	lsls	r2, r2, #2
 800f086:	4620      	mov	r0, r4
 800f088:	f000 fc9d 	bl	800f9c6 <_calloc_r>
 800f08c:	b160      	cbz	r0, 800f0a8 <_Balloc+0x64>
 800f08e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f092:	e00e      	b.n	800f0b2 <_Balloc+0x6e>
 800f094:	2221      	movs	r2, #33	; 0x21
 800f096:	2104      	movs	r1, #4
 800f098:	4620      	mov	r0, r4
 800f09a:	f000 fc94 	bl	800f9c6 <_calloc_r>
 800f09e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0a0:	60f0      	str	r0, [r6, #12]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d1e4      	bne.n	800f072 <_Balloc+0x2e>
 800f0a8:	2000      	movs	r0, #0
 800f0aa:	bd70      	pop	{r4, r5, r6, pc}
 800f0ac:	6802      	ldr	r2, [r0, #0]
 800f0ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f0b8:	e7f7      	b.n	800f0aa <_Balloc+0x66>
 800f0ba:	bf00      	nop
 800f0bc:	08010a38 	.word	0x08010a38
 800f0c0:	08010d04 	.word	0x08010d04

0800f0c4 <_Bfree>:
 800f0c4:	b570      	push	{r4, r5, r6, lr}
 800f0c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f0c8:	4605      	mov	r5, r0
 800f0ca:	460c      	mov	r4, r1
 800f0cc:	b976      	cbnz	r6, 800f0ec <_Bfree+0x28>
 800f0ce:	2010      	movs	r0, #16
 800f0d0:	f7fc f9b4 	bl	800b43c <malloc>
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	6268      	str	r0, [r5, #36]	; 0x24
 800f0d8:	b920      	cbnz	r0, 800f0e4 <_Bfree+0x20>
 800f0da:	4b09      	ldr	r3, [pc, #36]	; (800f100 <_Bfree+0x3c>)
 800f0dc:	4809      	ldr	r0, [pc, #36]	; (800f104 <_Bfree+0x40>)
 800f0de:	218a      	movs	r1, #138	; 0x8a
 800f0e0:	f7fc f952 	bl	800b388 <__assert_func>
 800f0e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0e8:	6006      	str	r6, [r0, #0]
 800f0ea:	60c6      	str	r6, [r0, #12]
 800f0ec:	b13c      	cbz	r4, 800f0fe <_Bfree+0x3a>
 800f0ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f0f0:	6862      	ldr	r2, [r4, #4]
 800f0f2:	68db      	ldr	r3, [r3, #12]
 800f0f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f0f8:	6021      	str	r1, [r4, #0]
 800f0fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f0fe:	bd70      	pop	{r4, r5, r6, pc}
 800f100:	08010a38 	.word	0x08010a38
 800f104:	08010d04 	.word	0x08010d04

0800f108 <__multadd>:
 800f108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f10c:	690d      	ldr	r5, [r1, #16]
 800f10e:	4607      	mov	r7, r0
 800f110:	460c      	mov	r4, r1
 800f112:	461e      	mov	r6, r3
 800f114:	f101 0c14 	add.w	ip, r1, #20
 800f118:	2000      	movs	r0, #0
 800f11a:	f8dc 3000 	ldr.w	r3, [ip]
 800f11e:	b299      	uxth	r1, r3
 800f120:	fb02 6101 	mla	r1, r2, r1, r6
 800f124:	0c1e      	lsrs	r6, r3, #16
 800f126:	0c0b      	lsrs	r3, r1, #16
 800f128:	fb02 3306 	mla	r3, r2, r6, r3
 800f12c:	b289      	uxth	r1, r1
 800f12e:	3001      	adds	r0, #1
 800f130:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f134:	4285      	cmp	r5, r0
 800f136:	f84c 1b04 	str.w	r1, [ip], #4
 800f13a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f13e:	dcec      	bgt.n	800f11a <__multadd+0x12>
 800f140:	b30e      	cbz	r6, 800f186 <__multadd+0x7e>
 800f142:	68a3      	ldr	r3, [r4, #8]
 800f144:	42ab      	cmp	r3, r5
 800f146:	dc19      	bgt.n	800f17c <__multadd+0x74>
 800f148:	6861      	ldr	r1, [r4, #4]
 800f14a:	4638      	mov	r0, r7
 800f14c:	3101      	adds	r1, #1
 800f14e:	f7ff ff79 	bl	800f044 <_Balloc>
 800f152:	4680      	mov	r8, r0
 800f154:	b928      	cbnz	r0, 800f162 <__multadd+0x5a>
 800f156:	4602      	mov	r2, r0
 800f158:	4b0c      	ldr	r3, [pc, #48]	; (800f18c <__multadd+0x84>)
 800f15a:	480d      	ldr	r0, [pc, #52]	; (800f190 <__multadd+0x88>)
 800f15c:	21b5      	movs	r1, #181	; 0xb5
 800f15e:	f7fc f913 	bl	800b388 <__assert_func>
 800f162:	6922      	ldr	r2, [r4, #16]
 800f164:	3202      	adds	r2, #2
 800f166:	f104 010c 	add.w	r1, r4, #12
 800f16a:	0092      	lsls	r2, r2, #2
 800f16c:	300c      	adds	r0, #12
 800f16e:	f7ff ff35 	bl	800efdc <memcpy>
 800f172:	4621      	mov	r1, r4
 800f174:	4638      	mov	r0, r7
 800f176:	f7ff ffa5 	bl	800f0c4 <_Bfree>
 800f17a:	4644      	mov	r4, r8
 800f17c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f180:	3501      	adds	r5, #1
 800f182:	615e      	str	r6, [r3, #20]
 800f184:	6125      	str	r5, [r4, #16]
 800f186:	4620      	mov	r0, r4
 800f188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f18c:	08010c15 	.word	0x08010c15
 800f190:	08010d04 	.word	0x08010d04

0800f194 <__s2b>:
 800f194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f198:	460c      	mov	r4, r1
 800f19a:	4615      	mov	r5, r2
 800f19c:	461f      	mov	r7, r3
 800f19e:	2209      	movs	r2, #9
 800f1a0:	3308      	adds	r3, #8
 800f1a2:	4606      	mov	r6, r0
 800f1a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1a8:	2100      	movs	r1, #0
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	db09      	blt.n	800f1c4 <__s2b+0x30>
 800f1b0:	4630      	mov	r0, r6
 800f1b2:	f7ff ff47 	bl	800f044 <_Balloc>
 800f1b6:	b940      	cbnz	r0, 800f1ca <__s2b+0x36>
 800f1b8:	4602      	mov	r2, r0
 800f1ba:	4b19      	ldr	r3, [pc, #100]	; (800f220 <__s2b+0x8c>)
 800f1bc:	4819      	ldr	r0, [pc, #100]	; (800f224 <__s2b+0x90>)
 800f1be:	21ce      	movs	r1, #206	; 0xce
 800f1c0:	f7fc f8e2 	bl	800b388 <__assert_func>
 800f1c4:	0052      	lsls	r2, r2, #1
 800f1c6:	3101      	adds	r1, #1
 800f1c8:	e7f0      	b.n	800f1ac <__s2b+0x18>
 800f1ca:	9b08      	ldr	r3, [sp, #32]
 800f1cc:	6143      	str	r3, [r0, #20]
 800f1ce:	2d09      	cmp	r5, #9
 800f1d0:	f04f 0301 	mov.w	r3, #1
 800f1d4:	6103      	str	r3, [r0, #16]
 800f1d6:	dd16      	ble.n	800f206 <__s2b+0x72>
 800f1d8:	f104 0909 	add.w	r9, r4, #9
 800f1dc:	46c8      	mov	r8, r9
 800f1de:	442c      	add	r4, r5
 800f1e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f1e4:	4601      	mov	r1, r0
 800f1e6:	3b30      	subs	r3, #48	; 0x30
 800f1e8:	220a      	movs	r2, #10
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	f7ff ff8c 	bl	800f108 <__multadd>
 800f1f0:	45a0      	cmp	r8, r4
 800f1f2:	d1f5      	bne.n	800f1e0 <__s2b+0x4c>
 800f1f4:	f1a5 0408 	sub.w	r4, r5, #8
 800f1f8:	444c      	add	r4, r9
 800f1fa:	1b2d      	subs	r5, r5, r4
 800f1fc:	1963      	adds	r3, r4, r5
 800f1fe:	42bb      	cmp	r3, r7
 800f200:	db04      	blt.n	800f20c <__s2b+0x78>
 800f202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f206:	340a      	adds	r4, #10
 800f208:	2509      	movs	r5, #9
 800f20a:	e7f6      	b.n	800f1fa <__s2b+0x66>
 800f20c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f210:	4601      	mov	r1, r0
 800f212:	3b30      	subs	r3, #48	; 0x30
 800f214:	220a      	movs	r2, #10
 800f216:	4630      	mov	r0, r6
 800f218:	f7ff ff76 	bl	800f108 <__multadd>
 800f21c:	e7ee      	b.n	800f1fc <__s2b+0x68>
 800f21e:	bf00      	nop
 800f220:	08010c15 	.word	0x08010c15
 800f224:	08010d04 	.word	0x08010d04

0800f228 <__hi0bits>:
 800f228:	0c03      	lsrs	r3, r0, #16
 800f22a:	041b      	lsls	r3, r3, #16
 800f22c:	b9d3      	cbnz	r3, 800f264 <__hi0bits+0x3c>
 800f22e:	0400      	lsls	r0, r0, #16
 800f230:	2310      	movs	r3, #16
 800f232:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f236:	bf04      	itt	eq
 800f238:	0200      	lsleq	r0, r0, #8
 800f23a:	3308      	addeq	r3, #8
 800f23c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f240:	bf04      	itt	eq
 800f242:	0100      	lsleq	r0, r0, #4
 800f244:	3304      	addeq	r3, #4
 800f246:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f24a:	bf04      	itt	eq
 800f24c:	0080      	lsleq	r0, r0, #2
 800f24e:	3302      	addeq	r3, #2
 800f250:	2800      	cmp	r0, #0
 800f252:	db05      	blt.n	800f260 <__hi0bits+0x38>
 800f254:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f258:	f103 0301 	add.w	r3, r3, #1
 800f25c:	bf08      	it	eq
 800f25e:	2320      	moveq	r3, #32
 800f260:	4618      	mov	r0, r3
 800f262:	4770      	bx	lr
 800f264:	2300      	movs	r3, #0
 800f266:	e7e4      	b.n	800f232 <__hi0bits+0xa>

0800f268 <__lo0bits>:
 800f268:	6803      	ldr	r3, [r0, #0]
 800f26a:	f013 0207 	ands.w	r2, r3, #7
 800f26e:	4601      	mov	r1, r0
 800f270:	d00b      	beq.n	800f28a <__lo0bits+0x22>
 800f272:	07da      	lsls	r2, r3, #31
 800f274:	d423      	bmi.n	800f2be <__lo0bits+0x56>
 800f276:	0798      	lsls	r0, r3, #30
 800f278:	bf49      	itett	mi
 800f27a:	085b      	lsrmi	r3, r3, #1
 800f27c:	089b      	lsrpl	r3, r3, #2
 800f27e:	2001      	movmi	r0, #1
 800f280:	600b      	strmi	r3, [r1, #0]
 800f282:	bf5c      	itt	pl
 800f284:	600b      	strpl	r3, [r1, #0]
 800f286:	2002      	movpl	r0, #2
 800f288:	4770      	bx	lr
 800f28a:	b298      	uxth	r0, r3
 800f28c:	b9a8      	cbnz	r0, 800f2ba <__lo0bits+0x52>
 800f28e:	0c1b      	lsrs	r3, r3, #16
 800f290:	2010      	movs	r0, #16
 800f292:	b2da      	uxtb	r2, r3
 800f294:	b90a      	cbnz	r2, 800f29a <__lo0bits+0x32>
 800f296:	3008      	adds	r0, #8
 800f298:	0a1b      	lsrs	r3, r3, #8
 800f29a:	071a      	lsls	r2, r3, #28
 800f29c:	bf04      	itt	eq
 800f29e:	091b      	lsreq	r3, r3, #4
 800f2a0:	3004      	addeq	r0, #4
 800f2a2:	079a      	lsls	r2, r3, #30
 800f2a4:	bf04      	itt	eq
 800f2a6:	089b      	lsreq	r3, r3, #2
 800f2a8:	3002      	addeq	r0, #2
 800f2aa:	07da      	lsls	r2, r3, #31
 800f2ac:	d403      	bmi.n	800f2b6 <__lo0bits+0x4e>
 800f2ae:	085b      	lsrs	r3, r3, #1
 800f2b0:	f100 0001 	add.w	r0, r0, #1
 800f2b4:	d005      	beq.n	800f2c2 <__lo0bits+0x5a>
 800f2b6:	600b      	str	r3, [r1, #0]
 800f2b8:	4770      	bx	lr
 800f2ba:	4610      	mov	r0, r2
 800f2bc:	e7e9      	b.n	800f292 <__lo0bits+0x2a>
 800f2be:	2000      	movs	r0, #0
 800f2c0:	4770      	bx	lr
 800f2c2:	2020      	movs	r0, #32
 800f2c4:	4770      	bx	lr
	...

0800f2c8 <__i2b>:
 800f2c8:	b510      	push	{r4, lr}
 800f2ca:	460c      	mov	r4, r1
 800f2cc:	2101      	movs	r1, #1
 800f2ce:	f7ff feb9 	bl	800f044 <_Balloc>
 800f2d2:	4602      	mov	r2, r0
 800f2d4:	b928      	cbnz	r0, 800f2e2 <__i2b+0x1a>
 800f2d6:	4b05      	ldr	r3, [pc, #20]	; (800f2ec <__i2b+0x24>)
 800f2d8:	4805      	ldr	r0, [pc, #20]	; (800f2f0 <__i2b+0x28>)
 800f2da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f2de:	f7fc f853 	bl	800b388 <__assert_func>
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	6144      	str	r4, [r0, #20]
 800f2e6:	6103      	str	r3, [r0, #16]
 800f2e8:	bd10      	pop	{r4, pc}
 800f2ea:	bf00      	nop
 800f2ec:	08010c15 	.word	0x08010c15
 800f2f0:	08010d04 	.word	0x08010d04

0800f2f4 <__multiply>:
 800f2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f8:	4691      	mov	r9, r2
 800f2fa:	690a      	ldr	r2, [r1, #16]
 800f2fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f300:	429a      	cmp	r2, r3
 800f302:	bfb8      	it	lt
 800f304:	460b      	movlt	r3, r1
 800f306:	460c      	mov	r4, r1
 800f308:	bfbc      	itt	lt
 800f30a:	464c      	movlt	r4, r9
 800f30c:	4699      	movlt	r9, r3
 800f30e:	6927      	ldr	r7, [r4, #16]
 800f310:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f314:	68a3      	ldr	r3, [r4, #8]
 800f316:	6861      	ldr	r1, [r4, #4]
 800f318:	eb07 060a 	add.w	r6, r7, sl
 800f31c:	42b3      	cmp	r3, r6
 800f31e:	b085      	sub	sp, #20
 800f320:	bfb8      	it	lt
 800f322:	3101      	addlt	r1, #1
 800f324:	f7ff fe8e 	bl	800f044 <_Balloc>
 800f328:	b930      	cbnz	r0, 800f338 <__multiply+0x44>
 800f32a:	4602      	mov	r2, r0
 800f32c:	4b44      	ldr	r3, [pc, #272]	; (800f440 <__multiply+0x14c>)
 800f32e:	4845      	ldr	r0, [pc, #276]	; (800f444 <__multiply+0x150>)
 800f330:	f240 115d 	movw	r1, #349	; 0x15d
 800f334:	f7fc f828 	bl	800b388 <__assert_func>
 800f338:	f100 0514 	add.w	r5, r0, #20
 800f33c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f340:	462b      	mov	r3, r5
 800f342:	2200      	movs	r2, #0
 800f344:	4543      	cmp	r3, r8
 800f346:	d321      	bcc.n	800f38c <__multiply+0x98>
 800f348:	f104 0314 	add.w	r3, r4, #20
 800f34c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f350:	f109 0314 	add.w	r3, r9, #20
 800f354:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f358:	9202      	str	r2, [sp, #8]
 800f35a:	1b3a      	subs	r2, r7, r4
 800f35c:	3a15      	subs	r2, #21
 800f35e:	f022 0203 	bic.w	r2, r2, #3
 800f362:	3204      	adds	r2, #4
 800f364:	f104 0115 	add.w	r1, r4, #21
 800f368:	428f      	cmp	r7, r1
 800f36a:	bf38      	it	cc
 800f36c:	2204      	movcc	r2, #4
 800f36e:	9201      	str	r2, [sp, #4]
 800f370:	9a02      	ldr	r2, [sp, #8]
 800f372:	9303      	str	r3, [sp, #12]
 800f374:	429a      	cmp	r2, r3
 800f376:	d80c      	bhi.n	800f392 <__multiply+0x9e>
 800f378:	2e00      	cmp	r6, #0
 800f37a:	dd03      	ble.n	800f384 <__multiply+0x90>
 800f37c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f380:	2b00      	cmp	r3, #0
 800f382:	d05a      	beq.n	800f43a <__multiply+0x146>
 800f384:	6106      	str	r6, [r0, #16]
 800f386:	b005      	add	sp, #20
 800f388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f38c:	f843 2b04 	str.w	r2, [r3], #4
 800f390:	e7d8      	b.n	800f344 <__multiply+0x50>
 800f392:	f8b3 a000 	ldrh.w	sl, [r3]
 800f396:	f1ba 0f00 	cmp.w	sl, #0
 800f39a:	d024      	beq.n	800f3e6 <__multiply+0xf2>
 800f39c:	f104 0e14 	add.w	lr, r4, #20
 800f3a0:	46a9      	mov	r9, r5
 800f3a2:	f04f 0c00 	mov.w	ip, #0
 800f3a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f3aa:	f8d9 1000 	ldr.w	r1, [r9]
 800f3ae:	fa1f fb82 	uxth.w	fp, r2
 800f3b2:	b289      	uxth	r1, r1
 800f3b4:	fb0a 110b 	mla	r1, sl, fp, r1
 800f3b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f3bc:	f8d9 2000 	ldr.w	r2, [r9]
 800f3c0:	4461      	add	r1, ip
 800f3c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f3c6:	fb0a c20b 	mla	r2, sl, fp, ip
 800f3ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f3ce:	b289      	uxth	r1, r1
 800f3d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f3d4:	4577      	cmp	r7, lr
 800f3d6:	f849 1b04 	str.w	r1, [r9], #4
 800f3da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f3de:	d8e2      	bhi.n	800f3a6 <__multiply+0xb2>
 800f3e0:	9a01      	ldr	r2, [sp, #4]
 800f3e2:	f845 c002 	str.w	ip, [r5, r2]
 800f3e6:	9a03      	ldr	r2, [sp, #12]
 800f3e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f3ec:	3304      	adds	r3, #4
 800f3ee:	f1b9 0f00 	cmp.w	r9, #0
 800f3f2:	d020      	beq.n	800f436 <__multiply+0x142>
 800f3f4:	6829      	ldr	r1, [r5, #0]
 800f3f6:	f104 0c14 	add.w	ip, r4, #20
 800f3fa:	46ae      	mov	lr, r5
 800f3fc:	f04f 0a00 	mov.w	sl, #0
 800f400:	f8bc b000 	ldrh.w	fp, [ip]
 800f404:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f408:	fb09 220b 	mla	r2, r9, fp, r2
 800f40c:	4492      	add	sl, r2
 800f40e:	b289      	uxth	r1, r1
 800f410:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f414:	f84e 1b04 	str.w	r1, [lr], #4
 800f418:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f41c:	f8be 1000 	ldrh.w	r1, [lr]
 800f420:	0c12      	lsrs	r2, r2, #16
 800f422:	fb09 1102 	mla	r1, r9, r2, r1
 800f426:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f42a:	4567      	cmp	r7, ip
 800f42c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f430:	d8e6      	bhi.n	800f400 <__multiply+0x10c>
 800f432:	9a01      	ldr	r2, [sp, #4]
 800f434:	50a9      	str	r1, [r5, r2]
 800f436:	3504      	adds	r5, #4
 800f438:	e79a      	b.n	800f370 <__multiply+0x7c>
 800f43a:	3e01      	subs	r6, #1
 800f43c:	e79c      	b.n	800f378 <__multiply+0x84>
 800f43e:	bf00      	nop
 800f440:	08010c15 	.word	0x08010c15
 800f444:	08010d04 	.word	0x08010d04

0800f448 <__pow5mult>:
 800f448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f44c:	4615      	mov	r5, r2
 800f44e:	f012 0203 	ands.w	r2, r2, #3
 800f452:	4606      	mov	r6, r0
 800f454:	460f      	mov	r7, r1
 800f456:	d007      	beq.n	800f468 <__pow5mult+0x20>
 800f458:	4c25      	ldr	r4, [pc, #148]	; (800f4f0 <__pow5mult+0xa8>)
 800f45a:	3a01      	subs	r2, #1
 800f45c:	2300      	movs	r3, #0
 800f45e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f462:	f7ff fe51 	bl	800f108 <__multadd>
 800f466:	4607      	mov	r7, r0
 800f468:	10ad      	asrs	r5, r5, #2
 800f46a:	d03d      	beq.n	800f4e8 <__pow5mult+0xa0>
 800f46c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f46e:	b97c      	cbnz	r4, 800f490 <__pow5mult+0x48>
 800f470:	2010      	movs	r0, #16
 800f472:	f7fb ffe3 	bl	800b43c <malloc>
 800f476:	4602      	mov	r2, r0
 800f478:	6270      	str	r0, [r6, #36]	; 0x24
 800f47a:	b928      	cbnz	r0, 800f488 <__pow5mult+0x40>
 800f47c:	4b1d      	ldr	r3, [pc, #116]	; (800f4f4 <__pow5mult+0xac>)
 800f47e:	481e      	ldr	r0, [pc, #120]	; (800f4f8 <__pow5mult+0xb0>)
 800f480:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f484:	f7fb ff80 	bl	800b388 <__assert_func>
 800f488:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f48c:	6004      	str	r4, [r0, #0]
 800f48e:	60c4      	str	r4, [r0, #12]
 800f490:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f494:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f498:	b94c      	cbnz	r4, 800f4ae <__pow5mult+0x66>
 800f49a:	f240 2171 	movw	r1, #625	; 0x271
 800f49e:	4630      	mov	r0, r6
 800f4a0:	f7ff ff12 	bl	800f2c8 <__i2b>
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f4aa:	4604      	mov	r4, r0
 800f4ac:	6003      	str	r3, [r0, #0]
 800f4ae:	f04f 0900 	mov.w	r9, #0
 800f4b2:	07eb      	lsls	r3, r5, #31
 800f4b4:	d50a      	bpl.n	800f4cc <__pow5mult+0x84>
 800f4b6:	4639      	mov	r1, r7
 800f4b8:	4622      	mov	r2, r4
 800f4ba:	4630      	mov	r0, r6
 800f4bc:	f7ff ff1a 	bl	800f2f4 <__multiply>
 800f4c0:	4639      	mov	r1, r7
 800f4c2:	4680      	mov	r8, r0
 800f4c4:	4630      	mov	r0, r6
 800f4c6:	f7ff fdfd 	bl	800f0c4 <_Bfree>
 800f4ca:	4647      	mov	r7, r8
 800f4cc:	106d      	asrs	r5, r5, #1
 800f4ce:	d00b      	beq.n	800f4e8 <__pow5mult+0xa0>
 800f4d0:	6820      	ldr	r0, [r4, #0]
 800f4d2:	b938      	cbnz	r0, 800f4e4 <__pow5mult+0x9c>
 800f4d4:	4622      	mov	r2, r4
 800f4d6:	4621      	mov	r1, r4
 800f4d8:	4630      	mov	r0, r6
 800f4da:	f7ff ff0b 	bl	800f2f4 <__multiply>
 800f4de:	6020      	str	r0, [r4, #0]
 800f4e0:	f8c0 9000 	str.w	r9, [r0]
 800f4e4:	4604      	mov	r4, r0
 800f4e6:	e7e4      	b.n	800f4b2 <__pow5mult+0x6a>
 800f4e8:	4638      	mov	r0, r7
 800f4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4ee:	bf00      	nop
 800f4f0:	08010e50 	.word	0x08010e50
 800f4f4:	08010a38 	.word	0x08010a38
 800f4f8:	08010d04 	.word	0x08010d04

0800f4fc <__lshift>:
 800f4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f500:	460c      	mov	r4, r1
 800f502:	6849      	ldr	r1, [r1, #4]
 800f504:	6923      	ldr	r3, [r4, #16]
 800f506:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f50a:	68a3      	ldr	r3, [r4, #8]
 800f50c:	4607      	mov	r7, r0
 800f50e:	4691      	mov	r9, r2
 800f510:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f514:	f108 0601 	add.w	r6, r8, #1
 800f518:	42b3      	cmp	r3, r6
 800f51a:	db0b      	blt.n	800f534 <__lshift+0x38>
 800f51c:	4638      	mov	r0, r7
 800f51e:	f7ff fd91 	bl	800f044 <_Balloc>
 800f522:	4605      	mov	r5, r0
 800f524:	b948      	cbnz	r0, 800f53a <__lshift+0x3e>
 800f526:	4602      	mov	r2, r0
 800f528:	4b2a      	ldr	r3, [pc, #168]	; (800f5d4 <__lshift+0xd8>)
 800f52a:	482b      	ldr	r0, [pc, #172]	; (800f5d8 <__lshift+0xdc>)
 800f52c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f530:	f7fb ff2a 	bl	800b388 <__assert_func>
 800f534:	3101      	adds	r1, #1
 800f536:	005b      	lsls	r3, r3, #1
 800f538:	e7ee      	b.n	800f518 <__lshift+0x1c>
 800f53a:	2300      	movs	r3, #0
 800f53c:	f100 0114 	add.w	r1, r0, #20
 800f540:	f100 0210 	add.w	r2, r0, #16
 800f544:	4618      	mov	r0, r3
 800f546:	4553      	cmp	r3, sl
 800f548:	db37      	blt.n	800f5ba <__lshift+0xbe>
 800f54a:	6920      	ldr	r0, [r4, #16]
 800f54c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f550:	f104 0314 	add.w	r3, r4, #20
 800f554:	f019 091f 	ands.w	r9, r9, #31
 800f558:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f55c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f560:	d02f      	beq.n	800f5c2 <__lshift+0xc6>
 800f562:	f1c9 0e20 	rsb	lr, r9, #32
 800f566:	468a      	mov	sl, r1
 800f568:	f04f 0c00 	mov.w	ip, #0
 800f56c:	681a      	ldr	r2, [r3, #0]
 800f56e:	fa02 f209 	lsl.w	r2, r2, r9
 800f572:	ea42 020c 	orr.w	r2, r2, ip
 800f576:	f84a 2b04 	str.w	r2, [sl], #4
 800f57a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f57e:	4298      	cmp	r0, r3
 800f580:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f584:	d8f2      	bhi.n	800f56c <__lshift+0x70>
 800f586:	1b03      	subs	r3, r0, r4
 800f588:	3b15      	subs	r3, #21
 800f58a:	f023 0303 	bic.w	r3, r3, #3
 800f58e:	3304      	adds	r3, #4
 800f590:	f104 0215 	add.w	r2, r4, #21
 800f594:	4290      	cmp	r0, r2
 800f596:	bf38      	it	cc
 800f598:	2304      	movcc	r3, #4
 800f59a:	f841 c003 	str.w	ip, [r1, r3]
 800f59e:	f1bc 0f00 	cmp.w	ip, #0
 800f5a2:	d001      	beq.n	800f5a8 <__lshift+0xac>
 800f5a4:	f108 0602 	add.w	r6, r8, #2
 800f5a8:	3e01      	subs	r6, #1
 800f5aa:	4638      	mov	r0, r7
 800f5ac:	612e      	str	r6, [r5, #16]
 800f5ae:	4621      	mov	r1, r4
 800f5b0:	f7ff fd88 	bl	800f0c4 <_Bfree>
 800f5b4:	4628      	mov	r0, r5
 800f5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800f5be:	3301      	adds	r3, #1
 800f5c0:	e7c1      	b.n	800f546 <__lshift+0x4a>
 800f5c2:	3904      	subs	r1, #4
 800f5c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f5cc:	4298      	cmp	r0, r3
 800f5ce:	d8f9      	bhi.n	800f5c4 <__lshift+0xc8>
 800f5d0:	e7ea      	b.n	800f5a8 <__lshift+0xac>
 800f5d2:	bf00      	nop
 800f5d4:	08010c15 	.word	0x08010c15
 800f5d8:	08010d04 	.word	0x08010d04

0800f5dc <__mcmp>:
 800f5dc:	b530      	push	{r4, r5, lr}
 800f5de:	6902      	ldr	r2, [r0, #16]
 800f5e0:	690c      	ldr	r4, [r1, #16]
 800f5e2:	1b12      	subs	r2, r2, r4
 800f5e4:	d10e      	bne.n	800f604 <__mcmp+0x28>
 800f5e6:	f100 0314 	add.w	r3, r0, #20
 800f5ea:	3114      	adds	r1, #20
 800f5ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f5f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f5f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f5f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f5fc:	42a5      	cmp	r5, r4
 800f5fe:	d003      	beq.n	800f608 <__mcmp+0x2c>
 800f600:	d305      	bcc.n	800f60e <__mcmp+0x32>
 800f602:	2201      	movs	r2, #1
 800f604:	4610      	mov	r0, r2
 800f606:	bd30      	pop	{r4, r5, pc}
 800f608:	4283      	cmp	r3, r0
 800f60a:	d3f3      	bcc.n	800f5f4 <__mcmp+0x18>
 800f60c:	e7fa      	b.n	800f604 <__mcmp+0x28>
 800f60e:	f04f 32ff 	mov.w	r2, #4294967295
 800f612:	e7f7      	b.n	800f604 <__mcmp+0x28>

0800f614 <__mdiff>:
 800f614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f618:	460c      	mov	r4, r1
 800f61a:	4606      	mov	r6, r0
 800f61c:	4611      	mov	r1, r2
 800f61e:	4620      	mov	r0, r4
 800f620:	4690      	mov	r8, r2
 800f622:	f7ff ffdb 	bl	800f5dc <__mcmp>
 800f626:	1e05      	subs	r5, r0, #0
 800f628:	d110      	bne.n	800f64c <__mdiff+0x38>
 800f62a:	4629      	mov	r1, r5
 800f62c:	4630      	mov	r0, r6
 800f62e:	f7ff fd09 	bl	800f044 <_Balloc>
 800f632:	b930      	cbnz	r0, 800f642 <__mdiff+0x2e>
 800f634:	4b3a      	ldr	r3, [pc, #232]	; (800f720 <__mdiff+0x10c>)
 800f636:	4602      	mov	r2, r0
 800f638:	f240 2132 	movw	r1, #562	; 0x232
 800f63c:	4839      	ldr	r0, [pc, #228]	; (800f724 <__mdiff+0x110>)
 800f63e:	f7fb fea3 	bl	800b388 <__assert_func>
 800f642:	2301      	movs	r3, #1
 800f644:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f64c:	bfa4      	itt	ge
 800f64e:	4643      	movge	r3, r8
 800f650:	46a0      	movge	r8, r4
 800f652:	4630      	mov	r0, r6
 800f654:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f658:	bfa6      	itte	ge
 800f65a:	461c      	movge	r4, r3
 800f65c:	2500      	movge	r5, #0
 800f65e:	2501      	movlt	r5, #1
 800f660:	f7ff fcf0 	bl	800f044 <_Balloc>
 800f664:	b920      	cbnz	r0, 800f670 <__mdiff+0x5c>
 800f666:	4b2e      	ldr	r3, [pc, #184]	; (800f720 <__mdiff+0x10c>)
 800f668:	4602      	mov	r2, r0
 800f66a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f66e:	e7e5      	b.n	800f63c <__mdiff+0x28>
 800f670:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f674:	6926      	ldr	r6, [r4, #16]
 800f676:	60c5      	str	r5, [r0, #12]
 800f678:	f104 0914 	add.w	r9, r4, #20
 800f67c:	f108 0514 	add.w	r5, r8, #20
 800f680:	f100 0e14 	add.w	lr, r0, #20
 800f684:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f688:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f68c:	f108 0210 	add.w	r2, r8, #16
 800f690:	46f2      	mov	sl, lr
 800f692:	2100      	movs	r1, #0
 800f694:	f859 3b04 	ldr.w	r3, [r9], #4
 800f698:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f69c:	fa1f f883 	uxth.w	r8, r3
 800f6a0:	fa11 f18b 	uxtah	r1, r1, fp
 800f6a4:	0c1b      	lsrs	r3, r3, #16
 800f6a6:	eba1 0808 	sub.w	r8, r1, r8
 800f6aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f6ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f6b2:	fa1f f888 	uxth.w	r8, r8
 800f6b6:	1419      	asrs	r1, r3, #16
 800f6b8:	454e      	cmp	r6, r9
 800f6ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f6be:	f84a 3b04 	str.w	r3, [sl], #4
 800f6c2:	d8e7      	bhi.n	800f694 <__mdiff+0x80>
 800f6c4:	1b33      	subs	r3, r6, r4
 800f6c6:	3b15      	subs	r3, #21
 800f6c8:	f023 0303 	bic.w	r3, r3, #3
 800f6cc:	3304      	adds	r3, #4
 800f6ce:	3415      	adds	r4, #21
 800f6d0:	42a6      	cmp	r6, r4
 800f6d2:	bf38      	it	cc
 800f6d4:	2304      	movcc	r3, #4
 800f6d6:	441d      	add	r5, r3
 800f6d8:	4473      	add	r3, lr
 800f6da:	469e      	mov	lr, r3
 800f6dc:	462e      	mov	r6, r5
 800f6de:	4566      	cmp	r6, ip
 800f6e0:	d30e      	bcc.n	800f700 <__mdiff+0xec>
 800f6e2:	f10c 0203 	add.w	r2, ip, #3
 800f6e6:	1b52      	subs	r2, r2, r5
 800f6e8:	f022 0203 	bic.w	r2, r2, #3
 800f6ec:	3d03      	subs	r5, #3
 800f6ee:	45ac      	cmp	ip, r5
 800f6f0:	bf38      	it	cc
 800f6f2:	2200      	movcc	r2, #0
 800f6f4:	441a      	add	r2, r3
 800f6f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f6fa:	b17b      	cbz	r3, 800f71c <__mdiff+0x108>
 800f6fc:	6107      	str	r7, [r0, #16]
 800f6fe:	e7a3      	b.n	800f648 <__mdiff+0x34>
 800f700:	f856 8b04 	ldr.w	r8, [r6], #4
 800f704:	fa11 f288 	uxtah	r2, r1, r8
 800f708:	1414      	asrs	r4, r2, #16
 800f70a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f70e:	b292      	uxth	r2, r2
 800f710:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f714:	f84e 2b04 	str.w	r2, [lr], #4
 800f718:	1421      	asrs	r1, r4, #16
 800f71a:	e7e0      	b.n	800f6de <__mdiff+0xca>
 800f71c:	3f01      	subs	r7, #1
 800f71e:	e7ea      	b.n	800f6f6 <__mdiff+0xe2>
 800f720:	08010c15 	.word	0x08010c15
 800f724:	08010d04 	.word	0x08010d04

0800f728 <__ulp>:
 800f728:	b082      	sub	sp, #8
 800f72a:	ed8d 0b00 	vstr	d0, [sp]
 800f72e:	9b01      	ldr	r3, [sp, #4]
 800f730:	4912      	ldr	r1, [pc, #72]	; (800f77c <__ulp+0x54>)
 800f732:	4019      	ands	r1, r3
 800f734:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f738:	2900      	cmp	r1, #0
 800f73a:	dd05      	ble.n	800f748 <__ulp+0x20>
 800f73c:	2200      	movs	r2, #0
 800f73e:	460b      	mov	r3, r1
 800f740:	ec43 2b10 	vmov	d0, r2, r3
 800f744:	b002      	add	sp, #8
 800f746:	4770      	bx	lr
 800f748:	4249      	negs	r1, r1
 800f74a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f74e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f752:	f04f 0200 	mov.w	r2, #0
 800f756:	f04f 0300 	mov.w	r3, #0
 800f75a:	da04      	bge.n	800f766 <__ulp+0x3e>
 800f75c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f760:	fa41 f300 	asr.w	r3, r1, r0
 800f764:	e7ec      	b.n	800f740 <__ulp+0x18>
 800f766:	f1a0 0114 	sub.w	r1, r0, #20
 800f76a:	291e      	cmp	r1, #30
 800f76c:	bfda      	itte	le
 800f76e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f772:	fa20 f101 	lsrle.w	r1, r0, r1
 800f776:	2101      	movgt	r1, #1
 800f778:	460a      	mov	r2, r1
 800f77a:	e7e1      	b.n	800f740 <__ulp+0x18>
 800f77c:	7ff00000 	.word	0x7ff00000

0800f780 <__b2d>:
 800f780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f782:	6905      	ldr	r5, [r0, #16]
 800f784:	f100 0714 	add.w	r7, r0, #20
 800f788:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f78c:	1f2e      	subs	r6, r5, #4
 800f78e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f792:	4620      	mov	r0, r4
 800f794:	f7ff fd48 	bl	800f228 <__hi0bits>
 800f798:	f1c0 0320 	rsb	r3, r0, #32
 800f79c:	280a      	cmp	r0, #10
 800f79e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f81c <__b2d+0x9c>
 800f7a2:	600b      	str	r3, [r1, #0]
 800f7a4:	dc14      	bgt.n	800f7d0 <__b2d+0x50>
 800f7a6:	f1c0 0e0b 	rsb	lr, r0, #11
 800f7aa:	fa24 f10e 	lsr.w	r1, r4, lr
 800f7ae:	42b7      	cmp	r7, r6
 800f7b0:	ea41 030c 	orr.w	r3, r1, ip
 800f7b4:	bf34      	ite	cc
 800f7b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f7ba:	2100      	movcs	r1, #0
 800f7bc:	3015      	adds	r0, #21
 800f7be:	fa04 f000 	lsl.w	r0, r4, r0
 800f7c2:	fa21 f10e 	lsr.w	r1, r1, lr
 800f7c6:	ea40 0201 	orr.w	r2, r0, r1
 800f7ca:	ec43 2b10 	vmov	d0, r2, r3
 800f7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7d0:	42b7      	cmp	r7, r6
 800f7d2:	bf3a      	itte	cc
 800f7d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f7d8:	f1a5 0608 	subcc.w	r6, r5, #8
 800f7dc:	2100      	movcs	r1, #0
 800f7de:	380b      	subs	r0, #11
 800f7e0:	d017      	beq.n	800f812 <__b2d+0x92>
 800f7e2:	f1c0 0c20 	rsb	ip, r0, #32
 800f7e6:	fa04 f500 	lsl.w	r5, r4, r0
 800f7ea:	42be      	cmp	r6, r7
 800f7ec:	fa21 f40c 	lsr.w	r4, r1, ip
 800f7f0:	ea45 0504 	orr.w	r5, r5, r4
 800f7f4:	bf8c      	ite	hi
 800f7f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f7fa:	2400      	movls	r4, #0
 800f7fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f800:	fa01 f000 	lsl.w	r0, r1, r0
 800f804:	fa24 f40c 	lsr.w	r4, r4, ip
 800f808:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f80c:	ea40 0204 	orr.w	r2, r0, r4
 800f810:	e7db      	b.n	800f7ca <__b2d+0x4a>
 800f812:	ea44 030c 	orr.w	r3, r4, ip
 800f816:	460a      	mov	r2, r1
 800f818:	e7d7      	b.n	800f7ca <__b2d+0x4a>
 800f81a:	bf00      	nop
 800f81c:	3ff00000 	.word	0x3ff00000

0800f820 <__d2b>:
 800f820:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f824:	4689      	mov	r9, r1
 800f826:	2101      	movs	r1, #1
 800f828:	ec57 6b10 	vmov	r6, r7, d0
 800f82c:	4690      	mov	r8, r2
 800f82e:	f7ff fc09 	bl	800f044 <_Balloc>
 800f832:	4604      	mov	r4, r0
 800f834:	b930      	cbnz	r0, 800f844 <__d2b+0x24>
 800f836:	4602      	mov	r2, r0
 800f838:	4b25      	ldr	r3, [pc, #148]	; (800f8d0 <__d2b+0xb0>)
 800f83a:	4826      	ldr	r0, [pc, #152]	; (800f8d4 <__d2b+0xb4>)
 800f83c:	f240 310a 	movw	r1, #778	; 0x30a
 800f840:	f7fb fda2 	bl	800b388 <__assert_func>
 800f844:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f848:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f84c:	bb35      	cbnz	r5, 800f89c <__d2b+0x7c>
 800f84e:	2e00      	cmp	r6, #0
 800f850:	9301      	str	r3, [sp, #4]
 800f852:	d028      	beq.n	800f8a6 <__d2b+0x86>
 800f854:	4668      	mov	r0, sp
 800f856:	9600      	str	r6, [sp, #0]
 800f858:	f7ff fd06 	bl	800f268 <__lo0bits>
 800f85c:	9900      	ldr	r1, [sp, #0]
 800f85e:	b300      	cbz	r0, 800f8a2 <__d2b+0x82>
 800f860:	9a01      	ldr	r2, [sp, #4]
 800f862:	f1c0 0320 	rsb	r3, r0, #32
 800f866:	fa02 f303 	lsl.w	r3, r2, r3
 800f86a:	430b      	orrs	r3, r1
 800f86c:	40c2      	lsrs	r2, r0
 800f86e:	6163      	str	r3, [r4, #20]
 800f870:	9201      	str	r2, [sp, #4]
 800f872:	9b01      	ldr	r3, [sp, #4]
 800f874:	61a3      	str	r3, [r4, #24]
 800f876:	2b00      	cmp	r3, #0
 800f878:	bf14      	ite	ne
 800f87a:	2202      	movne	r2, #2
 800f87c:	2201      	moveq	r2, #1
 800f87e:	6122      	str	r2, [r4, #16]
 800f880:	b1d5      	cbz	r5, 800f8b8 <__d2b+0x98>
 800f882:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f886:	4405      	add	r5, r0
 800f888:	f8c9 5000 	str.w	r5, [r9]
 800f88c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f890:	f8c8 0000 	str.w	r0, [r8]
 800f894:	4620      	mov	r0, r4
 800f896:	b003      	add	sp, #12
 800f898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f89c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f8a0:	e7d5      	b.n	800f84e <__d2b+0x2e>
 800f8a2:	6161      	str	r1, [r4, #20]
 800f8a4:	e7e5      	b.n	800f872 <__d2b+0x52>
 800f8a6:	a801      	add	r0, sp, #4
 800f8a8:	f7ff fcde 	bl	800f268 <__lo0bits>
 800f8ac:	9b01      	ldr	r3, [sp, #4]
 800f8ae:	6163      	str	r3, [r4, #20]
 800f8b0:	2201      	movs	r2, #1
 800f8b2:	6122      	str	r2, [r4, #16]
 800f8b4:	3020      	adds	r0, #32
 800f8b6:	e7e3      	b.n	800f880 <__d2b+0x60>
 800f8b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f8bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f8c0:	f8c9 0000 	str.w	r0, [r9]
 800f8c4:	6918      	ldr	r0, [r3, #16]
 800f8c6:	f7ff fcaf 	bl	800f228 <__hi0bits>
 800f8ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f8ce:	e7df      	b.n	800f890 <__d2b+0x70>
 800f8d0:	08010c15 	.word	0x08010c15
 800f8d4:	08010d04 	.word	0x08010d04

0800f8d8 <__ratio>:
 800f8d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8dc:	4688      	mov	r8, r1
 800f8de:	4669      	mov	r1, sp
 800f8e0:	4681      	mov	r9, r0
 800f8e2:	f7ff ff4d 	bl	800f780 <__b2d>
 800f8e6:	a901      	add	r1, sp, #4
 800f8e8:	4640      	mov	r0, r8
 800f8ea:	ec55 4b10 	vmov	r4, r5, d0
 800f8ee:	f7ff ff47 	bl	800f780 <__b2d>
 800f8f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f8f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f8fa:	eba3 0c02 	sub.w	ip, r3, r2
 800f8fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f902:	1a9b      	subs	r3, r3, r2
 800f904:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f908:	ec51 0b10 	vmov	r0, r1, d0
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	bfd6      	itet	le
 800f910:	460a      	movle	r2, r1
 800f912:	462a      	movgt	r2, r5
 800f914:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f918:	468b      	mov	fp, r1
 800f91a:	462f      	mov	r7, r5
 800f91c:	bfd4      	ite	le
 800f91e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f922:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f926:	4620      	mov	r0, r4
 800f928:	ee10 2a10 	vmov	r2, s0
 800f92c:	465b      	mov	r3, fp
 800f92e:	4639      	mov	r1, r7
 800f930:	f7f0 ff9c 	bl	800086c <__aeabi_ddiv>
 800f934:	ec41 0b10 	vmov	d0, r0, r1
 800f938:	b003      	add	sp, #12
 800f93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f93e <__copybits>:
 800f93e:	3901      	subs	r1, #1
 800f940:	b570      	push	{r4, r5, r6, lr}
 800f942:	1149      	asrs	r1, r1, #5
 800f944:	6914      	ldr	r4, [r2, #16]
 800f946:	3101      	adds	r1, #1
 800f948:	f102 0314 	add.w	r3, r2, #20
 800f94c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f950:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f954:	1f05      	subs	r5, r0, #4
 800f956:	42a3      	cmp	r3, r4
 800f958:	d30c      	bcc.n	800f974 <__copybits+0x36>
 800f95a:	1aa3      	subs	r3, r4, r2
 800f95c:	3b11      	subs	r3, #17
 800f95e:	f023 0303 	bic.w	r3, r3, #3
 800f962:	3211      	adds	r2, #17
 800f964:	42a2      	cmp	r2, r4
 800f966:	bf88      	it	hi
 800f968:	2300      	movhi	r3, #0
 800f96a:	4418      	add	r0, r3
 800f96c:	2300      	movs	r3, #0
 800f96e:	4288      	cmp	r0, r1
 800f970:	d305      	bcc.n	800f97e <__copybits+0x40>
 800f972:	bd70      	pop	{r4, r5, r6, pc}
 800f974:	f853 6b04 	ldr.w	r6, [r3], #4
 800f978:	f845 6f04 	str.w	r6, [r5, #4]!
 800f97c:	e7eb      	b.n	800f956 <__copybits+0x18>
 800f97e:	f840 3b04 	str.w	r3, [r0], #4
 800f982:	e7f4      	b.n	800f96e <__copybits+0x30>

0800f984 <__any_on>:
 800f984:	f100 0214 	add.w	r2, r0, #20
 800f988:	6900      	ldr	r0, [r0, #16]
 800f98a:	114b      	asrs	r3, r1, #5
 800f98c:	4298      	cmp	r0, r3
 800f98e:	b510      	push	{r4, lr}
 800f990:	db11      	blt.n	800f9b6 <__any_on+0x32>
 800f992:	dd0a      	ble.n	800f9aa <__any_on+0x26>
 800f994:	f011 011f 	ands.w	r1, r1, #31
 800f998:	d007      	beq.n	800f9aa <__any_on+0x26>
 800f99a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f99e:	fa24 f001 	lsr.w	r0, r4, r1
 800f9a2:	fa00 f101 	lsl.w	r1, r0, r1
 800f9a6:	428c      	cmp	r4, r1
 800f9a8:	d10b      	bne.n	800f9c2 <__any_on+0x3e>
 800f9aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d803      	bhi.n	800f9ba <__any_on+0x36>
 800f9b2:	2000      	movs	r0, #0
 800f9b4:	bd10      	pop	{r4, pc}
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	e7f7      	b.n	800f9aa <__any_on+0x26>
 800f9ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f9be:	2900      	cmp	r1, #0
 800f9c0:	d0f5      	beq.n	800f9ae <__any_on+0x2a>
 800f9c2:	2001      	movs	r0, #1
 800f9c4:	e7f6      	b.n	800f9b4 <__any_on+0x30>

0800f9c6 <_calloc_r>:
 800f9c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9c8:	fba1 2402 	umull	r2, r4, r1, r2
 800f9cc:	b94c      	cbnz	r4, 800f9e2 <_calloc_r+0x1c>
 800f9ce:	4611      	mov	r1, r2
 800f9d0:	9201      	str	r2, [sp, #4]
 800f9d2:	f7fb fdb7 	bl	800b544 <_malloc_r>
 800f9d6:	9a01      	ldr	r2, [sp, #4]
 800f9d8:	4605      	mov	r5, r0
 800f9da:	b930      	cbnz	r0, 800f9ea <_calloc_r+0x24>
 800f9dc:	4628      	mov	r0, r5
 800f9de:	b003      	add	sp, #12
 800f9e0:	bd30      	pop	{r4, r5, pc}
 800f9e2:	220c      	movs	r2, #12
 800f9e4:	6002      	str	r2, [r0, #0]
 800f9e6:	2500      	movs	r5, #0
 800f9e8:	e7f8      	b.n	800f9dc <_calloc_r+0x16>
 800f9ea:	4621      	mov	r1, r4
 800f9ec:	f7fb fd36 	bl	800b45c <memset>
 800f9f0:	e7f4      	b.n	800f9dc <_calloc_r+0x16>

0800f9f2 <_realloc_r>:
 800f9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9f6:	4680      	mov	r8, r0
 800f9f8:	4614      	mov	r4, r2
 800f9fa:	460e      	mov	r6, r1
 800f9fc:	b921      	cbnz	r1, 800fa08 <_realloc_r+0x16>
 800f9fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa02:	4611      	mov	r1, r2
 800fa04:	f7fb bd9e 	b.w	800b544 <_malloc_r>
 800fa08:	b92a      	cbnz	r2, 800fa16 <_realloc_r+0x24>
 800fa0a:	f7fb fd2f 	bl	800b46c <_free_r>
 800fa0e:	4625      	mov	r5, r4
 800fa10:	4628      	mov	r0, r5
 800fa12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa16:	f000 fe6d 	bl	80106f4 <_malloc_usable_size_r>
 800fa1a:	4284      	cmp	r4, r0
 800fa1c:	4607      	mov	r7, r0
 800fa1e:	d802      	bhi.n	800fa26 <_realloc_r+0x34>
 800fa20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fa24:	d812      	bhi.n	800fa4c <_realloc_r+0x5a>
 800fa26:	4621      	mov	r1, r4
 800fa28:	4640      	mov	r0, r8
 800fa2a:	f7fb fd8b 	bl	800b544 <_malloc_r>
 800fa2e:	4605      	mov	r5, r0
 800fa30:	2800      	cmp	r0, #0
 800fa32:	d0ed      	beq.n	800fa10 <_realloc_r+0x1e>
 800fa34:	42bc      	cmp	r4, r7
 800fa36:	4622      	mov	r2, r4
 800fa38:	4631      	mov	r1, r6
 800fa3a:	bf28      	it	cs
 800fa3c:	463a      	movcs	r2, r7
 800fa3e:	f7ff facd 	bl	800efdc <memcpy>
 800fa42:	4631      	mov	r1, r6
 800fa44:	4640      	mov	r0, r8
 800fa46:	f7fb fd11 	bl	800b46c <_free_r>
 800fa4a:	e7e1      	b.n	800fa10 <_realloc_r+0x1e>
 800fa4c:	4635      	mov	r5, r6
 800fa4e:	e7df      	b.n	800fa10 <_realloc_r+0x1e>

0800fa50 <__ssputs_r>:
 800fa50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa54:	688e      	ldr	r6, [r1, #8]
 800fa56:	429e      	cmp	r6, r3
 800fa58:	4682      	mov	sl, r0
 800fa5a:	460c      	mov	r4, r1
 800fa5c:	4690      	mov	r8, r2
 800fa5e:	461f      	mov	r7, r3
 800fa60:	d838      	bhi.n	800fad4 <__ssputs_r+0x84>
 800fa62:	898a      	ldrh	r2, [r1, #12]
 800fa64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fa68:	d032      	beq.n	800fad0 <__ssputs_r+0x80>
 800fa6a:	6825      	ldr	r5, [r4, #0]
 800fa6c:	6909      	ldr	r1, [r1, #16]
 800fa6e:	eba5 0901 	sub.w	r9, r5, r1
 800fa72:	6965      	ldr	r5, [r4, #20]
 800fa74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fa7c:	3301      	adds	r3, #1
 800fa7e:	444b      	add	r3, r9
 800fa80:	106d      	asrs	r5, r5, #1
 800fa82:	429d      	cmp	r5, r3
 800fa84:	bf38      	it	cc
 800fa86:	461d      	movcc	r5, r3
 800fa88:	0553      	lsls	r3, r2, #21
 800fa8a:	d531      	bpl.n	800faf0 <__ssputs_r+0xa0>
 800fa8c:	4629      	mov	r1, r5
 800fa8e:	f7fb fd59 	bl	800b544 <_malloc_r>
 800fa92:	4606      	mov	r6, r0
 800fa94:	b950      	cbnz	r0, 800faac <__ssputs_r+0x5c>
 800fa96:	230c      	movs	r3, #12
 800fa98:	f8ca 3000 	str.w	r3, [sl]
 800fa9c:	89a3      	ldrh	r3, [r4, #12]
 800fa9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800faa2:	81a3      	strh	r3, [r4, #12]
 800faa4:	f04f 30ff 	mov.w	r0, #4294967295
 800faa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faac:	6921      	ldr	r1, [r4, #16]
 800faae:	464a      	mov	r2, r9
 800fab0:	f7ff fa94 	bl	800efdc <memcpy>
 800fab4:	89a3      	ldrh	r3, [r4, #12]
 800fab6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800faba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fabe:	81a3      	strh	r3, [r4, #12]
 800fac0:	6126      	str	r6, [r4, #16]
 800fac2:	6165      	str	r5, [r4, #20]
 800fac4:	444e      	add	r6, r9
 800fac6:	eba5 0509 	sub.w	r5, r5, r9
 800faca:	6026      	str	r6, [r4, #0]
 800facc:	60a5      	str	r5, [r4, #8]
 800face:	463e      	mov	r6, r7
 800fad0:	42be      	cmp	r6, r7
 800fad2:	d900      	bls.n	800fad6 <__ssputs_r+0x86>
 800fad4:	463e      	mov	r6, r7
 800fad6:	6820      	ldr	r0, [r4, #0]
 800fad8:	4632      	mov	r2, r6
 800fada:	4641      	mov	r1, r8
 800fadc:	f7ff fa8c 	bl	800eff8 <memmove>
 800fae0:	68a3      	ldr	r3, [r4, #8]
 800fae2:	1b9b      	subs	r3, r3, r6
 800fae4:	60a3      	str	r3, [r4, #8]
 800fae6:	6823      	ldr	r3, [r4, #0]
 800fae8:	4433      	add	r3, r6
 800faea:	6023      	str	r3, [r4, #0]
 800faec:	2000      	movs	r0, #0
 800faee:	e7db      	b.n	800faa8 <__ssputs_r+0x58>
 800faf0:	462a      	mov	r2, r5
 800faf2:	f7ff ff7e 	bl	800f9f2 <_realloc_r>
 800faf6:	4606      	mov	r6, r0
 800faf8:	2800      	cmp	r0, #0
 800fafa:	d1e1      	bne.n	800fac0 <__ssputs_r+0x70>
 800fafc:	6921      	ldr	r1, [r4, #16]
 800fafe:	4650      	mov	r0, sl
 800fb00:	f7fb fcb4 	bl	800b46c <_free_r>
 800fb04:	e7c7      	b.n	800fa96 <__ssputs_r+0x46>
	...

0800fb08 <_svfiprintf_r>:
 800fb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb0c:	4698      	mov	r8, r3
 800fb0e:	898b      	ldrh	r3, [r1, #12]
 800fb10:	061b      	lsls	r3, r3, #24
 800fb12:	b09d      	sub	sp, #116	; 0x74
 800fb14:	4607      	mov	r7, r0
 800fb16:	460d      	mov	r5, r1
 800fb18:	4614      	mov	r4, r2
 800fb1a:	d50e      	bpl.n	800fb3a <_svfiprintf_r+0x32>
 800fb1c:	690b      	ldr	r3, [r1, #16]
 800fb1e:	b963      	cbnz	r3, 800fb3a <_svfiprintf_r+0x32>
 800fb20:	2140      	movs	r1, #64	; 0x40
 800fb22:	f7fb fd0f 	bl	800b544 <_malloc_r>
 800fb26:	6028      	str	r0, [r5, #0]
 800fb28:	6128      	str	r0, [r5, #16]
 800fb2a:	b920      	cbnz	r0, 800fb36 <_svfiprintf_r+0x2e>
 800fb2c:	230c      	movs	r3, #12
 800fb2e:	603b      	str	r3, [r7, #0]
 800fb30:	f04f 30ff 	mov.w	r0, #4294967295
 800fb34:	e0d1      	b.n	800fcda <_svfiprintf_r+0x1d2>
 800fb36:	2340      	movs	r3, #64	; 0x40
 800fb38:	616b      	str	r3, [r5, #20]
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	9309      	str	r3, [sp, #36]	; 0x24
 800fb3e:	2320      	movs	r3, #32
 800fb40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb44:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb48:	2330      	movs	r3, #48	; 0x30
 800fb4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fcf4 <_svfiprintf_r+0x1ec>
 800fb4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb52:	f04f 0901 	mov.w	r9, #1
 800fb56:	4623      	mov	r3, r4
 800fb58:	469a      	mov	sl, r3
 800fb5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb5e:	b10a      	cbz	r2, 800fb64 <_svfiprintf_r+0x5c>
 800fb60:	2a25      	cmp	r2, #37	; 0x25
 800fb62:	d1f9      	bne.n	800fb58 <_svfiprintf_r+0x50>
 800fb64:	ebba 0b04 	subs.w	fp, sl, r4
 800fb68:	d00b      	beq.n	800fb82 <_svfiprintf_r+0x7a>
 800fb6a:	465b      	mov	r3, fp
 800fb6c:	4622      	mov	r2, r4
 800fb6e:	4629      	mov	r1, r5
 800fb70:	4638      	mov	r0, r7
 800fb72:	f7ff ff6d 	bl	800fa50 <__ssputs_r>
 800fb76:	3001      	adds	r0, #1
 800fb78:	f000 80aa 	beq.w	800fcd0 <_svfiprintf_r+0x1c8>
 800fb7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb7e:	445a      	add	r2, fp
 800fb80:	9209      	str	r2, [sp, #36]	; 0x24
 800fb82:	f89a 3000 	ldrb.w	r3, [sl]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	f000 80a2 	beq.w	800fcd0 <_svfiprintf_r+0x1c8>
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	f04f 32ff 	mov.w	r2, #4294967295
 800fb92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb96:	f10a 0a01 	add.w	sl, sl, #1
 800fb9a:	9304      	str	r3, [sp, #16]
 800fb9c:	9307      	str	r3, [sp, #28]
 800fb9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fba2:	931a      	str	r3, [sp, #104]	; 0x68
 800fba4:	4654      	mov	r4, sl
 800fba6:	2205      	movs	r2, #5
 800fba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbac:	4851      	ldr	r0, [pc, #324]	; (800fcf4 <_svfiprintf_r+0x1ec>)
 800fbae:	f7f0 fb27 	bl	8000200 <memchr>
 800fbb2:	9a04      	ldr	r2, [sp, #16]
 800fbb4:	b9d8      	cbnz	r0, 800fbee <_svfiprintf_r+0xe6>
 800fbb6:	06d0      	lsls	r0, r2, #27
 800fbb8:	bf44      	itt	mi
 800fbba:	2320      	movmi	r3, #32
 800fbbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbc0:	0711      	lsls	r1, r2, #28
 800fbc2:	bf44      	itt	mi
 800fbc4:	232b      	movmi	r3, #43	; 0x2b
 800fbc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbca:	f89a 3000 	ldrb.w	r3, [sl]
 800fbce:	2b2a      	cmp	r3, #42	; 0x2a
 800fbd0:	d015      	beq.n	800fbfe <_svfiprintf_r+0xf6>
 800fbd2:	9a07      	ldr	r2, [sp, #28]
 800fbd4:	4654      	mov	r4, sl
 800fbd6:	2000      	movs	r0, #0
 800fbd8:	f04f 0c0a 	mov.w	ip, #10
 800fbdc:	4621      	mov	r1, r4
 800fbde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbe2:	3b30      	subs	r3, #48	; 0x30
 800fbe4:	2b09      	cmp	r3, #9
 800fbe6:	d94e      	bls.n	800fc86 <_svfiprintf_r+0x17e>
 800fbe8:	b1b0      	cbz	r0, 800fc18 <_svfiprintf_r+0x110>
 800fbea:	9207      	str	r2, [sp, #28]
 800fbec:	e014      	b.n	800fc18 <_svfiprintf_r+0x110>
 800fbee:	eba0 0308 	sub.w	r3, r0, r8
 800fbf2:	fa09 f303 	lsl.w	r3, r9, r3
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	9304      	str	r3, [sp, #16]
 800fbfa:	46a2      	mov	sl, r4
 800fbfc:	e7d2      	b.n	800fba4 <_svfiprintf_r+0x9c>
 800fbfe:	9b03      	ldr	r3, [sp, #12]
 800fc00:	1d19      	adds	r1, r3, #4
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	9103      	str	r1, [sp, #12]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	bfbb      	ittet	lt
 800fc0a:	425b      	neglt	r3, r3
 800fc0c:	f042 0202 	orrlt.w	r2, r2, #2
 800fc10:	9307      	strge	r3, [sp, #28]
 800fc12:	9307      	strlt	r3, [sp, #28]
 800fc14:	bfb8      	it	lt
 800fc16:	9204      	strlt	r2, [sp, #16]
 800fc18:	7823      	ldrb	r3, [r4, #0]
 800fc1a:	2b2e      	cmp	r3, #46	; 0x2e
 800fc1c:	d10c      	bne.n	800fc38 <_svfiprintf_r+0x130>
 800fc1e:	7863      	ldrb	r3, [r4, #1]
 800fc20:	2b2a      	cmp	r3, #42	; 0x2a
 800fc22:	d135      	bne.n	800fc90 <_svfiprintf_r+0x188>
 800fc24:	9b03      	ldr	r3, [sp, #12]
 800fc26:	1d1a      	adds	r2, r3, #4
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	9203      	str	r2, [sp, #12]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	bfb8      	it	lt
 800fc30:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc34:	3402      	adds	r4, #2
 800fc36:	9305      	str	r3, [sp, #20]
 800fc38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fd04 <_svfiprintf_r+0x1fc>
 800fc3c:	7821      	ldrb	r1, [r4, #0]
 800fc3e:	2203      	movs	r2, #3
 800fc40:	4650      	mov	r0, sl
 800fc42:	f7f0 fadd 	bl	8000200 <memchr>
 800fc46:	b140      	cbz	r0, 800fc5a <_svfiprintf_r+0x152>
 800fc48:	2340      	movs	r3, #64	; 0x40
 800fc4a:	eba0 000a 	sub.w	r0, r0, sl
 800fc4e:	fa03 f000 	lsl.w	r0, r3, r0
 800fc52:	9b04      	ldr	r3, [sp, #16]
 800fc54:	4303      	orrs	r3, r0
 800fc56:	3401      	adds	r4, #1
 800fc58:	9304      	str	r3, [sp, #16]
 800fc5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc5e:	4826      	ldr	r0, [pc, #152]	; (800fcf8 <_svfiprintf_r+0x1f0>)
 800fc60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc64:	2206      	movs	r2, #6
 800fc66:	f7f0 facb 	bl	8000200 <memchr>
 800fc6a:	2800      	cmp	r0, #0
 800fc6c:	d038      	beq.n	800fce0 <_svfiprintf_r+0x1d8>
 800fc6e:	4b23      	ldr	r3, [pc, #140]	; (800fcfc <_svfiprintf_r+0x1f4>)
 800fc70:	bb1b      	cbnz	r3, 800fcba <_svfiprintf_r+0x1b2>
 800fc72:	9b03      	ldr	r3, [sp, #12]
 800fc74:	3307      	adds	r3, #7
 800fc76:	f023 0307 	bic.w	r3, r3, #7
 800fc7a:	3308      	adds	r3, #8
 800fc7c:	9303      	str	r3, [sp, #12]
 800fc7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc80:	4433      	add	r3, r6
 800fc82:	9309      	str	r3, [sp, #36]	; 0x24
 800fc84:	e767      	b.n	800fb56 <_svfiprintf_r+0x4e>
 800fc86:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc8a:	460c      	mov	r4, r1
 800fc8c:	2001      	movs	r0, #1
 800fc8e:	e7a5      	b.n	800fbdc <_svfiprintf_r+0xd4>
 800fc90:	2300      	movs	r3, #0
 800fc92:	3401      	adds	r4, #1
 800fc94:	9305      	str	r3, [sp, #20]
 800fc96:	4619      	mov	r1, r3
 800fc98:	f04f 0c0a 	mov.w	ip, #10
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fca2:	3a30      	subs	r2, #48	; 0x30
 800fca4:	2a09      	cmp	r2, #9
 800fca6:	d903      	bls.n	800fcb0 <_svfiprintf_r+0x1a8>
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d0c5      	beq.n	800fc38 <_svfiprintf_r+0x130>
 800fcac:	9105      	str	r1, [sp, #20]
 800fcae:	e7c3      	b.n	800fc38 <_svfiprintf_r+0x130>
 800fcb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800fcb4:	4604      	mov	r4, r0
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	e7f0      	b.n	800fc9c <_svfiprintf_r+0x194>
 800fcba:	ab03      	add	r3, sp, #12
 800fcbc:	9300      	str	r3, [sp, #0]
 800fcbe:	462a      	mov	r2, r5
 800fcc0:	4b0f      	ldr	r3, [pc, #60]	; (800fd00 <_svfiprintf_r+0x1f8>)
 800fcc2:	a904      	add	r1, sp, #16
 800fcc4:	4638      	mov	r0, r7
 800fcc6:	f7fb feab 	bl	800ba20 <_printf_float>
 800fcca:	1c42      	adds	r2, r0, #1
 800fccc:	4606      	mov	r6, r0
 800fcce:	d1d6      	bne.n	800fc7e <_svfiprintf_r+0x176>
 800fcd0:	89ab      	ldrh	r3, [r5, #12]
 800fcd2:	065b      	lsls	r3, r3, #25
 800fcd4:	f53f af2c 	bmi.w	800fb30 <_svfiprintf_r+0x28>
 800fcd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fcda:	b01d      	add	sp, #116	; 0x74
 800fcdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fce0:	ab03      	add	r3, sp, #12
 800fce2:	9300      	str	r3, [sp, #0]
 800fce4:	462a      	mov	r2, r5
 800fce6:	4b06      	ldr	r3, [pc, #24]	; (800fd00 <_svfiprintf_r+0x1f8>)
 800fce8:	a904      	add	r1, sp, #16
 800fcea:	4638      	mov	r0, r7
 800fcec:	f7fc f93c 	bl	800bf68 <_printf_i>
 800fcf0:	e7eb      	b.n	800fcca <_svfiprintf_r+0x1c2>
 800fcf2:	bf00      	nop
 800fcf4:	0801099c 	.word	0x0801099c
 800fcf8:	080109a6 	.word	0x080109a6
 800fcfc:	0800ba21 	.word	0x0800ba21
 800fd00:	0800fa51 	.word	0x0800fa51
 800fd04:	080109a2 	.word	0x080109a2

0800fd08 <_sungetc_r>:
 800fd08:	b538      	push	{r3, r4, r5, lr}
 800fd0a:	1c4b      	adds	r3, r1, #1
 800fd0c:	4614      	mov	r4, r2
 800fd0e:	d103      	bne.n	800fd18 <_sungetc_r+0x10>
 800fd10:	f04f 35ff 	mov.w	r5, #4294967295
 800fd14:	4628      	mov	r0, r5
 800fd16:	bd38      	pop	{r3, r4, r5, pc}
 800fd18:	8993      	ldrh	r3, [r2, #12]
 800fd1a:	f023 0320 	bic.w	r3, r3, #32
 800fd1e:	8193      	strh	r3, [r2, #12]
 800fd20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd22:	6852      	ldr	r2, [r2, #4]
 800fd24:	b2cd      	uxtb	r5, r1
 800fd26:	b18b      	cbz	r3, 800fd4c <_sungetc_r+0x44>
 800fd28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	dd08      	ble.n	800fd40 <_sungetc_r+0x38>
 800fd2e:	6823      	ldr	r3, [r4, #0]
 800fd30:	1e5a      	subs	r2, r3, #1
 800fd32:	6022      	str	r2, [r4, #0]
 800fd34:	f803 5c01 	strb.w	r5, [r3, #-1]
 800fd38:	6863      	ldr	r3, [r4, #4]
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	6063      	str	r3, [r4, #4]
 800fd3e:	e7e9      	b.n	800fd14 <_sungetc_r+0xc>
 800fd40:	4621      	mov	r1, r4
 800fd42:	f000 fc6d 	bl	8010620 <__submore>
 800fd46:	2800      	cmp	r0, #0
 800fd48:	d0f1      	beq.n	800fd2e <_sungetc_r+0x26>
 800fd4a:	e7e1      	b.n	800fd10 <_sungetc_r+0x8>
 800fd4c:	6921      	ldr	r1, [r4, #16]
 800fd4e:	6823      	ldr	r3, [r4, #0]
 800fd50:	b151      	cbz	r1, 800fd68 <_sungetc_r+0x60>
 800fd52:	4299      	cmp	r1, r3
 800fd54:	d208      	bcs.n	800fd68 <_sungetc_r+0x60>
 800fd56:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800fd5a:	42a9      	cmp	r1, r5
 800fd5c:	d104      	bne.n	800fd68 <_sungetc_r+0x60>
 800fd5e:	3b01      	subs	r3, #1
 800fd60:	3201      	adds	r2, #1
 800fd62:	6023      	str	r3, [r4, #0]
 800fd64:	6062      	str	r2, [r4, #4]
 800fd66:	e7d5      	b.n	800fd14 <_sungetc_r+0xc>
 800fd68:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800fd6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd70:	6363      	str	r3, [r4, #52]	; 0x34
 800fd72:	2303      	movs	r3, #3
 800fd74:	63a3      	str	r3, [r4, #56]	; 0x38
 800fd76:	4623      	mov	r3, r4
 800fd78:	f803 5f46 	strb.w	r5, [r3, #70]!
 800fd7c:	6023      	str	r3, [r4, #0]
 800fd7e:	2301      	movs	r3, #1
 800fd80:	e7dc      	b.n	800fd3c <_sungetc_r+0x34>

0800fd82 <__ssrefill_r>:
 800fd82:	b510      	push	{r4, lr}
 800fd84:	460c      	mov	r4, r1
 800fd86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fd88:	b169      	cbz	r1, 800fda6 <__ssrefill_r+0x24>
 800fd8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd8e:	4299      	cmp	r1, r3
 800fd90:	d001      	beq.n	800fd96 <__ssrefill_r+0x14>
 800fd92:	f7fb fb6b 	bl	800b46c <_free_r>
 800fd96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd98:	6063      	str	r3, [r4, #4]
 800fd9a:	2000      	movs	r0, #0
 800fd9c:	6360      	str	r0, [r4, #52]	; 0x34
 800fd9e:	b113      	cbz	r3, 800fda6 <__ssrefill_r+0x24>
 800fda0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fda2:	6023      	str	r3, [r4, #0]
 800fda4:	bd10      	pop	{r4, pc}
 800fda6:	6923      	ldr	r3, [r4, #16]
 800fda8:	6023      	str	r3, [r4, #0]
 800fdaa:	2300      	movs	r3, #0
 800fdac:	6063      	str	r3, [r4, #4]
 800fdae:	89a3      	ldrh	r3, [r4, #12]
 800fdb0:	f043 0320 	orr.w	r3, r3, #32
 800fdb4:	81a3      	strh	r3, [r4, #12]
 800fdb6:	f04f 30ff 	mov.w	r0, #4294967295
 800fdba:	e7f3      	b.n	800fda4 <__ssrefill_r+0x22>

0800fdbc <__ssvfiscanf_r>:
 800fdbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdc0:	460c      	mov	r4, r1
 800fdc2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800fdc6:	2100      	movs	r1, #0
 800fdc8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800fdcc:	49a6      	ldr	r1, [pc, #664]	; (8010068 <__ssvfiscanf_r+0x2ac>)
 800fdce:	91a0      	str	r1, [sp, #640]	; 0x280
 800fdd0:	f10d 0804 	add.w	r8, sp, #4
 800fdd4:	49a5      	ldr	r1, [pc, #660]	; (801006c <__ssvfiscanf_r+0x2b0>)
 800fdd6:	4fa6      	ldr	r7, [pc, #664]	; (8010070 <__ssvfiscanf_r+0x2b4>)
 800fdd8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8010074 <__ssvfiscanf_r+0x2b8>
 800fddc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800fde0:	4606      	mov	r6, r0
 800fde2:	91a1      	str	r1, [sp, #644]	; 0x284
 800fde4:	9300      	str	r3, [sp, #0]
 800fde6:	7813      	ldrb	r3, [r2, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	f000 815a 	beq.w	80100a2 <__ssvfiscanf_r+0x2e6>
 800fdee:	5dd9      	ldrb	r1, [r3, r7]
 800fdf0:	f011 0108 	ands.w	r1, r1, #8
 800fdf4:	f102 0501 	add.w	r5, r2, #1
 800fdf8:	d019      	beq.n	800fe2e <__ssvfiscanf_r+0x72>
 800fdfa:	6863      	ldr	r3, [r4, #4]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	dd0f      	ble.n	800fe20 <__ssvfiscanf_r+0x64>
 800fe00:	6823      	ldr	r3, [r4, #0]
 800fe02:	781a      	ldrb	r2, [r3, #0]
 800fe04:	5cba      	ldrb	r2, [r7, r2]
 800fe06:	0712      	lsls	r2, r2, #28
 800fe08:	d401      	bmi.n	800fe0e <__ssvfiscanf_r+0x52>
 800fe0a:	462a      	mov	r2, r5
 800fe0c:	e7eb      	b.n	800fde6 <__ssvfiscanf_r+0x2a>
 800fe0e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fe10:	3201      	adds	r2, #1
 800fe12:	9245      	str	r2, [sp, #276]	; 0x114
 800fe14:	6862      	ldr	r2, [r4, #4]
 800fe16:	3301      	adds	r3, #1
 800fe18:	3a01      	subs	r2, #1
 800fe1a:	6062      	str	r2, [r4, #4]
 800fe1c:	6023      	str	r3, [r4, #0]
 800fe1e:	e7ec      	b.n	800fdfa <__ssvfiscanf_r+0x3e>
 800fe20:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fe22:	4621      	mov	r1, r4
 800fe24:	4630      	mov	r0, r6
 800fe26:	4798      	blx	r3
 800fe28:	2800      	cmp	r0, #0
 800fe2a:	d0e9      	beq.n	800fe00 <__ssvfiscanf_r+0x44>
 800fe2c:	e7ed      	b.n	800fe0a <__ssvfiscanf_r+0x4e>
 800fe2e:	2b25      	cmp	r3, #37	; 0x25
 800fe30:	d012      	beq.n	800fe58 <__ssvfiscanf_r+0x9c>
 800fe32:	469a      	mov	sl, r3
 800fe34:	6863      	ldr	r3, [r4, #4]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	f340 8091 	ble.w	800ff5e <__ssvfiscanf_r+0x1a2>
 800fe3c:	6822      	ldr	r2, [r4, #0]
 800fe3e:	7813      	ldrb	r3, [r2, #0]
 800fe40:	4553      	cmp	r3, sl
 800fe42:	f040 812e 	bne.w	80100a2 <__ssvfiscanf_r+0x2e6>
 800fe46:	6863      	ldr	r3, [r4, #4]
 800fe48:	3b01      	subs	r3, #1
 800fe4a:	6063      	str	r3, [r4, #4]
 800fe4c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800fe4e:	3201      	adds	r2, #1
 800fe50:	3301      	adds	r3, #1
 800fe52:	6022      	str	r2, [r4, #0]
 800fe54:	9345      	str	r3, [sp, #276]	; 0x114
 800fe56:	e7d8      	b.n	800fe0a <__ssvfiscanf_r+0x4e>
 800fe58:	9141      	str	r1, [sp, #260]	; 0x104
 800fe5a:	9143      	str	r1, [sp, #268]	; 0x10c
 800fe5c:	7853      	ldrb	r3, [r2, #1]
 800fe5e:	2b2a      	cmp	r3, #42	; 0x2a
 800fe60:	bf02      	ittt	eq
 800fe62:	2310      	moveq	r3, #16
 800fe64:	1c95      	addeq	r5, r2, #2
 800fe66:	9341      	streq	r3, [sp, #260]	; 0x104
 800fe68:	220a      	movs	r2, #10
 800fe6a:	46aa      	mov	sl, r5
 800fe6c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800fe70:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800fe74:	2b09      	cmp	r3, #9
 800fe76:	d91d      	bls.n	800feb4 <__ssvfiscanf_r+0xf8>
 800fe78:	487e      	ldr	r0, [pc, #504]	; (8010074 <__ssvfiscanf_r+0x2b8>)
 800fe7a:	2203      	movs	r2, #3
 800fe7c:	f7f0 f9c0 	bl	8000200 <memchr>
 800fe80:	b140      	cbz	r0, 800fe94 <__ssvfiscanf_r+0xd8>
 800fe82:	2301      	movs	r3, #1
 800fe84:	eba0 0009 	sub.w	r0, r0, r9
 800fe88:	fa03 f000 	lsl.w	r0, r3, r0
 800fe8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fe8e:	4318      	orrs	r0, r3
 800fe90:	9041      	str	r0, [sp, #260]	; 0x104
 800fe92:	4655      	mov	r5, sl
 800fe94:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fe98:	2b78      	cmp	r3, #120	; 0x78
 800fe9a:	d806      	bhi.n	800feaa <__ssvfiscanf_r+0xee>
 800fe9c:	2b57      	cmp	r3, #87	; 0x57
 800fe9e:	d810      	bhi.n	800fec2 <__ssvfiscanf_r+0x106>
 800fea0:	2b25      	cmp	r3, #37	; 0x25
 800fea2:	d0c6      	beq.n	800fe32 <__ssvfiscanf_r+0x76>
 800fea4:	d856      	bhi.n	800ff54 <__ssvfiscanf_r+0x198>
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d064      	beq.n	800ff74 <__ssvfiscanf_r+0x1b8>
 800feaa:	2303      	movs	r3, #3
 800feac:	9347      	str	r3, [sp, #284]	; 0x11c
 800feae:	230a      	movs	r3, #10
 800feb0:	9342      	str	r3, [sp, #264]	; 0x108
 800feb2:	e071      	b.n	800ff98 <__ssvfiscanf_r+0x1dc>
 800feb4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800feb6:	fb02 1103 	mla	r1, r2, r3, r1
 800feba:	3930      	subs	r1, #48	; 0x30
 800febc:	9143      	str	r1, [sp, #268]	; 0x10c
 800febe:	4655      	mov	r5, sl
 800fec0:	e7d3      	b.n	800fe6a <__ssvfiscanf_r+0xae>
 800fec2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800fec6:	2a20      	cmp	r2, #32
 800fec8:	d8ef      	bhi.n	800feaa <__ssvfiscanf_r+0xee>
 800feca:	a101      	add	r1, pc, #4	; (adr r1, 800fed0 <__ssvfiscanf_r+0x114>)
 800fecc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fed0:	0800ff83 	.word	0x0800ff83
 800fed4:	0800feab 	.word	0x0800feab
 800fed8:	0800feab 	.word	0x0800feab
 800fedc:	0800ffe1 	.word	0x0800ffe1
 800fee0:	0800feab 	.word	0x0800feab
 800fee4:	0800feab 	.word	0x0800feab
 800fee8:	0800feab 	.word	0x0800feab
 800feec:	0800feab 	.word	0x0800feab
 800fef0:	0800feab 	.word	0x0800feab
 800fef4:	0800feab 	.word	0x0800feab
 800fef8:	0800feab 	.word	0x0800feab
 800fefc:	0800fff7 	.word	0x0800fff7
 800ff00:	0800ffcd 	.word	0x0800ffcd
 800ff04:	0800ff5b 	.word	0x0800ff5b
 800ff08:	0800ff5b 	.word	0x0800ff5b
 800ff0c:	0800ff5b 	.word	0x0800ff5b
 800ff10:	0800feab 	.word	0x0800feab
 800ff14:	0800ffd1 	.word	0x0800ffd1
 800ff18:	0800feab 	.word	0x0800feab
 800ff1c:	0800feab 	.word	0x0800feab
 800ff20:	0800feab 	.word	0x0800feab
 800ff24:	0800feab 	.word	0x0800feab
 800ff28:	08010007 	.word	0x08010007
 800ff2c:	0800ffd9 	.word	0x0800ffd9
 800ff30:	0800ff7b 	.word	0x0800ff7b
 800ff34:	0800feab 	.word	0x0800feab
 800ff38:	0800feab 	.word	0x0800feab
 800ff3c:	08010003 	.word	0x08010003
 800ff40:	0800feab 	.word	0x0800feab
 800ff44:	0800ffcd 	.word	0x0800ffcd
 800ff48:	0800feab 	.word	0x0800feab
 800ff4c:	0800feab 	.word	0x0800feab
 800ff50:	0800ff83 	.word	0x0800ff83
 800ff54:	3b45      	subs	r3, #69	; 0x45
 800ff56:	2b02      	cmp	r3, #2
 800ff58:	d8a7      	bhi.n	800feaa <__ssvfiscanf_r+0xee>
 800ff5a:	2305      	movs	r3, #5
 800ff5c:	e01b      	b.n	800ff96 <__ssvfiscanf_r+0x1da>
 800ff5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ff60:	4621      	mov	r1, r4
 800ff62:	4630      	mov	r0, r6
 800ff64:	4798      	blx	r3
 800ff66:	2800      	cmp	r0, #0
 800ff68:	f43f af68 	beq.w	800fe3c <__ssvfiscanf_r+0x80>
 800ff6c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ff6e:	2800      	cmp	r0, #0
 800ff70:	f040 808d 	bne.w	801008e <__ssvfiscanf_r+0x2d2>
 800ff74:	f04f 30ff 	mov.w	r0, #4294967295
 800ff78:	e08f      	b.n	801009a <__ssvfiscanf_r+0x2de>
 800ff7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ff7c:	f042 0220 	orr.w	r2, r2, #32
 800ff80:	9241      	str	r2, [sp, #260]	; 0x104
 800ff82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ff84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ff88:	9241      	str	r2, [sp, #260]	; 0x104
 800ff8a:	2210      	movs	r2, #16
 800ff8c:	2b6f      	cmp	r3, #111	; 0x6f
 800ff8e:	9242      	str	r2, [sp, #264]	; 0x108
 800ff90:	bf34      	ite	cc
 800ff92:	2303      	movcc	r3, #3
 800ff94:	2304      	movcs	r3, #4
 800ff96:	9347      	str	r3, [sp, #284]	; 0x11c
 800ff98:	6863      	ldr	r3, [r4, #4]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	dd42      	ble.n	8010024 <__ssvfiscanf_r+0x268>
 800ff9e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ffa0:	0659      	lsls	r1, r3, #25
 800ffa2:	d404      	bmi.n	800ffae <__ssvfiscanf_r+0x1f2>
 800ffa4:	6823      	ldr	r3, [r4, #0]
 800ffa6:	781a      	ldrb	r2, [r3, #0]
 800ffa8:	5cba      	ldrb	r2, [r7, r2]
 800ffaa:	0712      	lsls	r2, r2, #28
 800ffac:	d441      	bmi.n	8010032 <__ssvfiscanf_r+0x276>
 800ffae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ffb0:	2b02      	cmp	r3, #2
 800ffb2:	dc50      	bgt.n	8010056 <__ssvfiscanf_r+0x29a>
 800ffb4:	466b      	mov	r3, sp
 800ffb6:	4622      	mov	r2, r4
 800ffb8:	a941      	add	r1, sp, #260	; 0x104
 800ffba:	4630      	mov	r0, r6
 800ffbc:	f000 f876 	bl	80100ac <_scanf_chars>
 800ffc0:	2801      	cmp	r0, #1
 800ffc2:	d06e      	beq.n	80100a2 <__ssvfiscanf_r+0x2e6>
 800ffc4:	2802      	cmp	r0, #2
 800ffc6:	f47f af20 	bne.w	800fe0a <__ssvfiscanf_r+0x4e>
 800ffca:	e7cf      	b.n	800ff6c <__ssvfiscanf_r+0x1b0>
 800ffcc:	220a      	movs	r2, #10
 800ffce:	e7dd      	b.n	800ff8c <__ssvfiscanf_r+0x1d0>
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	9342      	str	r3, [sp, #264]	; 0x108
 800ffd4:	2303      	movs	r3, #3
 800ffd6:	e7de      	b.n	800ff96 <__ssvfiscanf_r+0x1da>
 800ffd8:	2308      	movs	r3, #8
 800ffda:	9342      	str	r3, [sp, #264]	; 0x108
 800ffdc:	2304      	movs	r3, #4
 800ffde:	e7da      	b.n	800ff96 <__ssvfiscanf_r+0x1da>
 800ffe0:	4629      	mov	r1, r5
 800ffe2:	4640      	mov	r0, r8
 800ffe4:	f000 fa18 	bl	8010418 <__sccl>
 800ffe8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ffea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffee:	9341      	str	r3, [sp, #260]	; 0x104
 800fff0:	4605      	mov	r5, r0
 800fff2:	2301      	movs	r3, #1
 800fff4:	e7cf      	b.n	800ff96 <__ssvfiscanf_r+0x1da>
 800fff6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fffc:	9341      	str	r3, [sp, #260]	; 0x104
 800fffe:	2300      	movs	r3, #0
 8010000:	e7c9      	b.n	800ff96 <__ssvfiscanf_r+0x1da>
 8010002:	2302      	movs	r3, #2
 8010004:	e7c7      	b.n	800ff96 <__ssvfiscanf_r+0x1da>
 8010006:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010008:	06c3      	lsls	r3, r0, #27
 801000a:	f53f aefe 	bmi.w	800fe0a <__ssvfiscanf_r+0x4e>
 801000e:	9b00      	ldr	r3, [sp, #0]
 8010010:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010012:	1d19      	adds	r1, r3, #4
 8010014:	9100      	str	r1, [sp, #0]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	f010 0f01 	tst.w	r0, #1
 801001c:	bf14      	ite	ne
 801001e:	801a      	strhne	r2, [r3, #0]
 8010020:	601a      	streq	r2, [r3, #0]
 8010022:	e6f2      	b.n	800fe0a <__ssvfiscanf_r+0x4e>
 8010024:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010026:	4621      	mov	r1, r4
 8010028:	4630      	mov	r0, r6
 801002a:	4798      	blx	r3
 801002c:	2800      	cmp	r0, #0
 801002e:	d0b6      	beq.n	800ff9e <__ssvfiscanf_r+0x1e2>
 8010030:	e79c      	b.n	800ff6c <__ssvfiscanf_r+0x1b0>
 8010032:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010034:	3201      	adds	r2, #1
 8010036:	9245      	str	r2, [sp, #276]	; 0x114
 8010038:	6862      	ldr	r2, [r4, #4]
 801003a:	3a01      	subs	r2, #1
 801003c:	2a00      	cmp	r2, #0
 801003e:	6062      	str	r2, [r4, #4]
 8010040:	dd02      	ble.n	8010048 <__ssvfiscanf_r+0x28c>
 8010042:	3301      	adds	r3, #1
 8010044:	6023      	str	r3, [r4, #0]
 8010046:	e7ad      	b.n	800ffa4 <__ssvfiscanf_r+0x1e8>
 8010048:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801004a:	4621      	mov	r1, r4
 801004c:	4630      	mov	r0, r6
 801004e:	4798      	blx	r3
 8010050:	2800      	cmp	r0, #0
 8010052:	d0a7      	beq.n	800ffa4 <__ssvfiscanf_r+0x1e8>
 8010054:	e78a      	b.n	800ff6c <__ssvfiscanf_r+0x1b0>
 8010056:	2b04      	cmp	r3, #4
 8010058:	dc0e      	bgt.n	8010078 <__ssvfiscanf_r+0x2bc>
 801005a:	466b      	mov	r3, sp
 801005c:	4622      	mov	r2, r4
 801005e:	a941      	add	r1, sp, #260	; 0x104
 8010060:	4630      	mov	r0, r6
 8010062:	f000 f87d 	bl	8010160 <_scanf_i>
 8010066:	e7ab      	b.n	800ffc0 <__ssvfiscanf_r+0x204>
 8010068:	0800fd09 	.word	0x0800fd09
 801006c:	0800fd83 	.word	0x0800fd83
 8010070:	08010aad 	.word	0x08010aad
 8010074:	080109a2 	.word	0x080109a2
 8010078:	4b0b      	ldr	r3, [pc, #44]	; (80100a8 <__ssvfiscanf_r+0x2ec>)
 801007a:	2b00      	cmp	r3, #0
 801007c:	f43f aec5 	beq.w	800fe0a <__ssvfiscanf_r+0x4e>
 8010080:	466b      	mov	r3, sp
 8010082:	4622      	mov	r2, r4
 8010084:	a941      	add	r1, sp, #260	; 0x104
 8010086:	4630      	mov	r0, r6
 8010088:	f7fc f894 	bl	800c1b4 <_scanf_float>
 801008c:	e798      	b.n	800ffc0 <__ssvfiscanf_r+0x204>
 801008e:	89a3      	ldrh	r3, [r4, #12]
 8010090:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010094:	bf18      	it	ne
 8010096:	f04f 30ff 	movne.w	r0, #4294967295
 801009a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801009e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100a2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80100a4:	e7f9      	b.n	801009a <__ssvfiscanf_r+0x2de>
 80100a6:	bf00      	nop
 80100a8:	0800c1b5 	.word	0x0800c1b5

080100ac <_scanf_chars>:
 80100ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100b0:	4615      	mov	r5, r2
 80100b2:	688a      	ldr	r2, [r1, #8]
 80100b4:	4680      	mov	r8, r0
 80100b6:	460c      	mov	r4, r1
 80100b8:	b932      	cbnz	r2, 80100c8 <_scanf_chars+0x1c>
 80100ba:	698a      	ldr	r2, [r1, #24]
 80100bc:	2a00      	cmp	r2, #0
 80100be:	bf0c      	ite	eq
 80100c0:	2201      	moveq	r2, #1
 80100c2:	f04f 32ff 	movne.w	r2, #4294967295
 80100c6:	608a      	str	r2, [r1, #8]
 80100c8:	6822      	ldr	r2, [r4, #0]
 80100ca:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801015c <_scanf_chars+0xb0>
 80100ce:	06d1      	lsls	r1, r2, #27
 80100d0:	bf5f      	itttt	pl
 80100d2:	681a      	ldrpl	r2, [r3, #0]
 80100d4:	1d11      	addpl	r1, r2, #4
 80100d6:	6019      	strpl	r1, [r3, #0]
 80100d8:	6816      	ldrpl	r6, [r2, #0]
 80100da:	2700      	movs	r7, #0
 80100dc:	69a0      	ldr	r0, [r4, #24]
 80100de:	b188      	cbz	r0, 8010104 <_scanf_chars+0x58>
 80100e0:	2801      	cmp	r0, #1
 80100e2:	d107      	bne.n	80100f4 <_scanf_chars+0x48>
 80100e4:	682a      	ldr	r2, [r5, #0]
 80100e6:	7811      	ldrb	r1, [r2, #0]
 80100e8:	6962      	ldr	r2, [r4, #20]
 80100ea:	5c52      	ldrb	r2, [r2, r1]
 80100ec:	b952      	cbnz	r2, 8010104 <_scanf_chars+0x58>
 80100ee:	2f00      	cmp	r7, #0
 80100f0:	d031      	beq.n	8010156 <_scanf_chars+0xaa>
 80100f2:	e022      	b.n	801013a <_scanf_chars+0x8e>
 80100f4:	2802      	cmp	r0, #2
 80100f6:	d120      	bne.n	801013a <_scanf_chars+0x8e>
 80100f8:	682b      	ldr	r3, [r5, #0]
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8010100:	071b      	lsls	r3, r3, #28
 8010102:	d41a      	bmi.n	801013a <_scanf_chars+0x8e>
 8010104:	6823      	ldr	r3, [r4, #0]
 8010106:	06da      	lsls	r2, r3, #27
 8010108:	bf5e      	ittt	pl
 801010a:	682b      	ldrpl	r3, [r5, #0]
 801010c:	781b      	ldrbpl	r3, [r3, #0]
 801010e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010112:	682a      	ldr	r2, [r5, #0]
 8010114:	686b      	ldr	r3, [r5, #4]
 8010116:	3201      	adds	r2, #1
 8010118:	602a      	str	r2, [r5, #0]
 801011a:	68a2      	ldr	r2, [r4, #8]
 801011c:	3b01      	subs	r3, #1
 801011e:	3a01      	subs	r2, #1
 8010120:	606b      	str	r3, [r5, #4]
 8010122:	3701      	adds	r7, #1
 8010124:	60a2      	str	r2, [r4, #8]
 8010126:	b142      	cbz	r2, 801013a <_scanf_chars+0x8e>
 8010128:	2b00      	cmp	r3, #0
 801012a:	dcd7      	bgt.n	80100dc <_scanf_chars+0x30>
 801012c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010130:	4629      	mov	r1, r5
 8010132:	4640      	mov	r0, r8
 8010134:	4798      	blx	r3
 8010136:	2800      	cmp	r0, #0
 8010138:	d0d0      	beq.n	80100dc <_scanf_chars+0x30>
 801013a:	6823      	ldr	r3, [r4, #0]
 801013c:	f013 0310 	ands.w	r3, r3, #16
 8010140:	d105      	bne.n	801014e <_scanf_chars+0xa2>
 8010142:	68e2      	ldr	r2, [r4, #12]
 8010144:	3201      	adds	r2, #1
 8010146:	60e2      	str	r2, [r4, #12]
 8010148:	69a2      	ldr	r2, [r4, #24]
 801014a:	b102      	cbz	r2, 801014e <_scanf_chars+0xa2>
 801014c:	7033      	strb	r3, [r6, #0]
 801014e:	6923      	ldr	r3, [r4, #16]
 8010150:	443b      	add	r3, r7
 8010152:	6123      	str	r3, [r4, #16]
 8010154:	2000      	movs	r0, #0
 8010156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801015a:	bf00      	nop
 801015c:	08010aad 	.word	0x08010aad

08010160 <_scanf_i>:
 8010160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010164:	4698      	mov	r8, r3
 8010166:	4b76      	ldr	r3, [pc, #472]	; (8010340 <_scanf_i+0x1e0>)
 8010168:	460c      	mov	r4, r1
 801016a:	4682      	mov	sl, r0
 801016c:	4616      	mov	r6, r2
 801016e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010172:	b087      	sub	sp, #28
 8010174:	ab03      	add	r3, sp, #12
 8010176:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801017a:	4b72      	ldr	r3, [pc, #456]	; (8010344 <_scanf_i+0x1e4>)
 801017c:	69a1      	ldr	r1, [r4, #24]
 801017e:	4a72      	ldr	r2, [pc, #456]	; (8010348 <_scanf_i+0x1e8>)
 8010180:	2903      	cmp	r1, #3
 8010182:	bf18      	it	ne
 8010184:	461a      	movne	r2, r3
 8010186:	68a3      	ldr	r3, [r4, #8]
 8010188:	9201      	str	r2, [sp, #4]
 801018a:	1e5a      	subs	r2, r3, #1
 801018c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010190:	bf88      	it	hi
 8010192:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010196:	4627      	mov	r7, r4
 8010198:	bf82      	ittt	hi
 801019a:	eb03 0905 	addhi.w	r9, r3, r5
 801019e:	f240 135d 	movwhi	r3, #349	; 0x15d
 80101a2:	60a3      	strhi	r3, [r4, #8]
 80101a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80101a8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80101ac:	bf98      	it	ls
 80101ae:	f04f 0900 	movls.w	r9, #0
 80101b2:	6023      	str	r3, [r4, #0]
 80101b4:	463d      	mov	r5, r7
 80101b6:	f04f 0b00 	mov.w	fp, #0
 80101ba:	6831      	ldr	r1, [r6, #0]
 80101bc:	ab03      	add	r3, sp, #12
 80101be:	7809      	ldrb	r1, [r1, #0]
 80101c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80101c4:	2202      	movs	r2, #2
 80101c6:	f7f0 f81b 	bl	8000200 <memchr>
 80101ca:	b328      	cbz	r0, 8010218 <_scanf_i+0xb8>
 80101cc:	f1bb 0f01 	cmp.w	fp, #1
 80101d0:	d159      	bne.n	8010286 <_scanf_i+0x126>
 80101d2:	6862      	ldr	r2, [r4, #4]
 80101d4:	b92a      	cbnz	r2, 80101e2 <_scanf_i+0x82>
 80101d6:	6822      	ldr	r2, [r4, #0]
 80101d8:	2308      	movs	r3, #8
 80101da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80101de:	6063      	str	r3, [r4, #4]
 80101e0:	6022      	str	r2, [r4, #0]
 80101e2:	6822      	ldr	r2, [r4, #0]
 80101e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80101e8:	6022      	str	r2, [r4, #0]
 80101ea:	68a2      	ldr	r2, [r4, #8]
 80101ec:	1e51      	subs	r1, r2, #1
 80101ee:	60a1      	str	r1, [r4, #8]
 80101f0:	b192      	cbz	r2, 8010218 <_scanf_i+0xb8>
 80101f2:	6832      	ldr	r2, [r6, #0]
 80101f4:	1c51      	adds	r1, r2, #1
 80101f6:	6031      	str	r1, [r6, #0]
 80101f8:	7812      	ldrb	r2, [r2, #0]
 80101fa:	f805 2b01 	strb.w	r2, [r5], #1
 80101fe:	6872      	ldr	r2, [r6, #4]
 8010200:	3a01      	subs	r2, #1
 8010202:	2a00      	cmp	r2, #0
 8010204:	6072      	str	r2, [r6, #4]
 8010206:	dc07      	bgt.n	8010218 <_scanf_i+0xb8>
 8010208:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801020c:	4631      	mov	r1, r6
 801020e:	4650      	mov	r0, sl
 8010210:	4790      	blx	r2
 8010212:	2800      	cmp	r0, #0
 8010214:	f040 8085 	bne.w	8010322 <_scanf_i+0x1c2>
 8010218:	f10b 0b01 	add.w	fp, fp, #1
 801021c:	f1bb 0f03 	cmp.w	fp, #3
 8010220:	d1cb      	bne.n	80101ba <_scanf_i+0x5a>
 8010222:	6863      	ldr	r3, [r4, #4]
 8010224:	b90b      	cbnz	r3, 801022a <_scanf_i+0xca>
 8010226:	230a      	movs	r3, #10
 8010228:	6063      	str	r3, [r4, #4]
 801022a:	6863      	ldr	r3, [r4, #4]
 801022c:	4947      	ldr	r1, [pc, #284]	; (801034c <_scanf_i+0x1ec>)
 801022e:	6960      	ldr	r0, [r4, #20]
 8010230:	1ac9      	subs	r1, r1, r3
 8010232:	f000 f8f1 	bl	8010418 <__sccl>
 8010236:	f04f 0b00 	mov.w	fp, #0
 801023a:	68a3      	ldr	r3, [r4, #8]
 801023c:	6822      	ldr	r2, [r4, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d03d      	beq.n	80102be <_scanf_i+0x15e>
 8010242:	6831      	ldr	r1, [r6, #0]
 8010244:	6960      	ldr	r0, [r4, #20]
 8010246:	f891 c000 	ldrb.w	ip, [r1]
 801024a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801024e:	2800      	cmp	r0, #0
 8010250:	d035      	beq.n	80102be <_scanf_i+0x15e>
 8010252:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010256:	d124      	bne.n	80102a2 <_scanf_i+0x142>
 8010258:	0510      	lsls	r0, r2, #20
 801025a:	d522      	bpl.n	80102a2 <_scanf_i+0x142>
 801025c:	f10b 0b01 	add.w	fp, fp, #1
 8010260:	f1b9 0f00 	cmp.w	r9, #0
 8010264:	d003      	beq.n	801026e <_scanf_i+0x10e>
 8010266:	3301      	adds	r3, #1
 8010268:	f109 39ff 	add.w	r9, r9, #4294967295
 801026c:	60a3      	str	r3, [r4, #8]
 801026e:	6873      	ldr	r3, [r6, #4]
 8010270:	3b01      	subs	r3, #1
 8010272:	2b00      	cmp	r3, #0
 8010274:	6073      	str	r3, [r6, #4]
 8010276:	dd1b      	ble.n	80102b0 <_scanf_i+0x150>
 8010278:	6833      	ldr	r3, [r6, #0]
 801027a:	3301      	adds	r3, #1
 801027c:	6033      	str	r3, [r6, #0]
 801027e:	68a3      	ldr	r3, [r4, #8]
 8010280:	3b01      	subs	r3, #1
 8010282:	60a3      	str	r3, [r4, #8]
 8010284:	e7d9      	b.n	801023a <_scanf_i+0xda>
 8010286:	f1bb 0f02 	cmp.w	fp, #2
 801028a:	d1ae      	bne.n	80101ea <_scanf_i+0x8a>
 801028c:	6822      	ldr	r2, [r4, #0]
 801028e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010292:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010296:	d1bf      	bne.n	8010218 <_scanf_i+0xb8>
 8010298:	2310      	movs	r3, #16
 801029a:	6063      	str	r3, [r4, #4]
 801029c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80102a0:	e7a2      	b.n	80101e8 <_scanf_i+0x88>
 80102a2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80102a6:	6022      	str	r2, [r4, #0]
 80102a8:	780b      	ldrb	r3, [r1, #0]
 80102aa:	f805 3b01 	strb.w	r3, [r5], #1
 80102ae:	e7de      	b.n	801026e <_scanf_i+0x10e>
 80102b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80102b4:	4631      	mov	r1, r6
 80102b6:	4650      	mov	r0, sl
 80102b8:	4798      	blx	r3
 80102ba:	2800      	cmp	r0, #0
 80102bc:	d0df      	beq.n	801027e <_scanf_i+0x11e>
 80102be:	6823      	ldr	r3, [r4, #0]
 80102c0:	05db      	lsls	r3, r3, #23
 80102c2:	d50d      	bpl.n	80102e0 <_scanf_i+0x180>
 80102c4:	42bd      	cmp	r5, r7
 80102c6:	d909      	bls.n	80102dc <_scanf_i+0x17c>
 80102c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80102cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80102d0:	4632      	mov	r2, r6
 80102d2:	4650      	mov	r0, sl
 80102d4:	4798      	blx	r3
 80102d6:	f105 39ff 	add.w	r9, r5, #4294967295
 80102da:	464d      	mov	r5, r9
 80102dc:	42bd      	cmp	r5, r7
 80102de:	d02d      	beq.n	801033c <_scanf_i+0x1dc>
 80102e0:	6822      	ldr	r2, [r4, #0]
 80102e2:	f012 0210 	ands.w	r2, r2, #16
 80102e6:	d113      	bne.n	8010310 <_scanf_i+0x1b0>
 80102e8:	702a      	strb	r2, [r5, #0]
 80102ea:	6863      	ldr	r3, [r4, #4]
 80102ec:	9e01      	ldr	r6, [sp, #4]
 80102ee:	4639      	mov	r1, r7
 80102f0:	4650      	mov	r0, sl
 80102f2:	47b0      	blx	r6
 80102f4:	6821      	ldr	r1, [r4, #0]
 80102f6:	f8d8 3000 	ldr.w	r3, [r8]
 80102fa:	f011 0f20 	tst.w	r1, #32
 80102fe:	d013      	beq.n	8010328 <_scanf_i+0x1c8>
 8010300:	1d1a      	adds	r2, r3, #4
 8010302:	f8c8 2000 	str.w	r2, [r8]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	6018      	str	r0, [r3, #0]
 801030a:	68e3      	ldr	r3, [r4, #12]
 801030c:	3301      	adds	r3, #1
 801030e:	60e3      	str	r3, [r4, #12]
 8010310:	1bed      	subs	r5, r5, r7
 8010312:	44ab      	add	fp, r5
 8010314:	6925      	ldr	r5, [r4, #16]
 8010316:	445d      	add	r5, fp
 8010318:	6125      	str	r5, [r4, #16]
 801031a:	2000      	movs	r0, #0
 801031c:	b007      	add	sp, #28
 801031e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010322:	f04f 0b00 	mov.w	fp, #0
 8010326:	e7ca      	b.n	80102be <_scanf_i+0x15e>
 8010328:	1d1a      	adds	r2, r3, #4
 801032a:	f8c8 2000 	str.w	r2, [r8]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	f011 0f01 	tst.w	r1, #1
 8010334:	bf14      	ite	ne
 8010336:	8018      	strhne	r0, [r3, #0]
 8010338:	6018      	streq	r0, [r3, #0]
 801033a:	e7e6      	b.n	801030a <_scanf_i+0x1aa>
 801033c:	2001      	movs	r0, #1
 801033e:	e7ed      	b.n	801031c <_scanf_i+0x1bc>
 8010340:	08010924 	.word	0x08010924
 8010344:	0801061d 	.word	0x0801061d
 8010348:	0800d59d 	.word	0x0800d59d
 801034c:	08010e75 	.word	0x08010e75

08010350 <_putc_r>:
 8010350:	b570      	push	{r4, r5, r6, lr}
 8010352:	460d      	mov	r5, r1
 8010354:	4614      	mov	r4, r2
 8010356:	4606      	mov	r6, r0
 8010358:	b118      	cbz	r0, 8010362 <_putc_r+0x12>
 801035a:	6983      	ldr	r3, [r0, #24]
 801035c:	b90b      	cbnz	r3, 8010362 <_putc_r+0x12>
 801035e:	f7fe f99f 	bl	800e6a0 <__sinit>
 8010362:	4b1c      	ldr	r3, [pc, #112]	; (80103d4 <_putc_r+0x84>)
 8010364:	429c      	cmp	r4, r3
 8010366:	d124      	bne.n	80103b2 <_putc_r+0x62>
 8010368:	6874      	ldr	r4, [r6, #4]
 801036a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801036c:	07d8      	lsls	r0, r3, #31
 801036e:	d405      	bmi.n	801037c <_putc_r+0x2c>
 8010370:	89a3      	ldrh	r3, [r4, #12]
 8010372:	0599      	lsls	r1, r3, #22
 8010374:	d402      	bmi.n	801037c <_putc_r+0x2c>
 8010376:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010378:	f7fe fda3 	bl	800eec2 <__retarget_lock_acquire_recursive>
 801037c:	68a3      	ldr	r3, [r4, #8]
 801037e:	3b01      	subs	r3, #1
 8010380:	2b00      	cmp	r3, #0
 8010382:	60a3      	str	r3, [r4, #8]
 8010384:	da05      	bge.n	8010392 <_putc_r+0x42>
 8010386:	69a2      	ldr	r2, [r4, #24]
 8010388:	4293      	cmp	r3, r2
 801038a:	db1c      	blt.n	80103c6 <_putc_r+0x76>
 801038c:	b2eb      	uxtb	r3, r5
 801038e:	2b0a      	cmp	r3, #10
 8010390:	d019      	beq.n	80103c6 <_putc_r+0x76>
 8010392:	6823      	ldr	r3, [r4, #0]
 8010394:	1c5a      	adds	r2, r3, #1
 8010396:	6022      	str	r2, [r4, #0]
 8010398:	701d      	strb	r5, [r3, #0]
 801039a:	b2ed      	uxtb	r5, r5
 801039c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801039e:	07da      	lsls	r2, r3, #31
 80103a0:	d405      	bmi.n	80103ae <_putc_r+0x5e>
 80103a2:	89a3      	ldrh	r3, [r4, #12]
 80103a4:	059b      	lsls	r3, r3, #22
 80103a6:	d402      	bmi.n	80103ae <_putc_r+0x5e>
 80103a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103aa:	f7fe fd8b 	bl	800eec4 <__retarget_lock_release_recursive>
 80103ae:	4628      	mov	r0, r5
 80103b0:	bd70      	pop	{r4, r5, r6, pc}
 80103b2:	4b09      	ldr	r3, [pc, #36]	; (80103d8 <_putc_r+0x88>)
 80103b4:	429c      	cmp	r4, r3
 80103b6:	d101      	bne.n	80103bc <_putc_r+0x6c>
 80103b8:	68b4      	ldr	r4, [r6, #8]
 80103ba:	e7d6      	b.n	801036a <_putc_r+0x1a>
 80103bc:	4b07      	ldr	r3, [pc, #28]	; (80103dc <_putc_r+0x8c>)
 80103be:	429c      	cmp	r4, r3
 80103c0:	bf08      	it	eq
 80103c2:	68f4      	ldreq	r4, [r6, #12]
 80103c4:	e7d1      	b.n	801036a <_putc_r+0x1a>
 80103c6:	4629      	mov	r1, r5
 80103c8:	4622      	mov	r2, r4
 80103ca:	4630      	mov	r0, r6
 80103cc:	f7fd f8e8 	bl	800d5a0 <__swbuf_r>
 80103d0:	4605      	mov	r5, r0
 80103d2:	e7e3      	b.n	801039c <_putc_r+0x4c>
 80103d4:	08010c48 	.word	0x08010c48
 80103d8:	08010c68 	.word	0x08010c68
 80103dc:	08010c28 	.word	0x08010c28

080103e0 <_read_r>:
 80103e0:	b538      	push	{r3, r4, r5, lr}
 80103e2:	4d07      	ldr	r5, [pc, #28]	; (8010400 <_read_r+0x20>)
 80103e4:	4604      	mov	r4, r0
 80103e6:	4608      	mov	r0, r1
 80103e8:	4611      	mov	r1, r2
 80103ea:	2200      	movs	r2, #0
 80103ec:	602a      	str	r2, [r5, #0]
 80103ee:	461a      	mov	r2, r3
 80103f0:	f7f6 f922 	bl	8006638 <_read>
 80103f4:	1c43      	adds	r3, r0, #1
 80103f6:	d102      	bne.n	80103fe <_read_r+0x1e>
 80103f8:	682b      	ldr	r3, [r5, #0]
 80103fa:	b103      	cbz	r3, 80103fe <_read_r+0x1e>
 80103fc:	6023      	str	r3, [r4, #0]
 80103fe:	bd38      	pop	{r3, r4, r5, pc}
 8010400:	20002bec 	.word	0x20002bec
 8010404:	00000000 	.word	0x00000000

08010408 <nan>:
 8010408:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010410 <nan+0x8>
 801040c:	4770      	bx	lr
 801040e:	bf00      	nop
 8010410:	00000000 	.word	0x00000000
 8010414:	7ff80000 	.word	0x7ff80000

08010418 <__sccl>:
 8010418:	b570      	push	{r4, r5, r6, lr}
 801041a:	780b      	ldrb	r3, [r1, #0]
 801041c:	4604      	mov	r4, r0
 801041e:	2b5e      	cmp	r3, #94	; 0x5e
 8010420:	bf0b      	itete	eq
 8010422:	784b      	ldrbeq	r3, [r1, #1]
 8010424:	1c48      	addne	r0, r1, #1
 8010426:	1c88      	addeq	r0, r1, #2
 8010428:	2200      	movne	r2, #0
 801042a:	bf08      	it	eq
 801042c:	2201      	moveq	r2, #1
 801042e:	1e61      	subs	r1, r4, #1
 8010430:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010434:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010438:	42a9      	cmp	r1, r5
 801043a:	d1fb      	bne.n	8010434 <__sccl+0x1c>
 801043c:	b90b      	cbnz	r3, 8010442 <__sccl+0x2a>
 801043e:	3801      	subs	r0, #1
 8010440:	bd70      	pop	{r4, r5, r6, pc}
 8010442:	f082 0201 	eor.w	r2, r2, #1
 8010446:	54e2      	strb	r2, [r4, r3]
 8010448:	4605      	mov	r5, r0
 801044a:	4628      	mov	r0, r5
 801044c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010450:	292d      	cmp	r1, #45	; 0x2d
 8010452:	d006      	beq.n	8010462 <__sccl+0x4a>
 8010454:	295d      	cmp	r1, #93	; 0x5d
 8010456:	d0f3      	beq.n	8010440 <__sccl+0x28>
 8010458:	b909      	cbnz	r1, 801045e <__sccl+0x46>
 801045a:	4628      	mov	r0, r5
 801045c:	e7f0      	b.n	8010440 <__sccl+0x28>
 801045e:	460b      	mov	r3, r1
 8010460:	e7f1      	b.n	8010446 <__sccl+0x2e>
 8010462:	786e      	ldrb	r6, [r5, #1]
 8010464:	2e5d      	cmp	r6, #93	; 0x5d
 8010466:	d0fa      	beq.n	801045e <__sccl+0x46>
 8010468:	42b3      	cmp	r3, r6
 801046a:	dcf8      	bgt.n	801045e <__sccl+0x46>
 801046c:	3502      	adds	r5, #2
 801046e:	4619      	mov	r1, r3
 8010470:	3101      	adds	r1, #1
 8010472:	428e      	cmp	r6, r1
 8010474:	5462      	strb	r2, [r4, r1]
 8010476:	dcfb      	bgt.n	8010470 <__sccl+0x58>
 8010478:	1af1      	subs	r1, r6, r3
 801047a:	3901      	subs	r1, #1
 801047c:	1c58      	adds	r0, r3, #1
 801047e:	42b3      	cmp	r3, r6
 8010480:	bfa8      	it	ge
 8010482:	2100      	movge	r1, #0
 8010484:	1843      	adds	r3, r0, r1
 8010486:	e7e0      	b.n	801044a <__sccl+0x32>

08010488 <_raise_r>:
 8010488:	291f      	cmp	r1, #31
 801048a:	b538      	push	{r3, r4, r5, lr}
 801048c:	4604      	mov	r4, r0
 801048e:	460d      	mov	r5, r1
 8010490:	d904      	bls.n	801049c <_raise_r+0x14>
 8010492:	2316      	movs	r3, #22
 8010494:	6003      	str	r3, [r0, #0]
 8010496:	f04f 30ff 	mov.w	r0, #4294967295
 801049a:	bd38      	pop	{r3, r4, r5, pc}
 801049c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801049e:	b112      	cbz	r2, 80104a6 <_raise_r+0x1e>
 80104a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80104a4:	b94b      	cbnz	r3, 80104ba <_raise_r+0x32>
 80104a6:	4620      	mov	r0, r4
 80104a8:	f000 f830 	bl	801050c <_getpid_r>
 80104ac:	462a      	mov	r2, r5
 80104ae:	4601      	mov	r1, r0
 80104b0:	4620      	mov	r0, r4
 80104b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104b6:	f000 b817 	b.w	80104e8 <_kill_r>
 80104ba:	2b01      	cmp	r3, #1
 80104bc:	d00a      	beq.n	80104d4 <_raise_r+0x4c>
 80104be:	1c59      	adds	r1, r3, #1
 80104c0:	d103      	bne.n	80104ca <_raise_r+0x42>
 80104c2:	2316      	movs	r3, #22
 80104c4:	6003      	str	r3, [r0, #0]
 80104c6:	2001      	movs	r0, #1
 80104c8:	e7e7      	b.n	801049a <_raise_r+0x12>
 80104ca:	2400      	movs	r4, #0
 80104cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80104d0:	4628      	mov	r0, r5
 80104d2:	4798      	blx	r3
 80104d4:	2000      	movs	r0, #0
 80104d6:	e7e0      	b.n	801049a <_raise_r+0x12>

080104d8 <raise>:
 80104d8:	4b02      	ldr	r3, [pc, #8]	; (80104e4 <raise+0xc>)
 80104da:	4601      	mov	r1, r0
 80104dc:	6818      	ldr	r0, [r3, #0]
 80104de:	f7ff bfd3 	b.w	8010488 <_raise_r>
 80104e2:	bf00      	nop
 80104e4:	200013e4 	.word	0x200013e4

080104e8 <_kill_r>:
 80104e8:	b538      	push	{r3, r4, r5, lr}
 80104ea:	4d07      	ldr	r5, [pc, #28]	; (8010508 <_kill_r+0x20>)
 80104ec:	2300      	movs	r3, #0
 80104ee:	4604      	mov	r4, r0
 80104f0:	4608      	mov	r0, r1
 80104f2:	4611      	mov	r1, r2
 80104f4:	602b      	str	r3, [r5, #0]
 80104f6:	f7f6 f885 	bl	8006604 <_kill>
 80104fa:	1c43      	adds	r3, r0, #1
 80104fc:	d102      	bne.n	8010504 <_kill_r+0x1c>
 80104fe:	682b      	ldr	r3, [r5, #0]
 8010500:	b103      	cbz	r3, 8010504 <_kill_r+0x1c>
 8010502:	6023      	str	r3, [r4, #0]
 8010504:	bd38      	pop	{r3, r4, r5, pc}
 8010506:	bf00      	nop
 8010508:	20002bec 	.word	0x20002bec

0801050c <_getpid_r>:
 801050c:	f7f6 b872 	b.w	80065f4 <_getpid>

08010510 <strncmp>:
 8010510:	b510      	push	{r4, lr}
 8010512:	b17a      	cbz	r2, 8010534 <strncmp+0x24>
 8010514:	4603      	mov	r3, r0
 8010516:	3901      	subs	r1, #1
 8010518:	1884      	adds	r4, r0, r2
 801051a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801051e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010522:	4290      	cmp	r0, r2
 8010524:	d101      	bne.n	801052a <strncmp+0x1a>
 8010526:	42a3      	cmp	r3, r4
 8010528:	d101      	bne.n	801052e <strncmp+0x1e>
 801052a:	1a80      	subs	r0, r0, r2
 801052c:	bd10      	pop	{r4, pc}
 801052e:	2800      	cmp	r0, #0
 8010530:	d1f3      	bne.n	801051a <strncmp+0xa>
 8010532:	e7fa      	b.n	801052a <strncmp+0x1a>
 8010534:	4610      	mov	r0, r2
 8010536:	e7f9      	b.n	801052c <strncmp+0x1c>

08010538 <_strtoul_l.constprop.0>:
 8010538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801053c:	4f36      	ldr	r7, [pc, #216]	; (8010618 <_strtoul_l.constprop.0+0xe0>)
 801053e:	4686      	mov	lr, r0
 8010540:	460d      	mov	r5, r1
 8010542:	4628      	mov	r0, r5
 8010544:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010548:	5de6      	ldrb	r6, [r4, r7]
 801054a:	f016 0608 	ands.w	r6, r6, #8
 801054e:	d1f8      	bne.n	8010542 <_strtoul_l.constprop.0+0xa>
 8010550:	2c2d      	cmp	r4, #45	; 0x2d
 8010552:	d12f      	bne.n	80105b4 <_strtoul_l.constprop.0+0x7c>
 8010554:	782c      	ldrb	r4, [r5, #0]
 8010556:	2601      	movs	r6, #1
 8010558:	1c85      	adds	r5, r0, #2
 801055a:	2b00      	cmp	r3, #0
 801055c:	d057      	beq.n	801060e <_strtoul_l.constprop.0+0xd6>
 801055e:	2b10      	cmp	r3, #16
 8010560:	d109      	bne.n	8010576 <_strtoul_l.constprop.0+0x3e>
 8010562:	2c30      	cmp	r4, #48	; 0x30
 8010564:	d107      	bne.n	8010576 <_strtoul_l.constprop.0+0x3e>
 8010566:	7828      	ldrb	r0, [r5, #0]
 8010568:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801056c:	2858      	cmp	r0, #88	; 0x58
 801056e:	d149      	bne.n	8010604 <_strtoul_l.constprop.0+0xcc>
 8010570:	786c      	ldrb	r4, [r5, #1]
 8010572:	2310      	movs	r3, #16
 8010574:	3502      	adds	r5, #2
 8010576:	f04f 38ff 	mov.w	r8, #4294967295
 801057a:	2700      	movs	r7, #0
 801057c:	fbb8 f8f3 	udiv	r8, r8, r3
 8010580:	fb03 f908 	mul.w	r9, r3, r8
 8010584:	ea6f 0909 	mvn.w	r9, r9
 8010588:	4638      	mov	r0, r7
 801058a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801058e:	f1bc 0f09 	cmp.w	ip, #9
 8010592:	d814      	bhi.n	80105be <_strtoul_l.constprop.0+0x86>
 8010594:	4664      	mov	r4, ip
 8010596:	42a3      	cmp	r3, r4
 8010598:	dd22      	ble.n	80105e0 <_strtoul_l.constprop.0+0xa8>
 801059a:	2f00      	cmp	r7, #0
 801059c:	db1d      	blt.n	80105da <_strtoul_l.constprop.0+0xa2>
 801059e:	4580      	cmp	r8, r0
 80105a0:	d31b      	bcc.n	80105da <_strtoul_l.constprop.0+0xa2>
 80105a2:	d101      	bne.n	80105a8 <_strtoul_l.constprop.0+0x70>
 80105a4:	45a1      	cmp	r9, r4
 80105a6:	db18      	blt.n	80105da <_strtoul_l.constprop.0+0xa2>
 80105a8:	fb00 4003 	mla	r0, r0, r3, r4
 80105ac:	2701      	movs	r7, #1
 80105ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80105b2:	e7ea      	b.n	801058a <_strtoul_l.constprop.0+0x52>
 80105b4:	2c2b      	cmp	r4, #43	; 0x2b
 80105b6:	bf04      	itt	eq
 80105b8:	782c      	ldrbeq	r4, [r5, #0]
 80105ba:	1c85      	addeq	r5, r0, #2
 80105bc:	e7cd      	b.n	801055a <_strtoul_l.constprop.0+0x22>
 80105be:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80105c2:	f1bc 0f19 	cmp.w	ip, #25
 80105c6:	d801      	bhi.n	80105cc <_strtoul_l.constprop.0+0x94>
 80105c8:	3c37      	subs	r4, #55	; 0x37
 80105ca:	e7e4      	b.n	8010596 <_strtoul_l.constprop.0+0x5e>
 80105cc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80105d0:	f1bc 0f19 	cmp.w	ip, #25
 80105d4:	d804      	bhi.n	80105e0 <_strtoul_l.constprop.0+0xa8>
 80105d6:	3c57      	subs	r4, #87	; 0x57
 80105d8:	e7dd      	b.n	8010596 <_strtoul_l.constprop.0+0x5e>
 80105da:	f04f 37ff 	mov.w	r7, #4294967295
 80105de:	e7e6      	b.n	80105ae <_strtoul_l.constprop.0+0x76>
 80105e0:	2f00      	cmp	r7, #0
 80105e2:	da07      	bge.n	80105f4 <_strtoul_l.constprop.0+0xbc>
 80105e4:	2322      	movs	r3, #34	; 0x22
 80105e6:	f8ce 3000 	str.w	r3, [lr]
 80105ea:	f04f 30ff 	mov.w	r0, #4294967295
 80105ee:	b932      	cbnz	r2, 80105fe <_strtoul_l.constprop.0+0xc6>
 80105f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105f4:	b106      	cbz	r6, 80105f8 <_strtoul_l.constprop.0+0xc0>
 80105f6:	4240      	negs	r0, r0
 80105f8:	2a00      	cmp	r2, #0
 80105fa:	d0f9      	beq.n	80105f0 <_strtoul_l.constprop.0+0xb8>
 80105fc:	b107      	cbz	r7, 8010600 <_strtoul_l.constprop.0+0xc8>
 80105fe:	1e69      	subs	r1, r5, #1
 8010600:	6011      	str	r1, [r2, #0]
 8010602:	e7f5      	b.n	80105f0 <_strtoul_l.constprop.0+0xb8>
 8010604:	2430      	movs	r4, #48	; 0x30
 8010606:	2b00      	cmp	r3, #0
 8010608:	d1b5      	bne.n	8010576 <_strtoul_l.constprop.0+0x3e>
 801060a:	2308      	movs	r3, #8
 801060c:	e7b3      	b.n	8010576 <_strtoul_l.constprop.0+0x3e>
 801060e:	2c30      	cmp	r4, #48	; 0x30
 8010610:	d0a9      	beq.n	8010566 <_strtoul_l.constprop.0+0x2e>
 8010612:	230a      	movs	r3, #10
 8010614:	e7af      	b.n	8010576 <_strtoul_l.constprop.0+0x3e>
 8010616:	bf00      	nop
 8010618:	08010aad 	.word	0x08010aad

0801061c <_strtoul_r>:
 801061c:	f7ff bf8c 	b.w	8010538 <_strtoul_l.constprop.0>

08010620 <__submore>:
 8010620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010624:	460c      	mov	r4, r1
 8010626:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801062c:	4299      	cmp	r1, r3
 801062e:	d11d      	bne.n	801066c <__submore+0x4c>
 8010630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010634:	f7fa ff86 	bl	800b544 <_malloc_r>
 8010638:	b918      	cbnz	r0, 8010642 <__submore+0x22>
 801063a:	f04f 30ff 	mov.w	r0, #4294967295
 801063e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010646:	63a3      	str	r3, [r4, #56]	; 0x38
 8010648:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801064c:	6360      	str	r0, [r4, #52]	; 0x34
 801064e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010652:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010656:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801065a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801065e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010662:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010666:	6020      	str	r0, [r4, #0]
 8010668:	2000      	movs	r0, #0
 801066a:	e7e8      	b.n	801063e <__submore+0x1e>
 801066c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801066e:	0077      	lsls	r7, r6, #1
 8010670:	463a      	mov	r2, r7
 8010672:	f7ff f9be 	bl	800f9f2 <_realloc_r>
 8010676:	4605      	mov	r5, r0
 8010678:	2800      	cmp	r0, #0
 801067a:	d0de      	beq.n	801063a <__submore+0x1a>
 801067c:	eb00 0806 	add.w	r8, r0, r6
 8010680:	4601      	mov	r1, r0
 8010682:	4632      	mov	r2, r6
 8010684:	4640      	mov	r0, r8
 8010686:	f7fe fca9 	bl	800efdc <memcpy>
 801068a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801068e:	f8c4 8000 	str.w	r8, [r4]
 8010692:	e7e9      	b.n	8010668 <__submore+0x48>

08010694 <__ascii_wctomb>:
 8010694:	b149      	cbz	r1, 80106aa <__ascii_wctomb+0x16>
 8010696:	2aff      	cmp	r2, #255	; 0xff
 8010698:	bf85      	ittet	hi
 801069a:	238a      	movhi	r3, #138	; 0x8a
 801069c:	6003      	strhi	r3, [r0, #0]
 801069e:	700a      	strbls	r2, [r1, #0]
 80106a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80106a4:	bf98      	it	ls
 80106a6:	2001      	movls	r0, #1
 80106a8:	4770      	bx	lr
 80106aa:	4608      	mov	r0, r1
 80106ac:	4770      	bx	lr
	...

080106b0 <_fstat_r>:
 80106b0:	b538      	push	{r3, r4, r5, lr}
 80106b2:	4d07      	ldr	r5, [pc, #28]	; (80106d0 <_fstat_r+0x20>)
 80106b4:	2300      	movs	r3, #0
 80106b6:	4604      	mov	r4, r0
 80106b8:	4608      	mov	r0, r1
 80106ba:	4611      	mov	r1, r2
 80106bc:	602b      	str	r3, [r5, #0]
 80106be:	f7f6 f800 	bl	80066c2 <_fstat>
 80106c2:	1c43      	adds	r3, r0, #1
 80106c4:	d102      	bne.n	80106cc <_fstat_r+0x1c>
 80106c6:	682b      	ldr	r3, [r5, #0]
 80106c8:	b103      	cbz	r3, 80106cc <_fstat_r+0x1c>
 80106ca:	6023      	str	r3, [r4, #0]
 80106cc:	bd38      	pop	{r3, r4, r5, pc}
 80106ce:	bf00      	nop
 80106d0:	20002bec 	.word	0x20002bec

080106d4 <_isatty_r>:
 80106d4:	b538      	push	{r3, r4, r5, lr}
 80106d6:	4d06      	ldr	r5, [pc, #24]	; (80106f0 <_isatty_r+0x1c>)
 80106d8:	2300      	movs	r3, #0
 80106da:	4604      	mov	r4, r0
 80106dc:	4608      	mov	r0, r1
 80106de:	602b      	str	r3, [r5, #0]
 80106e0:	f7f5 ffff 	bl	80066e2 <_isatty>
 80106e4:	1c43      	adds	r3, r0, #1
 80106e6:	d102      	bne.n	80106ee <_isatty_r+0x1a>
 80106e8:	682b      	ldr	r3, [r5, #0]
 80106ea:	b103      	cbz	r3, 80106ee <_isatty_r+0x1a>
 80106ec:	6023      	str	r3, [r4, #0]
 80106ee:	bd38      	pop	{r3, r4, r5, pc}
 80106f0:	20002bec 	.word	0x20002bec

080106f4 <_malloc_usable_size_r>:
 80106f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106f8:	1f18      	subs	r0, r3, #4
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	bfbc      	itt	lt
 80106fe:	580b      	ldrlt	r3, [r1, r0]
 8010700:	18c0      	addlt	r0, r0, r3
 8010702:	4770      	bx	lr

08010704 <_init>:
 8010704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010706:	bf00      	nop
 8010708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801070a:	bc08      	pop	{r3}
 801070c:	469e      	mov	lr, r3
 801070e:	4770      	bx	lr

08010710 <_fini>:
 8010710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010712:	bf00      	nop
 8010714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010716:	bc08      	pop	{r3}
 8010718:	469e      	mov	lr, r3
 801071a:	4770      	bx	lr
