
PierceStat_F407VET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  0800f150  0800f150  0001f150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f880  0800f880  00021144  2**0
                  CONTENTS
  4 .ARM          00000008  0800f880  0800f880  0001f880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f888  0800f888  00021144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f888  0800f888  0001f888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f88c  0800f88c  0001f88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001144  20000000  0800f890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00021144  2**0
                  CONTENTS
 10 .bss          00000b4c  20001144  20001144  00021144  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001c90  20001c90  00021144  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00021144  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001469d  00000000  00000000  00021174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003038  00000000  00000000  00035811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  00038850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001328  00000000  00000000  00039cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248d3  00000000  00000000  0003afe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000160bb  00000000  00000000  0005f8bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dadba  00000000  00000000  00075976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150730  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ea4  00000000  00000000  00150780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001144 	.word	0x20001144
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f134 	.word	0x0800f134

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001148 	.word	0x20001148
 80001cc:	0800f134 	.word	0x0800f134

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <InitParams>:
							.commandDescription = "Alarm masks vector",
							.type = UINT32_T,
							.value.val_uint32_t = 0};


void InitParams() {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	71bb      	strb	r3, [r7, #6]
	params[i++] = &ParamList;
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	1c5a      	adds	r2, r3, #1
 8001026:	71ba      	strb	r2, [r7, #6]
 8001028:	4619      	mov	r1, r3
 800102a:	4bb8      	ldr	r3, [pc, #736]	; (800130c <InitParams+0x2f4>)
 800102c:	4ab8      	ldr	r2, [pc, #736]	; (8001310 <InitParams+0x2f8>)
 800102e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &SaveFlash;
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	71ba      	strb	r2, [r7, #6]
 8001038:	4619      	mov	r1, r3
 800103a:	4bb4      	ldr	r3, [pc, #720]	; (800130c <InitParams+0x2f4>)
 800103c:	4ab5      	ldr	r2, [pc, #724]	; (8001314 <InitParams+0x2fc>)
 800103e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_PowerSet;
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	71ba      	strb	r2, [r7, #6]
 8001048:	4619      	mov	r1, r3
 800104a:	4bb0      	ldr	r3, [pc, #704]	; (800130c <InitParams+0x2f4>)
 800104c:	4ab2      	ldr	r2, [pc, #712]	; (8001318 <InitParams+0x300>)
 800104e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_PowerMin;
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	71ba      	strb	r2, [r7, #6]
 8001058:	4619      	mov	r1, r3
 800105a:	4bac      	ldr	r3, [pc, #688]	; (800130c <InitParams+0x2f4>)
 800105c:	4aaf      	ldr	r2, [pc, #700]	; (800131c <InitParams+0x304>)
 800105e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_PowerMax;
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	71ba      	strb	r2, [r7, #6]
 8001068:	4619      	mov	r1, r3
 800106a:	4ba8      	ldr	r3, [pc, #672]	; (800130c <InitParams+0x2f4>)
 800106c:	4aac      	ldr	r2, [pc, #688]	; (8001320 <InitParams+0x308>)
 800106e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_PowerOnOff;
 8001072:	79bb      	ldrb	r3, [r7, #6]
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	71ba      	strb	r2, [r7, #6]
 8001078:	4619      	mov	r1, r3
 800107a:	4ba4      	ldr	r3, [pc, #656]	; (800130c <InitParams+0x2f4>)
 800107c:	4aa9      	ldr	r2, [pc, #676]	; (8001324 <InitParams+0x30c>)
 800107e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_24Vmeas;
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	71ba      	strb	r2, [r7, #6]
 8001088:	4619      	mov	r1, r3
 800108a:	4ba0      	ldr	r3, [pc, #640]	; (800130c <InitParams+0x2f4>)
 800108c:	4aa6      	ldr	r2, [pc, #664]	; (8001328 <InitParams+0x310>)
 800108e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_24Vcoeff;
 8001092:	79bb      	ldrb	r3, [r7, #6]
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	71ba      	strb	r2, [r7, #6]
 8001098:	4619      	mov	r1, r3
 800109a:	4b9c      	ldr	r3, [pc, #624]	; (800130c <InitParams+0x2f4>)
 800109c:	4aa3      	ldr	r2, [pc, #652]	; (800132c <InitParams+0x314>)
 800109e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_PowerMeas;
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	71ba      	strb	r2, [r7, #6]
 80010a8:	4619      	mov	r1, r3
 80010aa:	4b98      	ldr	r3, [pc, #608]	; (800130c <InitParams+0x2f4>)
 80010ac:	4aa0      	ldr	r2, [pc, #640]	; (8001330 <InitParams+0x318>)
 80010ae:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_PowerCoeff;
 80010b2:	79bb      	ldrb	r3, [r7, #6]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	71ba      	strb	r2, [r7, #6]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4b94      	ldr	r3, [pc, #592]	; (800130c <InitParams+0x2f4>)
 80010bc:	4a9d      	ldr	r2, [pc, #628]	; (8001334 <InitParams+0x31c>)
 80010be:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1A;
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	1c5a      	adds	r2, r3, #1
 80010c6:	71ba      	strb	r2, [r7, #6]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4b90      	ldr	r3, [pc, #576]	; (800130c <InitParams+0x2f4>)
 80010cc:	4a9a      	ldr	r2, [pc, #616]	; (8001338 <InitParams+0x320>)
 80010ce:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1B;
 80010d2:	79bb      	ldrb	r3, [r7, #6]
 80010d4:	1c5a      	adds	r2, r3, #1
 80010d6:	71ba      	strb	r2, [r7, #6]
 80010d8:	4619      	mov	r1, r3
 80010da:	4b8c      	ldr	r3, [pc, #560]	; (800130c <InitParams+0x2f4>)
 80010dc:	4a97      	ldr	r2, [pc, #604]	; (800133c <InitParams+0x324>)
 80010de:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2A;
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	71ba      	strb	r2, [r7, #6]
 80010e8:	4619      	mov	r1, r3
 80010ea:	4b88      	ldr	r3, [pc, #544]	; (800130c <InitParams+0x2f4>)
 80010ec:	4a94      	ldr	r2, [pc, #592]	; (8001340 <InitParams+0x328>)
 80010ee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2B;
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	71ba      	strb	r2, [r7, #6]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4b84      	ldr	r3, [pc, #528]	; (800130c <InitParams+0x2f4>)
 80010fc:	4a91      	ldr	r2, [pc, #580]	; (8001344 <InitParams+0x32c>)
 80010fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1A_Coeff;
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	71ba      	strb	r2, [r7, #6]
 8001108:	4619      	mov	r1, r3
 800110a:	4b80      	ldr	r3, [pc, #512]	; (800130c <InitParams+0x2f4>)
 800110c:	4a8e      	ldr	r2, [pc, #568]	; (8001348 <InitParams+0x330>)
 800110e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1B_Coeff;
 8001112:	79bb      	ldrb	r3, [r7, #6]
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	71ba      	strb	r2, [r7, #6]
 8001118:	4619      	mov	r1, r3
 800111a:	4b7c      	ldr	r3, [pc, #496]	; (800130c <InitParams+0x2f4>)
 800111c:	4a8b      	ldr	r2, [pc, #556]	; (800134c <InitParams+0x334>)
 800111e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2A_Coeff;
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	71ba      	strb	r2, [r7, #6]
 8001128:	4619      	mov	r1, r3
 800112a:	4b78      	ldr	r3, [pc, #480]	; (800130c <InitParams+0x2f4>)
 800112c:	4a88      	ldr	r2, [pc, #544]	; (8001350 <InitParams+0x338>)
 800112e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2B_Coeff;
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	71ba      	strb	r2, [r7, #6]
 8001138:	4619      	mov	r1, r3
 800113a:	4b74      	ldr	r3, [pc, #464]	; (800130c <InitParams+0x2f4>)
 800113c:	4a85      	ldr	r2, [pc, #532]	; (8001354 <InitParams+0x33c>)
 800113e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Temp1;
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	71ba      	strb	r2, [r7, #6]
 8001148:	4619      	mov	r1, r3
 800114a:	4b70      	ldr	r3, [pc, #448]	; (800130c <InitParams+0x2f4>)
 800114c:	4a82      	ldr	r2, [pc, #520]	; (8001358 <InitParams+0x340>)
 800114e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp2;
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	71ba      	strb	r2, [r7, #6]
 8001158:	4619      	mov	r1, r3
 800115a:	4b6c      	ldr	r3, [pc, #432]	; (800130c <InitParams+0x2f4>)
 800115c:	4a7f      	ldr	r2, [pc, #508]	; (800135c <InitParams+0x344>)
 800115e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp3;
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	71ba      	strb	r2, [r7, #6]
 8001168:	4619      	mov	r1, r3
 800116a:	4b68      	ldr	r3, [pc, #416]	; (800130c <InitParams+0x2f4>)
 800116c:	4a7c      	ldr	r2, [pc, #496]	; (8001360 <InitParams+0x348>)
 800116e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp4;
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	1c5a      	adds	r2, r3, #1
 8001176:	71ba      	strb	r2, [r7, #6]
 8001178:	4619      	mov	r1, r3
 800117a:	4b64      	ldr	r3, [pc, #400]	; (800130c <InitParams+0x2f4>)
 800117c:	4a79      	ldr	r2, [pc, #484]	; (8001364 <InitParams+0x34c>)
 800117e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp1_coeff;
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	71ba      	strb	r2, [r7, #6]
 8001188:	4619      	mov	r1, r3
 800118a:	4b60      	ldr	r3, [pc, #384]	; (800130c <InitParams+0x2f4>)
 800118c:	4a76      	ldr	r2, [pc, #472]	; (8001368 <InitParams+0x350>)
 800118e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp2_coeff;
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	71ba      	strb	r2, [r7, #6]
 8001198:	4619      	mov	r1, r3
 800119a:	4b5c      	ldr	r3, [pc, #368]	; (800130c <InitParams+0x2f4>)
 800119c:	4a73      	ldr	r2, [pc, #460]	; (800136c <InitParams+0x354>)
 800119e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp3_coeff;
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	71ba      	strb	r2, [r7, #6]
 80011a8:	4619      	mov	r1, r3
 80011aa:	4b58      	ldr	r3, [pc, #352]	; (800130c <InitParams+0x2f4>)
 80011ac:	4a70      	ldr	r2, [pc, #448]	; (8001370 <InitParams+0x358>)
 80011ae:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp4_coeff;
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	71ba      	strb	r2, [r7, #6]
 80011b8:	4619      	mov	r1, r3
 80011ba:	4b54      	ldr	r3, [pc, #336]	; (800130c <InitParams+0x2f4>)
 80011bc:	4a6d      	ldr	r2, [pc, #436]	; (8001374 <InitParams+0x35c>)
 80011be:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &LoadSelect1;
 80011c2:	79bb      	ldrb	r3, [r7, #6]
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	71ba      	strb	r2, [r7, #6]
 80011c8:	4619      	mov	r1, r3
 80011ca:	4b50      	ldr	r3, [pc, #320]	; (800130c <InitParams+0x2f4>)
 80011cc:	4a6a      	ldr	r2, [pc, #424]	; (8001378 <InitParams+0x360>)
 80011ce:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &LoadSelect2;
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	71ba      	strb	r2, [r7, #6]
 80011d8:	4619      	mov	r1, r3
 80011da:	4b4c      	ldr	r3, [pc, #304]	; (800130c <InitParams+0x2f4>)
 80011dc:	4a67      	ldr	r2, [pc, #412]	; (800137c <InitParams+0x364>)
 80011de:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &ModeSelect1;
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	1c5a      	adds	r2, r3, #1
 80011e6:	71ba      	strb	r2, [r7, #6]
 80011e8:	4619      	mov	r1, r3
 80011ea:	4b48      	ldr	r3, [pc, #288]	; (800130c <InitParams+0x2f4>)
 80011ec:	4a64      	ldr	r2, [pc, #400]	; (8001380 <InitParams+0x368>)
 80011ee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &ModeSelect2;
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	71ba      	strb	r2, [r7, #6]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4b44      	ldr	r3, [pc, #272]	; (800130c <InitParams+0x2f4>)
 80011fc:	4a61      	ldr	r2, [pc, #388]	; (8001384 <InitParams+0x36c>)
 80011fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Ch1_OnOff;
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	71ba      	strb	r2, [r7, #6]
 8001208:	4619      	mov	r1, r3
 800120a:	4b40      	ldr	r3, [pc, #256]	; (800130c <InitParams+0x2f4>)
 800120c:	4a5e      	ldr	r2, [pc, #376]	; (8001388 <InitParams+0x370>)
 800120e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Ch2_OnOff;
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	71ba      	strb	r2, [r7, #6]
 8001218:	4619      	mov	r1, r3
 800121a:	4b3c      	ldr	r3, [pc, #240]	; (800130c <InitParams+0x2f4>)
 800121c:	4a5b      	ldr	r2, [pc, #364]	; (800138c <InitParams+0x374>)
 800121e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &SourceSelect1;
 8001222:	79bb      	ldrb	r3, [r7, #6]
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	71ba      	strb	r2, [r7, #6]
 8001228:	4619      	mov	r1, r3
 800122a:	4b38      	ldr	r3, [pc, #224]	; (800130c <InitParams+0x2f4>)
 800122c:	4a58      	ldr	r2, [pc, #352]	; (8001390 <InitParams+0x378>)
 800122e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &SourceSelect2;
 8001232:	79bb      	ldrb	r3, [r7, #6]
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	71ba      	strb	r2, [r7, #6]
 8001238:	4619      	mov	r1, r3
 800123a:	4b34      	ldr	r3, [pc, #208]	; (800130c <InitParams+0x2f4>)
 800123c:	4a55      	ldr	r2, [pc, #340]	; (8001394 <InitParams+0x37c>)
 800123e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Pcoeff1Temp;
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	71ba      	strb	r2, [r7, #6]
 8001248:	4619      	mov	r1, r3
 800124a:	4b30      	ldr	r3, [pc, #192]	; (800130c <InitParams+0x2f4>)
 800124c:	4a52      	ldr	r2, [pc, #328]	; (8001398 <InitParams+0x380>)
 800124e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Pcoeff2Temp;
 8001252:	79bb      	ldrb	r3, [r7, #6]
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	71ba      	strb	r2, [r7, #6]
 8001258:	4619      	mov	r1, r3
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <InitParams+0x2f4>)
 800125c:	4a4f      	ldr	r2, [pc, #316]	; (800139c <InitParams+0x384>)
 800125e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Icoeff1Temp;
 8001262:	79bb      	ldrb	r3, [r7, #6]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	71ba      	strb	r2, [r7, #6]
 8001268:	4619      	mov	r1, r3
 800126a:	4b28      	ldr	r3, [pc, #160]	; (800130c <InitParams+0x2f4>)
 800126c:	4a4c      	ldr	r2, [pc, #304]	; (80013a0 <InitParams+0x388>)
 800126e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Icoeff2Temp;
 8001272:	79bb      	ldrb	r3, [r7, #6]
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	71ba      	strb	r2, [r7, #6]
 8001278:	4619      	mov	r1, r3
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <InitParams+0x2f4>)
 800127c:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <InitParams+0x38c>)
 800127e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Dcoeff1Temp;
 8001282:	79bb      	ldrb	r3, [r7, #6]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	71ba      	strb	r2, [r7, #6]
 8001288:	4619      	mov	r1, r3
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <InitParams+0x2f4>)
 800128c:	4a46      	ldr	r2, [pc, #280]	; (80013a8 <InitParams+0x390>)
 800128e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Dcoeff2Temp;
 8001292:	79bb      	ldrb	r3, [r7, #6]
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	71ba      	strb	r2, [r7, #6]
 8001298:	4619      	mov	r1, r3
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <InitParams+0x2f4>)
 800129c:	4a43      	ldr	r2, [pc, #268]	; (80013ac <InitParams+0x394>)
 800129e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Pcoeff1Freq;
 80012a2:	79bb      	ldrb	r3, [r7, #6]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	71ba      	strb	r2, [r7, #6]
 80012a8:	4619      	mov	r1, r3
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <InitParams+0x2f4>)
 80012ac:	4a40      	ldr	r2, [pc, #256]	; (80013b0 <InitParams+0x398>)
 80012ae:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Pcoeff2Freq;
 80012b2:	79bb      	ldrb	r3, [r7, #6]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	71ba      	strb	r2, [r7, #6]
 80012b8:	4619      	mov	r1, r3
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <InitParams+0x2f4>)
 80012bc:	4a3d      	ldr	r2, [pc, #244]	; (80013b4 <InitParams+0x39c>)
 80012be:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Icoeff1Freq;
 80012c2:	79bb      	ldrb	r3, [r7, #6]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	71ba      	strb	r2, [r7, #6]
 80012c8:	4619      	mov	r1, r3
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <InitParams+0x2f4>)
 80012cc:	4a3a      	ldr	r2, [pc, #232]	; (80013b8 <InitParams+0x3a0>)
 80012ce:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Icoeff2Freq;
 80012d2:	79bb      	ldrb	r3, [r7, #6]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	71ba      	strb	r2, [r7, #6]
 80012d8:	4619      	mov	r1, r3
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <InitParams+0x2f4>)
 80012dc:	4a37      	ldr	r2, [pc, #220]	; (80013bc <InitParams+0x3a4>)
 80012de:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Dcoeff1Freq;
 80012e2:	79bb      	ldrb	r3, [r7, #6]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	71ba      	strb	r2, [r7, #6]
 80012e8:	4619      	mov	r1, r3
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <InitParams+0x2f4>)
 80012ec:	4a34      	ldr	r2, [pc, #208]	; (80013c0 <InitParams+0x3a8>)
 80012ee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Dcoeff2Freq;
 80012f2:	79bb      	ldrb	r3, [r7, #6]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	71ba      	strb	r2, [r7, #6]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <InitParams+0x2f4>)
 80012fc:	4a31      	ldr	r2, [pc, #196]	; (80013c4 <InitParams+0x3ac>)
 80012fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &I1Set;
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	71ba      	strb	r2, [r7, #6]
 8001308:	4619      	mov	r1, r3
 800130a:	e05d      	b.n	80013c8 <InitParams+0x3b0>
 800130c:	20001160 	.word	0x20001160
 8001310:	20000020 	.word	0x20000020
 8001314:	2000005c 	.word	0x2000005c
 8001318:	20000098 	.word	0x20000098
 800131c:	200000d4 	.word	0x200000d4
 8001320:	20000110 	.word	0x20000110
 8001324:	2000014c 	.word	0x2000014c
 8001328:	20000188 	.word	0x20000188
 800132c:	200001c4 	.word	0x200001c4
 8001330:	20000200 	.word	0x20000200
 8001334:	2000023c 	.word	0x2000023c
 8001338:	20000278 	.word	0x20000278
 800133c:	200002b4 	.word	0x200002b4
 8001340:	200002f0 	.word	0x200002f0
 8001344:	2000032c 	.word	0x2000032c
 8001348:	20000368 	.word	0x20000368
 800134c:	200003a4 	.word	0x200003a4
 8001350:	200003e0 	.word	0x200003e0
 8001354:	2000041c 	.word	0x2000041c
 8001358:	20000458 	.word	0x20000458
 800135c:	20000494 	.word	0x20000494
 8001360:	200004d0 	.word	0x200004d0
 8001364:	2000050c 	.word	0x2000050c
 8001368:	20000548 	.word	0x20000548
 800136c:	20000584 	.word	0x20000584
 8001370:	200005c0 	.word	0x200005c0
 8001374:	200005fc 	.word	0x200005fc
 8001378:	20000638 	.word	0x20000638
 800137c:	20000674 	.word	0x20000674
 8001380:	200006b0 	.word	0x200006b0
 8001384:	200006ec 	.word	0x200006ec
 8001388:	20000728 	.word	0x20000728
 800138c:	20000764 	.word	0x20000764
 8001390:	200007a0 	.word	0x200007a0
 8001394:	200007dc 	.word	0x200007dc
 8001398:	20000818 	.word	0x20000818
 800139c:	20000854 	.word	0x20000854
 80013a0:	20000890 	.word	0x20000890
 80013a4:	200008cc 	.word	0x200008cc
 80013a8:	20000908 	.word	0x20000908
 80013ac:	20000944 	.word	0x20000944
 80013b0:	20000980 	.word	0x20000980
 80013b4:	200009bc 	.word	0x200009bc
 80013b8:	200009f8 	.word	0x200009f8
 80013bc:	20000a34 	.word	0x20000a34
 80013c0:	20000a70 	.word	0x20000a70
 80013c4:	20000aac 	.word	0x20000aac
 80013c8:	4b47      	ldr	r3, [pc, #284]	; (80014e8 <InitParams+0x4d0>)
 80013ca:	4a48      	ldr	r2, [pc, #288]	; (80014ec <InitParams+0x4d4>)
 80013cc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I2Set;
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	71ba      	strb	r2, [r7, #6]
 80013d6:	4619      	mov	r1, r3
 80013d8:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <InitParams+0x4d0>)
 80013da:	4a45      	ldr	r2, [pc, #276]	; (80014f0 <InitParams+0x4d8>)
 80013dc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Gate1A_OnOff;
 80013e0:	79bb      	ldrb	r3, [r7, #6]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	71ba      	strb	r2, [r7, #6]
 80013e6:	4619      	mov	r1, r3
 80013e8:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <InitParams+0x4d0>)
 80013ea:	4a42      	ldr	r2, [pc, #264]	; (80014f4 <InitParams+0x4dc>)
 80013ec:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Gate1B_OnOff;
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	71ba      	strb	r2, [r7, #6]
 80013f6:	4619      	mov	r1, r3
 80013f8:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <InitParams+0x4d0>)
 80013fa:	4a3f      	ldr	r2, [pc, #252]	; (80014f8 <InitParams+0x4e0>)
 80013fc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Gate2A_OnOff;
 8001400:	79bb      	ldrb	r3, [r7, #6]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	71ba      	strb	r2, [r7, #6]
 8001406:	4619      	mov	r1, r3
 8001408:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <InitParams+0x4d0>)
 800140a:	4a3c      	ldr	r2, [pc, #240]	; (80014fc <InitParams+0x4e4>)
 800140c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Gate2B_OnOff;
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	71ba      	strb	r2, [r7, #6]
 8001416:	4619      	mov	r1, r3
 8001418:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <InitParams+0x4d0>)
 800141a:	4a39      	ldr	r2, [pc, #228]	; (8001500 <InitParams+0x4e8>)
 800141c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &GateH1A;
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	71ba      	strb	r2, [r7, #6]
 8001426:	4619      	mov	r1, r3
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <InitParams+0x4d0>)
 800142a:	4a36      	ldr	r2, [pc, #216]	; (8001504 <InitParams+0x4ec>)
 800142c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &GateH1B;
 8001430:	79bb      	ldrb	r3, [r7, #6]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	71ba      	strb	r2, [r7, #6]
 8001436:	4619      	mov	r1, r3
 8001438:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <InitParams+0x4d0>)
 800143a:	4a33      	ldr	r2, [pc, #204]	; (8001508 <InitParams+0x4f0>)
 800143c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &GateH2A;
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	71ba      	strb	r2, [r7, #6]
 8001446:	4619      	mov	r1, r3
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <InitParams+0x4d0>)
 800144a:	4a30      	ldr	r2, [pc, #192]	; (800150c <InitParams+0x4f4>)
 800144c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &GateH2B;
 8001450:	79bb      	ldrb	r3, [r7, #6]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	71ba      	strb	r2, [r7, #6]
 8001456:	4619      	mov	r1, r3
 8001458:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <InitParams+0x4d0>)
 800145a:	4a2d      	ldr	r2, [pc, #180]	; (8001510 <InitParams+0x4f8>)
 800145c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &PWM_CH1;
 8001460:	79bb      	ldrb	r3, [r7, #6]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	71ba      	strb	r2, [r7, #6]
 8001466:	4619      	mov	r1, r3
 8001468:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <InitParams+0x4d0>)
 800146a:	4a2a      	ldr	r2, [pc, #168]	; (8001514 <InitParams+0x4fc>)
 800146c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &PWM_CH2;
 8001470:	79bb      	ldrb	r3, [r7, #6]
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	71ba      	strb	r2, [r7, #6]
 8001476:	4619      	mov	r1, r3
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <InitParams+0x4d0>)
 800147a:	4a27      	ldr	r2, [pc, #156]	; (8001518 <InitParams+0x500>)
 800147c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &CH1_Polarity;
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	71ba      	strb	r2, [r7, #6]
 8001486:	4619      	mov	r1, r3
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <InitParams+0x4d0>)
 800148a:	4a24      	ldr	r2, [pc, #144]	; (800151c <InitParams+0x504>)
 800148c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &CH2_Polarity;
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	71ba      	strb	r2, [r7, #6]
 8001496:	4619      	mov	r1, r3
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <InitParams+0x4d0>)
 800149a:	4a21      	ldr	r2, [pc, #132]	; (8001520 <InitParams+0x508>)
 800149c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Freq;
 80014a0:	79bb      	ldrb	r3, [r7, #6]
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	71ba      	strb	r2, [r7, #6]
 80014a6:	4619      	mov	r1, r3
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <InitParams+0x4d0>)
 80014aa:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <InitParams+0x50c>)
 80014ac:	f843 2021 	str.w	r2, [r3, r1, lsl #2]


	for(uint8_t j = 0; j < PARAMS_COUNT; j++) {
 80014b0:	2300      	movs	r3, #0
 80014b2:	71fb      	strb	r3, [r7, #7]
 80014b4:	e00d      	b.n	80014d2 <InitParams+0x4ba>
		paramTable[params[j]->commandNumber] = j+1;
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <InitParams+0x4d0>)
 80014ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	3301      	adds	r3, #1
 80014c6:	b2d9      	uxtb	r1, r3
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <InitParams+0x510>)
 80014ca:	5499      	strb	r1, [r3, r2]
	for(uint8_t j = 0; j < PARAMS_COUNT; j++) {
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	3301      	adds	r3, #1
 80014d0:	71fb      	strb	r3, [r7, #7]
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b63      	cmp	r3, #99	; 0x63
 80014d6:	d9ee      	bls.n	80014b6 <InitParams+0x49e>
	}
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20001160 	.word	0x20001160
 80014ec:	20000ae8 	.word	0x20000ae8
 80014f0:	20000b24 	.word	0x20000b24
 80014f4:	20000b60 	.word	0x20000b60
 80014f8:	20000b9c 	.word	0x20000b9c
 80014fc:	20000bd8 	.word	0x20000bd8
 8001500:	20000c14 	.word	0x20000c14
 8001504:	20000c50 	.word	0x20000c50
 8001508:	20000c8c 	.word	0x20000c8c
 800150c:	20000cc8 	.word	0x20000cc8
 8001510:	20000d04 	.word	0x20000d04
 8001514:	20000d40 	.word	0x20000d40
 8001518:	20000d7c 	.word	0x20000d7c
 800151c:	20000db8 	.word	0x20000db8
 8001520:	20000df4 	.word	0x20000df4
 8001524:	20000e30 	.word	0x20000e30
 8001528:	200012f0 	.word	0x200012f0
 800152c:	00000000 	.word	0x00000000

08001530 <setU_PowerSet>:

bool setU_PowerSet(valueTypes value) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
    if(value.val_float >= U_PowerSet.valueAbsMax.val_float ||
 8001538:	ed97 7a01 	vldr	s14, [r7, #4]
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <setU_PowerSet+0xa8>)
 800153e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154a:	da09      	bge.n	8001560 <setU_PowerSet+0x30>
       value.val_float <= U_PowerSet.valueAbsMin.val_float) {
 800154c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001550:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <setU_PowerSet+0xa8>)
 8001552:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= U_PowerSet.valueAbsMax.val_float ||
 8001556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155e:	d801      	bhi.n	8001564 <setU_PowerSet+0x34>
       return false;
 8001560:	2300      	movs	r3, #0
 8001562:	e02c      	b.n	80015be <setU_PowerSet+0x8e>
    } else {
    	//Set_U_Heater PWM (10 kHz, 16800)
    	extern TIM_HandleTypeDef htim8;
    	int16_t counterSet = 16800*(1.20 - 0.05 * value.val_float);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe fffe 	bl	8000568 <__aeabi_f2d>
 800156c:	a316      	add	r3, pc, #88	; (adr r3, 80015c8 <setU_PowerSet+0x98>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7ff f851 	bl	8000618 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	f04f 3033 	mov.w	r0, #858993459	; 0x33333333
 800157e:	4917      	ldr	r1, [pc, #92]	; (80015dc <setU_PowerSet+0xac>)
 8001580:	f7fe fe92 	bl	80002a8 <__aeabi_dsub>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	a310      	add	r3, pc, #64	; (adr r3, 80015d0 <setU_PowerSet+0xa0>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7ff f841 	bl	8000618 <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f7ff faeb 	bl	8000b78 <__aeabi_d2iz>
 80015a2:	4603      	mov	r3, r0
 80015a4:	81fb      	strh	r3, [r7, #14]
    	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, counterSet > 0 ? counterSet : 0);
 80015a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <setU_PowerSet+0xb0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	63da      	str	r2, [r3, #60]	; 0x3c
        U_PowerSet.value = value;
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <setU_PowerSet+0xa8>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80015bc:	2301      	movs	r3, #1
    }
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	9999999a 	.word	0x9999999a
 80015cc:	3fa99999 	.word	0x3fa99999
 80015d0:	00000000 	.word	0x00000000
 80015d4:	40d06800 	.word	0x40d06800
 80015d8:	20000098 	.word	0x20000098
 80015dc:	3ff33333 	.word	0x3ff33333
 80015e0:	20001bb0 	.word	0x20001bb0

080015e4 <getU_PowerSet>:
valueTypes getU_PowerSet(void) {
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
    return U_PowerSet.value;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <getU_PowerSet+0x14>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000098 	.word	0x20000098

080015fc <setU_PowerOnOff>:

bool setU_PowerOnOff(valueTypes state) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Disable_DC_DC_GPIO_Port, Disable_DC_DC_Pin, state.val_bool);
 8001604:	793b      	ldrb	r3, [r7, #4]
 8001606:	461a      	mov	r2, r3
 8001608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <setU_PowerOnOff+0x28>)
 800160e:	f005 fd61 	bl	80070d4 <HAL_GPIO_WritePin>
    U_PowerOnOff.value = state;
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <setU_PowerOnOff+0x2c>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001618:	2301      	movs	r3, #1
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40020800 	.word	0x40020800
 8001628:	2000014c 	.word	0x2000014c

0800162c <getU_PowerOnOff>:
valueTypes getU_PowerOnOff(void) {
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
    return U_PowerOnOff.value;
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <getU_PowerOnOff+0x14>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	2000014c 	.word	0x2000014c

08001644 <setU_PowerMin>:

bool setU_PowerMin(valueTypes value) {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	if(value.val_float >= U_PowerMin.valueAbsMax.val_float ||
 800164c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <setU_PowerMin+0x48>)
 8001652:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165e:	da09      	bge.n	8001674 <setU_PowerMin+0x30>
	   value.val_float <= U_PowerMin.valueAbsMin.val_float) {
 8001660:	ed97 7a01 	vldr	s14, [r7, #4]
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <setU_PowerMin+0x48>)
 8001666:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= U_PowerMin.valueAbsMax.val_float ||
 800166a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001672:	d801      	bhi.n	8001678 <setU_PowerMin+0x34>
	   return false;
 8001674:	2300      	movs	r3, #0
 8001676:	e003      	b.n	8001680 <setU_PowerMin+0x3c>
	} else {
		U_PowerMin.value = value;
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <setU_PowerMin+0x48>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 800167e:	2301      	movs	r3, #1
	}
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	200000d4 	.word	0x200000d4

08001690 <getU_PowerMin>:
valueTypes getU_PowerMin(void) {
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
    return U_PowerMin.value;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <getU_PowerMin+0x14>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	200000d4 	.word	0x200000d4

080016a8 <setU_PowerMax>:

bool setU_PowerMax(valueTypes value) {
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	if(value.val_float >= U_PowerMax.valueAbsMax.val_float ||
 80016b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <setU_PowerMax+0x48>)
 80016b6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80016ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	da09      	bge.n	80016d8 <setU_PowerMax+0x30>
	   value.val_float <= U_PowerMax.valueAbsMin.val_float) {
 80016c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <setU_PowerMax+0x48>)
 80016ca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= U_PowerMax.valueAbsMax.val_float ||
 80016ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d6:	d801      	bhi.n	80016dc <setU_PowerMax+0x34>
	   return false;
 80016d8:	2300      	movs	r3, #0
 80016da:	e003      	b.n	80016e4 <setU_PowerMax+0x3c>
	} else {
		U_PowerMax.value = value;
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <setU_PowerMax+0x48>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 80016e2:	2301      	movs	r3, #1
	}
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	20000110 	.word	0x20000110

080016f4 <getU_PowerMax>:
valueTypes getU_PowerMax(void) {
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
    return U_PowerMax.value;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <getU_PowerMax+0x14>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000110 	.word	0x20000110

0800170c <setU_24Vmeas>:


bool setU_24Vmeas(valueTypes value) {
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
    U_24Vmeas.value = value;
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <setU_24Vmeas+0x1c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	20000188 	.word	0x20000188

0800172c <getU_24Vmeas>:
valueTypes getU_24Vmeas() {
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
    return U_24Vmeas.value;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <getU_24Vmeas+0x14>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000188 	.word	0x20000188

08001744 <setU_24Vcoeff>:

bool setU_24Vcoeff(valueTypes value) {
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
    if(value.val_float >= U_24Vcoeff.valueAbsMax.val_float ||
 800174c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <setU_24Vcoeff+0x48>)
 8001752:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	da09      	bge.n	8001774 <setU_24Vcoeff+0x30>
       value.val_float <= U_24Vcoeff.valueAbsMin.val_float) {
 8001760:	ed97 7a01 	vldr	s14, [r7, #4]
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <setU_24Vcoeff+0x48>)
 8001766:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= U_24Vcoeff.valueAbsMax.val_float ||
 800176a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	d801      	bhi.n	8001778 <setU_24Vcoeff+0x34>
       return false;
 8001774:	2300      	movs	r3, #0
 8001776:	e003      	b.n	8001780 <setU_24Vcoeff+0x3c>
    } else {
        U_24Vcoeff.value = value;
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <setU_24Vcoeff+0x48>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800177e:	2301      	movs	r3, #1
    }
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	200001c4 	.word	0x200001c4

08001790 <getU_24Vcoeff>:

valueTypes getU_24Vcoeff(void) {
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
    return U_24Vcoeff.value;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <getU_24Vcoeff+0x14>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	200001c4 	.word	0x200001c4

080017a8 <setU_PowerMeas>:


bool setU_PowerMeas(valueTypes value) {
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
    U_PowerMeas.value = value;
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <setU_PowerMeas+0x1c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	20000200 	.word	0x20000200

080017c8 <getU_PowerMeas>:
valueTypes getU_PowerMeas() {
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
    return U_PowerMeas.value;
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <getU_PowerMeas+0x14>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000200 	.word	0x20000200

080017e0 <setU_PowerCoeff>:

bool setU_PowerCoeff(valueTypes value) {
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    if(value.val_float >= U_PowerCoeff.valueAbsMax.val_float ||
 80017e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <setU_PowerCoeff+0x48>)
 80017ee:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80017f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	da09      	bge.n	8001810 <setU_PowerCoeff+0x30>
       value.val_float <= U_PowerCoeff.valueAbsMin.val_float) {
 80017fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <setU_PowerCoeff+0x48>)
 8001802:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= U_PowerCoeff.valueAbsMax.val_float ||
 8001806:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180e:	d801      	bhi.n	8001814 <setU_PowerCoeff+0x34>
       return false;
 8001810:	2300      	movs	r3, #0
 8001812:	e003      	b.n	800181c <setU_PowerCoeff+0x3c>
    } else {
       U_PowerCoeff.value = value;
 8001814:	4a04      	ldr	r2, [pc, #16]	; (8001828 <setU_PowerCoeff+0x48>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
       return true;
 800181a:	2301      	movs	r3, #1
    }
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	2000023c 	.word	0x2000023c

0800182c <getU_PowerCoeff>:

valueTypes getU_PowerCoeff(void) {
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
    return U_PowerCoeff.value;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <getU_PowerCoeff+0x14>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	2000023c 	.word	0x2000023c

08001844 <setI_1A>:

bool setI_1A(valueTypes value) {
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
    I_1A.value = value;
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <setI_1A+0x1c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	20000278 	.word	0x20000278

08001864 <getI_1A>:
valueTypes getI_1A() {
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
    return I_1A.value;
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <getI_1A+0x14>)
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000278 	.word	0x20000278

0800187c <setI_1B>:
bool setI_1B(valueTypes value) {
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
    I_1B.value = value;
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <setI_1B+0x1c>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	200002b4 	.word	0x200002b4

0800189c <getI_1B>:
valueTypes getI_1B() {
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
    return I_1B.value;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <getI_1B+0x14>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	200002b4 	.word	0x200002b4

080018b4 <setI_2A>:
bool setI_2A(valueTypes value) {
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    I_2A.value = value;
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <setI_2A+0x1c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	200002f0 	.word	0x200002f0

080018d4 <getI_2A>:
valueTypes getI_2A() {
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
    return I_2A.value;
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <getI_2A+0x14>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	200002f0 	.word	0x200002f0

080018ec <setI_2B>:
bool setI_2B(valueTypes value) {
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
    I_2B.value = value;
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <setI_2B+0x1c>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	2000032c 	.word	0x2000032c

0800190c <getI_2B>:
valueTypes getI_2B() {
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
    return I_2B.value;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <getI_2B+0x14>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	2000032c 	.word	0x2000032c

08001924 <setI_1A_Coeff>:

bool setI_1A_Coeff(valueTypes value) {
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I_1A_Coeff.valueAbsMax.val_float ||
 800192c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <setI_1A_Coeff+0x48>)
 8001932:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001936:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193e:	da09      	bge.n	8001954 <setI_1A_Coeff+0x30>
       value.val_float <= I_1A_Coeff.valueAbsMin.val_float) {
 8001940:	ed97 7a01 	vldr	s14, [r7, #4]
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <setI_1A_Coeff+0x48>)
 8001946:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I_1A_Coeff.valueAbsMax.val_float ||
 800194a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	d801      	bhi.n	8001958 <setI_1A_Coeff+0x34>
       return false;
 8001954:	2300      	movs	r3, #0
 8001956:	e003      	b.n	8001960 <setI_1A_Coeff+0x3c>
    } else {
        I_1A_Coeff.value = value;
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <setI_1A_Coeff+0x48>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800195e:	2301      	movs	r3, #1
    }
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	20000368 	.word	0x20000368

08001970 <getI_1A_Coeff>:
valueTypes getI_1A_Coeff(void) {
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
    return I_1A_Coeff.value;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <getI_1A_Coeff+0x14>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000368 	.word	0x20000368

08001988 <setI_1B_Coeff>:
bool setI_1B_Coeff(valueTypes value) {
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I_1B_Coeff.valueAbsMax.val_float ||
 8001990:	ed97 7a01 	vldr	s14, [r7, #4]
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <setI_1B_Coeff+0x48>)
 8001996:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800199a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	da09      	bge.n	80019b8 <setI_1B_Coeff+0x30>
       value.val_float <= I_1B_Coeff.valueAbsMin.val_float) {
 80019a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <setI_1B_Coeff+0x48>)
 80019aa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I_1B_Coeff.valueAbsMax.val_float ||
 80019ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b6:	d801      	bhi.n	80019bc <setI_1B_Coeff+0x34>
       return false;
 80019b8:	2300      	movs	r3, #0
 80019ba:	e003      	b.n	80019c4 <setI_1B_Coeff+0x3c>
    } else {
        I_1B_Coeff.value = value;
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <setI_1B_Coeff+0x48>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80019c2:	2301      	movs	r3, #1
    }
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	200003a4 	.word	0x200003a4

080019d4 <getI_1B_Coeff>:
valueTypes getI_1B_Coeff(void) {
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
    return I_1B_Coeff.value;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <getI_1B_Coeff+0x14>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	200003a4 	.word	0x200003a4

080019ec <setI_2A_Coeff>:
bool setI_2A_Coeff(valueTypes value) {
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I_2A_Coeff.valueAbsMax.val_float ||
 80019f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <setI_2A_Coeff+0x48>)
 80019fa:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80019fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	da09      	bge.n	8001a1c <setI_2A_Coeff+0x30>
       value.val_float <= I_2A_Coeff.valueAbsMin.val_float) {
 8001a08:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <setI_2A_Coeff+0x48>)
 8001a0e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I_2A_Coeff.valueAbsMax.val_float ||
 8001a12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1a:	d801      	bhi.n	8001a20 <setI_2A_Coeff+0x34>
       return false;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e003      	b.n	8001a28 <setI_2A_Coeff+0x3c>
    } else {
        I_2A_Coeff.value = value;
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <setI_2A_Coeff+0x48>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001a26:	2301      	movs	r3, #1
    }
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	200003e0 	.word	0x200003e0

08001a38 <getI_2A_Coeff>:
valueTypes getI_2A_Coeff(void) {
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
    return I_2A_Coeff.value;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <getI_2A_Coeff+0x14>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	200003e0 	.word	0x200003e0

08001a50 <setI_2B_Coeff>:
bool setI_2B_Coeff(valueTypes value) {
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I_2B_Coeff.valueAbsMax.val_float ||
 8001a58:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <setI_2B_Coeff+0x48>)
 8001a5e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	da09      	bge.n	8001a80 <setI_2B_Coeff+0x30>
       value.val_float <= I_2B_Coeff.valueAbsMin.val_float) {
 8001a6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <setI_2B_Coeff+0x48>)
 8001a72:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I_2B_Coeff.valueAbsMax.val_float ||
 8001a76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7e:	d801      	bhi.n	8001a84 <setI_2B_Coeff+0x34>
       return false;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e003      	b.n	8001a8c <setI_2B_Coeff+0x3c>
    } else {
        I_2B_Coeff.value = value;
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <setI_2B_Coeff+0x48>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001a8a:	2301      	movs	r3, #1
    }
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	2000041c 	.word	0x2000041c

08001a9c <getI_2B_Coeff>:
valueTypes getI_2B_Coeff(void) {
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
    return I_2B_Coeff.value;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <getI_2B_Coeff+0x14>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	2000041c 	.word	0x2000041c

08001ab4 <setTemp1>:


bool setTemp1(valueTypes value) {
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    Temp1.value = value;
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <setTemp1+0x1c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	20000458 	.word	0x20000458

08001ad4 <getTemp1>:
valueTypes getTemp1() {
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
    return Temp1.value;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <getTemp1+0x14>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000458 	.word	0x20000458

08001aec <setTemp2>:
bool setTemp2(valueTypes value) {
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
    Temp2.value = value;
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <setTemp2+0x1c>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	20000494 	.word	0x20000494

08001b0c <getTemp2>:
valueTypes getTemp2() {
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
    return Temp2.value;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <getTemp2+0x14>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000494 	.word	0x20000494

08001b24 <setTemp3>:
bool setTemp3(valueTypes value) {
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
    Temp3.value = value;
 8001b2c:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <setTemp3+0x1c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	200004d0 	.word	0x200004d0

08001b44 <getTemp3>:
valueTypes getTemp3() {
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
    return Temp3.value;
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <getTemp3+0x14>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	200004d0 	.word	0x200004d0

08001b5c <setTemp4>:
bool setTemp4(valueTypes value) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    Temp4.value = value;
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <setTemp4+0x1c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	2000050c 	.word	0x2000050c

08001b7c <getTemp4>:
valueTypes getTemp4() {
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
    return Temp4.value;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <getTemp4+0x14>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	2000050c 	.word	0x2000050c

08001b94 <setTemp1_coeff>:

bool setTemp1_coeff(valueTypes value) {
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Temp1_coeff.valueAbsMax.val_float ||
 8001b9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <setTemp1_coeff+0x48>)
 8001ba2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001ba6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bae:	da09      	bge.n	8001bc4 <setTemp1_coeff+0x30>
       value.val_float <= Temp1_coeff.valueAbsMin.val_float) {
 8001bb0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <setTemp1_coeff+0x48>)
 8001bb6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Temp1_coeff.valueAbsMax.val_float ||
 8001bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc2:	d801      	bhi.n	8001bc8 <setTemp1_coeff+0x34>
       return false;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e003      	b.n	8001bd0 <setTemp1_coeff+0x3c>
    } else {
        Temp1_coeff.value = value;
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <setTemp1_coeff+0x48>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001bce:	2301      	movs	r3, #1
    }
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	20000548 	.word	0x20000548

08001be0 <getTemp1_coeff>:
valueTypes getTemp1_coeff(void) {
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
    return Temp1_coeff.value;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <getTemp1_coeff+0x14>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000548 	.word	0x20000548

08001bf8 <setTemp2_coeff>:
bool setTemp2_coeff(valueTypes value) {
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Temp2_coeff.valueAbsMax.val_float ||
 8001c00:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c04:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <setTemp2_coeff+0x48>)
 8001c06:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001c0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c12:	da09      	bge.n	8001c28 <setTemp2_coeff+0x30>
       value.val_float <= Temp2_coeff.valueAbsMin.val_float) {
 8001c14:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <setTemp2_coeff+0x48>)
 8001c1a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Temp2_coeff.valueAbsMax.val_float ||
 8001c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c26:	d801      	bhi.n	8001c2c <setTemp2_coeff+0x34>
       return false;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e003      	b.n	8001c34 <setTemp2_coeff+0x3c>
    } else {
        Temp2_coeff.value = value;
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <setTemp2_coeff+0x48>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001c32:	2301      	movs	r3, #1
    }
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	20000584 	.word	0x20000584

08001c44 <getTemp2_coeff>:
valueTypes getTemp2_coeff(void) {
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
    return Temp2_coeff.value;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <getTemp2_coeff+0x14>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000584 	.word	0x20000584

08001c5c <setTemp3_coeff>:
bool setTemp3_coeff(valueTypes value) {
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Temp3_coeff.valueAbsMax.val_float ||
 8001c64:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c68:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <setTemp3_coeff+0x48>)
 8001c6a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001c6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c76:	da09      	bge.n	8001c8c <setTemp3_coeff+0x30>
       value.val_float <= Temp3_coeff.valueAbsMin.val_float) {
 8001c78:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <setTemp3_coeff+0x48>)
 8001c7e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Temp3_coeff.valueAbsMax.val_float ||
 8001c82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	d801      	bhi.n	8001c90 <setTemp3_coeff+0x34>
       return false;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e003      	b.n	8001c98 <setTemp3_coeff+0x3c>
    } else {
        Temp3_coeff.value = value;
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <setTemp3_coeff+0x48>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001c96:	2301      	movs	r3, #1
    }
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	200005c0 	.word	0x200005c0

08001ca8 <getTemp3_coeff>:
valueTypes getTemp3_coeff(void) {
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
    return Temp3_coeff.value;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <getTemp3_coeff+0x14>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	200005c0 	.word	0x200005c0

08001cc0 <setTemp4_coeff>:
bool setTemp4_coeff(valueTypes value) {
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Temp4_coeff.valueAbsMax.val_float ||
 8001cc8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <setTemp4_coeff+0x48>)
 8001cce:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001cd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cda:	da09      	bge.n	8001cf0 <setTemp4_coeff+0x30>
       value.val_float <= Temp4_coeff.valueAbsMin.val_float) {
 8001cdc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <setTemp4_coeff+0x48>)
 8001ce2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Temp4_coeff.valueAbsMax.val_float ||
 8001ce6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cee:	d801      	bhi.n	8001cf4 <setTemp4_coeff+0x34>
       return false;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e003      	b.n	8001cfc <setTemp4_coeff+0x3c>
    } else {
        Temp4_coeff.value = value;
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <setTemp4_coeff+0x48>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001cfa:	2301      	movs	r3, #1
    }
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	200005fc 	.word	0x200005fc

08001d0c <getTemp4_coeff>:
valueTypes getTemp4_coeff(void) {
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
    return Temp4_coeff.value;
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <getTemp4_coeff+0x14>)
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	200005fc 	.word	0x200005fc

08001d24 <setLoadSelect1>:

bool setLoadSelect1(valueTypes state) {
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
    LoadSelect1.value = state;
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <setLoadSelect1+0x1c>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	20000638 	.word	0x20000638

08001d44 <getLoadSelect1>:
valueTypes getLoadSelect1(void) {
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
    return LoadSelect1.value;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <getLoadSelect1+0x14>)
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000638 	.word	0x20000638

08001d5c <setLoadSelect2>:
bool setLoadSelect2(valueTypes state) {
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
    LoadSelect2.value = state;
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <setLoadSelect2+0x1c>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	20000674 	.word	0x20000674

08001d7c <getLoadSelect2>:
valueTypes getLoadSelect2(void) {
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
    return LoadSelect2.value;
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <getLoadSelect2+0x14>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000674 	.word	0x20000674

08001d94 <setModeSelect1>:

bool setModeSelect1(valueTypes state) {
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
    ModeSelect1.value = state;
 8001d9c:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <setModeSelect1+0x1c>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	200006b0 	.word	0x200006b0

08001db4 <getModeSelect1>:
valueTypes getModeSelect1(void) {
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
    return ModeSelect1.value;
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <getModeSelect1+0x14>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	200006b0 	.word	0x200006b0

08001dcc <setModeSelect2>:
bool setModeSelect2(valueTypes state) {
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
    ModeSelect2.value = state;
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <setModeSelect2+0x1c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001dda:	2301      	movs	r3, #1
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	200006ec 	.word	0x200006ec

08001dec <getModeSelect2>:
valueTypes getModeSelect2(void) {
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
    return ModeSelect2.value;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <getModeSelect2+0x14>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	200006ec 	.word	0x200006ec

08001e04 <setCh1_OnOff>:

bool setCh1_OnOff(valueTypes state) {
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
   Ch1_OnOff.value = state;
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <setCh1_OnOff+0x1c>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	20000728 	.word	0x20000728

08001e24 <getCh1_OnOff>:
valueTypes getCh1_OnOff(void) {
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
    return Ch1_OnOff.value;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <getCh1_OnOff+0x14>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000728 	.word	0x20000728

08001e3c <setCh2_OnOff>:
bool setCh2_OnOff(valueTypes state) {
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
    Ch2_OnOff.value = state;
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <setCh2_OnOff+0x1c>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001e4a:	2301      	movs	r3, #1
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	20000764 	.word	0x20000764

08001e5c <getCh2_OnOff>:
valueTypes getCh2_OnOff(void) {
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
    return Ch2_OnOff.value;
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <getCh2_OnOff+0x14>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000764 	.word	0x20000764

08001e74 <setSourceSelect1>:

bool setSourceSelect1(valueTypes state) {
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
   SourceSelect1.value = state;
 8001e7c:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <setSourceSelect1+0x1c>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	200007a0 	.word	0x200007a0

08001e94 <getSourceSelect1>:
valueTypes getSourceSelect1(void) {
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
    return SourceSelect1.value;
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <getSourceSelect1+0x14>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	200007a0 	.word	0x200007a0

08001eac <setSourceSelect2>:
bool setSourceSelect2(valueTypes state) {
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
    SourceSelect2.value = state;
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <setSourceSelect2+0x1c>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8001eba:	2301      	movs	r3, #1
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	200007dc 	.word	0x200007dc

08001ecc <getSourceSelect2>:
valueTypes getSourceSelect2(void) {
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
    return SourceSelect2.value;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <getSourceSelect2+0x14>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	200007dc 	.word	0x200007dc

08001ee4 <setPcoeff1Temp>:

bool setPcoeff1Temp(valueTypes value) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Pcoeff1Temp.valueAbsMax.val_float ||
 8001eec:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <setPcoeff1Temp+0x48>)
 8001ef2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efe:	da09      	bge.n	8001f14 <setPcoeff1Temp+0x30>
       value.val_float <= Pcoeff1Temp.valueAbsMin.val_float) {
 8001f00:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <setPcoeff1Temp+0x48>)
 8001f06:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Pcoeff1Temp.valueAbsMax.val_float ||
 8001f0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f12:	d801      	bhi.n	8001f18 <setPcoeff1Temp+0x34>
       return false;
 8001f14:	2300      	movs	r3, #0
 8001f16:	e003      	b.n	8001f20 <setPcoeff1Temp+0x3c>
    } else {
        Pcoeff1Temp.value = value;
 8001f18:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <setPcoeff1Temp+0x48>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001f1e:	2301      	movs	r3, #1
    }
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	20000818 	.word	0x20000818

08001f30 <getPcoeff1Temp>:
valueTypes getPcoeff1Temp(void) {
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
    return Pcoeff1Temp.value;
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <getPcoeff1Temp+0x14>)
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000818 	.word	0x20000818

08001f48 <setPcoeff2Temp>:
bool setPcoeff2Temp(valueTypes value) {
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Pcoeff2Temp.valueAbsMax.val_float ||
 8001f50:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f54:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <setPcoeff2Temp+0x48>)
 8001f56:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f62:	da09      	bge.n	8001f78 <setPcoeff2Temp+0x30>
       value.val_float <= Pcoeff2Temp.valueAbsMin.val_float) {
 8001f64:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <setPcoeff2Temp+0x48>)
 8001f6a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Pcoeff2Temp.valueAbsMax.val_float ||
 8001f6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f76:	d801      	bhi.n	8001f7c <setPcoeff2Temp+0x34>
       return false;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e003      	b.n	8001f84 <setPcoeff2Temp+0x3c>
    } else {
        Pcoeff2Temp.value = value;
 8001f7c:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <setPcoeff2Temp+0x48>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001f82:	2301      	movs	r3, #1
    }
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	20000854 	.word	0x20000854

08001f94 <getPcoeff2Temp>:
valueTypes getPcoeff2Temp(void) {
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
    return Pcoeff2Temp.value;
 8001f98:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <getPcoeff2Temp+0x14>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000854 	.word	0x20000854

08001fac <setIcoeff1Temp>:
bool setIcoeff1Temp(valueTypes value) {
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Icoeff1Temp.valueAbsMax.val_float ||
 8001fb4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <setIcoeff1Temp+0x48>)
 8001fba:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001fbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc6:	da09      	bge.n	8001fdc <setIcoeff1Temp+0x30>
       value.val_float <= Icoeff1Temp.valueAbsMin.val_float) {
 8001fc8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <setIcoeff1Temp+0x48>)
 8001fce:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Icoeff1Temp.valueAbsMax.val_float ||
 8001fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fda:	d801      	bhi.n	8001fe0 <setIcoeff1Temp+0x34>
       return false;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	e003      	b.n	8001fe8 <setIcoeff1Temp+0x3c>
    } else {
        Icoeff1Temp.value = value;
 8001fe0:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <setIcoeff1Temp+0x48>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8001fe6:	2301      	movs	r3, #1
    }
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	20000890 	.word	0x20000890

08001ff8 <getIcoeff1Temp>:
valueTypes getIcoeff1Temp(void) {
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
    return Icoeff1Temp.value;
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <getIcoeff1Temp+0x14>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000890 	.word	0x20000890

08002010 <setIcoeff2Temp>:
bool setIcoeff2Temp(valueTypes value) {
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Icoeff2Temp.valueAbsMax.val_float ||
 8002018:	ed97 7a01 	vldr	s14, [r7, #4]
 800201c:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <setIcoeff2Temp+0x48>)
 800201e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202a:	da09      	bge.n	8002040 <setIcoeff2Temp+0x30>
       value.val_float <= Icoeff2Temp.valueAbsMin.val_float) {
 800202c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <setIcoeff2Temp+0x48>)
 8002032:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Icoeff2Temp.valueAbsMax.val_float ||
 8002036:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203e:	d801      	bhi.n	8002044 <setIcoeff2Temp+0x34>
       return false;
 8002040:	2300      	movs	r3, #0
 8002042:	e003      	b.n	800204c <setIcoeff2Temp+0x3c>
    } else {
        Icoeff2Temp.value = value;
 8002044:	4a04      	ldr	r2, [pc, #16]	; (8002058 <setIcoeff2Temp+0x48>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800204a:	2301      	movs	r3, #1
    }
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	200008cc 	.word	0x200008cc

0800205c <getIcoeff2Temp>:
valueTypes getIcoeff2Temp(void) {
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
    return Icoeff2Temp.value;
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <getIcoeff2Temp+0x14>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	200008cc 	.word	0x200008cc

08002074 <setDcoeff1Temp>:
bool setDcoeff1Temp(valueTypes value) {
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Dcoeff1Temp.valueAbsMax.val_float ||
 800207c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <setDcoeff1Temp+0x48>)
 8002082:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002086:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800208a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208e:	da09      	bge.n	80020a4 <setDcoeff1Temp+0x30>
       value.val_float <= Dcoeff1Temp.valueAbsMin.val_float) {
 8002090:	ed97 7a01 	vldr	s14, [r7, #4]
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <setDcoeff1Temp+0x48>)
 8002096:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Dcoeff1Temp.valueAbsMax.val_float ||
 800209a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a2:	d801      	bhi.n	80020a8 <setDcoeff1Temp+0x34>
       return false;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e003      	b.n	80020b0 <setDcoeff1Temp+0x3c>
    } else {
        Dcoeff1Temp.value = value;
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <setDcoeff1Temp+0x48>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80020ae:	2301      	movs	r3, #1
    }
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	20000908 	.word	0x20000908

080020c0 <getDcoeff1Temp>:
valueTypes getDcoeff1Temp(void) {
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
    return Dcoeff1Temp.value;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <getDcoeff1Temp+0x14>)
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000908 	.word	0x20000908

080020d8 <setDcoeff2Temp>:
bool setDcoeff2Temp(valueTypes value) {
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Dcoeff2Temp.valueAbsMax.val_float ||
 80020e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <setDcoeff2Temp+0x48>)
 80020e6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80020ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f2:	da09      	bge.n	8002108 <setDcoeff2Temp+0x30>
       value.val_float <= Dcoeff2Temp.valueAbsMin.val_float) {
 80020f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <setDcoeff2Temp+0x48>)
 80020fa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Dcoeff2Temp.valueAbsMax.val_float ||
 80020fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002106:	d801      	bhi.n	800210c <setDcoeff2Temp+0x34>
       return false;
 8002108:	2300      	movs	r3, #0
 800210a:	e003      	b.n	8002114 <setDcoeff2Temp+0x3c>
    } else {
        Dcoeff2Temp.value = value;
 800210c:	4a04      	ldr	r2, [pc, #16]	; (8002120 <setDcoeff2Temp+0x48>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002112:	2301      	movs	r3, #1
    }
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	20000944 	.word	0x20000944

08002124 <getDcoeff2Temp>:

valueTypes getDcoeff2Temp(void) {
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
    return Dcoeff2Temp.value;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <getDcoeff2Temp+0x14>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000944 	.word	0x20000944

0800213c <setPcoeff1Freq>:


bool setPcoeff1Freq(valueTypes value) {
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Pcoeff1Freq.valueAbsMax.val_float ||
 8002144:	ed97 7a01 	vldr	s14, [r7, #4]
 8002148:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <setPcoeff1Freq+0x48>)
 800214a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800214e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002156:	da09      	bge.n	800216c <setPcoeff1Freq+0x30>
       value.val_float <= Pcoeff1Freq.valueAbsMin.val_float) {
 8002158:	ed97 7a01 	vldr	s14, [r7, #4]
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <setPcoeff1Freq+0x48>)
 800215e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Pcoeff1Freq.valueAbsMax.val_float ||
 8002162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216a:	d801      	bhi.n	8002170 <setPcoeff1Freq+0x34>
       return false;
 800216c:	2300      	movs	r3, #0
 800216e:	e003      	b.n	8002178 <setPcoeff1Freq+0x3c>
    } else {
        Pcoeff1Freq.value = value;
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <setPcoeff1Freq+0x48>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002176:	2301      	movs	r3, #1
    }
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	20000980 	.word	0x20000980

08002188 <getPcoeff1Freq>:
valueTypes getPcoeff1Freq(void) {
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
    return Pcoeff1Freq.value;
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <getPcoeff1Freq+0x14>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000980 	.word	0x20000980

080021a0 <setPcoeff2Freq>:
bool setPcoeff2Freq(valueTypes value) {
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Pcoeff2Freq.valueAbsMax.val_float ||
 80021a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80021ac:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <setPcoeff2Freq+0x48>)
 80021ae:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80021b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ba:	da09      	bge.n	80021d0 <setPcoeff2Freq+0x30>
       value.val_float <= Pcoeff2Freq.valueAbsMin.val_float) {
 80021bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <setPcoeff2Freq+0x48>)
 80021c2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Pcoeff2Freq.valueAbsMax.val_float ||
 80021c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ce:	d801      	bhi.n	80021d4 <setPcoeff2Freq+0x34>
       return false;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e003      	b.n	80021dc <setPcoeff2Freq+0x3c>
    } else {
        Pcoeff2Freq.value = value;
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <setPcoeff2Freq+0x48>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80021da:	2301      	movs	r3, #1
    }
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	200009bc 	.word	0x200009bc

080021ec <getPcoeff2Freq>:
valueTypes getPcoeff2Freq(void) {
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
    return Pcoeff2Freq.value;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <getPcoeff2Freq+0x14>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	200009bc 	.word	0x200009bc

08002204 <setIcoeff1Freq>:
bool setIcoeff1Freq(valueTypes value) {
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Icoeff1Freq.valueAbsMax.val_float ||
 800220c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002210:	4b0e      	ldr	r3, [pc, #56]	; (800224c <setIcoeff1Freq+0x48>)
 8002212:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800221a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221e:	da09      	bge.n	8002234 <setIcoeff1Freq+0x30>
       value.val_float <= Icoeff1Freq.valueAbsMin.val_float) {
 8002220:	ed97 7a01 	vldr	s14, [r7, #4]
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <setIcoeff1Freq+0x48>)
 8002226:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Icoeff1Freq.valueAbsMax.val_float ||
 800222a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800222e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002232:	d801      	bhi.n	8002238 <setIcoeff1Freq+0x34>
       return false;
 8002234:	2300      	movs	r3, #0
 8002236:	e003      	b.n	8002240 <setIcoeff1Freq+0x3c>
    } else {
        Icoeff1Freq.value = value;
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <setIcoeff1Freq+0x48>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800223e:	2301      	movs	r3, #1
    }
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	200009f8 	.word	0x200009f8

08002250 <getIcoeff1Freq>:
valueTypes getIcoeff1Freq(void) {
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
    return Icoeff1Freq.value;
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <getIcoeff1Freq+0x14>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	200009f8 	.word	0x200009f8

08002268 <setIcoeff2Freq>:
bool setIcoeff2Freq(valueTypes value) {
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Icoeff2Freq.valueAbsMax.val_float ||
 8002270:	ed97 7a01 	vldr	s14, [r7, #4]
 8002274:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <setIcoeff2Freq+0x48>)
 8002276:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800227a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800227e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002282:	da09      	bge.n	8002298 <setIcoeff2Freq+0x30>
       value.val_float <= Icoeff2Freq.valueAbsMin.val_float) {
 8002284:	ed97 7a01 	vldr	s14, [r7, #4]
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <setIcoeff2Freq+0x48>)
 800228a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Icoeff2Freq.valueAbsMax.val_float ||
 800228e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002296:	d801      	bhi.n	800229c <setIcoeff2Freq+0x34>
       return false;
 8002298:	2300      	movs	r3, #0
 800229a:	e003      	b.n	80022a4 <setIcoeff2Freq+0x3c>
    } else {
        Icoeff2Freq.value = value;
 800229c:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <setIcoeff2Freq+0x48>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80022a2:	2301      	movs	r3, #1
    }
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	20000a34 	.word	0x20000a34

080022b4 <getIcoeff2Freq>:
valueTypes getIcoeff2Freq(void) {
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
    return Icoeff2Freq.value;
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <getIcoeff2Freq+0x14>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000a34 	.word	0x20000a34

080022cc <setDcoeff1Freq>:
bool setDcoeff1Freq(valueTypes value) {
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Dcoeff1Freq.valueAbsMax.val_float ||
 80022d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <setDcoeff1Freq+0x48>)
 80022da:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80022de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e6:	da09      	bge.n	80022fc <setDcoeff1Freq+0x30>
       value.val_float <= Dcoeff1Freq.valueAbsMin.val_float) {
 80022e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <setDcoeff1Freq+0x48>)
 80022ee:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Dcoeff1Freq.valueAbsMax.val_float ||
 80022f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	d801      	bhi.n	8002300 <setDcoeff1Freq+0x34>
       return false;
 80022fc:	2300      	movs	r3, #0
 80022fe:	e003      	b.n	8002308 <setDcoeff1Freq+0x3c>
    } else {
        Dcoeff1Freq.value = value;
 8002300:	4a04      	ldr	r2, [pc, #16]	; (8002314 <setDcoeff1Freq+0x48>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002306:	2301      	movs	r3, #1
    }
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	20000a70 	.word	0x20000a70

08002318 <getDcoeff1Freq>:
valueTypes getDcoeff1Freq(void) {
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
    return Dcoeff1Freq.value;
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <getDcoeff1Freq+0x14>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000a70 	.word	0x20000a70

08002330 <setDcoeff2Freq>:
bool setDcoeff2Freq(valueTypes value) {
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Dcoeff2Freq.valueAbsMax.val_float ||
 8002338:	ed97 7a01 	vldr	s14, [r7, #4]
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <setDcoeff2Freq+0x48>)
 800233e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002342:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234a:	da09      	bge.n	8002360 <setDcoeff2Freq+0x30>
       value.val_float <= Dcoeff2Freq.valueAbsMin.val_float) {
 800234c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <setDcoeff2Freq+0x48>)
 8002352:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Dcoeff2Freq.valueAbsMax.val_float ||
 8002356:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800235a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800235e:	d801      	bhi.n	8002364 <setDcoeff2Freq+0x34>
       return false;
 8002360:	2300      	movs	r3, #0
 8002362:	e003      	b.n	800236c <setDcoeff2Freq+0x3c>
    } else {
        Dcoeff2Freq.value = value;
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <setDcoeff2Freq+0x48>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800236a:	2301      	movs	r3, #1
    }
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	20000aac 	.word	0x20000aac

0800237c <getDcoeff2Freq>:

valueTypes getDcoeff2Freq(void) {
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
    return Dcoeff2Freq.value;
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <getDcoeff2Freq+0x14>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000aac 	.word	0x20000aac

08002394 <setI1Set>:


bool setI1Set(valueTypes value) {
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I1Set.valueAbsMax.val_float ||
 800239c:	ed97 7a01 	vldr	s14, [r7, #4]
 80023a0:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <setI1Set+0x48>)
 80023a2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80023a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ae:	da09      	bge.n	80023c4 <setI1Set+0x30>
       value.val_float <= I1Set.valueAbsMin.val_float) {
 80023b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <setI1Set+0x48>)
 80023b6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I1Set.valueAbsMax.val_float ||
 80023ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c2:	d801      	bhi.n	80023c8 <setI1Set+0x34>
       return false;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e003      	b.n	80023d0 <setI1Set+0x3c>
    } else {
       I1Set.value = value;
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <setI1Set+0x48>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
       return true;
 80023ce:	2301      	movs	r3, #1
    }
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	20000ae8 	.word	0x20000ae8

080023e0 <getI1Set>:
valueTypes getI1Set(void) {
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
    return I1Set.value;
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <getI1Set+0x14>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000ae8 	.word	0x20000ae8

080023f8 <setI2Set>:
bool setI2Set(valueTypes value) {
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I2Set.valueAbsMax.val_float ||
 8002400:	ed97 7a01 	vldr	s14, [r7, #4]
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <setI2Set+0x48>)
 8002406:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800240a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800240e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002412:	da09      	bge.n	8002428 <setI2Set+0x30>
       value.val_float <= I2Set.valueAbsMin.val_float) {
 8002414:	ed97 7a01 	vldr	s14, [r7, #4]
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <setI2Set+0x48>)
 800241a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I2Set.valueAbsMax.val_float ||
 800241e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002426:	d801      	bhi.n	800242c <setI2Set+0x34>
       return false;
 8002428:	2300      	movs	r3, #0
 800242a:	e003      	b.n	8002434 <setI2Set+0x3c>
    } else {
       I2Set.value = value;
 800242c:	4a04      	ldr	r2, [pc, #16]	; (8002440 <setI2Set+0x48>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
       return true;
 8002432:	2301      	movs	r3, #1
    }
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	20000b24 	.word	0x20000b24

08002444 <getI2Set>:
valueTypes getI2Set(void) {
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
    return I2Set.value;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <getI2Set+0x14>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000b24 	.word	0x20000b24

0800245c <setGate1A_OnOff>:

bool setGate1A_OnOff(valueTypes value) {
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	Gate1A_OnOff.value = value;
 8002464:	4a04      	ldr	r2, [pc, #16]	; (8002478 <setGate1A_OnOff+0x1c>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 800246a:	2301      	movs	r3, #1
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	20000b60 	.word	0x20000b60

0800247c <getGate1A_OnOff>:
valueTypes getGate1A_OnOff(void) {
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
    return Gate1A_OnOff.value;
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <getGate1A_OnOff+0x14>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000b60 	.word	0x20000b60

08002494 <setGate1B_OnOff>:
bool setGate1B_OnOff(valueTypes value) {
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
    Gate1B_OnOff.value = value;
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <setGate1B_OnOff+0x1c>)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80024a2:	2301      	movs	r3, #1
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	20000b9c 	.word	0x20000b9c

080024b4 <getGate1B_OnOff>:
valueTypes getGate1B_OnOff(void) {
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
    return Gate1B_OnOff.value;
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <getGate1B_OnOff+0x14>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000b9c 	.word	0x20000b9c

080024cc <setGate2A_OnOff>:
bool setGate2A_OnOff(valueTypes value) {
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
	Gate2A_OnOff.value = value;
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <setGate2A_OnOff+0x1c>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	20000bd8 	.word	0x20000bd8

080024ec <getGate2A_OnOff>:
valueTypes getGate2A_OnOff(void) {
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
    return Gate2A_OnOff.value;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <getGate2A_OnOff+0x14>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000bd8 	.word	0x20000bd8

08002504 <setGate2B_OnOff>:
bool setGate2B_OnOff(valueTypes value) {
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
    Gate2B_OnOff.value = value;
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <setGate2B_OnOff+0x1c>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8002512:	2301      	movs	r3, #1
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	20000c14 	.word	0x20000c14

08002524 <getGate2B_OnOff>:
valueTypes getGate2B_OnOff(void) {
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
    return Gate2B_OnOff.value;
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <getGate2B_OnOff+0x14>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000c14 	.word	0x20000c14

0800253c <setGateH1A>:

bool setGateH1A(valueTypes value) {
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	GateH1A.value = value;
 8002544:	4a08      	ldr	r2, [pc, #32]	; (8002568 <setGateH1A+0x2c>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
	HAL_GPIO_WritePin(GateH1_A_GPIO_Port, GateH1_A_Pin, !value.val_bool);
 800254a:	793b      	ldrb	r3, [r7, #4]
 800254c:	f083 0301 	eor.w	r3, r3, #1
 8002550:	b2db      	uxtb	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	2110      	movs	r1, #16
 8002556:	4805      	ldr	r0, [pc, #20]	; (800256c <setGateH1A+0x30>)
 8002558:	f004 fdbc 	bl	80070d4 <HAL_GPIO_WritePin>
    return true;
 800255c:	2301      	movs	r3, #1
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000c50 	.word	0x20000c50
 800256c:	40020800 	.word	0x40020800

08002570 <getGateH1A>:
valueTypes getGateH1A(void) {
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
    return GateH1A.value;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <getGateH1A+0x14>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000c50 	.word	0x20000c50

08002588 <setGateH1B>:
bool setGateH1B(valueTypes value) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
    GateH1B.value = value;
 8002590:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <setGateH1B+0x2c>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6313      	str	r3, [r2, #48]	; 0x30
    HAL_GPIO_WritePin(GateH1_B_GPIO_Port, GateH1_B_Pin, !value.val_bool);
 8002596:	793b      	ldrb	r3, [r7, #4]
 8002598:	f083 0301 	eor.w	r3, r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	2120      	movs	r1, #32
 80025a2:	4805      	ldr	r0, [pc, #20]	; (80025b8 <setGateH1B+0x30>)
 80025a4:	f004 fd96 	bl	80070d4 <HAL_GPIO_WritePin>
    return true;
 80025a8:	2301      	movs	r3, #1
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000c8c 	.word	0x20000c8c
 80025b8:	40020800 	.word	0x40020800

080025bc <getGateH1B>:
valueTypes getGateH1B(void) {
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
    return GateH1B.value;
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <getGateH1B+0x14>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000c8c 	.word	0x20000c8c

080025d4 <setGateH2A>:
bool setGateH2A(valueTypes value) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	GateH2A.value = value;
 80025dc:	4a08      	ldr	r2, [pc, #32]	; (8002600 <setGateH2A+0x2c>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
	HAL_GPIO_WritePin(GateH2_A_GPIO_Port, GateH2_A_Pin, !value.val_bool);
 80025e2:	793b      	ldrb	r3, [r7, #4]
 80025e4:	f083 0301 	eor.w	r3, r3, #1
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025f0:	4804      	ldr	r0, [pc, #16]	; (8002604 <setGateH2A+0x30>)
 80025f2:	f004 fd6f 	bl	80070d4 <HAL_GPIO_WritePin>
    return true;
 80025f6:	2301      	movs	r3, #1
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000cc8 	.word	0x20000cc8
 8002604:	40020c00 	.word	0x40020c00

08002608 <getGateH2A>:
valueTypes getGateH2A(void) {
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
    return GateH2A.value;
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <getGateH2A+0x14>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000cc8 	.word	0x20000cc8

08002620 <setGateH2B>:
bool setGateH2B(valueTypes value) {
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
    GateH2B.value = value;
 8002628:	4a08      	ldr	r2, [pc, #32]	; (800264c <setGateH2B+0x2c>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
    HAL_GPIO_WritePin(GateH2_B_GPIO_Port, GateH2_B_Pin, !value.val_bool);
 800262e:	793b      	ldrb	r3, [r7, #4]
 8002630:	f083 0301 	eor.w	r3, r3, #1
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800263c:	4804      	ldr	r0, [pc, #16]	; (8002650 <setGateH2B+0x30>)
 800263e:	f004 fd49 	bl	80070d4 <HAL_GPIO_WritePin>
    return true;
 8002642:	2301      	movs	r3, #1
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000d04 	.word	0x20000d04
 8002650:	40020c00 	.word	0x40020c00

08002654 <getGateH2B>:
valueTypes getGateH2B(void) {
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
    return GateH2B.value;
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <getGateH2B+0x14>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000d04 	.word	0x20000d04

0800266c <setPWM_CH1>:

bool setPWM_CH1(valueTypes value) {
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
    if(value.val_float >= PWM_CH1.valueAbsMax.val_float ||
 8002674:	ed97 7a01 	vldr	s14, [r7, #4]
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <setPWM_CH1+0x48>)
 800267a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800267e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002686:	da09      	bge.n	800269c <setPWM_CH1+0x30>
       value.val_float <= PWM_CH1.valueAbsMin.val_float) {
 8002688:	ed97 7a01 	vldr	s14, [r7, #4]
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <setPWM_CH1+0x48>)
 800268e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= PWM_CH1.valueAbsMax.val_float ||
 8002692:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269a:	d801      	bhi.n	80026a0 <setPWM_CH1+0x34>
       return false;
 800269c:	2300      	movs	r3, #0
 800269e:	e003      	b.n	80026a8 <setPWM_CH1+0x3c>
    } else {
        PWM_CH1.value = value;
 80026a0:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <setPWM_CH1+0x48>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80026a6:	2301      	movs	r3, #1
    }
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	20000d40 	.word	0x20000d40

080026b8 <getPWM_CH1>:
valueTypes getPWM_CH1(void) {
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
    return PWM_CH1.value;
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <getPWM_CH1+0x14>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000d40 	.word	0x20000d40

080026d0 <setPWM_CH2>:

bool setPWM_CH2(valueTypes value) {
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
    if(value.val_float >= PWM_CH2.valueAbsMax.val_float ||
 80026d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80026dc:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <setPWM_CH2+0x48>)
 80026de:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80026e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ea:	da09      	bge.n	8002700 <setPWM_CH2+0x30>
       value.val_float <= PWM_CH2.valueAbsMin.val_float) {
 80026ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <setPWM_CH2+0x48>)
 80026f2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= PWM_CH2.valueAbsMax.val_float ||
 80026f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fe:	d801      	bhi.n	8002704 <setPWM_CH2+0x34>
       return false;
 8002700:	2300      	movs	r3, #0
 8002702:	e003      	b.n	800270c <setPWM_CH2+0x3c>
    } else {
    	PWM_CH1.value = value;
 8002704:	4a05      	ldr	r2, [pc, #20]	; (800271c <setPWM_CH2+0x4c>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800270a:	2301      	movs	r3, #1
    }
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	20000d7c 	.word	0x20000d7c
 800271c:	20000d40 	.word	0x20000d40

08002720 <getPWM_CH2>:
valueTypes getPWM_CH2(void) {
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
    return PWM_CH2.value;
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <getPWM_CH2+0x14>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000d7c 	.word	0x20000d7c

08002738 <setCH1_Polarity>:

bool setCH1_Polarity(valueTypes value) {
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	CH1_Polarity.value = value;
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <setCH1_Polarity+0x1c>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
	return true;
 8002746:	2301      	movs	r3, #1
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	20000db8 	.word	0x20000db8

08002758 <getCH1_Polarity>:

valueTypes getCH1_Polarity() {
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
	return CH1_Polarity.value;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <getCH1_Polarity+0x14>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000db8 	.word	0x20000db8

08002770 <setCH2_Polarity>:

bool setCH2_Polarity(valueTypes value) {
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	CH2_Polarity.value = value;
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <setCH2_Polarity+0x1c>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
	return true;
 800277e:	2301      	movs	r3, #1
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	20000df4 	.word	0x20000df4

08002790 <getCH2_Polarity>:

valueTypes getCH2_Polarity() {
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
	return CH2_Polarity.value;
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <getCH2_Polarity+0x14>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000df4 	.word	0x20000df4

080027a8 <setFreq>:

bool setFreq(valueTypes value) {
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
   Freq.value = value;
 80027b0:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <setFreq+0x1c>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
   return true;
 80027b6:	2301      	movs	r3, #1
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	20000e30 	.word	0x20000e30

080027c8 <getFreq>:
valueTypes getFreq() {
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
    return Freq.value;
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <getFreq+0x14>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000e30 	.word	0x20000e30

080027e0 <commandParamList>:


void commandParamList() {
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b0a5      	sub	sp, #148	; 0x94
 80027e4:	af02      	add	r7, sp, #8
	for(int i = 0; i < PARAMS_COUNT; i++) {
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027ec:	e030      	b.n	8002850 <commandParamList+0x70>
		if(params[i] == 0) {
 80027ee:	4a1c      	ldr	r2, [pc, #112]	; (8002860 <commandParamList+0x80>)
 80027f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d023      	beq.n	8002844 <commandParamList+0x64>
			continue;
		} else {
			char buffer[128];
			sprintf((char*)buffer, "%u:%s:%s", params[i]->commandNumber, typeNames[params[i]->type], params[i]->commandDescription);
 80027fc:	4a18      	ldr	r2, [pc, #96]	; (8002860 <commandParamList+0x80>)
 80027fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	461c      	mov	r4, r3
 800280a:	4a15      	ldr	r2, [pc, #84]	; (8002860 <commandParamList+0x80>)
 800280c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002814:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002818:	461a      	mov	r2, r3
 800281a:	4b12      	ldr	r3, [pc, #72]	; (8002864 <commandParamList+0x84>)
 800281c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002820:	490f      	ldr	r1, [pc, #60]	; (8002860 <commandParamList+0x80>)
 8002822:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002826:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800282a:	3302      	adds	r3, #2
 800282c:	1d38      	adds	r0, r7, #4
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	4622      	mov	r2, r4
 8002834:	490c      	ldr	r1, [pc, #48]	; (8002868 <commandParamList+0x88>)
 8002836:	f008 fc11 	bl	800b05c <siprintf>
			UARTtransmit((char*)buffer);
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	4618      	mov	r0, r3
 800283e:	f000 f8ab 	bl	8002998 <UARTtransmit>
 8002842:	e000      	b.n	8002846 <commandParamList+0x66>
			continue;
 8002844:	bf00      	nop
	for(int i = 0; i < PARAMS_COUNT; i++) {
 8002846:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800284a:	3301      	adds	r3, #1
 800284c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002850:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002854:	2b63      	cmp	r3, #99	; 0x63
 8002856:	ddca      	ble.n	80027ee <commandParamList+0xe>
		}
	}
	return;
 8002858:	bf00      	nop
}
 800285a:	378c      	adds	r7, #140	; 0x8c
 800285c:	46bd      	mov	sp, r7
 800285e:	bd90      	pop	{r4, r7, pc}
 8002860:	20001160 	.word	0x20001160
 8002864:	20000000 	.word	0x20000000
 8002868:	0800f198 	.word	0x0800f198

0800286c <commandSaveFlash>:

void commandSaveFlash() {
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
	SaveToFlash();
 8002870:	f000 ffe8 	bl	8003844 <SaveToFlash>
	UARTtransmit("Flash was succesfully saved");
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <commandSaveFlash+0x14>)
 8002876:	f000 f88f 	bl	8002998 <UARTtransmit>
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	0800f1a4 	.word	0x0800f1a4

08002884 <str_split>:
uint16_t TXtimeout = 1000;
uint8_t RXbufferChar[1];
uint8_t RXbufferElem = 0;

char** str_split(char* a_str, const char a_delim)
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b08b      	sub	sp, #44	; 0x2c
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	70fb      	strb	r3, [r7, #3]
    char** result    = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	613b      	str	r3, [r7, #16]
    size_t count     = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
    char* tmp        = a_str;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	623b      	str	r3, [r7, #32]
    char* last_comma = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
    char delim[2];
    delim[0] = a_delim;
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	733b      	strb	r3, [r7, #12]
    delim[1] = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	737b      	strb	r3, [r7, #13]

    /* Count how many elements will be extracted. */
    while (*tmp)
 80028a8:	e00c      	b.n	80028c4 <str_split+0x40>
    {
        if (a_delim == *tmp)
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d104      	bne.n	80028be <str_split+0x3a>
        {
            count++;
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	3301      	adds	r3, #1
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
            last_comma = tmp;
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	61fb      	str	r3, [r7, #28]
        }
        tmp++;
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	3301      	adds	r3, #1
 80028c2:	623b      	str	r3, [r7, #32]
    while (*tmp)
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ee      	bne.n	80028aa <str_split+0x26>
    }

    /* Add space for trailing token. */
    count += last_comma < (a_str + strlen(a_str) - 1);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7fd fc89 	bl	80001e4 <strlen>
 80028d2:	4603      	mov	r3, r0
 80028d4:	3b01      	subs	r3, #1
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	69fa      	ldr	r2, [r7, #28]
 80028dc:	429a      	cmp	r2, r3
 80028de:	bf34      	ite	cc
 80028e0:	2301      	movcc	r3, #1
 80028e2:	2300      	movcs	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	4413      	add	r3, r2
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Add space for terminating null string so caller
       knows where the list of returned strings ends. */
    count++;
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	3301      	adds	r3, #1
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24

    result = malloc(sizeof(char*) * count);
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f007 fab7 	bl	8009e6c <malloc>
 80028fe:	4603      	mov	r3, r0
 8002900:	613b      	str	r3, [r7, #16]

    if (result)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d039      	beq.n	800297c <str_split+0xf8>
    {
        size_t idx  = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	61bb      	str	r3, [r7, #24]
        char* token = strtok(a_str, delim);
 800290c:	f107 030c 	add.w	r3, r7, #12
 8002910:	4619      	mov	r1, r3
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f009 fa7c 	bl	800be10 <strtok>
 8002918:	6178      	str	r0, [r7, #20]

        while (token)
 800291a:	e01b      	b.n	8002954 <str_split+0xd0>
        {
            assert(idx < count);
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	429a      	cmp	r2, r3
 8002922:	d305      	bcc.n	8002930 <str_split+0xac>
 8002924:	4b18      	ldr	r3, [pc, #96]	; (8002988 <str_split+0x104>)
 8002926:	4a19      	ldr	r2, [pc, #100]	; (800298c <str_split+0x108>)
 8002928:	2137      	movs	r1, #55	; 0x37
 800292a:	4819      	ldr	r0, [pc, #100]	; (8002990 <str_split+0x10c>)
 800292c:	f007 fa44 	bl	8009db8 <__assert_func>
            *(result + idx++) = strdup(token);
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	61ba      	str	r2, [r7, #24]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	18d4      	adds	r4, r2, r3
 800293c:	6978      	ldr	r0, [r7, #20]
 800293e:	f008 fc1f 	bl	800b180 <strdup>
 8002942:	4603      	mov	r3, r0
 8002944:	6023      	str	r3, [r4, #0]
            token = strtok(0, delim);
 8002946:	f107 030c 	add.w	r3, r7, #12
 800294a:	4619      	mov	r1, r3
 800294c:	2000      	movs	r0, #0
 800294e:	f009 fa5f 	bl	800be10 <strtok>
 8002952:	6178      	str	r0, [r7, #20]
        while (token)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e0      	bne.n	800291c <str_split+0x98>
        }
        assert(idx == count - 1);
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	3b01      	subs	r3, #1
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	429a      	cmp	r2, r3
 8002962:	d005      	beq.n	8002970 <str_split+0xec>
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <str_split+0x110>)
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <str_split+0x108>)
 8002968:	213b      	movs	r1, #59	; 0x3b
 800296a:	4809      	ldr	r0, [pc, #36]	; (8002990 <str_split+0x10c>)
 800296c:	f007 fa24 	bl	8009db8 <__assert_func>
        *(result + idx) = 0;
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
    }

    return result;
 800297c:	693b      	ldr	r3, [r7, #16]
}
 800297e:	4618      	mov	r0, r3
 8002980:	372c      	adds	r7, #44	; 0x2c
 8002982:	46bd      	mov	sp, r7
 8002984:	bd90      	pop	{r4, r7, pc}
 8002986:	bf00      	nop
 8002988:	0800f1c0 	.word	0x0800f1c0
 800298c:	0800f33c 	.word	0x0800f33c
 8002990:	0800f1cc 	.word	0x0800f1cc
 8002994:	0800f1ec 	.word	0x0800f1ec

08002998 <UARTtransmit>:

void UARTtransmit(char* string) {
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	uint16_t size = sprintf((char*)TXbuffer, "%s%c",string, EOL);
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <UARTtransmit+0x30>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4909      	ldr	r1, [pc, #36]	; (80029cc <UARTtransmit+0x34>)
 80029a8:	4809      	ldr	r0, [pc, #36]	; (80029d0 <UARTtransmit+0x38>)
 80029aa:	f008 fb57 	bl	800b05c <siprintf>
 80029ae:	4603      	mov	r3, r0
 80029b0:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, TXbuffer, size, TXtimeout);
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <UARTtransmit+0x3c>)
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	89fa      	ldrh	r2, [r7, #14]
 80029b8:	4905      	ldr	r1, [pc, #20]	; (80029d0 <UARTtransmit+0x38>)
 80029ba:	4807      	ldr	r0, [pc, #28]	; (80029d8 <UARTtransmit+0x40>)
 80029bc:	f006 f9d1 	bl	8008d62 <HAL_UART_Transmit>
}
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000e6d 	.word	0x20000e6d
 80029cc:	0800f200 	.word	0x0800f200
 80029d0:	20001758 	.word	0x20001758
 80029d4:	20000e6e 	.word	0x20000e6e
 80029d8:	20001bf8 	.word	0x20001bf8

080029dc <UARTget>:

bool UARTget(uint16_t com) {
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b087      	sub	sp, #28
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	4603      	mov	r3, r0
 80029e4:	80fb      	strh	r3, [r7, #6]
	if(params[paramTable[com]-1]->get) {
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	4a4f      	ldr	r2, [pc, #316]	; (8002b28 <UARTget+0x14c>)
 80029ea:	5cd3      	ldrb	r3, [r2, r3]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	4a4f      	ldr	r2, [pc, #316]	; (8002b2c <UARTget+0x150>)
 80029f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 808b 	beq.w	8002b12 <UARTget+0x136>
		valueTypes value = params[paramTable[com]-1]->get();
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	4a4a      	ldr	r2, [pc, #296]	; (8002b28 <UARTget+0x14c>)
 8002a00:	5cd3      	ldrb	r3, [r2, r3]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	4a49      	ldr	r2, [pc, #292]	; (8002b2c <UARTget+0x150>)
 8002a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	4798      	blx	r3
 8002a0e:	4603      	mov	r3, r0
 8002a10:	60fb      	str	r3, [r7, #12]
		switch(params[paramTable[com]-1]->type) {
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	4a44      	ldr	r2, [pc, #272]	; (8002b28 <UARTget+0x14c>)
 8002a16:	5cd3      	ldrb	r3, [r2, r3]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	4a44      	ldr	r2, [pc, #272]	; (8002b2c <UARTget+0x150>)
 8002a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a24:	2b07      	cmp	r3, #7
 8002a26:	d872      	bhi.n	8002b0e <UARTget+0x132>
 8002a28:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <UARTget+0x54>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a51 	.word	0x08002a51
 8002a34:	08002a65 	.word	0x08002a65
 8002a38:	08002a79 	.word	0x08002a79
 8002a3c:	08002a8d 	.word	0x08002a8d
 8002a40:	08002aa3 	.word	0x08002aa3
 8002a44:	08002ab9 	.word	0x08002ab9
 8002a48:	08002acd 	.word	0x08002acd
 8002a4c:	08002af1 	.word	0x08002af1
		case UINT8_T:
			sprintf((char*)TXbuffer, "$%u:%u",com, value.val_uint8_t);
 8002a50:	88fa      	ldrh	r2, [r7, #6]
 8002a52:	7b3b      	ldrb	r3, [r7, #12]
 8002a54:	4936      	ldr	r1, [pc, #216]	; (8002b30 <UARTget+0x154>)
 8002a56:	4837      	ldr	r0, [pc, #220]	; (8002b34 <UARTget+0x158>)
 8002a58:	f008 fb00 	bl	800b05c <siprintf>
			UARTtransmit((char*)TXbuffer);
 8002a5c:	4835      	ldr	r0, [pc, #212]	; (8002b34 <UARTget+0x158>)
 8002a5e:	f7ff ff9b 	bl	8002998 <UARTtransmit>
			break;
 8002a62:	e054      	b.n	8002b0e <UARTget+0x132>
		case UINT16_T:
				sprintf((char*)TXbuffer, "$%u:%u",com,value.val_uint16_t);
 8002a64:	88fa      	ldrh	r2, [r7, #6]
 8002a66:	89bb      	ldrh	r3, [r7, #12]
 8002a68:	4931      	ldr	r1, [pc, #196]	; (8002b30 <UARTget+0x154>)
 8002a6a:	4832      	ldr	r0, [pc, #200]	; (8002b34 <UARTget+0x158>)
 8002a6c:	f008 faf6 	bl	800b05c <siprintf>
				UARTtransmit((char*)TXbuffer);
 8002a70:	4830      	ldr	r0, [pc, #192]	; (8002b34 <UARTget+0x158>)
 8002a72:	f7ff ff91 	bl	8002998 <UARTtransmit>
				break;
 8002a76:	e04a      	b.n	8002b0e <UARTget+0x132>
		case UINT32_T:
				sprintf((char*)TXbuffer, "$%u:%lu",com, value.val_uint32_t);
 8002a78:	88fa      	ldrh	r2, [r7, #6]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	492e      	ldr	r1, [pc, #184]	; (8002b38 <UARTget+0x15c>)
 8002a7e:	482d      	ldr	r0, [pc, #180]	; (8002b34 <UARTget+0x158>)
 8002a80:	f008 faec 	bl	800b05c <siprintf>
				UARTtransmit((char*)TXbuffer);
 8002a84:	482b      	ldr	r0, [pc, #172]	; (8002b34 <UARTget+0x158>)
 8002a86:	f7ff ff87 	bl	8002998 <UARTtransmit>
				break;
 8002a8a:	e040      	b.n	8002b0e <UARTget+0x132>
		case INT8_T:
				sprintf((char*)TXbuffer, "$%u:%d",com, value.val_int8_t);
 8002a8c:	88fa      	ldrh	r2, [r7, #6]
 8002a8e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002a92:	492a      	ldr	r1, [pc, #168]	; (8002b3c <UARTget+0x160>)
 8002a94:	4827      	ldr	r0, [pc, #156]	; (8002b34 <UARTget+0x158>)
 8002a96:	f008 fae1 	bl	800b05c <siprintf>
				UARTtransmit((char*)TXbuffer);
 8002a9a:	4826      	ldr	r0, [pc, #152]	; (8002b34 <UARTget+0x158>)
 8002a9c:	f7ff ff7c 	bl	8002998 <UARTtransmit>
				break;
 8002aa0:	e035      	b.n	8002b0e <UARTget+0x132>
		case INT16_T:
				sprintf((char*)TXbuffer, "$%u:%d",com, value.val_int16_t);
 8002aa2:	88fa      	ldrh	r2, [r7, #6]
 8002aa4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002aa8:	4924      	ldr	r1, [pc, #144]	; (8002b3c <UARTget+0x160>)
 8002aaa:	4822      	ldr	r0, [pc, #136]	; (8002b34 <UARTget+0x158>)
 8002aac:	f008 fad6 	bl	800b05c <siprintf>
				UARTtransmit((char*)TXbuffer);
 8002ab0:	4820      	ldr	r0, [pc, #128]	; (8002b34 <UARTget+0x158>)
 8002ab2:	f7ff ff71 	bl	8002998 <UARTtransmit>
				break;
 8002ab6:	e02a      	b.n	8002b0e <UARTget+0x132>
		case INT32_T:
				sprintf((char*)TXbuffer, "$%u:%ld",com, value.val_int32_t);
 8002ab8:	88fa      	ldrh	r2, [r7, #6]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4920      	ldr	r1, [pc, #128]	; (8002b40 <UARTget+0x164>)
 8002abe:	481d      	ldr	r0, [pc, #116]	; (8002b34 <UARTget+0x158>)
 8002ac0:	f008 facc 	bl	800b05c <siprintf>
				UARTtransmit((char*)TXbuffer);
 8002ac4:	481b      	ldr	r0, [pc, #108]	; (8002b34 <UARTget+0x158>)
 8002ac6:	f7ff ff67 	bl	8002998 <UARTtransmit>
				break;
 8002aca:	e020      	b.n	8002b0e <UARTget+0x132>
		case FLOAT:
				sprintf((char*)TXbuffer, "$%u:%f",com, value.val_float);
 8002acc:	88fc      	ldrh	r4, [r7, #6]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fd fd49 	bl	8000568 <__aeabi_f2d>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	e9cd 2300 	strd	r2, r3, [sp]
 8002ade:	4622      	mov	r2, r4
 8002ae0:	4918      	ldr	r1, [pc, #96]	; (8002b44 <UARTget+0x168>)
 8002ae2:	4814      	ldr	r0, [pc, #80]	; (8002b34 <UARTget+0x158>)
 8002ae4:	f008 faba 	bl	800b05c <siprintf>
				UARTtransmit((char*)TXbuffer);
 8002ae8:	4812      	ldr	r0, [pc, #72]	; (8002b34 <UARTget+0x158>)
 8002aea:	f7ff ff55 	bl	8002998 <UARTtransmit>
				break;
 8002aee:	e00e      	b.n	8002b0e <UARTget+0x132>
		case BOOL:
				sprintf((char*)TXbuffer, "$%u:%s",com, value.val_bool ? "true" : "false");
 8002af0:	88fa      	ldrh	r2, [r7, #6]
 8002af2:	7b3b      	ldrb	r3, [r7, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <UARTget+0x120>
 8002af8:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <UARTget+0x16c>)
 8002afa:	e000      	b.n	8002afe <UARTget+0x122>
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <UARTget+0x170>)
 8002afe:	4914      	ldr	r1, [pc, #80]	; (8002b50 <UARTget+0x174>)
 8002b00:	480c      	ldr	r0, [pc, #48]	; (8002b34 <UARTget+0x158>)
 8002b02:	f008 faab 	bl	800b05c <siprintf>
				UARTtransmit((char*)TXbuffer);
 8002b06:	480b      	ldr	r0, [pc, #44]	; (8002b34 <UARTget+0x158>)
 8002b08:	f7ff ff46 	bl	8002998 <UARTtransmit>
				break;
 8002b0c:	bf00      	nop
		}
		return true;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e005      	b.n	8002b1e <UARTget+0x142>
	}
	else {
		UARTtransmitNum(com, "Error\%no get function");
 8002b12:	88fb      	ldrh	r3, [r7, #6]
 8002b14:	490f      	ldr	r1, [pc, #60]	; (8002b54 <UARTget+0x178>)
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f8ea 	bl	8002cf0 <UARTtransmitNum>
		return false;
 8002b1c:	2300      	movs	r3, #0
	}
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd90      	pop	{r4, r7, pc}
 8002b26:	bf00      	nop
 8002b28:	200012f0 	.word	0x200012f0
 8002b2c:	20001160 	.word	0x20001160
 8002b30:	0800f208 	.word	0x0800f208
 8002b34:	20001758 	.word	0x20001758
 8002b38:	0800f210 	.word	0x0800f210
 8002b3c:	0800f218 	.word	0x0800f218
 8002b40:	0800f220 	.word	0x0800f220
 8002b44:	0800f228 	.word	0x0800f228
 8002b48:	0800f230 	.word	0x0800f230
 8002b4c:	0800f238 	.word	0x0800f238
 8002b50:	0800f240 	.word	0x0800f240
 8002b54:	0800f248 	.word	0x0800f248

08002b58 <UARTset>:

bool UARTset(uint16_t com, char* str) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	80fb      	strh	r3, [r7, #6]
	if(!params[paramTable[com]-1]->set) {
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	4a53      	ldr	r2, [pc, #332]	; (8002cb4 <UARTset+0x15c>)
 8002b68:	5cd3      	ldrb	r3, [r2, r3]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <UARTset+0x160>)
 8002b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d106      	bne.n	8002b86 <UARTset+0x2e>
		UARTtransmitNum(com, "Error\%no set function");
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	4950      	ldr	r1, [pc, #320]	; (8002cbc <UARTset+0x164>)
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 f8b7 	bl	8002cf0 <UARTtransmitNum>
		return false;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e092      	b.n	8002cac <UARTset+0x154>
	} else if(params[paramTable[com]-1]->readOnly) {
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	4a4a      	ldr	r2, [pc, #296]	; (8002cb4 <UARTset+0x15c>)
 8002b8a:	5cd3      	ldrb	r3, [r2, r3]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	4a4a      	ldr	r2, [pc, #296]	; (8002cb8 <UARTset+0x160>)
 8002b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b94:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d006      	beq.n	8002baa <UARTset+0x52>
		UARTtransmitNum(com, "Error\%read only");
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	4948      	ldr	r1, [pc, #288]	; (8002cc0 <UARTset+0x168>)
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 f8a5 	bl	8002cf0 <UARTtransmitNum>
		return false;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e080      	b.n	8002cac <UARTset+0x154>
	}
	valueTypes value;
	switch(params[paramTable[com] - 1]->type) {
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	4a41      	ldr	r2, [pc, #260]	; (8002cb4 <UARTset+0x15c>)
 8002bae:	5cd3      	ldrb	r3, [r2, r3]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	4a41      	ldr	r2, [pc, #260]	; (8002cb8 <UARTset+0x160>)
 8002bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bbc:	2b07      	cmp	r3, #7
 8002bbe:	d85a      	bhi.n	8002c76 <UARTset+0x11e>
 8002bc0:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <UARTset+0x70>)
 8002bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc6:	bf00      	nop
 8002bc8:	08002be9 	.word	0x08002be9
 8002bcc:	08002bf9 	.word	0x08002bf9
 8002bd0:	08002c09 	.word	0x08002c09
 8002bd4:	08002c19 	.word	0x08002c19
 8002bd8:	08002c29 	.word	0x08002c29
 8002bdc:	08002c39 	.word	0x08002c39
 8002be0:	08002c49 	.word	0x08002c49
 8002be4:	08002c59 	.word	0x08002c59
	case UINT8_T:
		sscanf(str, "%c", &value.val_uint8_t);
 8002be8:	f107 0308 	add.w	r3, r7, #8
 8002bec:	461a      	mov	r2, r3
 8002bee:	4935      	ldr	r1, [pc, #212]	; (8002cc4 <UARTset+0x16c>)
 8002bf0:	6838      	ldr	r0, [r7, #0]
 8002bf2:	f008 fa53 	bl	800b09c <siscanf>
		break;
 8002bf6:	e03e      	b.n	8002c76 <UARTset+0x11e>
	case UINT16_T:
		sscanf(str, "%hu", &value.val_uint16_t);
 8002bf8:	f107 0308 	add.w	r3, r7, #8
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4932      	ldr	r1, [pc, #200]	; (8002cc8 <UARTset+0x170>)
 8002c00:	6838      	ldr	r0, [r7, #0]
 8002c02:	f008 fa4b 	bl	800b09c <siscanf>
		break;
 8002c06:	e036      	b.n	8002c76 <UARTset+0x11e>
	case UINT32_T:
		sscanf(str, "%lu", &value.val_uint32_t);
 8002c08:	f107 0308 	add.w	r3, r7, #8
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	492f      	ldr	r1, [pc, #188]	; (8002ccc <UARTset+0x174>)
 8002c10:	6838      	ldr	r0, [r7, #0]
 8002c12:	f008 fa43 	bl	800b09c <siscanf>
		break;
 8002c16:	e02e      	b.n	8002c76 <UARTset+0x11e>
	case INT8_T:
		sscanf(str, "%c", &value.val_int8_t);
 8002c18:	f107 0308 	add.w	r3, r7, #8
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4929      	ldr	r1, [pc, #164]	; (8002cc4 <UARTset+0x16c>)
 8002c20:	6838      	ldr	r0, [r7, #0]
 8002c22:	f008 fa3b 	bl	800b09c <siscanf>
		break;
 8002c26:	e026      	b.n	8002c76 <UARTset+0x11e>
	case INT16_T:
		sscanf(str, "%hd", &value.val_int16_t);
 8002c28:	f107 0308 	add.w	r3, r7, #8
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4928      	ldr	r1, [pc, #160]	; (8002cd0 <UARTset+0x178>)
 8002c30:	6838      	ldr	r0, [r7, #0]
 8002c32:	f008 fa33 	bl	800b09c <siscanf>
		break;
 8002c36:	e01e      	b.n	8002c76 <UARTset+0x11e>
	case INT32_T:
		sscanf(str, "%ld", &value.val_int32_t);
 8002c38:	f107 0308 	add.w	r3, r7, #8
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4925      	ldr	r1, [pc, #148]	; (8002cd4 <UARTset+0x17c>)
 8002c40:	6838      	ldr	r0, [r7, #0]
 8002c42:	f008 fa2b 	bl	800b09c <siscanf>
		break;
 8002c46:	e016      	b.n	8002c76 <UARTset+0x11e>
	case FLOAT:
		sscanf(str, "%f", &value.val_float);
 8002c48:	f107 0308 	add.w	r3, r7, #8
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4922      	ldr	r1, [pc, #136]	; (8002cd8 <UARTset+0x180>)
 8002c50:	6838      	ldr	r0, [r7, #0]
 8002c52:	f008 fa23 	bl	800b09c <siscanf>
		break;
 8002c56:	e00e      	b.n	8002c76 <UARTset+0x11e>
	case BOOL:
		value = (valueTypes)(bool)!strcmp(str, "true");
 8002c58:	4920      	ldr	r1, [pc, #128]	; (8002cdc <UARTset+0x184>)
 8002c5a:	6838      	ldr	r0, [r7, #0]
 8002c5c:	f7fd fab8 	bl	80001d0 <strcmp>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf0c      	ite	eq
 8002c66:	2301      	moveq	r3, #1
 8002c68:	2300      	movne	r3, #0
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	4613      	mov	r3, r2
 8002c72:	723b      	strb	r3, [r7, #8]
		break;
 8002c74:	bf00      	nop
	}
	bool setRes = params[paramTable[com]-1]->set((valueTypes)value);
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <UARTset+0x15c>)
 8002c7a:	5cd3      	ldrb	r3, [r2, r3]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	4a0e      	ldr	r2, [pc, #56]	; (8002cb8 <UARTset+0x160>)
 8002c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	68b8      	ldr	r0, [r7, #8]
 8002c88:	4798      	blx	r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	73fb      	strb	r3, [r7, #15]
	sprintf((char*)TXbuffer, "$%u:%s",com, setRes ? "Y" : "N");
 8002c8e:	88fa      	ldrh	r2, [r7, #6]
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <UARTset+0x142>
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <UARTset+0x188>)
 8002c98:	e000      	b.n	8002c9c <UARTset+0x144>
 8002c9a:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <UARTset+0x18c>)
 8002c9c:	4912      	ldr	r1, [pc, #72]	; (8002ce8 <UARTset+0x190>)
 8002c9e:	4813      	ldr	r0, [pc, #76]	; (8002cec <UARTset+0x194>)
 8002ca0:	f008 f9dc 	bl	800b05c <siprintf>
	UARTtransmit((char*)TXbuffer);
 8002ca4:	4811      	ldr	r0, [pc, #68]	; (8002cec <UARTset+0x194>)
 8002ca6:	f7ff fe77 	bl	8002998 <UARTtransmit>
	return setRes;
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	200012f0 	.word	0x200012f0
 8002cb8:	20001160 	.word	0x20001160
 8002cbc:	0800f260 	.word	0x0800f260
 8002cc0:	0800f278 	.word	0x0800f278
 8002cc4:	0800f288 	.word	0x0800f288
 8002cc8:	0800f28c 	.word	0x0800f28c
 8002ccc:	0800f290 	.word	0x0800f290
 8002cd0:	0800f294 	.word	0x0800f294
 8002cd4:	0800f298 	.word	0x0800f298
 8002cd8:	0800f29c 	.word	0x0800f29c
 8002cdc:	0800f230 	.word	0x0800f230
 8002ce0:	0800f2a0 	.word	0x0800f2a0
 8002ce4:	0800f2a4 	.word	0x0800f2a4
 8002ce8:	0800f240 	.word	0x0800f240
 8002cec:	20001758 	.word	0x20001758

08002cf0 <UARTtransmitNum>:

void UARTtransmitNum(int com, char* string) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
	sprintf((char*)TXbuffer, "%d:%s",com, string);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	4905      	ldr	r1, [pc, #20]	; (8002d14 <UARTtransmitNum+0x24>)
 8002d00:	4805      	ldr	r0, [pc, #20]	; (8002d18 <UARTtransmitNum+0x28>)
 8002d02:	f008 f9ab 	bl	800b05c <siprintf>
	UARTtransmit((char*)TXbuffer);
 8002d06:	4804      	ldr	r0, [pc, #16]	; (8002d18 <UARTtransmitNum+0x28>)
 8002d08:	f7ff fe46 	bl	8002998 <UARTtransmit>
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	0800f2a8 	.word	0x0800f2a8
 8002d18:	20001758 	.word	0x20001758

08002d1c <commandSearch>:

void commandSearch() {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
	char** commands;
	commands = str_split((char*)RXbuffer, delim);
 8002d22:	4b51      	ldr	r3, [pc, #324]	; (8002e68 <commandSearch+0x14c>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	4619      	mov	r1, r3
 8002d28:	4850      	ldr	r0, [pc, #320]	; (8002e6c <commandSearch+0x150>)
 8002d2a:	f7ff fdab 	bl	8002884 <str_split>
 8002d2e:	61b8      	str	r0, [r7, #24]
	if (commands)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8093 	beq.w	8002e5e <commandSearch+0x142>
	{
		int i;
		for (i = 0; *(commands + i); i++)
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	e081      	b.n	8002e42 <commandSearch+0x126>
		{
			char* command = *(commands + i);
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4413      	add	r3, r2
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	617b      	str	r3, [r7, #20]
			if(strlen(command) < 5) {
 8002d4a:	6978      	ldr	r0, [r7, #20]
 8002d4c:	f7fd fa4a 	bl	80001e4 <strlen>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d803      	bhi.n	8002d5e <commandSearch+0x42>
				UARTtransmit("Error\%invalid command style");
 8002d56:	4846      	ldr	r0, [pc, #280]	; (8002e70 <commandSearch+0x154>)
 8002d58:	f7ff fe1e 	bl	8002998 <UARTtransmit>
 8002d5c:	e066      	b.n	8002e2c <commandSearch+0x110>
			} else if(!strcmp(command, "*IDN?")) {
 8002d5e:	4945      	ldr	r1, [pc, #276]	; (8002e74 <commandSearch+0x158>)
 8002d60:	6978      	ldr	r0, [r7, #20]
 8002d62:	f7fd fa35 	bl	80001d0 <strcmp>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d103      	bne.n	8002d74 <commandSearch+0x58>
				UARTtransmit(IDNstring);
 8002d6c:	4842      	ldr	r0, [pc, #264]	; (8002e78 <commandSearch+0x15c>)
 8002d6e:	f7ff fe13 	bl	8002998 <UARTtransmit>
 8002d72:	e05b      	b.n	8002e2c <commandSearch+0x110>
			} else if(command[0] == '$') {
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b24      	cmp	r3, #36	; 0x24
 8002d7a:	d154      	bne.n	8002e26 <commandSearch+0x10a>
				char attr[10];
				int com;
				sscanf(&command[1], "%d%s", &com, attr);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	1c58      	adds	r0, r3, #1
 8002d80:	f107 0308 	add.w	r3, r7, #8
 8002d84:	1d3a      	adds	r2, r7, #4
 8002d86:	493d      	ldr	r1, [pc, #244]	; (8002e7c <commandSearch+0x160>)
 8002d88:	f008 f988 	bl	800b09c <siscanf>
				if(com < 100 || com > PARAMS_RANGE - 1) {
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b63      	cmp	r3, #99	; 0x63
 8002d90:	dd03      	ble.n	8002d9a <commandSearch+0x7e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d98:	db05      	blt.n	8002da6 <commandSearch+0x8a>
					UARTtransmitNum(com,"Error\%invalid command");
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4938      	ldr	r1, [pc, #224]	; (8002e80 <commandSearch+0x164>)
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ffa6 	bl	8002cf0 <UARTtransmitNum>
 8002da4:	e042      	b.n	8002e2c <commandSearch+0x110>
				}
				else if(!params[paramTable[com]-1])
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a36      	ldr	r2, [pc, #216]	; (8002e84 <commandSearch+0x168>)
 8002daa:	5cd3      	ldrb	r3, [r2, r3]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	4a36      	ldr	r2, [pc, #216]	; (8002e88 <commandSearch+0x16c>)
 8002db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <commandSearch+0xa8>
				{
					UARTtransmitNum(com,"Error\%invalid parameter");
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4934      	ldr	r1, [pc, #208]	; (8002e8c <commandSearch+0x170>)
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff97 	bl	8002cf0 <UARTtransmitNum>
 8002dc2:	e033      	b.n	8002e2c <commandSearch+0x110>
				}
				else if(attr[0] == '?') {
 8002dc4:	7a3b      	ldrb	r3, [r7, #8]
 8002dc6:	2b3f      	cmp	r3, #63	; 0x3f
 8002dc8:	d11a      	bne.n	8002e00 <commandSearch+0xe4>
					if(params[paramTable[com]-1]->isCommand) {
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a2d      	ldr	r2, [pc, #180]	; (8002e84 <commandSearch+0x168>)
 8002dce:	5cd3      	ldrb	r3, [r2, r3]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	4a2d      	ldr	r2, [pc, #180]	; (8002e88 <commandSearch+0x16c>)
 8002dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d009      	beq.n	8002df4 <commandSearch+0xd8>
						params[paramTable[com]-1]->command();
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a28      	ldr	r2, [pc, #160]	; (8002e84 <commandSearch+0x168>)
 8002de4:	5cd3      	ldrb	r3, [r2, r3]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	4a27      	ldr	r2, [pc, #156]	; (8002e88 <commandSearch+0x16c>)
 8002dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	4798      	blx	r3
 8002df2:	e01b      	b.n	8002e2c <commandSearch+0x110>
					}
					else  {
						UARTget(com);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fdef 	bl	80029dc <UARTget>
 8002dfe:	e015      	b.n	8002e2c <commandSearch+0x110>
					}
				}
				else if (attr[0] == ':') {
 8002e00:	7a3b      	ldrb	r3, [r7, #8]
 8002e02:	2b3a      	cmp	r3, #58	; 0x3a
 8002e04:	d109      	bne.n	8002e1a <commandSearch+0xfe>
					UARTset(com, &attr[1]);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	f107 0308 	add.w	r3, r7, #8
 8002e0e:	3301      	adds	r3, #1
 8002e10:	4619      	mov	r1, r3
 8002e12:	4610      	mov	r0, r2
 8002e14:	f7ff fea0 	bl	8002b58 <UARTset>
 8002e18:	e008      	b.n	8002e2c <commandSearch+0x110>
				}
				else {
					UARTtransmitNum(com, "Error\%invalid command style");
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4914      	ldr	r1, [pc, #80]	; (8002e70 <commandSearch+0x154>)
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ff66 	bl	8002cf0 <UARTtransmitNum>
 8002e24:	e002      	b.n	8002e2c <commandSearch+0x110>
				}
			} else {
				UARTtransmit("Error\%invalid command style");
 8002e26:	4812      	ldr	r0, [pc, #72]	; (8002e70 <commandSearch+0x154>)
 8002e28:	f7ff fdb6 	bl	8002998 <UARTtransmit>
			}

			free(*(commands + i));
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4413      	add	r3, r2
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f007 f820 	bl	8009e7c <free>
		for (i = 0; *(commands + i); i++)
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4413      	add	r3, r2
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f47f af76 	bne.w	8002d3e <commandSearch+0x22>
		}
		printf("\n");
 8002e52:	200a      	movs	r0, #10
 8002e54:	f008 f8d6 	bl	800b004 <putchar>
		free(commands);
 8002e58:	69b8      	ldr	r0, [r7, #24]
 8002e5a:	f007 f80f 	bl	8009e7c <free>
	}
}
 8002e5e:	bf00      	nop
 8002e60:	3720      	adds	r7, #32
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000e6c 	.word	0x20000e6c
 8002e6c:	200016d8 	.word	0x200016d8
 8002e70:	0800f2b0 	.word	0x0800f2b0
 8002e74:	0800f2cc 	.word	0x0800f2cc
 8002e78:	20000e74 	.word	0x20000e74
 8002e7c:	0800f2d4 	.word	0x0800f2d4
 8002e80:	0800f2dc 	.word	0x0800f2dc
 8002e84:	200012f0 	.word	0x200012f0
 8002e88:	20001160 	.word	0x20001160
 8002e8c:	0800f2f4 	.word	0x0800f2f4

08002e90 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
    if(RXbufferChar[0] != EOL) {
 8002e98:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <HAL_UART_RxCpltCallback+0x58>)
 8002e9a:	781a      	ldrb	r2, [r3, #0]
 8002e9c:	4b13      	ldr	r3, [pc, #76]	; (8002eec <HAL_UART_RxCpltCallback+0x5c>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d00d      	beq.n	8002ec0 <HAL_UART_RxCpltCallback+0x30>
    	RXbuffer[RXbufferElem] = RXbufferChar[0];
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_UART_RxCpltCallback+0x60>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <HAL_UART_RxCpltCallback+0x58>)
 8002eac:	7819      	ldrb	r1, [r3, #0]
 8002eae:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_UART_RxCpltCallback+0x64>)
 8002eb0:	5499      	strb	r1, [r3, r2]
    	RXbufferElem++;
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <HAL_UART_RxCpltCallback+0x60>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <HAL_UART_RxCpltCallback+0x60>)
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	e00a      	b.n	8002ed6 <HAL_UART_RxCpltCallback+0x46>
    }
    else {
    	RXbuffer[RXbufferElem] = '\0';
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_UART_RxCpltCallback+0x60>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_UART_RxCpltCallback+0x64>)
 8002ec8:	2100      	movs	r1, #0
 8002eca:	5499      	strb	r1, [r3, r2]
    	commandSearch();
 8002ecc:	f7ff ff26 	bl	8002d1c <commandSearch>
    	RXbufferElem = 0;
 8002ed0:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <HAL_UART_RxCpltCallback+0x60>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, RXbufferChar, 1);
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	4903      	ldr	r1, [pc, #12]	; (8002ee8 <HAL_UART_RxCpltCallback+0x58>)
 8002eda:	4807      	ldr	r0, [pc, #28]	; (8002ef8 <HAL_UART_RxCpltCallback+0x68>)
 8002edc:	f005 ffd3 	bl	8008e86 <HAL_UART_Receive_IT>
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200017d8 	.word	0x200017d8
 8002eec:	20000e6d 	.word	0x20000e6d
 8002ef0:	200017d9 	.word	0x200017d9
 8002ef4:	200016d8 	.word	0x200016d8
 8002ef8:	20001bf8 	.word	0x20001bf8

08002efc <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8002f02:	2306      	movs	r3, #6
 8002f04:	847b      	strh	r3, [r7, #34]	; 0x22
 8002f06:	2306      	movs	r3, #6
 8002f08:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	83fb      	strh	r3, [r7, #30]
 8002f12:	2300      	movs	r3, #0
 8002f14:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8002f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f1a:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002f20:	4ba1      	ldr	r3, [pc, #644]	; (80031a8 <EE_Init+0x2ac>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002f26:	4ba1      	ldr	r3, [pc, #644]	; (80031ac <EE_Init+0x2b0>)
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8002f30:	2306      	movs	r3, #6
 8002f32:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8002f34:	2301      	movs	r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8002f3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00b      	beq.n	8002f5e <EE_Init+0x62>
 8002f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4a:	f280 8196 	bge.w	800327a <EE_Init+0x37e>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 80f8 	beq.w	8003144 <EE_Init+0x248>
 8002f54:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d050      	beq.n	8002ffe <EE_Init+0x102>
 8002f5c:	e18d      	b.n	800327a <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8002f5e:	8c3b      	ldrh	r3, [r7, #32]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d116      	bne.n	8002f92 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8002f64:	4890      	ldr	r0, [pc, #576]	; (80031a8 <EE_Init+0x2ac>)
 8002f66:	f000 f9a9 	bl	80032bc <EE_VerifyPageFullyErased>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f040 818e 	bne.w	800328e <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002f72:	f107 0214 	add.w	r2, r7, #20
 8002f76:	463b      	mov	r3, r7
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f003 fdec 	bl	8006b58 <HAL_FLASHEx_Erase>
 8002f80:	4603      	mov	r3, r0
 8002f82:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002f84:	7efb      	ldrb	r3, [r7, #27]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 8181 	beq.w	800328e <EE_Init+0x392>
          {
            return FlashStatus;
 8002f8c:	7efb      	ldrb	r3, [r7, #27]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	e185      	b.n	800329e <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8002f92:	8c3b      	ldrh	r3, [r7, #32]
 8002f94:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d125      	bne.n	8002fe8 <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8002f9c:	4882      	ldr	r0, [pc, #520]	; (80031a8 <EE_Init+0x2ac>)
 8002f9e:	f000 f98d 	bl	80032bc <EE_VerifyPageFullyErased>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10e      	bne.n	8002fc6 <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002fa8:	f107 0214 	add.w	r2, r7, #20
 8002fac:	463b      	mov	r3, r7
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f003 fdd1 	bl	8006b58 <HAL_FLASHEx_Erase>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002fba:	7efb      	ldrb	r3, [r7, #27]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <EE_Init+0xca>
          {
            return FlashStatus;
 8002fc0:	7efb      	ldrb	r3, [r7, #27]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	e16b      	b.n	800329e <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	4977      	ldr	r1, [pc, #476]	; (80031ac <EE_Init+0x2b0>)
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f003 fc1b 	bl	800680c <HAL_FLASH_Program>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002fda:	7efb      	ldrb	r3, [r7, #27]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8156 	beq.w	800328e <EE_Init+0x392>
        {
          return FlashStatus;
 8002fe2:	7efb      	ldrb	r3, [r7, #27]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	e15a      	b.n	800329e <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8002fe8:	f000 f9fa 	bl	80033e0 <EE_Format>
 8002fec:	4603      	mov	r3, r0
 8002fee:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002ff0:	7efb      	ldrb	r3, [r7, #27]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 814b 	beq.w	800328e <EE_Init+0x392>
        {
          return FlashStatus;
 8002ff8:	7efb      	ldrb	r3, [r7, #27]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	e14f      	b.n	800329e <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8002ffe:	8c3b      	ldrh	r3, [r7, #32]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d163      	bne.n	80030cc <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8003004:	2300      	movs	r3, #0
 8003006:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003008:	e030      	b.n	800306c <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800300a:	4b69      	ldr	r3, [pc, #420]	; (80031b0 <EE_Init+0x2b4>)
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29a      	uxth	r2, r3
 8003010:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003012:	4968      	ldr	r1, [pc, #416]	; (80031b4 <EE_Init+0x2b8>)
 8003014:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003018:	429a      	cmp	r2, r3
 800301a:	d101      	bne.n	8003020 <EE_Init+0x124>
          {
            x = VarIdx;
 800301c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800301e:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8003020:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003022:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8003026:	429a      	cmp	r2, r3
 8003028:	d01d      	beq.n	8003066 <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800302a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800302c:	4a61      	ldr	r2, [pc, #388]	; (80031b4 <EE_Init+0x2b8>)
 800302e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003032:	4961      	ldr	r1, [pc, #388]	; (80031b8 <EE_Init+0x2bc>)
 8003034:	4618      	mov	r0, r3
 8003036:	f000 f967 	bl	8003308 <EE_ReadVariable>
 800303a:	4603      	mov	r3, r0
 800303c:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800303e:	8bbb      	ldrh	r3, [r7, #28]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d010      	beq.n	8003066 <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8003044:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003046:	4a5b      	ldr	r2, [pc, #364]	; (80031b4 <EE_Init+0x2b8>)
 8003048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800304c:	4a5a      	ldr	r2, [pc, #360]	; (80031b8 <EE_Init+0x2bc>)
 800304e:	8812      	ldrh	r2, [r2, #0]
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fa5c 	bl	8003510 <EE_VerifyPageFullWriteVariable>
 8003058:	4603      	mov	r3, r0
 800305a:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800305c:	8bfb      	ldrh	r3, [r7, #30]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <EE_Init+0x16a>
              {
                return EepromStatus;
 8003062:	8bfb      	ldrh	r3, [r7, #30]
 8003064:	e11b      	b.n	800329e <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8003066:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003068:	3301      	adds	r3, #1
 800306a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800306c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800306e:	2b63      	cmp	r3, #99	; 0x63
 8003070:	d9cb      	bls.n	800300a <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	494b      	ldr	r1, [pc, #300]	; (80031a8 <EE_Init+0x2ac>)
 800307c:	2001      	movs	r0, #1
 800307e:	f003 fbc5 	bl	800680c <HAL_FLASH_Program>
 8003082:	4603      	mov	r3, r0
 8003084:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8003086:	7efb      	ldrb	r3, [r7, #27]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <EE_Init+0x196>
        {
          return FlashStatus;
 800308c:	7efb      	ldrb	r3, [r7, #27]
 800308e:	b29b      	uxth	r3, r3
 8003090:	e105      	b.n	800329e <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 8003092:	2307      	movs	r3, #7
 8003094:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8003096:	2301      	movs	r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800309a:	2302      	movs	r3, #2
 800309c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800309e:	4843      	ldr	r0, [pc, #268]	; (80031ac <EE_Init+0x2b0>)
 80030a0:	f000 f90c 	bl	80032bc <EE_VerifyPageFullyErased>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 80f3 	bne.w	8003292 <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80030ac:	f107 0214 	add.w	r2, r7, #20
 80030b0:	463b      	mov	r3, r7
 80030b2:	4611      	mov	r1, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f003 fd4f 	bl	8006b58 <HAL_FLASHEx_Erase>
 80030ba:	4603      	mov	r3, r0
 80030bc:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80030be:	7efb      	ldrb	r3, [r7, #27]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80e6 	beq.w	8003292 <EE_Init+0x396>
          {
            return FlashStatus;
 80030c6:	7efb      	ldrb	r3, [r7, #27]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	e0e8      	b.n	800329e <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 80030cc:	8c3b      	ldrh	r3, [r7, #32]
 80030ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d12b      	bne.n	800312e <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 80030d6:	2307      	movs	r3, #7
 80030d8:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80030da:	2301      	movs	r3, #1
 80030dc:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80030de:	2302      	movs	r3, #2
 80030e0:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80030e2:	4832      	ldr	r0, [pc, #200]	; (80031ac <EE_Init+0x2b0>)
 80030e4:	f000 f8ea 	bl	80032bc <EE_VerifyPageFullyErased>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10e      	bne.n	800310c <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80030ee:	f107 0214 	add.w	r2, r7, #20
 80030f2:	463b      	mov	r3, r7
 80030f4:	4611      	mov	r1, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f003 fd2e 	bl	8006b58 <HAL_FLASHEx_Erase>
 80030fc:	4603      	mov	r3, r0
 80030fe:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8003100:	7efb      	ldrb	r3, [r7, #27]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <EE_Init+0x210>
          {
            return FlashStatus;
 8003106:	7efb      	ldrb	r3, [r7, #27]
 8003108:	b29b      	uxth	r3, r3
 800310a:	e0c8      	b.n	800329e <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	4924      	ldr	r1, [pc, #144]	; (80031a8 <EE_Init+0x2ac>)
 8003116:	2001      	movs	r0, #1
 8003118:	f003 fb78 	bl	800680c <HAL_FLASH_Program>
 800311c:	4603      	mov	r3, r0
 800311e:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8003120:	7efb      	ldrb	r3, [r7, #27]
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 80b5 	beq.w	8003292 <EE_Init+0x396>
        {
          return FlashStatus;
 8003128:	7efb      	ldrb	r3, [r7, #27]
 800312a:	b29b      	uxth	r3, r3
 800312c:	e0b7      	b.n	800329e <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800312e:	f000 f957 	bl	80033e0 <EE_Format>
 8003132:	4603      	mov	r3, r0
 8003134:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8003136:	7efb      	ldrb	r3, [r7, #27]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80aa 	beq.w	8003292 <EE_Init+0x396>
        {
          return FlashStatus;
 800313e:	7efb      	ldrb	r3, [r7, #27]
 8003140:	b29b      	uxth	r3, r3
 8003142:	e0ac      	b.n	800329e <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8003144:	8c3b      	ldrh	r3, [r7, #32]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10a      	bne.n	8003160 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800314a:	f000 f949 	bl	80033e0 <EE_Format>
 800314e:	4603      	mov	r3, r0
 8003150:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8003152:	7efb      	ldrb	r3, [r7, #27]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 809e 	beq.w	8003296 <EE_Init+0x39a>
        {
          return FlashStatus;
 800315a:	7efb      	ldrb	r3, [r7, #27]
 800315c:	b29b      	uxth	r3, r3
 800315e:	e09e      	b.n	800329e <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8003160:	8c3b      	ldrh	r3, [r7, #32]
 8003162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003166:	4293      	cmp	r3, r2
 8003168:	d11b      	bne.n	80031a2 <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 800316a:	2307      	movs	r3, #7
 800316c:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800316e:	2301      	movs	r3, #1
 8003170:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8003172:	2302      	movs	r3, #2
 8003174:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8003176:	480d      	ldr	r0, [pc, #52]	; (80031ac <EE_Init+0x2b0>)
 8003178:	f000 f8a0 	bl	80032bc <EE_VerifyPageFullyErased>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	f040 8089 	bne.w	8003296 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8003184:	f107 0214 	add.w	r2, r7, #20
 8003188:	463b      	mov	r3, r7
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f003 fce3 	bl	8006b58 <HAL_FLASHEx_Erase>
 8003192:	4603      	mov	r3, r0
 8003194:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8003196:	7efb      	ldrb	r3, [r7, #27]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d07c      	beq.n	8003296 <EE_Init+0x39a>
          {
            return FlashStatus;
 800319c:	7efb      	ldrb	r3, [r7, #27]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	e07d      	b.n	800329e <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80031a6:	e03a      	b.n	800321e <EE_Init+0x322>
 80031a8:	08040000 	.word	0x08040000
 80031ac:	08044000 	.word	0x08044000
 80031b0:	08040006 	.word	0x08040006
 80031b4:	200017dc 	.word	0x200017dc
 80031b8:	200017da 	.word	0x200017da
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80031bc:	4b3a      	ldr	r3, [pc, #232]	; (80032a8 <EE_Init+0x3ac>)
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80031c4:	4939      	ldr	r1, [pc, #228]	; (80032ac <EE_Init+0x3b0>)
 80031c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d101      	bne.n	80031d2 <EE_Init+0x2d6>
          {
            x = VarIdx;
 80031ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80031d0:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80031d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80031d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80031d8:	429a      	cmp	r2, r3
 80031da:	d01d      	beq.n	8003218 <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80031dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80031de:	4a33      	ldr	r2, [pc, #204]	; (80032ac <EE_Init+0x3b0>)
 80031e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031e4:	4932      	ldr	r1, [pc, #200]	; (80032b0 <EE_Init+0x3b4>)
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f88e 	bl	8003308 <EE_ReadVariable>
 80031ec:	4603      	mov	r3, r0
 80031ee:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80031f0:	8bbb      	ldrh	r3, [r7, #28]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d010      	beq.n	8003218 <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80031f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80031f8:	4a2c      	ldr	r2, [pc, #176]	; (80032ac <EE_Init+0x3b0>)
 80031fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031fe:	4a2c      	ldr	r2, [pc, #176]	; (80032b0 <EE_Init+0x3b4>)
 8003200:	8812      	ldrh	r2, [r2, #0]
 8003202:	4611      	mov	r1, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f000 f983 	bl	8003510 <EE_VerifyPageFullWriteVariable>
 800320a:	4603      	mov	r3, r0
 800320c:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800320e:	8bfb      	ldrh	r3, [r7, #30]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <EE_Init+0x31c>
              {
                return EepromStatus;
 8003214:	8bfb      	ldrh	r3, [r7, #30]
 8003216:	e042      	b.n	800329e <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8003218:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800321a:	3301      	adds	r3, #1
 800321c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800321e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003220:	2b63      	cmp	r3, #99	; 0x63
 8003222:	d9cb      	bls.n	80031bc <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	4921      	ldr	r1, [pc, #132]	; (80032b4 <EE_Init+0x3b8>)
 800322e:	2001      	movs	r0, #1
 8003230:	f003 faec 	bl	800680c <HAL_FLASH_Program>
 8003234:	4603      	mov	r3, r0
 8003236:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8003238:	7efb      	ldrb	r3, [r7, #27]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <EE_Init+0x348>
        {
          return FlashStatus;
 800323e:	7efb      	ldrb	r3, [r7, #27]
 8003240:	b29b      	uxth	r3, r3
 8003242:	e02c      	b.n	800329e <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 8003244:	2306      	movs	r3, #6
 8003246:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8003248:	2301      	movs	r3, #1
 800324a:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800324c:	2302      	movs	r3, #2
 800324e:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8003250:	4819      	ldr	r0, [pc, #100]	; (80032b8 <EE_Init+0x3bc>)
 8003252:	f000 f833 	bl	80032bc <EE_VerifyPageFullyErased>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d11c      	bne.n	8003296 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800325c:	f107 0214 	add.w	r2, r7, #20
 8003260:	463b      	mov	r3, r7
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f003 fc77 	bl	8006b58 <HAL_FLASHEx_Erase>
 800326a:	4603      	mov	r3, r0
 800326c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800326e:	7efb      	ldrb	r3, [r7, #27]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d010      	beq.n	8003296 <EE_Init+0x39a>
          {
            return FlashStatus;
 8003274:	7efb      	ldrb	r3, [r7, #27]
 8003276:	b29b      	uxth	r3, r3
 8003278:	e011      	b.n	800329e <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 800327a:	f000 f8b1 	bl	80033e0 <EE_Format>
 800327e:	4603      	mov	r3, r0
 8003280:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8003282:	7efb      	ldrb	r3, [r7, #27]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <EE_Init+0x39e>
      {
        return FlashStatus;
 8003288:	7efb      	ldrb	r3, [r7, #27]
 800328a:	b29b      	uxth	r3, r3
 800328c:	e007      	b.n	800329e <EE_Init+0x3a2>
      break;
 800328e:	bf00      	nop
 8003290:	e004      	b.n	800329c <EE_Init+0x3a0>
      break;
 8003292:	bf00      	nop
 8003294:	e002      	b.n	800329c <EE_Init+0x3a0>
      break;
 8003296:	bf00      	nop
 8003298:	e000      	b.n	800329c <EE_Init+0x3a0>
      }
      break;
 800329a:	bf00      	nop
  }

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3728      	adds	r7, #40	; 0x28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	08044006 	.word	0x08044006
 80032ac:	200017dc 	.word	0x200017dc
 80032b0:	200017da 	.word	0x200017da
 80032b4:	08044000 	.word	0x08044000
 80032b8:	08040000 	.word	0x08040000

080032bc <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 80032c4:	2301      	movs	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 80032c8:	f245 5355 	movw	r3, #21845	; 0x5555
 80032cc:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 80032ce:	e00d      	b.n	80032ec <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80032d6:	897b      	ldrh	r3, [r7, #10]
 80032d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032dc:	4293      	cmp	r3, r2
 80032de:	d002      	beq.n	80032e6 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]

      break;
 80032e4:	e006      	b.n	80032f4 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3304      	adds	r3, #4
 80032ea:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a05      	ldr	r2, [pc, #20]	; (8003304 <EE_VerifyPageFullyErased+0x48>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d3ed      	bcc.n	80032d0 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	b29b      	uxth	r3, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	08044000 	.word	0x08044000

08003308 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	6039      	str	r1, [r7, #0]
 8003312:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8003314:	2300      	movs	r3, #0
 8003316:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8003318:	f245 5355 	movw	r3, #21845	; 0x5555
 800331c:	81bb      	strh	r3, [r7, #12]
 800331e:	2301      	movs	r3, #1
 8003320:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8003322:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <EE_ReadVariable+0x8c>)
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <EE_ReadVariable+0x8c>)
 8003328:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800332a:	2000      	movs	r0, #0
 800332c:	f000 f8aa 	bl	8003484 <EE_FindValidPage>
 8003330:	4603      	mov	r3, r0
 8003332:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8003334:	89fb      	ldrh	r3, [r7, #14]
 8003336:	2bab      	cmp	r3, #171	; 0xab
 8003338:	d101      	bne.n	800333e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800333a:	23ab      	movs	r3, #171	; 0xab
 800333c:	e025      	b.n	800338a <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800333e:	89fb      	ldrh	r3, [r7, #14]
 8003340:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003344:	3310      	adds	r3, #16
 8003346:	039b      	lsls	r3, r3, #14
 8003348:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800334a:	89fb      	ldrh	r3, [r7, #14]
 800334c:	3301      	adds	r3, #1
 800334e:	039a      	lsls	r2, r3, #14
 8003350:	4b11      	ldr	r3, [pc, #68]	; (8003398 <EE_ReadVariable+0x90>)
 8003352:	4413      	add	r3, r2
 8003354:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8003356:	e012      	b.n	800337e <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800335e:	89ba      	ldrh	r2, [r7, #12]
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	429a      	cmp	r2, r3
 8003364:	d108      	bne.n	8003378 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	3b02      	subs	r3, #2
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	b29a      	uxth	r2, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	82fb      	strh	r3, [r7, #22]

      break;
 8003376:	e007      	b.n	8003388 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	3b04      	subs	r3, #4
 800337c:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	3302      	adds	r3, #2
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	429a      	cmp	r2, r3
 8003386:	d8e7      	bhi.n	8003358 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8003388:	8afb      	ldrh	r3, [r7, #22]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	08040000 	.word	0x08040000
 8003398:	0803fffe 	.word	0x0803fffe

0800339c <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	460a      	mov	r2, r1
 80033a6:	80fb      	strh	r3, [r7, #6]
 80033a8:	4613      	mov	r3, r2
 80033aa:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80033b0:	88ba      	ldrh	r2, [r7, #4]
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f8aa 	bl	8003510 <EE_VerifyPageFullWriteVariable>
 80033bc:	4603      	mov	r3, r0
 80033be:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80033c0:	89fb      	ldrh	r3, [r7, #14]
 80033c2:	2b80      	cmp	r3, #128	; 0x80
 80033c4:	d107      	bne.n	80033d6 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80033c6:	88ba      	ldrh	r2, [r7, #4]
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f901 	bl	80035d4 <EE_PageTransfer>
 80033d2:	4603      	mov	r3, r0
 80033d4:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80033d6:	89fb      	ldrh	r3, [r7, #14]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 80033ee:	2300      	movs	r3, #0
 80033f0:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 80033f2:	2306      	movs	r3, #6
 80033f4:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80033fa:	2302      	movs	r3, #2
 80033fc:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80033fe:	481f      	ldr	r0, [pc, #124]	; (800347c <EE_Format+0x9c>)
 8003400:	f7ff ff5c 	bl	80032bc <EE_VerifyPageFullyErased>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10d      	bne.n	8003426 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 800340a:	f107 0218 	add.w	r2, r7, #24
 800340e:	1d3b      	adds	r3, r7, #4
 8003410:	4611      	mov	r1, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f003 fba0 	bl	8006b58 <HAL_FLASHEx_Erase>
 8003418:	4603      	mov	r3, r0
 800341a:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 800341c:	7ffb      	ldrb	r3, [r7, #31]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <EE_Format+0x46>
    {
      return FlashStatus;
 8003422:	7ffb      	ldrb	r3, [r7, #31]
 8003424:	e025      	b.n	8003472 <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	4913      	ldr	r1, [pc, #76]	; (800347c <EE_Format+0x9c>)
 8003430:	2001      	movs	r0, #1
 8003432:	f003 f9eb 	bl	800680c <HAL_FLASH_Program>
 8003436:	4603      	mov	r3, r0
 8003438:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800343a:	7ffb      	ldrb	r3, [r7, #31]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <EE_Format+0x64>
  {
    return FlashStatus;
 8003440:	7ffb      	ldrb	r3, [r7, #31]
 8003442:	e016      	b.n	8003472 <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8003444:	2307      	movs	r3, #7
 8003446:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8003448:	480d      	ldr	r0, [pc, #52]	; (8003480 <EE_Format+0xa0>)
 800344a:	f7ff ff37 	bl	80032bc <EE_VerifyPageFullyErased>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10d      	bne.n	8003470 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8003454:	f107 0218 	add.w	r2, r7, #24
 8003458:	1d3b      	adds	r3, r7, #4
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f003 fb7b 	bl	8006b58 <HAL_FLASHEx_Erase>
 8003462:	4603      	mov	r3, r0
 8003464:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8003466:	7ffb      	ldrb	r3, [r7, #31]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <EE_Format+0x90>
    {
      return FlashStatus;
 800346c:	7ffb      	ldrb	r3, [r7, #31]
 800346e:	e000      	b.n	8003472 <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	08040000 	.word	0x08040000
 8003480:	08044000 	.word	0x08044000

08003484 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800348e:	2306      	movs	r3, #6
 8003490:	81fb      	strh	r3, [r7, #14]
 8003492:	2306      	movs	r3, #6
 8003494:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8003496:	4b1c      	ldr	r3, [pc, #112]	; (8003508 <EE_FindValidPage+0x84>)
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <EE_FindValidPage+0x88>)
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01b      	beq.n	80034e0 <EE_FindValidPage+0x5c>
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d125      	bne.n	80034f8 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 80034ac:	89bb      	ldrh	r3, [r7, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d108      	bne.n	80034c4 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 80034b2:	89fb      	ldrh	r3, [r7, #14]
 80034b4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d101      	bne.n	80034c0 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 80034bc:	2300      	movs	r3, #0
 80034be:	e01c      	b.n	80034fa <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 80034c0:	2301      	movs	r3, #1
 80034c2:	e01a      	b.n	80034fa <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 80034c4:	89fb      	ldrh	r3, [r7, #14]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d108      	bne.n	80034dc <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 80034ca:	89bb      	ldrh	r3, [r7, #12]
 80034cc:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d101      	bne.n	80034d8 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 80034d4:	2301      	movs	r3, #1
 80034d6:	e010      	b.n	80034fa <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 80034d8:	2300      	movs	r3, #0
 80034da:	e00e      	b.n	80034fa <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 80034dc:	23ab      	movs	r3, #171	; 0xab
 80034de:	e00c      	b.n	80034fa <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 80034e0:	89fb      	ldrh	r3, [r7, #14]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 80034e6:	2300      	movs	r3, #0
 80034e8:	e007      	b.n	80034fa <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 80034ea:	89bb      	ldrh	r3, [r7, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 80034f0:	2301      	movs	r3, #1
 80034f2:	e002      	b.n	80034fa <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 80034f4:	23ab      	movs	r3, #171	; 0xab
 80034f6:	e000      	b.n	80034fa <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 80034f8:	2300      	movs	r3, #0
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	08040000 	.word	0x08040000
 800350c:	08044000 	.word	0x08044000

08003510 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8003510:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003514:	b086      	sub	sp, #24
 8003516:	af00      	add	r7, sp, #0
 8003518:	4603      	mov	r3, r0
 800351a:	460a      	mov	r2, r1
 800351c:	80fb      	strh	r3, [r7, #6]
 800351e:	4613      	mov	r3, r2
 8003520:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8003526:	2300      	movs	r3, #0
 8003528:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 800352a:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <EE_VerifyPageFullWriteVariable+0xb8>)
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	4b27      	ldr	r3, [pc, #156]	; (80035cc <EE_VerifyPageFullWriteVariable+0xbc>)
 8003530:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8003532:	2001      	movs	r0, #1
 8003534:	f7ff ffa6 	bl	8003484 <EE_FindValidPage>
 8003538:	4603      	mov	r3, r0
 800353a:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800353c:	8a3b      	ldrh	r3, [r7, #16]
 800353e:	2bab      	cmp	r3, #171	; 0xab
 8003540:	d101      	bne.n	8003546 <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8003542:	23ab      	movs	r3, #171	; 0xab
 8003544:	e03b      	b.n	80035be <EE_VerifyPageFullWriteVariable+0xae>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8003546:	8a3b      	ldrh	r3, [r7, #16]
 8003548:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800354c:	3310      	adds	r3, #16
 800354e:	039b      	lsls	r3, r3, #14
 8003550:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8003552:	8a3b      	ldrh	r3, [r7, #16]
 8003554:	3301      	adds	r3, #1
 8003556:	039a      	lsls	r2, r3, #14
 8003558:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <EE_VerifyPageFullWriteVariable+0xc0>)
 800355a:	4413      	add	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 800355e:	e029      	b.n	80035b4 <EE_VerifyPageFullWriteVariable+0xa4>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003568:	d121      	bne.n	80035ae <EE_VerifyPageFullWriteVariable+0x9e>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 800356a:	88bb      	ldrh	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	461c      	mov	r4, r3
 8003570:	4615      	mov	r5, r2
 8003572:	4622      	mov	r2, r4
 8003574:	462b      	mov	r3, r5
 8003576:	6979      	ldr	r1, [r7, #20]
 8003578:	2001      	movs	r0, #1
 800357a:	f003 f947 	bl	800680c <HAL_FLASH_Program>
 800357e:	4603      	mov	r3, r0
 8003580:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8003582:	7cfb      	ldrb	r3, [r7, #19]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <EE_VerifyPageFullWriteVariable+0x7e>
      {
        return FlashStatus;
 8003588:	7cfb      	ldrb	r3, [r7, #19]
 800358a:	b29b      	uxth	r3, r3
 800358c:	e017      	b.n	80035be <EE_VerifyPageFullWriteVariable+0xae>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	1c99      	adds	r1, r3, #2
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	2200      	movs	r2, #0
 8003596:	4698      	mov	r8, r3
 8003598:	4691      	mov	r9, r2
 800359a:	4642      	mov	r2, r8
 800359c:	464b      	mov	r3, r9
 800359e:	2001      	movs	r0, #1
 80035a0:	f003 f934 	bl	800680c <HAL_FLASH_Program>
 80035a4:	4603      	mov	r3, r0
 80035a6:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	e007      	b.n	80035be <EE_VerifyPageFullWriteVariable+0xae>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	3304      	adds	r3, #4
 80035b2:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d3d1      	bcc.n	8003560 <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80035bc:	2380      	movs	r3, #128	; 0x80
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035c8:	08040000 	.word	0x08040000
 80035cc:	08044000 	.word	0x08044000
 80035d0:	0803ffff 	.word	0x0803ffff

080035d4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08c      	sub	sp, #48	; 0x30
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	460a      	mov	r2, r1
 80035de:	80fb      	strh	r3, [r7, #6]
 80035e0:	4613      	mov	r3, r2
 80035e2:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 80035ea:	4b54      	ldr	r3, [pc, #336]	; (800373c <EE_PageTransfer+0x168>)
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80035f6:	2300      	movs	r3, #0
 80035f8:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	847b      	strh	r3, [r7, #34]	; 0x22
 80035fe:	2300      	movs	r3, #0
 8003600:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8003606:	2000      	movs	r0, #0
 8003608:	f7ff ff3c 	bl	8003484 <EE_FindValidPage>
 800360c:	4603      	mov	r3, r0
 800360e:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8003610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003612:	2b01      	cmp	r3, #1
 8003614:	d104      	bne.n	8003620 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8003616:	4b49      	ldr	r3, [pc, #292]	; (800373c <EE_PageTransfer+0x168>)
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 800361a:	2307      	movs	r3, #7
 800361c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800361e:	e009      	b.n	8003634 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8003620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	d104      	bne.n	8003630 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8003626:	4b46      	ldr	r3, [pc, #280]	; (8003740 <EE_PageTransfer+0x16c>)
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 800362a:	2306      	movs	r3, #6
 800362c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800362e:	e001      	b.n	8003634 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8003630:	23ab      	movs	r3, #171	; 0xab
 8003632:	e07e      	b.n	8003732 <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8003634:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800363e:	2001      	movs	r0, #1
 8003640:	f003 f8e4 	bl	800680c <HAL_FLASH_Program>
 8003644:	4603      	mov	r3, r0
 8003646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800364a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8003652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003656:	b29b      	uxth	r3, r3
 8003658:	e06b      	b.n	8003732 <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800365a:	88ba      	ldrh	r2, [r7, #4]
 800365c:	88fb      	ldrh	r3, [r7, #6]
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff ff55 	bl	8003510 <EE_VerifyPageFullWriteVariable>
 8003666:	4603      	mov	r3, r0
 8003668:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800366a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8003670:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003672:	e05e      	b.n	8003732 <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8003674:	2300      	movs	r3, #0
 8003676:	853b      	strh	r3, [r7, #40]	; 0x28
 8003678:	e027      	b.n	80036ca <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800367a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800367c:	4a31      	ldr	r2, [pc, #196]	; (8003744 <EE_PageTransfer+0x170>)
 800367e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003682:	88fa      	ldrh	r2, [r7, #6]
 8003684:	429a      	cmp	r2, r3
 8003686:	d01d      	beq.n	80036c4 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8003688:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800368a:	4a2e      	ldr	r2, [pc, #184]	; (8003744 <EE_PageTransfer+0x170>)
 800368c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003690:	492d      	ldr	r1, [pc, #180]	; (8003748 <EE_PageTransfer+0x174>)
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fe38 	bl	8003308 <EE_ReadVariable>
 8003698:	4603      	mov	r3, r0
 800369a:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 800369c:	8c3b      	ldrh	r3, [r7, #32]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d010      	beq.n	80036c4 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80036a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036a4:	4a27      	ldr	r2, [pc, #156]	; (8003744 <EE_PageTransfer+0x170>)
 80036a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036aa:	4a27      	ldr	r2, [pc, #156]	; (8003748 <EE_PageTransfer+0x174>)
 80036ac:	8812      	ldrh	r2, [r2, #0]
 80036ae:	4611      	mov	r1, r2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ff2d 	bl	8003510 <EE_VerifyPageFullWriteVariable>
 80036b6:	4603      	mov	r3, r0
 80036b8:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 80036ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 80036c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036c2:	e036      	b.n	8003732 <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80036c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036c6:	3301      	adds	r3, #1
 80036c8:	853b      	strh	r3, [r7, #40]	; 0x28
 80036ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036cc:	2b63      	cmp	r3, #99	; 0x63
 80036ce:	d9d4      	bls.n	800367a <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 80036d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036d6:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 80036d8:	2301      	movs	r3, #1
 80036da:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80036dc:	2302      	movs	r3, #2
 80036de:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 80036e0:	f107 021c 	add.w	r2, r7, #28
 80036e4:	f107 0308 	add.w	r3, r7, #8
 80036e8:	4611      	mov	r1, r2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f003 fa34 	bl	8006b58 <HAL_FLASHEx_Erase>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80036f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 80036fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003702:	b29b      	uxth	r3, r3
 8003704:	e015      	b.n	8003732 <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003710:	2001      	movs	r0, #1
 8003712:	f003 f87b 	bl	800680c <HAL_FLASH_Program>
 8003716:	4603      	mov	r3, r0
 8003718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800371c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8003724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003728:	b29b      	uxth	r3, r3
 800372a:	e002      	b.n	8003732 <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 800372c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003730:	b29b      	uxth	r3, r3
}
 8003732:	4618      	mov	r0, r3
 8003734:	3730      	adds	r7, #48	; 0x30
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	08040000 	.word	0x08040000
 8003740:	08044000 	.word	0x08044000
 8003744:	200017dc 	.word	0x200017dc
 8003748:	200017da 	.word	0x200017da

0800374c <InitVirtAddTab>:
#include "Parameters.h"

//EEPROM Emulation
uint16_t VirtAddVarTab[NB_OF_VAR];

void InitVirtAddTab() {
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8003752:	f003 f8af 	bl	80068b4 <HAL_FLASH_Unlock>
	EE_Init();
 8003756:	f7ff fbd1 	bl	8002efc <EE_Init>
	uint8_t counter = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 800375e:	2300      	movs	r3, #0
 8003760:	71bb      	strb	r3, [r7, #6]
 8003762:	e01e      	b.n	80037a2 <InitVirtAddTab+0x56>
		if(params[i]->isFlash == true) {
 8003764:	79bb      	ldrb	r3, [r7, #6]
 8003766:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <InitVirtAddTab+0x68>)
 8003768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003770:	2b00      	cmp	r3, #0
 8003772:	d013      	beq.n	800379c <InitVirtAddTab+0x50>
			VirtAddVarTab[counter] = counter+1;
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	b29a      	uxth	r2, r3
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	3201      	adds	r2, #1
 800377c:	b291      	uxth	r1, r2
 800377e:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <InitVirtAddTab+0x6c>)
 8003780:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			VirtAddVarTab[counter+1] = counter+2;
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	b29a      	uxth	r2, r3
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	3301      	adds	r3, #1
 800378c:	3202      	adds	r2, #2
 800378e:	b291      	uxth	r1, r2
 8003790:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <InitVirtAddTab+0x6c>)
 8003792:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			counter +=2;
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	3302      	adds	r3, #2
 800379a:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 800379c:	79bb      	ldrb	r3, [r7, #6]
 800379e:	3301      	adds	r3, #1
 80037a0:	71bb      	strb	r3, [r7, #6]
 80037a2:	79bb      	ldrb	r3, [r7, #6]
 80037a4:	2b63      	cmp	r3, #99	; 0x63
 80037a6:	d9dd      	bls.n	8003764 <InitVirtAddTab+0x18>
		}
	}
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20001160 	.word	0x20001160
 80037b8:	200017dc 	.word	0x200017dc

080037bc <ReadFlash>:

void ReadFlash() {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
	uint8_t counter = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 80037c6:	2300      	movs	r3, #0
 80037c8:	71bb      	strb	r3, [r7, #6]
 80037ca:	e02f      	b.n	800382c <ReadFlash+0x70>
		if(params[i]->isFlash == true) {
 80037cc:	79bb      	ldrb	r3, [r7, #6]
 80037ce:	4a1b      	ldr	r2, [pc, #108]	; (800383c <ReadFlash+0x80>)
 80037d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d024      	beq.n	8003826 <ReadFlash+0x6a>
			uint16_t var[2];
			EE_ReadVariable(VirtAddVarTab[counter++], &var[0]);
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	71fa      	strb	r2, [r7, #7]
 80037e2:	461a      	mov	r2, r3
 80037e4:	4b16      	ldr	r3, [pc, #88]	; (8003840 <ReadFlash+0x84>)
 80037e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80037ea:	463a      	mov	r2, r7
 80037ec:	4611      	mov	r1, r2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fd8a 	bl	8003308 <EE_ReadVariable>
			EE_ReadVariable(VirtAddVarTab[counter++], &var[1]);
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	71fa      	strb	r2, [r7, #7]
 80037fa:	461a      	mov	r2, r3
 80037fc:	4b10      	ldr	r3, [pc, #64]	; (8003840 <ReadFlash+0x84>)
 80037fe:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003802:	463b      	mov	r3, r7
 8003804:	3302      	adds	r3, #2
 8003806:	4619      	mov	r1, r3
 8003808:	4610      	mov	r0, r2
 800380a:	f7ff fd7d 	bl	8003308 <EE_ReadVariable>
			params[i]->value.flashType[0] = var[0];
 800380e:	79bb      	ldrb	r3, [r7, #6]
 8003810:	4a0a      	ldr	r2, [pc, #40]	; (800383c <ReadFlash+0x80>)
 8003812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003816:	883a      	ldrh	r2, [r7, #0]
 8003818:	861a      	strh	r2, [r3, #48]	; 0x30
			params[i]->value.flashType[1] = var[1];
 800381a:	79bb      	ldrb	r3, [r7, #6]
 800381c:	4a07      	ldr	r2, [pc, #28]	; (800383c <ReadFlash+0x80>)
 800381e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003822:	887a      	ldrh	r2, [r7, #2]
 8003824:	865a      	strh	r2, [r3, #50]	; 0x32
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 8003826:	79bb      	ldrb	r3, [r7, #6]
 8003828:	3301      	adds	r3, #1
 800382a:	71bb      	strb	r3, [r7, #6]
 800382c:	79bb      	ldrb	r3, [r7, #6]
 800382e:	2b63      	cmp	r3, #99	; 0x63
 8003830:	d9cc      	bls.n	80037cc <ReadFlash+0x10>
		}
	}
}
 8003832:	bf00      	nop
 8003834:	bf00      	nop
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20001160 	.word	0x20001160
 8003840:	200017dc 	.word	0x200017dc

08003844 <SaveToFlash>:


void SaveToFlash() {
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
	uint8_t counter = 0;
 800384a:	2300      	movs	r3, #0
 800384c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 800384e:	2300      	movs	r3, #0
 8003850:	71bb      	strb	r3, [r7, #6]
 8003852:	e02e      	b.n	80038b2 <SaveToFlash+0x6e>
		if(params[i]->isFlash == true) {
 8003854:	79bb      	ldrb	r3, [r7, #6]
 8003856:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <SaveToFlash+0x80>)
 8003858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003860:	2b00      	cmp	r3, #0
 8003862:	d023      	beq.n	80038ac <SaveToFlash+0x68>
			uint16_t var[2];
			var[0] = params[i]->value.flashType[0];
 8003864:	79bb      	ldrb	r3, [r7, #6]
 8003866:	4a17      	ldr	r2, [pc, #92]	; (80038c4 <SaveToFlash+0x80>)
 8003868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800386e:	803b      	strh	r3, [r7, #0]
			var[1] = params[i]->value.flashType[1];
 8003870:	79bb      	ldrb	r3, [r7, #6]
 8003872:	4a14      	ldr	r2, [pc, #80]	; (80038c4 <SaveToFlash+0x80>)
 8003874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003878:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800387a:	807b      	strh	r3, [r7, #2]
			EE_WriteVariable(VirtAddVarTab[counter++], var[0]);
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	71fa      	strb	r2, [r7, #7]
 8003882:	461a      	mov	r2, r3
 8003884:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <SaveToFlash+0x84>)
 8003886:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800388a:	883a      	ldrh	r2, [r7, #0]
 800388c:	4611      	mov	r1, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff fd84 	bl	800339c <EE_WriteVariable>
			EE_WriteVariable(VirtAddVarTab[counter++], var[1]);
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	71fa      	strb	r2, [r7, #7]
 800389a:	461a      	mov	r2, r3
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <SaveToFlash+0x84>)
 800389e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80038a2:	887a      	ldrh	r2, [r7, #2]
 80038a4:	4611      	mov	r1, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fd78 	bl	800339c <EE_WriteVariable>
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 80038ac:	79bb      	ldrb	r3, [r7, #6]
 80038ae:	3301      	adds	r3, #1
 80038b0:	71bb      	strb	r3, [r7, #6]
 80038b2:	79bb      	ldrb	r3, [r7, #6]
 80038b4:	2b63      	cmp	r3, #99	; 0x63
 80038b6:	d9cd      	bls.n	8003854 <SaveToFlash+0x10>
		}
	}
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20001160 	.word	0x20001160
 80038c8:	200017dc 	.word	0x200017dc

080038cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	InitParams();
 80038d2:	f7fd fba1 	bl	8001018 <InitParams>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038d6:	f001 fe01 	bl	80054dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038da:	f000 f9c9 	bl	8003c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038de:	f000 fed5 	bl	800468c <MX_GPIO_Init>
  MX_DMA_Init();
 80038e2:	f000 feab 	bl	800463c <MX_DMA_Init>
  MX_ADC1_Init();
 80038e6:	f000 fa2f 	bl	8003d48 <MX_ADC1_Init>
  MX_ADC2_Init();
 80038ea:	f000 fac5 	bl	8003e78 <MX_ADC2_Init>
  MX_TIM1_Init();
 80038ee:	f000 fb59 	bl	8003fa4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80038f2:	f000 fbff 	bl	80040f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80038f6:	f000 fc49 	bl	800418c <MX_TIM3_Init>
  MX_TIM4_Init();
 80038fa:	f000 fccb 	bl	8004294 <MX_TIM4_Init>
  MX_TIM8_Init();
 80038fe:	f000 fdd1 	bl	80044a4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8003902:	f000 fe71 	bl	80045e8 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8003906:	f000 fd49 	bl	800439c <MX_TIM5_Init>
  MX_TIM6_Init();
 800390a:	f000 fd95 	bl	8004438 <MX_TIM6_Init>
  MX_IWDG_Init();
 800390e:	f000 fb2f 	bl	8003f70 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  //Global 100us clock start (RTC - 120 hours limit)
  HAL_TIM_Base_Start(&htim5);
 8003912:	48ab      	ldr	r0, [pc, #684]	; (8003bc0 <main+0x2f4>)
 8003914:	f004 f932 	bl	8007b7c <HAL_TIM_Base_Start>

  //Gate PWMs init
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003918:	2100      	movs	r1, #0
 800391a:	48aa      	ldr	r0, [pc, #680]	; (8003bc4 <main+0x2f8>)
 800391c:	f004 fa60 	bl	8007de0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003920:	2104      	movs	r1, #4
 8003922:	48a8      	ldr	r0, [pc, #672]	; (8003bc4 <main+0x2f8>)
 8003924:	f004 fa5c 	bl	8007de0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003928:	2100      	movs	r1, #0
 800392a:	48a7      	ldr	r0, [pc, #668]	; (8003bc8 <main+0x2fc>)
 800392c:	f004 fa58 	bl	8007de0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003930:	2104      	movs	r1, #4
 8003932:	48a5      	ldr	r0, [pc, #660]	; (8003bc8 <main+0x2fc>)
 8003934:	f004 fa54 	bl	8007de0 <HAL_TIM_PWM_Start>
  //Set_U_Heater PWM (10 kHz, 16800)
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003938:	2108      	movs	r1, #8
 800393a:	48a4      	ldr	r0, [pc, #656]	; (8003bcc <main+0x300>)
 800393c:	f004 fa50 	bl	8007de0 <HAL_TIM_PWM_Start>
  //Timer @84MHz for clock reference
  HAL_TIM_Base_Start(&htim2);
 8003940:	48a3      	ldr	r0, [pc, #652]	; (8003bd0 <main+0x304>)
 8003942:	f004 f91b 	bl	8007b7c <HAL_TIM_Base_Start>
  //External clock source for counter
  counterPeriod = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8003946:	4ba3      	ldr	r3, [pc, #652]	; (8003bd4 <main+0x308>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	b29a      	uxth	r2, r3
 800394e:	4ba2      	ldr	r3, [pc, #648]	; (8003bd8 <main+0x30c>)
 8003950:	801a      	strh	r2, [r3, #0]
  __HAL_TIM_CLEAR_IT(&htim1,TIM_IT_UPDATE);
 8003952:	4ba0      	ldr	r3, [pc, #640]	; (8003bd4 <main+0x308>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f06f 0201 	mvn.w	r2, #1
 800395a:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim1);
 800395c:	489d      	ldr	r0, [pc, #628]	; (8003bd4 <main+0x308>)
 800395e:	f004 f975 	bl	8007c4c <HAL_TIM_Base_Start_IT>

  //ADC DMA start (10 channels)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)dmaADC1buffer, 6);
 8003962:	2206      	movs	r2, #6
 8003964:	499d      	ldr	r1, [pc, #628]	; (8003bdc <main+0x310>)
 8003966:	489e      	ldr	r0, [pc, #632]	; (8003be0 <main+0x314>)
 8003968:	f001 fe6e 	bl	8005648 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)dmaADC2buffer, 4);
 800396c:	2204      	movs	r2, #4
 800396e:	499d      	ldr	r1, [pc, #628]	; (8003be4 <main+0x318>)
 8003970:	489d      	ldr	r0, [pc, #628]	; (8003be8 <main+0x31c>)
 8003972:	f001 fe69 	bl	8005648 <HAL_ADC_Start_DMA>

  //100ms interrupt for ADC and other staff
  __HAL_TIM_CLEAR_IT(&htim6,TIM_IT_UPDATE);
 8003976:	4b9d      	ldr	r3, [pc, #628]	; (8003bec <main+0x320>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f06f 0201 	mvn.w	r2, #1
 800397e:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim6);
 8003980:	489a      	ldr	r0, [pc, #616]	; (8003bec <main+0x320>)
 8003982:	f004 f963 	bl	8007c4c <HAL_TIM_Base_Start_IT>

  //UART interrupt enabling
  HAL_UART_Receive_IT(&huart1, RXbufferChar, 1);
 8003986:	2201      	movs	r2, #1
 8003988:	4999      	ldr	r1, [pc, #612]	; (8003bf0 <main+0x324>)
 800398a:	489a      	ldr	r0, [pc, #616]	; (8003bf4 <main+0x328>)
 800398c:	f005 fa7b 	bl	8008e86 <HAL_UART_Receive_IT>

  //Heater PWM init
  __HAL_TIM_SET_PRESCALER(&htim3, 0);
 8003990:	4b8d      	ldr	r3, [pc, #564]	; (8003bc8 <main+0x2fc>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2200      	movs	r2, #0
 8003996:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_TIM_SET_AUTORELOAD(&htim3, freq_PWM_MO/freq_PWM_CH1 - 1);
 8003998:	4b97      	ldr	r3, [pc, #604]	; (8003bf8 <main+0x32c>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4b97      	ldr	r3, [pc, #604]	; (8003bfc <main+0x330>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a4:	4b88      	ldr	r3, [pc, #544]	; (8003bc8 <main+0x2fc>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3a01      	subs	r2, #1
 80039aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80039ac:	4b92      	ldr	r3, [pc, #584]	; (8003bf8 <main+0x32c>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b92      	ldr	r3, [pc, #584]	; (8003bfc <main+0x330>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	4a83      	ldr	r2, [pc, #524]	; (8003bc8 <main+0x2fc>)
 80039bc:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SET_PRESCALER(&htim4, 0);
 80039be:	4b81      	ldr	r3, [pc, #516]	; (8003bc4 <main+0x2f8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2200      	movs	r2, #0
 80039c4:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_TIM_SET_AUTORELOAD(&htim4, freq_PWM_MO/freq_PWM_CH2 - 1);
 80039c6:	4b8c      	ldr	r3, [pc, #560]	; (8003bf8 <main+0x32c>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4b8d      	ldr	r3, [pc, #564]	; (8003c00 <main+0x334>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80039d2:	4b7c      	ldr	r3, [pc, #496]	; (8003bc4 <main+0x2f8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3a01      	subs	r2, #1
 80039d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80039da:	4b87      	ldr	r3, [pc, #540]	; (8003bf8 <main+0x32c>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	4b88      	ldr	r3, [pc, #544]	; (8003c00 <main+0x334>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	4a76      	ldr	r2, [pc, #472]	; (8003bc4 <main+0x2f8>)
 80039ea:	60d3      	str	r3, [r2, #12]
  //Init flash reading
  InitVirtAddTab();
 80039ec:	f7ff feae 	bl	800374c <InitVirtAddTab>
  //SaveToFlash();
  ReadFlash();
 80039f0:	f7ff fee4 	bl	80037bc <ReadFlash>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
{
	//Watch dog reset
	HAL_IWDG_Refresh(&hiwdg);
 80039f4:	4883      	ldr	r0, [pc, #524]	; (8003c04 <main+0x338>)
 80039f6:	f003 fbc8 	bl	800718a <HAL_IWDG_Refresh>
	//Heater PWM
	float dutyCH1 = getPWM_CH1().val_float/100.0;
 80039fa:	f7fe fe5d 	bl	80026b8 <getPWM_CH1>
 80039fe:	4603      	mov	r3, r0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fc fdb1 	bl	8000568 <__aeabi_f2d>
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	4b7f      	ldr	r3, [pc, #508]	; (8003c08 <main+0x33c>)
 8003a0c:	f7fc ff2e 	bl	800086c <__aeabi_ddiv>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	f7fd f8f6 	bl	8000c08 <__aeabi_d2f>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	607b      	str	r3, [r7, #4]
	if(getCH1_Polarity().val_bool == false) {
 8003a20:	f7fe fe9a 	bl	8002758 <getCH1_Polarity>
 8003a24:	4603      	mov	r3, r0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f083 0301 	eor.w	r3, r3, #1
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00f      	beq.n	8003a52 <main+0x186>
		dutyCH1 = dutyCH1*(-1.0);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fc fd98 	bl	8000568 <__aeabi_f2d>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	4619      	mov	r1, r3
 8003a40:	f7fd f8e2 	bl	8000c08 <__aeabi_d2f>
 8003a44:	4603      	mov	r3, r0
 8003a46:	ee07 3a90 	vmov	s15, r3
 8003a4a:	eef1 7a67 	vneg.f32	s15, s15
 8003a4e:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	if(dutyCH1 > 0) {
 8003a52:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5e:	dd28      	ble.n	8003ab2 <main+0x1e6>
		setGateH1A((valueTypes)(bool)false);
 8003a60:	2300      	movs	r3, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fd6a 	bl	800253c <setGateH1A>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8003a68:	4b57      	ldr	r3, [pc, #348]	; (8003bc8 <main+0x2fc>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, freq_PWM_MO/freq_PWM_CH1 * dutyCH1 - 1);
 8003a70:	4b61      	ldr	r3, [pc, #388]	; (8003bf8 <main+0x32c>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4b61      	ldr	r3, [pc, #388]	; (8003bfc <main+0x330>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	ee07 3a90 	vmov	s15, r3
 8003a80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a84:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a94:	4b4c      	ldr	r3, [pc, #304]	; (8003bc8 <main+0x2fc>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a9c:	ee17 2a90 	vmov	r2, s15
 8003aa0:	635a      	str	r2, [r3, #52]	; 0x34
		setGateH1B((valueTypes)(bool)true);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f362 0307 	bfi	r3, r2, #0, #8
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe fd6c 	bl	8002588 <setGateH1B>
 8003ab0:	e029      	b.n	8003b06 <main+0x23a>
	}
	else {
		setGateH1B((valueTypes)(bool)false);
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe fd67 	bl	8002588 <setGateH1B>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003aba:	4b43      	ldr	r3, [pc, #268]	; (8003bc8 <main+0x2fc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, freq_PWM_MO/freq_PWM_CH1 * (-dutyCH1) + 1);
 8003ac2:	4b4d      	ldr	r3, [pc, #308]	; (8003bf8 <main+0x32c>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4b4d      	ldr	r3, [pc, #308]	; (8003bfc <main+0x330>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ad6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ada:	eef1 7a67 	vneg.f32	s15, s15
 8003ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ae6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003aea:	4b37      	ldr	r3, [pc, #220]	; (8003bc8 <main+0x2fc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003af2:	ee17 2a90 	vmov	r2, s15
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38
		setGateH1A((valueTypes)(bool)true);
 8003af8:	2300      	movs	r3, #0
 8003afa:	2201      	movs	r2, #1
 8003afc:	f362 0307 	bfi	r3, r2, #0, #8
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe fd1b 	bl	800253c <setGateH1A>
	}

	float dutyCH2 = getPWM_CH2().val_float/100.0;
 8003b06:	f7fe fe0b 	bl	8002720 <getPWM_CH2>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fc fd2b 	bl	8000568 <__aeabi_f2d>
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	4b3c      	ldr	r3, [pc, #240]	; (8003c08 <main+0x33c>)
 8003b18:	f7fc fea8 	bl	800086c <__aeabi_ddiv>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4610      	mov	r0, r2
 8003b22:	4619      	mov	r1, r3
 8003b24:	f7fd f870 	bl	8000c08 <__aeabi_d2f>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	603b      	str	r3, [r7, #0]
	if(getCH2_Polarity().val_bool == false) {
 8003b2c:	f7fe fe30 	bl	8002790 <getCH2_Polarity>
 8003b30:	4603      	mov	r3, r0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f083 0301 	eor.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00f      	beq.n	8003b5e <main+0x292>
		dutyCH2 = dutyCH1*(-1.0);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fc fd12 	bl	8000568 <__aeabi_f2d>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	f7fd f85c 	bl	8000c08 <__aeabi_d2f>
 8003b50:	4603      	mov	r3, r0
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef1 7a67 	vneg.f32	s15, s15
 8003b5a:	edc7 7a00 	vstr	s15, [r7]
	}

	if(dutyCH2 > 0) {
 8003b5e:	edd7 7a00 	vldr	s15, [r7]
 8003b62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6a:	dd4f      	ble.n	8003c0c <main+0x340>
		setGateH2A((valueTypes)(bool)false);
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe fd30 	bl	80025d4 <setGateH2A>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8003b74:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <main+0x2f8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, freq_PWM_MO/freq_PWM_CH2 * dutyCH2 - 1);
 8003b7c:	4b1e      	ldr	r3, [pc, #120]	; (8003bf8 <main+0x32c>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b1f      	ldr	r3, [pc, #124]	; (8003c00 <main+0x334>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	ee07 3a90 	vmov	s15, r3
 8003b8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b90:	edd7 7a00 	vldr	s15, [r7]
 8003b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ba0:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <main+0x2f8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ba8:	ee17 2a90 	vmov	r2, s15
 8003bac:	635a      	str	r2, [r3, #52]	; 0x34
		setGateH2B((valueTypes)(bool)true);
 8003bae:	2300      	movs	r3, #0
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f362 0307 	bfi	r3, r2, #0, #8
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe fd32 	bl	8002620 <setGateH2B>
 8003bbc:	e71a      	b.n	80039f4 <main+0x128>
 8003bbe:	bf00      	nop
 8003bc0:	20001b20 	.word	0x20001b20
 8003bc4:	20001ad8 	.word	0x20001ad8
 8003bc8:	20001a90 	.word	0x20001a90
 8003bcc:	20001bb0 	.word	0x20001bb0
 8003bd0:	20001a48 	.word	0x20001a48
 8003bd4:	20001a00 	.word	0x20001a00
 8003bd8:	20001c3c 	.word	0x20001c3c
 8003bdc:	20001c44 	.word	0x20001c44
 8003be0:	200018a4 	.word	0x200018a4
 8003be4:	20001c50 	.word	0x20001c50
 8003be8:	200018ec 	.word	0x200018ec
 8003bec:	20001b68 	.word	0x20001b68
 8003bf0:	200017d8 	.word	0x200017d8
 8003bf4:	20001bf8 	.word	0x20001bf8
 8003bf8:	20000e9c 	.word	0x20000e9c
 8003bfc:	20000ea0 	.word	0x20000ea0
 8003c00:	20000ea4 	.word	0x20000ea4
 8003c04:	200019f4 	.word	0x200019f4
 8003c08:	40590000 	.word	0x40590000
	}
	else {
		setGateH2B((valueTypes)(bool)false);
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe fd06 	bl	8002620 <setGateH2B>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <main+0x398>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, freq_PWM_MO/freq_PWM_CH2 * (-dutyCH2) + 1);
 8003c1c:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <main+0x39c>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <main+0x3a0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	ee07 3a90 	vmov	s15, r3
 8003c2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c30:	edd7 7a00 	vldr	s15, [r7]
 8003c34:	eef1 7a67 	vneg.f32	s15, s15
 8003c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c44:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <main+0x398>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c4c:	ee17 2a90 	vmov	r2, s15
 8003c50:	639a      	str	r2, [r3, #56]	; 0x38
		setGateH2A((valueTypes)(bool)true);
 8003c52:	2300      	movs	r3, #0
 8003c54:	2201      	movs	r2, #1
 8003c56:	f362 0307 	bfi	r3, r2, #0, #8
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe fcba 	bl	80025d4 <setGateH2A>
{
 8003c60:	e6c8      	b.n	80039f4 <main+0x128>
 8003c62:	bf00      	nop
 8003c64:	20001ad8 	.word	0x20001ad8
 8003c68:	20000e9c 	.word	0x20000e9c
 8003c6c:	20000ea4 	.word	0x20000ea4

08003c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b094      	sub	sp, #80	; 0x50
 8003c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c76:	f107 0320 	add.w	r3, r7, #32
 8003c7a:	2230      	movs	r2, #48	; 0x30
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f006 f904 	bl	8009e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c84:	f107 030c 	add.w	r3, r7, #12
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c94:	2300      	movs	r3, #0
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	4b29      	ldr	r3, [pc, #164]	; (8003d40 <SystemClock_Config+0xd0>)
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	4a28      	ldr	r2, [pc, #160]	; (8003d40 <SystemClock_Config+0xd0>)
 8003c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ca4:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <SystemClock_Config+0xd0>)
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	607b      	str	r3, [r7, #4]
 8003cb4:	4b23      	ldr	r3, [pc, #140]	; (8003d44 <SystemClock_Config+0xd4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a22      	ldr	r2, [pc, #136]	; (8003d44 <SystemClock_Config+0xd4>)
 8003cba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <SystemClock_Config+0xd4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003ccc:	2309      	movs	r3, #9
 8003cce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003ce8:	23a8      	movs	r3, #168	; 0xa8
 8003cea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cec:	2302      	movs	r3, #2
 8003cee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cf4:	f107 0320 	add.w	r3, r7, #32
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f003 fa57 	bl	80071ac <HAL_RCC_OscConfig>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003d04:	f000 feaa 	bl	8004a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d08:	230f      	movs	r3, #15
 8003d0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003d20:	f107 030c 	add.w	r3, r7, #12
 8003d24:	2105      	movs	r1, #5
 8003d26:	4618      	mov	r0, r3
 8003d28:	f003 fcb8 	bl	800769c <HAL_RCC_ClockConfig>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003d32:	f000 fe93 	bl	8004a5c <Error_Handler>
  }
}
 8003d36:	bf00      	nop
 8003d38:	3750      	adds	r7, #80	; 0x50
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40007000 	.word	0x40007000

08003d48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d4e:	463b      	mov	r3, r7
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	605a      	str	r2, [r3, #4]
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003d5a:	4b44      	ldr	r3, [pc, #272]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003d5c:	4a44      	ldr	r2, [pc, #272]	; (8003e70 <MX_ADC1_Init+0x128>)
 8003d5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003d60:	4b42      	ldr	r3, [pc, #264]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003d62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003d68:	4b40      	ldr	r3, [pc, #256]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003d6e:	4b3f      	ldr	r3, [pc, #252]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003d74:	4b3d      	ldr	r3, [pc, #244]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003d7a:	4b3c      	ldr	r3, [pc, #240]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d82:	4b3a      	ldr	r3, [pc, #232]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d88:	4b38      	ldr	r3, [pc, #224]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003d8a:	4a3a      	ldr	r2, [pc, #232]	; (8003e74 <MX_ADC1_Init+0x12c>)
 8003d8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d8e:	4b37      	ldr	r3, [pc, #220]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8003d94:	4b35      	ldr	r3, [pc, #212]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003d96:	2206      	movs	r2, #6
 8003d98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003d9a:	4b34      	ldr	r3, [pc, #208]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003da2:	4b32      	ldr	r3, [pc, #200]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003da8:	4830      	ldr	r0, [pc, #192]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003daa:	f001 fc09 	bl	80055c0 <HAL_ADC_Init>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003db4:	f000 fe52 	bl	8004a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003dc0:	2307      	movs	r3, #7
 8003dc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003dc4:	463b      	mov	r3, r7
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4828      	ldr	r0, [pc, #160]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003dca:	f001 fd6b 	bl	80058a4 <HAL_ADC_ConfigChannel>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003dd4:	f000 fe42 	bl	8004a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003de0:	463b      	mov	r3, r7
 8003de2:	4619      	mov	r1, r3
 8003de4:	4821      	ldr	r0, [pc, #132]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003de6:	f001 fd5d 	bl	80058a4 <HAL_ADC_ConfigChannel>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003df0:	f000 fe34 	bl	8004a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003df4:	2302      	movs	r3, #2
 8003df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	4619      	mov	r1, r3
 8003e00:	481a      	ldr	r0, [pc, #104]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003e02:	f001 fd4f 	bl	80058a4 <HAL_ADC_ConfigChannel>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8003e0c:	f000 fe26 	bl	8004a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003e10:	2303      	movs	r3, #3
 8003e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003e14:	2304      	movs	r3, #4
 8003e16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e18:	463b      	mov	r3, r7
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4813      	ldr	r0, [pc, #76]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003e1e:	f001 fd41 	bl	80058a4 <HAL_ADC_ConfigChannel>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8003e28:	f000 fe18 	bl	8004a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003e30:	2305      	movs	r3, #5
 8003e32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e34:	463b      	mov	r3, r7
 8003e36:	4619      	mov	r1, r3
 8003e38:	480c      	ldr	r0, [pc, #48]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003e3a:	f001 fd33 	bl	80058a4 <HAL_ADC_ConfigChannel>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8003e44:	f000 fe0a 	bl	8004a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003e48:	2305      	movs	r3, #5
 8003e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003e4c:	2306      	movs	r3, #6
 8003e4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e50:	463b      	mov	r3, r7
 8003e52:	4619      	mov	r1, r3
 8003e54:	4805      	ldr	r0, [pc, #20]	; (8003e6c <MX_ADC1_Init+0x124>)
 8003e56:	f001 fd25 	bl	80058a4 <HAL_ADC_ConfigChannel>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8003e60:	f000 fdfc 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	200018a4 	.word	0x200018a4
 8003e70:	40012000 	.word	0x40012000
 8003e74:	0f000001 	.word	0x0f000001

08003e78 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003e7e:	463b      	mov	r3, r7
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003e8a:	4b36      	ldr	r3, [pc, #216]	; (8003f64 <MX_ADC2_Init+0xec>)
 8003e8c:	4a36      	ldr	r2, [pc, #216]	; (8003f68 <MX_ADC2_Init+0xf0>)
 8003e8e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003e90:	4b34      	ldr	r3, [pc, #208]	; (8003f64 <MX_ADC2_Init+0xec>)
 8003e92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e96:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003e98:	4b32      	ldr	r3, [pc, #200]	; (8003f64 <MX_ADC2_Init+0xec>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003e9e:	4b31      	ldr	r3, [pc, #196]	; (8003f64 <MX_ADC2_Init+0xec>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003ea4:	4b2f      	ldr	r3, [pc, #188]	; (8003f64 <MX_ADC2_Init+0xec>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003eaa:	4b2e      	ldr	r3, [pc, #184]	; (8003f64 <MX_ADC2_Init+0xec>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003eb2:	4b2c      	ldr	r3, [pc, #176]	; (8003f64 <MX_ADC2_Init+0xec>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003eb8:	4b2a      	ldr	r3, [pc, #168]	; (8003f64 <MX_ADC2_Init+0xec>)
 8003eba:	4a2c      	ldr	r2, [pc, #176]	; (8003f6c <MX_ADC2_Init+0xf4>)
 8003ebc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ebe:	4b29      	ldr	r3, [pc, #164]	; (8003f64 <MX_ADC2_Init+0xec>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8003ec4:	4b27      	ldr	r3, [pc, #156]	; (8003f64 <MX_ADC2_Init+0xec>)
 8003ec6:	2204      	movs	r2, #4
 8003ec8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003eca:	4b26      	ldr	r3, [pc, #152]	; (8003f64 <MX_ADC2_Init+0xec>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003ed2:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <MX_ADC2_Init+0xec>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003ed8:	4822      	ldr	r0, [pc, #136]	; (8003f64 <MX_ADC2_Init+0xec>)
 8003eda:	f001 fb71 	bl	80055c0 <HAL_ADC_Init>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003ee4:	f000 fdba 	bl	8004a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003ee8:	230a      	movs	r3, #10
 8003eea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003eec:	2301      	movs	r3, #1
 8003eee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003ef0:	2307      	movs	r3, #7
 8003ef2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ef4:	463b      	mov	r3, r7
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	481a      	ldr	r0, [pc, #104]	; (8003f64 <MX_ADC2_Init+0xec>)
 8003efa:	f001 fcd3 	bl	80058a4 <HAL_ADC_ConfigChannel>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003f04:	f000 fdaa 	bl	8004a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003f08:	230b      	movs	r3, #11
 8003f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f10:	463b      	mov	r3, r7
 8003f12:	4619      	mov	r1, r3
 8003f14:	4813      	ldr	r0, [pc, #76]	; (8003f64 <MX_ADC2_Init+0xec>)
 8003f16:	f001 fcc5 	bl	80058a4 <HAL_ADC_ConfigChannel>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003f20:	f000 fd9c 	bl	8004a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003f24:	230c      	movs	r3, #12
 8003f26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f2c:	463b      	mov	r3, r7
 8003f2e:	4619      	mov	r1, r3
 8003f30:	480c      	ldr	r0, [pc, #48]	; (8003f64 <MX_ADC2_Init+0xec>)
 8003f32:	f001 fcb7 	bl	80058a4 <HAL_ADC_ConfigChannel>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003f3c:	f000 fd8e 	bl	8004a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003f40:	230d      	movs	r3, #13
 8003f42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003f44:	2304      	movs	r3, #4
 8003f46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f48:	463b      	mov	r3, r7
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4805      	ldr	r0, [pc, #20]	; (8003f64 <MX_ADC2_Init+0xec>)
 8003f4e:	f001 fca9 	bl	80058a4 <HAL_ADC_ConfigChannel>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003f58:	f000 fd80 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003f5c:	bf00      	nop
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	200018ec 	.word	0x200018ec
 8003f68:	40012100 	.word	0x40012100
 8003f6c:	0f000001 	.word	0x0f000001

08003f70 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <MX_IWDG_Init+0x2c>)
 8003f76:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <MX_IWDG_Init+0x30>)
 8003f78:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8003f7a:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <MX_IWDG_Init+0x2c>)
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <MX_IWDG_Init+0x2c>)
 8003f82:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003f86:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003f88:	4804      	ldr	r0, [pc, #16]	; (8003f9c <MX_IWDG_Init+0x2c>)
 8003f8a:	f003 f8bc 	bl	8007106 <HAL_IWDG_Init>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8003f94:	f000 fd62 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003f98:	bf00      	nop
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	200019f4 	.word	0x200019f4
 8003fa0:	40003000 	.word	0x40003000

08003fa4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b096      	sub	sp, #88	; 0x58
 8003fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003faa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
 8003fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	605a      	str	r2, [r3, #4]
 8003fcc:	609a      	str	r2, [r3, #8]
 8003fce:	60da      	str	r2, [r3, #12]
 8003fd0:	611a      	str	r2, [r3, #16]
 8003fd2:	615a      	str	r2, [r3, #20]
 8003fd4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003fd6:	1d3b      	adds	r3, r7, #4
 8003fd8:	2220      	movs	r2, #32
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f005 ff55 	bl	8009e8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003fe2:	4b42      	ldr	r3, [pc, #264]	; (80040ec <MX_TIM1_Init+0x148>)
 8003fe4:	4a42      	ldr	r2, [pc, #264]	; (80040f0 <MX_TIM1_Init+0x14c>)
 8003fe6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003fe8:	4b40      	ldr	r3, [pc, #256]	; (80040ec <MX_TIM1_Init+0x148>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fee:	4b3f      	ldr	r3, [pc, #252]	; (80040ec <MX_TIM1_Init+0x148>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8003ff4:	4b3d      	ldr	r3, [pc, #244]	; (80040ec <MX_TIM1_Init+0x148>)
 8003ff6:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003ffa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ffc:	4b3b      	ldr	r3, [pc, #236]	; (80040ec <MX_TIM1_Init+0x148>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004002:	4b3a      	ldr	r3, [pc, #232]	; (80040ec <MX_TIM1_Init+0x148>)
 8004004:	2200      	movs	r2, #0
 8004006:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004008:	4b38      	ldr	r3, [pc, #224]	; (80040ec <MX_TIM1_Init+0x148>)
 800400a:	2200      	movs	r2, #0
 800400c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800400e:	4837      	ldr	r0, [pc, #220]	; (80040ec <MX_TIM1_Init+0x148>)
 8004010:	f003 fd64 	bl	8007adc <HAL_TIM_Base_Init>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800401a:	f000 fd1f 	bl	8004a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800401e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004022:	64bb      	str	r3, [r7, #72]	; 0x48
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8004024:	2300      	movs	r3, #0
 8004026:	64fb      	str	r3, [r7, #76]	; 0x4c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8004028:	2300      	movs	r3, #0
 800402a:	653b      	str	r3, [r7, #80]	; 0x50
  sClockSourceConfig.ClockFilter = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004030:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004034:	4619      	mov	r1, r3
 8004036:	482d      	ldr	r0, [pc, #180]	; (80040ec <MX_TIM1_Init+0x148>)
 8004038:	f004 f964 	bl	8008304 <HAL_TIM_ConfigClockSource>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8004042:	f000 fd0b 	bl	8004a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004046:	4829      	ldr	r0, [pc, #164]	; (80040ec <MX_TIM1_Init+0x148>)
 8004048:	f003 fe70 	bl	8007d2c <HAL_TIM_PWM_Init>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8004052:	f000 fd03 	bl	8004a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004056:	2300      	movs	r3, #0
 8004058:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800405a:	2300      	movs	r3, #0
 800405c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800405e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004062:	4619      	mov	r1, r3
 8004064:	4821      	ldr	r0, [pc, #132]	; (80040ec <MX_TIM1_Init+0x148>)
 8004066:	f004 fd4d 	bl	8008b04 <HAL_TIMEx_MasterConfigSynchronization>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8004070:	f000 fcf4 	bl	8004a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004074:	2360      	movs	r3, #96	; 0x60
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 30000-1;
 8004078:	f247 532f 	movw	r3, #29999	; 0x752f
 800407c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800407e:	2300      	movs	r3, #0
 8004080:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004082:	2300      	movs	r3, #0
 8004084:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004086:	2300      	movs	r3, #0
 8004088:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800408a:	2300      	movs	r3, #0
 800408c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800408e:	2300      	movs	r3, #0
 8004090:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004096:	2200      	movs	r2, #0
 8004098:	4619      	mov	r1, r3
 800409a:	4814      	ldr	r0, [pc, #80]	; (80040ec <MX_TIM1_Init+0x148>)
 800409c:	f004 f870 	bl	8008180 <HAL_TIM_PWM_ConfigChannel>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80040a6:	f000 fcd9 	bl	8004a5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040c4:	2300      	movs	r3, #0
 80040c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040c8:	1d3b      	adds	r3, r7, #4
 80040ca:	4619      	mov	r1, r3
 80040cc:	4807      	ldr	r0, [pc, #28]	; (80040ec <MX_TIM1_Init+0x148>)
 80040ce:	f004 fd95 	bl	8008bfc <HAL_TIMEx_ConfigBreakDeadTime>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80040d8:	f000 fcc0 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80040dc:	4803      	ldr	r0, [pc, #12]	; (80040ec <MX_TIM1_Init+0x148>)
 80040de:	f000 fea7 	bl	8004e30 <HAL_TIM_MspPostInit>

}
 80040e2:	bf00      	nop
 80040e4:	3758      	adds	r7, #88	; 0x58
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20001a00 	.word	0x20001a00
 80040f0:	40010000 	.word	0x40010000

080040f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040fa:	f107 0308 	add.w	r3, r7, #8
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	605a      	str	r2, [r3, #4]
 8004104:	609a      	str	r2, [r3, #8]
 8004106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004108:	463b      	mov	r3, r7
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004110:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <MX_TIM2_Init+0x94>)
 8004112:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004116:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004118:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <MX_TIM2_Init+0x94>)
 800411a:	2200      	movs	r2, #0
 800411c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800411e:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <MX_TIM2_Init+0x94>)
 8004120:	2200      	movs	r2, #0
 8004122:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004124:	4b18      	ldr	r3, [pc, #96]	; (8004188 <MX_TIM2_Init+0x94>)
 8004126:	f04f 32ff 	mov.w	r2, #4294967295
 800412a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800412c:	4b16      	ldr	r3, [pc, #88]	; (8004188 <MX_TIM2_Init+0x94>)
 800412e:	2200      	movs	r2, #0
 8004130:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004132:	4b15      	ldr	r3, [pc, #84]	; (8004188 <MX_TIM2_Init+0x94>)
 8004134:	2200      	movs	r2, #0
 8004136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004138:	4813      	ldr	r0, [pc, #76]	; (8004188 <MX_TIM2_Init+0x94>)
 800413a:	f003 fccf 	bl	8007adc <HAL_TIM_Base_Init>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004144:	f000 fc8a 	bl	8004a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800414c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800414e:	f107 0308 	add.w	r3, r7, #8
 8004152:	4619      	mov	r1, r3
 8004154:	480c      	ldr	r0, [pc, #48]	; (8004188 <MX_TIM2_Init+0x94>)
 8004156:	f004 f8d5 	bl	8008304 <HAL_TIM_ConfigClockSource>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004160:	f000 fc7c 	bl	8004a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004164:	2300      	movs	r3, #0
 8004166:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004168:	2300      	movs	r3, #0
 800416a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800416c:	463b      	mov	r3, r7
 800416e:	4619      	mov	r1, r3
 8004170:	4805      	ldr	r0, [pc, #20]	; (8004188 <MX_TIM2_Init+0x94>)
 8004172:	f004 fcc7 	bl	8008b04 <HAL_TIMEx_MasterConfigSynchronization>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800417c:	f000 fc6e 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004180:	bf00      	nop
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	20001a48 	.word	0x20001a48

0800418c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08e      	sub	sp, #56	; 0x38
 8004190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	605a      	str	r2, [r3, #4]
 800419c:	609a      	str	r2, [r3, #8]
 800419e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041a0:	f107 0320 	add.w	r3, r7, #32
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041aa:	1d3b      	adds	r3, r7, #4
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	609a      	str	r2, [r3, #8]
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	611a      	str	r2, [r3, #16]
 80041b8:	615a      	str	r2, [r3, #20]
 80041ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80041bc:	4b33      	ldr	r3, [pc, #204]	; (800428c <MX_TIM3_Init+0x100>)
 80041be:	4a34      	ldr	r2, [pc, #208]	; (8004290 <MX_TIM3_Init+0x104>)
 80041c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80041c2:	4b32      	ldr	r3, [pc, #200]	; (800428c <MX_TIM3_Init+0x100>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041c8:	4b30      	ldr	r3, [pc, #192]	; (800428c <MX_TIM3_Init+0x100>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 840-1;
 80041ce:	4b2f      	ldr	r3, [pc, #188]	; (800428c <MX_TIM3_Init+0x100>)
 80041d0:	f240 3247 	movw	r2, #839	; 0x347
 80041d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041d6:	4b2d      	ldr	r3, [pc, #180]	; (800428c <MX_TIM3_Init+0x100>)
 80041d8:	2200      	movs	r2, #0
 80041da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041dc:	4b2b      	ldr	r3, [pc, #172]	; (800428c <MX_TIM3_Init+0x100>)
 80041de:	2200      	movs	r2, #0
 80041e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80041e2:	482a      	ldr	r0, [pc, #168]	; (800428c <MX_TIM3_Init+0x100>)
 80041e4:	f003 fc7a 	bl	8007adc <HAL_TIM_Base_Init>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80041ee:	f000 fc35 	bl	8004a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80041f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041fc:	4619      	mov	r1, r3
 80041fe:	4823      	ldr	r0, [pc, #140]	; (800428c <MX_TIM3_Init+0x100>)
 8004200:	f004 f880 	bl	8008304 <HAL_TIM_ConfigClockSource>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800420a:	f000 fc27 	bl	8004a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800420e:	481f      	ldr	r0, [pc, #124]	; (800428c <MX_TIM3_Init+0x100>)
 8004210:	f003 fd8c 	bl	8007d2c <HAL_TIM_PWM_Init>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800421a:	f000 fc1f 	bl	8004a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800421e:	2300      	movs	r3, #0
 8004220:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004222:	2300      	movs	r3, #0
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004226:	f107 0320 	add.w	r3, r7, #32
 800422a:	4619      	mov	r1, r3
 800422c:	4817      	ldr	r0, [pc, #92]	; (800428c <MX_TIM3_Init+0x100>)
 800422e:	f004 fc69 	bl	8008b04 <HAL_TIMEx_MasterConfigSynchronization>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004238:	f000 fc10 	bl	8004a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800423c:	2360      	movs	r3, #96	; 0x60
 800423e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 630-1;
 8004240:	f240 2375 	movw	r3, #629	; 0x275
 8004244:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800424e:	1d3b      	adds	r3, r7, #4
 8004250:	2200      	movs	r2, #0
 8004252:	4619      	mov	r1, r3
 8004254:	480d      	ldr	r0, [pc, #52]	; (800428c <MX_TIM3_Init+0x100>)
 8004256:	f003 ff93 	bl	8008180 <HAL_TIM_PWM_ConfigChannel>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004260:	f000 fbfc 	bl	8004a5c <Error_Handler>
  }
  sConfigOC.Pulse = 120-1;
 8004264:	2377      	movs	r3, #119	; 0x77
 8004266:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004268:	1d3b      	adds	r3, r7, #4
 800426a:	2204      	movs	r2, #4
 800426c:	4619      	mov	r1, r3
 800426e:	4807      	ldr	r0, [pc, #28]	; (800428c <MX_TIM3_Init+0x100>)
 8004270:	f003 ff86 	bl	8008180 <HAL_TIM_PWM_ConfigChannel>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 800427a:	f000 fbef 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800427e:	4803      	ldr	r0, [pc, #12]	; (800428c <MX_TIM3_Init+0x100>)
 8004280:	f000 fdd6 	bl	8004e30 <HAL_TIM_MspPostInit>

}
 8004284:	bf00      	nop
 8004286:	3738      	adds	r7, #56	; 0x38
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20001a90 	.word	0x20001a90
 8004290:	40000400 	.word	0x40000400

08004294 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08e      	sub	sp, #56	; 0x38
 8004298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800429a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	605a      	str	r2, [r3, #4]
 80042a4:	609a      	str	r2, [r3, #8]
 80042a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042a8:	f107 0320 	add.w	r3, r7, #32
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042b2:	1d3b      	adds	r3, r7, #4
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	609a      	str	r2, [r3, #8]
 80042bc:	60da      	str	r2, [r3, #12]
 80042be:	611a      	str	r2, [r3, #16]
 80042c0:	615a      	str	r2, [r3, #20]
 80042c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80042c4:	4b33      	ldr	r3, [pc, #204]	; (8004394 <MX_TIM4_Init+0x100>)
 80042c6:	4a34      	ldr	r2, [pc, #208]	; (8004398 <MX_TIM4_Init+0x104>)
 80042c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80042ca:	4b32      	ldr	r3, [pc, #200]	; (8004394 <MX_TIM4_Init+0x100>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042d0:	4b30      	ldr	r3, [pc, #192]	; (8004394 <MX_TIM4_Init+0x100>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 840-1;
 80042d6:	4b2f      	ldr	r3, [pc, #188]	; (8004394 <MX_TIM4_Init+0x100>)
 80042d8:	f240 3247 	movw	r2, #839	; 0x347
 80042dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042de:	4b2d      	ldr	r3, [pc, #180]	; (8004394 <MX_TIM4_Init+0x100>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042e4:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <MX_TIM4_Init+0x100>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80042ea:	482a      	ldr	r0, [pc, #168]	; (8004394 <MX_TIM4_Init+0x100>)
 80042ec:	f003 fbf6 	bl	8007adc <HAL_TIM_Base_Init>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80042f6:	f000 fbb1 	bl	8004a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004300:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004304:	4619      	mov	r1, r3
 8004306:	4823      	ldr	r0, [pc, #140]	; (8004394 <MX_TIM4_Init+0x100>)
 8004308:	f003 fffc 	bl	8008304 <HAL_TIM_ConfigClockSource>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8004312:	f000 fba3 	bl	8004a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004316:	481f      	ldr	r0, [pc, #124]	; (8004394 <MX_TIM4_Init+0x100>)
 8004318:	f003 fd08 	bl	8007d2c <HAL_TIM_PWM_Init>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8004322:	f000 fb9b 	bl	8004a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004326:	2300      	movs	r3, #0
 8004328:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800432a:	2300      	movs	r3, #0
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800432e:	f107 0320 	add.w	r3, r7, #32
 8004332:	4619      	mov	r1, r3
 8004334:	4817      	ldr	r0, [pc, #92]	; (8004394 <MX_TIM4_Init+0x100>)
 8004336:	f004 fbe5 	bl	8008b04 <HAL_TIMEx_MasterConfigSynchronization>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8004340:	f000 fb8c 	bl	8004a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004344:	2360      	movs	r3, #96	; 0x60
 8004346:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 420-1;
 8004348:	f240 13a3 	movw	r3, #419	; 0x1a3
 800434c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004356:	1d3b      	adds	r3, r7, #4
 8004358:	2200      	movs	r2, #0
 800435a:	4619      	mov	r1, r3
 800435c:	480d      	ldr	r0, [pc, #52]	; (8004394 <MX_TIM4_Init+0x100>)
 800435e:	f003 ff0f 	bl	8008180 <HAL_TIM_PWM_ConfigChannel>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004368:	f000 fb78 	bl	8004a5c <Error_Handler>
  }
  sConfigOC.Pulse = 210-1;
 800436c:	23d1      	movs	r3, #209	; 0xd1
 800436e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004370:	1d3b      	adds	r3, r7, #4
 8004372:	2204      	movs	r2, #4
 8004374:	4619      	mov	r1, r3
 8004376:	4807      	ldr	r0, [pc, #28]	; (8004394 <MX_TIM4_Init+0x100>)
 8004378:	f003 ff02 	bl	8008180 <HAL_TIM_PWM_ConfigChannel>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8004382:	f000 fb6b 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004386:	4803      	ldr	r0, [pc, #12]	; (8004394 <MX_TIM4_Init+0x100>)
 8004388:	f000 fd52 	bl	8004e30 <HAL_TIM_MspPostInit>

}
 800438c:	bf00      	nop
 800438e:	3738      	adds	r7, #56	; 0x38
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20001ad8 	.word	0x20001ad8
 8004398:	40000800 	.word	0x40000800

0800439c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043a2:	f107 0308 	add.w	r3, r7, #8
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	605a      	str	r2, [r3, #4]
 80043ac:	609a      	str	r2, [r3, #8]
 80043ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043b0:	463b      	mov	r3, r7
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80043b8:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <MX_TIM5_Init+0x94>)
 80043ba:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <MX_TIM5_Init+0x98>)
 80043bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400-1;
 80043be:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <MX_TIM5_Init+0x94>)
 80043c0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80043c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043c6:	4b1a      	ldr	r3, [pc, #104]	; (8004430 <MX_TIM5_Init+0x94>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80043cc:	4b18      	ldr	r3, [pc, #96]	; (8004430 <MX_TIM5_Init+0x94>)
 80043ce:	f04f 32ff 	mov.w	r2, #4294967295
 80043d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043d4:	4b16      	ldr	r3, [pc, #88]	; (8004430 <MX_TIM5_Init+0x94>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043da:	4b15      	ldr	r3, [pc, #84]	; (8004430 <MX_TIM5_Init+0x94>)
 80043dc:	2200      	movs	r2, #0
 80043de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80043e0:	4813      	ldr	r0, [pc, #76]	; (8004430 <MX_TIM5_Init+0x94>)
 80043e2:	f003 fb7b 	bl	8007adc <HAL_TIM_Base_Init>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80043ec:	f000 fb36 	bl	8004a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80043f6:	f107 0308 	add.w	r3, r7, #8
 80043fa:	4619      	mov	r1, r3
 80043fc:	480c      	ldr	r0, [pc, #48]	; (8004430 <MX_TIM5_Init+0x94>)
 80043fe:	f003 ff81 	bl	8008304 <HAL_TIM_ConfigClockSource>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004408:	f000 fb28 	bl	8004a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800440c:	2300      	movs	r3, #0
 800440e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004410:	2300      	movs	r3, #0
 8004412:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004414:	463b      	mov	r3, r7
 8004416:	4619      	mov	r1, r3
 8004418:	4805      	ldr	r0, [pc, #20]	; (8004430 <MX_TIM5_Init+0x94>)
 800441a:	f004 fb73 	bl	8008b04 <HAL_TIMEx_MasterConfigSynchronization>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004424:	f000 fb1a 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004428:	bf00      	nop
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20001b20 	.word	0x20001b20
 8004434:	40000c00 	.word	0x40000c00

08004438 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800443e:	463b      	mov	r3, r7
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004446:	4b15      	ldr	r3, [pc, #84]	; (800449c <MX_TIM6_Init+0x64>)
 8004448:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <MX_TIM6_Init+0x68>)
 800444a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 800444c:	4b13      	ldr	r3, [pc, #76]	; (800449c <MX_TIM6_Init+0x64>)
 800444e:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8004452:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004454:	4b11      	ldr	r3, [pc, #68]	; (800449c <MX_TIM6_Init+0x64>)
 8004456:	2200      	movs	r2, #0
 8004458:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 800445a:	4b10      	ldr	r3, [pc, #64]	; (800449c <MX_TIM6_Init+0x64>)
 800445c:	22c7      	movs	r2, #199	; 0xc7
 800445e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004460:	4b0e      	ldr	r3, [pc, #56]	; (800449c <MX_TIM6_Init+0x64>)
 8004462:	2200      	movs	r2, #0
 8004464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004466:	480d      	ldr	r0, [pc, #52]	; (800449c <MX_TIM6_Init+0x64>)
 8004468:	f003 fb38 	bl	8007adc <HAL_TIM_Base_Init>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004472:	f000 faf3 	bl	8004a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004476:	2300      	movs	r3, #0
 8004478:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800447a:	2300      	movs	r3, #0
 800447c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800447e:	463b      	mov	r3, r7
 8004480:	4619      	mov	r1, r3
 8004482:	4806      	ldr	r0, [pc, #24]	; (800449c <MX_TIM6_Init+0x64>)
 8004484:	f004 fb3e 	bl	8008b04 <HAL_TIMEx_MasterConfigSynchronization>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800448e:	f000 fae5 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20001b68 	.word	0x20001b68
 80044a0:	40001000 	.word	0x40001000

080044a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b096      	sub	sp, #88	; 0x58
 80044a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	605a      	str	r2, [r3, #4]
 80044b4:	609a      	str	r2, [r3, #8]
 80044b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	605a      	str	r2, [r3, #4]
 80044cc:	609a      	str	r2, [r3, #8]
 80044ce:	60da      	str	r2, [r3, #12]
 80044d0:	611a      	str	r2, [r3, #16]
 80044d2:	615a      	str	r2, [r3, #20]
 80044d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80044d6:	1d3b      	adds	r3, r7, #4
 80044d8:	2220      	movs	r2, #32
 80044da:	2100      	movs	r1, #0
 80044dc:	4618      	mov	r0, r3
 80044de:	f005 fcd5 	bl	8009e8c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80044e2:	4b3f      	ldr	r3, [pc, #252]	; (80045e0 <MX_TIM8_Init+0x13c>)
 80044e4:	4a3f      	ldr	r2, [pc, #252]	; (80045e4 <MX_TIM8_Init+0x140>)
 80044e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80044e8:	4b3d      	ldr	r3, [pc, #244]	; (80045e0 <MX_TIM8_Init+0x13c>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ee:	4b3c      	ldr	r3, [pc, #240]	; (80045e0 <MX_TIM8_Init+0x13c>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16800-1;
 80044f4:	4b3a      	ldr	r3, [pc, #232]	; (80045e0 <MX_TIM8_Init+0x13c>)
 80044f6:	f244 129f 	movw	r2, #16799	; 0x419f
 80044fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044fc:	4b38      	ldr	r3, [pc, #224]	; (80045e0 <MX_TIM8_Init+0x13c>)
 80044fe:	2200      	movs	r2, #0
 8004500:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004502:	4b37      	ldr	r3, [pc, #220]	; (80045e0 <MX_TIM8_Init+0x13c>)
 8004504:	2200      	movs	r2, #0
 8004506:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004508:	4b35      	ldr	r3, [pc, #212]	; (80045e0 <MX_TIM8_Init+0x13c>)
 800450a:	2200      	movs	r2, #0
 800450c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800450e:	4834      	ldr	r0, [pc, #208]	; (80045e0 <MX_TIM8_Init+0x13c>)
 8004510:	f003 fae4 	bl	8007adc <HAL_TIM_Base_Init>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800451a:	f000 fa9f 	bl	8004a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800451e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004522:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004524:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004528:	4619      	mov	r1, r3
 800452a:	482d      	ldr	r0, [pc, #180]	; (80045e0 <MX_TIM8_Init+0x13c>)
 800452c:	f003 feea 	bl	8008304 <HAL_TIM_ConfigClockSource>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8004536:	f000 fa91 	bl	8004a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800453a:	4829      	ldr	r0, [pc, #164]	; (80045e0 <MX_TIM8_Init+0x13c>)
 800453c:	f003 fbf6 	bl	8007d2c <HAL_TIM_PWM_Init>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8004546:	f000 fa89 	bl	8004a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800454a:	2300      	movs	r3, #0
 800454c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800454e:	2300      	movs	r3, #0
 8004550:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004552:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004556:	4619      	mov	r1, r3
 8004558:	4821      	ldr	r0, [pc, #132]	; (80045e0 <MX_TIM8_Init+0x13c>)
 800455a:	f004 fad3 	bl	8008b04 <HAL_TIMEx_MasterConfigSynchronization>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8004564:	f000 fa7a 	bl	8004a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004568:	2360      	movs	r3, #96	; 0x60
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2100-1;
 800456c:	f640 0333 	movw	r3, #2099	; 0x833
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004572:	2300      	movs	r3, #0
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004576:	2300      	movs	r3, #0
 8004578:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800457a:	2300      	movs	r3, #0
 800457c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800457e:	2300      	movs	r3, #0
 8004580:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004582:	2300      	movs	r3, #0
 8004584:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800458a:	2208      	movs	r2, #8
 800458c:	4619      	mov	r1, r3
 800458e:	4814      	ldr	r0, [pc, #80]	; (80045e0 <MX_TIM8_Init+0x13c>)
 8004590:	f003 fdf6 	bl	8008180 <HAL_TIM_PWM_ConfigChannel>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800459a:	f000 fa5f 	bl	8004a5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800459e:	2300      	movs	r3, #0
 80045a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80045b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80045bc:	1d3b      	adds	r3, r7, #4
 80045be:	4619      	mov	r1, r3
 80045c0:	4807      	ldr	r0, [pc, #28]	; (80045e0 <MX_TIM8_Init+0x13c>)
 80045c2:	f004 fb1b 	bl	8008bfc <HAL_TIMEx_ConfigBreakDeadTime>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 80045cc:	f000 fa46 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80045d0:	4803      	ldr	r0, [pc, #12]	; (80045e0 <MX_TIM8_Init+0x13c>)
 80045d2:	f000 fc2d 	bl	8004e30 <HAL_TIM_MspPostInit>

}
 80045d6:	bf00      	nop
 80045d8:	3758      	adds	r7, #88	; 0x58
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20001bb0 	.word	0x20001bb0
 80045e4:	40010400 	.word	0x40010400

080045e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045ec:	4b11      	ldr	r3, [pc, #68]	; (8004634 <MX_USART1_UART_Init+0x4c>)
 80045ee:	4a12      	ldr	r2, [pc, #72]	; (8004638 <MX_USART1_UART_Init+0x50>)
 80045f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80045f2:	4b10      	ldr	r3, [pc, #64]	; (8004634 <MX_USART1_UART_Init+0x4c>)
 80045f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045fa:	4b0e      	ldr	r3, [pc, #56]	; (8004634 <MX_USART1_UART_Init+0x4c>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <MX_USART1_UART_Init+0x4c>)
 8004602:	2200      	movs	r2, #0
 8004604:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004606:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <MX_USART1_UART_Init+0x4c>)
 8004608:	2200      	movs	r2, #0
 800460a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800460c:	4b09      	ldr	r3, [pc, #36]	; (8004634 <MX_USART1_UART_Init+0x4c>)
 800460e:	220c      	movs	r2, #12
 8004610:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004612:	4b08      	ldr	r3, [pc, #32]	; (8004634 <MX_USART1_UART_Init+0x4c>)
 8004614:	2200      	movs	r2, #0
 8004616:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004618:	4b06      	ldr	r3, [pc, #24]	; (8004634 <MX_USART1_UART_Init+0x4c>)
 800461a:	2200      	movs	r2, #0
 800461c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800461e:	4805      	ldr	r0, [pc, #20]	; (8004634 <MX_USART1_UART_Init+0x4c>)
 8004620:	f004 fb52 	bl	8008cc8 <HAL_UART_Init>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800462a:	f000 fa17 	bl	8004a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800462e:	bf00      	nop
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20001bf8 	.word	0x20001bf8
 8004638:	40011000 	.word	0x40011000

0800463c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	607b      	str	r3, [r7, #4]
 8004646:	4b10      	ldr	r3, [pc, #64]	; (8004688 <MX_DMA_Init+0x4c>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	4a0f      	ldr	r2, [pc, #60]	; (8004688 <MX_DMA_Init+0x4c>)
 800464c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004650:	6313      	str	r3, [r2, #48]	; 0x30
 8004652:	4b0d      	ldr	r3, [pc, #52]	; (8004688 <MX_DMA_Init+0x4c>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465a:	607b      	str	r3, [r7, #4]
 800465c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 800465e:	2200      	movs	r2, #0
 8004660:	2101      	movs	r1, #1
 8004662:	2038      	movs	r0, #56	; 0x38
 8004664:	f001 fc99 	bl	8005f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004668:	2038      	movs	r0, #56	; 0x38
 800466a:	f001 fcb2 	bl	8005fd2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 800466e:	2200      	movs	r2, #0
 8004670:	2101      	movs	r1, #1
 8004672:	203a      	movs	r0, #58	; 0x3a
 8004674:	f001 fc91 	bl	8005f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004678:	203a      	movs	r0, #58	; 0x3a
 800467a:	f001 fcaa 	bl	8005fd2 <HAL_NVIC_EnableIRQ>

}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40023800 	.word	0x40023800

0800468c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08c      	sub	sp, #48	; 0x30
 8004690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004692:	f107 031c 	add.w	r3, r7, #28
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	605a      	str	r2, [r3, #4]
 800469c:	609a      	str	r2, [r3, #8]
 800469e:	60da      	str	r2, [r3, #12]
 80046a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	4b56      	ldr	r3, [pc, #344]	; (8004800 <MX_GPIO_Init+0x174>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	4a55      	ldr	r2, [pc, #340]	; (8004800 <MX_GPIO_Init+0x174>)
 80046ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b0:	6313      	str	r3, [r2, #48]	; 0x30
 80046b2:	4b53      	ldr	r3, [pc, #332]	; (8004800 <MX_GPIO_Init+0x174>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ba:	61bb      	str	r3, [r7, #24]
 80046bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	4b4f      	ldr	r3, [pc, #316]	; (8004800 <MX_GPIO_Init+0x174>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	4a4e      	ldr	r2, [pc, #312]	; (8004800 <MX_GPIO_Init+0x174>)
 80046c8:	f043 0304 	orr.w	r3, r3, #4
 80046cc:	6313      	str	r3, [r2, #48]	; 0x30
 80046ce:	4b4c      	ldr	r3, [pc, #304]	; (8004800 <MX_GPIO_Init+0x174>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	4b48      	ldr	r3, [pc, #288]	; (8004800 <MX_GPIO_Init+0x174>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	4a47      	ldr	r2, [pc, #284]	; (8004800 <MX_GPIO_Init+0x174>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ea:	4b45      	ldr	r3, [pc, #276]	; (8004800 <MX_GPIO_Init+0x174>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	4b41      	ldr	r3, [pc, #260]	; (8004800 <MX_GPIO_Init+0x174>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	4a40      	ldr	r2, [pc, #256]	; (8004800 <MX_GPIO_Init+0x174>)
 8004700:	f043 0302 	orr.w	r3, r3, #2
 8004704:	6313      	str	r3, [r2, #48]	; 0x30
 8004706:	4b3e      	ldr	r3, [pc, #248]	; (8004800 <MX_GPIO_Init+0x174>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004712:	2300      	movs	r3, #0
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	4b3a      	ldr	r3, [pc, #232]	; (8004800 <MX_GPIO_Init+0x174>)
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	4a39      	ldr	r2, [pc, #228]	; (8004800 <MX_GPIO_Init+0x174>)
 800471c:	f043 0310 	orr.w	r3, r3, #16
 8004720:	6313      	str	r3, [r2, #48]	; 0x30
 8004722:	4b37      	ldr	r3, [pc, #220]	; (8004800 <MX_GPIO_Init+0x174>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	f003 0310 	and.w	r3, r3, #16
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800472e:	2300      	movs	r3, #0
 8004730:	607b      	str	r3, [r7, #4]
 8004732:	4b33      	ldr	r3, [pc, #204]	; (8004800 <MX_GPIO_Init+0x174>)
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	4a32      	ldr	r2, [pc, #200]	; (8004800 <MX_GPIO_Init+0x174>)
 8004738:	f043 0308 	orr.w	r3, r3, #8
 800473c:	6313      	str	r3, [r2, #48]	; 0x30
 800473e:	4b30      	ldr	r3, [pc, #192]	; (8004800 <MX_GPIO_Init+0x174>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	607b      	str	r3, [r7, #4]
 8004748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GateH1_A_Pin|GateH1_B_Pin, GPIO_PIN_RESET);
 800474a:	2200      	movs	r2, #0
 800474c:	2130      	movs	r1, #48	; 0x30
 800474e:	482d      	ldr	r0, [pc, #180]	; (8004804 <MX_GPIO_Init+0x178>)
 8004750:	f002 fcc0 	bl	80070d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Gates1_A_Dis_Pin|Gates1_B_Dis_Pin|Gates2_A_Dis_Pin|Gates2_B_Dis_Pin, GPIO_PIN_RESET);
 8004754:	2200      	movs	r2, #0
 8004756:	210f      	movs	r1, #15
 8004758:	482b      	ldr	r0, [pc, #172]	; (8004808 <MX_GPIO_Init+0x17c>)
 800475a:	f002 fcbb 	bl	80070d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800475e:	2200      	movs	r2, #0
 8004760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004764:	4829      	ldr	r0, [pc, #164]	; (800480c <MX_GPIO_Init+0x180>)
 8004766:	f002 fcb5 	bl	80070d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GateH2_A_Pin|GateH2_B_Pin, GPIO_PIN_RESET);
 800476a:	2200      	movs	r2, #0
 800476c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8004770:	4827      	ldr	r0, [pc, #156]	; (8004810 <MX_GPIO_Init+0x184>)
 8004772:	f002 fcaf 	bl	80070d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disable_DC_DC_GPIO_Port, Disable_DC_DC_Pin, GPIO_PIN_SET);
 8004776:	2201      	movs	r2, #1
 8004778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800477c:	4821      	ldr	r0, [pc, #132]	; (8004804 <MX_GPIO_Init+0x178>)
 800477e:	f002 fca9 	bl	80070d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GateH1_A_Pin GateH1_B_Pin Disable_DC_DC_Pin */
  GPIO_InitStruct.Pin = GateH1_A_Pin|GateH1_B_Pin|Disable_DC_DC_Pin;
 8004782:	f44f 730c 	mov.w	r3, #560	; 0x230
 8004786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004788:	2301      	movs	r3, #1
 800478a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478c:	2300      	movs	r3, #0
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004790:	2300      	movs	r3, #0
 8004792:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004794:	f107 031c 	add.w	r3, r7, #28
 8004798:	4619      	mov	r1, r3
 800479a:	481a      	ldr	r0, [pc, #104]	; (8004804 <MX_GPIO_Init+0x178>)
 800479c:	f002 fafe 	bl	8006d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Gates1_A_Dis_Pin Gates1_B_Dis_Pin Gates2_A_Dis_Pin Gates2_B_Dis_Pin */
  GPIO_InitStruct.Pin = Gates1_A_Dis_Pin|Gates1_B_Dis_Pin|Gates2_A_Dis_Pin|Gates2_B_Dis_Pin;
 80047a0:	230f      	movs	r3, #15
 80047a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047a4:	2301      	movs	r3, #1
 80047a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a8:	2300      	movs	r3, #0
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ac:	2300      	movs	r3, #0
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b0:	f107 031c 	add.w	r3, r7, #28
 80047b4:	4619      	mov	r1, r3
 80047b6:	4814      	ldr	r0, [pc, #80]	; (8004808 <MX_GPIO_Init+0x17c>)
 80047b8:	f002 faf0 	bl	8006d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80047bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047c2:	2301      	movs	r3, #1
 80047c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ca:	2300      	movs	r3, #0
 80047cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047ce:	f107 031c 	add.w	r3, r7, #28
 80047d2:	4619      	mov	r1, r3
 80047d4:	480d      	ldr	r0, [pc, #52]	; (800480c <MX_GPIO_Init+0x180>)
 80047d6:	f002 fae1 	bl	8006d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : GateH2_A_Pin GateH2_B_Pin */
  GPIO_InitStruct.Pin = GateH2_A_Pin|GateH2_B_Pin;
 80047da:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80047de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047e0:	2301      	movs	r3, #1
 80047e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e8:	2300      	movs	r3, #0
 80047ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047ec:	f107 031c 	add.w	r3, r7, #28
 80047f0:	4619      	mov	r1, r3
 80047f2:	4807      	ldr	r0, [pc, #28]	; (8004810 <MX_GPIO_Init+0x184>)
 80047f4:	f002 fad2 	bl	8006d9c <HAL_GPIO_Init>

}
 80047f8:	bf00      	nop
 80047fa:	3730      	adds	r7, #48	; 0x30
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40023800 	.word	0x40023800
 8004804:	40020800 	.word	0x40020800
 8004808:	40020400 	.word	0x40020400
 800480c:	40021000 	.word	0x40021000
 8004810:	40020c00 	.word	0x40020c00

08004814 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004814:	b580      	push	{r7, lr}
 8004816:	ed2d 8b02 	vpush	{d8}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

	if(htim == &htim1) {
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a86      	ldr	r2, [pc, #536]	; (8004a3c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d126      	bne.n	8004876 <HAL_TIM_PeriodElapsedCallback+0x62>
		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
		uint32_t temp = __HAL_TIM_GET_COUNTER(&htim2);
 8004828:	4b85      	ldr	r3, [pc, #532]	; (8004a40 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	60fb      	str	r3, [r7, #12]
		float freq = ((float)counterPeriod + 1) / (temp - counterValue) * TimerFreq;
 8004830:	4b84      	ldr	r3, [pc, #528]	; (8004a44 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	ee07 3a90 	vmov	s15, r3
 8004838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004840:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004844:	4b80      	ldr	r3, [pc, #512]	; (8004a48 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	ee07 3a90 	vmov	s15, r3
 8004850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004858:	4b7c      	ldr	r3, [pc, #496]	; (8004a4c <HAL_TIM_PeriodElapsedCallback+0x238>)
 800485a:	edd3 7a00 	vldr	s15, [r3]
 800485e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004862:	edc7 7a02 	vstr	s15, [r7, #8]
		setFreq((valueTypes)freq);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4618      	mov	r0, r3
 800486a:	f7fd ff9d 	bl	80027a8 <setFreq>
		counterValue = temp;
 800486e:	4a76      	ldr	r2, [pc, #472]	; (8004a48 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6013      	str	r3, [r2, #0]
		setTemp2((valueTypes)(getTemp3455(dmaADC2buffer[1] * getTemp2_coeff().val_float)));
		setTemp3((valueTypes)(getTempPt1000(dmaADC2buffer[2] * getTemp3_coeff().val_float)));
		setTemp4((valueTypes)(getTempPt1000(dmaADC2buffer[3] * getTemp4_coeff().val_float)));
	}

}
 8004874:	e0dc      	b.n	8004a30 <HAL_TIM_PeriodElapsedCallback+0x21c>
	else if(htim == &htim6) {
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a75      	ldr	r2, [pc, #468]	; (8004a50 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	f040 80d8 	bne.w	8004a30 <HAL_TIM_PeriodElapsedCallback+0x21c>
		setU_24Vmeas((valueTypes)(dmaADC1buffer[0] * getU_24Vcoeff().val_float));
 8004880:	4b74      	ldr	r3, [pc, #464]	; (8004a54 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	ee07 3a90 	vmov	s15, r3
 8004888:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800488c:	f7fc ff80 	bl	8001790 <getU_24Vcoeff>
 8004890:	4603      	mov	r3, r0
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	ee68 7a27 	vmul.f32	s15, s16, s15
 800489a:	ee17 3a90 	vmov	r3, s15
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fc ff34 	bl	800170c <setU_24Vmeas>
		setU_PowerMeas((valueTypes)(dmaADC1buffer[1] * getU_PowerCoeff().val_float));
 80048a4:	4b6b      	ldr	r3, [pc, #428]	; (8004a54 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80048a6:	885b      	ldrh	r3, [r3, #2]
 80048a8:	ee07 3a90 	vmov	s15, r3
 80048ac:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80048b0:	f7fc ffbc 	bl	800182c <getU_PowerCoeff>
 80048b4:	4603      	mov	r3, r0
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	ee68 7a27 	vmul.f32	s15, s16, s15
 80048be:	ee17 3a90 	vmov	r3, s15
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fc ff70 	bl	80017a8 <setU_PowerMeas>
		setI_1A((valueTypes)(dmaADC1buffer[2] * getI_1A_Coeff().val_float));
 80048c8:	4b62      	ldr	r3, [pc, #392]	; (8004a54 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80048ca:	889b      	ldrh	r3, [r3, #4]
 80048cc:	ee07 3a90 	vmov	s15, r3
 80048d0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80048d4:	f7fd f84c 	bl	8001970 <getI_1A_Coeff>
 80048d8:	4603      	mov	r3, r0
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	ee68 7a27 	vmul.f32	s15, s16, s15
 80048e2:	ee17 3a90 	vmov	r3, s15
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fc ffac 	bl	8001844 <setI_1A>
		setI_1B((valueTypes)(dmaADC1buffer[3] * getI_1B_Coeff().val_float));
 80048ec:	4b59      	ldr	r3, [pc, #356]	; (8004a54 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80048ee:	88db      	ldrh	r3, [r3, #6]
 80048f0:	ee07 3a90 	vmov	s15, r3
 80048f4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80048f8:	f7fd f86c 	bl	80019d4 <getI_1B_Coeff>
 80048fc:	4603      	mov	r3, r0
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004906:	ee17 3a90 	vmov	r3, s15
 800490a:	4618      	mov	r0, r3
 800490c:	f7fc ffb6 	bl	800187c <setI_1B>
		setI_2A((valueTypes)(dmaADC1buffer[4] * getI_2A_Coeff().val_float));
 8004910:	4b50      	ldr	r3, [pc, #320]	; (8004a54 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8004912:	891b      	ldrh	r3, [r3, #8]
 8004914:	ee07 3a90 	vmov	s15, r3
 8004918:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800491c:	f7fd f88c 	bl	8001a38 <getI_2A_Coeff>
 8004920:	4603      	mov	r3, r0
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	ee68 7a27 	vmul.f32	s15, s16, s15
 800492a:	ee17 3a90 	vmov	r3, s15
 800492e:	4618      	mov	r0, r3
 8004930:	f7fc ffc0 	bl	80018b4 <setI_2A>
		setI_2B((valueTypes)(dmaADC1buffer[5] * getI_2B_Coeff().val_float));
 8004934:	4b47      	ldr	r3, [pc, #284]	; (8004a54 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8004936:	895b      	ldrh	r3, [r3, #10]
 8004938:	ee07 3a90 	vmov	s15, r3
 800493c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8004940:	f7fd f8ac 	bl	8001a9c <getI_2B_Coeff>
 8004944:	4603      	mov	r3, r0
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800494e:	ee17 3a90 	vmov	r3, s15
 8004952:	4618      	mov	r0, r3
 8004954:	f7fc ffca 	bl	80018ec <setI_2B>
		setTemp1((valueTypes)(getTemp3455(dmaADC2buffer[0] * getTemp1_coeff().val_float)));
 8004958:	4b3f      	ldr	r3, [pc, #252]	; (8004a58 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	ee07 3a90 	vmov	s15, r3
 8004960:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8004964:	f7fd f93c 	bl	8001be0 <getTemp1_coeff>
 8004968:	4603      	mov	r3, r0
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004976:	ee17 3a90 	vmov	r3, s15
 800497a:	b29b      	uxth	r3, r3
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fc8f 	bl	80052a0 <getTemp3455>
 8004982:	ed87 0a00 	vstr	s0, [r7]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f7fd f893 	bl	8001ab4 <setTemp1>
		setTemp2((valueTypes)(getTemp3455(dmaADC2buffer[1] * getTemp2_coeff().val_float)));
 800498e:	4b32      	ldr	r3, [pc, #200]	; (8004a58 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8004990:	885b      	ldrh	r3, [r3, #2]
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800499a:	f7fd f953 	bl	8001c44 <getTemp2_coeff>
 800499e:	4603      	mov	r3, r0
 80049a0:	ee07 3a90 	vmov	s15, r3
 80049a4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80049a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ac:	ee17 3a90 	vmov	r3, s15
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fc74 	bl	80052a0 <getTemp3455>
 80049b8:	ed87 0a00 	vstr	s0, [r7]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fd f894 	bl	8001aec <setTemp2>
		setTemp3((valueTypes)(getTempPt1000(dmaADC2buffer[2] * getTemp3_coeff().val_float)));
 80049c4:	4b24      	ldr	r3, [pc, #144]	; (8004a58 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80049c6:	889b      	ldrh	r3, [r3, #4]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80049d0:	f7fd f96a 	bl	8001ca8 <getTemp3_coeff>
 80049d4:	4603      	mov	r3, r0
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	ee68 7a27 	vmul.f32	s15, s16, s15
 80049de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e2:	ee17 3a90 	vmov	r3, s15
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fcdb 	bl	80053a4 <getTempPt1000>
 80049ee:	ed87 0a00 	vstr	s0, [r7]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fd f895 	bl	8001b24 <setTemp3>
		setTemp4((valueTypes)(getTempPt1000(dmaADC2buffer[3] * getTemp4_coeff().val_float)));
 80049fa:	4b17      	ldr	r3, [pc, #92]	; (8004a58 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80049fc:	88db      	ldrh	r3, [r3, #6]
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8004a06:	f7fd f981 	bl	8001d0c <getTemp4_coeff>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	ee07 3a90 	vmov	s15, r3
 8004a10:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a18:	ee17 3a90 	vmov	r3, s15
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fcc0 	bl	80053a4 <getTempPt1000>
 8004a24:	ed87 0a00 	vstr	s0, [r7]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fd f896 	bl	8001b5c <setTemp4>
}
 8004a30:	bf00      	nop
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	ecbd 8b02 	vpop	{d8}
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20001a00 	.word	0x20001a00
 8004a40:	20001a48 	.word	0x20001a48
 8004a44:	20001c3c 	.word	0x20001c3c
 8004a48:	20001c40 	.word	0x20001c40
 8004a4c:	20000e70 	.word	0x20000e70
 8004a50:	20001b68 	.word	0x20001b68
 8004a54:	20001c44 	.word	0x20001c44
 8004a58:	20001c50 	.word	0x20001c50

08004a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a60:	b672      	cpsid	i
}
 8004a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  UARTtransmit("Hard fault! Something went wrong.");
 8004a64:	4801      	ldr	r0, [pc, #4]	; (8004a6c <Error_Handler+0x10>)
 8004a66:	f7fd ff97 	bl	8002998 <UARTtransmit>
 8004a6a:	e7fb      	b.n	8004a64 <Error_Handler+0x8>
 8004a6c:	0800f30c 	.word	0x0800f30c

08004a70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	607b      	str	r3, [r7, #4]
 8004a7a:	4b10      	ldr	r3, [pc, #64]	; (8004abc <HAL_MspInit+0x4c>)
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	4a0f      	ldr	r2, [pc, #60]	; (8004abc <HAL_MspInit+0x4c>)
 8004a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a84:	6453      	str	r3, [r2, #68]	; 0x44
 8004a86:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <HAL_MspInit+0x4c>)
 8004a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a92:	2300      	movs	r3, #0
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	4b09      	ldr	r3, [pc, #36]	; (8004abc <HAL_MspInit+0x4c>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	4a08      	ldr	r2, [pc, #32]	; (8004abc <HAL_MspInit+0x4c>)
 8004a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <HAL_MspInit+0x4c>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40023800 	.word	0x40023800

08004ac0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08c      	sub	sp, #48	; 0x30
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac8:	f107 031c 	add.w	r3, r7, #28
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	60da      	str	r2, [r3, #12]
 8004ad6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a5e      	ldr	r2, [pc, #376]	; (8004c58 <HAL_ADC_MspInit+0x198>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d158      	bne.n	8004b94 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61bb      	str	r3, [r7, #24]
 8004ae6:	4b5d      	ldr	r3, [pc, #372]	; (8004c5c <HAL_ADC_MspInit+0x19c>)
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	4a5c      	ldr	r2, [pc, #368]	; (8004c5c <HAL_ADC_MspInit+0x19c>)
 8004aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af0:	6453      	str	r3, [r2, #68]	; 0x44
 8004af2:	4b5a      	ldr	r3, [pc, #360]	; (8004c5c <HAL_ADC_MspInit+0x19c>)
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afa:	61bb      	str	r3, [r7, #24]
 8004afc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	4b56      	ldr	r3, [pc, #344]	; (8004c5c <HAL_ADC_MspInit+0x19c>)
 8004b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b06:	4a55      	ldr	r2, [pc, #340]	; (8004c5c <HAL_ADC_MspInit+0x19c>)
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b0e:	4b53      	ldr	r3, [pc, #332]	; (8004c5c <HAL_ADC_MspInit+0x19c>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	697b      	ldr	r3, [r7, #20]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = U_Heater_Meas_Pin|U_POWER_Meas_Pin|CurrMeas1_A_Pin|CurrMeas1_B_Pin
 8004b1a:	233f      	movs	r3, #63	; 0x3f
 8004b1c:	61fb      	str	r3, [r7, #28]
                          |CurrMeas2_A_Pin|CurrMeas2_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b26:	f107 031c 	add.w	r3, r7, #28
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	484c      	ldr	r0, [pc, #304]	; (8004c60 <HAL_ADC_MspInit+0x1a0>)
 8004b2e:	f002 f935 	bl	8006d9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004b32:	4b4c      	ldr	r3, [pc, #304]	; (8004c64 <HAL_ADC_MspInit+0x1a4>)
 8004b34:	4a4c      	ldr	r2, [pc, #304]	; (8004c68 <HAL_ADC_MspInit+0x1a8>)
 8004b36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004b38:	4b4a      	ldr	r3, [pc, #296]	; (8004c64 <HAL_ADC_MspInit+0x1a4>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b3e:	4b49      	ldr	r3, [pc, #292]	; (8004c64 <HAL_ADC_MspInit+0x1a4>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b44:	4b47      	ldr	r3, [pc, #284]	; (8004c64 <HAL_ADC_MspInit+0x1a4>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004b4a:	4b46      	ldr	r3, [pc, #280]	; (8004c64 <HAL_ADC_MspInit+0x1a4>)
 8004b4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004b52:	4b44      	ldr	r3, [pc, #272]	; (8004c64 <HAL_ADC_MspInit+0x1a4>)
 8004b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004b5a:	4b42      	ldr	r3, [pc, #264]	; (8004c64 <HAL_ADC_MspInit+0x1a4>)
 8004b5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004b62:	4b40      	ldr	r3, [pc, #256]	; (8004c64 <HAL_ADC_MspInit+0x1a4>)
 8004b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004b6a:	4b3e      	ldr	r3, [pc, #248]	; (8004c64 <HAL_ADC_MspInit+0x1a4>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b70:	4b3c      	ldr	r3, [pc, #240]	; (8004c64 <HAL_ADC_MspInit+0x1a4>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004b76:	483b      	ldr	r0, [pc, #236]	; (8004c64 <HAL_ADC_MspInit+0x1a4>)
 8004b78:	f001 fa46 	bl	8006008 <HAL_DMA_Init>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004b82:	f7ff ff6b 	bl	8004a5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a36      	ldr	r2, [pc, #216]	; (8004c64 <HAL_ADC_MspInit+0x1a4>)
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38
 8004b8c:	4a35      	ldr	r2, [pc, #212]	; (8004c64 <HAL_ADC_MspInit+0x1a4>)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004b92:	e05d      	b.n	8004c50 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a34      	ldr	r2, [pc, #208]	; (8004c6c <HAL_ADC_MspInit+0x1ac>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d158      	bne.n	8004c50 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	4b2e      	ldr	r3, [pc, #184]	; (8004c5c <HAL_ADC_MspInit+0x19c>)
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba6:	4a2d      	ldr	r2, [pc, #180]	; (8004c5c <HAL_ADC_MspInit+0x19c>)
 8004ba8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bac:	6453      	str	r3, [r2, #68]	; 0x44
 8004bae:	4b2b      	ldr	r3, [pc, #172]	; (8004c5c <HAL_ADC_MspInit+0x19c>)
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	4b27      	ldr	r3, [pc, #156]	; (8004c5c <HAL_ADC_MspInit+0x19c>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	4a26      	ldr	r2, [pc, #152]	; (8004c5c <HAL_ADC_MspInit+0x19c>)
 8004bc4:	f043 0304 	orr.w	r3, r3, #4
 8004bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bca:	4b24      	ldr	r3, [pc, #144]	; (8004c5c <HAL_ADC_MspInit+0x19c>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TempMeas1_Pin|TempMeas2_Pin|TempMeas3_Pin|TempMeas4_Pin;
 8004bd6:	230f      	movs	r3, #15
 8004bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004be2:	f107 031c 	add.w	r3, r7, #28
 8004be6:	4619      	mov	r1, r3
 8004be8:	4821      	ldr	r0, [pc, #132]	; (8004c70 <HAL_ADC_MspInit+0x1b0>)
 8004bea:	f002 f8d7 	bl	8006d9c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8004bee:	4b21      	ldr	r3, [pc, #132]	; (8004c74 <HAL_ADC_MspInit+0x1b4>)
 8004bf0:	4a21      	ldr	r2, [pc, #132]	; (8004c78 <HAL_ADC_MspInit+0x1b8>)
 8004bf2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004bf4:	4b1f      	ldr	r3, [pc, #124]	; (8004c74 <HAL_ADC_MspInit+0x1b4>)
 8004bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bfa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bfc:	4b1d      	ldr	r3, [pc, #116]	; (8004c74 <HAL_ADC_MspInit+0x1b4>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c02:	4b1c      	ldr	r3, [pc, #112]	; (8004c74 <HAL_ADC_MspInit+0x1b4>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004c08:	4b1a      	ldr	r3, [pc, #104]	; (8004c74 <HAL_ADC_MspInit+0x1b4>)
 8004c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c0e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c10:	4b18      	ldr	r3, [pc, #96]	; (8004c74 <HAL_ADC_MspInit+0x1b4>)
 8004c12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c16:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c18:	4b16      	ldr	r3, [pc, #88]	; (8004c74 <HAL_ADC_MspInit+0x1b4>)
 8004c1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c1e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004c20:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <HAL_ADC_MspInit+0x1b4>)
 8004c22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c26:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004c28:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <HAL_ADC_MspInit+0x1b4>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <HAL_ADC_MspInit+0x1b4>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004c34:	480f      	ldr	r0, [pc, #60]	; (8004c74 <HAL_ADC_MspInit+0x1b4>)
 8004c36:	f001 f9e7 	bl	8006008 <HAL_DMA_Init>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8004c40:	f7ff ff0c 	bl	8004a5c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a0b      	ldr	r2, [pc, #44]	; (8004c74 <HAL_ADC_MspInit+0x1b4>)
 8004c48:	639a      	str	r2, [r3, #56]	; 0x38
 8004c4a:	4a0a      	ldr	r2, [pc, #40]	; (8004c74 <HAL_ADC_MspInit+0x1b4>)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004c50:	bf00      	nop
 8004c52:	3730      	adds	r7, #48	; 0x30
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40012000 	.word	0x40012000
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	40020000 	.word	0x40020000
 8004c64:	20001934 	.word	0x20001934
 8004c68:	40026410 	.word	0x40026410
 8004c6c:	40012100 	.word	0x40012100
 8004c70:	40020800 	.word	0x40020800
 8004c74:	20001994 	.word	0x20001994
 8004c78:	40026440 	.word	0x40026440

08004c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b090      	sub	sp, #64	; 0x40
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	609a      	str	r2, [r3, #8]
 8004c90:	60da      	str	r2, [r3, #12]
 8004c92:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a5d      	ldr	r2, [pc, #372]	; (8004e10 <HAL_TIM_Base_MspInit+0x194>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d134      	bne.n	8004d08 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ca2:	4b5c      	ldr	r3, [pc, #368]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca6:	4a5b      	ldr	r2, [pc, #364]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004ca8:	f043 0301 	orr.w	r3, r3, #1
 8004cac:	6453      	str	r3, [r2, #68]	; 0x44
 8004cae:	4b59      	ldr	r3, [pc, #356]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004cba:	2300      	movs	r3, #0
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cbe:	4b55      	ldr	r3, [pc, #340]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	4a54      	ldr	r2, [pc, #336]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004cc4:	f043 0310 	orr.w	r3, r3, #16
 8004cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cca:	4b52      	ldr	r3, [pc, #328]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004cd6:	2380      	movs	r3, #128	; 0x80
 8004cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cda:	2302      	movs	r3, #2
 8004cdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4849      	ldr	r0, [pc, #292]	; (8004e18 <HAL_TIM_Base_MspInit+0x19c>)
 8004cf2:	f002 f853 	bl	8006d9c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	2019      	movs	r0, #25
 8004cfc:	f001 f94d 	bl	8005f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004d00:	2019      	movs	r0, #25
 8004d02:	f001 f966 	bl	8005fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004d06:	e07e      	b.n	8004e06 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM2)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d10:	d10e      	bne.n	8004d30 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d12:	2300      	movs	r3, #0
 8004d14:	623b      	str	r3, [r7, #32]
 8004d16:	4b3f      	ldr	r3, [pc, #252]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	4a3e      	ldr	r2, [pc, #248]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004d1c:	f043 0301 	orr.w	r3, r3, #1
 8004d20:	6413      	str	r3, [r2, #64]	; 0x40
 8004d22:	4b3c      	ldr	r3, [pc, #240]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	623b      	str	r3, [r7, #32]
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
}
 8004d2e:	e06a      	b.n	8004e06 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM3)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a39      	ldr	r2, [pc, #228]	; (8004e1c <HAL_TIM_Base_MspInit+0x1a0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d10e      	bne.n	8004d58 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	4b35      	ldr	r3, [pc, #212]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	4a34      	ldr	r2, [pc, #208]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004d44:	f043 0302 	orr.w	r3, r3, #2
 8004d48:	6413      	str	r3, [r2, #64]	; 0x40
 8004d4a:	4b32      	ldr	r3, [pc, #200]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	69fb      	ldr	r3, [r7, #28]
}
 8004d56:	e056      	b.n	8004e06 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM4)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a30      	ldr	r2, [pc, #192]	; (8004e20 <HAL_TIM_Base_MspInit+0x1a4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d10e      	bne.n	8004d80 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004d62:	2300      	movs	r3, #0
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	4b2b      	ldr	r3, [pc, #172]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	4a2a      	ldr	r2, [pc, #168]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004d6c:	f043 0304 	orr.w	r3, r3, #4
 8004d70:	6413      	str	r3, [r2, #64]	; 0x40
 8004d72:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	69bb      	ldr	r3, [r7, #24]
}
 8004d7e:	e042      	b.n	8004e06 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM5)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a27      	ldr	r2, [pc, #156]	; (8004e24 <HAL_TIM_Base_MspInit+0x1a8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d10e      	bne.n	8004da8 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	4b21      	ldr	r3, [pc, #132]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	4a20      	ldr	r2, [pc, #128]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004d94:	f043 0308 	orr.w	r3, r3, #8
 8004d98:	6413      	str	r3, [r2, #64]	; 0x40
 8004d9a:	4b1e      	ldr	r3, [pc, #120]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	697b      	ldr	r3, [r7, #20]
}
 8004da6:	e02e      	b.n	8004e06 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM6)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a1e      	ldr	r2, [pc, #120]	; (8004e28 <HAL_TIM_Base_MspInit+0x1ac>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d116      	bne.n	8004de0 <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004db2:	2300      	movs	r3, #0
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	4b17      	ldr	r3, [pc, #92]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	4a16      	ldr	r2, [pc, #88]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004dbc:	f043 0310 	orr.w	r3, r3, #16
 8004dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8004dc2:	4b14      	ldr	r3, [pc, #80]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f003 0310 	and.w	r3, r3, #16
 8004dca:	613b      	str	r3, [r7, #16]
 8004dcc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2103      	movs	r1, #3
 8004dd2:	2036      	movs	r0, #54	; 0x36
 8004dd4:	f001 f8e1 	bl	8005f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004dd8:	2036      	movs	r0, #54	; 0x36
 8004dda:	f001 f8fa 	bl	8005fd2 <HAL_NVIC_EnableIRQ>
}
 8004dde:	e012      	b.n	8004e06 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM8)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a11      	ldr	r2, [pc, #68]	; (8004e2c <HAL_TIM_Base_MspInit+0x1b0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d10d      	bne.n	8004e06 <HAL_TIM_Base_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df2:	4a08      	ldr	r2, [pc, #32]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004df4:	f043 0302 	orr.w	r3, r3, #2
 8004df8:	6453      	str	r3, [r2, #68]	; 0x44
 8004dfa:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <HAL_TIM_Base_MspInit+0x198>)
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
}
 8004e06:	bf00      	nop
 8004e08:	3740      	adds	r7, #64	; 0x40
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40010000 	.word	0x40010000
 8004e14:	40023800 	.word	0x40023800
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	40000400 	.word	0x40000400
 8004e20:	40000800 	.word	0x40000800
 8004e24:	40000c00 	.word	0x40000c00
 8004e28:	40001000 	.word	0x40001000
 8004e2c:	40010400 	.word	0x40010400

08004e30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08c      	sub	sp, #48	; 0x30
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e38:	f107 031c 	add.w	r3, r7, #28
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	609a      	str	r2, [r3, #8]
 8004e44:	60da      	str	r2, [r3, #12]
 8004e46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a49      	ldr	r2, [pc, #292]	; (8004f74 <HAL_TIM_MspPostInit+0x144>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d11f      	bne.n	8004e92 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	4b48      	ldr	r3, [pc, #288]	; (8004f78 <HAL_TIM_MspPostInit+0x148>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	4a47      	ldr	r2, [pc, #284]	; (8004f78 <HAL_TIM_MspPostInit+0x148>)
 8004e5c:	f043 0310 	orr.w	r3, r3, #16
 8004e60:	6313      	str	r3, [r2, #48]	; 0x30
 8004e62:	4b45      	ldr	r3, [pc, #276]	; (8004f78 <HAL_TIM_MspPostInit+0x148>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	61bb      	str	r3, [r7, #24]
 8004e6c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e74:	2302      	movs	r3, #2
 8004e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e80:	2301      	movs	r3, #1
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e84:	f107 031c 	add.w	r3, r7, #28
 8004e88:	4619      	mov	r1, r3
 8004e8a:	483c      	ldr	r0, [pc, #240]	; (8004f7c <HAL_TIM_MspPostInit+0x14c>)
 8004e8c:	f001 ff86 	bl	8006d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004e90:	e06c      	b.n	8004f6c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM3)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a3a      	ldr	r2, [pc, #232]	; (8004f80 <HAL_TIM_MspPostInit+0x150>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d11e      	bne.n	8004eda <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	4b35      	ldr	r3, [pc, #212]	; (8004f78 <HAL_TIM_MspPostInit+0x148>)
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea4:	4a34      	ldr	r2, [pc, #208]	; (8004f78 <HAL_TIM_MspPostInit+0x148>)
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8004eac:	4b32      	ldr	r3, [pc, #200]	; (8004f78 <HAL_TIM_MspPostInit+0x148>)
 8004eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GateL1_A_Pin|GateL1_B_Pin;
 8004eb8:	23c0      	movs	r3, #192	; 0xc0
 8004eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004ec8:	2302      	movs	r3, #2
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ecc:	f107 031c 	add.w	r3, r7, #28
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	482c      	ldr	r0, [pc, #176]	; (8004f84 <HAL_TIM_MspPostInit+0x154>)
 8004ed4:	f001 ff62 	bl	8006d9c <HAL_GPIO_Init>
}
 8004ed8:	e048      	b.n	8004f6c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a2a      	ldr	r2, [pc, #168]	; (8004f88 <HAL_TIM_MspPostInit+0x158>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d11f      	bne.n	8004f24 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	4b23      	ldr	r3, [pc, #140]	; (8004f78 <HAL_TIM_MspPostInit+0x148>)
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	4a22      	ldr	r2, [pc, #136]	; (8004f78 <HAL_TIM_MspPostInit+0x148>)
 8004eee:	f043 0308 	orr.w	r3, r3, #8
 8004ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ef4:	4b20      	ldr	r3, [pc, #128]	; (8004f78 <HAL_TIM_MspPostInit+0x148>)
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GateL2_A_Pin|GateL2_B_Pin;
 8004f00:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f06:	2302      	movs	r3, #2
 8004f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004f12:	2302      	movs	r3, #2
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f16:	f107 031c 	add.w	r3, r7, #28
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	481b      	ldr	r0, [pc, #108]	; (8004f8c <HAL_TIM_MspPostInit+0x15c>)
 8004f1e:	f001 ff3d 	bl	8006d9c <HAL_GPIO_Init>
}
 8004f22:	e023      	b.n	8004f6c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM8)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <HAL_TIM_MspPostInit+0x160>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d11e      	bne.n	8004f6c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	4b11      	ldr	r3, [pc, #68]	; (8004f78 <HAL_TIM_MspPostInit+0x148>)
 8004f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f36:	4a10      	ldr	r2, [pc, #64]	; (8004f78 <HAL_TIM_MspPostInit+0x148>)
 8004f38:	f043 0304 	orr.w	r3, r3, #4
 8004f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f3e:	4b0e      	ldr	r3, [pc, #56]	; (8004f78 <HAL_TIM_MspPostInit+0x148>)
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Set_U_Heater_Pin;
 8004f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f50:	2302      	movs	r3, #2
 8004f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f54:	2300      	movs	r3, #0
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Set_U_Heater_GPIO_Port, &GPIO_InitStruct);
 8004f60:	f107 031c 	add.w	r3, r7, #28
 8004f64:	4619      	mov	r1, r3
 8004f66:	480b      	ldr	r0, [pc, #44]	; (8004f94 <HAL_TIM_MspPostInit+0x164>)
 8004f68:	f001 ff18 	bl	8006d9c <HAL_GPIO_Init>
}
 8004f6c:	bf00      	nop
 8004f6e:	3730      	adds	r7, #48	; 0x30
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40010000 	.word	0x40010000
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40000400 	.word	0x40000400
 8004f84:	40020000 	.word	0x40020000
 8004f88:	40000800 	.word	0x40000800
 8004f8c:	40020c00 	.word	0x40020c00
 8004f90:	40010400 	.word	0x40010400
 8004f94:	40020800 	.word	0x40020800

08004f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08a      	sub	sp, #40	; 0x28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa0:	f107 0314 	add.w	r3, r7, #20
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	609a      	str	r2, [r3, #8]
 8004fac:	60da      	str	r2, [r3, #12]
 8004fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a1d      	ldr	r2, [pc, #116]	; (800502c <HAL_UART_MspInit+0x94>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d133      	bne.n	8005022 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004fba:	2300      	movs	r3, #0
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	4b1c      	ldr	r3, [pc, #112]	; (8005030 <HAL_UART_MspInit+0x98>)
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	4a1b      	ldr	r2, [pc, #108]	; (8005030 <HAL_UART_MspInit+0x98>)
 8004fc4:	f043 0310 	orr.w	r3, r3, #16
 8004fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8004fca:	4b19      	ldr	r3, [pc, #100]	; (8005030 <HAL_UART_MspInit+0x98>)
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	4b15      	ldr	r3, [pc, #84]	; (8005030 <HAL_UART_MspInit+0x98>)
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fde:	4a14      	ldr	r2, [pc, #80]	; (8005030 <HAL_UART_MspInit+0x98>)
 8004fe0:	f043 0302 	orr.w	r3, r3, #2
 8004fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fe6:	4b12      	ldr	r3, [pc, #72]	; (8005030 <HAL_UART_MspInit+0x98>)
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ff2:	23c0      	movs	r3, #192	; 0xc0
 8004ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ffe:	2303      	movs	r3, #3
 8005000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005002:	2307      	movs	r3, #7
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005006:	f107 0314 	add.w	r3, r7, #20
 800500a:	4619      	mov	r1, r3
 800500c:	4809      	ldr	r0, [pc, #36]	; (8005034 <HAL_UART_MspInit+0x9c>)
 800500e:	f001 fec5 	bl	8006d9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8005012:	2200      	movs	r2, #0
 8005014:	2101      	movs	r1, #1
 8005016:	2025      	movs	r0, #37	; 0x25
 8005018:	f000 ffbf 	bl	8005f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800501c:	2025      	movs	r0, #37	; 0x25
 800501e:	f000 ffd8 	bl	8005fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005022:	bf00      	nop
 8005024:	3728      	adds	r7, #40	; 0x28
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40011000 	.word	0x40011000
 8005030:	40023800 	.word	0x40023800
 8005034:	40020400 	.word	0x40020400

08005038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800503c:	e7fe      	b.n	800503c <NMI_Handler+0x4>

0800503e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800503e:	b480      	push	{r7}
 8005040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005042:	e7fe      	b.n	8005042 <HardFault_Handler+0x4>

08005044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005048:	e7fe      	b.n	8005048 <MemManage_Handler+0x4>

0800504a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800504a:	b480      	push	{r7}
 800504c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800504e:	e7fe      	b.n	800504e <BusFault_Handler+0x4>

08005050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005054:	e7fe      	b.n	8005054 <UsageFault_Handler+0x4>

08005056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005056:	b480      	push	{r7}
 8005058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800505a:	bf00      	nop
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005068:	bf00      	nop
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005072:	b480      	push	{r7}
 8005074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005076:	bf00      	nop
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005084:	f000 fa7c 	bl	8005580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005088:	bf00      	nop
 800508a:	bd80      	pop	{r7, pc}

0800508c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005090:	4802      	ldr	r0, [pc, #8]	; (800509c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005092:	f002 ff6d 	bl	8007f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005096:	bf00      	nop
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20001a00 	.word	0x20001a00

080050a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80050a4:	4802      	ldr	r0, [pc, #8]	; (80050b0 <USART1_IRQHandler+0x10>)
 80050a6:	f003 ff1f 	bl	8008ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80050aa:	bf00      	nop
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20001bf8 	.word	0x20001bf8

080050b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80050b8:	4802      	ldr	r0, [pc, #8]	; (80050c4 <TIM6_DAC_IRQHandler+0x10>)
 80050ba:	f002 ff59 	bl	8007f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80050be:	bf00      	nop
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20001b68 	.word	0x20001b68

080050c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80050cc:	4802      	ldr	r0, [pc, #8]	; (80050d8 <DMA2_Stream0_IRQHandler+0x10>)
 80050ce:	f001 f933 	bl	8006338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80050d2:	bf00      	nop
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20001934 	.word	0x20001934

080050dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80050e0:	4802      	ldr	r0, [pc, #8]	; (80050ec <DMA2_Stream2_IRQHandler+0x10>)
 80050e2:	f001 f929 	bl	8006338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80050e6:	bf00      	nop
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20001994 	.word	0x20001994

080050f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
	return 1;
 80050f4:	2301      	movs	r3, #1
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <_kill>:

int _kill(int pid, int sig)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800510a:	f004 fe73 	bl	8009df4 <__errno>
 800510e:	4603      	mov	r3, r0
 8005110:	2216      	movs	r2, #22
 8005112:	601a      	str	r2, [r3, #0]
	return -1;
 8005114:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <_exit>:

void _exit (int status)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005128:	f04f 31ff 	mov.w	r1, #4294967295
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f7ff ffe7 	bl	8005100 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005132:	e7fe      	b.n	8005132 <_exit+0x12>

08005134 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	e00a      	b.n	800515c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005146:	f3af 8000 	nop.w
 800514a:	4601      	mov	r1, r0
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	60ba      	str	r2, [r7, #8]
 8005152:	b2ca      	uxtb	r2, r1
 8005154:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	3301      	adds	r3, #1
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	429a      	cmp	r2, r3
 8005162:	dbf0      	blt.n	8005146 <_read+0x12>
	}

return len;
 8005164:	687b      	ldr	r3, [r7, #4]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b086      	sub	sp, #24
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800517a:	2300      	movs	r3, #0
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	e009      	b.n	8005194 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	60ba      	str	r2, [r7, #8]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	3301      	adds	r3, #1
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	429a      	cmp	r2, r3
 800519a:	dbf1      	blt.n	8005180 <_write+0x12>
	}
	return len;
 800519c:	687b      	ldr	r3, [r7, #4]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <_close>:

int _close(int file)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
	return -1;
 80051ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051ce:	605a      	str	r2, [r3, #4]
	return 0;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <_isatty>:

int _isatty(int file)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
	return 1;
 80051e6:	2301      	movs	r3, #1
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
	return 0;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
	...

08005210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005218:	4a14      	ldr	r2, [pc, #80]	; (800526c <_sbrk+0x5c>)
 800521a:	4b15      	ldr	r3, [pc, #84]	; (8005270 <_sbrk+0x60>)
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005224:	4b13      	ldr	r3, [pc, #76]	; (8005274 <_sbrk+0x64>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d102      	bne.n	8005232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800522c:	4b11      	ldr	r3, [pc, #68]	; (8005274 <_sbrk+0x64>)
 800522e:	4a12      	ldr	r2, [pc, #72]	; (8005278 <_sbrk+0x68>)
 8005230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005232:	4b10      	ldr	r3, [pc, #64]	; (8005274 <_sbrk+0x64>)
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4413      	add	r3, r2
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	429a      	cmp	r2, r3
 800523e:	d207      	bcs.n	8005250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005240:	f004 fdd8 	bl	8009df4 <__errno>
 8005244:	4603      	mov	r3, r0
 8005246:	220c      	movs	r2, #12
 8005248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800524a:	f04f 33ff 	mov.w	r3, #4294967295
 800524e:	e009      	b.n	8005264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005250:	4b08      	ldr	r3, [pc, #32]	; (8005274 <_sbrk+0x64>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005256:	4b07      	ldr	r3, [pc, #28]	; (8005274 <_sbrk+0x64>)
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4413      	add	r3, r2
 800525e:	4a05      	ldr	r2, [pc, #20]	; (8005274 <_sbrk+0x64>)
 8005260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005262:	68fb      	ldr	r3, [r7, #12]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20020000 	.word	0x20020000
 8005270:	00000400 	.word	0x00000400
 8005274:	20001c58 	.word	0x20001c58
 8005278:	20001c90 	.word	0x20001c90

0800527c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005280:	4b06      	ldr	r3, [pc, #24]	; (800529c <SystemInit+0x20>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005286:	4a05      	ldr	r2, [pc, #20]	; (800529c <SystemInit+0x20>)
 8005288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800528c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005290:	bf00      	nop
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	e000ed00 	.word	0xe000ed00

080052a0 <getTemp3455>:
		3266, 3340, 3413, 3487, 3559,
		3632, 3704, 3776, 3848, 3919,
		3990
};

float getTemp3455(uint16_t rawData) {
 80052a0:	b5b0      	push	{r4, r5, r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	80fb      	strh	r3, [r7, #6]
	if(rawData < rawValues3455[41] ||
 80052aa:	4b3a      	ldr	r3, [pc, #232]	; (8005394 <getTemp3455+0xf4>)
 80052ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052b0:	88fa      	ldrh	r2, [r7, #6]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d304      	bcc.n	80052c0 <getTemp3455+0x20>
		rawData > rawValues3455[0]) {
 80052b6:	4b37      	ldr	r3, [pc, #220]	; (8005394 <getTemp3455+0xf4>)
 80052b8:	881b      	ldrh	r3, [r3, #0]
	if(rawData < rawValues3455[41] ||
 80052ba:	88fa      	ldrh	r2, [r7, #6]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d901      	bls.n	80052c4 <getTemp3455+0x24>
		return 999.9;
 80052c0:	4b35      	ldr	r3, [pc, #212]	; (8005398 <getTemp3455+0xf8>)
 80052c2:	e05f      	b.n	8005384 <getTemp3455+0xe4>
	}
	else {
		for(int i = 1; i < 42; i++) {
 80052c4:	2301      	movs	r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	e058      	b.n	800537c <getTemp3455+0xdc>
			if(rawData >= rawValues3455[i]) {
 80052ca:	4a32      	ldr	r2, [pc, #200]	; (8005394 <getTemp3455+0xf4>)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052d2:	88fa      	ldrh	r2, [r7, #6]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d34e      	bcc.n	8005376 <getTemp3455+0xd6>
				float temp;
				temp = 5.0/(rawValues3455[i-1] - rawValues3455[i]) * (rawValues3455[i-1] - rawData) + i * 5.0 - 60; //C
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3b01      	subs	r3, #1
 80052dc:	4a2d      	ldr	r2, [pc, #180]	; (8005394 <getTemp3455+0xf4>)
 80052de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052e2:	4619      	mov	r1, r3
 80052e4:	4a2b      	ldr	r2, [pc, #172]	; (8005394 <getTemp3455+0xf4>)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052ec:	1acb      	subs	r3, r1, r3
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fb f928 	bl	8000544 <__aeabi_i2d>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	f04f 0000 	mov.w	r0, #0
 80052fc:	4927      	ldr	r1, [pc, #156]	; (800539c <getTemp3455+0xfc>)
 80052fe:	f7fb fab5 	bl	800086c <__aeabi_ddiv>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4614      	mov	r4, r2
 8005308:	461d      	mov	r5, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	3b01      	subs	r3, #1
 800530e:	4a21      	ldr	r2, [pc, #132]	; (8005394 <getTemp3455+0xf4>)
 8005310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005314:	461a      	mov	r2, r3
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	4618      	mov	r0, r3
 800531c:	f7fb f912 	bl	8000544 <__aeabi_i2d>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4620      	mov	r0, r4
 8005326:	4629      	mov	r1, r5
 8005328:	f7fb f976 	bl	8000618 <__aeabi_dmul>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4614      	mov	r4, r2
 8005332:	461d      	mov	r5, r3
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7fb f905 	bl	8000544 <__aeabi_i2d>
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	4b17      	ldr	r3, [pc, #92]	; (800539c <getTemp3455+0xfc>)
 8005340:	f7fb f96a 	bl	8000618 <__aeabi_dmul>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4620      	mov	r0, r4
 800534a:	4629      	mov	r1, r5
 800534c:	f7fa ffae 	bl	80002ac <__adddf3>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <getTemp3455+0x100>)
 800535e:	f7fa ffa3 	bl	80002a8 <__aeabi_dsub>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4610      	mov	r0, r2
 8005368:	4619      	mov	r1, r3
 800536a:	f7fb fc4d 	bl	8000c08 <__aeabi_d2f>
 800536e:	4603      	mov	r3, r0
 8005370:	60bb      	str	r3, [r7, #8]
				return temp;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	e006      	b.n	8005384 <getTemp3455+0xe4>
		for(int i = 1; i < 42; i++) {
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3301      	adds	r3, #1
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b29      	cmp	r3, #41	; 0x29
 8005380:	dda3      	ble.n	80052ca <getTemp3455+0x2a>
			}
		}
		return 999.9;
 8005382:	4b05      	ldr	r3, [pc, #20]	; (8005398 <getTemp3455+0xf8>)
	}
}
 8005384:	ee07 3a90 	vmov	s15, r3
 8005388:	eeb0 0a67 	vmov.f32	s0, s15
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bdb0      	pop	{r4, r5, r7, pc}
 8005392:	bf00      	nop
 8005394:	20000eac 	.word	0x20000eac
 8005398:	4479f99a 	.word	0x4479f99a
 800539c:	40140000 	.word	0x40140000
 80053a0:	404e0000 	.word	0x404e0000

080053a4 <getTempPt1000>:

float getTempPt1000(uint16_t rawData) {
 80053a4:	b5b0      	push	{r4, r5, r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4603      	mov	r3, r0
 80053ac:	80fb      	strh	r3, [r7, #6]
	if(rawData > rawValuesPt1000[50]) {
 80053ae:	4b33      	ldr	r3, [pc, #204]	; (800547c <getTempPt1000+0xd8>)
 80053b0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80053b4:	88fa      	ldrh	r2, [r7, #6]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d901      	bls.n	80053be <getTempPt1000+0x1a>
		return 999.9;
 80053ba:	4b31      	ldr	r3, [pc, #196]	; (8005480 <getTempPt1000+0xdc>)
 80053bc:	e057      	b.n	800546e <getTempPt1000+0xca>
	}
	else {
		for(int i = 1; i < 51; i++) {
 80053be:	2301      	movs	r3, #1
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	e050      	b.n	8005466 <getTempPt1000+0xc2>
			if(rawData <= rawValuesPt1000[i]) {
 80053c4:	4a2d      	ldr	r2, [pc, #180]	; (800547c <getTempPt1000+0xd8>)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053cc:	88fa      	ldrh	r2, [r7, #6]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d846      	bhi.n	8005460 <getTempPt1000+0xbc>
				float temp;
				temp = 5.0/(rawValuesPt1000[i] - rawValuesPt1000[i-1]) * (rawData - rawValuesPt1000[i-1]) + (i-1) * 5.0; //C
 80053d2:	4a2a      	ldr	r2, [pc, #168]	; (800547c <getTempPt1000+0xd8>)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053da:	4619      	mov	r1, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3b01      	subs	r3, #1
 80053e0:	4a26      	ldr	r2, [pc, #152]	; (800547c <getTempPt1000+0xd8>)
 80053e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053e6:	1acb      	subs	r3, r1, r3
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fb f8ab 	bl	8000544 <__aeabi_i2d>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	4923      	ldr	r1, [pc, #140]	; (8005484 <getTempPt1000+0xe0>)
 80053f8:	f7fb fa38 	bl	800086c <__aeabi_ddiv>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4614      	mov	r4, r2
 8005402:	461d      	mov	r5, r3
 8005404:	88fb      	ldrh	r3, [r7, #6]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	3a01      	subs	r2, #1
 800540a:	491c      	ldr	r1, [pc, #112]	; (800547c <getTempPt1000+0xd8>)
 800540c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8005410:	1a9b      	subs	r3, r3, r2
 8005412:	4618      	mov	r0, r3
 8005414:	f7fb f896 	bl	8000544 <__aeabi_i2d>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4620      	mov	r0, r4
 800541e:	4629      	mov	r1, r5
 8005420:	f7fb f8fa 	bl	8000618 <__aeabi_dmul>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4614      	mov	r4, r2
 800542a:	461d      	mov	r5, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3b01      	subs	r3, #1
 8005430:	4618      	mov	r0, r3
 8005432:	f7fb f887 	bl	8000544 <__aeabi_i2d>
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	4b12      	ldr	r3, [pc, #72]	; (8005484 <getTempPt1000+0xe0>)
 800543c:	f7fb f8ec 	bl	8000618 <__aeabi_dmul>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4620      	mov	r0, r4
 8005446:	4629      	mov	r1, r5
 8005448:	f7fa ff30 	bl	80002ac <__adddf3>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4610      	mov	r0, r2
 8005452:	4619      	mov	r1, r3
 8005454:	f7fb fbd8 	bl	8000c08 <__aeabi_d2f>
 8005458:	4603      	mov	r3, r0
 800545a:	60bb      	str	r3, [r7, #8]
				return temp;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	e006      	b.n	800546e <getTempPt1000+0xca>
		for(int i = 1; i < 51; i++) {
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3301      	adds	r3, #1
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b32      	cmp	r3, #50	; 0x32
 800546a:	ddab      	ble.n	80053c4 <getTempPt1000+0x20>
			}
		}
		return 999.9;
 800546c:	4b04      	ldr	r3, [pc, #16]	; (8005480 <getTempPt1000+0xdc>)
	}
}
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eeb0 0a67 	vmov.f32	s0, s15
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bdb0      	pop	{r4, r5, r7, pc}
 800547c:	20000f00 	.word	0x20000f00
 8005480:	4479f99a 	.word	0x4479f99a
 8005484:	40140000 	.word	0x40140000

08005488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80054c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800548c:	480d      	ldr	r0, [pc, #52]	; (80054c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800548e:	490e      	ldr	r1, [pc, #56]	; (80054c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005490:	4a0e      	ldr	r2, [pc, #56]	; (80054cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005494:	e002      	b.n	800549c <LoopCopyDataInit>

08005496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800549a:	3304      	adds	r3, #4

0800549c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800549c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800549e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054a0:	d3f9      	bcc.n	8005496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054a2:	4a0b      	ldr	r2, [pc, #44]	; (80054d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80054a4:	4c0b      	ldr	r4, [pc, #44]	; (80054d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80054a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054a8:	e001      	b.n	80054ae <LoopFillZerobss>

080054aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054ac:	3204      	adds	r2, #4

080054ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054b0:	d3fb      	bcc.n	80054aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80054b2:	f7ff fee3 	bl	800527c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054b6:	f004 fcb5 	bl	8009e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054ba:	f7fe fa07 	bl	80038cc <main>
  bx  lr    
 80054be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80054c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80054c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054c8:	20001144 	.word	0x20001144
  ldr r2, =_sidata
 80054cc:	0800f890 	.word	0x0800f890
  ldr r2, =_sbss
 80054d0:	20001144 	.word	0x20001144
  ldr r4, =_ebss
 80054d4:	20001c90 	.word	0x20001c90

080054d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054d8:	e7fe      	b.n	80054d8 <ADC_IRQHandler>
	...

080054dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054e0:	4b0e      	ldr	r3, [pc, #56]	; (800551c <HAL_Init+0x40>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a0d      	ldr	r2, [pc, #52]	; (800551c <HAL_Init+0x40>)
 80054e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80054ec:	4b0b      	ldr	r3, [pc, #44]	; (800551c <HAL_Init+0x40>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a0a      	ldr	r2, [pc, #40]	; (800551c <HAL_Init+0x40>)
 80054f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054f8:	4b08      	ldr	r3, [pc, #32]	; (800551c <HAL_Init+0x40>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a07      	ldr	r2, [pc, #28]	; (800551c <HAL_Init+0x40>)
 80054fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005502:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005504:	2003      	movs	r0, #3
 8005506:	f000 fd3d 	bl	8005f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800550a:	200f      	movs	r0, #15
 800550c:	f000 f808 	bl	8005520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005510:	f7ff faae 	bl	8004a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40023c00 	.word	0x40023c00

08005520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005528:	4b12      	ldr	r3, [pc, #72]	; (8005574 <HAL_InitTick+0x54>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4b12      	ldr	r3, [pc, #72]	; (8005578 <HAL_InitTick+0x58>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	4619      	mov	r1, r3
 8005532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005536:	fbb3 f3f1 	udiv	r3, r3, r1
 800553a:	fbb2 f3f3 	udiv	r3, r2, r3
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fd55 	bl	8005fee <HAL_SYSTICK_Config>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e00e      	b.n	800556c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b0f      	cmp	r3, #15
 8005552:	d80a      	bhi.n	800556a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005554:	2200      	movs	r2, #0
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	f04f 30ff 	mov.w	r0, #4294967295
 800555c:	f000 fd1d 	bl	8005f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005560:	4a06      	ldr	r2, [pc, #24]	; (800557c <HAL_InitTick+0x5c>)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	e000      	b.n	800556c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	20000ea8 	.word	0x20000ea8
 8005578:	20000f6c 	.word	0x20000f6c
 800557c:	20000f68 	.word	0x20000f68

08005580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005584:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <HAL_IncTick+0x20>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <HAL_IncTick+0x24>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4413      	add	r3, r2
 8005590:	4a04      	ldr	r2, [pc, #16]	; (80055a4 <HAL_IncTick+0x24>)
 8005592:	6013      	str	r3, [r2, #0]
}
 8005594:	bf00      	nop
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	20000f6c 	.word	0x20000f6c
 80055a4:	20001c5c 	.word	0x20001c5c

080055a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  return uwTick;
 80055ac:	4b03      	ldr	r3, [pc, #12]	; (80055bc <HAL_GetTick+0x14>)
 80055ae:	681b      	ldr	r3, [r3, #0]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20001c5c 	.word	0x20001c5c

080055c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e033      	b.n	800563e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d109      	bne.n	80055f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff fa6e 	bl	8004ac0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f003 0310 	and.w	r3, r3, #16
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d118      	bne.n	8005630 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005606:	f023 0302 	bic.w	r3, r3, #2
 800560a:	f043 0202 	orr.w	r2, r3, #2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fa68 	bl	8005ae8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	f023 0303 	bic.w	r3, r3, #3
 8005626:	f043 0201 	orr.w	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	641a      	str	r2, [r3, #64]	; 0x40
 800562e:	e001      	b.n	8005634 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800563c:	7bfb      	ldrb	r3, [r7, #15]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_ADC_Start_DMA+0x1e>
 8005662:	2302      	movs	r3, #2
 8005664:	e0e9      	b.n	800583a <HAL_ADC_Start_DMA+0x1f2>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b01      	cmp	r3, #1
 800567a:	d018      	beq.n	80056ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800568c:	4b6d      	ldr	r3, [pc, #436]	; (8005844 <HAL_ADC_Start_DMA+0x1fc>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a6d      	ldr	r2, [pc, #436]	; (8005848 <HAL_ADC_Start_DMA+0x200>)
 8005692:	fba2 2303 	umull	r2, r3, r2, r3
 8005696:	0c9a      	lsrs	r2, r3, #18
 8005698:	4613      	mov	r3, r2
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	4413      	add	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80056a0:	e002      	b.n	80056a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f9      	bne.n	80056a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056bc:	d107      	bne.n	80056ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b01      	cmp	r3, #1
 80056da:	f040 80a1 	bne.w	8005820 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d007      	beq.n	8005710 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005708:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571c:	d106      	bne.n	800572c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	f023 0206 	bic.w	r2, r3, #6
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	645a      	str	r2, [r3, #68]	; 0x44
 800572a:	e002      	b.n	8005732 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800573a:	4b44      	ldr	r3, [pc, #272]	; (800584c <HAL_ADC_Start_DMA+0x204>)
 800573c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	4a43      	ldr	r2, [pc, #268]	; (8005850 <HAL_ADC_Start_DMA+0x208>)
 8005744:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574a:	4a42      	ldr	r2, [pc, #264]	; (8005854 <HAL_ADC_Start_DMA+0x20c>)
 800574c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	4a41      	ldr	r2, [pc, #260]	; (8005858 <HAL_ADC_Start_DMA+0x210>)
 8005754:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800575e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800576e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800577e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	334c      	adds	r3, #76	; 0x4c
 800578a:	4619      	mov	r1, r3
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f000 fce8 	bl	8006164 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	2b00      	cmp	r3, #0
 800579e:	d12a      	bne.n	80057f6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a2d      	ldr	r2, [pc, #180]	; (800585c <HAL_ADC_Start_DMA+0x214>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d015      	beq.n	80057d6 <HAL_ADC_Start_DMA+0x18e>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a2c      	ldr	r2, [pc, #176]	; (8005860 <HAL_ADC_Start_DMA+0x218>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d105      	bne.n	80057c0 <HAL_ADC_Start_DMA+0x178>
 80057b4:	4b25      	ldr	r3, [pc, #148]	; (800584c <HAL_ADC_Start_DMA+0x204>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f003 031f 	and.w	r3, r3, #31
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a27      	ldr	r2, [pc, #156]	; (8005864 <HAL_ADC_Start_DMA+0x21c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d136      	bne.n	8005838 <HAL_ADC_Start_DMA+0x1f0>
 80057ca:	4b20      	ldr	r3, [pc, #128]	; (800584c <HAL_ADC_Start_DMA+0x204>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f003 0310 	and.w	r3, r3, #16
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d130      	bne.n	8005838 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d129      	bne.n	8005838 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80057f2:	609a      	str	r2, [r3, #8]
 80057f4:	e020      	b.n	8005838 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a18      	ldr	r2, [pc, #96]	; (800585c <HAL_ADC_Start_DMA+0x214>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d11b      	bne.n	8005838 <HAL_ADC_Start_DMA+0x1f0>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d114      	bne.n	8005838 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800581c:	609a      	str	r2, [r3, #8]
 800581e:	e00b      	b.n	8005838 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	f043 0210 	orr.w	r2, r3, #16
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005830:	f043 0201 	orr.w	r2, r3, #1
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	20000ea8 	.word	0x20000ea8
 8005848:	431bde83 	.word	0x431bde83
 800584c:	40012300 	.word	0x40012300
 8005850:	08005ce1 	.word	0x08005ce1
 8005854:	08005d9b 	.word	0x08005d9b
 8005858:	08005db7 	.word	0x08005db7
 800585c:	40012000 	.word	0x40012000
 8005860:	40012100 	.word	0x40012100
 8005864:	40012200 	.word	0x40012200

08005868 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_ADC_ConfigChannel+0x1c>
 80058bc:	2302      	movs	r3, #2
 80058be:	e105      	b.n	8005acc <HAL_ADC_ConfigChannel+0x228>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b09      	cmp	r3, #9
 80058ce:	d925      	bls.n	800591c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68d9      	ldr	r1, [r3, #12]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	461a      	mov	r2, r3
 80058de:	4613      	mov	r3, r2
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	4413      	add	r3, r2
 80058e4:	3b1e      	subs	r3, #30
 80058e6:	2207      	movs	r2, #7
 80058e8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ec:	43da      	mvns	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	400a      	ands	r2, r1
 80058f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68d9      	ldr	r1, [r3, #12]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	b29b      	uxth	r3, r3
 8005906:	4618      	mov	r0, r3
 8005908:	4603      	mov	r3, r0
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	4403      	add	r3, r0
 800590e:	3b1e      	subs	r3, #30
 8005910:	409a      	lsls	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	60da      	str	r2, [r3, #12]
 800591a:	e022      	b.n	8005962 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6919      	ldr	r1, [r3, #16]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	4613      	mov	r3, r2
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	4413      	add	r3, r2
 8005930:	2207      	movs	r2, #7
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	43da      	mvns	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	400a      	ands	r2, r1
 800593e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6919      	ldr	r1, [r3, #16]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	4618      	mov	r0, r3
 8005952:	4603      	mov	r3, r0
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	4403      	add	r3, r0
 8005958:	409a      	lsls	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2b06      	cmp	r3, #6
 8005968:	d824      	bhi.n	80059b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	3b05      	subs	r3, #5
 800597c:	221f      	movs	r2, #31
 800597e:	fa02 f303 	lsl.w	r3, r2, r3
 8005982:	43da      	mvns	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	400a      	ands	r2, r1
 800598a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	b29b      	uxth	r3, r3
 8005998:	4618      	mov	r0, r3
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	4613      	mov	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	3b05      	subs	r3, #5
 80059a6:	fa00 f203 	lsl.w	r2, r0, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	635a      	str	r2, [r3, #52]	; 0x34
 80059b2:	e04c      	b.n	8005a4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b0c      	cmp	r3, #12
 80059ba:	d824      	bhi.n	8005a06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	3b23      	subs	r3, #35	; 0x23
 80059ce:	221f      	movs	r2, #31
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	43da      	mvns	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	400a      	ands	r2, r1
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	4618      	mov	r0, r3
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	3b23      	subs	r3, #35	; 0x23
 80059f8:	fa00 f203 	lsl.w	r2, r0, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	631a      	str	r2, [r3, #48]	; 0x30
 8005a04:	e023      	b.n	8005a4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	3b41      	subs	r3, #65	; 0x41
 8005a18:	221f      	movs	r2, #31
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	43da      	mvns	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	400a      	ands	r2, r1
 8005a26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	4618      	mov	r0, r3
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	3b41      	subs	r3, #65	; 0x41
 8005a42:	fa00 f203 	lsl.w	r2, r0, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a4e:	4b22      	ldr	r3, [pc, #136]	; (8005ad8 <HAL_ADC_ConfigChannel+0x234>)
 8005a50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a21      	ldr	r2, [pc, #132]	; (8005adc <HAL_ADC_ConfigChannel+0x238>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d109      	bne.n	8005a70 <HAL_ADC_ConfigChannel+0x1cc>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b12      	cmp	r3, #18
 8005a62:	d105      	bne.n	8005a70 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a19      	ldr	r2, [pc, #100]	; (8005adc <HAL_ADC_ConfigChannel+0x238>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d123      	bne.n	8005ac2 <HAL_ADC_ConfigChannel+0x21e>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b10      	cmp	r3, #16
 8005a80:	d003      	beq.n	8005a8a <HAL_ADC_ConfigChannel+0x1e6>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b11      	cmp	r3, #17
 8005a88:	d11b      	bne.n	8005ac2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b10      	cmp	r3, #16
 8005a9c:	d111      	bne.n	8005ac2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005a9e:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <HAL_ADC_ConfigChannel+0x23c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a10      	ldr	r2, [pc, #64]	; (8005ae4 <HAL_ADC_ConfigChannel+0x240>)
 8005aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa8:	0c9a      	lsrs	r2, r3, #18
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005ab4:	e002      	b.n	8005abc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1f9      	bne.n	8005ab6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	40012300 	.word	0x40012300
 8005adc:	40012000 	.word	0x40012000
 8005ae0:	20000ea8 	.word	0x20000ea8
 8005ae4:	431bde83 	.word	0x431bde83

08005ae8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005af0:	4b79      	ldr	r3, [pc, #484]	; (8005cd8 <ADC_Init+0x1f0>)
 8005af2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6859      	ldr	r1, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	021a      	lsls	r2, r3, #8
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005b40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6859      	ldr	r1, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6899      	ldr	r1, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7a:	4a58      	ldr	r2, [pc, #352]	; (8005cdc <ADC_Init+0x1f4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d022      	beq.n	8005bc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6899      	ldr	r1, [r3, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005bb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6899      	ldr	r1, [r3, #8]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	609a      	str	r2, [r3, #8]
 8005bc4:	e00f      	b.n	8005be6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005be4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0202 	bic.w	r2, r2, #2
 8005bf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6899      	ldr	r1, [r3, #8]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	7e1b      	ldrb	r3, [r3, #24]
 8005c00:	005a      	lsls	r2, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d01b      	beq.n	8005c4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005c32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6859      	ldr	r1, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	035a      	lsls	r2, r3, #13
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	605a      	str	r2, [r3, #4]
 8005c4a:	e007      	b.n	8005c5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	051a      	lsls	r2, r3, #20
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6899      	ldr	r1, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c9e:	025a      	lsls	r2, r3, #9
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6899      	ldr	r1, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	029a      	lsls	r2, r3, #10
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	609a      	str	r2, [r3, #8]
}
 8005ccc:	bf00      	nop
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	40012300 	.word	0x40012300
 8005cdc:	0f000001 	.word	0x0f000001

08005ce0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d13c      	bne.n	8005d74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d12b      	bne.n	8005d6c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d127      	bne.n	8005d6c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d006      	beq.n	8005d38 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d119      	bne.n	8005d6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0220 	bic.w	r2, r2, #32
 8005d46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d105      	bne.n	8005d6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	f043 0201 	orr.w	r2, r3, #1
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f7ff fd7b 	bl	8005868 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005d72:	e00e      	b.n	8005d92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f7ff fd85 	bl	8005890 <HAL_ADC_ErrorCallback>
}
 8005d86:	e004      	b.n	8005d92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4798      	blx	r3
}
 8005d92:	bf00      	nop
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f7ff fd67 	bl	800587c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005dae:	bf00      	nop
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2240      	movs	r2, #64	; 0x40
 8005dc8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dce:	f043 0204 	orr.w	r2, r3, #4
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f7ff fd5a 	bl	8005890 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ddc:	bf00      	nop
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005df4:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <__NVIC_SetPriorityGrouping+0x44>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e00:	4013      	ands	r3, r2
 8005e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e16:	4a04      	ldr	r2, [pc, #16]	; (8005e28 <__NVIC_SetPriorityGrouping+0x44>)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	60d3      	str	r3, [r2, #12]
}
 8005e1c:	bf00      	nop
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	e000ed00 	.word	0xe000ed00

08005e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e30:	4b04      	ldr	r3, [pc, #16]	; (8005e44 <__NVIC_GetPriorityGrouping+0x18>)
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	0a1b      	lsrs	r3, r3, #8
 8005e36:	f003 0307 	and.w	r3, r3, #7
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	e000ed00 	.word	0xe000ed00

08005e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	4603      	mov	r3, r0
 8005e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	db0b      	blt.n	8005e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e5a:	79fb      	ldrb	r3, [r7, #7]
 8005e5c:	f003 021f 	and.w	r2, r3, #31
 8005e60:	4907      	ldr	r1, [pc, #28]	; (8005e80 <__NVIC_EnableIRQ+0x38>)
 8005e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	2001      	movs	r0, #1
 8005e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8005e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	e000e100 	.word	0xe000e100

08005e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	6039      	str	r1, [r7, #0]
 8005e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	db0a      	blt.n	8005eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	490c      	ldr	r1, [pc, #48]	; (8005ed0 <__NVIC_SetPriority+0x4c>)
 8005e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea2:	0112      	lsls	r2, r2, #4
 8005ea4:	b2d2      	uxtb	r2, r2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005eac:	e00a      	b.n	8005ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	4908      	ldr	r1, [pc, #32]	; (8005ed4 <__NVIC_SetPriority+0x50>)
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	3b04      	subs	r3, #4
 8005ebc:	0112      	lsls	r2, r2, #4
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	440b      	add	r3, r1
 8005ec2:	761a      	strb	r2, [r3, #24]
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	e000e100 	.word	0xe000e100
 8005ed4:	e000ed00 	.word	0xe000ed00

08005ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b089      	sub	sp, #36	; 0x24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	f1c3 0307 	rsb	r3, r3, #7
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	bf28      	it	cs
 8005ef6:	2304      	movcs	r3, #4
 8005ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	3304      	adds	r3, #4
 8005efe:	2b06      	cmp	r3, #6
 8005f00:	d902      	bls.n	8005f08 <NVIC_EncodePriority+0x30>
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	3b03      	subs	r3, #3
 8005f06:	e000      	b.n	8005f0a <NVIC_EncodePriority+0x32>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	fa02 f303 	lsl.w	r3, r2, r3
 8005f16:	43da      	mvns	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	401a      	ands	r2, r3
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f20:	f04f 31ff 	mov.w	r1, #4294967295
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2a:	43d9      	mvns	r1, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f30:	4313      	orrs	r3, r2
         );
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3724      	adds	r7, #36	; 0x24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
	...

08005f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f50:	d301      	bcc.n	8005f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f52:	2301      	movs	r3, #1
 8005f54:	e00f      	b.n	8005f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f56:	4a0a      	ldr	r2, [pc, #40]	; (8005f80 <SysTick_Config+0x40>)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f5e:	210f      	movs	r1, #15
 8005f60:	f04f 30ff 	mov.w	r0, #4294967295
 8005f64:	f7ff ff8e 	bl	8005e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f68:	4b05      	ldr	r3, [pc, #20]	; (8005f80 <SysTick_Config+0x40>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f6e:	4b04      	ldr	r3, [pc, #16]	; (8005f80 <SysTick_Config+0x40>)
 8005f70:	2207      	movs	r2, #7
 8005f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	e000e010 	.word	0xe000e010

08005f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7ff ff29 	bl	8005de4 <__NVIC_SetPriorityGrouping>
}
 8005f92:	bf00      	nop
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b086      	sub	sp, #24
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	607a      	str	r2, [r7, #4]
 8005fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005fac:	f7ff ff3e 	bl	8005e2c <__NVIC_GetPriorityGrouping>
 8005fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	6978      	ldr	r0, [r7, #20]
 8005fb8:	f7ff ff8e 	bl	8005ed8 <NVIC_EncodePriority>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff ff5d 	bl	8005e84 <__NVIC_SetPriority>
}
 8005fca:	bf00      	nop
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b082      	sub	sp, #8
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	4603      	mov	r3, r0
 8005fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff ff31 	bl	8005e48 <__NVIC_EnableIRQ>
}
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff ffa2 	bl	8005f40 <SysTick_Config>
 8005ffc:	4603      	mov	r3, r0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006014:	f7ff fac8 	bl	80055a8 <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e099      	b.n	8006158 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0201 	bic.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006044:	e00f      	b.n	8006066 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006046:	f7ff faaf 	bl	80055a8 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b05      	cmp	r3, #5
 8006052:	d908      	bls.n	8006066 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2203      	movs	r2, #3
 800605e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e078      	b.n	8006158 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e8      	bne.n	8006046 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4b38      	ldr	r3, [pc, #224]	; (8006160 <HAL_DMA_Init+0x158>)
 8006080:	4013      	ands	r3, r2
 8006082:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006092:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800609e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	2b04      	cmp	r3, #4
 80060be:	d107      	bne.n	80060d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	4313      	orrs	r3, r2
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f023 0307 	bic.w	r3, r3, #7
 80060e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d117      	bne.n	800612a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00e      	beq.n	800612a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fb01 	bl	8006714 <DMA_CheckFifoParam>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d008      	beq.n	800612a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2240      	movs	r2, #64	; 0x40
 800611c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006126:	2301      	movs	r3, #1
 8006128:	e016      	b.n	8006158 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fab8 	bl	80066a8 <DMA_CalcBaseAndBitshift>
 8006138:	4603      	mov	r3, r0
 800613a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006140:	223f      	movs	r2, #63	; 0x3f
 8006142:	409a      	lsls	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	f010803f 	.word	0xf010803f

08006164 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_DMA_Start_IT+0x26>
 8006186:	2302      	movs	r3, #2
 8006188:	e040      	b.n	800620c <HAL_DMA_Start_IT+0xa8>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b01      	cmp	r3, #1
 800619c:	d12f      	bne.n	80061fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2202      	movs	r2, #2
 80061a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	68b9      	ldr	r1, [r7, #8]
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fa4a 	bl	800664c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061bc:	223f      	movs	r2, #63	; 0x3f
 80061be:	409a      	lsls	r2, r3
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0216 	orr.w	r2, r2, #22
 80061d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d007      	beq.n	80061ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0208 	orr.w	r2, r2, #8
 80061ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0201 	orr.w	r2, r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	e005      	b.n	800620a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006206:	2302      	movs	r3, #2
 8006208:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800620a:	7dfb      	ldrb	r3, [r7, #23]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006220:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006222:	f7ff f9c1 	bl	80055a8 <HAL_GetTick>
 8006226:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d008      	beq.n	8006246 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2280      	movs	r2, #128	; 0x80
 8006238:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e052      	b.n	80062ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0216 	bic.w	r2, r2, #22
 8006254:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695a      	ldr	r2, [r3, #20]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006264:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d103      	bne.n	8006276 <HAL_DMA_Abort+0x62>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006272:	2b00      	cmp	r3, #0
 8006274:	d007      	beq.n	8006286 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0208 	bic.w	r2, r2, #8
 8006284:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0201 	bic.w	r2, r2, #1
 8006294:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006296:	e013      	b.n	80062c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006298:	f7ff f986 	bl	80055a8 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b05      	cmp	r3, #5
 80062a4:	d90c      	bls.n	80062c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2203      	movs	r2, #3
 80062b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e015      	b.n	80062ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e4      	bne.n	8006298 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d2:	223f      	movs	r2, #63	; 0x3f
 80062d4:	409a      	lsls	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d004      	beq.n	8006312 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2280      	movs	r2, #128	; 0x80
 800630c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e00c      	b.n	800632c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2205      	movs	r2, #5
 8006316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0201 	bic.w	r2, r2, #1
 8006328:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006344:	4b8e      	ldr	r3, [pc, #568]	; (8006580 <HAL_DMA_IRQHandler+0x248>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a8e      	ldr	r2, [pc, #568]	; (8006584 <HAL_DMA_IRQHandler+0x24c>)
 800634a:	fba2 2303 	umull	r2, r3, r2, r3
 800634e:	0a9b      	lsrs	r3, r3, #10
 8006350:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006356:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006362:	2208      	movs	r2, #8
 8006364:	409a      	lsls	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4013      	ands	r3, r2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d01a      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d013      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0204 	bic.w	r2, r2, #4
 800638a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006390:	2208      	movs	r2, #8
 8006392:	409a      	lsls	r2, r3
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639c:	f043 0201 	orr.w	r2, r3, #1
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a8:	2201      	movs	r2, #1
 80063aa:	409a      	lsls	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4013      	ands	r3, r2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d012      	beq.n	80063da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00b      	beq.n	80063da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c6:	2201      	movs	r2, #1
 80063c8:	409a      	lsls	r2, r3
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d2:	f043 0202 	orr.w	r2, r3, #2
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063de:	2204      	movs	r2, #4
 80063e0:	409a      	lsls	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4013      	ands	r3, r2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d012      	beq.n	8006410 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00b      	beq.n	8006410 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fc:	2204      	movs	r2, #4
 80063fe:	409a      	lsls	r2, r3
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006408:	f043 0204 	orr.w	r2, r3, #4
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006414:	2210      	movs	r2, #16
 8006416:	409a      	lsls	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4013      	ands	r3, r2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d043      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b00      	cmp	r3, #0
 800642c:	d03c      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006432:	2210      	movs	r2, #16
 8006434:	409a      	lsls	r2, r3
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d018      	beq.n	800647a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d108      	bne.n	8006468 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	2b00      	cmp	r3, #0
 800645c:	d024      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	4798      	blx	r3
 8006466:	e01f      	b.n	80064a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800646c:	2b00      	cmp	r3, #0
 800646e:	d01b      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	4798      	blx	r3
 8006478:	e016      	b.n	80064a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006484:	2b00      	cmp	r3, #0
 8006486:	d107      	bne.n	8006498 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0208 	bic.w	r2, r2, #8
 8006496:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d003      	beq.n	80064a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ac:	2220      	movs	r2, #32
 80064ae:	409a      	lsls	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4013      	ands	r3, r2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 808f 	beq.w	80065d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0310 	and.w	r3, r3, #16
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 8087 	beq.w	80065d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ce:	2220      	movs	r2, #32
 80064d0:	409a      	lsls	r2, r3
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b05      	cmp	r3, #5
 80064e0:	d136      	bne.n	8006550 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0216 	bic.w	r2, r2, #22
 80064f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	695a      	ldr	r2, [r3, #20]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006500:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	2b00      	cmp	r3, #0
 8006508:	d103      	bne.n	8006512 <HAL_DMA_IRQHandler+0x1da>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800650e:	2b00      	cmp	r3, #0
 8006510:	d007      	beq.n	8006522 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0208 	bic.w	r2, r2, #8
 8006520:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006526:	223f      	movs	r2, #63	; 0x3f
 8006528:	409a      	lsls	r2, r3
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006542:	2b00      	cmp	r3, #0
 8006544:	d07e      	beq.n	8006644 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	4798      	blx	r3
        }
        return;
 800654e:	e079      	b.n	8006644 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d01d      	beq.n	800659a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10d      	bne.n	8006588 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006570:	2b00      	cmp	r3, #0
 8006572:	d031      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	4798      	blx	r3
 800657c:	e02c      	b.n	80065d8 <HAL_DMA_IRQHandler+0x2a0>
 800657e:	bf00      	nop
 8006580:	20000ea8 	.word	0x20000ea8
 8006584:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658c:	2b00      	cmp	r3, #0
 800658e:	d023      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	4798      	blx	r3
 8006598:	e01e      	b.n	80065d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10f      	bne.n	80065c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0210 	bic.w	r2, r2, #16
 80065b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d032      	beq.n	8006646 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d022      	beq.n	8006632 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2205      	movs	r2, #5
 80065f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0201 	bic.w	r2, r2, #1
 8006602:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	3301      	adds	r3, #1
 8006608:	60bb      	str	r3, [r7, #8]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	429a      	cmp	r2, r3
 800660e:	d307      	bcc.n	8006620 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f2      	bne.n	8006604 <HAL_DMA_IRQHandler+0x2cc>
 800661e:	e000      	b.n	8006622 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006620:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006636:	2b00      	cmp	r3, #0
 8006638:	d005      	beq.n	8006646 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	4798      	blx	r3
 8006642:	e000      	b.n	8006646 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006644:	bf00      	nop
    }
  }
}
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006668:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	d108      	bne.n	800668c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800668a:	e007      	b.n	800669c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	60da      	str	r2, [r3, #12]
}
 800669c:	bf00      	nop
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	3b10      	subs	r3, #16
 80066b8:	4a14      	ldr	r2, [pc, #80]	; (800670c <DMA_CalcBaseAndBitshift+0x64>)
 80066ba:	fba2 2303 	umull	r2, r3, r2, r3
 80066be:	091b      	lsrs	r3, r3, #4
 80066c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80066c2:	4a13      	ldr	r2, [pc, #76]	; (8006710 <DMA_CalcBaseAndBitshift+0x68>)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d909      	bls.n	80066ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80066de:	f023 0303 	bic.w	r3, r3, #3
 80066e2:	1d1a      	adds	r2, r3, #4
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	659a      	str	r2, [r3, #88]	; 0x58
 80066e8:	e007      	b.n	80066fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80066f2:	f023 0303 	bic.w	r3, r3, #3
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	aaaaaaab 	.word	0xaaaaaaab
 8006710:	0800f360 	.word	0x0800f360

08006714 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006724:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d11f      	bne.n	800676e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b03      	cmp	r3, #3
 8006732:	d856      	bhi.n	80067e2 <DMA_CheckFifoParam+0xce>
 8006734:	a201      	add	r2, pc, #4	; (adr r2, 800673c <DMA_CheckFifoParam+0x28>)
 8006736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673a:	bf00      	nop
 800673c:	0800674d 	.word	0x0800674d
 8006740:	0800675f 	.word	0x0800675f
 8006744:	0800674d 	.word	0x0800674d
 8006748:	080067e3 	.word	0x080067e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d046      	beq.n	80067e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800675c:	e043      	b.n	80067e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006766:	d140      	bne.n	80067ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800676c:	e03d      	b.n	80067ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006776:	d121      	bne.n	80067bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2b03      	cmp	r3, #3
 800677c:	d837      	bhi.n	80067ee <DMA_CheckFifoParam+0xda>
 800677e:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <DMA_CheckFifoParam+0x70>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	08006795 	.word	0x08006795
 8006788:	0800679b 	.word	0x0800679b
 800678c:	08006795 	.word	0x08006795
 8006790:	080067ad 	.word	0x080067ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	73fb      	strb	r3, [r7, #15]
      break;
 8006798:	e030      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d025      	beq.n	80067f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067aa:	e022      	b.n	80067f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067b4:	d11f      	bne.n	80067f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80067ba:	e01c      	b.n	80067f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d903      	bls.n	80067ca <DMA_CheckFifoParam+0xb6>
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d003      	beq.n	80067d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80067c8:	e018      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	73fb      	strb	r3, [r7, #15]
      break;
 80067ce:	e015      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00e      	beq.n	80067fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	73fb      	strb	r3, [r7, #15]
      break;
 80067e0:	e00b      	b.n	80067fa <DMA_CheckFifoParam+0xe6>
      break;
 80067e2:	bf00      	nop
 80067e4:	e00a      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
      break;
 80067e6:	bf00      	nop
 80067e8:	e008      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
      break;
 80067ea:	bf00      	nop
 80067ec:	e006      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
      break;
 80067ee:	bf00      	nop
 80067f0:	e004      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
      break;
 80067f2:	bf00      	nop
 80067f4:	e002      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
      break;   
 80067f6:	bf00      	nop
 80067f8:	e000      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
      break;
 80067fa:	bf00      	nop
    }
  } 
  
  return status; 
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop

0800680c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800681e:	4b23      	ldr	r3, [pc, #140]	; (80068ac <HAL_FLASH_Program+0xa0>)
 8006820:	7e1b      	ldrb	r3, [r3, #24]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d101      	bne.n	800682a <HAL_FLASH_Program+0x1e>
 8006826:	2302      	movs	r3, #2
 8006828:	e03b      	b.n	80068a2 <HAL_FLASH_Program+0x96>
 800682a:	4b20      	ldr	r3, [pc, #128]	; (80068ac <HAL_FLASH_Program+0xa0>)
 800682c:	2201      	movs	r2, #1
 800682e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006830:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006834:	f000 f860 	bl	80068f8 <FLASH_WaitForLastOperation>
 8006838:	4603      	mov	r3, r0
 800683a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800683c:	7dfb      	ldrb	r3, [r7, #23]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d12b      	bne.n	800689a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d105      	bne.n	8006854 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006848:	783b      	ldrb	r3, [r7, #0]
 800684a:	4619      	mov	r1, r3
 800684c:	68b8      	ldr	r0, [r7, #8]
 800684e:	f000 f90b 	bl	8006a68 <FLASH_Program_Byte>
 8006852:	e016      	b.n	8006882 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d105      	bne.n	8006866 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800685a:	883b      	ldrh	r3, [r7, #0]
 800685c:	4619      	mov	r1, r3
 800685e:	68b8      	ldr	r0, [r7, #8]
 8006860:	f000 f8de 	bl	8006a20 <FLASH_Program_HalfWord>
 8006864:	e00d      	b.n	8006882 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b02      	cmp	r3, #2
 800686a:	d105      	bne.n	8006878 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	4619      	mov	r1, r3
 8006870:	68b8      	ldr	r0, [r7, #8]
 8006872:	f000 f8b3 	bl	80069dc <FLASH_Program_Word>
 8006876:	e004      	b.n	8006882 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800687c:	68b8      	ldr	r0, [r7, #8]
 800687e:	f000 f87b 	bl	8006978 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006882:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006886:	f000 f837 	bl	80068f8 <FLASH_WaitForLastOperation>
 800688a:	4603      	mov	r3, r0
 800688c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800688e:	4b08      	ldr	r3, [pc, #32]	; (80068b0 <HAL_FLASH_Program+0xa4>)
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	4a07      	ldr	r2, [pc, #28]	; (80068b0 <HAL_FLASH_Program+0xa4>)
 8006894:	f023 0301 	bic.w	r3, r3, #1
 8006898:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800689a:	4b04      	ldr	r3, [pc, #16]	; (80068ac <HAL_FLASH_Program+0xa0>)
 800689c:	2200      	movs	r2, #0
 800689e:	761a      	strb	r2, [r3, #24]
  
  return status;
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20001c60 	.word	0x20001c60
 80068b0:	40023c00 	.word	0x40023c00

080068b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80068be:	4b0b      	ldr	r3, [pc, #44]	; (80068ec <HAL_FLASH_Unlock+0x38>)
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	da0b      	bge.n	80068de <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80068c6:	4b09      	ldr	r3, [pc, #36]	; (80068ec <HAL_FLASH_Unlock+0x38>)
 80068c8:	4a09      	ldr	r2, [pc, #36]	; (80068f0 <HAL_FLASH_Unlock+0x3c>)
 80068ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80068cc:	4b07      	ldr	r3, [pc, #28]	; (80068ec <HAL_FLASH_Unlock+0x38>)
 80068ce:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <HAL_FLASH_Unlock+0x40>)
 80068d0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80068d2:	4b06      	ldr	r3, [pc, #24]	; (80068ec <HAL_FLASH_Unlock+0x38>)
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	da01      	bge.n	80068de <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80068de:	79fb      	ldrb	r3, [r7, #7]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	40023c00 	.word	0x40023c00
 80068f0:	45670123 	.word	0x45670123
 80068f4:	cdef89ab 	.word	0xcdef89ab

080068f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006904:	4b1a      	ldr	r3, [pc, #104]	; (8006970 <FLASH_WaitForLastOperation+0x78>)
 8006906:	2200      	movs	r2, #0
 8006908:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800690a:	f7fe fe4d 	bl	80055a8 <HAL_GetTick>
 800690e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006910:	e010      	b.n	8006934 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d00c      	beq.n	8006934 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <FLASH_WaitForLastOperation+0x38>
 8006920:	f7fe fe42 	bl	80055a8 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	429a      	cmp	r2, r3
 800692e:	d201      	bcs.n	8006934 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e019      	b.n	8006968 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006934:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <FLASH_WaitForLastOperation+0x7c>)
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1e8      	bne.n	8006912 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006940:	4b0c      	ldr	r3, [pc, #48]	; (8006974 <FLASH_WaitForLastOperation+0x7c>)
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800694c:	4b09      	ldr	r3, [pc, #36]	; (8006974 <FLASH_WaitForLastOperation+0x7c>)
 800694e:	2201      	movs	r2, #1
 8006950:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006952:	4b08      	ldr	r3, [pc, #32]	; (8006974 <FLASH_WaitForLastOperation+0x7c>)
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800695e:	f000 f8a5 	bl	8006aac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e000      	b.n	8006968 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006966:	2300      	movs	r3, #0
  
}  
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	20001c60 	.word	0x20001c60
 8006974:	40023c00 	.word	0x40023c00

08006978 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006984:	4b14      	ldr	r3, [pc, #80]	; (80069d8 <FLASH_Program_DoubleWord+0x60>)
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	4a13      	ldr	r2, [pc, #76]	; (80069d8 <FLASH_Program_DoubleWord+0x60>)
 800698a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006990:	4b11      	ldr	r3, [pc, #68]	; (80069d8 <FLASH_Program_DoubleWord+0x60>)
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	4a10      	ldr	r2, [pc, #64]	; (80069d8 <FLASH_Program_DoubleWord+0x60>)
 8006996:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800699a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800699c:	4b0e      	ldr	r3, [pc, #56]	; (80069d8 <FLASH_Program_DoubleWord+0x60>)
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	4a0d      	ldr	r2, [pc, #52]	; (80069d8 <FLASH_Program_DoubleWord+0x60>)
 80069a2:	f043 0301 	orr.w	r3, r3, #1
 80069a6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80069ae:	f3bf 8f6f 	isb	sy
}
 80069b2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80069b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069b8:	f04f 0200 	mov.w	r2, #0
 80069bc:	f04f 0300 	mov.w	r3, #0
 80069c0:	000a      	movs	r2, r1
 80069c2:	2300      	movs	r3, #0
 80069c4:	68f9      	ldr	r1, [r7, #12]
 80069c6:	3104      	adds	r1, #4
 80069c8:	4613      	mov	r3, r2
 80069ca:	600b      	str	r3, [r1, #0]
}
 80069cc:	bf00      	nop
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	40023c00 	.word	0x40023c00

080069dc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80069e6:	4b0d      	ldr	r3, [pc, #52]	; (8006a1c <FLASH_Program_Word+0x40>)
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	4a0c      	ldr	r2, [pc, #48]	; (8006a1c <FLASH_Program_Word+0x40>)
 80069ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80069f2:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <FLASH_Program_Word+0x40>)
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <FLASH_Program_Word+0x40>)
 80069f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80069fe:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <FLASH_Program_Word+0x40>)
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	4a06      	ldr	r2, [pc, #24]	; (8006a1c <FLASH_Program_Word+0x40>)
 8006a04:	f043 0301 	orr.w	r3, r3, #1
 8006a08:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	601a      	str	r2, [r3, #0]
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	40023c00 	.word	0x40023c00

08006a20 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006a2c:	4b0d      	ldr	r3, [pc, #52]	; (8006a64 <FLASH_Program_HalfWord+0x44>)
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	4a0c      	ldr	r2, [pc, #48]	; (8006a64 <FLASH_Program_HalfWord+0x44>)
 8006a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006a38:	4b0a      	ldr	r3, [pc, #40]	; (8006a64 <FLASH_Program_HalfWord+0x44>)
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	4a09      	ldr	r2, [pc, #36]	; (8006a64 <FLASH_Program_HalfWord+0x44>)
 8006a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006a44:	4b07      	ldr	r3, [pc, #28]	; (8006a64 <FLASH_Program_HalfWord+0x44>)
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	4a06      	ldr	r2, [pc, #24]	; (8006a64 <FLASH_Program_HalfWord+0x44>)
 8006a4a:	f043 0301 	orr.w	r3, r3, #1
 8006a4e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	887a      	ldrh	r2, [r7, #2]
 8006a54:	801a      	strh	r2, [r3, #0]
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	40023c00 	.word	0x40023c00

08006a68 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006a74:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <FLASH_Program_Byte+0x40>)
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	4a0b      	ldr	r2, [pc, #44]	; (8006aa8 <FLASH_Program_Byte+0x40>)
 8006a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006a80:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <FLASH_Program_Byte+0x40>)
 8006a82:	4a09      	ldr	r2, [pc, #36]	; (8006aa8 <FLASH_Program_Byte+0x40>)
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006a88:	4b07      	ldr	r3, [pc, #28]	; (8006aa8 <FLASH_Program_Byte+0x40>)
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	4a06      	ldr	r2, [pc, #24]	; (8006aa8 <FLASH_Program_Byte+0x40>)
 8006a8e:	f043 0301 	orr.w	r3, r3, #1
 8006a92:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	78fa      	ldrb	r2, [r7, #3]
 8006a98:	701a      	strb	r2, [r3, #0]
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40023c00 	.word	0x40023c00

08006aac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006ab0:	4b27      	ldr	r3, [pc, #156]	; (8006b50 <FLASH_SetErrorCode+0xa4>)
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f003 0310 	and.w	r3, r3, #16
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d008      	beq.n	8006ace <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006abc:	4b25      	ldr	r3, [pc, #148]	; (8006b54 <FLASH_SetErrorCode+0xa8>)
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	f043 0310 	orr.w	r3, r3, #16
 8006ac4:	4a23      	ldr	r2, [pc, #140]	; (8006b54 <FLASH_SetErrorCode+0xa8>)
 8006ac6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006ac8:	4b21      	ldr	r3, [pc, #132]	; (8006b50 <FLASH_SetErrorCode+0xa4>)
 8006aca:	2210      	movs	r2, #16
 8006acc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006ace:	4b20      	ldr	r3, [pc, #128]	; (8006b50 <FLASH_SetErrorCode+0xa4>)
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d008      	beq.n	8006aec <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006ada:	4b1e      	ldr	r3, [pc, #120]	; (8006b54 <FLASH_SetErrorCode+0xa8>)
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	f043 0308 	orr.w	r3, r3, #8
 8006ae2:	4a1c      	ldr	r2, [pc, #112]	; (8006b54 <FLASH_SetErrorCode+0xa8>)
 8006ae4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006ae6:	4b1a      	ldr	r3, [pc, #104]	; (8006b50 <FLASH_SetErrorCode+0xa4>)
 8006ae8:	2220      	movs	r2, #32
 8006aea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006aec:	4b18      	ldr	r3, [pc, #96]	; (8006b50 <FLASH_SetErrorCode+0xa4>)
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d008      	beq.n	8006b0a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006af8:	4b16      	ldr	r3, [pc, #88]	; (8006b54 <FLASH_SetErrorCode+0xa8>)
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	f043 0304 	orr.w	r3, r3, #4
 8006b00:	4a14      	ldr	r2, [pc, #80]	; (8006b54 <FLASH_SetErrorCode+0xa8>)
 8006b02:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006b04:	4b12      	ldr	r3, [pc, #72]	; (8006b50 <FLASH_SetErrorCode+0xa4>)
 8006b06:	2240      	movs	r2, #64	; 0x40
 8006b08:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006b0a:	4b11      	ldr	r3, [pc, #68]	; (8006b50 <FLASH_SetErrorCode+0xa4>)
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d008      	beq.n	8006b28 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006b16:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <FLASH_SetErrorCode+0xa8>)
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	f043 0302 	orr.w	r3, r3, #2
 8006b1e:	4a0d      	ldr	r2, [pc, #52]	; (8006b54 <FLASH_SetErrorCode+0xa8>)
 8006b20:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006b22:	4b0b      	ldr	r3, [pc, #44]	; (8006b50 <FLASH_SetErrorCode+0xa4>)
 8006b24:	2280      	movs	r2, #128	; 0x80
 8006b26:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006b28:	4b09      	ldr	r3, [pc, #36]	; (8006b50 <FLASH_SetErrorCode+0xa4>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d008      	beq.n	8006b46 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006b34:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <FLASH_SetErrorCode+0xa8>)
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	f043 0320 	orr.w	r3, r3, #32
 8006b3c:	4a05      	ldr	r2, [pc, #20]	; (8006b54 <FLASH_SetErrorCode+0xa8>)
 8006b3e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006b40:	4b03      	ldr	r3, [pc, #12]	; (8006b50 <FLASH_SetErrorCode+0xa4>)
 8006b42:	2202      	movs	r2, #2
 8006b44:	60da      	str	r2, [r3, #12]
  }
}
 8006b46:	bf00      	nop
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	40023c00 	.word	0x40023c00
 8006b54:	20001c60 	.word	0x20001c60

08006b58 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006b6a:	4b31      	ldr	r3, [pc, #196]	; (8006c30 <HAL_FLASHEx_Erase+0xd8>)
 8006b6c:	7e1b      	ldrb	r3, [r3, #24]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d101      	bne.n	8006b76 <HAL_FLASHEx_Erase+0x1e>
 8006b72:	2302      	movs	r3, #2
 8006b74:	e058      	b.n	8006c28 <HAL_FLASHEx_Erase+0xd0>
 8006b76:	4b2e      	ldr	r3, [pc, #184]	; (8006c30 <HAL_FLASHEx_Erase+0xd8>)
 8006b78:	2201      	movs	r2, #1
 8006b7a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006b7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006b80:	f7ff feba 	bl	80068f8 <FLASH_WaitForLastOperation>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d148      	bne.n	8006c20 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	f04f 32ff 	mov.w	r2, #4294967295
 8006b94:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d115      	bne.n	8006bca <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4610      	mov	r0, r2
 8006bac:	f000 f844 	bl	8006c38 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006bb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006bb4:	f7ff fea0 	bl	80068f8 <FLASH_WaitForLastOperation>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006bbc:	4b1d      	ldr	r3, [pc, #116]	; (8006c34 <HAL_FLASHEx_Erase+0xdc>)
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	4a1c      	ldr	r2, [pc, #112]	; (8006c34 <HAL_FLASHEx_Erase+0xdc>)
 8006bc2:	f023 0304 	bic.w	r3, r3, #4
 8006bc6:	6113      	str	r3, [r2, #16]
 8006bc8:	e028      	b.n	8006c1c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	60bb      	str	r3, [r7, #8]
 8006bd0:	e01c      	b.n	8006c0c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	4619      	mov	r1, r3
 8006bda:	68b8      	ldr	r0, [r7, #8]
 8006bdc:	f000 f850 	bl	8006c80 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006be0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006be4:	f7ff fe88 	bl	80068f8 <FLASH_WaitForLastOperation>
 8006be8:	4603      	mov	r3, r0
 8006bea:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006bec:	4b11      	ldr	r3, [pc, #68]	; (8006c34 <HAL_FLASHEx_Erase+0xdc>)
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	4a10      	ldr	r2, [pc, #64]	; (8006c34 <HAL_FLASHEx_Erase+0xdc>)
 8006bf2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8006bf6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	601a      	str	r2, [r3, #0]
          break;
 8006c04:	e00a      	b.n	8006c1c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	60bb      	str	r3, [r7, #8]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	4413      	add	r3, r2
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d3da      	bcc.n	8006bd2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006c1c:	f000 f878 	bl	8006d10 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006c20:	4b03      	ldr	r3, [pc, #12]	; (8006c30 <HAL_FLASHEx_Erase+0xd8>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	761a      	strb	r2, [r3, #24]

  return status;
 8006c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20001c60 	.word	0x20001c60
 8006c34:	40023c00 	.word	0x40023c00

08006c38 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4603      	mov	r3, r0
 8006c40:	6039      	str	r1, [r7, #0]
 8006c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006c44:	4b0d      	ldr	r3, [pc, #52]	; (8006c7c <FLASH_MassErase+0x44>)
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	4a0c      	ldr	r2, [pc, #48]	; (8006c7c <FLASH_MassErase+0x44>)
 8006c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006c50:	4b0a      	ldr	r3, [pc, #40]	; (8006c7c <FLASH_MassErase+0x44>)
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	4a09      	ldr	r2, [pc, #36]	; (8006c7c <FLASH_MassErase+0x44>)
 8006c56:	f043 0304 	orr.w	r3, r3, #4
 8006c5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8006c5c:	4b07      	ldr	r3, [pc, #28]	; (8006c7c <FLASH_MassErase+0x44>)
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	79fb      	ldrb	r3, [r7, #7]
 8006c62:	021b      	lsls	r3, r3, #8
 8006c64:	4313      	orrs	r3, r2
 8006c66:	4a05      	ldr	r2, [pc, #20]	; (8006c7c <FLASH_MassErase+0x44>)
 8006c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c6c:	6113      	str	r3, [r2, #16]
}
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	40023c00 	.word	0x40023c00

08006c80 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d102      	bne.n	8006c9c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	e010      	b.n	8006cbe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d103      	bne.n	8006caa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	e009      	b.n	8006cbe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006caa:	78fb      	ldrb	r3, [r7, #3]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d103      	bne.n	8006cb8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	e002      	b.n	8006cbe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006cb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006cbc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006cbe:	4b13      	ldr	r3, [pc, #76]	; (8006d0c <FLASH_Erase_Sector+0x8c>)
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	4a12      	ldr	r2, [pc, #72]	; (8006d0c <FLASH_Erase_Sector+0x8c>)
 8006cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006cca:	4b10      	ldr	r3, [pc, #64]	; (8006d0c <FLASH_Erase_Sector+0x8c>)
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	490f      	ldr	r1, [pc, #60]	; (8006d0c <FLASH_Erase_Sector+0x8c>)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006cd6:	4b0d      	ldr	r3, [pc, #52]	; (8006d0c <FLASH_Erase_Sector+0x8c>)
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	4a0c      	ldr	r2, [pc, #48]	; (8006d0c <FLASH_Erase_Sector+0x8c>)
 8006cdc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006ce0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006ce2:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <FLASH_Erase_Sector+0x8c>)
 8006ce4:	691a      	ldr	r2, [r3, #16]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	4313      	orrs	r3, r2
 8006cec:	4a07      	ldr	r2, [pc, #28]	; (8006d0c <FLASH_Erase_Sector+0x8c>)
 8006cee:	f043 0302 	orr.w	r3, r3, #2
 8006cf2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006cf4:	4b05      	ldr	r3, [pc, #20]	; (8006d0c <FLASH_Erase_Sector+0x8c>)
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	4a04      	ldr	r2, [pc, #16]	; (8006d0c <FLASH_Erase_Sector+0x8c>)
 8006cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cfe:	6113      	str	r3, [r2, #16]
}
 8006d00:	bf00      	nop
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	40023c00 	.word	0x40023c00

08006d10 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006d14:	4b20      	ldr	r3, [pc, #128]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d017      	beq.n	8006d50 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006d20:	4b1d      	ldr	r3, [pc, #116]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a1c      	ldr	r2, [pc, #112]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d2a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006d2c:	4b1a      	ldr	r3, [pc, #104]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a19      	ldr	r2, [pc, #100]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	4b17      	ldr	r3, [pc, #92]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a16      	ldr	r2, [pc, #88]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d42:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d44:	4b14      	ldr	r3, [pc, #80]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a13      	ldr	r2, [pc, #76]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d4e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006d50:	4b11      	ldr	r3, [pc, #68]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d017      	beq.n	8006d8c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006d5c:	4b0e      	ldr	r3, [pc, #56]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a0d      	ldr	r2, [pc, #52]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d66:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006d68:	4b0b      	ldr	r3, [pc, #44]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a0a      	ldr	r2, [pc, #40]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	4b08      	ldr	r3, [pc, #32]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a07      	ldr	r2, [pc, #28]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d7e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006d80:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a04      	ldr	r2, [pc, #16]	; (8006d98 <FLASH_FlushCaches+0x88>)
 8006d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d8a:	6013      	str	r3, [r2, #0]
  }
}
 8006d8c:	bf00      	nop
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	40023c00 	.word	0x40023c00

08006d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b089      	sub	sp, #36	; 0x24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006db2:	2300      	movs	r3, #0
 8006db4:	61fb      	str	r3, [r7, #28]
 8006db6:	e16b      	b.n	8007090 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006db8:	2201      	movs	r2, #1
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	f040 815a 	bne.w	800708a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f003 0303 	and.w	r3, r3, #3
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d005      	beq.n	8006dee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d130      	bne.n	8006e50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	2203      	movs	r2, #3
 8006dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfe:	43db      	mvns	r3, r3
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	4013      	ands	r3, r2
 8006e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e24:	2201      	movs	r2, #1
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2c:	43db      	mvns	r3, r3
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	4013      	ands	r3, r2
 8006e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	091b      	lsrs	r3, r3, #4
 8006e3a:	f003 0201 	and.w	r2, r3, #1
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	fa02 f303 	lsl.w	r3, r2, r3
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f003 0303 	and.w	r3, r3, #3
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d017      	beq.n	8006e8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	2203      	movs	r2, #3
 8006e68:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6c:	43db      	mvns	r3, r3
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	4013      	ands	r3, r2
 8006e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69ba      	ldr	r2, [r7, #24]
 8006e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f003 0303 	and.w	r3, r3, #3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d123      	bne.n	8006ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	08da      	lsrs	r2, r3, #3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3208      	adds	r2, #8
 8006ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	220f      	movs	r2, #15
 8006eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb4:	43db      	mvns	r3, r3
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	691a      	ldr	r2, [r3, #16]
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	f003 0307 	and.w	r3, r3, #7
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	08da      	lsrs	r2, r3, #3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	3208      	adds	r2, #8
 8006eda:	69b9      	ldr	r1, [r7, #24]
 8006edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	2203      	movs	r2, #3
 8006eec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef0:	43db      	mvns	r3, r3
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f003 0203 	and.w	r2, r3, #3
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	fa02 f303 	lsl.w	r3, r2, r3
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80b4 	beq.w	800708a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f22:	2300      	movs	r3, #0
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	4b60      	ldr	r3, [pc, #384]	; (80070a8 <HAL_GPIO_Init+0x30c>)
 8006f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2a:	4a5f      	ldr	r2, [pc, #380]	; (80070a8 <HAL_GPIO_Init+0x30c>)
 8006f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f30:	6453      	str	r3, [r2, #68]	; 0x44
 8006f32:	4b5d      	ldr	r3, [pc, #372]	; (80070a8 <HAL_GPIO_Init+0x30c>)
 8006f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f3e:	4a5b      	ldr	r2, [pc, #364]	; (80070ac <HAL_GPIO_Init+0x310>)
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	089b      	lsrs	r3, r3, #2
 8006f44:	3302      	adds	r3, #2
 8006f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f003 0303 	and.w	r3, r3, #3
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	220f      	movs	r2, #15
 8006f56:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5a:	43db      	mvns	r3, r3
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	4013      	ands	r3, r2
 8006f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a52      	ldr	r2, [pc, #328]	; (80070b0 <HAL_GPIO_Init+0x314>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d02b      	beq.n	8006fc2 <HAL_GPIO_Init+0x226>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a51      	ldr	r2, [pc, #324]	; (80070b4 <HAL_GPIO_Init+0x318>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d025      	beq.n	8006fbe <HAL_GPIO_Init+0x222>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a50      	ldr	r2, [pc, #320]	; (80070b8 <HAL_GPIO_Init+0x31c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d01f      	beq.n	8006fba <HAL_GPIO_Init+0x21e>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a4f      	ldr	r2, [pc, #316]	; (80070bc <HAL_GPIO_Init+0x320>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d019      	beq.n	8006fb6 <HAL_GPIO_Init+0x21a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a4e      	ldr	r2, [pc, #312]	; (80070c0 <HAL_GPIO_Init+0x324>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d013      	beq.n	8006fb2 <HAL_GPIO_Init+0x216>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a4d      	ldr	r2, [pc, #308]	; (80070c4 <HAL_GPIO_Init+0x328>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00d      	beq.n	8006fae <HAL_GPIO_Init+0x212>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a4c      	ldr	r2, [pc, #304]	; (80070c8 <HAL_GPIO_Init+0x32c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d007      	beq.n	8006faa <HAL_GPIO_Init+0x20e>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a4b      	ldr	r2, [pc, #300]	; (80070cc <HAL_GPIO_Init+0x330>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d101      	bne.n	8006fa6 <HAL_GPIO_Init+0x20a>
 8006fa2:	2307      	movs	r3, #7
 8006fa4:	e00e      	b.n	8006fc4 <HAL_GPIO_Init+0x228>
 8006fa6:	2308      	movs	r3, #8
 8006fa8:	e00c      	b.n	8006fc4 <HAL_GPIO_Init+0x228>
 8006faa:	2306      	movs	r3, #6
 8006fac:	e00a      	b.n	8006fc4 <HAL_GPIO_Init+0x228>
 8006fae:	2305      	movs	r3, #5
 8006fb0:	e008      	b.n	8006fc4 <HAL_GPIO_Init+0x228>
 8006fb2:	2304      	movs	r3, #4
 8006fb4:	e006      	b.n	8006fc4 <HAL_GPIO_Init+0x228>
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e004      	b.n	8006fc4 <HAL_GPIO_Init+0x228>
 8006fba:	2302      	movs	r3, #2
 8006fbc:	e002      	b.n	8006fc4 <HAL_GPIO_Init+0x228>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <HAL_GPIO_Init+0x228>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	69fa      	ldr	r2, [r7, #28]
 8006fc6:	f002 0203 	and.w	r2, r2, #3
 8006fca:	0092      	lsls	r2, r2, #2
 8006fcc:	4093      	lsls	r3, r2
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fd4:	4935      	ldr	r1, [pc, #212]	; (80070ac <HAL_GPIO_Init+0x310>)
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	089b      	lsrs	r3, r3, #2
 8006fda:	3302      	adds	r3, #2
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006fe2:	4b3b      	ldr	r3, [pc, #236]	; (80070d0 <HAL_GPIO_Init+0x334>)
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	43db      	mvns	r3, r3
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	4013      	ands	r3, r2
 8006ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	4313      	orrs	r3, r2
 8007004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007006:	4a32      	ldr	r2, [pc, #200]	; (80070d0 <HAL_GPIO_Init+0x334>)
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800700c:	4b30      	ldr	r3, [pc, #192]	; (80070d0 <HAL_GPIO_Init+0x334>)
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	43db      	mvns	r3, r3
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	4013      	ands	r3, r2
 800701a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d003      	beq.n	8007030 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	4313      	orrs	r3, r2
 800702e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007030:	4a27      	ldr	r2, [pc, #156]	; (80070d0 <HAL_GPIO_Init+0x334>)
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007036:	4b26      	ldr	r3, [pc, #152]	; (80070d0 <HAL_GPIO_Init+0x334>)
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	43db      	mvns	r3, r3
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	4013      	ands	r3, r2
 8007044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	4313      	orrs	r3, r2
 8007058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800705a:	4a1d      	ldr	r2, [pc, #116]	; (80070d0 <HAL_GPIO_Init+0x334>)
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007060:	4b1b      	ldr	r3, [pc, #108]	; (80070d0 <HAL_GPIO_Init+0x334>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	43db      	mvns	r3, r3
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	4013      	ands	r3, r2
 800706e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	4313      	orrs	r3, r2
 8007082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007084:	4a12      	ldr	r2, [pc, #72]	; (80070d0 <HAL_GPIO_Init+0x334>)
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	3301      	adds	r3, #1
 800708e:	61fb      	str	r3, [r7, #28]
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	2b0f      	cmp	r3, #15
 8007094:	f67f ae90 	bls.w	8006db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007098:	bf00      	nop
 800709a:	bf00      	nop
 800709c:	3724      	adds	r7, #36	; 0x24
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	40023800 	.word	0x40023800
 80070ac:	40013800 	.word	0x40013800
 80070b0:	40020000 	.word	0x40020000
 80070b4:	40020400 	.word	0x40020400
 80070b8:	40020800 	.word	0x40020800
 80070bc:	40020c00 	.word	0x40020c00
 80070c0:	40021000 	.word	0x40021000
 80070c4:	40021400 	.word	0x40021400
 80070c8:	40021800 	.word	0x40021800
 80070cc:	40021c00 	.word	0x40021c00
 80070d0:	40013c00 	.word	0x40013c00

080070d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	807b      	strh	r3, [r7, #2]
 80070e0:	4613      	mov	r3, r2
 80070e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80070e4:	787b      	ldrb	r3, [r7, #1]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80070ea:	887a      	ldrh	r2, [r7, #2]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80070f0:	e003      	b.n	80070fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80070f2:	887b      	ldrh	r3, [r7, #2]
 80070f4:	041a      	lsls	r2, r3, #16
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	619a      	str	r2, [r3, #24]
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e034      	b.n	8007182 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007120:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f245 5255 	movw	r2, #21845	; 0x5555
 800712a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	6852      	ldr	r2, [r2, #4]
 8007134:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6892      	ldr	r2, [r2, #8]
 800713e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007140:	f7fe fa32 	bl	80055a8 <HAL_GetTick>
 8007144:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007146:	e00f      	b.n	8007168 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007148:	f7fe fa2e 	bl	80055a8 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	2b31      	cmp	r3, #49	; 0x31
 8007154:	d908      	bls.n	8007168 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e00c      	b.n	8007182 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e8      	bne.n	8007148 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800717e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800719a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
	...

080071ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e267      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d075      	beq.n	80072b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071ca:	4b88      	ldr	r3, [pc, #544]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 030c 	and.w	r3, r3, #12
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d00c      	beq.n	80071f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071d6:	4b85      	ldr	r3, [pc, #532]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071de:	2b08      	cmp	r3, #8
 80071e0:	d112      	bne.n	8007208 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071e2:	4b82      	ldr	r3, [pc, #520]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071ee:	d10b      	bne.n	8007208 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071f0:	4b7e      	ldr	r3, [pc, #504]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d05b      	beq.n	80072b4 <HAL_RCC_OscConfig+0x108>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d157      	bne.n	80072b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e242      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007210:	d106      	bne.n	8007220 <HAL_RCC_OscConfig+0x74>
 8007212:	4b76      	ldr	r3, [pc, #472]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a75      	ldr	r2, [pc, #468]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	e01d      	b.n	800725c <HAL_RCC_OscConfig+0xb0>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007228:	d10c      	bne.n	8007244 <HAL_RCC_OscConfig+0x98>
 800722a:	4b70      	ldr	r3, [pc, #448]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a6f      	ldr	r2, [pc, #444]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	4b6d      	ldr	r3, [pc, #436]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a6c      	ldr	r2, [pc, #432]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 800723c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	e00b      	b.n	800725c <HAL_RCC_OscConfig+0xb0>
 8007244:	4b69      	ldr	r3, [pc, #420]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a68      	ldr	r2, [pc, #416]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 800724a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	4b66      	ldr	r3, [pc, #408]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a65      	ldr	r2, [pc, #404]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800725a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d013      	beq.n	800728c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007264:	f7fe f9a0 	bl	80055a8 <HAL_GetTick>
 8007268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800726c:	f7fe f99c 	bl	80055a8 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b64      	cmp	r3, #100	; 0x64
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e207      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800727e:	4b5b      	ldr	r3, [pc, #364]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0f0      	beq.n	800726c <HAL_RCC_OscConfig+0xc0>
 800728a:	e014      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800728c:	f7fe f98c 	bl	80055a8 <HAL_GetTick>
 8007290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007292:	e008      	b.n	80072a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007294:	f7fe f988 	bl	80055a8 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b64      	cmp	r3, #100	; 0x64
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e1f3      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072a6:	4b51      	ldr	r3, [pc, #324]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1f0      	bne.n	8007294 <HAL_RCC_OscConfig+0xe8>
 80072b2:	e000      	b.n	80072b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d063      	beq.n	800738a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072c2:	4b4a      	ldr	r3, [pc, #296]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f003 030c 	and.w	r3, r3, #12
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00b      	beq.n	80072e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072ce:	4b47      	ldr	r3, [pc, #284]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072d6:	2b08      	cmp	r3, #8
 80072d8:	d11c      	bne.n	8007314 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072da:	4b44      	ldr	r3, [pc, #272]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d116      	bne.n	8007314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072e6:	4b41      	ldr	r3, [pc, #260]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d005      	beq.n	80072fe <HAL_RCC_OscConfig+0x152>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d001      	beq.n	80072fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e1c7      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072fe:	4b3b      	ldr	r3, [pc, #236]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	4937      	ldr	r1, [pc, #220]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 800730e:	4313      	orrs	r3, r2
 8007310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007312:	e03a      	b.n	800738a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d020      	beq.n	800735e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800731c:	4b34      	ldr	r3, [pc, #208]	; (80073f0 <HAL_RCC_OscConfig+0x244>)
 800731e:	2201      	movs	r2, #1
 8007320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007322:	f7fe f941 	bl	80055a8 <HAL_GetTick>
 8007326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007328:	e008      	b.n	800733c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800732a:	f7fe f93d 	bl	80055a8 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d901      	bls.n	800733c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e1a8      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800733c:	4b2b      	ldr	r3, [pc, #172]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d0f0      	beq.n	800732a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007348:	4b28      	ldr	r3, [pc, #160]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	4925      	ldr	r1, [pc, #148]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007358:	4313      	orrs	r3, r2
 800735a:	600b      	str	r3, [r1, #0]
 800735c:	e015      	b.n	800738a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800735e:	4b24      	ldr	r3, [pc, #144]	; (80073f0 <HAL_RCC_OscConfig+0x244>)
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007364:	f7fe f920 	bl	80055a8 <HAL_GetTick>
 8007368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800736a:	e008      	b.n	800737e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800736c:	f7fe f91c 	bl	80055a8 <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b02      	cmp	r3, #2
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e187      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800737e:	4b1b      	ldr	r3, [pc, #108]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0302 	and.w	r3, r3, #2
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1f0      	bne.n	800736c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0308 	and.w	r3, r3, #8
 8007392:	2b00      	cmp	r3, #0
 8007394:	d036      	beq.n	8007404 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d016      	beq.n	80073cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800739e:	4b15      	ldr	r3, [pc, #84]	; (80073f4 <HAL_RCC_OscConfig+0x248>)
 80073a0:	2201      	movs	r2, #1
 80073a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a4:	f7fe f900 	bl	80055a8 <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073aa:	e008      	b.n	80073be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073ac:	f7fe f8fc 	bl	80055a8 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e167      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073be:	4b0b      	ldr	r3, [pc, #44]	; (80073ec <HAL_RCC_OscConfig+0x240>)
 80073c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f0      	beq.n	80073ac <HAL_RCC_OscConfig+0x200>
 80073ca:	e01b      	b.n	8007404 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073cc:	4b09      	ldr	r3, [pc, #36]	; (80073f4 <HAL_RCC_OscConfig+0x248>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073d2:	f7fe f8e9 	bl	80055a8 <HAL_GetTick>
 80073d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073d8:	e00e      	b.n	80073f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073da:	f7fe f8e5 	bl	80055a8 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d907      	bls.n	80073f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e150      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
 80073ec:	40023800 	.word	0x40023800
 80073f0:	42470000 	.word	0x42470000
 80073f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073f8:	4b88      	ldr	r3, [pc, #544]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80073fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073fc:	f003 0302 	and.w	r3, r3, #2
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1ea      	bne.n	80073da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0304 	and.w	r3, r3, #4
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 8097 	beq.w	8007540 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007412:	2300      	movs	r3, #0
 8007414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007416:	4b81      	ldr	r3, [pc, #516]	; (800761c <HAL_RCC_OscConfig+0x470>)
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10f      	bne.n	8007442 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007422:	2300      	movs	r3, #0
 8007424:	60bb      	str	r3, [r7, #8]
 8007426:	4b7d      	ldr	r3, [pc, #500]	; (800761c <HAL_RCC_OscConfig+0x470>)
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	4a7c      	ldr	r2, [pc, #496]	; (800761c <HAL_RCC_OscConfig+0x470>)
 800742c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007430:	6413      	str	r3, [r2, #64]	; 0x40
 8007432:	4b7a      	ldr	r3, [pc, #488]	; (800761c <HAL_RCC_OscConfig+0x470>)
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800743a:	60bb      	str	r3, [r7, #8]
 800743c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800743e:	2301      	movs	r3, #1
 8007440:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007442:	4b77      	ldr	r3, [pc, #476]	; (8007620 <HAL_RCC_OscConfig+0x474>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800744a:	2b00      	cmp	r3, #0
 800744c:	d118      	bne.n	8007480 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800744e:	4b74      	ldr	r3, [pc, #464]	; (8007620 <HAL_RCC_OscConfig+0x474>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a73      	ldr	r2, [pc, #460]	; (8007620 <HAL_RCC_OscConfig+0x474>)
 8007454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800745a:	f7fe f8a5 	bl	80055a8 <HAL_GetTick>
 800745e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007460:	e008      	b.n	8007474 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007462:	f7fe f8a1 	bl	80055a8 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	2b02      	cmp	r3, #2
 800746e:	d901      	bls.n	8007474 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e10c      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007474:	4b6a      	ldr	r3, [pc, #424]	; (8007620 <HAL_RCC_OscConfig+0x474>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747c:	2b00      	cmp	r3, #0
 800747e:	d0f0      	beq.n	8007462 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d106      	bne.n	8007496 <HAL_RCC_OscConfig+0x2ea>
 8007488:	4b64      	ldr	r3, [pc, #400]	; (800761c <HAL_RCC_OscConfig+0x470>)
 800748a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748c:	4a63      	ldr	r2, [pc, #396]	; (800761c <HAL_RCC_OscConfig+0x470>)
 800748e:	f043 0301 	orr.w	r3, r3, #1
 8007492:	6713      	str	r3, [r2, #112]	; 0x70
 8007494:	e01c      	b.n	80074d0 <HAL_RCC_OscConfig+0x324>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	2b05      	cmp	r3, #5
 800749c:	d10c      	bne.n	80074b8 <HAL_RCC_OscConfig+0x30c>
 800749e:	4b5f      	ldr	r3, [pc, #380]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a2:	4a5e      	ldr	r2, [pc, #376]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074a4:	f043 0304 	orr.w	r3, r3, #4
 80074a8:	6713      	str	r3, [r2, #112]	; 0x70
 80074aa:	4b5c      	ldr	r3, [pc, #368]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ae:	4a5b      	ldr	r2, [pc, #364]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074b0:	f043 0301 	orr.w	r3, r3, #1
 80074b4:	6713      	str	r3, [r2, #112]	; 0x70
 80074b6:	e00b      	b.n	80074d0 <HAL_RCC_OscConfig+0x324>
 80074b8:	4b58      	ldr	r3, [pc, #352]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074bc:	4a57      	ldr	r2, [pc, #348]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074be:	f023 0301 	bic.w	r3, r3, #1
 80074c2:	6713      	str	r3, [r2, #112]	; 0x70
 80074c4:	4b55      	ldr	r3, [pc, #340]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c8:	4a54      	ldr	r2, [pc, #336]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074ca:	f023 0304 	bic.w	r3, r3, #4
 80074ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d015      	beq.n	8007504 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074d8:	f7fe f866 	bl	80055a8 <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074de:	e00a      	b.n	80074f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074e0:	f7fe f862 	bl	80055a8 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e0cb      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074f6:	4b49      	ldr	r3, [pc, #292]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80074f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0ee      	beq.n	80074e0 <HAL_RCC_OscConfig+0x334>
 8007502:	e014      	b.n	800752e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007504:	f7fe f850 	bl	80055a8 <HAL_GetTick>
 8007508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800750a:	e00a      	b.n	8007522 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800750c:	f7fe f84c 	bl	80055a8 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	f241 3288 	movw	r2, #5000	; 0x1388
 800751a:	4293      	cmp	r3, r2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e0b5      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007522:	4b3e      	ldr	r3, [pc, #248]	; (800761c <HAL_RCC_OscConfig+0x470>)
 8007524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1ee      	bne.n	800750c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800752e:	7dfb      	ldrb	r3, [r7, #23]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d105      	bne.n	8007540 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007534:	4b39      	ldr	r3, [pc, #228]	; (800761c <HAL_RCC_OscConfig+0x470>)
 8007536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007538:	4a38      	ldr	r2, [pc, #224]	; (800761c <HAL_RCC_OscConfig+0x470>)
 800753a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800753e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 80a1 	beq.w	800768c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800754a:	4b34      	ldr	r3, [pc, #208]	; (800761c <HAL_RCC_OscConfig+0x470>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f003 030c 	and.w	r3, r3, #12
 8007552:	2b08      	cmp	r3, #8
 8007554:	d05c      	beq.n	8007610 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	2b02      	cmp	r3, #2
 800755c:	d141      	bne.n	80075e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800755e:	4b31      	ldr	r3, [pc, #196]	; (8007624 <HAL_RCC_OscConfig+0x478>)
 8007560:	2200      	movs	r2, #0
 8007562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007564:	f7fe f820 	bl	80055a8 <HAL_GetTick>
 8007568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800756a:	e008      	b.n	800757e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800756c:	f7fe f81c 	bl	80055a8 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	2b02      	cmp	r3, #2
 8007578:	d901      	bls.n	800757e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e087      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800757e:	4b27      	ldr	r3, [pc, #156]	; (800761c <HAL_RCC_OscConfig+0x470>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1f0      	bne.n	800756c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	69da      	ldr	r2, [r3, #28]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	431a      	orrs	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	019b      	lsls	r3, r3, #6
 800759a:	431a      	orrs	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a0:	085b      	lsrs	r3, r3, #1
 80075a2:	3b01      	subs	r3, #1
 80075a4:	041b      	lsls	r3, r3, #16
 80075a6:	431a      	orrs	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	061b      	lsls	r3, r3, #24
 80075ae:	491b      	ldr	r1, [pc, #108]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075b4:	4b1b      	ldr	r3, [pc, #108]	; (8007624 <HAL_RCC_OscConfig+0x478>)
 80075b6:	2201      	movs	r2, #1
 80075b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075ba:	f7fd fff5 	bl	80055a8 <HAL_GetTick>
 80075be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075c0:	e008      	b.n	80075d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075c2:	f7fd fff1 	bl	80055a8 <HAL_GetTick>
 80075c6:	4602      	mov	r2, r0
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d901      	bls.n	80075d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e05c      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075d4:	4b11      	ldr	r3, [pc, #68]	; (800761c <HAL_RCC_OscConfig+0x470>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0f0      	beq.n	80075c2 <HAL_RCC_OscConfig+0x416>
 80075e0:	e054      	b.n	800768c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075e2:	4b10      	ldr	r3, [pc, #64]	; (8007624 <HAL_RCC_OscConfig+0x478>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075e8:	f7fd ffde 	bl	80055a8 <HAL_GetTick>
 80075ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075ee:	e008      	b.n	8007602 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075f0:	f7fd ffda 	bl	80055a8 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d901      	bls.n	8007602 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e045      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007602:	4b06      	ldr	r3, [pc, #24]	; (800761c <HAL_RCC_OscConfig+0x470>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1f0      	bne.n	80075f0 <HAL_RCC_OscConfig+0x444>
 800760e:	e03d      	b.n	800768c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d107      	bne.n	8007628 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e038      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
 800761c:	40023800 	.word	0x40023800
 8007620:	40007000 	.word	0x40007000
 8007624:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007628:	4b1b      	ldr	r3, [pc, #108]	; (8007698 <HAL_RCC_OscConfig+0x4ec>)
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d028      	beq.n	8007688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007640:	429a      	cmp	r2, r3
 8007642:	d121      	bne.n	8007688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800764e:	429a      	cmp	r2, r3
 8007650:	d11a      	bne.n	8007688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007658:	4013      	ands	r3, r2
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800765e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007660:	4293      	cmp	r3, r2
 8007662:	d111      	bne.n	8007688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766e:	085b      	lsrs	r3, r3, #1
 8007670:	3b01      	subs	r3, #1
 8007672:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007674:	429a      	cmp	r2, r3
 8007676:	d107      	bne.n	8007688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007682:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007684:	429a      	cmp	r2, r3
 8007686:	d001      	beq.n	800768c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e000      	b.n	800768e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	40023800 	.word	0x40023800

0800769c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e0cc      	b.n	800784a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076b0:	4b68      	ldr	r3, [pc, #416]	; (8007854 <HAL_RCC_ClockConfig+0x1b8>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0307 	and.w	r3, r3, #7
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d90c      	bls.n	80076d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076be:	4b65      	ldr	r3, [pc, #404]	; (8007854 <HAL_RCC_ClockConfig+0x1b8>)
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	b2d2      	uxtb	r2, r2
 80076c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076c6:	4b63      	ldr	r3, [pc, #396]	; (8007854 <HAL_RCC_ClockConfig+0x1b8>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0307 	and.w	r3, r3, #7
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d001      	beq.n	80076d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e0b8      	b.n	800784a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0302 	and.w	r3, r3, #2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d020      	beq.n	8007726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076f0:	4b59      	ldr	r3, [pc, #356]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	4a58      	ldr	r2, [pc, #352]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 80076f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80076fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0308 	and.w	r3, r3, #8
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007708:	4b53      	ldr	r3, [pc, #332]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	4a52      	ldr	r2, [pc, #328]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 800770e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007714:	4b50      	ldr	r3, [pc, #320]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	494d      	ldr	r1, [pc, #308]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 8007722:	4313      	orrs	r3, r2
 8007724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b00      	cmp	r3, #0
 8007730:	d044      	beq.n	80077bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d107      	bne.n	800774a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800773a:	4b47      	ldr	r3, [pc, #284]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d119      	bne.n	800777a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e07f      	b.n	800784a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d003      	beq.n	800775a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007756:	2b03      	cmp	r3, #3
 8007758:	d107      	bne.n	800776a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800775a:	4b3f      	ldr	r3, [pc, #252]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d109      	bne.n	800777a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e06f      	b.n	800784a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800776a:	4b3b      	ldr	r3, [pc, #236]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e067      	b.n	800784a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800777a:	4b37      	ldr	r3, [pc, #220]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f023 0203 	bic.w	r2, r3, #3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	4934      	ldr	r1, [pc, #208]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 8007788:	4313      	orrs	r3, r2
 800778a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800778c:	f7fd ff0c 	bl	80055a8 <HAL_GetTick>
 8007790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007792:	e00a      	b.n	80077aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007794:	f7fd ff08 	bl	80055a8 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	f241 3288 	movw	r2, #5000	; 0x1388
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d901      	bls.n	80077aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e04f      	b.n	800784a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077aa:	4b2b      	ldr	r3, [pc, #172]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f003 020c 	and.w	r2, r3, #12
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d1eb      	bne.n	8007794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077bc:	4b25      	ldr	r3, [pc, #148]	; (8007854 <HAL_RCC_ClockConfig+0x1b8>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0307 	and.w	r3, r3, #7
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d20c      	bcs.n	80077e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ca:	4b22      	ldr	r3, [pc, #136]	; (8007854 <HAL_RCC_ClockConfig+0x1b8>)
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077d2:	4b20      	ldr	r3, [pc, #128]	; (8007854 <HAL_RCC_ClockConfig+0x1b8>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d001      	beq.n	80077e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e032      	b.n	800784a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d008      	beq.n	8007802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077f0:	4b19      	ldr	r3, [pc, #100]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	4916      	ldr	r1, [pc, #88]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0308 	and.w	r3, r3, #8
 800780a:	2b00      	cmp	r3, #0
 800780c:	d009      	beq.n	8007822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800780e:	4b12      	ldr	r3, [pc, #72]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	490e      	ldr	r1, [pc, #56]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 800781e:	4313      	orrs	r3, r2
 8007820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007822:	f000 f821 	bl	8007868 <HAL_RCC_GetSysClockFreq>
 8007826:	4602      	mov	r2, r0
 8007828:	4b0b      	ldr	r3, [pc, #44]	; (8007858 <HAL_RCC_ClockConfig+0x1bc>)
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	091b      	lsrs	r3, r3, #4
 800782e:	f003 030f 	and.w	r3, r3, #15
 8007832:	490a      	ldr	r1, [pc, #40]	; (800785c <HAL_RCC_ClockConfig+0x1c0>)
 8007834:	5ccb      	ldrb	r3, [r1, r3]
 8007836:	fa22 f303 	lsr.w	r3, r2, r3
 800783a:	4a09      	ldr	r2, [pc, #36]	; (8007860 <HAL_RCC_ClockConfig+0x1c4>)
 800783c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800783e:	4b09      	ldr	r3, [pc, #36]	; (8007864 <HAL_RCC_ClockConfig+0x1c8>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4618      	mov	r0, r3
 8007844:	f7fd fe6c 	bl	8005520 <HAL_InitTick>

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	40023c00 	.word	0x40023c00
 8007858:	40023800 	.word	0x40023800
 800785c:	0800f348 	.word	0x0800f348
 8007860:	20000ea8 	.word	0x20000ea8
 8007864:	20000f68 	.word	0x20000f68

08007868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800786c:	b094      	sub	sp, #80	; 0x50
 800786e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	647b      	str	r3, [r7, #68]	; 0x44
 8007874:	2300      	movs	r3, #0
 8007876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007878:	2300      	movs	r3, #0
 800787a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007880:	4b79      	ldr	r3, [pc, #484]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f003 030c 	and.w	r3, r3, #12
 8007888:	2b08      	cmp	r3, #8
 800788a:	d00d      	beq.n	80078a8 <HAL_RCC_GetSysClockFreq+0x40>
 800788c:	2b08      	cmp	r3, #8
 800788e:	f200 80e1 	bhi.w	8007a54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <HAL_RCC_GetSysClockFreq+0x34>
 8007896:	2b04      	cmp	r3, #4
 8007898:	d003      	beq.n	80078a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800789a:	e0db      	b.n	8007a54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800789c:	4b73      	ldr	r3, [pc, #460]	; (8007a6c <HAL_RCC_GetSysClockFreq+0x204>)
 800789e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80078a0:	e0db      	b.n	8007a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078a2:	4b73      	ldr	r3, [pc, #460]	; (8007a70 <HAL_RCC_GetSysClockFreq+0x208>)
 80078a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80078a6:	e0d8      	b.n	8007a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078a8:	4b6f      	ldr	r3, [pc, #444]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078b2:	4b6d      	ldr	r3, [pc, #436]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d063      	beq.n	8007986 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078be:	4b6a      	ldr	r3, [pc, #424]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	099b      	lsrs	r3, r3, #6
 80078c4:	2200      	movs	r2, #0
 80078c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80078c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80078ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d0:	633b      	str	r3, [r7, #48]	; 0x30
 80078d2:	2300      	movs	r3, #0
 80078d4:	637b      	str	r3, [r7, #52]	; 0x34
 80078d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80078da:	4622      	mov	r2, r4
 80078dc:	462b      	mov	r3, r5
 80078de:	f04f 0000 	mov.w	r0, #0
 80078e2:	f04f 0100 	mov.w	r1, #0
 80078e6:	0159      	lsls	r1, r3, #5
 80078e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078ec:	0150      	lsls	r0, r2, #5
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4621      	mov	r1, r4
 80078f4:	1a51      	subs	r1, r2, r1
 80078f6:	6139      	str	r1, [r7, #16]
 80078f8:	4629      	mov	r1, r5
 80078fa:	eb63 0301 	sbc.w	r3, r3, r1
 80078fe:	617b      	str	r3, [r7, #20]
 8007900:	f04f 0200 	mov.w	r2, #0
 8007904:	f04f 0300 	mov.w	r3, #0
 8007908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800790c:	4659      	mov	r1, fp
 800790e:	018b      	lsls	r3, r1, #6
 8007910:	4651      	mov	r1, sl
 8007912:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007916:	4651      	mov	r1, sl
 8007918:	018a      	lsls	r2, r1, #6
 800791a:	4651      	mov	r1, sl
 800791c:	ebb2 0801 	subs.w	r8, r2, r1
 8007920:	4659      	mov	r1, fp
 8007922:	eb63 0901 	sbc.w	r9, r3, r1
 8007926:	f04f 0200 	mov.w	r2, #0
 800792a:	f04f 0300 	mov.w	r3, #0
 800792e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007932:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007936:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800793a:	4690      	mov	r8, r2
 800793c:	4699      	mov	r9, r3
 800793e:	4623      	mov	r3, r4
 8007940:	eb18 0303 	adds.w	r3, r8, r3
 8007944:	60bb      	str	r3, [r7, #8]
 8007946:	462b      	mov	r3, r5
 8007948:	eb49 0303 	adc.w	r3, r9, r3
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	f04f 0200 	mov.w	r2, #0
 8007952:	f04f 0300 	mov.w	r3, #0
 8007956:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800795a:	4629      	mov	r1, r5
 800795c:	024b      	lsls	r3, r1, #9
 800795e:	4621      	mov	r1, r4
 8007960:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007964:	4621      	mov	r1, r4
 8007966:	024a      	lsls	r2, r1, #9
 8007968:	4610      	mov	r0, r2
 800796a:	4619      	mov	r1, r3
 800796c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800796e:	2200      	movs	r2, #0
 8007970:	62bb      	str	r3, [r7, #40]	; 0x28
 8007972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007974:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007978:	f7f9 f996 	bl	8000ca8 <__aeabi_uldivmod>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	4613      	mov	r3, r2
 8007982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007984:	e058      	b.n	8007a38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007986:	4b38      	ldr	r3, [pc, #224]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	099b      	lsrs	r3, r3, #6
 800798c:	2200      	movs	r2, #0
 800798e:	4618      	mov	r0, r3
 8007990:	4611      	mov	r1, r2
 8007992:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007996:	623b      	str	r3, [r7, #32]
 8007998:	2300      	movs	r3, #0
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
 800799c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80079a0:	4642      	mov	r2, r8
 80079a2:	464b      	mov	r3, r9
 80079a4:	f04f 0000 	mov.w	r0, #0
 80079a8:	f04f 0100 	mov.w	r1, #0
 80079ac:	0159      	lsls	r1, r3, #5
 80079ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079b2:	0150      	lsls	r0, r2, #5
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4641      	mov	r1, r8
 80079ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80079be:	4649      	mov	r1, r9
 80079c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	f04f 0300 	mov.w	r3, #0
 80079cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80079d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80079d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80079d8:	ebb2 040a 	subs.w	r4, r2, sl
 80079dc:	eb63 050b 	sbc.w	r5, r3, fp
 80079e0:	f04f 0200 	mov.w	r2, #0
 80079e4:	f04f 0300 	mov.w	r3, #0
 80079e8:	00eb      	lsls	r3, r5, #3
 80079ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079ee:	00e2      	lsls	r2, r4, #3
 80079f0:	4614      	mov	r4, r2
 80079f2:	461d      	mov	r5, r3
 80079f4:	4643      	mov	r3, r8
 80079f6:	18e3      	adds	r3, r4, r3
 80079f8:	603b      	str	r3, [r7, #0]
 80079fa:	464b      	mov	r3, r9
 80079fc:	eb45 0303 	adc.w	r3, r5, r3
 8007a00:	607b      	str	r3, [r7, #4]
 8007a02:	f04f 0200 	mov.w	r2, #0
 8007a06:	f04f 0300 	mov.w	r3, #0
 8007a0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a0e:	4629      	mov	r1, r5
 8007a10:	028b      	lsls	r3, r1, #10
 8007a12:	4621      	mov	r1, r4
 8007a14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a18:	4621      	mov	r1, r4
 8007a1a:	028a      	lsls	r2, r1, #10
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a22:	2200      	movs	r2, #0
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	61fa      	str	r2, [r7, #28]
 8007a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a2c:	f7f9 f93c 	bl	8000ca8 <__aeabi_uldivmod>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	4613      	mov	r3, r2
 8007a36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a38:	4b0b      	ldr	r3, [pc, #44]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	0c1b      	lsrs	r3, r3, #16
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	3301      	adds	r3, #1
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007a48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a52:	e002      	b.n	8007a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a54:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <HAL_RCC_GetSysClockFreq+0x204>)
 8007a56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3750      	adds	r7, #80	; 0x50
 8007a60:	46bd      	mov	sp, r7
 8007a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a66:	bf00      	nop
 8007a68:	40023800 	.word	0x40023800
 8007a6c:	00f42400 	.word	0x00f42400
 8007a70:	007a1200 	.word	0x007a1200

08007a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a74:	b480      	push	{r7}
 8007a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a78:	4b03      	ldr	r3, [pc, #12]	; (8007a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	20000ea8 	.word	0x20000ea8

08007a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a90:	f7ff fff0 	bl	8007a74 <HAL_RCC_GetHCLKFreq>
 8007a94:	4602      	mov	r2, r0
 8007a96:	4b05      	ldr	r3, [pc, #20]	; (8007aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	0a9b      	lsrs	r3, r3, #10
 8007a9c:	f003 0307 	and.w	r3, r3, #7
 8007aa0:	4903      	ldr	r1, [pc, #12]	; (8007ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007aa2:	5ccb      	ldrb	r3, [r1, r3]
 8007aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	40023800 	.word	0x40023800
 8007ab0:	0800f358 	.word	0x0800f358

08007ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ab8:	f7ff ffdc 	bl	8007a74 <HAL_RCC_GetHCLKFreq>
 8007abc:	4602      	mov	r2, r0
 8007abe:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	0b5b      	lsrs	r3, r3, #13
 8007ac4:	f003 0307 	and.w	r3, r3, #7
 8007ac8:	4903      	ldr	r1, [pc, #12]	; (8007ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007aca:	5ccb      	ldrb	r3, [r1, r3]
 8007acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	40023800 	.word	0x40023800
 8007ad8:	0800f358 	.word	0x0800f358

08007adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e041      	b.n	8007b72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d106      	bne.n	8007b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7fd f8ba 	bl	8004c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3304      	adds	r3, #4
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	f000 fce2 	bl	80084e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d001      	beq.n	8007b94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e046      	b.n	8007c22 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a23      	ldr	r2, [pc, #140]	; (8007c30 <HAL_TIM_Base_Start+0xb4>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d022      	beq.n	8007bec <HAL_TIM_Base_Start+0x70>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bae:	d01d      	beq.n	8007bec <HAL_TIM_Base_Start+0x70>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a1f      	ldr	r2, [pc, #124]	; (8007c34 <HAL_TIM_Base_Start+0xb8>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d018      	beq.n	8007bec <HAL_TIM_Base_Start+0x70>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a1e      	ldr	r2, [pc, #120]	; (8007c38 <HAL_TIM_Base_Start+0xbc>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d013      	beq.n	8007bec <HAL_TIM_Base_Start+0x70>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a1c      	ldr	r2, [pc, #112]	; (8007c3c <HAL_TIM_Base_Start+0xc0>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d00e      	beq.n	8007bec <HAL_TIM_Base_Start+0x70>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a1b      	ldr	r2, [pc, #108]	; (8007c40 <HAL_TIM_Base_Start+0xc4>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d009      	beq.n	8007bec <HAL_TIM_Base_Start+0x70>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a19      	ldr	r2, [pc, #100]	; (8007c44 <HAL_TIM_Base_Start+0xc8>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d004      	beq.n	8007bec <HAL_TIM_Base_Start+0x70>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a18      	ldr	r2, [pc, #96]	; (8007c48 <HAL_TIM_Base_Start+0xcc>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d111      	bne.n	8007c10 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 0307 	and.w	r3, r3, #7
 8007bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2b06      	cmp	r3, #6
 8007bfc:	d010      	beq.n	8007c20 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f042 0201 	orr.w	r2, r2, #1
 8007c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c0e:	e007      	b.n	8007c20 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f042 0201 	orr.w	r2, r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	40010000 	.word	0x40010000
 8007c34:	40000400 	.word	0x40000400
 8007c38:	40000800 	.word	0x40000800
 8007c3c:	40000c00 	.word	0x40000c00
 8007c40:	40010400 	.word	0x40010400
 8007c44:	40014000 	.word	0x40014000
 8007c48:	40001800 	.word	0x40001800

08007c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d001      	beq.n	8007c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e04e      	b.n	8007d02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f042 0201 	orr.w	r2, r2, #1
 8007c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a23      	ldr	r2, [pc, #140]	; (8007d10 <HAL_TIM_Base_Start_IT+0xc4>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d022      	beq.n	8007ccc <HAL_TIM_Base_Start_IT+0x80>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c8e:	d01d      	beq.n	8007ccc <HAL_TIM_Base_Start_IT+0x80>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a1f      	ldr	r2, [pc, #124]	; (8007d14 <HAL_TIM_Base_Start_IT+0xc8>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d018      	beq.n	8007ccc <HAL_TIM_Base_Start_IT+0x80>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a1e      	ldr	r2, [pc, #120]	; (8007d18 <HAL_TIM_Base_Start_IT+0xcc>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d013      	beq.n	8007ccc <HAL_TIM_Base_Start_IT+0x80>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a1c      	ldr	r2, [pc, #112]	; (8007d1c <HAL_TIM_Base_Start_IT+0xd0>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d00e      	beq.n	8007ccc <HAL_TIM_Base_Start_IT+0x80>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a1b      	ldr	r2, [pc, #108]	; (8007d20 <HAL_TIM_Base_Start_IT+0xd4>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d009      	beq.n	8007ccc <HAL_TIM_Base_Start_IT+0x80>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a19      	ldr	r2, [pc, #100]	; (8007d24 <HAL_TIM_Base_Start_IT+0xd8>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d004      	beq.n	8007ccc <HAL_TIM_Base_Start_IT+0x80>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a18      	ldr	r2, [pc, #96]	; (8007d28 <HAL_TIM_Base_Start_IT+0xdc>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d111      	bne.n	8007cf0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b06      	cmp	r3, #6
 8007cdc:	d010      	beq.n	8007d00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f042 0201 	orr.w	r2, r2, #1
 8007cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cee:	e007      	b.n	8007d00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f042 0201 	orr.w	r2, r2, #1
 8007cfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	40010000 	.word	0x40010000
 8007d14:	40000400 	.word	0x40000400
 8007d18:	40000800 	.word	0x40000800
 8007d1c:	40000c00 	.word	0x40000c00
 8007d20:	40010400 	.word	0x40010400
 8007d24:	40014000 	.word	0x40014000
 8007d28:	40001800 	.word	0x40001800

08007d2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e041      	b.n	8007dc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d106      	bne.n	8007d58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f839 	bl	8007dca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3304      	adds	r3, #4
 8007d68:	4619      	mov	r1, r3
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	f000 fbba 	bl	80084e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007dd2:	bf00      	nop
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
	...

08007de0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d109      	bne.n	8007e04 <HAL_TIM_PWM_Start+0x24>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	bf14      	ite	ne
 8007dfc:	2301      	movne	r3, #1
 8007dfe:	2300      	moveq	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	e022      	b.n	8007e4a <HAL_TIM_PWM_Start+0x6a>
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	2b04      	cmp	r3, #4
 8007e08:	d109      	bne.n	8007e1e <HAL_TIM_PWM_Start+0x3e>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	bf14      	ite	ne
 8007e16:	2301      	movne	r3, #1
 8007e18:	2300      	moveq	r3, #0
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	e015      	b.n	8007e4a <HAL_TIM_PWM_Start+0x6a>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d109      	bne.n	8007e38 <HAL_TIM_PWM_Start+0x58>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	bf14      	ite	ne
 8007e30:	2301      	movne	r3, #1
 8007e32:	2300      	moveq	r3, #0
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	e008      	b.n	8007e4a <HAL_TIM_PWM_Start+0x6a>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	bf14      	ite	ne
 8007e44:	2301      	movne	r3, #1
 8007e46:	2300      	moveq	r3, #0
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e07c      	b.n	8007f4c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d104      	bne.n	8007e62 <HAL_TIM_PWM_Start+0x82>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e60:	e013      	b.n	8007e8a <HAL_TIM_PWM_Start+0xaa>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b04      	cmp	r3, #4
 8007e66:	d104      	bne.n	8007e72 <HAL_TIM_PWM_Start+0x92>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e70:	e00b      	b.n	8007e8a <HAL_TIM_PWM_Start+0xaa>
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b08      	cmp	r3, #8
 8007e76:	d104      	bne.n	8007e82 <HAL_TIM_PWM_Start+0xa2>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e80:	e003      	b.n	8007e8a <HAL_TIM_PWM_Start+0xaa>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2202      	movs	r2, #2
 8007e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fe10 	bl	8008ab8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a2d      	ldr	r2, [pc, #180]	; (8007f54 <HAL_TIM_PWM_Start+0x174>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d004      	beq.n	8007eac <HAL_TIM_PWM_Start+0xcc>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a2c      	ldr	r2, [pc, #176]	; (8007f58 <HAL_TIM_PWM_Start+0x178>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d101      	bne.n	8007eb0 <HAL_TIM_PWM_Start+0xd0>
 8007eac:	2301      	movs	r3, #1
 8007eae:	e000      	b.n	8007eb2 <HAL_TIM_PWM_Start+0xd2>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d007      	beq.n	8007ec6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ec4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a22      	ldr	r2, [pc, #136]	; (8007f54 <HAL_TIM_PWM_Start+0x174>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d022      	beq.n	8007f16 <HAL_TIM_PWM_Start+0x136>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ed8:	d01d      	beq.n	8007f16 <HAL_TIM_PWM_Start+0x136>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a1f      	ldr	r2, [pc, #124]	; (8007f5c <HAL_TIM_PWM_Start+0x17c>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d018      	beq.n	8007f16 <HAL_TIM_PWM_Start+0x136>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a1d      	ldr	r2, [pc, #116]	; (8007f60 <HAL_TIM_PWM_Start+0x180>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d013      	beq.n	8007f16 <HAL_TIM_PWM_Start+0x136>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a1c      	ldr	r2, [pc, #112]	; (8007f64 <HAL_TIM_PWM_Start+0x184>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d00e      	beq.n	8007f16 <HAL_TIM_PWM_Start+0x136>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a16      	ldr	r2, [pc, #88]	; (8007f58 <HAL_TIM_PWM_Start+0x178>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d009      	beq.n	8007f16 <HAL_TIM_PWM_Start+0x136>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a18      	ldr	r2, [pc, #96]	; (8007f68 <HAL_TIM_PWM_Start+0x188>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d004      	beq.n	8007f16 <HAL_TIM_PWM_Start+0x136>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a16      	ldr	r2, [pc, #88]	; (8007f6c <HAL_TIM_PWM_Start+0x18c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d111      	bne.n	8007f3a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f003 0307 	and.w	r3, r3, #7
 8007f20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2b06      	cmp	r3, #6
 8007f26:	d010      	beq.n	8007f4a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f042 0201 	orr.w	r2, r2, #1
 8007f36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f38:	e007      	b.n	8007f4a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f042 0201 	orr.w	r2, r2, #1
 8007f48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	40010000 	.word	0x40010000
 8007f58:	40010400 	.word	0x40010400
 8007f5c:	40000400 	.word	0x40000400
 8007f60:	40000800 	.word	0x40000800
 8007f64:	40000c00 	.word	0x40000c00
 8007f68:	40014000 	.word	0x40014000
 8007f6c:	40001800 	.word	0x40001800

08007f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d122      	bne.n	8007fcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d11b      	bne.n	8007fcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f06f 0202 	mvn.w	r2, #2
 8007f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	f003 0303 	and.w	r3, r3, #3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fa77 	bl	80084a6 <HAL_TIM_IC_CaptureCallback>
 8007fb8:	e005      	b.n	8007fc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fa69 	bl	8008492 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fa7a 	bl	80084ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	f003 0304 	and.w	r3, r3, #4
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	d122      	bne.n	8008020 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	d11b      	bne.n	8008020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f06f 0204 	mvn.w	r2, #4
 8007ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fa4d 	bl	80084a6 <HAL_TIM_IC_CaptureCallback>
 800800c:	e005      	b.n	800801a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fa3f 	bl	8008492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fa50 	bl	80084ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f003 0308 	and.w	r3, r3, #8
 800802a:	2b08      	cmp	r3, #8
 800802c:	d122      	bne.n	8008074 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	f003 0308 	and.w	r3, r3, #8
 8008038:	2b08      	cmp	r3, #8
 800803a:	d11b      	bne.n	8008074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f06f 0208 	mvn.w	r2, #8
 8008044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2204      	movs	r2, #4
 800804a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	f003 0303 	and.w	r3, r3, #3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fa23 	bl	80084a6 <HAL_TIM_IC_CaptureCallback>
 8008060:	e005      	b.n	800806e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fa15 	bl	8008492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fa26 	bl	80084ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f003 0310 	and.w	r3, r3, #16
 800807e:	2b10      	cmp	r3, #16
 8008080:	d122      	bne.n	80080c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f003 0310 	and.w	r3, r3, #16
 800808c:	2b10      	cmp	r3, #16
 800808e:	d11b      	bne.n	80080c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f06f 0210 	mvn.w	r2, #16
 8008098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2208      	movs	r2, #8
 800809e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f9f9 	bl	80084a6 <HAL_TIM_IC_CaptureCallback>
 80080b4:	e005      	b.n	80080c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f9eb 	bl	8008492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f9fc 	bl	80084ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d10e      	bne.n	80080f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d107      	bne.n	80080f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f06f 0201 	mvn.w	r2, #1
 80080ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7fc fb90 	bl	8004814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080fe:	2b80      	cmp	r3, #128	; 0x80
 8008100:	d10e      	bne.n	8008120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810c:	2b80      	cmp	r3, #128	; 0x80
 800810e:	d107      	bne.n	8008120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fdca 	bl	8008cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800812a:	2b40      	cmp	r3, #64	; 0x40
 800812c:	d10e      	bne.n	800814c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008138:	2b40      	cmp	r3, #64	; 0x40
 800813a:	d107      	bne.n	800814c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f9c1 	bl	80084ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	2b20      	cmp	r3, #32
 8008158:	d10e      	bne.n	8008178 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f003 0320 	and.w	r3, r3, #32
 8008164:	2b20      	cmp	r3, #32
 8008166:	d107      	bne.n	8008178 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f06f 0220 	mvn.w	r2, #32
 8008170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fd94 	bl	8008ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008178:	bf00      	nop
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008196:	2b01      	cmp	r3, #1
 8008198:	d101      	bne.n	800819e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800819a:	2302      	movs	r3, #2
 800819c:	e0ae      	b.n	80082fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b0c      	cmp	r3, #12
 80081aa:	f200 809f 	bhi.w	80082ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80081ae:	a201      	add	r2, pc, #4	; (adr r2, 80081b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80081b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b4:	080081e9 	.word	0x080081e9
 80081b8:	080082ed 	.word	0x080082ed
 80081bc:	080082ed 	.word	0x080082ed
 80081c0:	080082ed 	.word	0x080082ed
 80081c4:	08008229 	.word	0x08008229
 80081c8:	080082ed 	.word	0x080082ed
 80081cc:	080082ed 	.word	0x080082ed
 80081d0:	080082ed 	.word	0x080082ed
 80081d4:	0800826b 	.word	0x0800826b
 80081d8:	080082ed 	.word	0x080082ed
 80081dc:	080082ed 	.word	0x080082ed
 80081e0:	080082ed 	.word	0x080082ed
 80081e4:	080082ab 	.word	0x080082ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68b9      	ldr	r1, [r7, #8]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 fa18 	bl	8008624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	699a      	ldr	r2, [r3, #24]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f042 0208 	orr.w	r2, r2, #8
 8008202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	699a      	ldr	r2, [r3, #24]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 0204 	bic.w	r2, r2, #4
 8008212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6999      	ldr	r1, [r3, #24]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	691a      	ldr	r2, [r3, #16]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	619a      	str	r2, [r3, #24]
      break;
 8008226:	e064      	b.n	80082f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68b9      	ldr	r1, [r7, #8]
 800822e:	4618      	mov	r0, r3
 8008230:	f000 fa68 	bl	8008704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	699a      	ldr	r2, [r3, #24]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	699a      	ldr	r2, [r3, #24]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6999      	ldr	r1, [r3, #24]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	021a      	lsls	r2, r3, #8
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	619a      	str	r2, [r3, #24]
      break;
 8008268:	e043      	b.n	80082f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68b9      	ldr	r1, [r7, #8]
 8008270:	4618      	mov	r0, r3
 8008272:	f000 fabd 	bl	80087f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	69da      	ldr	r2, [r3, #28]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f042 0208 	orr.w	r2, r2, #8
 8008284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	69da      	ldr	r2, [r3, #28]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f022 0204 	bic.w	r2, r2, #4
 8008294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69d9      	ldr	r1, [r3, #28]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	691a      	ldr	r2, [r3, #16]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	430a      	orrs	r2, r1
 80082a6:	61da      	str	r2, [r3, #28]
      break;
 80082a8:	e023      	b.n	80082f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68b9      	ldr	r1, [r7, #8]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 fb11 	bl	80088d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	69da      	ldr	r2, [r3, #28]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	69da      	ldr	r2, [r3, #28]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69d9      	ldr	r1, [r3, #28]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	021a      	lsls	r2, r3, #8
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	61da      	str	r2, [r3, #28]
      break;
 80082ea:	e002      	b.n	80082f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	75fb      	strb	r3, [r7, #23]
      break;
 80082f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008318:	2b01      	cmp	r3, #1
 800831a:	d101      	bne.n	8008320 <HAL_TIM_ConfigClockSource+0x1c>
 800831c:	2302      	movs	r3, #2
 800831e:	e0b4      	b.n	800848a <HAL_TIM_ConfigClockSource+0x186>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800833e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008346:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008358:	d03e      	beq.n	80083d8 <HAL_TIM_ConfigClockSource+0xd4>
 800835a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800835e:	f200 8087 	bhi.w	8008470 <HAL_TIM_ConfigClockSource+0x16c>
 8008362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008366:	f000 8086 	beq.w	8008476 <HAL_TIM_ConfigClockSource+0x172>
 800836a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800836e:	d87f      	bhi.n	8008470 <HAL_TIM_ConfigClockSource+0x16c>
 8008370:	2b70      	cmp	r3, #112	; 0x70
 8008372:	d01a      	beq.n	80083aa <HAL_TIM_ConfigClockSource+0xa6>
 8008374:	2b70      	cmp	r3, #112	; 0x70
 8008376:	d87b      	bhi.n	8008470 <HAL_TIM_ConfigClockSource+0x16c>
 8008378:	2b60      	cmp	r3, #96	; 0x60
 800837a:	d050      	beq.n	800841e <HAL_TIM_ConfigClockSource+0x11a>
 800837c:	2b60      	cmp	r3, #96	; 0x60
 800837e:	d877      	bhi.n	8008470 <HAL_TIM_ConfigClockSource+0x16c>
 8008380:	2b50      	cmp	r3, #80	; 0x50
 8008382:	d03c      	beq.n	80083fe <HAL_TIM_ConfigClockSource+0xfa>
 8008384:	2b50      	cmp	r3, #80	; 0x50
 8008386:	d873      	bhi.n	8008470 <HAL_TIM_ConfigClockSource+0x16c>
 8008388:	2b40      	cmp	r3, #64	; 0x40
 800838a:	d058      	beq.n	800843e <HAL_TIM_ConfigClockSource+0x13a>
 800838c:	2b40      	cmp	r3, #64	; 0x40
 800838e:	d86f      	bhi.n	8008470 <HAL_TIM_ConfigClockSource+0x16c>
 8008390:	2b30      	cmp	r3, #48	; 0x30
 8008392:	d064      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x15a>
 8008394:	2b30      	cmp	r3, #48	; 0x30
 8008396:	d86b      	bhi.n	8008470 <HAL_TIM_ConfigClockSource+0x16c>
 8008398:	2b20      	cmp	r3, #32
 800839a:	d060      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x15a>
 800839c:	2b20      	cmp	r3, #32
 800839e:	d867      	bhi.n	8008470 <HAL_TIM_ConfigClockSource+0x16c>
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d05c      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x15a>
 80083a4:	2b10      	cmp	r3, #16
 80083a6:	d05a      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x15a>
 80083a8:	e062      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	6899      	ldr	r1, [r3, #8]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	f000 fb5d 	bl	8008a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	609a      	str	r2, [r3, #8]
      break;
 80083d6:	e04f      	b.n	8008478 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	6899      	ldr	r1, [r3, #8]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f000 fb46 	bl	8008a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689a      	ldr	r2, [r3, #8]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083fa:	609a      	str	r2, [r3, #8]
      break;
 80083fc:	e03c      	b.n	8008478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	6859      	ldr	r1, [r3, #4]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	461a      	mov	r2, r3
 800840c:	f000 faba 	bl	8008984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2150      	movs	r1, #80	; 0x50
 8008416:	4618      	mov	r0, r3
 8008418:	f000 fb13 	bl	8008a42 <TIM_ITRx_SetConfig>
      break;
 800841c:	e02c      	b.n	8008478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6818      	ldr	r0, [r3, #0]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	6859      	ldr	r1, [r3, #4]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	461a      	mov	r2, r3
 800842c:	f000 fad9 	bl	80089e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2160      	movs	r1, #96	; 0x60
 8008436:	4618      	mov	r0, r3
 8008438:	f000 fb03 	bl	8008a42 <TIM_ITRx_SetConfig>
      break;
 800843c:	e01c      	b.n	8008478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6818      	ldr	r0, [r3, #0]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	6859      	ldr	r1, [r3, #4]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	461a      	mov	r2, r3
 800844c:	f000 fa9a 	bl	8008984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2140      	movs	r1, #64	; 0x40
 8008456:	4618      	mov	r0, r3
 8008458:	f000 faf3 	bl	8008a42 <TIM_ITRx_SetConfig>
      break;
 800845c:	e00c      	b.n	8008478 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4619      	mov	r1, r3
 8008468:	4610      	mov	r0, r2
 800846a:	f000 faea 	bl	8008a42 <TIM_ITRx_SetConfig>
      break;
 800846e:	e003      	b.n	8008478 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	73fb      	strb	r3, [r7, #15]
      break;
 8008474:	e000      	b.n	8008478 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008476:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008488:	7bfb      	ldrb	r3, [r7, #15]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084ae:	bf00      	nop
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084c2:	bf00      	nop
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
	...

080084e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a40      	ldr	r2, [pc, #256]	; (80085f8 <TIM_Base_SetConfig+0x114>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d013      	beq.n	8008524 <TIM_Base_SetConfig+0x40>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008502:	d00f      	beq.n	8008524 <TIM_Base_SetConfig+0x40>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a3d      	ldr	r2, [pc, #244]	; (80085fc <TIM_Base_SetConfig+0x118>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d00b      	beq.n	8008524 <TIM_Base_SetConfig+0x40>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a3c      	ldr	r2, [pc, #240]	; (8008600 <TIM_Base_SetConfig+0x11c>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d007      	beq.n	8008524 <TIM_Base_SetConfig+0x40>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a3b      	ldr	r2, [pc, #236]	; (8008604 <TIM_Base_SetConfig+0x120>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d003      	beq.n	8008524 <TIM_Base_SetConfig+0x40>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a3a      	ldr	r2, [pc, #232]	; (8008608 <TIM_Base_SetConfig+0x124>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d108      	bne.n	8008536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800852a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	4313      	orrs	r3, r2
 8008534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a2f      	ldr	r2, [pc, #188]	; (80085f8 <TIM_Base_SetConfig+0x114>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d02b      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008544:	d027      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a2c      	ldr	r2, [pc, #176]	; (80085fc <TIM_Base_SetConfig+0x118>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d023      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a2b      	ldr	r2, [pc, #172]	; (8008600 <TIM_Base_SetConfig+0x11c>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d01f      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a2a      	ldr	r2, [pc, #168]	; (8008604 <TIM_Base_SetConfig+0x120>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d01b      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a29      	ldr	r2, [pc, #164]	; (8008608 <TIM_Base_SetConfig+0x124>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d017      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a28      	ldr	r2, [pc, #160]	; (800860c <TIM_Base_SetConfig+0x128>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d013      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a27      	ldr	r2, [pc, #156]	; (8008610 <TIM_Base_SetConfig+0x12c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d00f      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a26      	ldr	r2, [pc, #152]	; (8008614 <TIM_Base_SetConfig+0x130>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d00b      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a25      	ldr	r2, [pc, #148]	; (8008618 <TIM_Base_SetConfig+0x134>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d007      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a24      	ldr	r2, [pc, #144]	; (800861c <TIM_Base_SetConfig+0x138>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d003      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a23      	ldr	r2, [pc, #140]	; (8008620 <TIM_Base_SetConfig+0x13c>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d108      	bne.n	80085a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800859c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	689a      	ldr	r2, [r3, #8]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a0a      	ldr	r2, [pc, #40]	; (80085f8 <TIM_Base_SetConfig+0x114>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d003      	beq.n	80085dc <TIM_Base_SetConfig+0xf8>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a0c      	ldr	r2, [pc, #48]	; (8008608 <TIM_Base_SetConfig+0x124>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d103      	bne.n	80085e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	691a      	ldr	r2, [r3, #16]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	615a      	str	r2, [r3, #20]
}
 80085ea:	bf00      	nop
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	40010000 	.word	0x40010000
 80085fc:	40000400 	.word	0x40000400
 8008600:	40000800 	.word	0x40000800
 8008604:	40000c00 	.word	0x40000c00
 8008608:	40010400 	.word	0x40010400
 800860c:	40014000 	.word	0x40014000
 8008610:	40014400 	.word	0x40014400
 8008614:	40014800 	.word	0x40014800
 8008618:	40001800 	.word	0x40001800
 800861c:	40001c00 	.word	0x40001c00
 8008620:	40002000 	.word	0x40002000

08008624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	f023 0201 	bic.w	r2, r3, #1
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f023 0303 	bic.w	r3, r3, #3
 800865a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	4313      	orrs	r3, r2
 8008664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f023 0302 	bic.w	r3, r3, #2
 800866c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a20      	ldr	r2, [pc, #128]	; (80086fc <TIM_OC1_SetConfig+0xd8>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d003      	beq.n	8008688 <TIM_OC1_SetConfig+0x64>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a1f      	ldr	r2, [pc, #124]	; (8008700 <TIM_OC1_SetConfig+0xdc>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d10c      	bne.n	80086a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f023 0308 	bic.w	r3, r3, #8
 800868e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	4313      	orrs	r3, r2
 8008698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f023 0304 	bic.w	r3, r3, #4
 80086a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a15      	ldr	r2, [pc, #84]	; (80086fc <TIM_OC1_SetConfig+0xd8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d003      	beq.n	80086b2 <TIM_OC1_SetConfig+0x8e>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a14      	ldr	r2, [pc, #80]	; (8008700 <TIM_OC1_SetConfig+0xdc>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d111      	bne.n	80086d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	621a      	str	r2, [r3, #32]
}
 80086f0:	bf00      	nop
 80086f2:	371c      	adds	r7, #28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	40010000 	.word	0x40010000
 8008700:	40010400 	.word	0x40010400

08008704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008704:	b480      	push	{r7}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	f023 0210 	bic.w	r2, r3, #16
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800873a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	021b      	lsls	r3, r3, #8
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	4313      	orrs	r3, r2
 8008746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f023 0320 	bic.w	r3, r3, #32
 800874e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	011b      	lsls	r3, r3, #4
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	4313      	orrs	r3, r2
 800875a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a22      	ldr	r2, [pc, #136]	; (80087e8 <TIM_OC2_SetConfig+0xe4>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d003      	beq.n	800876c <TIM_OC2_SetConfig+0x68>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a21      	ldr	r2, [pc, #132]	; (80087ec <TIM_OC2_SetConfig+0xe8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d10d      	bne.n	8008788 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	011b      	lsls	r3, r3, #4
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	4313      	orrs	r3, r2
 800877e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008786:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a17      	ldr	r2, [pc, #92]	; (80087e8 <TIM_OC2_SetConfig+0xe4>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d003      	beq.n	8008798 <TIM_OC2_SetConfig+0x94>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a16      	ldr	r2, [pc, #88]	; (80087ec <TIM_OC2_SetConfig+0xe8>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d113      	bne.n	80087c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800879e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	4313      	orrs	r3, r2
 80087be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	621a      	str	r2, [r3, #32]
}
 80087da:	bf00      	nop
 80087dc:	371c      	adds	r7, #28
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	40010000 	.word	0x40010000
 80087ec:	40010400 	.word	0x40010400

080087f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a1b      	ldr	r3, [r3, #32]
 800880a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800881e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f023 0303 	bic.w	r3, r3, #3
 8008826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	4313      	orrs	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	021b      	lsls	r3, r3, #8
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	4313      	orrs	r3, r2
 8008844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a21      	ldr	r2, [pc, #132]	; (80088d0 <TIM_OC3_SetConfig+0xe0>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d003      	beq.n	8008856 <TIM_OC3_SetConfig+0x66>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a20      	ldr	r2, [pc, #128]	; (80088d4 <TIM_OC3_SetConfig+0xe4>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d10d      	bne.n	8008872 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800885c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	021b      	lsls	r3, r3, #8
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	4313      	orrs	r3, r2
 8008868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a16      	ldr	r2, [pc, #88]	; (80088d0 <TIM_OC3_SetConfig+0xe0>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d003      	beq.n	8008882 <TIM_OC3_SetConfig+0x92>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a15      	ldr	r2, [pc, #84]	; (80088d4 <TIM_OC3_SetConfig+0xe4>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d113      	bne.n	80088aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	011b      	lsls	r3, r3, #4
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	4313      	orrs	r3, r2
 800889c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	011b      	lsls	r3, r3, #4
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	621a      	str	r2, [r3, #32]
}
 80088c4:	bf00      	nop
 80088c6:	371c      	adds	r7, #28
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr
 80088d0:	40010000 	.word	0x40010000
 80088d4:	40010400 	.word	0x40010400

080088d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800890e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	021b      	lsls	r3, r3, #8
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	4313      	orrs	r3, r2
 800891a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	031b      	lsls	r3, r3, #12
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	4313      	orrs	r3, r2
 800892e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a12      	ldr	r2, [pc, #72]	; (800897c <TIM_OC4_SetConfig+0xa4>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d003      	beq.n	8008940 <TIM_OC4_SetConfig+0x68>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a11      	ldr	r2, [pc, #68]	; (8008980 <TIM_OC4_SetConfig+0xa8>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d109      	bne.n	8008954 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	019b      	lsls	r3, r3, #6
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	4313      	orrs	r3, r2
 8008952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	621a      	str	r2, [r3, #32]
}
 800896e:	bf00      	nop
 8008970:	371c      	adds	r7, #28
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	40010000 	.word	0x40010000
 8008980:	40010400 	.word	0x40010400

08008984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008984:	b480      	push	{r7}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	f023 0201 	bic.w	r2, r3, #1
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	011b      	lsls	r3, r3, #4
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f023 030a 	bic.w	r3, r3, #10
 80089c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	621a      	str	r2, [r3, #32]
}
 80089d6:	bf00      	nop
 80089d8:	371c      	adds	r7, #28
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b087      	sub	sp, #28
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	f023 0210 	bic.w	r2, r3, #16
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	031b      	lsls	r3, r3, #12
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	011b      	lsls	r3, r3, #4
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	621a      	str	r2, [r3, #32]
}
 8008a36:	bf00      	nop
 8008a38:	371c      	adds	r7, #28
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b085      	sub	sp, #20
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	f043 0307 	orr.w	r3, r3, #7
 8008a64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	609a      	str	r2, [r3, #8]
}
 8008a6c:	bf00      	nop
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
 8008a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	021a      	lsls	r2, r3, #8
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	431a      	orrs	r2, r3
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	609a      	str	r2, [r3, #8]
}
 8008aac:	bf00      	nop
 8008aae:	371c      	adds	r7, #28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f003 031f 	and.w	r3, r3, #31
 8008aca:	2201      	movs	r2, #1
 8008acc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6a1a      	ldr	r2, [r3, #32]
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	43db      	mvns	r3, r3
 8008ada:	401a      	ands	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6a1a      	ldr	r2, [r3, #32]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	f003 031f 	and.w	r3, r3, #31
 8008aea:	6879      	ldr	r1, [r7, #4]
 8008aec:	fa01 f303 	lsl.w	r3, r1, r3
 8008af0:	431a      	orrs	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	621a      	str	r2, [r3, #32]
}
 8008af6:	bf00      	nop
 8008af8:	371c      	adds	r7, #28
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
	...

08008b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d101      	bne.n	8008b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b18:	2302      	movs	r3, #2
 8008b1a:	e05a      	b.n	8008bd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2202      	movs	r2, #2
 8008b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a21      	ldr	r2, [pc, #132]	; (8008be0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d022      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b68:	d01d      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a1d      	ldr	r2, [pc, #116]	; (8008be4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d018      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a1b      	ldr	r2, [pc, #108]	; (8008be8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d013      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a1a      	ldr	r2, [pc, #104]	; (8008bec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d00e      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a18      	ldr	r2, [pc, #96]	; (8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d009      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a17      	ldr	r2, [pc, #92]	; (8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d004      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a15      	ldr	r2, [pc, #84]	; (8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d10c      	bne.n	8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	40010000 	.word	0x40010000
 8008be4:	40000400 	.word	0x40000400
 8008be8:	40000800 	.word	0x40000800
 8008bec:	40000c00 	.word	0x40000c00
 8008bf0:	40010400 	.word	0x40010400
 8008bf4:	40014000 	.word	0x40014000
 8008bf8:	40001800 	.word	0x40001800

08008bfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d101      	bne.n	8008c18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c14:	2302      	movs	r3, #2
 8008c16:	e03d      	b.n	8008c94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e03f      	b.n	8008d5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d106      	bne.n	8008cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7fc f952 	bl	8004f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2224      	movs	r2, #36	; 0x24
 8008cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68da      	ldr	r2, [r3, #12]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fddf 	bl	80098d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	691a      	ldr	r2, [r3, #16]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	695a      	ldr	r2, [r3, #20]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68da      	ldr	r2, [r3, #12]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2220      	movs	r2, #32
 8008d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b08a      	sub	sp, #40	; 0x28
 8008d66:	af02      	add	r7, sp, #8
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	603b      	str	r3, [r7, #0]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b20      	cmp	r3, #32
 8008d80:	d17c      	bne.n	8008e7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d002      	beq.n	8008d8e <HAL_UART_Transmit+0x2c>
 8008d88:	88fb      	ldrh	r3, [r7, #6]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e075      	b.n	8008e7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d101      	bne.n	8008da0 <HAL_UART_Transmit+0x3e>
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	e06e      	b.n	8008e7e <HAL_UART_Transmit+0x11c>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2221      	movs	r2, #33	; 0x21
 8008db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008db6:	f7fc fbf7 	bl	80055a8 <HAL_GetTick>
 8008dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	88fa      	ldrh	r2, [r7, #6]
 8008dc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	88fa      	ldrh	r2, [r7, #6]
 8008dc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dd0:	d108      	bne.n	8008de4 <HAL_UART_Transmit+0x82>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d104      	bne.n	8008de4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	61bb      	str	r3, [r7, #24]
 8008de2:	e003      	b.n	8008dec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008de8:	2300      	movs	r3, #0
 8008dea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008df4:	e02a      	b.n	8008e4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	2180      	movs	r1, #128	; 0x80
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 fb1f 	bl	8009444 <UART_WaitOnFlagUntilTimeout>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d001      	beq.n	8008e10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	e036      	b.n	8008e7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10b      	bne.n	8008e2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	3302      	adds	r3, #2
 8008e2a:	61bb      	str	r3, [r7, #24]
 8008e2c:	e007      	b.n	8008e3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	781a      	ldrb	r2, [r3, #0]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	3b01      	subs	r3, #1
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1cf      	bne.n	8008df6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	2140      	movs	r1, #64	; 0x40
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f000 faef 	bl	8009444 <UART_WaitOnFlagUntilTimeout>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e006      	b.n	8008e7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2220      	movs	r2, #32
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	e000      	b.n	8008e7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008e7c:	2302      	movs	r3, #2
  }
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3720      	adds	r7, #32
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b084      	sub	sp, #16
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	60f8      	str	r0, [r7, #12]
 8008e8e:	60b9      	str	r1, [r7, #8]
 8008e90:	4613      	mov	r3, r2
 8008e92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b20      	cmp	r3, #32
 8008e9e:	d11d      	bne.n	8008edc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d002      	beq.n	8008eac <HAL_UART_Receive_IT+0x26>
 8008ea6:	88fb      	ldrh	r3, [r7, #6]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d101      	bne.n	8008eb0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e016      	b.n	8008ede <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d101      	bne.n	8008ebe <HAL_UART_Receive_IT+0x38>
 8008eba:	2302      	movs	r3, #2
 8008ebc:	e00f      	b.n	8008ede <HAL_UART_Receive_IT+0x58>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008ecc:	88fb      	ldrh	r3, [r7, #6]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	68b9      	ldr	r1, [r7, #8]
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f000 fb24 	bl	8009520 <UART_Start_Receive_IT>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	e000      	b.n	8008ede <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008edc:	2302      	movs	r3, #2
  }
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
	...

08008ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b0ba      	sub	sp, #232	; 0xe8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f1e:	f003 030f 	and.w	r3, r3, #15
 8008f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10f      	bne.n	8008f4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f32:	f003 0320 	and.w	r3, r3, #32
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d009      	beq.n	8008f4e <HAL_UART_IRQHandler+0x66>
 8008f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f3e:	f003 0320 	and.w	r3, r3, #32
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fc07 	bl	800975a <UART_Receive_IT>
      return;
 8008f4c:	e256      	b.n	80093fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 80de 	beq.w	8009114 <HAL_UART_IRQHandler+0x22c>
 8008f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d106      	bne.n	8008f72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 80d1 	beq.w	8009114 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00b      	beq.n	8008f96 <HAL_UART_IRQHandler+0xae>
 8008f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d005      	beq.n	8008f96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	f043 0201 	orr.w	r2, r3, #1
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f9a:	f003 0304 	and.w	r3, r3, #4
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00b      	beq.n	8008fba <HAL_UART_IRQHandler+0xd2>
 8008fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d005      	beq.n	8008fba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb2:	f043 0202 	orr.w	r2, r3, #2
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fbe:	f003 0302 	and.w	r3, r3, #2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00b      	beq.n	8008fde <HAL_UART_IRQHandler+0xf6>
 8008fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	f043 0204 	orr.w	r2, r3, #4
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe2:	f003 0308 	and.w	r3, r3, #8
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d011      	beq.n	800900e <HAL_UART_IRQHandler+0x126>
 8008fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fee:	f003 0320 	and.w	r3, r3, #32
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d105      	bne.n	8009002 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d005      	beq.n	800900e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009006:	f043 0208 	orr.w	r2, r3, #8
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 81ed 	beq.w	80093f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800901c:	f003 0320 	and.w	r3, r3, #32
 8009020:	2b00      	cmp	r3, #0
 8009022:	d008      	beq.n	8009036 <HAL_UART_IRQHandler+0x14e>
 8009024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b00      	cmp	r3, #0
 800902e:	d002      	beq.n	8009036 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fb92 	bl	800975a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009040:	2b40      	cmp	r3, #64	; 0x40
 8009042:	bf0c      	ite	eq
 8009044:	2301      	moveq	r3, #1
 8009046:	2300      	movne	r3, #0
 8009048:	b2db      	uxtb	r3, r3
 800904a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009052:	f003 0308 	and.w	r3, r3, #8
 8009056:	2b00      	cmp	r3, #0
 8009058:	d103      	bne.n	8009062 <HAL_UART_IRQHandler+0x17a>
 800905a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800905e:	2b00      	cmp	r3, #0
 8009060:	d04f      	beq.n	8009102 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fa9a 	bl	800959c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009072:	2b40      	cmp	r3, #64	; 0x40
 8009074:	d141      	bne.n	80090fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3314      	adds	r3, #20
 800907c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009084:	e853 3f00 	ldrex	r3, [r3]
 8009088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800908c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3314      	adds	r3, #20
 800909e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80090a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80090a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090b2:	e841 2300 	strex	r3, r2, [r1]
 80090b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80090ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1d9      	bne.n	8009076 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d013      	beq.n	80090f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	4a7d      	ldr	r2, [pc, #500]	; (80092c4 <HAL_UART_IRQHandler+0x3dc>)
 80090d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fd f90c 	bl	80062f4 <HAL_DMA_Abort_IT>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d016      	beq.n	8009110 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80090ec:	4610      	mov	r0, r2
 80090ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f0:	e00e      	b.n	8009110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f990 	bl	8009418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f8:	e00a      	b.n	8009110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f98c 	bl	8009418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009100:	e006      	b.n	8009110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f988 	bl	8009418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800910e:	e170      	b.n	80093f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009110:	bf00      	nop
    return;
 8009112:	e16e      	b.n	80093f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009118:	2b01      	cmp	r3, #1
 800911a:	f040 814a 	bne.w	80093b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800911e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009122:	f003 0310 	and.w	r3, r3, #16
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 8143 	beq.w	80093b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800912c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009130:	f003 0310 	and.w	r3, r3, #16
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 813c 	beq.w	80093b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800913a:	2300      	movs	r3, #0
 800913c:	60bb      	str	r3, [r7, #8]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	60bb      	str	r3, [r7, #8]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	60bb      	str	r3, [r7, #8]
 800914e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915a:	2b40      	cmp	r3, #64	; 0x40
 800915c:	f040 80b4 	bne.w	80092c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800916c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 8140 	beq.w	80093f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800917a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800917e:	429a      	cmp	r2, r3
 8009180:	f080 8139 	bcs.w	80093f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800918a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009196:	f000 8088 	beq.w	80092aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	330c      	adds	r3, #12
 80091a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	330c      	adds	r3, #12
 80091c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80091c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80091ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091d6:	e841 2300 	strex	r3, r2, [r1]
 80091da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80091de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1d9      	bne.n	800919a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3314      	adds	r3, #20
 80091ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80091f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091f8:	f023 0301 	bic.w	r3, r3, #1
 80091fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3314      	adds	r3, #20
 8009206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800920a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800920e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009212:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800921c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e1      	bne.n	80091e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3314      	adds	r3, #20
 8009228:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3314      	adds	r3, #20
 8009242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009246:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009248:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800924c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800924e:	e841 2300 	strex	r3, r2, [r1]
 8009252:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1e3      	bne.n	8009222 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2220      	movs	r2, #32
 800925e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	330c      	adds	r3, #12
 800926e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009272:	e853 3f00 	ldrex	r3, [r3]
 8009276:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800927a:	f023 0310 	bic.w	r3, r3, #16
 800927e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	330c      	adds	r3, #12
 8009288:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800928c:	65ba      	str	r2, [r7, #88]	; 0x58
 800928e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009290:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009292:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009294:	e841 2300 	strex	r3, r2, [r1]
 8009298:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800929a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e3      	bne.n	8009268 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fc ffb5 	bl	8006214 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f8b6 	bl	800942c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092c0:	e099      	b.n	80093f6 <HAL_UART_IRQHandler+0x50e>
 80092c2:	bf00      	nop
 80092c4:	08009663 	.word	0x08009663
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092dc:	b29b      	uxth	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 808b 	beq.w	80093fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80092e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 8086 	beq.w	80093fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	330c      	adds	r3, #12
 80092f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009300:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009304:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	330c      	adds	r3, #12
 800930e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009312:	647a      	str	r2, [r7, #68]	; 0x44
 8009314:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009316:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009318:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1e3      	bne.n	80092ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3314      	adds	r3, #20
 800932c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	623b      	str	r3, [r7, #32]
   return(result);
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	f023 0301 	bic.w	r3, r3, #1
 800933c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3314      	adds	r3, #20
 8009346:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800934a:	633a      	str	r2, [r7, #48]	; 0x30
 800934c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e3      	bne.n	8009326 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2220      	movs	r2, #32
 8009362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	330c      	adds	r3, #12
 8009372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	e853 3f00 	ldrex	r3, [r3]
 800937a:	60fb      	str	r3, [r7, #12]
   return(result);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 0310 	bic.w	r3, r3, #16
 8009382:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	330c      	adds	r3, #12
 800938c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009390:	61fa      	str	r2, [r7, #28]
 8009392:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009394:	69b9      	ldr	r1, [r7, #24]
 8009396:	69fa      	ldr	r2, [r7, #28]
 8009398:	e841 2300 	strex	r3, r2, [r1]
 800939c:	617b      	str	r3, [r7, #20]
   return(result);
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e3      	bne.n	800936c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093a8:	4619      	mov	r1, r3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f83e 	bl	800942c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093b0:	e023      	b.n	80093fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d009      	beq.n	80093d2 <HAL_UART_IRQHandler+0x4ea>
 80093be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f95d 	bl	800968a <UART_Transmit_IT>
    return;
 80093d0:	e014      	b.n	80093fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00e      	beq.n	80093fc <HAL_UART_IRQHandler+0x514>
 80093de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d008      	beq.n	80093fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f99d 	bl	800972a <UART_EndTransmit_IT>
    return;
 80093f0:	e004      	b.n	80093fc <HAL_UART_IRQHandler+0x514>
    return;
 80093f2:	bf00      	nop
 80093f4:	e002      	b.n	80093fc <HAL_UART_IRQHandler+0x514>
      return;
 80093f6:	bf00      	nop
 80093f8:	e000      	b.n	80093fc <HAL_UART_IRQHandler+0x514>
      return;
 80093fa:	bf00      	nop
  }
}
 80093fc:	37e8      	adds	r7, #232	; 0xe8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop

08009404 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009438:	bf00      	nop
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b090      	sub	sp, #64	; 0x40
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	603b      	str	r3, [r7, #0]
 8009450:	4613      	mov	r3, r2
 8009452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009454:	e050      	b.n	80094f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945c:	d04c      	beq.n	80094f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800945e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009460:	2b00      	cmp	r3, #0
 8009462:	d007      	beq.n	8009474 <UART_WaitOnFlagUntilTimeout+0x30>
 8009464:	f7fc f8a0 	bl	80055a8 <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009470:	429a      	cmp	r2, r3
 8009472:	d241      	bcs.n	80094f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	330c      	adds	r3, #12
 800947a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947e:	e853 3f00 	ldrex	r3, [r3]
 8009482:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800948a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	330c      	adds	r3, #12
 8009492:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009494:	637a      	str	r2, [r7, #52]	; 0x34
 8009496:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009498:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800949a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800949c:	e841 2300 	strex	r3, r2, [r1]
 80094a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1e5      	bne.n	8009474 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3314      	adds	r3, #20
 80094ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	e853 3f00 	ldrex	r3, [r3]
 80094b6:	613b      	str	r3, [r7, #16]
   return(result);
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	f023 0301 	bic.w	r3, r3, #1
 80094be:	63bb      	str	r3, [r7, #56]	; 0x38
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3314      	adds	r3, #20
 80094c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094c8:	623a      	str	r2, [r7, #32]
 80094ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094cc:	69f9      	ldr	r1, [r7, #28]
 80094ce:	6a3a      	ldr	r2, [r7, #32]
 80094d0:	e841 2300 	strex	r3, r2, [r1]
 80094d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1e5      	bne.n	80094a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2220      	movs	r2, #32
 80094e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2220      	movs	r2, #32
 80094e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e00f      	b.n	8009518 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	4013      	ands	r3, r2
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	429a      	cmp	r2, r3
 8009506:	bf0c      	ite	eq
 8009508:	2301      	moveq	r3, #1
 800950a:	2300      	movne	r3, #0
 800950c:	b2db      	uxtb	r3, r3
 800950e:	461a      	mov	r2, r3
 8009510:	79fb      	ldrb	r3, [r7, #7]
 8009512:	429a      	cmp	r2, r3
 8009514:	d09f      	beq.n	8009456 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3740      	adds	r7, #64	; 0x40
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	4613      	mov	r3, r2
 800952c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	88fa      	ldrh	r2, [r7, #6]
 8009538:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	88fa      	ldrh	r2, [r7, #6]
 800953e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2222      	movs	r2, #34	; 0x22
 800954a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d007      	beq.n	800956e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68da      	ldr	r2, [r3, #12]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800956c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	695a      	ldr	r2, [r3, #20]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f042 0201 	orr.w	r2, r2, #1
 800957c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68da      	ldr	r2, [r3, #12]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f042 0220 	orr.w	r2, r2, #32
 800958c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3714      	adds	r7, #20
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800959c:	b480      	push	{r7}
 800959e:	b095      	sub	sp, #84	; 0x54
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	330c      	adds	r3, #12
 80095aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ae:	e853 3f00 	ldrex	r3, [r3]
 80095b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	330c      	adds	r3, #12
 80095c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095c4:	643a      	str	r2, [r7, #64]	; 0x40
 80095c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095cc:	e841 2300 	strex	r3, r2, [r1]
 80095d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1e5      	bne.n	80095a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3314      	adds	r3, #20
 80095de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e0:	6a3b      	ldr	r3, [r7, #32]
 80095e2:	e853 3f00 	ldrex	r3, [r3]
 80095e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	f023 0301 	bic.w	r3, r3, #1
 80095ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3314      	adds	r3, #20
 80095f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009600:	e841 2300 	strex	r3, r2, [r1]
 8009604:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1e5      	bne.n	80095d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009610:	2b01      	cmp	r3, #1
 8009612:	d119      	bne.n	8009648 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	330c      	adds	r3, #12
 800961a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	e853 3f00 	ldrex	r3, [r3]
 8009622:	60bb      	str	r3, [r7, #8]
   return(result);
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	f023 0310 	bic.w	r3, r3, #16
 800962a:	647b      	str	r3, [r7, #68]	; 0x44
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	330c      	adds	r3, #12
 8009632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009634:	61ba      	str	r2, [r7, #24]
 8009636:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009638:	6979      	ldr	r1, [r7, #20]
 800963a:	69ba      	ldr	r2, [r7, #24]
 800963c:	e841 2300 	strex	r3, r2, [r1]
 8009640:	613b      	str	r3, [r7, #16]
   return(result);
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1e5      	bne.n	8009614 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2220      	movs	r2, #32
 800964c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009656:	bf00      	nop
 8009658:	3754      	adds	r7, #84	; 0x54
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f7ff fecb 	bl	8009418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009682:	bf00      	nop
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800968a:	b480      	push	{r7}
 800968c:	b085      	sub	sp, #20
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b21      	cmp	r3, #33	; 0x21
 800969c:	d13e      	bne.n	800971c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096a6:	d114      	bne.n	80096d2 <UART_Transmit_IT+0x48>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d110      	bne.n	80096d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a1b      	ldr	r3, [r3, #32]
 80096b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	881b      	ldrh	r3, [r3, #0]
 80096ba:	461a      	mov	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a1b      	ldr	r3, [r3, #32]
 80096ca:	1c9a      	adds	r2, r3, #2
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	621a      	str	r2, [r3, #32]
 80096d0:	e008      	b.n	80096e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a1b      	ldr	r3, [r3, #32]
 80096d6:	1c59      	adds	r1, r3, #1
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	6211      	str	r1, [r2, #32]
 80096dc:	781a      	ldrb	r2, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	3b01      	subs	r3, #1
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	4619      	mov	r1, r3
 80096f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10f      	bne.n	8009718 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68da      	ldr	r2, [r3, #12]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009706:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68da      	ldr	r2, [r3, #12]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009716:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	e000      	b.n	800971e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800971c:	2302      	movs	r3, #2
  }
}
 800971e:	4618      	mov	r0, r3
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b082      	sub	sp, #8
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68da      	ldr	r2, [r3, #12]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009740:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2220      	movs	r2, #32
 8009746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7ff fe5a 	bl	8009404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b08c      	sub	sp, #48	; 0x30
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b22      	cmp	r3, #34	; 0x22
 800976c:	f040 80ab 	bne.w	80098c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009778:	d117      	bne.n	80097aa <UART_Receive_IT+0x50>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d113      	bne.n	80097aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009782:	2300      	movs	r3, #0
 8009784:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	b29b      	uxth	r3, r3
 8009794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009798:	b29a      	uxth	r2, r3
 800979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a2:	1c9a      	adds	r2, r3, #2
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	629a      	str	r2, [r3, #40]	; 0x28
 80097a8:	e026      	b.n	80097f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80097b0:	2300      	movs	r3, #0
 80097b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097bc:	d007      	beq.n	80097ce <UART_Receive_IT+0x74>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10a      	bne.n	80097dc <UART_Receive_IT+0x82>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d106      	bne.n	80097dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d8:	701a      	strb	r2, [r3, #0]
 80097da:	e008      	b.n	80097ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097e8:	b2da      	uxtb	r2, r3
 80097ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f2:	1c5a      	adds	r2, r3, #1
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	3b01      	subs	r3, #1
 8009800:	b29b      	uxth	r3, r3
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	4619      	mov	r1, r3
 8009806:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009808:	2b00      	cmp	r3, #0
 800980a:	d15a      	bne.n	80098c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68da      	ldr	r2, [r3, #12]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f022 0220 	bic.w	r2, r2, #32
 800981a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800982a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	695a      	ldr	r2, [r3, #20]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f022 0201 	bic.w	r2, r2, #1
 800983a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2220      	movs	r2, #32
 8009840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009848:	2b01      	cmp	r3, #1
 800984a:	d135      	bne.n	80098b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	330c      	adds	r3, #12
 8009858:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	e853 3f00 	ldrex	r3, [r3]
 8009860:	613b      	str	r3, [r7, #16]
   return(result);
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f023 0310 	bic.w	r3, r3, #16
 8009868:	627b      	str	r3, [r7, #36]	; 0x24
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	330c      	adds	r3, #12
 8009870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009872:	623a      	str	r2, [r7, #32]
 8009874:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009876:	69f9      	ldr	r1, [r7, #28]
 8009878:	6a3a      	ldr	r2, [r7, #32]
 800987a:	e841 2300 	strex	r3, r2, [r1]
 800987e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1e5      	bne.n	8009852 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0310 	and.w	r3, r3, #16
 8009890:	2b10      	cmp	r3, #16
 8009892:	d10a      	bne.n	80098aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009894:	2300      	movs	r3, #0
 8009896:	60fb      	str	r3, [r7, #12]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	60fb      	str	r3, [r7, #12]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	60fb      	str	r3, [r7, #12]
 80098a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098ae:	4619      	mov	r1, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7ff fdbb 	bl	800942c <HAL_UARTEx_RxEventCallback>
 80098b6:	e002      	b.n	80098be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7f9 fae9 	bl	8002e90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	e002      	b.n	80098c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	e000      	b.n	80098c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80098c6:	2302      	movs	r3, #2
  }
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3730      	adds	r7, #48	; 0x30
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098d4:	b0c0      	sub	sp, #256	; 0x100
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80098e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098ec:	68d9      	ldr	r1, [r3, #12]
 80098ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	ea40 0301 	orr.w	r3, r0, r1
 80098f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80098fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098fe:	689a      	ldr	r2, [r3, #8]
 8009900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	431a      	orrs	r2, r3
 8009908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	431a      	orrs	r2, r3
 8009910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	4313      	orrs	r3, r2
 8009918:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800991c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009928:	f021 010c 	bic.w	r1, r1, #12
 800992c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009936:	430b      	orrs	r3, r1
 8009938:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800993a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800994a:	6999      	ldr	r1, [r3, #24]
 800994c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	ea40 0301 	orr.w	r3, r0, r1
 8009956:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	4b8f      	ldr	r3, [pc, #572]	; (8009b9c <UART_SetConfig+0x2cc>)
 8009960:	429a      	cmp	r2, r3
 8009962:	d005      	beq.n	8009970 <UART_SetConfig+0xa0>
 8009964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	4b8d      	ldr	r3, [pc, #564]	; (8009ba0 <UART_SetConfig+0x2d0>)
 800996c:	429a      	cmp	r2, r3
 800996e:	d104      	bne.n	800997a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009970:	f7fe f8a0 	bl	8007ab4 <HAL_RCC_GetPCLK2Freq>
 8009974:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009978:	e003      	b.n	8009982 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800997a:	f7fe f887 	bl	8007a8c <HAL_RCC_GetPCLK1Freq>
 800997e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800998c:	f040 810c 	bne.w	8009ba8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009994:	2200      	movs	r2, #0
 8009996:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800999a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800999e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80099a2:	4622      	mov	r2, r4
 80099a4:	462b      	mov	r3, r5
 80099a6:	1891      	adds	r1, r2, r2
 80099a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80099aa:	415b      	adcs	r3, r3
 80099ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80099b2:	4621      	mov	r1, r4
 80099b4:	eb12 0801 	adds.w	r8, r2, r1
 80099b8:	4629      	mov	r1, r5
 80099ba:	eb43 0901 	adc.w	r9, r3, r1
 80099be:	f04f 0200 	mov.w	r2, #0
 80099c2:	f04f 0300 	mov.w	r3, #0
 80099c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80099ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80099ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80099d2:	4690      	mov	r8, r2
 80099d4:	4699      	mov	r9, r3
 80099d6:	4623      	mov	r3, r4
 80099d8:	eb18 0303 	adds.w	r3, r8, r3
 80099dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099e0:	462b      	mov	r3, r5
 80099e2:	eb49 0303 	adc.w	r3, r9, r3
 80099e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80099ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80099f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80099fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80099fe:	460b      	mov	r3, r1
 8009a00:	18db      	adds	r3, r3, r3
 8009a02:	653b      	str	r3, [r7, #80]	; 0x50
 8009a04:	4613      	mov	r3, r2
 8009a06:	eb42 0303 	adc.w	r3, r2, r3
 8009a0a:	657b      	str	r3, [r7, #84]	; 0x54
 8009a0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009a10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009a14:	f7f7 f948 	bl	8000ca8 <__aeabi_uldivmod>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4b61      	ldr	r3, [pc, #388]	; (8009ba4 <UART_SetConfig+0x2d4>)
 8009a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8009a22:	095b      	lsrs	r3, r3, #5
 8009a24:	011c      	lsls	r4, r3, #4
 8009a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009a34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009a38:	4642      	mov	r2, r8
 8009a3a:	464b      	mov	r3, r9
 8009a3c:	1891      	adds	r1, r2, r2
 8009a3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009a40:	415b      	adcs	r3, r3
 8009a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009a48:	4641      	mov	r1, r8
 8009a4a:	eb12 0a01 	adds.w	sl, r2, r1
 8009a4e:	4649      	mov	r1, r9
 8009a50:	eb43 0b01 	adc.w	fp, r3, r1
 8009a54:	f04f 0200 	mov.w	r2, #0
 8009a58:	f04f 0300 	mov.w	r3, #0
 8009a5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009a60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009a64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a68:	4692      	mov	sl, r2
 8009a6a:	469b      	mov	fp, r3
 8009a6c:	4643      	mov	r3, r8
 8009a6e:	eb1a 0303 	adds.w	r3, sl, r3
 8009a72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a76:	464b      	mov	r3, r9
 8009a78:	eb4b 0303 	adc.w	r3, fp, r3
 8009a7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009a90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009a94:	460b      	mov	r3, r1
 8009a96:	18db      	adds	r3, r3, r3
 8009a98:	643b      	str	r3, [r7, #64]	; 0x40
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	eb42 0303 	adc.w	r3, r2, r3
 8009aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8009aa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009aa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009aaa:	f7f7 f8fd 	bl	8000ca8 <__aeabi_uldivmod>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	4b3b      	ldr	r3, [pc, #236]	; (8009ba4 <UART_SetConfig+0x2d4>)
 8009ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8009aba:	095b      	lsrs	r3, r3, #5
 8009abc:	2264      	movs	r2, #100	; 0x64
 8009abe:	fb02 f303 	mul.w	r3, r2, r3
 8009ac2:	1acb      	subs	r3, r1, r3
 8009ac4:	00db      	lsls	r3, r3, #3
 8009ac6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009aca:	4b36      	ldr	r3, [pc, #216]	; (8009ba4 <UART_SetConfig+0x2d4>)
 8009acc:	fba3 2302 	umull	r2, r3, r3, r2
 8009ad0:	095b      	lsrs	r3, r3, #5
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ad8:	441c      	add	r4, r3
 8009ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ae4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009ae8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009aec:	4642      	mov	r2, r8
 8009aee:	464b      	mov	r3, r9
 8009af0:	1891      	adds	r1, r2, r2
 8009af2:	63b9      	str	r1, [r7, #56]	; 0x38
 8009af4:	415b      	adcs	r3, r3
 8009af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009af8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009afc:	4641      	mov	r1, r8
 8009afe:	1851      	adds	r1, r2, r1
 8009b00:	6339      	str	r1, [r7, #48]	; 0x30
 8009b02:	4649      	mov	r1, r9
 8009b04:	414b      	adcs	r3, r1
 8009b06:	637b      	str	r3, [r7, #52]	; 0x34
 8009b08:	f04f 0200 	mov.w	r2, #0
 8009b0c:	f04f 0300 	mov.w	r3, #0
 8009b10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009b14:	4659      	mov	r1, fp
 8009b16:	00cb      	lsls	r3, r1, #3
 8009b18:	4651      	mov	r1, sl
 8009b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b1e:	4651      	mov	r1, sl
 8009b20:	00ca      	lsls	r2, r1, #3
 8009b22:	4610      	mov	r0, r2
 8009b24:	4619      	mov	r1, r3
 8009b26:	4603      	mov	r3, r0
 8009b28:	4642      	mov	r2, r8
 8009b2a:	189b      	adds	r3, r3, r2
 8009b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b30:	464b      	mov	r3, r9
 8009b32:	460a      	mov	r2, r1
 8009b34:	eb42 0303 	adc.w	r3, r2, r3
 8009b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009b48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009b4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009b50:	460b      	mov	r3, r1
 8009b52:	18db      	adds	r3, r3, r3
 8009b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b56:	4613      	mov	r3, r2
 8009b58:	eb42 0303 	adc.w	r3, r2, r3
 8009b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009b66:	f7f7 f89f 	bl	8000ca8 <__aeabi_uldivmod>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4b0d      	ldr	r3, [pc, #52]	; (8009ba4 <UART_SetConfig+0x2d4>)
 8009b70:	fba3 1302 	umull	r1, r3, r3, r2
 8009b74:	095b      	lsrs	r3, r3, #5
 8009b76:	2164      	movs	r1, #100	; 0x64
 8009b78:	fb01 f303 	mul.w	r3, r1, r3
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	00db      	lsls	r3, r3, #3
 8009b80:	3332      	adds	r3, #50	; 0x32
 8009b82:	4a08      	ldr	r2, [pc, #32]	; (8009ba4 <UART_SetConfig+0x2d4>)
 8009b84:	fba2 2303 	umull	r2, r3, r2, r3
 8009b88:	095b      	lsrs	r3, r3, #5
 8009b8a:	f003 0207 	and.w	r2, r3, #7
 8009b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4422      	add	r2, r4
 8009b96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009b98:	e105      	b.n	8009da6 <UART_SetConfig+0x4d6>
 8009b9a:	bf00      	nop
 8009b9c:	40011000 	.word	0x40011000
 8009ba0:	40011400 	.word	0x40011400
 8009ba4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bac:	2200      	movs	r2, #0
 8009bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009bb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009bb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009bba:	4642      	mov	r2, r8
 8009bbc:	464b      	mov	r3, r9
 8009bbe:	1891      	adds	r1, r2, r2
 8009bc0:	6239      	str	r1, [r7, #32]
 8009bc2:	415b      	adcs	r3, r3
 8009bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8009bc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009bca:	4641      	mov	r1, r8
 8009bcc:	1854      	adds	r4, r2, r1
 8009bce:	4649      	mov	r1, r9
 8009bd0:	eb43 0501 	adc.w	r5, r3, r1
 8009bd4:	f04f 0200 	mov.w	r2, #0
 8009bd8:	f04f 0300 	mov.w	r3, #0
 8009bdc:	00eb      	lsls	r3, r5, #3
 8009bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009be2:	00e2      	lsls	r2, r4, #3
 8009be4:	4614      	mov	r4, r2
 8009be6:	461d      	mov	r5, r3
 8009be8:	4643      	mov	r3, r8
 8009bea:	18e3      	adds	r3, r4, r3
 8009bec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009bf0:	464b      	mov	r3, r9
 8009bf2:	eb45 0303 	adc.w	r3, r5, r3
 8009bf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009c0a:	f04f 0200 	mov.w	r2, #0
 8009c0e:	f04f 0300 	mov.w	r3, #0
 8009c12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009c16:	4629      	mov	r1, r5
 8009c18:	008b      	lsls	r3, r1, #2
 8009c1a:	4621      	mov	r1, r4
 8009c1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c20:	4621      	mov	r1, r4
 8009c22:	008a      	lsls	r2, r1, #2
 8009c24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009c28:	f7f7 f83e 	bl	8000ca8 <__aeabi_uldivmod>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4b60      	ldr	r3, [pc, #384]	; (8009db4 <UART_SetConfig+0x4e4>)
 8009c32:	fba3 2302 	umull	r2, r3, r3, r2
 8009c36:	095b      	lsrs	r3, r3, #5
 8009c38:	011c      	lsls	r4, r3, #4
 8009c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009c44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009c48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009c4c:	4642      	mov	r2, r8
 8009c4e:	464b      	mov	r3, r9
 8009c50:	1891      	adds	r1, r2, r2
 8009c52:	61b9      	str	r1, [r7, #24]
 8009c54:	415b      	adcs	r3, r3
 8009c56:	61fb      	str	r3, [r7, #28]
 8009c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c5c:	4641      	mov	r1, r8
 8009c5e:	1851      	adds	r1, r2, r1
 8009c60:	6139      	str	r1, [r7, #16]
 8009c62:	4649      	mov	r1, r9
 8009c64:	414b      	adcs	r3, r1
 8009c66:	617b      	str	r3, [r7, #20]
 8009c68:	f04f 0200 	mov.w	r2, #0
 8009c6c:	f04f 0300 	mov.w	r3, #0
 8009c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c74:	4659      	mov	r1, fp
 8009c76:	00cb      	lsls	r3, r1, #3
 8009c78:	4651      	mov	r1, sl
 8009c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c7e:	4651      	mov	r1, sl
 8009c80:	00ca      	lsls	r2, r1, #3
 8009c82:	4610      	mov	r0, r2
 8009c84:	4619      	mov	r1, r3
 8009c86:	4603      	mov	r3, r0
 8009c88:	4642      	mov	r2, r8
 8009c8a:	189b      	adds	r3, r3, r2
 8009c8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c90:	464b      	mov	r3, r9
 8009c92:	460a      	mov	r2, r1
 8009c94:	eb42 0303 	adc.w	r3, r2, r3
 8009c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ca6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009ca8:	f04f 0200 	mov.w	r2, #0
 8009cac:	f04f 0300 	mov.w	r3, #0
 8009cb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009cb4:	4649      	mov	r1, r9
 8009cb6:	008b      	lsls	r3, r1, #2
 8009cb8:	4641      	mov	r1, r8
 8009cba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cbe:	4641      	mov	r1, r8
 8009cc0:	008a      	lsls	r2, r1, #2
 8009cc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009cc6:	f7f6 ffef 	bl	8000ca8 <__aeabi_uldivmod>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	4b39      	ldr	r3, [pc, #228]	; (8009db4 <UART_SetConfig+0x4e4>)
 8009cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8009cd4:	095b      	lsrs	r3, r3, #5
 8009cd6:	2164      	movs	r1, #100	; 0x64
 8009cd8:	fb01 f303 	mul.w	r3, r1, r3
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	011b      	lsls	r3, r3, #4
 8009ce0:	3332      	adds	r3, #50	; 0x32
 8009ce2:	4a34      	ldr	r2, [pc, #208]	; (8009db4 <UART_SetConfig+0x4e4>)
 8009ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce8:	095b      	lsrs	r3, r3, #5
 8009cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cee:	441c      	add	r4, r3
 8009cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	673b      	str	r3, [r7, #112]	; 0x70
 8009cf8:	677a      	str	r2, [r7, #116]	; 0x74
 8009cfa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009cfe:	4642      	mov	r2, r8
 8009d00:	464b      	mov	r3, r9
 8009d02:	1891      	adds	r1, r2, r2
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	415b      	adcs	r3, r3
 8009d08:	60fb      	str	r3, [r7, #12]
 8009d0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d0e:	4641      	mov	r1, r8
 8009d10:	1851      	adds	r1, r2, r1
 8009d12:	6039      	str	r1, [r7, #0]
 8009d14:	4649      	mov	r1, r9
 8009d16:	414b      	adcs	r3, r1
 8009d18:	607b      	str	r3, [r7, #4]
 8009d1a:	f04f 0200 	mov.w	r2, #0
 8009d1e:	f04f 0300 	mov.w	r3, #0
 8009d22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009d26:	4659      	mov	r1, fp
 8009d28:	00cb      	lsls	r3, r1, #3
 8009d2a:	4651      	mov	r1, sl
 8009d2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d30:	4651      	mov	r1, sl
 8009d32:	00ca      	lsls	r2, r1, #3
 8009d34:	4610      	mov	r0, r2
 8009d36:	4619      	mov	r1, r3
 8009d38:	4603      	mov	r3, r0
 8009d3a:	4642      	mov	r2, r8
 8009d3c:	189b      	adds	r3, r3, r2
 8009d3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d40:	464b      	mov	r3, r9
 8009d42:	460a      	mov	r2, r1
 8009d44:	eb42 0303 	adc.w	r3, r2, r3
 8009d48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	663b      	str	r3, [r7, #96]	; 0x60
 8009d54:	667a      	str	r2, [r7, #100]	; 0x64
 8009d56:	f04f 0200 	mov.w	r2, #0
 8009d5a:	f04f 0300 	mov.w	r3, #0
 8009d5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009d62:	4649      	mov	r1, r9
 8009d64:	008b      	lsls	r3, r1, #2
 8009d66:	4641      	mov	r1, r8
 8009d68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d6c:	4641      	mov	r1, r8
 8009d6e:	008a      	lsls	r2, r1, #2
 8009d70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009d74:	f7f6 ff98 	bl	8000ca8 <__aeabi_uldivmod>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4b0d      	ldr	r3, [pc, #52]	; (8009db4 <UART_SetConfig+0x4e4>)
 8009d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8009d82:	095b      	lsrs	r3, r3, #5
 8009d84:	2164      	movs	r1, #100	; 0x64
 8009d86:	fb01 f303 	mul.w	r3, r1, r3
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	011b      	lsls	r3, r3, #4
 8009d8e:	3332      	adds	r3, #50	; 0x32
 8009d90:	4a08      	ldr	r2, [pc, #32]	; (8009db4 <UART_SetConfig+0x4e4>)
 8009d92:	fba2 2303 	umull	r2, r3, r2, r3
 8009d96:	095b      	lsrs	r3, r3, #5
 8009d98:	f003 020f 	and.w	r2, r3, #15
 8009d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4422      	add	r2, r4
 8009da4:	609a      	str	r2, [r3, #8]
}
 8009da6:	bf00      	nop
 8009da8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009dac:	46bd      	mov	sp, r7
 8009dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009db2:	bf00      	nop
 8009db4:	51eb851f 	.word	0x51eb851f

08009db8 <__assert_func>:
 8009db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009dba:	4614      	mov	r4, r2
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	4b09      	ldr	r3, [pc, #36]	; (8009de4 <__assert_func+0x2c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	68d8      	ldr	r0, [r3, #12]
 8009dc6:	b14c      	cbz	r4, 8009ddc <__assert_func+0x24>
 8009dc8:	4b07      	ldr	r3, [pc, #28]	; (8009de8 <__assert_func+0x30>)
 8009dca:	9100      	str	r1, [sp, #0]
 8009dcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009dd0:	4906      	ldr	r1, [pc, #24]	; (8009dec <__assert_func+0x34>)
 8009dd2:	462b      	mov	r3, r5
 8009dd4:	f000 f814 	bl	8009e00 <fiprintf>
 8009dd8:	f002 f9cc 	bl	800c174 <abort>
 8009ddc:	4b04      	ldr	r3, [pc, #16]	; (8009df0 <__assert_func+0x38>)
 8009dde:	461c      	mov	r4, r3
 8009de0:	e7f3      	b.n	8009dca <__assert_func+0x12>
 8009de2:	bf00      	nop
 8009de4:	20000f70 	.word	0x20000f70
 8009de8:	0800f368 	.word	0x0800f368
 8009dec:	0800f375 	.word	0x0800f375
 8009df0:	0800f3a3 	.word	0x0800f3a3

08009df4 <__errno>:
 8009df4:	4b01      	ldr	r3, [pc, #4]	; (8009dfc <__errno+0x8>)
 8009df6:	6818      	ldr	r0, [r3, #0]
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	20000f70 	.word	0x20000f70

08009e00 <fiprintf>:
 8009e00:	b40e      	push	{r1, r2, r3}
 8009e02:	b503      	push	{r0, r1, lr}
 8009e04:	4601      	mov	r1, r0
 8009e06:	ab03      	add	r3, sp, #12
 8009e08:	4805      	ldr	r0, [pc, #20]	; (8009e20 <fiprintf+0x20>)
 8009e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e0e:	6800      	ldr	r0, [r0, #0]
 8009e10:	9301      	str	r3, [sp, #4]
 8009e12:	f000 f94d 	bl	800a0b0 <_vfiprintf_r>
 8009e16:	b002      	add	sp, #8
 8009e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e1c:	b003      	add	sp, #12
 8009e1e:	4770      	bx	lr
 8009e20:	20000f70 	.word	0x20000f70

08009e24 <__libc_init_array>:
 8009e24:	b570      	push	{r4, r5, r6, lr}
 8009e26:	4d0d      	ldr	r5, [pc, #52]	; (8009e5c <__libc_init_array+0x38>)
 8009e28:	4c0d      	ldr	r4, [pc, #52]	; (8009e60 <__libc_init_array+0x3c>)
 8009e2a:	1b64      	subs	r4, r4, r5
 8009e2c:	10a4      	asrs	r4, r4, #2
 8009e2e:	2600      	movs	r6, #0
 8009e30:	42a6      	cmp	r6, r4
 8009e32:	d109      	bne.n	8009e48 <__libc_init_array+0x24>
 8009e34:	4d0b      	ldr	r5, [pc, #44]	; (8009e64 <__libc_init_array+0x40>)
 8009e36:	4c0c      	ldr	r4, [pc, #48]	; (8009e68 <__libc_init_array+0x44>)
 8009e38:	f005 f97c 	bl	800f134 <_init>
 8009e3c:	1b64      	subs	r4, r4, r5
 8009e3e:	10a4      	asrs	r4, r4, #2
 8009e40:	2600      	movs	r6, #0
 8009e42:	42a6      	cmp	r6, r4
 8009e44:	d105      	bne.n	8009e52 <__libc_init_array+0x2e>
 8009e46:	bd70      	pop	{r4, r5, r6, pc}
 8009e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e4c:	4798      	blx	r3
 8009e4e:	3601      	adds	r6, #1
 8009e50:	e7ee      	b.n	8009e30 <__libc_init_array+0xc>
 8009e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e56:	4798      	blx	r3
 8009e58:	3601      	adds	r6, #1
 8009e5a:	e7f2      	b.n	8009e42 <__libc_init_array+0x1e>
 8009e5c:	0800f888 	.word	0x0800f888
 8009e60:	0800f888 	.word	0x0800f888
 8009e64:	0800f888 	.word	0x0800f888
 8009e68:	0800f88c 	.word	0x0800f88c

08009e6c <malloc>:
 8009e6c:	4b02      	ldr	r3, [pc, #8]	; (8009e78 <malloc+0xc>)
 8009e6e:	4601      	mov	r1, r0
 8009e70:	6818      	ldr	r0, [r3, #0]
 8009e72:	f000 b87f 	b.w	8009f74 <_malloc_r>
 8009e76:	bf00      	nop
 8009e78:	20000f70 	.word	0x20000f70

08009e7c <free>:
 8009e7c:	4b02      	ldr	r3, [pc, #8]	; (8009e88 <free+0xc>)
 8009e7e:	4601      	mov	r1, r0
 8009e80:	6818      	ldr	r0, [r3, #0]
 8009e82:	f000 b80b 	b.w	8009e9c <_free_r>
 8009e86:	bf00      	nop
 8009e88:	20000f70 	.word	0x20000f70

08009e8c <memset>:
 8009e8c:	4402      	add	r2, r0
 8009e8e:	4603      	mov	r3, r0
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d100      	bne.n	8009e96 <memset+0xa>
 8009e94:	4770      	bx	lr
 8009e96:	f803 1b01 	strb.w	r1, [r3], #1
 8009e9a:	e7f9      	b.n	8009e90 <memset+0x4>

08009e9c <_free_r>:
 8009e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e9e:	2900      	cmp	r1, #0
 8009ea0:	d044      	beq.n	8009f2c <_free_r+0x90>
 8009ea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ea6:	9001      	str	r0, [sp, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f1a1 0404 	sub.w	r4, r1, #4
 8009eae:	bfb8      	it	lt
 8009eb0:	18e4      	addlt	r4, r4, r3
 8009eb2:	f003 fdd3 	bl	800da5c <__malloc_lock>
 8009eb6:	4a1e      	ldr	r2, [pc, #120]	; (8009f30 <_free_r+0x94>)
 8009eb8:	9801      	ldr	r0, [sp, #4]
 8009eba:	6813      	ldr	r3, [r2, #0]
 8009ebc:	b933      	cbnz	r3, 8009ecc <_free_r+0x30>
 8009ebe:	6063      	str	r3, [r4, #4]
 8009ec0:	6014      	str	r4, [r2, #0]
 8009ec2:	b003      	add	sp, #12
 8009ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ec8:	f003 bdce 	b.w	800da68 <__malloc_unlock>
 8009ecc:	42a3      	cmp	r3, r4
 8009ece:	d908      	bls.n	8009ee2 <_free_r+0x46>
 8009ed0:	6825      	ldr	r5, [r4, #0]
 8009ed2:	1961      	adds	r1, r4, r5
 8009ed4:	428b      	cmp	r3, r1
 8009ed6:	bf01      	itttt	eq
 8009ed8:	6819      	ldreq	r1, [r3, #0]
 8009eda:	685b      	ldreq	r3, [r3, #4]
 8009edc:	1949      	addeq	r1, r1, r5
 8009ede:	6021      	streq	r1, [r4, #0]
 8009ee0:	e7ed      	b.n	8009ebe <_free_r+0x22>
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	b10b      	cbz	r3, 8009eec <_free_r+0x50>
 8009ee8:	42a3      	cmp	r3, r4
 8009eea:	d9fa      	bls.n	8009ee2 <_free_r+0x46>
 8009eec:	6811      	ldr	r1, [r2, #0]
 8009eee:	1855      	adds	r5, r2, r1
 8009ef0:	42a5      	cmp	r5, r4
 8009ef2:	d10b      	bne.n	8009f0c <_free_r+0x70>
 8009ef4:	6824      	ldr	r4, [r4, #0]
 8009ef6:	4421      	add	r1, r4
 8009ef8:	1854      	adds	r4, r2, r1
 8009efa:	42a3      	cmp	r3, r4
 8009efc:	6011      	str	r1, [r2, #0]
 8009efe:	d1e0      	bne.n	8009ec2 <_free_r+0x26>
 8009f00:	681c      	ldr	r4, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	6053      	str	r3, [r2, #4]
 8009f06:	4421      	add	r1, r4
 8009f08:	6011      	str	r1, [r2, #0]
 8009f0a:	e7da      	b.n	8009ec2 <_free_r+0x26>
 8009f0c:	d902      	bls.n	8009f14 <_free_r+0x78>
 8009f0e:	230c      	movs	r3, #12
 8009f10:	6003      	str	r3, [r0, #0]
 8009f12:	e7d6      	b.n	8009ec2 <_free_r+0x26>
 8009f14:	6825      	ldr	r5, [r4, #0]
 8009f16:	1961      	adds	r1, r4, r5
 8009f18:	428b      	cmp	r3, r1
 8009f1a:	bf04      	itt	eq
 8009f1c:	6819      	ldreq	r1, [r3, #0]
 8009f1e:	685b      	ldreq	r3, [r3, #4]
 8009f20:	6063      	str	r3, [r4, #4]
 8009f22:	bf04      	itt	eq
 8009f24:	1949      	addeq	r1, r1, r5
 8009f26:	6021      	streq	r1, [r4, #0]
 8009f28:	6054      	str	r4, [r2, #4]
 8009f2a:	e7ca      	b.n	8009ec2 <_free_r+0x26>
 8009f2c:	b003      	add	sp, #12
 8009f2e:	bd30      	pop	{r4, r5, pc}
 8009f30:	20001c80 	.word	0x20001c80

08009f34 <sbrk_aligned>:
 8009f34:	b570      	push	{r4, r5, r6, lr}
 8009f36:	4e0e      	ldr	r6, [pc, #56]	; (8009f70 <sbrk_aligned+0x3c>)
 8009f38:	460c      	mov	r4, r1
 8009f3a:	6831      	ldr	r1, [r6, #0]
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	b911      	cbnz	r1, 8009f46 <sbrk_aligned+0x12>
 8009f40:	f001 f876 	bl	800b030 <_sbrk_r>
 8009f44:	6030      	str	r0, [r6, #0]
 8009f46:	4621      	mov	r1, r4
 8009f48:	4628      	mov	r0, r5
 8009f4a:	f001 f871 	bl	800b030 <_sbrk_r>
 8009f4e:	1c43      	adds	r3, r0, #1
 8009f50:	d00a      	beq.n	8009f68 <sbrk_aligned+0x34>
 8009f52:	1cc4      	adds	r4, r0, #3
 8009f54:	f024 0403 	bic.w	r4, r4, #3
 8009f58:	42a0      	cmp	r0, r4
 8009f5a:	d007      	beq.n	8009f6c <sbrk_aligned+0x38>
 8009f5c:	1a21      	subs	r1, r4, r0
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f001 f866 	bl	800b030 <_sbrk_r>
 8009f64:	3001      	adds	r0, #1
 8009f66:	d101      	bne.n	8009f6c <sbrk_aligned+0x38>
 8009f68:	f04f 34ff 	mov.w	r4, #4294967295
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	bd70      	pop	{r4, r5, r6, pc}
 8009f70:	20001c84 	.word	0x20001c84

08009f74 <_malloc_r>:
 8009f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f78:	1ccd      	adds	r5, r1, #3
 8009f7a:	f025 0503 	bic.w	r5, r5, #3
 8009f7e:	3508      	adds	r5, #8
 8009f80:	2d0c      	cmp	r5, #12
 8009f82:	bf38      	it	cc
 8009f84:	250c      	movcc	r5, #12
 8009f86:	2d00      	cmp	r5, #0
 8009f88:	4607      	mov	r7, r0
 8009f8a:	db01      	blt.n	8009f90 <_malloc_r+0x1c>
 8009f8c:	42a9      	cmp	r1, r5
 8009f8e:	d905      	bls.n	8009f9c <_malloc_r+0x28>
 8009f90:	230c      	movs	r3, #12
 8009f92:	603b      	str	r3, [r7, #0]
 8009f94:	2600      	movs	r6, #0
 8009f96:	4630      	mov	r0, r6
 8009f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f9c:	4e2e      	ldr	r6, [pc, #184]	; (800a058 <_malloc_r+0xe4>)
 8009f9e:	f003 fd5d 	bl	800da5c <__malloc_lock>
 8009fa2:	6833      	ldr	r3, [r6, #0]
 8009fa4:	461c      	mov	r4, r3
 8009fa6:	bb34      	cbnz	r4, 8009ff6 <_malloc_r+0x82>
 8009fa8:	4629      	mov	r1, r5
 8009faa:	4638      	mov	r0, r7
 8009fac:	f7ff ffc2 	bl	8009f34 <sbrk_aligned>
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	d14d      	bne.n	800a052 <_malloc_r+0xde>
 8009fb6:	6834      	ldr	r4, [r6, #0]
 8009fb8:	4626      	mov	r6, r4
 8009fba:	2e00      	cmp	r6, #0
 8009fbc:	d140      	bne.n	800a040 <_malloc_r+0xcc>
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	4631      	mov	r1, r6
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	eb04 0803 	add.w	r8, r4, r3
 8009fc8:	f001 f832 	bl	800b030 <_sbrk_r>
 8009fcc:	4580      	cmp	r8, r0
 8009fce:	d13a      	bne.n	800a046 <_malloc_r+0xd2>
 8009fd0:	6821      	ldr	r1, [r4, #0]
 8009fd2:	3503      	adds	r5, #3
 8009fd4:	1a6d      	subs	r5, r5, r1
 8009fd6:	f025 0503 	bic.w	r5, r5, #3
 8009fda:	3508      	adds	r5, #8
 8009fdc:	2d0c      	cmp	r5, #12
 8009fde:	bf38      	it	cc
 8009fe0:	250c      	movcc	r5, #12
 8009fe2:	4629      	mov	r1, r5
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	f7ff ffa5 	bl	8009f34 <sbrk_aligned>
 8009fea:	3001      	adds	r0, #1
 8009fec:	d02b      	beq.n	800a046 <_malloc_r+0xd2>
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	442b      	add	r3, r5
 8009ff2:	6023      	str	r3, [r4, #0]
 8009ff4:	e00e      	b.n	800a014 <_malloc_r+0xa0>
 8009ff6:	6822      	ldr	r2, [r4, #0]
 8009ff8:	1b52      	subs	r2, r2, r5
 8009ffa:	d41e      	bmi.n	800a03a <_malloc_r+0xc6>
 8009ffc:	2a0b      	cmp	r2, #11
 8009ffe:	d916      	bls.n	800a02e <_malloc_r+0xba>
 800a000:	1961      	adds	r1, r4, r5
 800a002:	42a3      	cmp	r3, r4
 800a004:	6025      	str	r5, [r4, #0]
 800a006:	bf18      	it	ne
 800a008:	6059      	strne	r1, [r3, #4]
 800a00a:	6863      	ldr	r3, [r4, #4]
 800a00c:	bf08      	it	eq
 800a00e:	6031      	streq	r1, [r6, #0]
 800a010:	5162      	str	r2, [r4, r5]
 800a012:	604b      	str	r3, [r1, #4]
 800a014:	4638      	mov	r0, r7
 800a016:	f104 060b 	add.w	r6, r4, #11
 800a01a:	f003 fd25 	bl	800da68 <__malloc_unlock>
 800a01e:	f026 0607 	bic.w	r6, r6, #7
 800a022:	1d23      	adds	r3, r4, #4
 800a024:	1af2      	subs	r2, r6, r3
 800a026:	d0b6      	beq.n	8009f96 <_malloc_r+0x22>
 800a028:	1b9b      	subs	r3, r3, r6
 800a02a:	50a3      	str	r3, [r4, r2]
 800a02c:	e7b3      	b.n	8009f96 <_malloc_r+0x22>
 800a02e:	6862      	ldr	r2, [r4, #4]
 800a030:	42a3      	cmp	r3, r4
 800a032:	bf0c      	ite	eq
 800a034:	6032      	streq	r2, [r6, #0]
 800a036:	605a      	strne	r2, [r3, #4]
 800a038:	e7ec      	b.n	800a014 <_malloc_r+0xa0>
 800a03a:	4623      	mov	r3, r4
 800a03c:	6864      	ldr	r4, [r4, #4]
 800a03e:	e7b2      	b.n	8009fa6 <_malloc_r+0x32>
 800a040:	4634      	mov	r4, r6
 800a042:	6876      	ldr	r6, [r6, #4]
 800a044:	e7b9      	b.n	8009fba <_malloc_r+0x46>
 800a046:	230c      	movs	r3, #12
 800a048:	603b      	str	r3, [r7, #0]
 800a04a:	4638      	mov	r0, r7
 800a04c:	f003 fd0c 	bl	800da68 <__malloc_unlock>
 800a050:	e7a1      	b.n	8009f96 <_malloc_r+0x22>
 800a052:	6025      	str	r5, [r4, #0]
 800a054:	e7de      	b.n	800a014 <_malloc_r+0xa0>
 800a056:	bf00      	nop
 800a058:	20001c80 	.word	0x20001c80

0800a05c <__sfputc_r>:
 800a05c:	6893      	ldr	r3, [r2, #8]
 800a05e:	3b01      	subs	r3, #1
 800a060:	2b00      	cmp	r3, #0
 800a062:	b410      	push	{r4}
 800a064:	6093      	str	r3, [r2, #8]
 800a066:	da08      	bge.n	800a07a <__sfputc_r+0x1e>
 800a068:	6994      	ldr	r4, [r2, #24]
 800a06a:	42a3      	cmp	r3, r4
 800a06c:	db01      	blt.n	800a072 <__sfputc_r+0x16>
 800a06e:	290a      	cmp	r1, #10
 800a070:	d103      	bne.n	800a07a <__sfputc_r+0x1e>
 800a072:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a076:	f001 bfab 	b.w	800bfd0 <__swbuf_r>
 800a07a:	6813      	ldr	r3, [r2, #0]
 800a07c:	1c58      	adds	r0, r3, #1
 800a07e:	6010      	str	r0, [r2, #0]
 800a080:	7019      	strb	r1, [r3, #0]
 800a082:	4608      	mov	r0, r1
 800a084:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <__sfputs_r>:
 800a08a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08c:	4606      	mov	r6, r0
 800a08e:	460f      	mov	r7, r1
 800a090:	4614      	mov	r4, r2
 800a092:	18d5      	adds	r5, r2, r3
 800a094:	42ac      	cmp	r4, r5
 800a096:	d101      	bne.n	800a09c <__sfputs_r+0x12>
 800a098:	2000      	movs	r0, #0
 800a09a:	e007      	b.n	800a0ac <__sfputs_r+0x22>
 800a09c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a0:	463a      	mov	r2, r7
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	f7ff ffda 	bl	800a05c <__sfputc_r>
 800a0a8:	1c43      	adds	r3, r0, #1
 800a0aa:	d1f3      	bne.n	800a094 <__sfputs_r+0xa>
 800a0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0b0 <_vfiprintf_r>:
 800a0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b4:	460d      	mov	r5, r1
 800a0b6:	b09d      	sub	sp, #116	; 0x74
 800a0b8:	4614      	mov	r4, r2
 800a0ba:	4698      	mov	r8, r3
 800a0bc:	4606      	mov	r6, r0
 800a0be:	b118      	cbz	r0, 800a0c8 <_vfiprintf_r+0x18>
 800a0c0:	6983      	ldr	r3, [r0, #24]
 800a0c2:	b90b      	cbnz	r3, 800a0c8 <_vfiprintf_r+0x18>
 800a0c4:	f003 f804 	bl	800d0d0 <__sinit>
 800a0c8:	4b89      	ldr	r3, [pc, #548]	; (800a2f0 <_vfiprintf_r+0x240>)
 800a0ca:	429d      	cmp	r5, r3
 800a0cc:	d11b      	bne.n	800a106 <_vfiprintf_r+0x56>
 800a0ce:	6875      	ldr	r5, [r6, #4]
 800a0d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0d2:	07d9      	lsls	r1, r3, #31
 800a0d4:	d405      	bmi.n	800a0e2 <_vfiprintf_r+0x32>
 800a0d6:	89ab      	ldrh	r3, [r5, #12]
 800a0d8:	059a      	lsls	r2, r3, #22
 800a0da:	d402      	bmi.n	800a0e2 <_vfiprintf_r+0x32>
 800a0dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0de:	f003 fc08 	bl	800d8f2 <__retarget_lock_acquire_recursive>
 800a0e2:	89ab      	ldrh	r3, [r5, #12]
 800a0e4:	071b      	lsls	r3, r3, #28
 800a0e6:	d501      	bpl.n	800a0ec <_vfiprintf_r+0x3c>
 800a0e8:	692b      	ldr	r3, [r5, #16]
 800a0ea:	b9eb      	cbnz	r3, 800a128 <_vfiprintf_r+0x78>
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f001 ffd2 	bl	800c098 <__swsetup_r>
 800a0f4:	b1c0      	cbz	r0, 800a128 <_vfiprintf_r+0x78>
 800a0f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0f8:	07dc      	lsls	r4, r3, #31
 800a0fa:	d50e      	bpl.n	800a11a <_vfiprintf_r+0x6a>
 800a0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a100:	b01d      	add	sp, #116	; 0x74
 800a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a106:	4b7b      	ldr	r3, [pc, #492]	; (800a2f4 <_vfiprintf_r+0x244>)
 800a108:	429d      	cmp	r5, r3
 800a10a:	d101      	bne.n	800a110 <_vfiprintf_r+0x60>
 800a10c:	68b5      	ldr	r5, [r6, #8]
 800a10e:	e7df      	b.n	800a0d0 <_vfiprintf_r+0x20>
 800a110:	4b79      	ldr	r3, [pc, #484]	; (800a2f8 <_vfiprintf_r+0x248>)
 800a112:	429d      	cmp	r5, r3
 800a114:	bf08      	it	eq
 800a116:	68f5      	ldreq	r5, [r6, #12]
 800a118:	e7da      	b.n	800a0d0 <_vfiprintf_r+0x20>
 800a11a:	89ab      	ldrh	r3, [r5, #12]
 800a11c:	0598      	lsls	r0, r3, #22
 800a11e:	d4ed      	bmi.n	800a0fc <_vfiprintf_r+0x4c>
 800a120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a122:	f003 fbe7 	bl	800d8f4 <__retarget_lock_release_recursive>
 800a126:	e7e9      	b.n	800a0fc <_vfiprintf_r+0x4c>
 800a128:	2300      	movs	r3, #0
 800a12a:	9309      	str	r3, [sp, #36]	; 0x24
 800a12c:	2320      	movs	r3, #32
 800a12e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a132:	f8cd 800c 	str.w	r8, [sp, #12]
 800a136:	2330      	movs	r3, #48	; 0x30
 800a138:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a2fc <_vfiprintf_r+0x24c>
 800a13c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a140:	f04f 0901 	mov.w	r9, #1
 800a144:	4623      	mov	r3, r4
 800a146:	469a      	mov	sl, r3
 800a148:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a14c:	b10a      	cbz	r2, 800a152 <_vfiprintf_r+0xa2>
 800a14e:	2a25      	cmp	r2, #37	; 0x25
 800a150:	d1f9      	bne.n	800a146 <_vfiprintf_r+0x96>
 800a152:	ebba 0b04 	subs.w	fp, sl, r4
 800a156:	d00b      	beq.n	800a170 <_vfiprintf_r+0xc0>
 800a158:	465b      	mov	r3, fp
 800a15a:	4622      	mov	r2, r4
 800a15c:	4629      	mov	r1, r5
 800a15e:	4630      	mov	r0, r6
 800a160:	f7ff ff93 	bl	800a08a <__sfputs_r>
 800a164:	3001      	adds	r0, #1
 800a166:	f000 80aa 	beq.w	800a2be <_vfiprintf_r+0x20e>
 800a16a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a16c:	445a      	add	r2, fp
 800a16e:	9209      	str	r2, [sp, #36]	; 0x24
 800a170:	f89a 3000 	ldrb.w	r3, [sl]
 800a174:	2b00      	cmp	r3, #0
 800a176:	f000 80a2 	beq.w	800a2be <_vfiprintf_r+0x20e>
 800a17a:	2300      	movs	r3, #0
 800a17c:	f04f 32ff 	mov.w	r2, #4294967295
 800a180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a184:	f10a 0a01 	add.w	sl, sl, #1
 800a188:	9304      	str	r3, [sp, #16]
 800a18a:	9307      	str	r3, [sp, #28]
 800a18c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a190:	931a      	str	r3, [sp, #104]	; 0x68
 800a192:	4654      	mov	r4, sl
 800a194:	2205      	movs	r2, #5
 800a196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a19a:	4858      	ldr	r0, [pc, #352]	; (800a2fc <_vfiprintf_r+0x24c>)
 800a19c:	f7f6 f830 	bl	8000200 <memchr>
 800a1a0:	9a04      	ldr	r2, [sp, #16]
 800a1a2:	b9d8      	cbnz	r0, 800a1dc <_vfiprintf_r+0x12c>
 800a1a4:	06d1      	lsls	r1, r2, #27
 800a1a6:	bf44      	itt	mi
 800a1a8:	2320      	movmi	r3, #32
 800a1aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ae:	0713      	lsls	r3, r2, #28
 800a1b0:	bf44      	itt	mi
 800a1b2:	232b      	movmi	r3, #43	; 0x2b
 800a1b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a1bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a1be:	d015      	beq.n	800a1ec <_vfiprintf_r+0x13c>
 800a1c0:	9a07      	ldr	r2, [sp, #28]
 800a1c2:	4654      	mov	r4, sl
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	f04f 0c0a 	mov.w	ip, #10
 800a1ca:	4621      	mov	r1, r4
 800a1cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1d0:	3b30      	subs	r3, #48	; 0x30
 800a1d2:	2b09      	cmp	r3, #9
 800a1d4:	d94e      	bls.n	800a274 <_vfiprintf_r+0x1c4>
 800a1d6:	b1b0      	cbz	r0, 800a206 <_vfiprintf_r+0x156>
 800a1d8:	9207      	str	r2, [sp, #28]
 800a1da:	e014      	b.n	800a206 <_vfiprintf_r+0x156>
 800a1dc:	eba0 0308 	sub.w	r3, r0, r8
 800a1e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	9304      	str	r3, [sp, #16]
 800a1e8:	46a2      	mov	sl, r4
 800a1ea:	e7d2      	b.n	800a192 <_vfiprintf_r+0xe2>
 800a1ec:	9b03      	ldr	r3, [sp, #12]
 800a1ee:	1d19      	adds	r1, r3, #4
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	9103      	str	r1, [sp, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	bfbb      	ittet	lt
 800a1f8:	425b      	neglt	r3, r3
 800a1fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a1fe:	9307      	strge	r3, [sp, #28]
 800a200:	9307      	strlt	r3, [sp, #28]
 800a202:	bfb8      	it	lt
 800a204:	9204      	strlt	r2, [sp, #16]
 800a206:	7823      	ldrb	r3, [r4, #0]
 800a208:	2b2e      	cmp	r3, #46	; 0x2e
 800a20a:	d10c      	bne.n	800a226 <_vfiprintf_r+0x176>
 800a20c:	7863      	ldrb	r3, [r4, #1]
 800a20e:	2b2a      	cmp	r3, #42	; 0x2a
 800a210:	d135      	bne.n	800a27e <_vfiprintf_r+0x1ce>
 800a212:	9b03      	ldr	r3, [sp, #12]
 800a214:	1d1a      	adds	r2, r3, #4
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	9203      	str	r2, [sp, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	bfb8      	it	lt
 800a21e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a222:	3402      	adds	r4, #2
 800a224:	9305      	str	r3, [sp, #20]
 800a226:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a30c <_vfiprintf_r+0x25c>
 800a22a:	7821      	ldrb	r1, [r4, #0]
 800a22c:	2203      	movs	r2, #3
 800a22e:	4650      	mov	r0, sl
 800a230:	f7f5 ffe6 	bl	8000200 <memchr>
 800a234:	b140      	cbz	r0, 800a248 <_vfiprintf_r+0x198>
 800a236:	2340      	movs	r3, #64	; 0x40
 800a238:	eba0 000a 	sub.w	r0, r0, sl
 800a23c:	fa03 f000 	lsl.w	r0, r3, r0
 800a240:	9b04      	ldr	r3, [sp, #16]
 800a242:	4303      	orrs	r3, r0
 800a244:	3401      	adds	r4, #1
 800a246:	9304      	str	r3, [sp, #16]
 800a248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a24c:	482c      	ldr	r0, [pc, #176]	; (800a300 <_vfiprintf_r+0x250>)
 800a24e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a252:	2206      	movs	r2, #6
 800a254:	f7f5 ffd4 	bl	8000200 <memchr>
 800a258:	2800      	cmp	r0, #0
 800a25a:	d03f      	beq.n	800a2dc <_vfiprintf_r+0x22c>
 800a25c:	4b29      	ldr	r3, [pc, #164]	; (800a304 <_vfiprintf_r+0x254>)
 800a25e:	bb1b      	cbnz	r3, 800a2a8 <_vfiprintf_r+0x1f8>
 800a260:	9b03      	ldr	r3, [sp, #12]
 800a262:	3307      	adds	r3, #7
 800a264:	f023 0307 	bic.w	r3, r3, #7
 800a268:	3308      	adds	r3, #8
 800a26a:	9303      	str	r3, [sp, #12]
 800a26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a26e:	443b      	add	r3, r7
 800a270:	9309      	str	r3, [sp, #36]	; 0x24
 800a272:	e767      	b.n	800a144 <_vfiprintf_r+0x94>
 800a274:	fb0c 3202 	mla	r2, ip, r2, r3
 800a278:	460c      	mov	r4, r1
 800a27a:	2001      	movs	r0, #1
 800a27c:	e7a5      	b.n	800a1ca <_vfiprintf_r+0x11a>
 800a27e:	2300      	movs	r3, #0
 800a280:	3401      	adds	r4, #1
 800a282:	9305      	str	r3, [sp, #20]
 800a284:	4619      	mov	r1, r3
 800a286:	f04f 0c0a 	mov.w	ip, #10
 800a28a:	4620      	mov	r0, r4
 800a28c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a290:	3a30      	subs	r2, #48	; 0x30
 800a292:	2a09      	cmp	r2, #9
 800a294:	d903      	bls.n	800a29e <_vfiprintf_r+0x1ee>
 800a296:	2b00      	cmp	r3, #0
 800a298:	d0c5      	beq.n	800a226 <_vfiprintf_r+0x176>
 800a29a:	9105      	str	r1, [sp, #20]
 800a29c:	e7c3      	b.n	800a226 <_vfiprintf_r+0x176>
 800a29e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e7f0      	b.n	800a28a <_vfiprintf_r+0x1da>
 800a2a8:	ab03      	add	r3, sp, #12
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	462a      	mov	r2, r5
 800a2ae:	4b16      	ldr	r3, [pc, #88]	; (800a308 <_vfiprintf_r+0x258>)
 800a2b0:	a904      	add	r1, sp, #16
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	f000 f8cc 	bl	800a450 <_printf_float>
 800a2b8:	4607      	mov	r7, r0
 800a2ba:	1c78      	adds	r0, r7, #1
 800a2bc:	d1d6      	bne.n	800a26c <_vfiprintf_r+0x1bc>
 800a2be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2c0:	07d9      	lsls	r1, r3, #31
 800a2c2:	d405      	bmi.n	800a2d0 <_vfiprintf_r+0x220>
 800a2c4:	89ab      	ldrh	r3, [r5, #12]
 800a2c6:	059a      	lsls	r2, r3, #22
 800a2c8:	d402      	bmi.n	800a2d0 <_vfiprintf_r+0x220>
 800a2ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2cc:	f003 fb12 	bl	800d8f4 <__retarget_lock_release_recursive>
 800a2d0:	89ab      	ldrh	r3, [r5, #12]
 800a2d2:	065b      	lsls	r3, r3, #25
 800a2d4:	f53f af12 	bmi.w	800a0fc <_vfiprintf_r+0x4c>
 800a2d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2da:	e711      	b.n	800a100 <_vfiprintf_r+0x50>
 800a2dc:	ab03      	add	r3, sp, #12
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	462a      	mov	r2, r5
 800a2e2:	4b09      	ldr	r3, [pc, #36]	; (800a308 <_vfiprintf_r+0x258>)
 800a2e4:	a904      	add	r1, sp, #16
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	f000 fb56 	bl	800a998 <_printf_i>
 800a2ec:	e7e4      	b.n	800a2b8 <_vfiprintf_r+0x208>
 800a2ee:	bf00      	nop
 800a2f0:	0800f650 	.word	0x0800f650
 800a2f4:	0800f670 	.word	0x0800f670
 800a2f8:	0800f630 	.word	0x0800f630
 800a2fc:	0800f3a8 	.word	0x0800f3a8
 800a300:	0800f3b2 	.word	0x0800f3b2
 800a304:	0800a451 	.word	0x0800a451
 800a308:	0800a08b 	.word	0x0800a08b
 800a30c:	0800f3ae 	.word	0x0800f3ae

0800a310 <__cvt>:
 800a310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a314:	ec55 4b10 	vmov	r4, r5, d0
 800a318:	2d00      	cmp	r5, #0
 800a31a:	460e      	mov	r6, r1
 800a31c:	4619      	mov	r1, r3
 800a31e:	462b      	mov	r3, r5
 800a320:	bfbb      	ittet	lt
 800a322:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a326:	461d      	movlt	r5, r3
 800a328:	2300      	movge	r3, #0
 800a32a:	232d      	movlt	r3, #45	; 0x2d
 800a32c:	700b      	strb	r3, [r1, #0]
 800a32e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a330:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a334:	4691      	mov	r9, r2
 800a336:	f023 0820 	bic.w	r8, r3, #32
 800a33a:	bfbc      	itt	lt
 800a33c:	4622      	movlt	r2, r4
 800a33e:	4614      	movlt	r4, r2
 800a340:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a344:	d005      	beq.n	800a352 <__cvt+0x42>
 800a346:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a34a:	d100      	bne.n	800a34e <__cvt+0x3e>
 800a34c:	3601      	adds	r6, #1
 800a34e:	2102      	movs	r1, #2
 800a350:	e000      	b.n	800a354 <__cvt+0x44>
 800a352:	2103      	movs	r1, #3
 800a354:	ab03      	add	r3, sp, #12
 800a356:	9301      	str	r3, [sp, #4]
 800a358:	ab02      	add	r3, sp, #8
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	ec45 4b10 	vmov	d0, r4, r5
 800a360:	4653      	mov	r3, sl
 800a362:	4632      	mov	r2, r6
 800a364:	f001 ffac 	bl	800c2c0 <_dtoa_r>
 800a368:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a36c:	4607      	mov	r7, r0
 800a36e:	d102      	bne.n	800a376 <__cvt+0x66>
 800a370:	f019 0f01 	tst.w	r9, #1
 800a374:	d022      	beq.n	800a3bc <__cvt+0xac>
 800a376:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a37a:	eb07 0906 	add.w	r9, r7, r6
 800a37e:	d110      	bne.n	800a3a2 <__cvt+0x92>
 800a380:	783b      	ldrb	r3, [r7, #0]
 800a382:	2b30      	cmp	r3, #48	; 0x30
 800a384:	d10a      	bne.n	800a39c <__cvt+0x8c>
 800a386:	2200      	movs	r2, #0
 800a388:	2300      	movs	r3, #0
 800a38a:	4620      	mov	r0, r4
 800a38c:	4629      	mov	r1, r5
 800a38e:	f7f6 fbab 	bl	8000ae8 <__aeabi_dcmpeq>
 800a392:	b918      	cbnz	r0, 800a39c <__cvt+0x8c>
 800a394:	f1c6 0601 	rsb	r6, r6, #1
 800a398:	f8ca 6000 	str.w	r6, [sl]
 800a39c:	f8da 3000 	ldr.w	r3, [sl]
 800a3a0:	4499      	add	r9, r3
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	f7f6 fb9d 	bl	8000ae8 <__aeabi_dcmpeq>
 800a3ae:	b108      	cbz	r0, 800a3b4 <__cvt+0xa4>
 800a3b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a3b4:	2230      	movs	r2, #48	; 0x30
 800a3b6:	9b03      	ldr	r3, [sp, #12]
 800a3b8:	454b      	cmp	r3, r9
 800a3ba:	d307      	bcc.n	800a3cc <__cvt+0xbc>
 800a3bc:	9b03      	ldr	r3, [sp, #12]
 800a3be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3c0:	1bdb      	subs	r3, r3, r7
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	6013      	str	r3, [r2, #0]
 800a3c6:	b004      	add	sp, #16
 800a3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3cc:	1c59      	adds	r1, r3, #1
 800a3ce:	9103      	str	r1, [sp, #12]
 800a3d0:	701a      	strb	r2, [r3, #0]
 800a3d2:	e7f0      	b.n	800a3b6 <__cvt+0xa6>

0800a3d4 <__exponent>:
 800a3d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2900      	cmp	r1, #0
 800a3da:	bfb8      	it	lt
 800a3dc:	4249      	neglt	r1, r1
 800a3de:	f803 2b02 	strb.w	r2, [r3], #2
 800a3e2:	bfb4      	ite	lt
 800a3e4:	222d      	movlt	r2, #45	; 0x2d
 800a3e6:	222b      	movge	r2, #43	; 0x2b
 800a3e8:	2909      	cmp	r1, #9
 800a3ea:	7042      	strb	r2, [r0, #1]
 800a3ec:	dd2a      	ble.n	800a444 <__exponent+0x70>
 800a3ee:	f10d 0407 	add.w	r4, sp, #7
 800a3f2:	46a4      	mov	ip, r4
 800a3f4:	270a      	movs	r7, #10
 800a3f6:	46a6      	mov	lr, r4
 800a3f8:	460a      	mov	r2, r1
 800a3fa:	fb91 f6f7 	sdiv	r6, r1, r7
 800a3fe:	fb07 1516 	mls	r5, r7, r6, r1
 800a402:	3530      	adds	r5, #48	; 0x30
 800a404:	2a63      	cmp	r2, #99	; 0x63
 800a406:	f104 34ff 	add.w	r4, r4, #4294967295
 800a40a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a40e:	4631      	mov	r1, r6
 800a410:	dcf1      	bgt.n	800a3f6 <__exponent+0x22>
 800a412:	3130      	adds	r1, #48	; 0x30
 800a414:	f1ae 0502 	sub.w	r5, lr, #2
 800a418:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a41c:	1c44      	adds	r4, r0, #1
 800a41e:	4629      	mov	r1, r5
 800a420:	4561      	cmp	r1, ip
 800a422:	d30a      	bcc.n	800a43a <__exponent+0x66>
 800a424:	f10d 0209 	add.w	r2, sp, #9
 800a428:	eba2 020e 	sub.w	r2, r2, lr
 800a42c:	4565      	cmp	r5, ip
 800a42e:	bf88      	it	hi
 800a430:	2200      	movhi	r2, #0
 800a432:	4413      	add	r3, r2
 800a434:	1a18      	subs	r0, r3, r0
 800a436:	b003      	add	sp, #12
 800a438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a43a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a43e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a442:	e7ed      	b.n	800a420 <__exponent+0x4c>
 800a444:	2330      	movs	r3, #48	; 0x30
 800a446:	3130      	adds	r1, #48	; 0x30
 800a448:	7083      	strb	r3, [r0, #2]
 800a44a:	70c1      	strb	r1, [r0, #3]
 800a44c:	1d03      	adds	r3, r0, #4
 800a44e:	e7f1      	b.n	800a434 <__exponent+0x60>

0800a450 <_printf_float>:
 800a450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a454:	ed2d 8b02 	vpush	{d8}
 800a458:	b08d      	sub	sp, #52	; 0x34
 800a45a:	460c      	mov	r4, r1
 800a45c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a460:	4616      	mov	r6, r2
 800a462:	461f      	mov	r7, r3
 800a464:	4605      	mov	r5, r0
 800a466:	f003 fa3f 	bl	800d8e8 <_localeconv_r>
 800a46a:	f8d0 a000 	ldr.w	sl, [r0]
 800a46e:	4650      	mov	r0, sl
 800a470:	f7f5 feb8 	bl	80001e4 <strlen>
 800a474:	2300      	movs	r3, #0
 800a476:	930a      	str	r3, [sp, #40]	; 0x28
 800a478:	6823      	ldr	r3, [r4, #0]
 800a47a:	9305      	str	r3, [sp, #20]
 800a47c:	f8d8 3000 	ldr.w	r3, [r8]
 800a480:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a484:	3307      	adds	r3, #7
 800a486:	f023 0307 	bic.w	r3, r3, #7
 800a48a:	f103 0208 	add.w	r2, r3, #8
 800a48e:	f8c8 2000 	str.w	r2, [r8]
 800a492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a496:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a49a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a49e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a4a2:	9307      	str	r3, [sp, #28]
 800a4a4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a4a8:	ee08 0a10 	vmov	s16, r0
 800a4ac:	4b9f      	ldr	r3, [pc, #636]	; (800a72c <_printf_float+0x2dc>)
 800a4ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4b6:	f7f6 fb49 	bl	8000b4c <__aeabi_dcmpun>
 800a4ba:	bb88      	cbnz	r0, 800a520 <_printf_float+0xd0>
 800a4bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4c0:	4b9a      	ldr	r3, [pc, #616]	; (800a72c <_printf_float+0x2dc>)
 800a4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c6:	f7f6 fb23 	bl	8000b10 <__aeabi_dcmple>
 800a4ca:	bb48      	cbnz	r0, 800a520 <_printf_float+0xd0>
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	4640      	mov	r0, r8
 800a4d2:	4649      	mov	r1, r9
 800a4d4:	f7f6 fb12 	bl	8000afc <__aeabi_dcmplt>
 800a4d8:	b110      	cbz	r0, 800a4e0 <_printf_float+0x90>
 800a4da:	232d      	movs	r3, #45	; 0x2d
 800a4dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4e0:	4b93      	ldr	r3, [pc, #588]	; (800a730 <_printf_float+0x2e0>)
 800a4e2:	4894      	ldr	r0, [pc, #592]	; (800a734 <_printf_float+0x2e4>)
 800a4e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a4e8:	bf94      	ite	ls
 800a4ea:	4698      	movls	r8, r3
 800a4ec:	4680      	movhi	r8, r0
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	6123      	str	r3, [r4, #16]
 800a4f2:	9b05      	ldr	r3, [sp, #20]
 800a4f4:	f023 0204 	bic.w	r2, r3, #4
 800a4f8:	6022      	str	r2, [r4, #0]
 800a4fa:	f04f 0900 	mov.w	r9, #0
 800a4fe:	9700      	str	r7, [sp, #0]
 800a500:	4633      	mov	r3, r6
 800a502:	aa0b      	add	r2, sp, #44	; 0x2c
 800a504:	4621      	mov	r1, r4
 800a506:	4628      	mov	r0, r5
 800a508:	f000 f9d8 	bl	800a8bc <_printf_common>
 800a50c:	3001      	adds	r0, #1
 800a50e:	f040 8090 	bne.w	800a632 <_printf_float+0x1e2>
 800a512:	f04f 30ff 	mov.w	r0, #4294967295
 800a516:	b00d      	add	sp, #52	; 0x34
 800a518:	ecbd 8b02 	vpop	{d8}
 800a51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a520:	4642      	mov	r2, r8
 800a522:	464b      	mov	r3, r9
 800a524:	4640      	mov	r0, r8
 800a526:	4649      	mov	r1, r9
 800a528:	f7f6 fb10 	bl	8000b4c <__aeabi_dcmpun>
 800a52c:	b140      	cbz	r0, 800a540 <_printf_float+0xf0>
 800a52e:	464b      	mov	r3, r9
 800a530:	2b00      	cmp	r3, #0
 800a532:	bfbc      	itt	lt
 800a534:	232d      	movlt	r3, #45	; 0x2d
 800a536:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a53a:	487f      	ldr	r0, [pc, #508]	; (800a738 <_printf_float+0x2e8>)
 800a53c:	4b7f      	ldr	r3, [pc, #508]	; (800a73c <_printf_float+0x2ec>)
 800a53e:	e7d1      	b.n	800a4e4 <_printf_float+0x94>
 800a540:	6863      	ldr	r3, [r4, #4]
 800a542:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a546:	9206      	str	r2, [sp, #24]
 800a548:	1c5a      	adds	r2, r3, #1
 800a54a:	d13f      	bne.n	800a5cc <_printf_float+0x17c>
 800a54c:	2306      	movs	r3, #6
 800a54e:	6063      	str	r3, [r4, #4]
 800a550:	9b05      	ldr	r3, [sp, #20]
 800a552:	6861      	ldr	r1, [r4, #4]
 800a554:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a558:	2300      	movs	r3, #0
 800a55a:	9303      	str	r3, [sp, #12]
 800a55c:	ab0a      	add	r3, sp, #40	; 0x28
 800a55e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a562:	ab09      	add	r3, sp, #36	; 0x24
 800a564:	ec49 8b10 	vmov	d0, r8, r9
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	6022      	str	r2, [r4, #0]
 800a56c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a570:	4628      	mov	r0, r5
 800a572:	f7ff fecd 	bl	800a310 <__cvt>
 800a576:	9b06      	ldr	r3, [sp, #24]
 800a578:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a57a:	2b47      	cmp	r3, #71	; 0x47
 800a57c:	4680      	mov	r8, r0
 800a57e:	d108      	bne.n	800a592 <_printf_float+0x142>
 800a580:	1cc8      	adds	r0, r1, #3
 800a582:	db02      	blt.n	800a58a <_printf_float+0x13a>
 800a584:	6863      	ldr	r3, [r4, #4]
 800a586:	4299      	cmp	r1, r3
 800a588:	dd41      	ble.n	800a60e <_printf_float+0x1be>
 800a58a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a58e:	fa5f fb8b 	uxtb.w	fp, fp
 800a592:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a596:	d820      	bhi.n	800a5da <_printf_float+0x18a>
 800a598:	3901      	subs	r1, #1
 800a59a:	465a      	mov	r2, fp
 800a59c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a5a0:	9109      	str	r1, [sp, #36]	; 0x24
 800a5a2:	f7ff ff17 	bl	800a3d4 <__exponent>
 800a5a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5a8:	1813      	adds	r3, r2, r0
 800a5aa:	2a01      	cmp	r2, #1
 800a5ac:	4681      	mov	r9, r0
 800a5ae:	6123      	str	r3, [r4, #16]
 800a5b0:	dc02      	bgt.n	800a5b8 <_printf_float+0x168>
 800a5b2:	6822      	ldr	r2, [r4, #0]
 800a5b4:	07d2      	lsls	r2, r2, #31
 800a5b6:	d501      	bpl.n	800a5bc <_printf_float+0x16c>
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	6123      	str	r3, [r4, #16]
 800a5bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d09c      	beq.n	800a4fe <_printf_float+0xae>
 800a5c4:	232d      	movs	r3, #45	; 0x2d
 800a5c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5ca:	e798      	b.n	800a4fe <_printf_float+0xae>
 800a5cc:	9a06      	ldr	r2, [sp, #24]
 800a5ce:	2a47      	cmp	r2, #71	; 0x47
 800a5d0:	d1be      	bne.n	800a550 <_printf_float+0x100>
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1bc      	bne.n	800a550 <_printf_float+0x100>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e7b9      	b.n	800a54e <_printf_float+0xfe>
 800a5da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a5de:	d118      	bne.n	800a612 <_printf_float+0x1c2>
 800a5e0:	2900      	cmp	r1, #0
 800a5e2:	6863      	ldr	r3, [r4, #4]
 800a5e4:	dd0b      	ble.n	800a5fe <_printf_float+0x1ae>
 800a5e6:	6121      	str	r1, [r4, #16]
 800a5e8:	b913      	cbnz	r3, 800a5f0 <_printf_float+0x1a0>
 800a5ea:	6822      	ldr	r2, [r4, #0]
 800a5ec:	07d0      	lsls	r0, r2, #31
 800a5ee:	d502      	bpl.n	800a5f6 <_printf_float+0x1a6>
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	440b      	add	r3, r1
 800a5f4:	6123      	str	r3, [r4, #16]
 800a5f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a5f8:	f04f 0900 	mov.w	r9, #0
 800a5fc:	e7de      	b.n	800a5bc <_printf_float+0x16c>
 800a5fe:	b913      	cbnz	r3, 800a606 <_printf_float+0x1b6>
 800a600:	6822      	ldr	r2, [r4, #0]
 800a602:	07d2      	lsls	r2, r2, #31
 800a604:	d501      	bpl.n	800a60a <_printf_float+0x1ba>
 800a606:	3302      	adds	r3, #2
 800a608:	e7f4      	b.n	800a5f4 <_printf_float+0x1a4>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e7f2      	b.n	800a5f4 <_printf_float+0x1a4>
 800a60e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a614:	4299      	cmp	r1, r3
 800a616:	db05      	blt.n	800a624 <_printf_float+0x1d4>
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	6121      	str	r1, [r4, #16]
 800a61c:	07d8      	lsls	r0, r3, #31
 800a61e:	d5ea      	bpl.n	800a5f6 <_printf_float+0x1a6>
 800a620:	1c4b      	adds	r3, r1, #1
 800a622:	e7e7      	b.n	800a5f4 <_printf_float+0x1a4>
 800a624:	2900      	cmp	r1, #0
 800a626:	bfd4      	ite	le
 800a628:	f1c1 0202 	rsble	r2, r1, #2
 800a62c:	2201      	movgt	r2, #1
 800a62e:	4413      	add	r3, r2
 800a630:	e7e0      	b.n	800a5f4 <_printf_float+0x1a4>
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	055a      	lsls	r2, r3, #21
 800a636:	d407      	bmi.n	800a648 <_printf_float+0x1f8>
 800a638:	6923      	ldr	r3, [r4, #16]
 800a63a:	4642      	mov	r2, r8
 800a63c:	4631      	mov	r1, r6
 800a63e:	4628      	mov	r0, r5
 800a640:	47b8      	blx	r7
 800a642:	3001      	adds	r0, #1
 800a644:	d12c      	bne.n	800a6a0 <_printf_float+0x250>
 800a646:	e764      	b.n	800a512 <_printf_float+0xc2>
 800a648:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a64c:	f240 80e0 	bls.w	800a810 <_printf_float+0x3c0>
 800a650:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a654:	2200      	movs	r2, #0
 800a656:	2300      	movs	r3, #0
 800a658:	f7f6 fa46 	bl	8000ae8 <__aeabi_dcmpeq>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d034      	beq.n	800a6ca <_printf_float+0x27a>
 800a660:	4a37      	ldr	r2, [pc, #220]	; (800a740 <_printf_float+0x2f0>)
 800a662:	2301      	movs	r3, #1
 800a664:	4631      	mov	r1, r6
 800a666:	4628      	mov	r0, r5
 800a668:	47b8      	blx	r7
 800a66a:	3001      	adds	r0, #1
 800a66c:	f43f af51 	beq.w	800a512 <_printf_float+0xc2>
 800a670:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a674:	429a      	cmp	r2, r3
 800a676:	db02      	blt.n	800a67e <_printf_float+0x22e>
 800a678:	6823      	ldr	r3, [r4, #0]
 800a67a:	07d8      	lsls	r0, r3, #31
 800a67c:	d510      	bpl.n	800a6a0 <_printf_float+0x250>
 800a67e:	ee18 3a10 	vmov	r3, s16
 800a682:	4652      	mov	r2, sl
 800a684:	4631      	mov	r1, r6
 800a686:	4628      	mov	r0, r5
 800a688:	47b8      	blx	r7
 800a68a:	3001      	adds	r0, #1
 800a68c:	f43f af41 	beq.w	800a512 <_printf_float+0xc2>
 800a690:	f04f 0800 	mov.w	r8, #0
 800a694:	f104 091a 	add.w	r9, r4, #26
 800a698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a69a:	3b01      	subs	r3, #1
 800a69c:	4543      	cmp	r3, r8
 800a69e:	dc09      	bgt.n	800a6b4 <_printf_float+0x264>
 800a6a0:	6823      	ldr	r3, [r4, #0]
 800a6a2:	079b      	lsls	r3, r3, #30
 800a6a4:	f100 8105 	bmi.w	800a8b2 <_printf_float+0x462>
 800a6a8:	68e0      	ldr	r0, [r4, #12]
 800a6aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6ac:	4298      	cmp	r0, r3
 800a6ae:	bfb8      	it	lt
 800a6b0:	4618      	movlt	r0, r3
 800a6b2:	e730      	b.n	800a516 <_printf_float+0xc6>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	464a      	mov	r2, r9
 800a6b8:	4631      	mov	r1, r6
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	47b8      	blx	r7
 800a6be:	3001      	adds	r0, #1
 800a6c0:	f43f af27 	beq.w	800a512 <_printf_float+0xc2>
 800a6c4:	f108 0801 	add.w	r8, r8, #1
 800a6c8:	e7e6      	b.n	800a698 <_printf_float+0x248>
 800a6ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	dc39      	bgt.n	800a744 <_printf_float+0x2f4>
 800a6d0:	4a1b      	ldr	r2, [pc, #108]	; (800a740 <_printf_float+0x2f0>)
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	4631      	mov	r1, r6
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	47b8      	blx	r7
 800a6da:	3001      	adds	r0, #1
 800a6dc:	f43f af19 	beq.w	800a512 <_printf_float+0xc2>
 800a6e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	d102      	bne.n	800a6ee <_printf_float+0x29e>
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	07d9      	lsls	r1, r3, #31
 800a6ec:	d5d8      	bpl.n	800a6a0 <_printf_float+0x250>
 800a6ee:	ee18 3a10 	vmov	r3, s16
 800a6f2:	4652      	mov	r2, sl
 800a6f4:	4631      	mov	r1, r6
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	47b8      	blx	r7
 800a6fa:	3001      	adds	r0, #1
 800a6fc:	f43f af09 	beq.w	800a512 <_printf_float+0xc2>
 800a700:	f04f 0900 	mov.w	r9, #0
 800a704:	f104 0a1a 	add.w	sl, r4, #26
 800a708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a70a:	425b      	negs	r3, r3
 800a70c:	454b      	cmp	r3, r9
 800a70e:	dc01      	bgt.n	800a714 <_printf_float+0x2c4>
 800a710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a712:	e792      	b.n	800a63a <_printf_float+0x1ea>
 800a714:	2301      	movs	r3, #1
 800a716:	4652      	mov	r2, sl
 800a718:	4631      	mov	r1, r6
 800a71a:	4628      	mov	r0, r5
 800a71c:	47b8      	blx	r7
 800a71e:	3001      	adds	r0, #1
 800a720:	f43f aef7 	beq.w	800a512 <_printf_float+0xc2>
 800a724:	f109 0901 	add.w	r9, r9, #1
 800a728:	e7ee      	b.n	800a708 <_printf_float+0x2b8>
 800a72a:	bf00      	nop
 800a72c:	7fefffff 	.word	0x7fefffff
 800a730:	0800f3b9 	.word	0x0800f3b9
 800a734:	0800f3bd 	.word	0x0800f3bd
 800a738:	0800f3c5 	.word	0x0800f3c5
 800a73c:	0800f3c1 	.word	0x0800f3c1
 800a740:	0800f868 	.word	0x0800f868
 800a744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a746:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a748:	429a      	cmp	r2, r3
 800a74a:	bfa8      	it	ge
 800a74c:	461a      	movge	r2, r3
 800a74e:	2a00      	cmp	r2, #0
 800a750:	4691      	mov	r9, r2
 800a752:	dc37      	bgt.n	800a7c4 <_printf_float+0x374>
 800a754:	f04f 0b00 	mov.w	fp, #0
 800a758:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a75c:	f104 021a 	add.w	r2, r4, #26
 800a760:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a762:	9305      	str	r3, [sp, #20]
 800a764:	eba3 0309 	sub.w	r3, r3, r9
 800a768:	455b      	cmp	r3, fp
 800a76a:	dc33      	bgt.n	800a7d4 <_printf_float+0x384>
 800a76c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a770:	429a      	cmp	r2, r3
 800a772:	db3b      	blt.n	800a7ec <_printf_float+0x39c>
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	07da      	lsls	r2, r3, #31
 800a778:	d438      	bmi.n	800a7ec <_printf_float+0x39c>
 800a77a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a77c:	9a05      	ldr	r2, [sp, #20]
 800a77e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a780:	1a9a      	subs	r2, r3, r2
 800a782:	eba3 0901 	sub.w	r9, r3, r1
 800a786:	4591      	cmp	r9, r2
 800a788:	bfa8      	it	ge
 800a78a:	4691      	movge	r9, r2
 800a78c:	f1b9 0f00 	cmp.w	r9, #0
 800a790:	dc35      	bgt.n	800a7fe <_printf_float+0x3ae>
 800a792:	f04f 0800 	mov.w	r8, #0
 800a796:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a79a:	f104 0a1a 	add.w	sl, r4, #26
 800a79e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7a2:	1a9b      	subs	r3, r3, r2
 800a7a4:	eba3 0309 	sub.w	r3, r3, r9
 800a7a8:	4543      	cmp	r3, r8
 800a7aa:	f77f af79 	ble.w	800a6a0 <_printf_float+0x250>
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	4652      	mov	r2, sl
 800a7b2:	4631      	mov	r1, r6
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	47b8      	blx	r7
 800a7b8:	3001      	adds	r0, #1
 800a7ba:	f43f aeaa 	beq.w	800a512 <_printf_float+0xc2>
 800a7be:	f108 0801 	add.w	r8, r8, #1
 800a7c2:	e7ec      	b.n	800a79e <_printf_float+0x34e>
 800a7c4:	4613      	mov	r3, r2
 800a7c6:	4631      	mov	r1, r6
 800a7c8:	4642      	mov	r2, r8
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	47b8      	blx	r7
 800a7ce:	3001      	adds	r0, #1
 800a7d0:	d1c0      	bne.n	800a754 <_printf_float+0x304>
 800a7d2:	e69e      	b.n	800a512 <_printf_float+0xc2>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	4631      	mov	r1, r6
 800a7d8:	4628      	mov	r0, r5
 800a7da:	9205      	str	r2, [sp, #20]
 800a7dc:	47b8      	blx	r7
 800a7de:	3001      	adds	r0, #1
 800a7e0:	f43f ae97 	beq.w	800a512 <_printf_float+0xc2>
 800a7e4:	9a05      	ldr	r2, [sp, #20]
 800a7e6:	f10b 0b01 	add.w	fp, fp, #1
 800a7ea:	e7b9      	b.n	800a760 <_printf_float+0x310>
 800a7ec:	ee18 3a10 	vmov	r3, s16
 800a7f0:	4652      	mov	r2, sl
 800a7f2:	4631      	mov	r1, r6
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	47b8      	blx	r7
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	d1be      	bne.n	800a77a <_printf_float+0x32a>
 800a7fc:	e689      	b.n	800a512 <_printf_float+0xc2>
 800a7fe:	9a05      	ldr	r2, [sp, #20]
 800a800:	464b      	mov	r3, r9
 800a802:	4442      	add	r2, r8
 800a804:	4631      	mov	r1, r6
 800a806:	4628      	mov	r0, r5
 800a808:	47b8      	blx	r7
 800a80a:	3001      	adds	r0, #1
 800a80c:	d1c1      	bne.n	800a792 <_printf_float+0x342>
 800a80e:	e680      	b.n	800a512 <_printf_float+0xc2>
 800a810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a812:	2a01      	cmp	r2, #1
 800a814:	dc01      	bgt.n	800a81a <_printf_float+0x3ca>
 800a816:	07db      	lsls	r3, r3, #31
 800a818:	d538      	bpl.n	800a88c <_printf_float+0x43c>
 800a81a:	2301      	movs	r3, #1
 800a81c:	4642      	mov	r2, r8
 800a81e:	4631      	mov	r1, r6
 800a820:	4628      	mov	r0, r5
 800a822:	47b8      	blx	r7
 800a824:	3001      	adds	r0, #1
 800a826:	f43f ae74 	beq.w	800a512 <_printf_float+0xc2>
 800a82a:	ee18 3a10 	vmov	r3, s16
 800a82e:	4652      	mov	r2, sl
 800a830:	4631      	mov	r1, r6
 800a832:	4628      	mov	r0, r5
 800a834:	47b8      	blx	r7
 800a836:	3001      	adds	r0, #1
 800a838:	f43f ae6b 	beq.w	800a512 <_printf_float+0xc2>
 800a83c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a840:	2200      	movs	r2, #0
 800a842:	2300      	movs	r3, #0
 800a844:	f7f6 f950 	bl	8000ae8 <__aeabi_dcmpeq>
 800a848:	b9d8      	cbnz	r0, 800a882 <_printf_float+0x432>
 800a84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a84c:	f108 0201 	add.w	r2, r8, #1
 800a850:	3b01      	subs	r3, #1
 800a852:	4631      	mov	r1, r6
 800a854:	4628      	mov	r0, r5
 800a856:	47b8      	blx	r7
 800a858:	3001      	adds	r0, #1
 800a85a:	d10e      	bne.n	800a87a <_printf_float+0x42a>
 800a85c:	e659      	b.n	800a512 <_printf_float+0xc2>
 800a85e:	2301      	movs	r3, #1
 800a860:	4652      	mov	r2, sl
 800a862:	4631      	mov	r1, r6
 800a864:	4628      	mov	r0, r5
 800a866:	47b8      	blx	r7
 800a868:	3001      	adds	r0, #1
 800a86a:	f43f ae52 	beq.w	800a512 <_printf_float+0xc2>
 800a86e:	f108 0801 	add.w	r8, r8, #1
 800a872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a874:	3b01      	subs	r3, #1
 800a876:	4543      	cmp	r3, r8
 800a878:	dcf1      	bgt.n	800a85e <_printf_float+0x40e>
 800a87a:	464b      	mov	r3, r9
 800a87c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a880:	e6dc      	b.n	800a63c <_printf_float+0x1ec>
 800a882:	f04f 0800 	mov.w	r8, #0
 800a886:	f104 0a1a 	add.w	sl, r4, #26
 800a88a:	e7f2      	b.n	800a872 <_printf_float+0x422>
 800a88c:	2301      	movs	r3, #1
 800a88e:	4642      	mov	r2, r8
 800a890:	e7df      	b.n	800a852 <_printf_float+0x402>
 800a892:	2301      	movs	r3, #1
 800a894:	464a      	mov	r2, r9
 800a896:	4631      	mov	r1, r6
 800a898:	4628      	mov	r0, r5
 800a89a:	47b8      	blx	r7
 800a89c:	3001      	adds	r0, #1
 800a89e:	f43f ae38 	beq.w	800a512 <_printf_float+0xc2>
 800a8a2:	f108 0801 	add.w	r8, r8, #1
 800a8a6:	68e3      	ldr	r3, [r4, #12]
 800a8a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8aa:	1a5b      	subs	r3, r3, r1
 800a8ac:	4543      	cmp	r3, r8
 800a8ae:	dcf0      	bgt.n	800a892 <_printf_float+0x442>
 800a8b0:	e6fa      	b.n	800a6a8 <_printf_float+0x258>
 800a8b2:	f04f 0800 	mov.w	r8, #0
 800a8b6:	f104 0919 	add.w	r9, r4, #25
 800a8ba:	e7f4      	b.n	800a8a6 <_printf_float+0x456>

0800a8bc <_printf_common>:
 800a8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c0:	4616      	mov	r6, r2
 800a8c2:	4699      	mov	r9, r3
 800a8c4:	688a      	ldr	r2, [r1, #8]
 800a8c6:	690b      	ldr	r3, [r1, #16]
 800a8c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	bfb8      	it	lt
 800a8d0:	4613      	movlt	r3, r2
 800a8d2:	6033      	str	r3, [r6, #0]
 800a8d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8d8:	4607      	mov	r7, r0
 800a8da:	460c      	mov	r4, r1
 800a8dc:	b10a      	cbz	r2, 800a8e2 <_printf_common+0x26>
 800a8de:	3301      	adds	r3, #1
 800a8e0:	6033      	str	r3, [r6, #0]
 800a8e2:	6823      	ldr	r3, [r4, #0]
 800a8e4:	0699      	lsls	r1, r3, #26
 800a8e6:	bf42      	ittt	mi
 800a8e8:	6833      	ldrmi	r3, [r6, #0]
 800a8ea:	3302      	addmi	r3, #2
 800a8ec:	6033      	strmi	r3, [r6, #0]
 800a8ee:	6825      	ldr	r5, [r4, #0]
 800a8f0:	f015 0506 	ands.w	r5, r5, #6
 800a8f4:	d106      	bne.n	800a904 <_printf_common+0x48>
 800a8f6:	f104 0a19 	add.w	sl, r4, #25
 800a8fa:	68e3      	ldr	r3, [r4, #12]
 800a8fc:	6832      	ldr	r2, [r6, #0]
 800a8fe:	1a9b      	subs	r3, r3, r2
 800a900:	42ab      	cmp	r3, r5
 800a902:	dc26      	bgt.n	800a952 <_printf_common+0x96>
 800a904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a908:	1e13      	subs	r3, r2, #0
 800a90a:	6822      	ldr	r2, [r4, #0]
 800a90c:	bf18      	it	ne
 800a90e:	2301      	movne	r3, #1
 800a910:	0692      	lsls	r2, r2, #26
 800a912:	d42b      	bmi.n	800a96c <_printf_common+0xb0>
 800a914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a918:	4649      	mov	r1, r9
 800a91a:	4638      	mov	r0, r7
 800a91c:	47c0      	blx	r8
 800a91e:	3001      	adds	r0, #1
 800a920:	d01e      	beq.n	800a960 <_printf_common+0xa4>
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	68e5      	ldr	r5, [r4, #12]
 800a926:	6832      	ldr	r2, [r6, #0]
 800a928:	f003 0306 	and.w	r3, r3, #6
 800a92c:	2b04      	cmp	r3, #4
 800a92e:	bf08      	it	eq
 800a930:	1aad      	subeq	r5, r5, r2
 800a932:	68a3      	ldr	r3, [r4, #8]
 800a934:	6922      	ldr	r2, [r4, #16]
 800a936:	bf0c      	ite	eq
 800a938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a93c:	2500      	movne	r5, #0
 800a93e:	4293      	cmp	r3, r2
 800a940:	bfc4      	itt	gt
 800a942:	1a9b      	subgt	r3, r3, r2
 800a944:	18ed      	addgt	r5, r5, r3
 800a946:	2600      	movs	r6, #0
 800a948:	341a      	adds	r4, #26
 800a94a:	42b5      	cmp	r5, r6
 800a94c:	d11a      	bne.n	800a984 <_printf_common+0xc8>
 800a94e:	2000      	movs	r0, #0
 800a950:	e008      	b.n	800a964 <_printf_common+0xa8>
 800a952:	2301      	movs	r3, #1
 800a954:	4652      	mov	r2, sl
 800a956:	4649      	mov	r1, r9
 800a958:	4638      	mov	r0, r7
 800a95a:	47c0      	blx	r8
 800a95c:	3001      	adds	r0, #1
 800a95e:	d103      	bne.n	800a968 <_printf_common+0xac>
 800a960:	f04f 30ff 	mov.w	r0, #4294967295
 800a964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a968:	3501      	adds	r5, #1
 800a96a:	e7c6      	b.n	800a8fa <_printf_common+0x3e>
 800a96c:	18e1      	adds	r1, r4, r3
 800a96e:	1c5a      	adds	r2, r3, #1
 800a970:	2030      	movs	r0, #48	; 0x30
 800a972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a976:	4422      	add	r2, r4
 800a978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a97c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a980:	3302      	adds	r3, #2
 800a982:	e7c7      	b.n	800a914 <_printf_common+0x58>
 800a984:	2301      	movs	r3, #1
 800a986:	4622      	mov	r2, r4
 800a988:	4649      	mov	r1, r9
 800a98a:	4638      	mov	r0, r7
 800a98c:	47c0      	blx	r8
 800a98e:	3001      	adds	r0, #1
 800a990:	d0e6      	beq.n	800a960 <_printf_common+0xa4>
 800a992:	3601      	adds	r6, #1
 800a994:	e7d9      	b.n	800a94a <_printf_common+0x8e>
	...

0800a998 <_printf_i>:
 800a998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a99c:	7e0f      	ldrb	r7, [r1, #24]
 800a99e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9a0:	2f78      	cmp	r7, #120	; 0x78
 800a9a2:	4691      	mov	r9, r2
 800a9a4:	4680      	mov	r8, r0
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	469a      	mov	sl, r3
 800a9aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9ae:	d807      	bhi.n	800a9c0 <_printf_i+0x28>
 800a9b0:	2f62      	cmp	r7, #98	; 0x62
 800a9b2:	d80a      	bhi.n	800a9ca <_printf_i+0x32>
 800a9b4:	2f00      	cmp	r7, #0
 800a9b6:	f000 80d8 	beq.w	800ab6a <_printf_i+0x1d2>
 800a9ba:	2f58      	cmp	r7, #88	; 0x58
 800a9bc:	f000 80a3 	beq.w	800ab06 <_printf_i+0x16e>
 800a9c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9c8:	e03a      	b.n	800aa40 <_printf_i+0xa8>
 800a9ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9ce:	2b15      	cmp	r3, #21
 800a9d0:	d8f6      	bhi.n	800a9c0 <_printf_i+0x28>
 800a9d2:	a101      	add	r1, pc, #4	; (adr r1, 800a9d8 <_printf_i+0x40>)
 800a9d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9d8:	0800aa31 	.word	0x0800aa31
 800a9dc:	0800aa45 	.word	0x0800aa45
 800a9e0:	0800a9c1 	.word	0x0800a9c1
 800a9e4:	0800a9c1 	.word	0x0800a9c1
 800a9e8:	0800a9c1 	.word	0x0800a9c1
 800a9ec:	0800a9c1 	.word	0x0800a9c1
 800a9f0:	0800aa45 	.word	0x0800aa45
 800a9f4:	0800a9c1 	.word	0x0800a9c1
 800a9f8:	0800a9c1 	.word	0x0800a9c1
 800a9fc:	0800a9c1 	.word	0x0800a9c1
 800aa00:	0800a9c1 	.word	0x0800a9c1
 800aa04:	0800ab51 	.word	0x0800ab51
 800aa08:	0800aa75 	.word	0x0800aa75
 800aa0c:	0800ab33 	.word	0x0800ab33
 800aa10:	0800a9c1 	.word	0x0800a9c1
 800aa14:	0800a9c1 	.word	0x0800a9c1
 800aa18:	0800ab73 	.word	0x0800ab73
 800aa1c:	0800a9c1 	.word	0x0800a9c1
 800aa20:	0800aa75 	.word	0x0800aa75
 800aa24:	0800a9c1 	.word	0x0800a9c1
 800aa28:	0800a9c1 	.word	0x0800a9c1
 800aa2c:	0800ab3b 	.word	0x0800ab3b
 800aa30:	682b      	ldr	r3, [r5, #0]
 800aa32:	1d1a      	adds	r2, r3, #4
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	602a      	str	r2, [r5, #0]
 800aa38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa40:	2301      	movs	r3, #1
 800aa42:	e0a3      	b.n	800ab8c <_printf_i+0x1f4>
 800aa44:	6820      	ldr	r0, [r4, #0]
 800aa46:	6829      	ldr	r1, [r5, #0]
 800aa48:	0606      	lsls	r6, r0, #24
 800aa4a:	f101 0304 	add.w	r3, r1, #4
 800aa4e:	d50a      	bpl.n	800aa66 <_printf_i+0xce>
 800aa50:	680e      	ldr	r6, [r1, #0]
 800aa52:	602b      	str	r3, [r5, #0]
 800aa54:	2e00      	cmp	r6, #0
 800aa56:	da03      	bge.n	800aa60 <_printf_i+0xc8>
 800aa58:	232d      	movs	r3, #45	; 0x2d
 800aa5a:	4276      	negs	r6, r6
 800aa5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa60:	485e      	ldr	r0, [pc, #376]	; (800abdc <_printf_i+0x244>)
 800aa62:	230a      	movs	r3, #10
 800aa64:	e019      	b.n	800aa9a <_printf_i+0x102>
 800aa66:	680e      	ldr	r6, [r1, #0]
 800aa68:	602b      	str	r3, [r5, #0]
 800aa6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aa6e:	bf18      	it	ne
 800aa70:	b236      	sxthne	r6, r6
 800aa72:	e7ef      	b.n	800aa54 <_printf_i+0xbc>
 800aa74:	682b      	ldr	r3, [r5, #0]
 800aa76:	6820      	ldr	r0, [r4, #0]
 800aa78:	1d19      	adds	r1, r3, #4
 800aa7a:	6029      	str	r1, [r5, #0]
 800aa7c:	0601      	lsls	r1, r0, #24
 800aa7e:	d501      	bpl.n	800aa84 <_printf_i+0xec>
 800aa80:	681e      	ldr	r6, [r3, #0]
 800aa82:	e002      	b.n	800aa8a <_printf_i+0xf2>
 800aa84:	0646      	lsls	r6, r0, #25
 800aa86:	d5fb      	bpl.n	800aa80 <_printf_i+0xe8>
 800aa88:	881e      	ldrh	r6, [r3, #0]
 800aa8a:	4854      	ldr	r0, [pc, #336]	; (800abdc <_printf_i+0x244>)
 800aa8c:	2f6f      	cmp	r7, #111	; 0x6f
 800aa8e:	bf0c      	ite	eq
 800aa90:	2308      	moveq	r3, #8
 800aa92:	230a      	movne	r3, #10
 800aa94:	2100      	movs	r1, #0
 800aa96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa9a:	6865      	ldr	r5, [r4, #4]
 800aa9c:	60a5      	str	r5, [r4, #8]
 800aa9e:	2d00      	cmp	r5, #0
 800aaa0:	bfa2      	ittt	ge
 800aaa2:	6821      	ldrge	r1, [r4, #0]
 800aaa4:	f021 0104 	bicge.w	r1, r1, #4
 800aaa8:	6021      	strge	r1, [r4, #0]
 800aaaa:	b90e      	cbnz	r6, 800aab0 <_printf_i+0x118>
 800aaac:	2d00      	cmp	r5, #0
 800aaae:	d04d      	beq.n	800ab4c <_printf_i+0x1b4>
 800aab0:	4615      	mov	r5, r2
 800aab2:	fbb6 f1f3 	udiv	r1, r6, r3
 800aab6:	fb03 6711 	mls	r7, r3, r1, r6
 800aaba:	5dc7      	ldrb	r7, [r0, r7]
 800aabc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aac0:	4637      	mov	r7, r6
 800aac2:	42bb      	cmp	r3, r7
 800aac4:	460e      	mov	r6, r1
 800aac6:	d9f4      	bls.n	800aab2 <_printf_i+0x11a>
 800aac8:	2b08      	cmp	r3, #8
 800aaca:	d10b      	bne.n	800aae4 <_printf_i+0x14c>
 800aacc:	6823      	ldr	r3, [r4, #0]
 800aace:	07de      	lsls	r6, r3, #31
 800aad0:	d508      	bpl.n	800aae4 <_printf_i+0x14c>
 800aad2:	6923      	ldr	r3, [r4, #16]
 800aad4:	6861      	ldr	r1, [r4, #4]
 800aad6:	4299      	cmp	r1, r3
 800aad8:	bfde      	ittt	le
 800aada:	2330      	movle	r3, #48	; 0x30
 800aadc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aae0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aae4:	1b52      	subs	r2, r2, r5
 800aae6:	6122      	str	r2, [r4, #16]
 800aae8:	f8cd a000 	str.w	sl, [sp]
 800aaec:	464b      	mov	r3, r9
 800aaee:	aa03      	add	r2, sp, #12
 800aaf0:	4621      	mov	r1, r4
 800aaf2:	4640      	mov	r0, r8
 800aaf4:	f7ff fee2 	bl	800a8bc <_printf_common>
 800aaf8:	3001      	adds	r0, #1
 800aafa:	d14c      	bne.n	800ab96 <_printf_i+0x1fe>
 800aafc:	f04f 30ff 	mov.w	r0, #4294967295
 800ab00:	b004      	add	sp, #16
 800ab02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab06:	4835      	ldr	r0, [pc, #212]	; (800abdc <_printf_i+0x244>)
 800ab08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab0c:	6829      	ldr	r1, [r5, #0]
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab14:	6029      	str	r1, [r5, #0]
 800ab16:	061d      	lsls	r5, r3, #24
 800ab18:	d514      	bpl.n	800ab44 <_printf_i+0x1ac>
 800ab1a:	07df      	lsls	r7, r3, #31
 800ab1c:	bf44      	itt	mi
 800ab1e:	f043 0320 	orrmi.w	r3, r3, #32
 800ab22:	6023      	strmi	r3, [r4, #0]
 800ab24:	b91e      	cbnz	r6, 800ab2e <_printf_i+0x196>
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	f023 0320 	bic.w	r3, r3, #32
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	2310      	movs	r3, #16
 800ab30:	e7b0      	b.n	800aa94 <_printf_i+0xfc>
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	f043 0320 	orr.w	r3, r3, #32
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	2378      	movs	r3, #120	; 0x78
 800ab3c:	4828      	ldr	r0, [pc, #160]	; (800abe0 <_printf_i+0x248>)
 800ab3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab42:	e7e3      	b.n	800ab0c <_printf_i+0x174>
 800ab44:	0659      	lsls	r1, r3, #25
 800ab46:	bf48      	it	mi
 800ab48:	b2b6      	uxthmi	r6, r6
 800ab4a:	e7e6      	b.n	800ab1a <_printf_i+0x182>
 800ab4c:	4615      	mov	r5, r2
 800ab4e:	e7bb      	b.n	800aac8 <_printf_i+0x130>
 800ab50:	682b      	ldr	r3, [r5, #0]
 800ab52:	6826      	ldr	r6, [r4, #0]
 800ab54:	6961      	ldr	r1, [r4, #20]
 800ab56:	1d18      	adds	r0, r3, #4
 800ab58:	6028      	str	r0, [r5, #0]
 800ab5a:	0635      	lsls	r5, r6, #24
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	d501      	bpl.n	800ab64 <_printf_i+0x1cc>
 800ab60:	6019      	str	r1, [r3, #0]
 800ab62:	e002      	b.n	800ab6a <_printf_i+0x1d2>
 800ab64:	0670      	lsls	r0, r6, #25
 800ab66:	d5fb      	bpl.n	800ab60 <_printf_i+0x1c8>
 800ab68:	8019      	strh	r1, [r3, #0]
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	6123      	str	r3, [r4, #16]
 800ab6e:	4615      	mov	r5, r2
 800ab70:	e7ba      	b.n	800aae8 <_printf_i+0x150>
 800ab72:	682b      	ldr	r3, [r5, #0]
 800ab74:	1d1a      	adds	r2, r3, #4
 800ab76:	602a      	str	r2, [r5, #0]
 800ab78:	681d      	ldr	r5, [r3, #0]
 800ab7a:	6862      	ldr	r2, [r4, #4]
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f7f5 fb3e 	bl	8000200 <memchr>
 800ab84:	b108      	cbz	r0, 800ab8a <_printf_i+0x1f2>
 800ab86:	1b40      	subs	r0, r0, r5
 800ab88:	6060      	str	r0, [r4, #4]
 800ab8a:	6863      	ldr	r3, [r4, #4]
 800ab8c:	6123      	str	r3, [r4, #16]
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab94:	e7a8      	b.n	800aae8 <_printf_i+0x150>
 800ab96:	6923      	ldr	r3, [r4, #16]
 800ab98:	462a      	mov	r2, r5
 800ab9a:	4649      	mov	r1, r9
 800ab9c:	4640      	mov	r0, r8
 800ab9e:	47d0      	blx	sl
 800aba0:	3001      	adds	r0, #1
 800aba2:	d0ab      	beq.n	800aafc <_printf_i+0x164>
 800aba4:	6823      	ldr	r3, [r4, #0]
 800aba6:	079b      	lsls	r3, r3, #30
 800aba8:	d413      	bmi.n	800abd2 <_printf_i+0x23a>
 800abaa:	68e0      	ldr	r0, [r4, #12]
 800abac:	9b03      	ldr	r3, [sp, #12]
 800abae:	4298      	cmp	r0, r3
 800abb0:	bfb8      	it	lt
 800abb2:	4618      	movlt	r0, r3
 800abb4:	e7a4      	b.n	800ab00 <_printf_i+0x168>
 800abb6:	2301      	movs	r3, #1
 800abb8:	4632      	mov	r2, r6
 800abba:	4649      	mov	r1, r9
 800abbc:	4640      	mov	r0, r8
 800abbe:	47d0      	blx	sl
 800abc0:	3001      	adds	r0, #1
 800abc2:	d09b      	beq.n	800aafc <_printf_i+0x164>
 800abc4:	3501      	adds	r5, #1
 800abc6:	68e3      	ldr	r3, [r4, #12]
 800abc8:	9903      	ldr	r1, [sp, #12]
 800abca:	1a5b      	subs	r3, r3, r1
 800abcc:	42ab      	cmp	r3, r5
 800abce:	dcf2      	bgt.n	800abb6 <_printf_i+0x21e>
 800abd0:	e7eb      	b.n	800abaa <_printf_i+0x212>
 800abd2:	2500      	movs	r5, #0
 800abd4:	f104 0619 	add.w	r6, r4, #25
 800abd8:	e7f5      	b.n	800abc6 <_printf_i+0x22e>
 800abda:	bf00      	nop
 800abdc:	0800f3c9 	.word	0x0800f3c9
 800abe0:	0800f3da 	.word	0x0800f3da

0800abe4 <_scanf_float>:
 800abe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe8:	b087      	sub	sp, #28
 800abea:	4617      	mov	r7, r2
 800abec:	9303      	str	r3, [sp, #12]
 800abee:	688b      	ldr	r3, [r1, #8]
 800abf0:	1e5a      	subs	r2, r3, #1
 800abf2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800abf6:	bf83      	ittte	hi
 800abf8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800abfc:	195b      	addhi	r3, r3, r5
 800abfe:	9302      	strhi	r3, [sp, #8]
 800ac00:	2300      	movls	r3, #0
 800ac02:	bf86      	itte	hi
 800ac04:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ac08:	608b      	strhi	r3, [r1, #8]
 800ac0a:	9302      	strls	r3, [sp, #8]
 800ac0c:	680b      	ldr	r3, [r1, #0]
 800ac0e:	468b      	mov	fp, r1
 800ac10:	2500      	movs	r5, #0
 800ac12:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ac16:	f84b 3b1c 	str.w	r3, [fp], #28
 800ac1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ac1e:	4680      	mov	r8, r0
 800ac20:	460c      	mov	r4, r1
 800ac22:	465e      	mov	r6, fp
 800ac24:	46aa      	mov	sl, r5
 800ac26:	46a9      	mov	r9, r5
 800ac28:	9501      	str	r5, [sp, #4]
 800ac2a:	68a2      	ldr	r2, [r4, #8]
 800ac2c:	b152      	cbz	r2, 800ac44 <_scanf_float+0x60>
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	2b4e      	cmp	r3, #78	; 0x4e
 800ac34:	d864      	bhi.n	800ad00 <_scanf_float+0x11c>
 800ac36:	2b40      	cmp	r3, #64	; 0x40
 800ac38:	d83c      	bhi.n	800acb4 <_scanf_float+0xd0>
 800ac3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ac3e:	b2c8      	uxtb	r0, r1
 800ac40:	280e      	cmp	r0, #14
 800ac42:	d93a      	bls.n	800acba <_scanf_float+0xd6>
 800ac44:	f1b9 0f00 	cmp.w	r9, #0
 800ac48:	d003      	beq.n	800ac52 <_scanf_float+0x6e>
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac50:	6023      	str	r3, [r4, #0]
 800ac52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac56:	f1ba 0f01 	cmp.w	sl, #1
 800ac5a:	f200 8113 	bhi.w	800ae84 <_scanf_float+0x2a0>
 800ac5e:	455e      	cmp	r6, fp
 800ac60:	f200 8105 	bhi.w	800ae6e <_scanf_float+0x28a>
 800ac64:	2501      	movs	r5, #1
 800ac66:	4628      	mov	r0, r5
 800ac68:	b007      	add	sp, #28
 800ac6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ac72:	2a0d      	cmp	r2, #13
 800ac74:	d8e6      	bhi.n	800ac44 <_scanf_float+0x60>
 800ac76:	a101      	add	r1, pc, #4	; (adr r1, 800ac7c <_scanf_float+0x98>)
 800ac78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ac7c:	0800adbb 	.word	0x0800adbb
 800ac80:	0800ac45 	.word	0x0800ac45
 800ac84:	0800ac45 	.word	0x0800ac45
 800ac88:	0800ac45 	.word	0x0800ac45
 800ac8c:	0800ae1b 	.word	0x0800ae1b
 800ac90:	0800adf3 	.word	0x0800adf3
 800ac94:	0800ac45 	.word	0x0800ac45
 800ac98:	0800ac45 	.word	0x0800ac45
 800ac9c:	0800adc9 	.word	0x0800adc9
 800aca0:	0800ac45 	.word	0x0800ac45
 800aca4:	0800ac45 	.word	0x0800ac45
 800aca8:	0800ac45 	.word	0x0800ac45
 800acac:	0800ac45 	.word	0x0800ac45
 800acb0:	0800ad81 	.word	0x0800ad81
 800acb4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800acb8:	e7db      	b.n	800ac72 <_scanf_float+0x8e>
 800acba:	290e      	cmp	r1, #14
 800acbc:	d8c2      	bhi.n	800ac44 <_scanf_float+0x60>
 800acbe:	a001      	add	r0, pc, #4	; (adr r0, 800acc4 <_scanf_float+0xe0>)
 800acc0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800acc4:	0800ad73 	.word	0x0800ad73
 800acc8:	0800ac45 	.word	0x0800ac45
 800accc:	0800ad73 	.word	0x0800ad73
 800acd0:	0800ae07 	.word	0x0800ae07
 800acd4:	0800ac45 	.word	0x0800ac45
 800acd8:	0800ad21 	.word	0x0800ad21
 800acdc:	0800ad5d 	.word	0x0800ad5d
 800ace0:	0800ad5d 	.word	0x0800ad5d
 800ace4:	0800ad5d 	.word	0x0800ad5d
 800ace8:	0800ad5d 	.word	0x0800ad5d
 800acec:	0800ad5d 	.word	0x0800ad5d
 800acf0:	0800ad5d 	.word	0x0800ad5d
 800acf4:	0800ad5d 	.word	0x0800ad5d
 800acf8:	0800ad5d 	.word	0x0800ad5d
 800acfc:	0800ad5d 	.word	0x0800ad5d
 800ad00:	2b6e      	cmp	r3, #110	; 0x6e
 800ad02:	d809      	bhi.n	800ad18 <_scanf_float+0x134>
 800ad04:	2b60      	cmp	r3, #96	; 0x60
 800ad06:	d8b2      	bhi.n	800ac6e <_scanf_float+0x8a>
 800ad08:	2b54      	cmp	r3, #84	; 0x54
 800ad0a:	d077      	beq.n	800adfc <_scanf_float+0x218>
 800ad0c:	2b59      	cmp	r3, #89	; 0x59
 800ad0e:	d199      	bne.n	800ac44 <_scanf_float+0x60>
 800ad10:	2d07      	cmp	r5, #7
 800ad12:	d197      	bne.n	800ac44 <_scanf_float+0x60>
 800ad14:	2508      	movs	r5, #8
 800ad16:	e029      	b.n	800ad6c <_scanf_float+0x188>
 800ad18:	2b74      	cmp	r3, #116	; 0x74
 800ad1a:	d06f      	beq.n	800adfc <_scanf_float+0x218>
 800ad1c:	2b79      	cmp	r3, #121	; 0x79
 800ad1e:	e7f6      	b.n	800ad0e <_scanf_float+0x12a>
 800ad20:	6821      	ldr	r1, [r4, #0]
 800ad22:	05c8      	lsls	r0, r1, #23
 800ad24:	d51a      	bpl.n	800ad5c <_scanf_float+0x178>
 800ad26:	9b02      	ldr	r3, [sp, #8]
 800ad28:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ad2c:	6021      	str	r1, [r4, #0]
 800ad2e:	f109 0901 	add.w	r9, r9, #1
 800ad32:	b11b      	cbz	r3, 800ad3c <_scanf_float+0x158>
 800ad34:	3b01      	subs	r3, #1
 800ad36:	3201      	adds	r2, #1
 800ad38:	9302      	str	r3, [sp, #8]
 800ad3a:	60a2      	str	r2, [r4, #8]
 800ad3c:	68a3      	ldr	r3, [r4, #8]
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	60a3      	str	r3, [r4, #8]
 800ad42:	6923      	ldr	r3, [r4, #16]
 800ad44:	3301      	adds	r3, #1
 800ad46:	6123      	str	r3, [r4, #16]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	607b      	str	r3, [r7, #4]
 800ad50:	f340 8084 	ble.w	800ae5c <_scanf_float+0x278>
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	3301      	adds	r3, #1
 800ad58:	603b      	str	r3, [r7, #0]
 800ad5a:	e766      	b.n	800ac2a <_scanf_float+0x46>
 800ad5c:	eb1a 0f05 	cmn.w	sl, r5
 800ad60:	f47f af70 	bne.w	800ac44 <_scanf_float+0x60>
 800ad64:	6822      	ldr	r2, [r4, #0]
 800ad66:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ad6a:	6022      	str	r2, [r4, #0]
 800ad6c:	f806 3b01 	strb.w	r3, [r6], #1
 800ad70:	e7e4      	b.n	800ad3c <_scanf_float+0x158>
 800ad72:	6822      	ldr	r2, [r4, #0]
 800ad74:	0610      	lsls	r0, r2, #24
 800ad76:	f57f af65 	bpl.w	800ac44 <_scanf_float+0x60>
 800ad7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad7e:	e7f4      	b.n	800ad6a <_scanf_float+0x186>
 800ad80:	f1ba 0f00 	cmp.w	sl, #0
 800ad84:	d10e      	bne.n	800ada4 <_scanf_float+0x1c0>
 800ad86:	f1b9 0f00 	cmp.w	r9, #0
 800ad8a:	d10e      	bne.n	800adaa <_scanf_float+0x1c6>
 800ad8c:	6822      	ldr	r2, [r4, #0]
 800ad8e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ad92:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ad96:	d108      	bne.n	800adaa <_scanf_float+0x1c6>
 800ad98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ad9c:	6022      	str	r2, [r4, #0]
 800ad9e:	f04f 0a01 	mov.w	sl, #1
 800ada2:	e7e3      	b.n	800ad6c <_scanf_float+0x188>
 800ada4:	f1ba 0f02 	cmp.w	sl, #2
 800ada8:	d055      	beq.n	800ae56 <_scanf_float+0x272>
 800adaa:	2d01      	cmp	r5, #1
 800adac:	d002      	beq.n	800adb4 <_scanf_float+0x1d0>
 800adae:	2d04      	cmp	r5, #4
 800adb0:	f47f af48 	bne.w	800ac44 <_scanf_float+0x60>
 800adb4:	3501      	adds	r5, #1
 800adb6:	b2ed      	uxtb	r5, r5
 800adb8:	e7d8      	b.n	800ad6c <_scanf_float+0x188>
 800adba:	f1ba 0f01 	cmp.w	sl, #1
 800adbe:	f47f af41 	bne.w	800ac44 <_scanf_float+0x60>
 800adc2:	f04f 0a02 	mov.w	sl, #2
 800adc6:	e7d1      	b.n	800ad6c <_scanf_float+0x188>
 800adc8:	b97d      	cbnz	r5, 800adea <_scanf_float+0x206>
 800adca:	f1b9 0f00 	cmp.w	r9, #0
 800adce:	f47f af3c 	bne.w	800ac4a <_scanf_float+0x66>
 800add2:	6822      	ldr	r2, [r4, #0]
 800add4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800add8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800addc:	f47f af39 	bne.w	800ac52 <_scanf_float+0x6e>
 800ade0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ade4:	6022      	str	r2, [r4, #0]
 800ade6:	2501      	movs	r5, #1
 800ade8:	e7c0      	b.n	800ad6c <_scanf_float+0x188>
 800adea:	2d03      	cmp	r5, #3
 800adec:	d0e2      	beq.n	800adb4 <_scanf_float+0x1d0>
 800adee:	2d05      	cmp	r5, #5
 800adf0:	e7de      	b.n	800adb0 <_scanf_float+0x1cc>
 800adf2:	2d02      	cmp	r5, #2
 800adf4:	f47f af26 	bne.w	800ac44 <_scanf_float+0x60>
 800adf8:	2503      	movs	r5, #3
 800adfa:	e7b7      	b.n	800ad6c <_scanf_float+0x188>
 800adfc:	2d06      	cmp	r5, #6
 800adfe:	f47f af21 	bne.w	800ac44 <_scanf_float+0x60>
 800ae02:	2507      	movs	r5, #7
 800ae04:	e7b2      	b.n	800ad6c <_scanf_float+0x188>
 800ae06:	6822      	ldr	r2, [r4, #0]
 800ae08:	0591      	lsls	r1, r2, #22
 800ae0a:	f57f af1b 	bpl.w	800ac44 <_scanf_float+0x60>
 800ae0e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ae12:	6022      	str	r2, [r4, #0]
 800ae14:	f8cd 9004 	str.w	r9, [sp, #4]
 800ae18:	e7a8      	b.n	800ad6c <_scanf_float+0x188>
 800ae1a:	6822      	ldr	r2, [r4, #0]
 800ae1c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ae20:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ae24:	d006      	beq.n	800ae34 <_scanf_float+0x250>
 800ae26:	0550      	lsls	r0, r2, #21
 800ae28:	f57f af0c 	bpl.w	800ac44 <_scanf_float+0x60>
 800ae2c:	f1b9 0f00 	cmp.w	r9, #0
 800ae30:	f43f af0f 	beq.w	800ac52 <_scanf_float+0x6e>
 800ae34:	0591      	lsls	r1, r2, #22
 800ae36:	bf58      	it	pl
 800ae38:	9901      	ldrpl	r1, [sp, #4]
 800ae3a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ae3e:	bf58      	it	pl
 800ae40:	eba9 0101 	subpl.w	r1, r9, r1
 800ae44:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ae48:	bf58      	it	pl
 800ae4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ae4e:	6022      	str	r2, [r4, #0]
 800ae50:	f04f 0900 	mov.w	r9, #0
 800ae54:	e78a      	b.n	800ad6c <_scanf_float+0x188>
 800ae56:	f04f 0a03 	mov.w	sl, #3
 800ae5a:	e787      	b.n	800ad6c <_scanf_float+0x188>
 800ae5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ae60:	4639      	mov	r1, r7
 800ae62:	4640      	mov	r0, r8
 800ae64:	4798      	blx	r3
 800ae66:	2800      	cmp	r0, #0
 800ae68:	f43f aedf 	beq.w	800ac2a <_scanf_float+0x46>
 800ae6c:	e6ea      	b.n	800ac44 <_scanf_float+0x60>
 800ae6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ae76:	463a      	mov	r2, r7
 800ae78:	4640      	mov	r0, r8
 800ae7a:	4798      	blx	r3
 800ae7c:	6923      	ldr	r3, [r4, #16]
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	6123      	str	r3, [r4, #16]
 800ae82:	e6ec      	b.n	800ac5e <_scanf_float+0x7a>
 800ae84:	1e6b      	subs	r3, r5, #1
 800ae86:	2b06      	cmp	r3, #6
 800ae88:	d825      	bhi.n	800aed6 <_scanf_float+0x2f2>
 800ae8a:	2d02      	cmp	r5, #2
 800ae8c:	d836      	bhi.n	800aefc <_scanf_float+0x318>
 800ae8e:	455e      	cmp	r6, fp
 800ae90:	f67f aee8 	bls.w	800ac64 <_scanf_float+0x80>
 800ae94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ae9c:	463a      	mov	r2, r7
 800ae9e:	4640      	mov	r0, r8
 800aea0:	4798      	blx	r3
 800aea2:	6923      	ldr	r3, [r4, #16]
 800aea4:	3b01      	subs	r3, #1
 800aea6:	6123      	str	r3, [r4, #16]
 800aea8:	e7f1      	b.n	800ae8e <_scanf_float+0x2aa>
 800aeaa:	9802      	ldr	r0, [sp, #8]
 800aeac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aeb0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800aeb4:	9002      	str	r0, [sp, #8]
 800aeb6:	463a      	mov	r2, r7
 800aeb8:	4640      	mov	r0, r8
 800aeba:	4798      	blx	r3
 800aebc:	6923      	ldr	r3, [r4, #16]
 800aebe:	3b01      	subs	r3, #1
 800aec0:	6123      	str	r3, [r4, #16]
 800aec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aec6:	fa5f fa8a 	uxtb.w	sl, sl
 800aeca:	f1ba 0f02 	cmp.w	sl, #2
 800aece:	d1ec      	bne.n	800aeaa <_scanf_float+0x2c6>
 800aed0:	3d03      	subs	r5, #3
 800aed2:	b2ed      	uxtb	r5, r5
 800aed4:	1b76      	subs	r6, r6, r5
 800aed6:	6823      	ldr	r3, [r4, #0]
 800aed8:	05da      	lsls	r2, r3, #23
 800aeda:	d52f      	bpl.n	800af3c <_scanf_float+0x358>
 800aedc:	055b      	lsls	r3, r3, #21
 800aede:	d510      	bpl.n	800af02 <_scanf_float+0x31e>
 800aee0:	455e      	cmp	r6, fp
 800aee2:	f67f aebf 	bls.w	800ac64 <_scanf_float+0x80>
 800aee6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aeea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aeee:	463a      	mov	r2, r7
 800aef0:	4640      	mov	r0, r8
 800aef2:	4798      	blx	r3
 800aef4:	6923      	ldr	r3, [r4, #16]
 800aef6:	3b01      	subs	r3, #1
 800aef8:	6123      	str	r3, [r4, #16]
 800aefa:	e7f1      	b.n	800aee0 <_scanf_float+0x2fc>
 800aefc:	46aa      	mov	sl, r5
 800aefe:	9602      	str	r6, [sp, #8]
 800af00:	e7df      	b.n	800aec2 <_scanf_float+0x2de>
 800af02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800af06:	6923      	ldr	r3, [r4, #16]
 800af08:	2965      	cmp	r1, #101	; 0x65
 800af0a:	f103 33ff 	add.w	r3, r3, #4294967295
 800af0e:	f106 35ff 	add.w	r5, r6, #4294967295
 800af12:	6123      	str	r3, [r4, #16]
 800af14:	d00c      	beq.n	800af30 <_scanf_float+0x34c>
 800af16:	2945      	cmp	r1, #69	; 0x45
 800af18:	d00a      	beq.n	800af30 <_scanf_float+0x34c>
 800af1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af1e:	463a      	mov	r2, r7
 800af20:	4640      	mov	r0, r8
 800af22:	4798      	blx	r3
 800af24:	6923      	ldr	r3, [r4, #16]
 800af26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800af2a:	3b01      	subs	r3, #1
 800af2c:	1eb5      	subs	r5, r6, #2
 800af2e:	6123      	str	r3, [r4, #16]
 800af30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af34:	463a      	mov	r2, r7
 800af36:	4640      	mov	r0, r8
 800af38:	4798      	blx	r3
 800af3a:	462e      	mov	r6, r5
 800af3c:	6825      	ldr	r5, [r4, #0]
 800af3e:	f015 0510 	ands.w	r5, r5, #16
 800af42:	d159      	bne.n	800aff8 <_scanf_float+0x414>
 800af44:	7035      	strb	r5, [r6, #0]
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800af4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af50:	d11b      	bne.n	800af8a <_scanf_float+0x3a6>
 800af52:	9b01      	ldr	r3, [sp, #4]
 800af54:	454b      	cmp	r3, r9
 800af56:	eba3 0209 	sub.w	r2, r3, r9
 800af5a:	d123      	bne.n	800afa4 <_scanf_float+0x3c0>
 800af5c:	2200      	movs	r2, #0
 800af5e:	4659      	mov	r1, fp
 800af60:	4640      	mov	r0, r8
 800af62:	f000 ff4f 	bl	800be04 <_strtod_r>
 800af66:	6822      	ldr	r2, [r4, #0]
 800af68:	9b03      	ldr	r3, [sp, #12]
 800af6a:	f012 0f02 	tst.w	r2, #2
 800af6e:	ec57 6b10 	vmov	r6, r7, d0
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	d021      	beq.n	800afba <_scanf_float+0x3d6>
 800af76:	9903      	ldr	r1, [sp, #12]
 800af78:	1d1a      	adds	r2, r3, #4
 800af7a:	600a      	str	r2, [r1, #0]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	e9c3 6700 	strd	r6, r7, [r3]
 800af82:	68e3      	ldr	r3, [r4, #12]
 800af84:	3301      	adds	r3, #1
 800af86:	60e3      	str	r3, [r4, #12]
 800af88:	e66d      	b.n	800ac66 <_scanf_float+0x82>
 800af8a:	9b04      	ldr	r3, [sp, #16]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d0e5      	beq.n	800af5c <_scanf_float+0x378>
 800af90:	9905      	ldr	r1, [sp, #20]
 800af92:	230a      	movs	r3, #10
 800af94:	462a      	mov	r2, r5
 800af96:	3101      	adds	r1, #1
 800af98:	4640      	mov	r0, r8
 800af9a:	f001 f817 	bl	800bfcc <_strtol_r>
 800af9e:	9b04      	ldr	r3, [sp, #16]
 800afa0:	9e05      	ldr	r6, [sp, #20]
 800afa2:	1ac2      	subs	r2, r0, r3
 800afa4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800afa8:	429e      	cmp	r6, r3
 800afaa:	bf28      	it	cs
 800afac:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800afb0:	4912      	ldr	r1, [pc, #72]	; (800affc <_scanf_float+0x418>)
 800afb2:	4630      	mov	r0, r6
 800afb4:	f000 f852 	bl	800b05c <siprintf>
 800afb8:	e7d0      	b.n	800af5c <_scanf_float+0x378>
 800afba:	9903      	ldr	r1, [sp, #12]
 800afbc:	f012 0f04 	tst.w	r2, #4
 800afc0:	f103 0204 	add.w	r2, r3, #4
 800afc4:	600a      	str	r2, [r1, #0]
 800afc6:	d1d9      	bne.n	800af7c <_scanf_float+0x398>
 800afc8:	f8d3 8000 	ldr.w	r8, [r3]
 800afcc:	ee10 2a10 	vmov	r2, s0
 800afd0:	ee10 0a10 	vmov	r0, s0
 800afd4:	463b      	mov	r3, r7
 800afd6:	4639      	mov	r1, r7
 800afd8:	f7f5 fdb8 	bl	8000b4c <__aeabi_dcmpun>
 800afdc:	b128      	cbz	r0, 800afea <_scanf_float+0x406>
 800afde:	4808      	ldr	r0, [pc, #32]	; (800b000 <_scanf_float+0x41c>)
 800afe0:	f000 f836 	bl	800b050 <nanf>
 800afe4:	ed88 0a00 	vstr	s0, [r8]
 800afe8:	e7cb      	b.n	800af82 <_scanf_float+0x39e>
 800afea:	4630      	mov	r0, r6
 800afec:	4639      	mov	r1, r7
 800afee:	f7f5 fe0b 	bl	8000c08 <__aeabi_d2f>
 800aff2:	f8c8 0000 	str.w	r0, [r8]
 800aff6:	e7c4      	b.n	800af82 <_scanf_float+0x39e>
 800aff8:	2500      	movs	r5, #0
 800affa:	e634      	b.n	800ac66 <_scanf_float+0x82>
 800affc:	0800f3eb 	.word	0x0800f3eb
 800b000:	0800f3a3 	.word	0x0800f3a3

0800b004 <putchar>:
 800b004:	4b09      	ldr	r3, [pc, #36]	; (800b02c <putchar+0x28>)
 800b006:	b513      	push	{r0, r1, r4, lr}
 800b008:	681c      	ldr	r4, [r3, #0]
 800b00a:	4601      	mov	r1, r0
 800b00c:	b134      	cbz	r4, 800b01c <putchar+0x18>
 800b00e:	69a3      	ldr	r3, [r4, #24]
 800b010:	b923      	cbnz	r3, 800b01c <putchar+0x18>
 800b012:	9001      	str	r0, [sp, #4]
 800b014:	4620      	mov	r0, r4
 800b016:	f002 f85b 	bl	800d0d0 <__sinit>
 800b01a:	9901      	ldr	r1, [sp, #4]
 800b01c:	68a2      	ldr	r2, [r4, #8]
 800b01e:	4620      	mov	r0, r4
 800b020:	b002      	add	sp, #8
 800b022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b026:	f003 beab 	b.w	800ed80 <_putc_r>
 800b02a:	bf00      	nop
 800b02c:	20000f70 	.word	0x20000f70

0800b030 <_sbrk_r>:
 800b030:	b538      	push	{r3, r4, r5, lr}
 800b032:	4d06      	ldr	r5, [pc, #24]	; (800b04c <_sbrk_r+0x1c>)
 800b034:	2300      	movs	r3, #0
 800b036:	4604      	mov	r4, r0
 800b038:	4608      	mov	r0, r1
 800b03a:	602b      	str	r3, [r5, #0]
 800b03c:	f7fa f8e8 	bl	8005210 <_sbrk>
 800b040:	1c43      	adds	r3, r0, #1
 800b042:	d102      	bne.n	800b04a <_sbrk_r+0x1a>
 800b044:	682b      	ldr	r3, [r5, #0]
 800b046:	b103      	cbz	r3, 800b04a <_sbrk_r+0x1a>
 800b048:	6023      	str	r3, [r4, #0]
 800b04a:	bd38      	pop	{r3, r4, r5, pc}
 800b04c:	20001c8c 	.word	0x20001c8c

0800b050 <nanf>:
 800b050:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b058 <nanf+0x8>
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop
 800b058:	7fc00000 	.word	0x7fc00000

0800b05c <siprintf>:
 800b05c:	b40e      	push	{r1, r2, r3}
 800b05e:	b500      	push	{lr}
 800b060:	b09c      	sub	sp, #112	; 0x70
 800b062:	ab1d      	add	r3, sp, #116	; 0x74
 800b064:	9002      	str	r0, [sp, #8]
 800b066:	9006      	str	r0, [sp, #24]
 800b068:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b06c:	4809      	ldr	r0, [pc, #36]	; (800b094 <siprintf+0x38>)
 800b06e:	9107      	str	r1, [sp, #28]
 800b070:	9104      	str	r1, [sp, #16]
 800b072:	4909      	ldr	r1, [pc, #36]	; (800b098 <siprintf+0x3c>)
 800b074:	f853 2b04 	ldr.w	r2, [r3], #4
 800b078:	9105      	str	r1, [sp, #20]
 800b07a:	6800      	ldr	r0, [r0, #0]
 800b07c:	9301      	str	r3, [sp, #4]
 800b07e:	a902      	add	r1, sp, #8
 800b080:	f003 fa5a 	bl	800e538 <_svfiprintf_r>
 800b084:	9b02      	ldr	r3, [sp, #8]
 800b086:	2200      	movs	r2, #0
 800b088:	701a      	strb	r2, [r3, #0]
 800b08a:	b01c      	add	sp, #112	; 0x70
 800b08c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b090:	b003      	add	sp, #12
 800b092:	4770      	bx	lr
 800b094:	20000f70 	.word	0x20000f70
 800b098:	ffff0208 	.word	0xffff0208

0800b09c <siscanf>:
 800b09c:	b40e      	push	{r1, r2, r3}
 800b09e:	b510      	push	{r4, lr}
 800b0a0:	b09f      	sub	sp, #124	; 0x7c
 800b0a2:	ac21      	add	r4, sp, #132	; 0x84
 800b0a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b0a8:	f854 2b04 	ldr.w	r2, [r4], #4
 800b0ac:	9201      	str	r2, [sp, #4]
 800b0ae:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b0b2:	9004      	str	r0, [sp, #16]
 800b0b4:	9008      	str	r0, [sp, #32]
 800b0b6:	f7f5 f895 	bl	80001e4 <strlen>
 800b0ba:	4b0c      	ldr	r3, [pc, #48]	; (800b0ec <siscanf+0x50>)
 800b0bc:	9005      	str	r0, [sp, #20]
 800b0be:	9009      	str	r0, [sp, #36]	; 0x24
 800b0c0:	930d      	str	r3, [sp, #52]	; 0x34
 800b0c2:	480b      	ldr	r0, [pc, #44]	; (800b0f0 <siscanf+0x54>)
 800b0c4:	9a01      	ldr	r2, [sp, #4]
 800b0c6:	6800      	ldr	r0, [r0, #0]
 800b0c8:	9403      	str	r4, [sp, #12]
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	9311      	str	r3, [sp, #68]	; 0x44
 800b0ce:	9316      	str	r3, [sp, #88]	; 0x58
 800b0d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b0d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b0d8:	a904      	add	r1, sp, #16
 800b0da:	4623      	mov	r3, r4
 800b0dc:	f003 fb86 	bl	800e7ec <__ssvfiscanf_r>
 800b0e0:	b01f      	add	sp, #124	; 0x7c
 800b0e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0e6:	b003      	add	sp, #12
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	0800b117 	.word	0x0800b117
 800b0f0:	20000f70 	.word	0x20000f70

0800b0f4 <__sread>:
 800b0f4:	b510      	push	{r4, lr}
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0fc:	f003 fe88 	bl	800ee10 <_read_r>
 800b100:	2800      	cmp	r0, #0
 800b102:	bfab      	itete	ge
 800b104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b106:	89a3      	ldrhlt	r3, [r4, #12]
 800b108:	181b      	addge	r3, r3, r0
 800b10a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b10e:	bfac      	ite	ge
 800b110:	6563      	strge	r3, [r4, #84]	; 0x54
 800b112:	81a3      	strhlt	r3, [r4, #12]
 800b114:	bd10      	pop	{r4, pc}

0800b116 <__seofread>:
 800b116:	2000      	movs	r0, #0
 800b118:	4770      	bx	lr

0800b11a <__swrite>:
 800b11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b11e:	461f      	mov	r7, r3
 800b120:	898b      	ldrh	r3, [r1, #12]
 800b122:	05db      	lsls	r3, r3, #23
 800b124:	4605      	mov	r5, r0
 800b126:	460c      	mov	r4, r1
 800b128:	4616      	mov	r6, r2
 800b12a:	d505      	bpl.n	800b138 <__swrite+0x1e>
 800b12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b130:	2302      	movs	r3, #2
 800b132:	2200      	movs	r2, #0
 800b134:	f002 fbe0 	bl	800d8f8 <_lseek_r>
 800b138:	89a3      	ldrh	r3, [r4, #12]
 800b13a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b13e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b142:	81a3      	strh	r3, [r4, #12]
 800b144:	4632      	mov	r2, r6
 800b146:	463b      	mov	r3, r7
 800b148:	4628      	mov	r0, r5
 800b14a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b14e:	f000 bf91 	b.w	800c074 <_write_r>

0800b152 <__sseek>:
 800b152:	b510      	push	{r4, lr}
 800b154:	460c      	mov	r4, r1
 800b156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b15a:	f002 fbcd 	bl	800d8f8 <_lseek_r>
 800b15e:	1c43      	adds	r3, r0, #1
 800b160:	89a3      	ldrh	r3, [r4, #12]
 800b162:	bf15      	itete	ne
 800b164:	6560      	strne	r0, [r4, #84]	; 0x54
 800b166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b16a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b16e:	81a3      	strheq	r3, [r4, #12]
 800b170:	bf18      	it	ne
 800b172:	81a3      	strhne	r3, [r4, #12]
 800b174:	bd10      	pop	{r4, pc}

0800b176 <__sclose>:
 800b176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b17a:	f001 b803 	b.w	800c184 <_close_r>
	...

0800b180 <strdup>:
 800b180:	4b02      	ldr	r3, [pc, #8]	; (800b18c <strdup+0xc>)
 800b182:	4601      	mov	r1, r0
 800b184:	6818      	ldr	r0, [r3, #0]
 800b186:	f000 b803 	b.w	800b190 <_strdup_r>
 800b18a:	bf00      	nop
 800b18c:	20000f70 	.word	0x20000f70

0800b190 <_strdup_r>:
 800b190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b192:	4604      	mov	r4, r0
 800b194:	4608      	mov	r0, r1
 800b196:	460d      	mov	r5, r1
 800b198:	f7f5 f824 	bl	80001e4 <strlen>
 800b19c:	1c42      	adds	r2, r0, #1
 800b19e:	4611      	mov	r1, r2
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	9201      	str	r2, [sp, #4]
 800b1a4:	f7fe fee6 	bl	8009f74 <_malloc_r>
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	b118      	cbz	r0, 800b1b4 <_strdup_r+0x24>
 800b1ac:	9a01      	ldr	r2, [sp, #4]
 800b1ae:	4629      	mov	r1, r5
 800b1b0:	f002 fc2c 	bl	800da0c <memcpy>
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	b003      	add	sp, #12
 800b1b8:	bd30      	pop	{r4, r5, pc}

0800b1ba <sulp>:
 800b1ba:	b570      	push	{r4, r5, r6, lr}
 800b1bc:	4604      	mov	r4, r0
 800b1be:	460d      	mov	r5, r1
 800b1c0:	ec45 4b10 	vmov	d0, r4, r5
 800b1c4:	4616      	mov	r6, r2
 800b1c6:	f002 ffc7 	bl	800e158 <__ulp>
 800b1ca:	ec51 0b10 	vmov	r0, r1, d0
 800b1ce:	b17e      	cbz	r6, 800b1f0 <sulp+0x36>
 800b1d0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b1d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	dd09      	ble.n	800b1f0 <sulp+0x36>
 800b1dc:	051b      	lsls	r3, r3, #20
 800b1de:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b1e2:	2400      	movs	r4, #0
 800b1e4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b1e8:	4622      	mov	r2, r4
 800b1ea:	462b      	mov	r3, r5
 800b1ec:	f7f5 fa14 	bl	8000618 <__aeabi_dmul>
 800b1f0:	bd70      	pop	{r4, r5, r6, pc}
 800b1f2:	0000      	movs	r0, r0
 800b1f4:	0000      	movs	r0, r0
	...

0800b1f8 <_strtod_l>:
 800b1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fc:	ed2d 8b02 	vpush	{d8}
 800b200:	b09d      	sub	sp, #116	; 0x74
 800b202:	461f      	mov	r7, r3
 800b204:	2300      	movs	r3, #0
 800b206:	9318      	str	r3, [sp, #96]	; 0x60
 800b208:	4ba2      	ldr	r3, [pc, #648]	; (800b494 <_strtod_l+0x29c>)
 800b20a:	9213      	str	r2, [sp, #76]	; 0x4c
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	9305      	str	r3, [sp, #20]
 800b210:	4604      	mov	r4, r0
 800b212:	4618      	mov	r0, r3
 800b214:	4688      	mov	r8, r1
 800b216:	f7f4 ffe5 	bl	80001e4 <strlen>
 800b21a:	f04f 0a00 	mov.w	sl, #0
 800b21e:	4605      	mov	r5, r0
 800b220:	f04f 0b00 	mov.w	fp, #0
 800b224:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b22a:	781a      	ldrb	r2, [r3, #0]
 800b22c:	2a2b      	cmp	r2, #43	; 0x2b
 800b22e:	d04e      	beq.n	800b2ce <_strtod_l+0xd6>
 800b230:	d83b      	bhi.n	800b2aa <_strtod_l+0xb2>
 800b232:	2a0d      	cmp	r2, #13
 800b234:	d834      	bhi.n	800b2a0 <_strtod_l+0xa8>
 800b236:	2a08      	cmp	r2, #8
 800b238:	d834      	bhi.n	800b2a4 <_strtod_l+0xac>
 800b23a:	2a00      	cmp	r2, #0
 800b23c:	d03e      	beq.n	800b2bc <_strtod_l+0xc4>
 800b23e:	2300      	movs	r3, #0
 800b240:	930a      	str	r3, [sp, #40]	; 0x28
 800b242:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b244:	7833      	ldrb	r3, [r6, #0]
 800b246:	2b30      	cmp	r3, #48	; 0x30
 800b248:	f040 80b0 	bne.w	800b3ac <_strtod_l+0x1b4>
 800b24c:	7873      	ldrb	r3, [r6, #1]
 800b24e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b252:	2b58      	cmp	r3, #88	; 0x58
 800b254:	d168      	bne.n	800b328 <_strtod_l+0x130>
 800b256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b258:	9301      	str	r3, [sp, #4]
 800b25a:	ab18      	add	r3, sp, #96	; 0x60
 800b25c:	9702      	str	r7, [sp, #8]
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	4a8d      	ldr	r2, [pc, #564]	; (800b498 <_strtod_l+0x2a0>)
 800b262:	ab19      	add	r3, sp, #100	; 0x64
 800b264:	a917      	add	r1, sp, #92	; 0x5c
 800b266:	4620      	mov	r0, r4
 800b268:	f002 f836 	bl	800d2d8 <__gethex>
 800b26c:	f010 0707 	ands.w	r7, r0, #7
 800b270:	4605      	mov	r5, r0
 800b272:	d005      	beq.n	800b280 <_strtod_l+0x88>
 800b274:	2f06      	cmp	r7, #6
 800b276:	d12c      	bne.n	800b2d2 <_strtod_l+0xda>
 800b278:	3601      	adds	r6, #1
 800b27a:	2300      	movs	r3, #0
 800b27c:	9617      	str	r6, [sp, #92]	; 0x5c
 800b27e:	930a      	str	r3, [sp, #40]	; 0x28
 800b280:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b282:	2b00      	cmp	r3, #0
 800b284:	f040 8590 	bne.w	800bda8 <_strtod_l+0xbb0>
 800b288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b28a:	b1eb      	cbz	r3, 800b2c8 <_strtod_l+0xd0>
 800b28c:	4652      	mov	r2, sl
 800b28e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b292:	ec43 2b10 	vmov	d0, r2, r3
 800b296:	b01d      	add	sp, #116	; 0x74
 800b298:	ecbd 8b02 	vpop	{d8}
 800b29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a0:	2a20      	cmp	r2, #32
 800b2a2:	d1cc      	bne.n	800b23e <_strtod_l+0x46>
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	9317      	str	r3, [sp, #92]	; 0x5c
 800b2a8:	e7be      	b.n	800b228 <_strtod_l+0x30>
 800b2aa:	2a2d      	cmp	r2, #45	; 0x2d
 800b2ac:	d1c7      	bne.n	800b23e <_strtod_l+0x46>
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	920a      	str	r2, [sp, #40]	; 0x28
 800b2b2:	1c5a      	adds	r2, r3, #1
 800b2b4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b2b6:	785b      	ldrb	r3, [r3, #1]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1c2      	bne.n	800b242 <_strtod_l+0x4a>
 800b2bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b2be:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	f040 856e 	bne.w	800bda4 <_strtod_l+0xbac>
 800b2c8:	4652      	mov	r2, sl
 800b2ca:	465b      	mov	r3, fp
 800b2cc:	e7e1      	b.n	800b292 <_strtod_l+0x9a>
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	e7ee      	b.n	800b2b0 <_strtod_l+0xb8>
 800b2d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b2d4:	b13a      	cbz	r2, 800b2e6 <_strtod_l+0xee>
 800b2d6:	2135      	movs	r1, #53	; 0x35
 800b2d8:	a81a      	add	r0, sp, #104	; 0x68
 800b2da:	f003 f848 	bl	800e36e <__copybits>
 800b2de:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f002 fc07 	bl	800daf4 <_Bfree>
 800b2e6:	3f01      	subs	r7, #1
 800b2e8:	2f04      	cmp	r7, #4
 800b2ea:	d806      	bhi.n	800b2fa <_strtod_l+0x102>
 800b2ec:	e8df f007 	tbb	[pc, r7]
 800b2f0:	1714030a 	.word	0x1714030a
 800b2f4:	0a          	.byte	0x0a
 800b2f5:	00          	.byte	0x00
 800b2f6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b2fa:	0728      	lsls	r0, r5, #28
 800b2fc:	d5c0      	bpl.n	800b280 <_strtod_l+0x88>
 800b2fe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b302:	e7bd      	b.n	800b280 <_strtod_l+0x88>
 800b304:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b308:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b30a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b30e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b312:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b316:	e7f0      	b.n	800b2fa <_strtod_l+0x102>
 800b318:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b49c <_strtod_l+0x2a4>
 800b31c:	e7ed      	b.n	800b2fa <_strtod_l+0x102>
 800b31e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b322:	f04f 3aff 	mov.w	sl, #4294967295
 800b326:	e7e8      	b.n	800b2fa <_strtod_l+0x102>
 800b328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b32a:	1c5a      	adds	r2, r3, #1
 800b32c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b32e:	785b      	ldrb	r3, [r3, #1]
 800b330:	2b30      	cmp	r3, #48	; 0x30
 800b332:	d0f9      	beq.n	800b328 <_strtod_l+0x130>
 800b334:	2b00      	cmp	r3, #0
 800b336:	d0a3      	beq.n	800b280 <_strtod_l+0x88>
 800b338:	2301      	movs	r3, #1
 800b33a:	f04f 0900 	mov.w	r9, #0
 800b33e:	9304      	str	r3, [sp, #16]
 800b340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b342:	9308      	str	r3, [sp, #32]
 800b344:	f8cd 901c 	str.w	r9, [sp, #28]
 800b348:	464f      	mov	r7, r9
 800b34a:	220a      	movs	r2, #10
 800b34c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b34e:	7806      	ldrb	r6, [r0, #0]
 800b350:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b354:	b2d9      	uxtb	r1, r3
 800b356:	2909      	cmp	r1, #9
 800b358:	d92a      	bls.n	800b3b0 <_strtod_l+0x1b8>
 800b35a:	9905      	ldr	r1, [sp, #20]
 800b35c:	462a      	mov	r2, r5
 800b35e:	f003 fdef 	bl	800ef40 <strncmp>
 800b362:	b398      	cbz	r0, 800b3cc <_strtod_l+0x1d4>
 800b364:	2000      	movs	r0, #0
 800b366:	4632      	mov	r2, r6
 800b368:	463d      	mov	r5, r7
 800b36a:	9005      	str	r0, [sp, #20]
 800b36c:	4603      	mov	r3, r0
 800b36e:	2a65      	cmp	r2, #101	; 0x65
 800b370:	d001      	beq.n	800b376 <_strtod_l+0x17e>
 800b372:	2a45      	cmp	r2, #69	; 0x45
 800b374:	d118      	bne.n	800b3a8 <_strtod_l+0x1b0>
 800b376:	b91d      	cbnz	r5, 800b380 <_strtod_l+0x188>
 800b378:	9a04      	ldr	r2, [sp, #16]
 800b37a:	4302      	orrs	r2, r0
 800b37c:	d09e      	beq.n	800b2bc <_strtod_l+0xc4>
 800b37e:	2500      	movs	r5, #0
 800b380:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b384:	f108 0201 	add.w	r2, r8, #1
 800b388:	9217      	str	r2, [sp, #92]	; 0x5c
 800b38a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b38e:	2a2b      	cmp	r2, #43	; 0x2b
 800b390:	d075      	beq.n	800b47e <_strtod_l+0x286>
 800b392:	2a2d      	cmp	r2, #45	; 0x2d
 800b394:	d07b      	beq.n	800b48e <_strtod_l+0x296>
 800b396:	f04f 0c00 	mov.w	ip, #0
 800b39a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b39e:	2909      	cmp	r1, #9
 800b3a0:	f240 8082 	bls.w	800b4a8 <_strtod_l+0x2b0>
 800b3a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b3a8:	2600      	movs	r6, #0
 800b3aa:	e09d      	b.n	800b4e8 <_strtod_l+0x2f0>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	e7c4      	b.n	800b33a <_strtod_l+0x142>
 800b3b0:	2f08      	cmp	r7, #8
 800b3b2:	bfd8      	it	le
 800b3b4:	9907      	ldrle	r1, [sp, #28]
 800b3b6:	f100 0001 	add.w	r0, r0, #1
 800b3ba:	bfda      	itte	le
 800b3bc:	fb02 3301 	mlale	r3, r2, r1, r3
 800b3c0:	9307      	strle	r3, [sp, #28]
 800b3c2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b3c6:	3701      	adds	r7, #1
 800b3c8:	9017      	str	r0, [sp, #92]	; 0x5c
 800b3ca:	e7bf      	b.n	800b34c <_strtod_l+0x154>
 800b3cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b3ce:	195a      	adds	r2, r3, r5
 800b3d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800b3d2:	5d5a      	ldrb	r2, [r3, r5]
 800b3d4:	2f00      	cmp	r7, #0
 800b3d6:	d037      	beq.n	800b448 <_strtod_l+0x250>
 800b3d8:	9005      	str	r0, [sp, #20]
 800b3da:	463d      	mov	r5, r7
 800b3dc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b3e0:	2b09      	cmp	r3, #9
 800b3e2:	d912      	bls.n	800b40a <_strtod_l+0x212>
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e7c2      	b.n	800b36e <_strtod_l+0x176>
 800b3e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b3ea:	1c5a      	adds	r2, r3, #1
 800b3ec:	9217      	str	r2, [sp, #92]	; 0x5c
 800b3ee:	785a      	ldrb	r2, [r3, #1]
 800b3f0:	3001      	adds	r0, #1
 800b3f2:	2a30      	cmp	r2, #48	; 0x30
 800b3f4:	d0f8      	beq.n	800b3e8 <_strtod_l+0x1f0>
 800b3f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b3fa:	2b08      	cmp	r3, #8
 800b3fc:	f200 84d9 	bhi.w	800bdb2 <_strtod_l+0xbba>
 800b400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b402:	9005      	str	r0, [sp, #20]
 800b404:	2000      	movs	r0, #0
 800b406:	9308      	str	r3, [sp, #32]
 800b408:	4605      	mov	r5, r0
 800b40a:	3a30      	subs	r2, #48	; 0x30
 800b40c:	f100 0301 	add.w	r3, r0, #1
 800b410:	d014      	beq.n	800b43c <_strtod_l+0x244>
 800b412:	9905      	ldr	r1, [sp, #20]
 800b414:	4419      	add	r1, r3
 800b416:	9105      	str	r1, [sp, #20]
 800b418:	462b      	mov	r3, r5
 800b41a:	eb00 0e05 	add.w	lr, r0, r5
 800b41e:	210a      	movs	r1, #10
 800b420:	4573      	cmp	r3, lr
 800b422:	d113      	bne.n	800b44c <_strtod_l+0x254>
 800b424:	182b      	adds	r3, r5, r0
 800b426:	2b08      	cmp	r3, #8
 800b428:	f105 0501 	add.w	r5, r5, #1
 800b42c:	4405      	add	r5, r0
 800b42e:	dc1c      	bgt.n	800b46a <_strtod_l+0x272>
 800b430:	9907      	ldr	r1, [sp, #28]
 800b432:	230a      	movs	r3, #10
 800b434:	fb03 2301 	mla	r3, r3, r1, r2
 800b438:	9307      	str	r3, [sp, #28]
 800b43a:	2300      	movs	r3, #0
 800b43c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b43e:	1c51      	adds	r1, r2, #1
 800b440:	9117      	str	r1, [sp, #92]	; 0x5c
 800b442:	7852      	ldrb	r2, [r2, #1]
 800b444:	4618      	mov	r0, r3
 800b446:	e7c9      	b.n	800b3dc <_strtod_l+0x1e4>
 800b448:	4638      	mov	r0, r7
 800b44a:	e7d2      	b.n	800b3f2 <_strtod_l+0x1fa>
 800b44c:	2b08      	cmp	r3, #8
 800b44e:	dc04      	bgt.n	800b45a <_strtod_l+0x262>
 800b450:	9e07      	ldr	r6, [sp, #28]
 800b452:	434e      	muls	r6, r1
 800b454:	9607      	str	r6, [sp, #28]
 800b456:	3301      	adds	r3, #1
 800b458:	e7e2      	b.n	800b420 <_strtod_l+0x228>
 800b45a:	f103 0c01 	add.w	ip, r3, #1
 800b45e:	f1bc 0f10 	cmp.w	ip, #16
 800b462:	bfd8      	it	le
 800b464:	fb01 f909 	mulle.w	r9, r1, r9
 800b468:	e7f5      	b.n	800b456 <_strtod_l+0x25e>
 800b46a:	2d10      	cmp	r5, #16
 800b46c:	bfdc      	itt	le
 800b46e:	230a      	movle	r3, #10
 800b470:	fb03 2909 	mlale	r9, r3, r9, r2
 800b474:	e7e1      	b.n	800b43a <_strtod_l+0x242>
 800b476:	2300      	movs	r3, #0
 800b478:	9305      	str	r3, [sp, #20]
 800b47a:	2301      	movs	r3, #1
 800b47c:	e77c      	b.n	800b378 <_strtod_l+0x180>
 800b47e:	f04f 0c00 	mov.w	ip, #0
 800b482:	f108 0202 	add.w	r2, r8, #2
 800b486:	9217      	str	r2, [sp, #92]	; 0x5c
 800b488:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b48c:	e785      	b.n	800b39a <_strtod_l+0x1a2>
 800b48e:	f04f 0c01 	mov.w	ip, #1
 800b492:	e7f6      	b.n	800b482 <_strtod_l+0x28a>
 800b494:	0800f6f8 	.word	0x0800f6f8
 800b498:	0800f3f0 	.word	0x0800f3f0
 800b49c:	7ff00000 	.word	0x7ff00000
 800b4a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b4a2:	1c51      	adds	r1, r2, #1
 800b4a4:	9117      	str	r1, [sp, #92]	; 0x5c
 800b4a6:	7852      	ldrb	r2, [r2, #1]
 800b4a8:	2a30      	cmp	r2, #48	; 0x30
 800b4aa:	d0f9      	beq.n	800b4a0 <_strtod_l+0x2a8>
 800b4ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b4b0:	2908      	cmp	r1, #8
 800b4b2:	f63f af79 	bhi.w	800b3a8 <_strtod_l+0x1b0>
 800b4b6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b4ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b4bc:	9206      	str	r2, [sp, #24]
 800b4be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b4c0:	1c51      	adds	r1, r2, #1
 800b4c2:	9117      	str	r1, [sp, #92]	; 0x5c
 800b4c4:	7852      	ldrb	r2, [r2, #1]
 800b4c6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b4ca:	2e09      	cmp	r6, #9
 800b4cc:	d937      	bls.n	800b53e <_strtod_l+0x346>
 800b4ce:	9e06      	ldr	r6, [sp, #24]
 800b4d0:	1b89      	subs	r1, r1, r6
 800b4d2:	2908      	cmp	r1, #8
 800b4d4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b4d8:	dc02      	bgt.n	800b4e0 <_strtod_l+0x2e8>
 800b4da:	4576      	cmp	r6, lr
 800b4dc:	bfa8      	it	ge
 800b4de:	4676      	movge	r6, lr
 800b4e0:	f1bc 0f00 	cmp.w	ip, #0
 800b4e4:	d000      	beq.n	800b4e8 <_strtod_l+0x2f0>
 800b4e6:	4276      	negs	r6, r6
 800b4e8:	2d00      	cmp	r5, #0
 800b4ea:	d14d      	bne.n	800b588 <_strtod_l+0x390>
 800b4ec:	9904      	ldr	r1, [sp, #16]
 800b4ee:	4301      	orrs	r1, r0
 800b4f0:	f47f aec6 	bne.w	800b280 <_strtod_l+0x88>
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f47f aee1 	bne.w	800b2bc <_strtod_l+0xc4>
 800b4fa:	2a69      	cmp	r2, #105	; 0x69
 800b4fc:	d027      	beq.n	800b54e <_strtod_l+0x356>
 800b4fe:	dc24      	bgt.n	800b54a <_strtod_l+0x352>
 800b500:	2a49      	cmp	r2, #73	; 0x49
 800b502:	d024      	beq.n	800b54e <_strtod_l+0x356>
 800b504:	2a4e      	cmp	r2, #78	; 0x4e
 800b506:	f47f aed9 	bne.w	800b2bc <_strtod_l+0xc4>
 800b50a:	499f      	ldr	r1, [pc, #636]	; (800b788 <_strtod_l+0x590>)
 800b50c:	a817      	add	r0, sp, #92	; 0x5c
 800b50e:	f002 f93b 	bl	800d788 <__match>
 800b512:	2800      	cmp	r0, #0
 800b514:	f43f aed2 	beq.w	800b2bc <_strtod_l+0xc4>
 800b518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	2b28      	cmp	r3, #40	; 0x28
 800b51e:	d12d      	bne.n	800b57c <_strtod_l+0x384>
 800b520:	499a      	ldr	r1, [pc, #616]	; (800b78c <_strtod_l+0x594>)
 800b522:	aa1a      	add	r2, sp, #104	; 0x68
 800b524:	a817      	add	r0, sp, #92	; 0x5c
 800b526:	f002 f943 	bl	800d7b0 <__hexnan>
 800b52a:	2805      	cmp	r0, #5
 800b52c:	d126      	bne.n	800b57c <_strtod_l+0x384>
 800b52e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b530:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b534:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b538:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b53c:	e6a0      	b.n	800b280 <_strtod_l+0x88>
 800b53e:	210a      	movs	r1, #10
 800b540:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b544:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b548:	e7b9      	b.n	800b4be <_strtod_l+0x2c6>
 800b54a:	2a6e      	cmp	r2, #110	; 0x6e
 800b54c:	e7db      	b.n	800b506 <_strtod_l+0x30e>
 800b54e:	4990      	ldr	r1, [pc, #576]	; (800b790 <_strtod_l+0x598>)
 800b550:	a817      	add	r0, sp, #92	; 0x5c
 800b552:	f002 f919 	bl	800d788 <__match>
 800b556:	2800      	cmp	r0, #0
 800b558:	f43f aeb0 	beq.w	800b2bc <_strtod_l+0xc4>
 800b55c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b55e:	498d      	ldr	r1, [pc, #564]	; (800b794 <_strtod_l+0x59c>)
 800b560:	3b01      	subs	r3, #1
 800b562:	a817      	add	r0, sp, #92	; 0x5c
 800b564:	9317      	str	r3, [sp, #92]	; 0x5c
 800b566:	f002 f90f 	bl	800d788 <__match>
 800b56a:	b910      	cbnz	r0, 800b572 <_strtod_l+0x37a>
 800b56c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b56e:	3301      	adds	r3, #1
 800b570:	9317      	str	r3, [sp, #92]	; 0x5c
 800b572:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b7a4 <_strtod_l+0x5ac>
 800b576:	f04f 0a00 	mov.w	sl, #0
 800b57a:	e681      	b.n	800b280 <_strtod_l+0x88>
 800b57c:	4886      	ldr	r0, [pc, #536]	; (800b798 <_strtod_l+0x5a0>)
 800b57e:	f003 fc5b 	bl	800ee38 <nan>
 800b582:	ec5b ab10 	vmov	sl, fp, d0
 800b586:	e67b      	b.n	800b280 <_strtod_l+0x88>
 800b588:	9b05      	ldr	r3, [sp, #20]
 800b58a:	9807      	ldr	r0, [sp, #28]
 800b58c:	1af3      	subs	r3, r6, r3
 800b58e:	2f00      	cmp	r7, #0
 800b590:	bf08      	it	eq
 800b592:	462f      	moveq	r7, r5
 800b594:	2d10      	cmp	r5, #16
 800b596:	9306      	str	r3, [sp, #24]
 800b598:	46a8      	mov	r8, r5
 800b59a:	bfa8      	it	ge
 800b59c:	f04f 0810 	movge.w	r8, #16
 800b5a0:	f7f4 ffc0 	bl	8000524 <__aeabi_ui2d>
 800b5a4:	2d09      	cmp	r5, #9
 800b5a6:	4682      	mov	sl, r0
 800b5a8:	468b      	mov	fp, r1
 800b5aa:	dd13      	ble.n	800b5d4 <_strtod_l+0x3dc>
 800b5ac:	4b7b      	ldr	r3, [pc, #492]	; (800b79c <_strtod_l+0x5a4>)
 800b5ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b5b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b5b6:	f7f5 f82f 	bl	8000618 <__aeabi_dmul>
 800b5ba:	4682      	mov	sl, r0
 800b5bc:	4648      	mov	r0, r9
 800b5be:	468b      	mov	fp, r1
 800b5c0:	f7f4 ffb0 	bl	8000524 <__aeabi_ui2d>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	4650      	mov	r0, sl
 800b5ca:	4659      	mov	r1, fp
 800b5cc:	f7f4 fe6e 	bl	80002ac <__adddf3>
 800b5d0:	4682      	mov	sl, r0
 800b5d2:	468b      	mov	fp, r1
 800b5d4:	2d0f      	cmp	r5, #15
 800b5d6:	dc38      	bgt.n	800b64a <_strtod_l+0x452>
 800b5d8:	9b06      	ldr	r3, [sp, #24]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f43f ae50 	beq.w	800b280 <_strtod_l+0x88>
 800b5e0:	dd24      	ble.n	800b62c <_strtod_l+0x434>
 800b5e2:	2b16      	cmp	r3, #22
 800b5e4:	dc0b      	bgt.n	800b5fe <_strtod_l+0x406>
 800b5e6:	496d      	ldr	r1, [pc, #436]	; (800b79c <_strtod_l+0x5a4>)
 800b5e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b5ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5f0:	4652      	mov	r2, sl
 800b5f2:	465b      	mov	r3, fp
 800b5f4:	f7f5 f810 	bl	8000618 <__aeabi_dmul>
 800b5f8:	4682      	mov	sl, r0
 800b5fa:	468b      	mov	fp, r1
 800b5fc:	e640      	b.n	800b280 <_strtod_l+0x88>
 800b5fe:	9a06      	ldr	r2, [sp, #24]
 800b600:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b604:	4293      	cmp	r3, r2
 800b606:	db20      	blt.n	800b64a <_strtod_l+0x452>
 800b608:	4c64      	ldr	r4, [pc, #400]	; (800b79c <_strtod_l+0x5a4>)
 800b60a:	f1c5 050f 	rsb	r5, r5, #15
 800b60e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b612:	4652      	mov	r2, sl
 800b614:	465b      	mov	r3, fp
 800b616:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b61a:	f7f4 fffd 	bl	8000618 <__aeabi_dmul>
 800b61e:	9b06      	ldr	r3, [sp, #24]
 800b620:	1b5d      	subs	r5, r3, r5
 800b622:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b626:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b62a:	e7e3      	b.n	800b5f4 <_strtod_l+0x3fc>
 800b62c:	9b06      	ldr	r3, [sp, #24]
 800b62e:	3316      	adds	r3, #22
 800b630:	db0b      	blt.n	800b64a <_strtod_l+0x452>
 800b632:	9b05      	ldr	r3, [sp, #20]
 800b634:	1b9e      	subs	r6, r3, r6
 800b636:	4b59      	ldr	r3, [pc, #356]	; (800b79c <_strtod_l+0x5a4>)
 800b638:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b63c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b640:	4650      	mov	r0, sl
 800b642:	4659      	mov	r1, fp
 800b644:	f7f5 f912 	bl	800086c <__aeabi_ddiv>
 800b648:	e7d6      	b.n	800b5f8 <_strtod_l+0x400>
 800b64a:	9b06      	ldr	r3, [sp, #24]
 800b64c:	eba5 0808 	sub.w	r8, r5, r8
 800b650:	4498      	add	r8, r3
 800b652:	f1b8 0f00 	cmp.w	r8, #0
 800b656:	dd74      	ble.n	800b742 <_strtod_l+0x54a>
 800b658:	f018 030f 	ands.w	r3, r8, #15
 800b65c:	d00a      	beq.n	800b674 <_strtod_l+0x47c>
 800b65e:	494f      	ldr	r1, [pc, #316]	; (800b79c <_strtod_l+0x5a4>)
 800b660:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b664:	4652      	mov	r2, sl
 800b666:	465b      	mov	r3, fp
 800b668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b66c:	f7f4 ffd4 	bl	8000618 <__aeabi_dmul>
 800b670:	4682      	mov	sl, r0
 800b672:	468b      	mov	fp, r1
 800b674:	f038 080f 	bics.w	r8, r8, #15
 800b678:	d04f      	beq.n	800b71a <_strtod_l+0x522>
 800b67a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b67e:	dd22      	ble.n	800b6c6 <_strtod_l+0x4ce>
 800b680:	2500      	movs	r5, #0
 800b682:	462e      	mov	r6, r5
 800b684:	9507      	str	r5, [sp, #28]
 800b686:	9505      	str	r5, [sp, #20]
 800b688:	2322      	movs	r3, #34	; 0x22
 800b68a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b7a4 <_strtod_l+0x5ac>
 800b68e:	6023      	str	r3, [r4, #0]
 800b690:	f04f 0a00 	mov.w	sl, #0
 800b694:	9b07      	ldr	r3, [sp, #28]
 800b696:	2b00      	cmp	r3, #0
 800b698:	f43f adf2 	beq.w	800b280 <_strtod_l+0x88>
 800b69c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f002 fa28 	bl	800daf4 <_Bfree>
 800b6a4:	9905      	ldr	r1, [sp, #20]
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f002 fa24 	bl	800daf4 <_Bfree>
 800b6ac:	4631      	mov	r1, r6
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f002 fa20 	bl	800daf4 <_Bfree>
 800b6b4:	9907      	ldr	r1, [sp, #28]
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f002 fa1c 	bl	800daf4 <_Bfree>
 800b6bc:	4629      	mov	r1, r5
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f002 fa18 	bl	800daf4 <_Bfree>
 800b6c4:	e5dc      	b.n	800b280 <_strtod_l+0x88>
 800b6c6:	4b36      	ldr	r3, [pc, #216]	; (800b7a0 <_strtod_l+0x5a8>)
 800b6c8:	9304      	str	r3, [sp, #16]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b6d0:	4650      	mov	r0, sl
 800b6d2:	4659      	mov	r1, fp
 800b6d4:	4699      	mov	r9, r3
 800b6d6:	f1b8 0f01 	cmp.w	r8, #1
 800b6da:	dc21      	bgt.n	800b720 <_strtod_l+0x528>
 800b6dc:	b10b      	cbz	r3, 800b6e2 <_strtod_l+0x4ea>
 800b6de:	4682      	mov	sl, r0
 800b6e0:	468b      	mov	fp, r1
 800b6e2:	4b2f      	ldr	r3, [pc, #188]	; (800b7a0 <_strtod_l+0x5a8>)
 800b6e4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b6e8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b6ec:	4652      	mov	r2, sl
 800b6ee:	465b      	mov	r3, fp
 800b6f0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b6f4:	f7f4 ff90 	bl	8000618 <__aeabi_dmul>
 800b6f8:	4b2a      	ldr	r3, [pc, #168]	; (800b7a4 <_strtod_l+0x5ac>)
 800b6fa:	460a      	mov	r2, r1
 800b6fc:	400b      	ands	r3, r1
 800b6fe:	492a      	ldr	r1, [pc, #168]	; (800b7a8 <_strtod_l+0x5b0>)
 800b700:	428b      	cmp	r3, r1
 800b702:	4682      	mov	sl, r0
 800b704:	d8bc      	bhi.n	800b680 <_strtod_l+0x488>
 800b706:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b70a:	428b      	cmp	r3, r1
 800b70c:	bf86      	itte	hi
 800b70e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b7ac <_strtod_l+0x5b4>
 800b712:	f04f 3aff 	movhi.w	sl, #4294967295
 800b716:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b71a:	2300      	movs	r3, #0
 800b71c:	9304      	str	r3, [sp, #16]
 800b71e:	e084      	b.n	800b82a <_strtod_l+0x632>
 800b720:	f018 0f01 	tst.w	r8, #1
 800b724:	d005      	beq.n	800b732 <_strtod_l+0x53a>
 800b726:	9b04      	ldr	r3, [sp, #16]
 800b728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72c:	f7f4 ff74 	bl	8000618 <__aeabi_dmul>
 800b730:	2301      	movs	r3, #1
 800b732:	9a04      	ldr	r2, [sp, #16]
 800b734:	3208      	adds	r2, #8
 800b736:	f109 0901 	add.w	r9, r9, #1
 800b73a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b73e:	9204      	str	r2, [sp, #16]
 800b740:	e7c9      	b.n	800b6d6 <_strtod_l+0x4de>
 800b742:	d0ea      	beq.n	800b71a <_strtod_l+0x522>
 800b744:	f1c8 0800 	rsb	r8, r8, #0
 800b748:	f018 020f 	ands.w	r2, r8, #15
 800b74c:	d00a      	beq.n	800b764 <_strtod_l+0x56c>
 800b74e:	4b13      	ldr	r3, [pc, #76]	; (800b79c <_strtod_l+0x5a4>)
 800b750:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b754:	4650      	mov	r0, sl
 800b756:	4659      	mov	r1, fp
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	f7f5 f886 	bl	800086c <__aeabi_ddiv>
 800b760:	4682      	mov	sl, r0
 800b762:	468b      	mov	fp, r1
 800b764:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b768:	d0d7      	beq.n	800b71a <_strtod_l+0x522>
 800b76a:	f1b8 0f1f 	cmp.w	r8, #31
 800b76e:	dd1f      	ble.n	800b7b0 <_strtod_l+0x5b8>
 800b770:	2500      	movs	r5, #0
 800b772:	462e      	mov	r6, r5
 800b774:	9507      	str	r5, [sp, #28]
 800b776:	9505      	str	r5, [sp, #20]
 800b778:	2322      	movs	r3, #34	; 0x22
 800b77a:	f04f 0a00 	mov.w	sl, #0
 800b77e:	f04f 0b00 	mov.w	fp, #0
 800b782:	6023      	str	r3, [r4, #0]
 800b784:	e786      	b.n	800b694 <_strtod_l+0x49c>
 800b786:	bf00      	nop
 800b788:	0800f3c6 	.word	0x0800f3c6
 800b78c:	0800f404 	.word	0x0800f404
 800b790:	0800f3be 	.word	0x0800f3be
 800b794:	0800f5b8 	.word	0x0800f5b8
 800b798:	0800f3a3 	.word	0x0800f3a3
 800b79c:	0800f790 	.word	0x0800f790
 800b7a0:	0800f768 	.word	0x0800f768
 800b7a4:	7ff00000 	.word	0x7ff00000
 800b7a8:	7ca00000 	.word	0x7ca00000
 800b7ac:	7fefffff 	.word	0x7fefffff
 800b7b0:	f018 0310 	ands.w	r3, r8, #16
 800b7b4:	bf18      	it	ne
 800b7b6:	236a      	movne	r3, #106	; 0x6a
 800b7b8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bb68 <_strtod_l+0x970>
 800b7bc:	9304      	str	r3, [sp, #16]
 800b7be:	4650      	mov	r0, sl
 800b7c0:	4659      	mov	r1, fp
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	f018 0f01 	tst.w	r8, #1
 800b7c8:	d004      	beq.n	800b7d4 <_strtod_l+0x5dc>
 800b7ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b7ce:	f7f4 ff23 	bl	8000618 <__aeabi_dmul>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b7d8:	f109 0908 	add.w	r9, r9, #8
 800b7dc:	d1f2      	bne.n	800b7c4 <_strtod_l+0x5cc>
 800b7de:	b10b      	cbz	r3, 800b7e4 <_strtod_l+0x5ec>
 800b7e0:	4682      	mov	sl, r0
 800b7e2:	468b      	mov	fp, r1
 800b7e4:	9b04      	ldr	r3, [sp, #16]
 800b7e6:	b1c3      	cbz	r3, 800b81a <_strtod_l+0x622>
 800b7e8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b7ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	4659      	mov	r1, fp
 800b7f4:	dd11      	ble.n	800b81a <_strtod_l+0x622>
 800b7f6:	2b1f      	cmp	r3, #31
 800b7f8:	f340 8124 	ble.w	800ba44 <_strtod_l+0x84c>
 800b7fc:	2b34      	cmp	r3, #52	; 0x34
 800b7fe:	bfde      	ittt	le
 800b800:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b804:	f04f 33ff 	movle.w	r3, #4294967295
 800b808:	fa03 f202 	lslle.w	r2, r3, r2
 800b80c:	f04f 0a00 	mov.w	sl, #0
 800b810:	bfcc      	ite	gt
 800b812:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b816:	ea02 0b01 	andle.w	fp, r2, r1
 800b81a:	2200      	movs	r2, #0
 800b81c:	2300      	movs	r3, #0
 800b81e:	4650      	mov	r0, sl
 800b820:	4659      	mov	r1, fp
 800b822:	f7f5 f961 	bl	8000ae8 <__aeabi_dcmpeq>
 800b826:	2800      	cmp	r0, #0
 800b828:	d1a2      	bne.n	800b770 <_strtod_l+0x578>
 800b82a:	9b07      	ldr	r3, [sp, #28]
 800b82c:	9300      	str	r3, [sp, #0]
 800b82e:	9908      	ldr	r1, [sp, #32]
 800b830:	462b      	mov	r3, r5
 800b832:	463a      	mov	r2, r7
 800b834:	4620      	mov	r0, r4
 800b836:	f002 f9c5 	bl	800dbc4 <__s2b>
 800b83a:	9007      	str	r0, [sp, #28]
 800b83c:	2800      	cmp	r0, #0
 800b83e:	f43f af1f 	beq.w	800b680 <_strtod_l+0x488>
 800b842:	9b05      	ldr	r3, [sp, #20]
 800b844:	1b9e      	subs	r6, r3, r6
 800b846:	9b06      	ldr	r3, [sp, #24]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	bfb4      	ite	lt
 800b84c:	4633      	movlt	r3, r6
 800b84e:	2300      	movge	r3, #0
 800b850:	930c      	str	r3, [sp, #48]	; 0x30
 800b852:	9b06      	ldr	r3, [sp, #24]
 800b854:	2500      	movs	r5, #0
 800b856:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b85a:	9312      	str	r3, [sp, #72]	; 0x48
 800b85c:	462e      	mov	r6, r5
 800b85e:	9b07      	ldr	r3, [sp, #28]
 800b860:	4620      	mov	r0, r4
 800b862:	6859      	ldr	r1, [r3, #4]
 800b864:	f002 f906 	bl	800da74 <_Balloc>
 800b868:	9005      	str	r0, [sp, #20]
 800b86a:	2800      	cmp	r0, #0
 800b86c:	f43f af0c 	beq.w	800b688 <_strtod_l+0x490>
 800b870:	9b07      	ldr	r3, [sp, #28]
 800b872:	691a      	ldr	r2, [r3, #16]
 800b874:	3202      	adds	r2, #2
 800b876:	f103 010c 	add.w	r1, r3, #12
 800b87a:	0092      	lsls	r2, r2, #2
 800b87c:	300c      	adds	r0, #12
 800b87e:	f002 f8c5 	bl	800da0c <memcpy>
 800b882:	ec4b ab10 	vmov	d0, sl, fp
 800b886:	aa1a      	add	r2, sp, #104	; 0x68
 800b888:	a919      	add	r1, sp, #100	; 0x64
 800b88a:	4620      	mov	r0, r4
 800b88c:	f002 fce0 	bl	800e250 <__d2b>
 800b890:	ec4b ab18 	vmov	d8, sl, fp
 800b894:	9018      	str	r0, [sp, #96]	; 0x60
 800b896:	2800      	cmp	r0, #0
 800b898:	f43f aef6 	beq.w	800b688 <_strtod_l+0x490>
 800b89c:	2101      	movs	r1, #1
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f002 fa2a 	bl	800dcf8 <__i2b>
 800b8a4:	4606      	mov	r6, r0
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	f43f aeee 	beq.w	800b688 <_strtod_l+0x490>
 800b8ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b8ae:	9904      	ldr	r1, [sp, #16]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	bfab      	itete	ge
 800b8b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b8b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b8b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b8ba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b8be:	bfac      	ite	ge
 800b8c0:	eb03 0902 	addge.w	r9, r3, r2
 800b8c4:	1ad7      	sublt	r7, r2, r3
 800b8c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b8c8:	eba3 0801 	sub.w	r8, r3, r1
 800b8cc:	4490      	add	r8, r2
 800b8ce:	4ba1      	ldr	r3, [pc, #644]	; (800bb54 <_strtod_l+0x95c>)
 800b8d0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b8d4:	4598      	cmp	r8, r3
 800b8d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b8da:	f280 80c7 	bge.w	800ba6c <_strtod_l+0x874>
 800b8de:	eba3 0308 	sub.w	r3, r3, r8
 800b8e2:	2b1f      	cmp	r3, #31
 800b8e4:	eba2 0203 	sub.w	r2, r2, r3
 800b8e8:	f04f 0101 	mov.w	r1, #1
 800b8ec:	f300 80b1 	bgt.w	800ba52 <_strtod_l+0x85a>
 800b8f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b8f4:	930d      	str	r3, [sp, #52]	; 0x34
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	9308      	str	r3, [sp, #32]
 800b8fa:	eb09 0802 	add.w	r8, r9, r2
 800b8fe:	9b04      	ldr	r3, [sp, #16]
 800b900:	45c1      	cmp	r9, r8
 800b902:	4417      	add	r7, r2
 800b904:	441f      	add	r7, r3
 800b906:	464b      	mov	r3, r9
 800b908:	bfa8      	it	ge
 800b90a:	4643      	movge	r3, r8
 800b90c:	42bb      	cmp	r3, r7
 800b90e:	bfa8      	it	ge
 800b910:	463b      	movge	r3, r7
 800b912:	2b00      	cmp	r3, #0
 800b914:	bfc2      	ittt	gt
 800b916:	eba8 0803 	subgt.w	r8, r8, r3
 800b91a:	1aff      	subgt	r7, r7, r3
 800b91c:	eba9 0903 	subgt.w	r9, r9, r3
 800b920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b922:	2b00      	cmp	r3, #0
 800b924:	dd17      	ble.n	800b956 <_strtod_l+0x75e>
 800b926:	4631      	mov	r1, r6
 800b928:	461a      	mov	r2, r3
 800b92a:	4620      	mov	r0, r4
 800b92c:	f002 faa4 	bl	800de78 <__pow5mult>
 800b930:	4606      	mov	r6, r0
 800b932:	2800      	cmp	r0, #0
 800b934:	f43f aea8 	beq.w	800b688 <_strtod_l+0x490>
 800b938:	4601      	mov	r1, r0
 800b93a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b93c:	4620      	mov	r0, r4
 800b93e:	f002 f9f1 	bl	800dd24 <__multiply>
 800b942:	900b      	str	r0, [sp, #44]	; 0x2c
 800b944:	2800      	cmp	r0, #0
 800b946:	f43f ae9f 	beq.w	800b688 <_strtod_l+0x490>
 800b94a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b94c:	4620      	mov	r0, r4
 800b94e:	f002 f8d1 	bl	800daf4 <_Bfree>
 800b952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b954:	9318      	str	r3, [sp, #96]	; 0x60
 800b956:	f1b8 0f00 	cmp.w	r8, #0
 800b95a:	f300 808c 	bgt.w	800ba76 <_strtod_l+0x87e>
 800b95e:	9b06      	ldr	r3, [sp, #24]
 800b960:	2b00      	cmp	r3, #0
 800b962:	dd08      	ble.n	800b976 <_strtod_l+0x77e>
 800b964:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b966:	9905      	ldr	r1, [sp, #20]
 800b968:	4620      	mov	r0, r4
 800b96a:	f002 fa85 	bl	800de78 <__pow5mult>
 800b96e:	9005      	str	r0, [sp, #20]
 800b970:	2800      	cmp	r0, #0
 800b972:	f43f ae89 	beq.w	800b688 <_strtod_l+0x490>
 800b976:	2f00      	cmp	r7, #0
 800b978:	dd08      	ble.n	800b98c <_strtod_l+0x794>
 800b97a:	9905      	ldr	r1, [sp, #20]
 800b97c:	463a      	mov	r2, r7
 800b97e:	4620      	mov	r0, r4
 800b980:	f002 fad4 	bl	800df2c <__lshift>
 800b984:	9005      	str	r0, [sp, #20]
 800b986:	2800      	cmp	r0, #0
 800b988:	f43f ae7e 	beq.w	800b688 <_strtod_l+0x490>
 800b98c:	f1b9 0f00 	cmp.w	r9, #0
 800b990:	dd08      	ble.n	800b9a4 <_strtod_l+0x7ac>
 800b992:	4631      	mov	r1, r6
 800b994:	464a      	mov	r2, r9
 800b996:	4620      	mov	r0, r4
 800b998:	f002 fac8 	bl	800df2c <__lshift>
 800b99c:	4606      	mov	r6, r0
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	f43f ae72 	beq.w	800b688 <_strtod_l+0x490>
 800b9a4:	9a05      	ldr	r2, [sp, #20]
 800b9a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	f002 fb4b 	bl	800e044 <__mdiff>
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	f43f ae69 	beq.w	800b688 <_strtod_l+0x490>
 800b9b6:	68c3      	ldr	r3, [r0, #12]
 800b9b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	60c3      	str	r3, [r0, #12]
 800b9be:	4631      	mov	r1, r6
 800b9c0:	f002 fb24 	bl	800e00c <__mcmp>
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	da60      	bge.n	800ba8a <_strtod_l+0x892>
 800b9c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9ca:	ea53 030a 	orrs.w	r3, r3, sl
 800b9ce:	f040 8082 	bne.w	800bad6 <_strtod_l+0x8de>
 800b9d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d17d      	bne.n	800bad6 <_strtod_l+0x8de>
 800b9da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b9de:	0d1b      	lsrs	r3, r3, #20
 800b9e0:	051b      	lsls	r3, r3, #20
 800b9e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b9e6:	d976      	bls.n	800bad6 <_strtod_l+0x8de>
 800b9e8:	696b      	ldr	r3, [r5, #20]
 800b9ea:	b913      	cbnz	r3, 800b9f2 <_strtod_l+0x7fa>
 800b9ec:	692b      	ldr	r3, [r5, #16]
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	dd71      	ble.n	800bad6 <_strtod_l+0x8de>
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f002 fa98 	bl	800df2c <__lshift>
 800b9fc:	4631      	mov	r1, r6
 800b9fe:	4605      	mov	r5, r0
 800ba00:	f002 fb04 	bl	800e00c <__mcmp>
 800ba04:	2800      	cmp	r0, #0
 800ba06:	dd66      	ble.n	800bad6 <_strtod_l+0x8de>
 800ba08:	9904      	ldr	r1, [sp, #16]
 800ba0a:	4a53      	ldr	r2, [pc, #332]	; (800bb58 <_strtod_l+0x960>)
 800ba0c:	465b      	mov	r3, fp
 800ba0e:	2900      	cmp	r1, #0
 800ba10:	f000 8081 	beq.w	800bb16 <_strtod_l+0x91e>
 800ba14:	ea02 010b 	and.w	r1, r2, fp
 800ba18:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ba1c:	dc7b      	bgt.n	800bb16 <_strtod_l+0x91e>
 800ba1e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ba22:	f77f aea9 	ble.w	800b778 <_strtod_l+0x580>
 800ba26:	4b4d      	ldr	r3, [pc, #308]	; (800bb5c <_strtod_l+0x964>)
 800ba28:	4650      	mov	r0, sl
 800ba2a:	4659      	mov	r1, fp
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f7f4 fdf3 	bl	8000618 <__aeabi_dmul>
 800ba32:	460b      	mov	r3, r1
 800ba34:	4303      	orrs	r3, r0
 800ba36:	bf08      	it	eq
 800ba38:	2322      	moveq	r3, #34	; 0x22
 800ba3a:	4682      	mov	sl, r0
 800ba3c:	468b      	mov	fp, r1
 800ba3e:	bf08      	it	eq
 800ba40:	6023      	streq	r3, [r4, #0]
 800ba42:	e62b      	b.n	800b69c <_strtod_l+0x4a4>
 800ba44:	f04f 32ff 	mov.w	r2, #4294967295
 800ba48:	fa02 f303 	lsl.w	r3, r2, r3
 800ba4c:	ea03 0a0a 	and.w	sl, r3, sl
 800ba50:	e6e3      	b.n	800b81a <_strtod_l+0x622>
 800ba52:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ba56:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ba5a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ba5e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ba62:	fa01 f308 	lsl.w	r3, r1, r8
 800ba66:	9308      	str	r3, [sp, #32]
 800ba68:	910d      	str	r1, [sp, #52]	; 0x34
 800ba6a:	e746      	b.n	800b8fa <_strtod_l+0x702>
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	9308      	str	r3, [sp, #32]
 800ba70:	2301      	movs	r3, #1
 800ba72:	930d      	str	r3, [sp, #52]	; 0x34
 800ba74:	e741      	b.n	800b8fa <_strtod_l+0x702>
 800ba76:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ba78:	4642      	mov	r2, r8
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f002 fa56 	bl	800df2c <__lshift>
 800ba80:	9018      	str	r0, [sp, #96]	; 0x60
 800ba82:	2800      	cmp	r0, #0
 800ba84:	f47f af6b 	bne.w	800b95e <_strtod_l+0x766>
 800ba88:	e5fe      	b.n	800b688 <_strtod_l+0x490>
 800ba8a:	465f      	mov	r7, fp
 800ba8c:	d16e      	bne.n	800bb6c <_strtod_l+0x974>
 800ba8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba94:	b342      	cbz	r2, 800bae8 <_strtod_l+0x8f0>
 800ba96:	4a32      	ldr	r2, [pc, #200]	; (800bb60 <_strtod_l+0x968>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d128      	bne.n	800baee <_strtod_l+0x8f6>
 800ba9c:	9b04      	ldr	r3, [sp, #16]
 800ba9e:	4651      	mov	r1, sl
 800baa0:	b1eb      	cbz	r3, 800bade <_strtod_l+0x8e6>
 800baa2:	4b2d      	ldr	r3, [pc, #180]	; (800bb58 <_strtod_l+0x960>)
 800baa4:	403b      	ands	r3, r7
 800baa6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800baaa:	f04f 32ff 	mov.w	r2, #4294967295
 800baae:	d819      	bhi.n	800bae4 <_strtod_l+0x8ec>
 800bab0:	0d1b      	lsrs	r3, r3, #20
 800bab2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bab6:	fa02 f303 	lsl.w	r3, r2, r3
 800baba:	4299      	cmp	r1, r3
 800babc:	d117      	bne.n	800baee <_strtod_l+0x8f6>
 800babe:	4b29      	ldr	r3, [pc, #164]	; (800bb64 <_strtod_l+0x96c>)
 800bac0:	429f      	cmp	r7, r3
 800bac2:	d102      	bne.n	800baca <_strtod_l+0x8d2>
 800bac4:	3101      	adds	r1, #1
 800bac6:	f43f addf 	beq.w	800b688 <_strtod_l+0x490>
 800baca:	4b23      	ldr	r3, [pc, #140]	; (800bb58 <_strtod_l+0x960>)
 800bacc:	403b      	ands	r3, r7
 800bace:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bad2:	f04f 0a00 	mov.w	sl, #0
 800bad6:	9b04      	ldr	r3, [sp, #16]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1a4      	bne.n	800ba26 <_strtod_l+0x82e>
 800badc:	e5de      	b.n	800b69c <_strtod_l+0x4a4>
 800bade:	f04f 33ff 	mov.w	r3, #4294967295
 800bae2:	e7ea      	b.n	800baba <_strtod_l+0x8c2>
 800bae4:	4613      	mov	r3, r2
 800bae6:	e7e8      	b.n	800baba <_strtod_l+0x8c2>
 800bae8:	ea53 030a 	orrs.w	r3, r3, sl
 800baec:	d08c      	beq.n	800ba08 <_strtod_l+0x810>
 800baee:	9b08      	ldr	r3, [sp, #32]
 800baf0:	b1db      	cbz	r3, 800bb2a <_strtod_l+0x932>
 800baf2:	423b      	tst	r3, r7
 800baf4:	d0ef      	beq.n	800bad6 <_strtod_l+0x8de>
 800baf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baf8:	9a04      	ldr	r2, [sp, #16]
 800bafa:	4650      	mov	r0, sl
 800bafc:	4659      	mov	r1, fp
 800bafe:	b1c3      	cbz	r3, 800bb32 <_strtod_l+0x93a>
 800bb00:	f7ff fb5b 	bl	800b1ba <sulp>
 800bb04:	4602      	mov	r2, r0
 800bb06:	460b      	mov	r3, r1
 800bb08:	ec51 0b18 	vmov	r0, r1, d8
 800bb0c:	f7f4 fbce 	bl	80002ac <__adddf3>
 800bb10:	4682      	mov	sl, r0
 800bb12:	468b      	mov	fp, r1
 800bb14:	e7df      	b.n	800bad6 <_strtod_l+0x8de>
 800bb16:	4013      	ands	r3, r2
 800bb18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bb1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bb20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bb24:	f04f 3aff 	mov.w	sl, #4294967295
 800bb28:	e7d5      	b.n	800bad6 <_strtod_l+0x8de>
 800bb2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb2c:	ea13 0f0a 	tst.w	r3, sl
 800bb30:	e7e0      	b.n	800baf4 <_strtod_l+0x8fc>
 800bb32:	f7ff fb42 	bl	800b1ba <sulp>
 800bb36:	4602      	mov	r2, r0
 800bb38:	460b      	mov	r3, r1
 800bb3a:	ec51 0b18 	vmov	r0, r1, d8
 800bb3e:	f7f4 fbb3 	bl	80002a8 <__aeabi_dsub>
 800bb42:	2200      	movs	r2, #0
 800bb44:	2300      	movs	r3, #0
 800bb46:	4682      	mov	sl, r0
 800bb48:	468b      	mov	fp, r1
 800bb4a:	f7f4 ffcd 	bl	8000ae8 <__aeabi_dcmpeq>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d0c1      	beq.n	800bad6 <_strtod_l+0x8de>
 800bb52:	e611      	b.n	800b778 <_strtod_l+0x580>
 800bb54:	fffffc02 	.word	0xfffffc02
 800bb58:	7ff00000 	.word	0x7ff00000
 800bb5c:	39500000 	.word	0x39500000
 800bb60:	000fffff 	.word	0x000fffff
 800bb64:	7fefffff 	.word	0x7fefffff
 800bb68:	0800f418 	.word	0x0800f418
 800bb6c:	4631      	mov	r1, r6
 800bb6e:	4628      	mov	r0, r5
 800bb70:	f002 fbca 	bl	800e308 <__ratio>
 800bb74:	ec59 8b10 	vmov	r8, r9, d0
 800bb78:	ee10 0a10 	vmov	r0, s0
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb82:	4649      	mov	r1, r9
 800bb84:	f7f4 ffc4 	bl	8000b10 <__aeabi_dcmple>
 800bb88:	2800      	cmp	r0, #0
 800bb8a:	d07a      	beq.n	800bc82 <_strtod_l+0xa8a>
 800bb8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d04a      	beq.n	800bc28 <_strtod_l+0xa30>
 800bb92:	4b95      	ldr	r3, [pc, #596]	; (800bde8 <_strtod_l+0xbf0>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bb9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bde8 <_strtod_l+0xbf0>
 800bb9e:	f04f 0800 	mov.w	r8, #0
 800bba2:	4b92      	ldr	r3, [pc, #584]	; (800bdec <_strtod_l+0xbf4>)
 800bba4:	403b      	ands	r3, r7
 800bba6:	930d      	str	r3, [sp, #52]	; 0x34
 800bba8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbaa:	4b91      	ldr	r3, [pc, #580]	; (800bdf0 <_strtod_l+0xbf8>)
 800bbac:	429a      	cmp	r2, r3
 800bbae:	f040 80b0 	bne.w	800bd12 <_strtod_l+0xb1a>
 800bbb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bbb6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bbba:	ec4b ab10 	vmov	d0, sl, fp
 800bbbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bbc2:	f002 fac9 	bl	800e158 <__ulp>
 800bbc6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bbca:	ec53 2b10 	vmov	r2, r3, d0
 800bbce:	f7f4 fd23 	bl	8000618 <__aeabi_dmul>
 800bbd2:	4652      	mov	r2, sl
 800bbd4:	465b      	mov	r3, fp
 800bbd6:	f7f4 fb69 	bl	80002ac <__adddf3>
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4983      	ldr	r1, [pc, #524]	; (800bdec <_strtod_l+0xbf4>)
 800bbde:	4a85      	ldr	r2, [pc, #532]	; (800bdf4 <_strtod_l+0xbfc>)
 800bbe0:	4019      	ands	r1, r3
 800bbe2:	4291      	cmp	r1, r2
 800bbe4:	4682      	mov	sl, r0
 800bbe6:	d960      	bls.n	800bcaa <_strtod_l+0xab2>
 800bbe8:	ee18 3a90 	vmov	r3, s17
 800bbec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d104      	bne.n	800bbfe <_strtod_l+0xa06>
 800bbf4:	ee18 3a10 	vmov	r3, s16
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	f43f ad45 	beq.w	800b688 <_strtod_l+0x490>
 800bbfe:	f8df b200 	ldr.w	fp, [pc, #512]	; 800be00 <_strtod_l+0xc08>
 800bc02:	f04f 3aff 	mov.w	sl, #4294967295
 800bc06:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f001 ff73 	bl	800daf4 <_Bfree>
 800bc0e:	9905      	ldr	r1, [sp, #20]
 800bc10:	4620      	mov	r0, r4
 800bc12:	f001 ff6f 	bl	800daf4 <_Bfree>
 800bc16:	4631      	mov	r1, r6
 800bc18:	4620      	mov	r0, r4
 800bc1a:	f001 ff6b 	bl	800daf4 <_Bfree>
 800bc1e:	4629      	mov	r1, r5
 800bc20:	4620      	mov	r0, r4
 800bc22:	f001 ff67 	bl	800daf4 <_Bfree>
 800bc26:	e61a      	b.n	800b85e <_strtod_l+0x666>
 800bc28:	f1ba 0f00 	cmp.w	sl, #0
 800bc2c:	d11b      	bne.n	800bc66 <_strtod_l+0xa6e>
 800bc2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc32:	b9f3      	cbnz	r3, 800bc72 <_strtod_l+0xa7a>
 800bc34:	4b6c      	ldr	r3, [pc, #432]	; (800bde8 <_strtod_l+0xbf0>)
 800bc36:	2200      	movs	r2, #0
 800bc38:	4640      	mov	r0, r8
 800bc3a:	4649      	mov	r1, r9
 800bc3c:	f7f4 ff5e 	bl	8000afc <__aeabi_dcmplt>
 800bc40:	b9d0      	cbnz	r0, 800bc78 <_strtod_l+0xa80>
 800bc42:	4640      	mov	r0, r8
 800bc44:	4649      	mov	r1, r9
 800bc46:	4b6c      	ldr	r3, [pc, #432]	; (800bdf8 <_strtod_l+0xc00>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f7f4 fce5 	bl	8000618 <__aeabi_dmul>
 800bc4e:	4680      	mov	r8, r0
 800bc50:	4689      	mov	r9, r1
 800bc52:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bc56:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800bc5a:	9315      	str	r3, [sp, #84]	; 0x54
 800bc5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bc60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bc64:	e79d      	b.n	800bba2 <_strtod_l+0x9aa>
 800bc66:	f1ba 0f01 	cmp.w	sl, #1
 800bc6a:	d102      	bne.n	800bc72 <_strtod_l+0xa7a>
 800bc6c:	2f00      	cmp	r7, #0
 800bc6e:	f43f ad83 	beq.w	800b778 <_strtod_l+0x580>
 800bc72:	4b62      	ldr	r3, [pc, #392]	; (800bdfc <_strtod_l+0xc04>)
 800bc74:	2200      	movs	r2, #0
 800bc76:	e78e      	b.n	800bb96 <_strtod_l+0x99e>
 800bc78:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800bdf8 <_strtod_l+0xc00>
 800bc7c:	f04f 0800 	mov.w	r8, #0
 800bc80:	e7e7      	b.n	800bc52 <_strtod_l+0xa5a>
 800bc82:	4b5d      	ldr	r3, [pc, #372]	; (800bdf8 <_strtod_l+0xc00>)
 800bc84:	4640      	mov	r0, r8
 800bc86:	4649      	mov	r1, r9
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f7f4 fcc5 	bl	8000618 <__aeabi_dmul>
 800bc8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc90:	4680      	mov	r8, r0
 800bc92:	4689      	mov	r9, r1
 800bc94:	b933      	cbnz	r3, 800bca4 <_strtod_l+0xaac>
 800bc96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc9a:	900e      	str	r0, [sp, #56]	; 0x38
 800bc9c:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bca2:	e7dd      	b.n	800bc60 <_strtod_l+0xa68>
 800bca4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800bca8:	e7f9      	b.n	800bc9e <_strtod_l+0xaa6>
 800bcaa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bcae:	9b04      	ldr	r3, [sp, #16]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d1a8      	bne.n	800bc06 <_strtod_l+0xa0e>
 800bcb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bcb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bcba:	0d1b      	lsrs	r3, r3, #20
 800bcbc:	051b      	lsls	r3, r3, #20
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d1a1      	bne.n	800bc06 <_strtod_l+0xa0e>
 800bcc2:	4640      	mov	r0, r8
 800bcc4:	4649      	mov	r1, r9
 800bcc6:	f7f5 f807 	bl	8000cd8 <__aeabi_d2lz>
 800bcca:	f7f4 fc77 	bl	80005bc <__aeabi_l2d>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	4640      	mov	r0, r8
 800bcd4:	4649      	mov	r1, r9
 800bcd6:	f7f4 fae7 	bl	80002a8 <__aeabi_dsub>
 800bcda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bcdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bce0:	ea43 030a 	orr.w	r3, r3, sl
 800bce4:	4313      	orrs	r3, r2
 800bce6:	4680      	mov	r8, r0
 800bce8:	4689      	mov	r9, r1
 800bcea:	d055      	beq.n	800bd98 <_strtod_l+0xba0>
 800bcec:	a336      	add	r3, pc, #216	; (adr r3, 800bdc8 <_strtod_l+0xbd0>)
 800bcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf2:	f7f4 ff03 	bl	8000afc <__aeabi_dcmplt>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	f47f acd0 	bne.w	800b69c <_strtod_l+0x4a4>
 800bcfc:	a334      	add	r3, pc, #208	; (adr r3, 800bdd0 <_strtod_l+0xbd8>)
 800bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd02:	4640      	mov	r0, r8
 800bd04:	4649      	mov	r1, r9
 800bd06:	f7f4 ff17 	bl	8000b38 <__aeabi_dcmpgt>
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	f43f af7b 	beq.w	800bc06 <_strtod_l+0xa0e>
 800bd10:	e4c4      	b.n	800b69c <_strtod_l+0x4a4>
 800bd12:	9b04      	ldr	r3, [sp, #16]
 800bd14:	b333      	cbz	r3, 800bd64 <_strtod_l+0xb6c>
 800bd16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd18:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bd1c:	d822      	bhi.n	800bd64 <_strtod_l+0xb6c>
 800bd1e:	a32e      	add	r3, pc, #184	; (adr r3, 800bdd8 <_strtod_l+0xbe0>)
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	4640      	mov	r0, r8
 800bd26:	4649      	mov	r1, r9
 800bd28:	f7f4 fef2 	bl	8000b10 <__aeabi_dcmple>
 800bd2c:	b1a0      	cbz	r0, 800bd58 <_strtod_l+0xb60>
 800bd2e:	4649      	mov	r1, r9
 800bd30:	4640      	mov	r0, r8
 800bd32:	f7f4 ff49 	bl	8000bc8 <__aeabi_d2uiz>
 800bd36:	2801      	cmp	r0, #1
 800bd38:	bf38      	it	cc
 800bd3a:	2001      	movcc	r0, #1
 800bd3c:	f7f4 fbf2 	bl	8000524 <__aeabi_ui2d>
 800bd40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd42:	4680      	mov	r8, r0
 800bd44:	4689      	mov	r9, r1
 800bd46:	bb23      	cbnz	r3, 800bd92 <_strtod_l+0xb9a>
 800bd48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd4c:	9010      	str	r0, [sp, #64]	; 0x40
 800bd4e:	9311      	str	r3, [sp, #68]	; 0x44
 800bd50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bd54:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bd58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd5c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bd60:	1a9b      	subs	r3, r3, r2
 800bd62:	9309      	str	r3, [sp, #36]	; 0x24
 800bd64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd68:	eeb0 0a48 	vmov.f32	s0, s16
 800bd6c:	eef0 0a68 	vmov.f32	s1, s17
 800bd70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bd74:	f002 f9f0 	bl	800e158 <__ulp>
 800bd78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd7c:	ec53 2b10 	vmov	r2, r3, d0
 800bd80:	f7f4 fc4a 	bl	8000618 <__aeabi_dmul>
 800bd84:	ec53 2b18 	vmov	r2, r3, d8
 800bd88:	f7f4 fa90 	bl	80002ac <__adddf3>
 800bd8c:	4682      	mov	sl, r0
 800bd8e:	468b      	mov	fp, r1
 800bd90:	e78d      	b.n	800bcae <_strtod_l+0xab6>
 800bd92:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800bd96:	e7db      	b.n	800bd50 <_strtod_l+0xb58>
 800bd98:	a311      	add	r3, pc, #68	; (adr r3, 800bde0 <_strtod_l+0xbe8>)
 800bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9e:	f7f4 fead 	bl	8000afc <__aeabi_dcmplt>
 800bda2:	e7b2      	b.n	800bd0a <_strtod_l+0xb12>
 800bda4:	2300      	movs	r3, #0
 800bda6:	930a      	str	r3, [sp, #40]	; 0x28
 800bda8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bdaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdac:	6013      	str	r3, [r2, #0]
 800bdae:	f7ff ba6b 	b.w	800b288 <_strtod_l+0x90>
 800bdb2:	2a65      	cmp	r2, #101	; 0x65
 800bdb4:	f43f ab5f 	beq.w	800b476 <_strtod_l+0x27e>
 800bdb8:	2a45      	cmp	r2, #69	; 0x45
 800bdba:	f43f ab5c 	beq.w	800b476 <_strtod_l+0x27e>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	f7ff bb94 	b.w	800b4ec <_strtod_l+0x2f4>
 800bdc4:	f3af 8000 	nop.w
 800bdc8:	94a03595 	.word	0x94a03595
 800bdcc:	3fdfffff 	.word	0x3fdfffff
 800bdd0:	35afe535 	.word	0x35afe535
 800bdd4:	3fe00000 	.word	0x3fe00000
 800bdd8:	ffc00000 	.word	0xffc00000
 800bddc:	41dfffff 	.word	0x41dfffff
 800bde0:	94a03595 	.word	0x94a03595
 800bde4:	3fcfffff 	.word	0x3fcfffff
 800bde8:	3ff00000 	.word	0x3ff00000
 800bdec:	7ff00000 	.word	0x7ff00000
 800bdf0:	7fe00000 	.word	0x7fe00000
 800bdf4:	7c9fffff 	.word	0x7c9fffff
 800bdf8:	3fe00000 	.word	0x3fe00000
 800bdfc:	bff00000 	.word	0xbff00000
 800be00:	7fefffff 	.word	0x7fefffff

0800be04 <_strtod_r>:
 800be04:	4b01      	ldr	r3, [pc, #4]	; (800be0c <_strtod_r+0x8>)
 800be06:	f7ff b9f7 	b.w	800b1f8 <_strtod_l>
 800be0a:	bf00      	nop
 800be0c:	20000fd8 	.word	0x20000fd8

0800be10 <strtok>:
 800be10:	4b16      	ldr	r3, [pc, #88]	; (800be6c <strtok+0x5c>)
 800be12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be14:	681e      	ldr	r6, [r3, #0]
 800be16:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800be18:	4605      	mov	r5, r0
 800be1a:	b9fc      	cbnz	r4, 800be5c <strtok+0x4c>
 800be1c:	2050      	movs	r0, #80	; 0x50
 800be1e:	9101      	str	r1, [sp, #4]
 800be20:	f7fe f824 	bl	8009e6c <malloc>
 800be24:	9901      	ldr	r1, [sp, #4]
 800be26:	65b0      	str	r0, [r6, #88]	; 0x58
 800be28:	4602      	mov	r2, r0
 800be2a:	b920      	cbnz	r0, 800be36 <strtok+0x26>
 800be2c:	4b10      	ldr	r3, [pc, #64]	; (800be70 <strtok+0x60>)
 800be2e:	4811      	ldr	r0, [pc, #68]	; (800be74 <strtok+0x64>)
 800be30:	2157      	movs	r1, #87	; 0x57
 800be32:	f7fd ffc1 	bl	8009db8 <__assert_func>
 800be36:	e9c0 4400 	strd	r4, r4, [r0]
 800be3a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800be3e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800be42:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800be46:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800be4a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800be4e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800be52:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800be56:	6184      	str	r4, [r0, #24]
 800be58:	7704      	strb	r4, [r0, #28]
 800be5a:	6244      	str	r4, [r0, #36]	; 0x24
 800be5c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800be5e:	2301      	movs	r3, #1
 800be60:	4628      	mov	r0, r5
 800be62:	b002      	add	sp, #8
 800be64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be68:	f000 b806 	b.w	800be78 <__strtok_r>
 800be6c:	20000f70 	.word	0x20000f70
 800be70:	0800f440 	.word	0x0800f440
 800be74:	0800f457 	.word	0x0800f457

0800be78 <__strtok_r>:
 800be78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be7a:	b908      	cbnz	r0, 800be80 <__strtok_r+0x8>
 800be7c:	6810      	ldr	r0, [r2, #0]
 800be7e:	b188      	cbz	r0, 800bea4 <__strtok_r+0x2c>
 800be80:	4604      	mov	r4, r0
 800be82:	4620      	mov	r0, r4
 800be84:	f814 5b01 	ldrb.w	r5, [r4], #1
 800be88:	460f      	mov	r7, r1
 800be8a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800be8e:	b91e      	cbnz	r6, 800be98 <__strtok_r+0x20>
 800be90:	b965      	cbnz	r5, 800beac <__strtok_r+0x34>
 800be92:	6015      	str	r5, [r2, #0]
 800be94:	4628      	mov	r0, r5
 800be96:	e005      	b.n	800bea4 <__strtok_r+0x2c>
 800be98:	42b5      	cmp	r5, r6
 800be9a:	d1f6      	bne.n	800be8a <__strtok_r+0x12>
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d1f0      	bne.n	800be82 <__strtok_r+0xa>
 800bea0:	6014      	str	r4, [r2, #0]
 800bea2:	7003      	strb	r3, [r0, #0]
 800bea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bea6:	461c      	mov	r4, r3
 800bea8:	e00c      	b.n	800bec4 <__strtok_r+0x4c>
 800beaa:	b915      	cbnz	r5, 800beb2 <__strtok_r+0x3a>
 800beac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800beb0:	460e      	mov	r6, r1
 800beb2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800beb6:	42ab      	cmp	r3, r5
 800beb8:	d1f7      	bne.n	800beaa <__strtok_r+0x32>
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d0f3      	beq.n	800bea6 <__strtok_r+0x2e>
 800bebe:	2300      	movs	r3, #0
 800bec0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800bec4:	6014      	str	r4, [r2, #0]
 800bec6:	e7ed      	b.n	800bea4 <__strtok_r+0x2c>

0800bec8 <_strtol_l.constprop.0>:
 800bec8:	2b01      	cmp	r3, #1
 800beca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bece:	d001      	beq.n	800bed4 <_strtol_l.constprop.0+0xc>
 800bed0:	2b24      	cmp	r3, #36	; 0x24
 800bed2:	d906      	bls.n	800bee2 <_strtol_l.constprop.0+0x1a>
 800bed4:	f7fd ff8e 	bl	8009df4 <__errno>
 800bed8:	2316      	movs	r3, #22
 800beda:	6003      	str	r3, [r0, #0]
 800bedc:	2000      	movs	r0, #0
 800bede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bee2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bfc8 <_strtol_l.constprop.0+0x100>
 800bee6:	460d      	mov	r5, r1
 800bee8:	462e      	mov	r6, r5
 800beea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800beee:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bef2:	f017 0708 	ands.w	r7, r7, #8
 800bef6:	d1f7      	bne.n	800bee8 <_strtol_l.constprop.0+0x20>
 800bef8:	2c2d      	cmp	r4, #45	; 0x2d
 800befa:	d132      	bne.n	800bf62 <_strtol_l.constprop.0+0x9a>
 800befc:	782c      	ldrb	r4, [r5, #0]
 800befe:	2701      	movs	r7, #1
 800bf00:	1cb5      	adds	r5, r6, #2
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d05b      	beq.n	800bfbe <_strtol_l.constprop.0+0xf6>
 800bf06:	2b10      	cmp	r3, #16
 800bf08:	d109      	bne.n	800bf1e <_strtol_l.constprop.0+0x56>
 800bf0a:	2c30      	cmp	r4, #48	; 0x30
 800bf0c:	d107      	bne.n	800bf1e <_strtol_l.constprop.0+0x56>
 800bf0e:	782c      	ldrb	r4, [r5, #0]
 800bf10:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bf14:	2c58      	cmp	r4, #88	; 0x58
 800bf16:	d14d      	bne.n	800bfb4 <_strtol_l.constprop.0+0xec>
 800bf18:	786c      	ldrb	r4, [r5, #1]
 800bf1a:	2310      	movs	r3, #16
 800bf1c:	3502      	adds	r5, #2
 800bf1e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bf22:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf26:	f04f 0c00 	mov.w	ip, #0
 800bf2a:	fbb8 f9f3 	udiv	r9, r8, r3
 800bf2e:	4666      	mov	r6, ip
 800bf30:	fb03 8a19 	mls	sl, r3, r9, r8
 800bf34:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bf38:	f1be 0f09 	cmp.w	lr, #9
 800bf3c:	d816      	bhi.n	800bf6c <_strtol_l.constprop.0+0xa4>
 800bf3e:	4674      	mov	r4, lr
 800bf40:	42a3      	cmp	r3, r4
 800bf42:	dd24      	ble.n	800bf8e <_strtol_l.constprop.0+0xc6>
 800bf44:	f1bc 0f00 	cmp.w	ip, #0
 800bf48:	db1e      	blt.n	800bf88 <_strtol_l.constprop.0+0xc0>
 800bf4a:	45b1      	cmp	r9, r6
 800bf4c:	d31c      	bcc.n	800bf88 <_strtol_l.constprop.0+0xc0>
 800bf4e:	d101      	bne.n	800bf54 <_strtol_l.constprop.0+0x8c>
 800bf50:	45a2      	cmp	sl, r4
 800bf52:	db19      	blt.n	800bf88 <_strtol_l.constprop.0+0xc0>
 800bf54:	fb06 4603 	mla	r6, r6, r3, r4
 800bf58:	f04f 0c01 	mov.w	ip, #1
 800bf5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf60:	e7e8      	b.n	800bf34 <_strtol_l.constprop.0+0x6c>
 800bf62:	2c2b      	cmp	r4, #43	; 0x2b
 800bf64:	bf04      	itt	eq
 800bf66:	782c      	ldrbeq	r4, [r5, #0]
 800bf68:	1cb5      	addeq	r5, r6, #2
 800bf6a:	e7ca      	b.n	800bf02 <_strtol_l.constprop.0+0x3a>
 800bf6c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bf70:	f1be 0f19 	cmp.w	lr, #25
 800bf74:	d801      	bhi.n	800bf7a <_strtol_l.constprop.0+0xb2>
 800bf76:	3c37      	subs	r4, #55	; 0x37
 800bf78:	e7e2      	b.n	800bf40 <_strtol_l.constprop.0+0x78>
 800bf7a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bf7e:	f1be 0f19 	cmp.w	lr, #25
 800bf82:	d804      	bhi.n	800bf8e <_strtol_l.constprop.0+0xc6>
 800bf84:	3c57      	subs	r4, #87	; 0x57
 800bf86:	e7db      	b.n	800bf40 <_strtol_l.constprop.0+0x78>
 800bf88:	f04f 3cff 	mov.w	ip, #4294967295
 800bf8c:	e7e6      	b.n	800bf5c <_strtol_l.constprop.0+0x94>
 800bf8e:	f1bc 0f00 	cmp.w	ip, #0
 800bf92:	da05      	bge.n	800bfa0 <_strtol_l.constprop.0+0xd8>
 800bf94:	2322      	movs	r3, #34	; 0x22
 800bf96:	6003      	str	r3, [r0, #0]
 800bf98:	4646      	mov	r6, r8
 800bf9a:	b942      	cbnz	r2, 800bfae <_strtol_l.constprop.0+0xe6>
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	e79e      	b.n	800bede <_strtol_l.constprop.0+0x16>
 800bfa0:	b107      	cbz	r7, 800bfa4 <_strtol_l.constprop.0+0xdc>
 800bfa2:	4276      	negs	r6, r6
 800bfa4:	2a00      	cmp	r2, #0
 800bfa6:	d0f9      	beq.n	800bf9c <_strtol_l.constprop.0+0xd4>
 800bfa8:	f1bc 0f00 	cmp.w	ip, #0
 800bfac:	d000      	beq.n	800bfb0 <_strtol_l.constprop.0+0xe8>
 800bfae:	1e69      	subs	r1, r5, #1
 800bfb0:	6011      	str	r1, [r2, #0]
 800bfb2:	e7f3      	b.n	800bf9c <_strtol_l.constprop.0+0xd4>
 800bfb4:	2430      	movs	r4, #48	; 0x30
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1b1      	bne.n	800bf1e <_strtol_l.constprop.0+0x56>
 800bfba:	2308      	movs	r3, #8
 800bfbc:	e7af      	b.n	800bf1e <_strtol_l.constprop.0+0x56>
 800bfbe:	2c30      	cmp	r4, #48	; 0x30
 800bfc0:	d0a5      	beq.n	800bf0e <_strtol_l.constprop.0+0x46>
 800bfc2:	230a      	movs	r3, #10
 800bfc4:	e7ab      	b.n	800bf1e <_strtol_l.constprop.0+0x56>
 800bfc6:	bf00      	nop
 800bfc8:	0800f4b5 	.word	0x0800f4b5

0800bfcc <_strtol_r>:
 800bfcc:	f7ff bf7c 	b.w	800bec8 <_strtol_l.constprop.0>

0800bfd0 <__swbuf_r>:
 800bfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd2:	460e      	mov	r6, r1
 800bfd4:	4614      	mov	r4, r2
 800bfd6:	4605      	mov	r5, r0
 800bfd8:	b118      	cbz	r0, 800bfe2 <__swbuf_r+0x12>
 800bfda:	6983      	ldr	r3, [r0, #24]
 800bfdc:	b90b      	cbnz	r3, 800bfe2 <__swbuf_r+0x12>
 800bfde:	f001 f877 	bl	800d0d0 <__sinit>
 800bfe2:	4b21      	ldr	r3, [pc, #132]	; (800c068 <__swbuf_r+0x98>)
 800bfe4:	429c      	cmp	r4, r3
 800bfe6:	d12b      	bne.n	800c040 <__swbuf_r+0x70>
 800bfe8:	686c      	ldr	r4, [r5, #4]
 800bfea:	69a3      	ldr	r3, [r4, #24]
 800bfec:	60a3      	str	r3, [r4, #8]
 800bfee:	89a3      	ldrh	r3, [r4, #12]
 800bff0:	071a      	lsls	r2, r3, #28
 800bff2:	d52f      	bpl.n	800c054 <__swbuf_r+0x84>
 800bff4:	6923      	ldr	r3, [r4, #16]
 800bff6:	b36b      	cbz	r3, 800c054 <__swbuf_r+0x84>
 800bff8:	6923      	ldr	r3, [r4, #16]
 800bffa:	6820      	ldr	r0, [r4, #0]
 800bffc:	1ac0      	subs	r0, r0, r3
 800bffe:	6963      	ldr	r3, [r4, #20]
 800c000:	b2f6      	uxtb	r6, r6
 800c002:	4283      	cmp	r3, r0
 800c004:	4637      	mov	r7, r6
 800c006:	dc04      	bgt.n	800c012 <__swbuf_r+0x42>
 800c008:	4621      	mov	r1, r4
 800c00a:	4628      	mov	r0, r5
 800c00c:	f000 ffcc 	bl	800cfa8 <_fflush_r>
 800c010:	bb30      	cbnz	r0, 800c060 <__swbuf_r+0x90>
 800c012:	68a3      	ldr	r3, [r4, #8]
 800c014:	3b01      	subs	r3, #1
 800c016:	60a3      	str	r3, [r4, #8]
 800c018:	6823      	ldr	r3, [r4, #0]
 800c01a:	1c5a      	adds	r2, r3, #1
 800c01c:	6022      	str	r2, [r4, #0]
 800c01e:	701e      	strb	r6, [r3, #0]
 800c020:	6963      	ldr	r3, [r4, #20]
 800c022:	3001      	adds	r0, #1
 800c024:	4283      	cmp	r3, r0
 800c026:	d004      	beq.n	800c032 <__swbuf_r+0x62>
 800c028:	89a3      	ldrh	r3, [r4, #12]
 800c02a:	07db      	lsls	r3, r3, #31
 800c02c:	d506      	bpl.n	800c03c <__swbuf_r+0x6c>
 800c02e:	2e0a      	cmp	r6, #10
 800c030:	d104      	bne.n	800c03c <__swbuf_r+0x6c>
 800c032:	4621      	mov	r1, r4
 800c034:	4628      	mov	r0, r5
 800c036:	f000 ffb7 	bl	800cfa8 <_fflush_r>
 800c03a:	b988      	cbnz	r0, 800c060 <__swbuf_r+0x90>
 800c03c:	4638      	mov	r0, r7
 800c03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c040:	4b0a      	ldr	r3, [pc, #40]	; (800c06c <__swbuf_r+0x9c>)
 800c042:	429c      	cmp	r4, r3
 800c044:	d101      	bne.n	800c04a <__swbuf_r+0x7a>
 800c046:	68ac      	ldr	r4, [r5, #8]
 800c048:	e7cf      	b.n	800bfea <__swbuf_r+0x1a>
 800c04a:	4b09      	ldr	r3, [pc, #36]	; (800c070 <__swbuf_r+0xa0>)
 800c04c:	429c      	cmp	r4, r3
 800c04e:	bf08      	it	eq
 800c050:	68ec      	ldreq	r4, [r5, #12]
 800c052:	e7ca      	b.n	800bfea <__swbuf_r+0x1a>
 800c054:	4621      	mov	r1, r4
 800c056:	4628      	mov	r0, r5
 800c058:	f000 f81e 	bl	800c098 <__swsetup_r>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d0cb      	beq.n	800bff8 <__swbuf_r+0x28>
 800c060:	f04f 37ff 	mov.w	r7, #4294967295
 800c064:	e7ea      	b.n	800c03c <__swbuf_r+0x6c>
 800c066:	bf00      	nop
 800c068:	0800f650 	.word	0x0800f650
 800c06c:	0800f670 	.word	0x0800f670
 800c070:	0800f630 	.word	0x0800f630

0800c074 <_write_r>:
 800c074:	b538      	push	{r3, r4, r5, lr}
 800c076:	4d07      	ldr	r5, [pc, #28]	; (800c094 <_write_r+0x20>)
 800c078:	4604      	mov	r4, r0
 800c07a:	4608      	mov	r0, r1
 800c07c:	4611      	mov	r1, r2
 800c07e:	2200      	movs	r2, #0
 800c080:	602a      	str	r2, [r5, #0]
 800c082:	461a      	mov	r2, r3
 800c084:	f7f9 f873 	bl	800516e <_write>
 800c088:	1c43      	adds	r3, r0, #1
 800c08a:	d102      	bne.n	800c092 <_write_r+0x1e>
 800c08c:	682b      	ldr	r3, [r5, #0]
 800c08e:	b103      	cbz	r3, 800c092 <_write_r+0x1e>
 800c090:	6023      	str	r3, [r4, #0]
 800c092:	bd38      	pop	{r3, r4, r5, pc}
 800c094:	20001c8c 	.word	0x20001c8c

0800c098 <__swsetup_r>:
 800c098:	4b32      	ldr	r3, [pc, #200]	; (800c164 <__swsetup_r+0xcc>)
 800c09a:	b570      	push	{r4, r5, r6, lr}
 800c09c:	681d      	ldr	r5, [r3, #0]
 800c09e:	4606      	mov	r6, r0
 800c0a0:	460c      	mov	r4, r1
 800c0a2:	b125      	cbz	r5, 800c0ae <__swsetup_r+0x16>
 800c0a4:	69ab      	ldr	r3, [r5, #24]
 800c0a6:	b913      	cbnz	r3, 800c0ae <__swsetup_r+0x16>
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	f001 f811 	bl	800d0d0 <__sinit>
 800c0ae:	4b2e      	ldr	r3, [pc, #184]	; (800c168 <__swsetup_r+0xd0>)
 800c0b0:	429c      	cmp	r4, r3
 800c0b2:	d10f      	bne.n	800c0d4 <__swsetup_r+0x3c>
 800c0b4:	686c      	ldr	r4, [r5, #4]
 800c0b6:	89a3      	ldrh	r3, [r4, #12]
 800c0b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0bc:	0719      	lsls	r1, r3, #28
 800c0be:	d42c      	bmi.n	800c11a <__swsetup_r+0x82>
 800c0c0:	06dd      	lsls	r5, r3, #27
 800c0c2:	d411      	bmi.n	800c0e8 <__swsetup_r+0x50>
 800c0c4:	2309      	movs	r3, #9
 800c0c6:	6033      	str	r3, [r6, #0]
 800c0c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c0cc:	81a3      	strh	r3, [r4, #12]
 800c0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d2:	e03e      	b.n	800c152 <__swsetup_r+0xba>
 800c0d4:	4b25      	ldr	r3, [pc, #148]	; (800c16c <__swsetup_r+0xd4>)
 800c0d6:	429c      	cmp	r4, r3
 800c0d8:	d101      	bne.n	800c0de <__swsetup_r+0x46>
 800c0da:	68ac      	ldr	r4, [r5, #8]
 800c0dc:	e7eb      	b.n	800c0b6 <__swsetup_r+0x1e>
 800c0de:	4b24      	ldr	r3, [pc, #144]	; (800c170 <__swsetup_r+0xd8>)
 800c0e0:	429c      	cmp	r4, r3
 800c0e2:	bf08      	it	eq
 800c0e4:	68ec      	ldreq	r4, [r5, #12]
 800c0e6:	e7e6      	b.n	800c0b6 <__swsetup_r+0x1e>
 800c0e8:	0758      	lsls	r0, r3, #29
 800c0ea:	d512      	bpl.n	800c112 <__swsetup_r+0x7a>
 800c0ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0ee:	b141      	cbz	r1, 800c102 <__swsetup_r+0x6a>
 800c0f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0f4:	4299      	cmp	r1, r3
 800c0f6:	d002      	beq.n	800c0fe <__swsetup_r+0x66>
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	f7fd fecf 	bl	8009e9c <_free_r>
 800c0fe:	2300      	movs	r3, #0
 800c100:	6363      	str	r3, [r4, #52]	; 0x34
 800c102:	89a3      	ldrh	r3, [r4, #12]
 800c104:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c108:	81a3      	strh	r3, [r4, #12]
 800c10a:	2300      	movs	r3, #0
 800c10c:	6063      	str	r3, [r4, #4]
 800c10e:	6923      	ldr	r3, [r4, #16]
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	89a3      	ldrh	r3, [r4, #12]
 800c114:	f043 0308 	orr.w	r3, r3, #8
 800c118:	81a3      	strh	r3, [r4, #12]
 800c11a:	6923      	ldr	r3, [r4, #16]
 800c11c:	b94b      	cbnz	r3, 800c132 <__swsetup_r+0x9a>
 800c11e:	89a3      	ldrh	r3, [r4, #12]
 800c120:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c128:	d003      	beq.n	800c132 <__swsetup_r+0x9a>
 800c12a:	4621      	mov	r1, r4
 800c12c:	4630      	mov	r0, r6
 800c12e:	f001 fc1b 	bl	800d968 <__smakebuf_r>
 800c132:	89a0      	ldrh	r0, [r4, #12]
 800c134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c138:	f010 0301 	ands.w	r3, r0, #1
 800c13c:	d00a      	beq.n	800c154 <__swsetup_r+0xbc>
 800c13e:	2300      	movs	r3, #0
 800c140:	60a3      	str	r3, [r4, #8]
 800c142:	6963      	ldr	r3, [r4, #20]
 800c144:	425b      	negs	r3, r3
 800c146:	61a3      	str	r3, [r4, #24]
 800c148:	6923      	ldr	r3, [r4, #16]
 800c14a:	b943      	cbnz	r3, 800c15e <__swsetup_r+0xc6>
 800c14c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c150:	d1ba      	bne.n	800c0c8 <__swsetup_r+0x30>
 800c152:	bd70      	pop	{r4, r5, r6, pc}
 800c154:	0781      	lsls	r1, r0, #30
 800c156:	bf58      	it	pl
 800c158:	6963      	ldrpl	r3, [r4, #20]
 800c15a:	60a3      	str	r3, [r4, #8]
 800c15c:	e7f4      	b.n	800c148 <__swsetup_r+0xb0>
 800c15e:	2000      	movs	r0, #0
 800c160:	e7f7      	b.n	800c152 <__swsetup_r+0xba>
 800c162:	bf00      	nop
 800c164:	20000f70 	.word	0x20000f70
 800c168:	0800f650 	.word	0x0800f650
 800c16c:	0800f670 	.word	0x0800f670
 800c170:	0800f630 	.word	0x0800f630

0800c174 <abort>:
 800c174:	b508      	push	{r3, lr}
 800c176:	2006      	movs	r0, #6
 800c178:	f002 fec6 	bl	800ef08 <raise>
 800c17c:	2001      	movs	r0, #1
 800c17e:	f7f8 ffcf 	bl	8005120 <_exit>
	...

0800c184 <_close_r>:
 800c184:	b538      	push	{r3, r4, r5, lr}
 800c186:	4d06      	ldr	r5, [pc, #24]	; (800c1a0 <_close_r+0x1c>)
 800c188:	2300      	movs	r3, #0
 800c18a:	4604      	mov	r4, r0
 800c18c:	4608      	mov	r0, r1
 800c18e:	602b      	str	r3, [r5, #0]
 800c190:	f7f9 f809 	bl	80051a6 <_close>
 800c194:	1c43      	adds	r3, r0, #1
 800c196:	d102      	bne.n	800c19e <_close_r+0x1a>
 800c198:	682b      	ldr	r3, [r5, #0]
 800c19a:	b103      	cbz	r3, 800c19e <_close_r+0x1a>
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	bd38      	pop	{r3, r4, r5, pc}
 800c1a0:	20001c8c 	.word	0x20001c8c

0800c1a4 <quorem>:
 800c1a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a8:	6903      	ldr	r3, [r0, #16]
 800c1aa:	690c      	ldr	r4, [r1, #16]
 800c1ac:	42a3      	cmp	r3, r4
 800c1ae:	4607      	mov	r7, r0
 800c1b0:	f2c0 8081 	blt.w	800c2b6 <quorem+0x112>
 800c1b4:	3c01      	subs	r4, #1
 800c1b6:	f101 0814 	add.w	r8, r1, #20
 800c1ba:	f100 0514 	add.w	r5, r0, #20
 800c1be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1c2:	9301      	str	r3, [sp, #4]
 800c1c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c1c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c1d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c1d8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c1dc:	d331      	bcc.n	800c242 <quorem+0x9e>
 800c1de:	f04f 0e00 	mov.w	lr, #0
 800c1e2:	4640      	mov	r0, r8
 800c1e4:	46ac      	mov	ip, r5
 800c1e6:	46f2      	mov	sl, lr
 800c1e8:	f850 2b04 	ldr.w	r2, [r0], #4
 800c1ec:	b293      	uxth	r3, r2
 800c1ee:	fb06 e303 	mla	r3, r6, r3, lr
 800c1f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	ebaa 0303 	sub.w	r3, sl, r3
 800c1fc:	f8dc a000 	ldr.w	sl, [ip]
 800c200:	0c12      	lsrs	r2, r2, #16
 800c202:	fa13 f38a 	uxtah	r3, r3, sl
 800c206:	fb06 e202 	mla	r2, r6, r2, lr
 800c20a:	9300      	str	r3, [sp, #0]
 800c20c:	9b00      	ldr	r3, [sp, #0]
 800c20e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c212:	b292      	uxth	r2, r2
 800c214:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c218:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c21c:	f8bd 3000 	ldrh.w	r3, [sp]
 800c220:	4581      	cmp	r9, r0
 800c222:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c226:	f84c 3b04 	str.w	r3, [ip], #4
 800c22a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c22e:	d2db      	bcs.n	800c1e8 <quorem+0x44>
 800c230:	f855 300b 	ldr.w	r3, [r5, fp]
 800c234:	b92b      	cbnz	r3, 800c242 <quorem+0x9e>
 800c236:	9b01      	ldr	r3, [sp, #4]
 800c238:	3b04      	subs	r3, #4
 800c23a:	429d      	cmp	r5, r3
 800c23c:	461a      	mov	r2, r3
 800c23e:	d32e      	bcc.n	800c29e <quorem+0xfa>
 800c240:	613c      	str	r4, [r7, #16]
 800c242:	4638      	mov	r0, r7
 800c244:	f001 fee2 	bl	800e00c <__mcmp>
 800c248:	2800      	cmp	r0, #0
 800c24a:	db24      	blt.n	800c296 <quorem+0xf2>
 800c24c:	3601      	adds	r6, #1
 800c24e:	4628      	mov	r0, r5
 800c250:	f04f 0c00 	mov.w	ip, #0
 800c254:	f858 2b04 	ldr.w	r2, [r8], #4
 800c258:	f8d0 e000 	ldr.w	lr, [r0]
 800c25c:	b293      	uxth	r3, r2
 800c25e:	ebac 0303 	sub.w	r3, ip, r3
 800c262:	0c12      	lsrs	r2, r2, #16
 800c264:	fa13 f38e 	uxtah	r3, r3, lr
 800c268:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c26c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c270:	b29b      	uxth	r3, r3
 800c272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c276:	45c1      	cmp	r9, r8
 800c278:	f840 3b04 	str.w	r3, [r0], #4
 800c27c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c280:	d2e8      	bcs.n	800c254 <quorem+0xb0>
 800c282:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c286:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c28a:	b922      	cbnz	r2, 800c296 <quorem+0xf2>
 800c28c:	3b04      	subs	r3, #4
 800c28e:	429d      	cmp	r5, r3
 800c290:	461a      	mov	r2, r3
 800c292:	d30a      	bcc.n	800c2aa <quorem+0x106>
 800c294:	613c      	str	r4, [r7, #16]
 800c296:	4630      	mov	r0, r6
 800c298:	b003      	add	sp, #12
 800c29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c29e:	6812      	ldr	r2, [r2, #0]
 800c2a0:	3b04      	subs	r3, #4
 800c2a2:	2a00      	cmp	r2, #0
 800c2a4:	d1cc      	bne.n	800c240 <quorem+0x9c>
 800c2a6:	3c01      	subs	r4, #1
 800c2a8:	e7c7      	b.n	800c23a <quorem+0x96>
 800c2aa:	6812      	ldr	r2, [r2, #0]
 800c2ac:	3b04      	subs	r3, #4
 800c2ae:	2a00      	cmp	r2, #0
 800c2b0:	d1f0      	bne.n	800c294 <quorem+0xf0>
 800c2b2:	3c01      	subs	r4, #1
 800c2b4:	e7eb      	b.n	800c28e <quorem+0xea>
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	e7ee      	b.n	800c298 <quorem+0xf4>
 800c2ba:	0000      	movs	r0, r0
 800c2bc:	0000      	movs	r0, r0
	...

0800c2c0 <_dtoa_r>:
 800c2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c4:	ed2d 8b04 	vpush	{d8-d9}
 800c2c8:	ec57 6b10 	vmov	r6, r7, d0
 800c2cc:	b093      	sub	sp, #76	; 0x4c
 800c2ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c2d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c2d4:	9106      	str	r1, [sp, #24]
 800c2d6:	ee10 aa10 	vmov	sl, s0
 800c2da:	4604      	mov	r4, r0
 800c2dc:	9209      	str	r2, [sp, #36]	; 0x24
 800c2de:	930c      	str	r3, [sp, #48]	; 0x30
 800c2e0:	46bb      	mov	fp, r7
 800c2e2:	b975      	cbnz	r5, 800c302 <_dtoa_r+0x42>
 800c2e4:	2010      	movs	r0, #16
 800c2e6:	f7fd fdc1 	bl	8009e6c <malloc>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	6260      	str	r0, [r4, #36]	; 0x24
 800c2ee:	b920      	cbnz	r0, 800c2fa <_dtoa_r+0x3a>
 800c2f0:	4ba7      	ldr	r3, [pc, #668]	; (800c590 <_dtoa_r+0x2d0>)
 800c2f2:	21ea      	movs	r1, #234	; 0xea
 800c2f4:	48a7      	ldr	r0, [pc, #668]	; (800c594 <_dtoa_r+0x2d4>)
 800c2f6:	f7fd fd5f 	bl	8009db8 <__assert_func>
 800c2fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c2fe:	6005      	str	r5, [r0, #0]
 800c300:	60c5      	str	r5, [r0, #12]
 800c302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c304:	6819      	ldr	r1, [r3, #0]
 800c306:	b151      	cbz	r1, 800c31e <_dtoa_r+0x5e>
 800c308:	685a      	ldr	r2, [r3, #4]
 800c30a:	604a      	str	r2, [r1, #4]
 800c30c:	2301      	movs	r3, #1
 800c30e:	4093      	lsls	r3, r2
 800c310:	608b      	str	r3, [r1, #8]
 800c312:	4620      	mov	r0, r4
 800c314:	f001 fbee 	bl	800daf4 <_Bfree>
 800c318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c31a:	2200      	movs	r2, #0
 800c31c:	601a      	str	r2, [r3, #0]
 800c31e:	1e3b      	subs	r3, r7, #0
 800c320:	bfaa      	itet	ge
 800c322:	2300      	movge	r3, #0
 800c324:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c328:	f8c8 3000 	strge.w	r3, [r8]
 800c32c:	4b9a      	ldr	r3, [pc, #616]	; (800c598 <_dtoa_r+0x2d8>)
 800c32e:	bfbc      	itt	lt
 800c330:	2201      	movlt	r2, #1
 800c332:	f8c8 2000 	strlt.w	r2, [r8]
 800c336:	ea33 030b 	bics.w	r3, r3, fp
 800c33a:	d11b      	bne.n	800c374 <_dtoa_r+0xb4>
 800c33c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c33e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c342:	6013      	str	r3, [r2, #0]
 800c344:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c348:	4333      	orrs	r3, r6
 800c34a:	f000 8592 	beq.w	800ce72 <_dtoa_r+0xbb2>
 800c34e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c350:	b963      	cbnz	r3, 800c36c <_dtoa_r+0xac>
 800c352:	4b92      	ldr	r3, [pc, #584]	; (800c59c <_dtoa_r+0x2dc>)
 800c354:	e022      	b.n	800c39c <_dtoa_r+0xdc>
 800c356:	4b92      	ldr	r3, [pc, #584]	; (800c5a0 <_dtoa_r+0x2e0>)
 800c358:	9301      	str	r3, [sp, #4]
 800c35a:	3308      	adds	r3, #8
 800c35c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c35e:	6013      	str	r3, [r2, #0]
 800c360:	9801      	ldr	r0, [sp, #4]
 800c362:	b013      	add	sp, #76	; 0x4c
 800c364:	ecbd 8b04 	vpop	{d8-d9}
 800c368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c36c:	4b8b      	ldr	r3, [pc, #556]	; (800c59c <_dtoa_r+0x2dc>)
 800c36e:	9301      	str	r3, [sp, #4]
 800c370:	3303      	adds	r3, #3
 800c372:	e7f3      	b.n	800c35c <_dtoa_r+0x9c>
 800c374:	2200      	movs	r2, #0
 800c376:	2300      	movs	r3, #0
 800c378:	4650      	mov	r0, sl
 800c37a:	4659      	mov	r1, fp
 800c37c:	f7f4 fbb4 	bl	8000ae8 <__aeabi_dcmpeq>
 800c380:	ec4b ab19 	vmov	d9, sl, fp
 800c384:	4680      	mov	r8, r0
 800c386:	b158      	cbz	r0, 800c3a0 <_dtoa_r+0xe0>
 800c388:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c38a:	2301      	movs	r3, #1
 800c38c:	6013      	str	r3, [r2, #0]
 800c38e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c390:	2b00      	cmp	r3, #0
 800c392:	f000 856b 	beq.w	800ce6c <_dtoa_r+0xbac>
 800c396:	4883      	ldr	r0, [pc, #524]	; (800c5a4 <_dtoa_r+0x2e4>)
 800c398:	6018      	str	r0, [r3, #0]
 800c39a:	1e43      	subs	r3, r0, #1
 800c39c:	9301      	str	r3, [sp, #4]
 800c39e:	e7df      	b.n	800c360 <_dtoa_r+0xa0>
 800c3a0:	ec4b ab10 	vmov	d0, sl, fp
 800c3a4:	aa10      	add	r2, sp, #64	; 0x40
 800c3a6:	a911      	add	r1, sp, #68	; 0x44
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f001 ff51 	bl	800e250 <__d2b>
 800c3ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c3b2:	ee08 0a10 	vmov	s16, r0
 800c3b6:	2d00      	cmp	r5, #0
 800c3b8:	f000 8084 	beq.w	800c4c4 <_dtoa_r+0x204>
 800c3bc:	ee19 3a90 	vmov	r3, s19
 800c3c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c3c8:	4656      	mov	r6, sl
 800c3ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c3ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c3d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c3d6:	4b74      	ldr	r3, [pc, #464]	; (800c5a8 <_dtoa_r+0x2e8>)
 800c3d8:	2200      	movs	r2, #0
 800c3da:	4630      	mov	r0, r6
 800c3dc:	4639      	mov	r1, r7
 800c3de:	f7f3 ff63 	bl	80002a8 <__aeabi_dsub>
 800c3e2:	a365      	add	r3, pc, #404	; (adr r3, 800c578 <_dtoa_r+0x2b8>)
 800c3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e8:	f7f4 f916 	bl	8000618 <__aeabi_dmul>
 800c3ec:	a364      	add	r3, pc, #400	; (adr r3, 800c580 <_dtoa_r+0x2c0>)
 800c3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f2:	f7f3 ff5b 	bl	80002ac <__adddf3>
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	460f      	mov	r7, r1
 800c3fc:	f7f4 f8a2 	bl	8000544 <__aeabi_i2d>
 800c400:	a361      	add	r3, pc, #388	; (adr r3, 800c588 <_dtoa_r+0x2c8>)
 800c402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c406:	f7f4 f907 	bl	8000618 <__aeabi_dmul>
 800c40a:	4602      	mov	r2, r0
 800c40c:	460b      	mov	r3, r1
 800c40e:	4630      	mov	r0, r6
 800c410:	4639      	mov	r1, r7
 800c412:	f7f3 ff4b 	bl	80002ac <__adddf3>
 800c416:	4606      	mov	r6, r0
 800c418:	460f      	mov	r7, r1
 800c41a:	f7f4 fbad 	bl	8000b78 <__aeabi_d2iz>
 800c41e:	2200      	movs	r2, #0
 800c420:	9000      	str	r0, [sp, #0]
 800c422:	2300      	movs	r3, #0
 800c424:	4630      	mov	r0, r6
 800c426:	4639      	mov	r1, r7
 800c428:	f7f4 fb68 	bl	8000afc <__aeabi_dcmplt>
 800c42c:	b150      	cbz	r0, 800c444 <_dtoa_r+0x184>
 800c42e:	9800      	ldr	r0, [sp, #0]
 800c430:	f7f4 f888 	bl	8000544 <__aeabi_i2d>
 800c434:	4632      	mov	r2, r6
 800c436:	463b      	mov	r3, r7
 800c438:	f7f4 fb56 	bl	8000ae8 <__aeabi_dcmpeq>
 800c43c:	b910      	cbnz	r0, 800c444 <_dtoa_r+0x184>
 800c43e:	9b00      	ldr	r3, [sp, #0]
 800c440:	3b01      	subs	r3, #1
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	9b00      	ldr	r3, [sp, #0]
 800c446:	2b16      	cmp	r3, #22
 800c448:	d85a      	bhi.n	800c500 <_dtoa_r+0x240>
 800c44a:	9a00      	ldr	r2, [sp, #0]
 800c44c:	4b57      	ldr	r3, [pc, #348]	; (800c5ac <_dtoa_r+0x2ec>)
 800c44e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c456:	ec51 0b19 	vmov	r0, r1, d9
 800c45a:	f7f4 fb4f 	bl	8000afc <__aeabi_dcmplt>
 800c45e:	2800      	cmp	r0, #0
 800c460:	d050      	beq.n	800c504 <_dtoa_r+0x244>
 800c462:	9b00      	ldr	r3, [sp, #0]
 800c464:	3b01      	subs	r3, #1
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	2300      	movs	r3, #0
 800c46a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c46c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c46e:	1b5d      	subs	r5, r3, r5
 800c470:	1e6b      	subs	r3, r5, #1
 800c472:	9305      	str	r3, [sp, #20]
 800c474:	bf45      	ittet	mi
 800c476:	f1c5 0301 	rsbmi	r3, r5, #1
 800c47a:	9304      	strmi	r3, [sp, #16]
 800c47c:	2300      	movpl	r3, #0
 800c47e:	2300      	movmi	r3, #0
 800c480:	bf4c      	ite	mi
 800c482:	9305      	strmi	r3, [sp, #20]
 800c484:	9304      	strpl	r3, [sp, #16]
 800c486:	9b00      	ldr	r3, [sp, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	db3d      	blt.n	800c508 <_dtoa_r+0x248>
 800c48c:	9b05      	ldr	r3, [sp, #20]
 800c48e:	9a00      	ldr	r2, [sp, #0]
 800c490:	920a      	str	r2, [sp, #40]	; 0x28
 800c492:	4413      	add	r3, r2
 800c494:	9305      	str	r3, [sp, #20]
 800c496:	2300      	movs	r3, #0
 800c498:	9307      	str	r3, [sp, #28]
 800c49a:	9b06      	ldr	r3, [sp, #24]
 800c49c:	2b09      	cmp	r3, #9
 800c49e:	f200 8089 	bhi.w	800c5b4 <_dtoa_r+0x2f4>
 800c4a2:	2b05      	cmp	r3, #5
 800c4a4:	bfc4      	itt	gt
 800c4a6:	3b04      	subgt	r3, #4
 800c4a8:	9306      	strgt	r3, [sp, #24]
 800c4aa:	9b06      	ldr	r3, [sp, #24]
 800c4ac:	f1a3 0302 	sub.w	r3, r3, #2
 800c4b0:	bfcc      	ite	gt
 800c4b2:	2500      	movgt	r5, #0
 800c4b4:	2501      	movle	r5, #1
 800c4b6:	2b03      	cmp	r3, #3
 800c4b8:	f200 8087 	bhi.w	800c5ca <_dtoa_r+0x30a>
 800c4bc:	e8df f003 	tbb	[pc, r3]
 800c4c0:	59383a2d 	.word	0x59383a2d
 800c4c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c4c8:	441d      	add	r5, r3
 800c4ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c4ce:	2b20      	cmp	r3, #32
 800c4d0:	bfc1      	itttt	gt
 800c4d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c4d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c4da:	fa0b f303 	lslgt.w	r3, fp, r3
 800c4de:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c4e2:	bfda      	itte	le
 800c4e4:	f1c3 0320 	rsble	r3, r3, #32
 800c4e8:	fa06 f003 	lslle.w	r0, r6, r3
 800c4ec:	4318      	orrgt	r0, r3
 800c4ee:	f7f4 f819 	bl	8000524 <__aeabi_ui2d>
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	4606      	mov	r6, r0
 800c4f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c4fa:	3d01      	subs	r5, #1
 800c4fc:	930e      	str	r3, [sp, #56]	; 0x38
 800c4fe:	e76a      	b.n	800c3d6 <_dtoa_r+0x116>
 800c500:	2301      	movs	r3, #1
 800c502:	e7b2      	b.n	800c46a <_dtoa_r+0x1aa>
 800c504:	900b      	str	r0, [sp, #44]	; 0x2c
 800c506:	e7b1      	b.n	800c46c <_dtoa_r+0x1ac>
 800c508:	9b04      	ldr	r3, [sp, #16]
 800c50a:	9a00      	ldr	r2, [sp, #0]
 800c50c:	1a9b      	subs	r3, r3, r2
 800c50e:	9304      	str	r3, [sp, #16]
 800c510:	4253      	negs	r3, r2
 800c512:	9307      	str	r3, [sp, #28]
 800c514:	2300      	movs	r3, #0
 800c516:	930a      	str	r3, [sp, #40]	; 0x28
 800c518:	e7bf      	b.n	800c49a <_dtoa_r+0x1da>
 800c51a:	2300      	movs	r3, #0
 800c51c:	9308      	str	r3, [sp, #32]
 800c51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c520:	2b00      	cmp	r3, #0
 800c522:	dc55      	bgt.n	800c5d0 <_dtoa_r+0x310>
 800c524:	2301      	movs	r3, #1
 800c526:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c52a:	461a      	mov	r2, r3
 800c52c:	9209      	str	r2, [sp, #36]	; 0x24
 800c52e:	e00c      	b.n	800c54a <_dtoa_r+0x28a>
 800c530:	2301      	movs	r3, #1
 800c532:	e7f3      	b.n	800c51c <_dtoa_r+0x25c>
 800c534:	2300      	movs	r3, #0
 800c536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c538:	9308      	str	r3, [sp, #32]
 800c53a:	9b00      	ldr	r3, [sp, #0]
 800c53c:	4413      	add	r3, r2
 800c53e:	9302      	str	r3, [sp, #8]
 800c540:	3301      	adds	r3, #1
 800c542:	2b01      	cmp	r3, #1
 800c544:	9303      	str	r3, [sp, #12]
 800c546:	bfb8      	it	lt
 800c548:	2301      	movlt	r3, #1
 800c54a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c54c:	2200      	movs	r2, #0
 800c54e:	6042      	str	r2, [r0, #4]
 800c550:	2204      	movs	r2, #4
 800c552:	f102 0614 	add.w	r6, r2, #20
 800c556:	429e      	cmp	r6, r3
 800c558:	6841      	ldr	r1, [r0, #4]
 800c55a:	d93d      	bls.n	800c5d8 <_dtoa_r+0x318>
 800c55c:	4620      	mov	r0, r4
 800c55e:	f001 fa89 	bl	800da74 <_Balloc>
 800c562:	9001      	str	r0, [sp, #4]
 800c564:	2800      	cmp	r0, #0
 800c566:	d13b      	bne.n	800c5e0 <_dtoa_r+0x320>
 800c568:	4b11      	ldr	r3, [pc, #68]	; (800c5b0 <_dtoa_r+0x2f0>)
 800c56a:	4602      	mov	r2, r0
 800c56c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c570:	e6c0      	b.n	800c2f4 <_dtoa_r+0x34>
 800c572:	2301      	movs	r3, #1
 800c574:	e7df      	b.n	800c536 <_dtoa_r+0x276>
 800c576:	bf00      	nop
 800c578:	636f4361 	.word	0x636f4361
 800c57c:	3fd287a7 	.word	0x3fd287a7
 800c580:	8b60c8b3 	.word	0x8b60c8b3
 800c584:	3fc68a28 	.word	0x3fc68a28
 800c588:	509f79fb 	.word	0x509f79fb
 800c58c:	3fd34413 	.word	0x3fd34413
 800c590:	0800f440 	.word	0x0800f440
 800c594:	0800f5c2 	.word	0x0800f5c2
 800c598:	7ff00000 	.word	0x7ff00000
 800c59c:	0800f5be 	.word	0x0800f5be
 800c5a0:	0800f5b5 	.word	0x0800f5b5
 800c5a4:	0800f869 	.word	0x0800f869
 800c5a8:	3ff80000 	.word	0x3ff80000
 800c5ac:	0800f790 	.word	0x0800f790
 800c5b0:	0800f61d 	.word	0x0800f61d
 800c5b4:	2501      	movs	r5, #1
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	9306      	str	r3, [sp, #24]
 800c5ba:	9508      	str	r5, [sp, #32]
 800c5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c5c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	2312      	movs	r3, #18
 800c5c8:	e7b0      	b.n	800c52c <_dtoa_r+0x26c>
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	9308      	str	r3, [sp, #32]
 800c5ce:	e7f5      	b.n	800c5bc <_dtoa_r+0x2fc>
 800c5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c5d6:	e7b8      	b.n	800c54a <_dtoa_r+0x28a>
 800c5d8:	3101      	adds	r1, #1
 800c5da:	6041      	str	r1, [r0, #4]
 800c5dc:	0052      	lsls	r2, r2, #1
 800c5de:	e7b8      	b.n	800c552 <_dtoa_r+0x292>
 800c5e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5e2:	9a01      	ldr	r2, [sp, #4]
 800c5e4:	601a      	str	r2, [r3, #0]
 800c5e6:	9b03      	ldr	r3, [sp, #12]
 800c5e8:	2b0e      	cmp	r3, #14
 800c5ea:	f200 809d 	bhi.w	800c728 <_dtoa_r+0x468>
 800c5ee:	2d00      	cmp	r5, #0
 800c5f0:	f000 809a 	beq.w	800c728 <_dtoa_r+0x468>
 800c5f4:	9b00      	ldr	r3, [sp, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	dd32      	ble.n	800c660 <_dtoa_r+0x3a0>
 800c5fa:	4ab7      	ldr	r2, [pc, #732]	; (800c8d8 <_dtoa_r+0x618>)
 800c5fc:	f003 030f 	and.w	r3, r3, #15
 800c600:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c604:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c608:	9b00      	ldr	r3, [sp, #0]
 800c60a:	05d8      	lsls	r0, r3, #23
 800c60c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c610:	d516      	bpl.n	800c640 <_dtoa_r+0x380>
 800c612:	4bb2      	ldr	r3, [pc, #712]	; (800c8dc <_dtoa_r+0x61c>)
 800c614:	ec51 0b19 	vmov	r0, r1, d9
 800c618:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c61c:	f7f4 f926 	bl	800086c <__aeabi_ddiv>
 800c620:	f007 070f 	and.w	r7, r7, #15
 800c624:	4682      	mov	sl, r0
 800c626:	468b      	mov	fp, r1
 800c628:	2503      	movs	r5, #3
 800c62a:	4eac      	ldr	r6, [pc, #688]	; (800c8dc <_dtoa_r+0x61c>)
 800c62c:	b957      	cbnz	r7, 800c644 <_dtoa_r+0x384>
 800c62e:	4642      	mov	r2, r8
 800c630:	464b      	mov	r3, r9
 800c632:	4650      	mov	r0, sl
 800c634:	4659      	mov	r1, fp
 800c636:	f7f4 f919 	bl	800086c <__aeabi_ddiv>
 800c63a:	4682      	mov	sl, r0
 800c63c:	468b      	mov	fp, r1
 800c63e:	e028      	b.n	800c692 <_dtoa_r+0x3d2>
 800c640:	2502      	movs	r5, #2
 800c642:	e7f2      	b.n	800c62a <_dtoa_r+0x36a>
 800c644:	07f9      	lsls	r1, r7, #31
 800c646:	d508      	bpl.n	800c65a <_dtoa_r+0x39a>
 800c648:	4640      	mov	r0, r8
 800c64a:	4649      	mov	r1, r9
 800c64c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c650:	f7f3 ffe2 	bl	8000618 <__aeabi_dmul>
 800c654:	3501      	adds	r5, #1
 800c656:	4680      	mov	r8, r0
 800c658:	4689      	mov	r9, r1
 800c65a:	107f      	asrs	r7, r7, #1
 800c65c:	3608      	adds	r6, #8
 800c65e:	e7e5      	b.n	800c62c <_dtoa_r+0x36c>
 800c660:	f000 809b 	beq.w	800c79a <_dtoa_r+0x4da>
 800c664:	9b00      	ldr	r3, [sp, #0]
 800c666:	4f9d      	ldr	r7, [pc, #628]	; (800c8dc <_dtoa_r+0x61c>)
 800c668:	425e      	negs	r6, r3
 800c66a:	4b9b      	ldr	r3, [pc, #620]	; (800c8d8 <_dtoa_r+0x618>)
 800c66c:	f006 020f 	and.w	r2, r6, #15
 800c670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c678:	ec51 0b19 	vmov	r0, r1, d9
 800c67c:	f7f3 ffcc 	bl	8000618 <__aeabi_dmul>
 800c680:	1136      	asrs	r6, r6, #4
 800c682:	4682      	mov	sl, r0
 800c684:	468b      	mov	fp, r1
 800c686:	2300      	movs	r3, #0
 800c688:	2502      	movs	r5, #2
 800c68a:	2e00      	cmp	r6, #0
 800c68c:	d17a      	bne.n	800c784 <_dtoa_r+0x4c4>
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1d3      	bne.n	800c63a <_dtoa_r+0x37a>
 800c692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c694:	2b00      	cmp	r3, #0
 800c696:	f000 8082 	beq.w	800c79e <_dtoa_r+0x4de>
 800c69a:	4b91      	ldr	r3, [pc, #580]	; (800c8e0 <_dtoa_r+0x620>)
 800c69c:	2200      	movs	r2, #0
 800c69e:	4650      	mov	r0, sl
 800c6a0:	4659      	mov	r1, fp
 800c6a2:	f7f4 fa2b 	bl	8000afc <__aeabi_dcmplt>
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	d079      	beq.n	800c79e <_dtoa_r+0x4de>
 800c6aa:	9b03      	ldr	r3, [sp, #12]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d076      	beq.n	800c79e <_dtoa_r+0x4de>
 800c6b0:	9b02      	ldr	r3, [sp, #8]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	dd36      	ble.n	800c724 <_dtoa_r+0x464>
 800c6b6:	9b00      	ldr	r3, [sp, #0]
 800c6b8:	4650      	mov	r0, sl
 800c6ba:	4659      	mov	r1, fp
 800c6bc:	1e5f      	subs	r7, r3, #1
 800c6be:	2200      	movs	r2, #0
 800c6c0:	4b88      	ldr	r3, [pc, #544]	; (800c8e4 <_dtoa_r+0x624>)
 800c6c2:	f7f3 ffa9 	bl	8000618 <__aeabi_dmul>
 800c6c6:	9e02      	ldr	r6, [sp, #8]
 800c6c8:	4682      	mov	sl, r0
 800c6ca:	468b      	mov	fp, r1
 800c6cc:	3501      	adds	r5, #1
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	f7f3 ff38 	bl	8000544 <__aeabi_i2d>
 800c6d4:	4652      	mov	r2, sl
 800c6d6:	465b      	mov	r3, fp
 800c6d8:	f7f3 ff9e 	bl	8000618 <__aeabi_dmul>
 800c6dc:	4b82      	ldr	r3, [pc, #520]	; (800c8e8 <_dtoa_r+0x628>)
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f7f3 fde4 	bl	80002ac <__adddf3>
 800c6e4:	46d0      	mov	r8, sl
 800c6e6:	46d9      	mov	r9, fp
 800c6e8:	4682      	mov	sl, r0
 800c6ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c6ee:	2e00      	cmp	r6, #0
 800c6f0:	d158      	bne.n	800c7a4 <_dtoa_r+0x4e4>
 800c6f2:	4b7e      	ldr	r3, [pc, #504]	; (800c8ec <_dtoa_r+0x62c>)
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	4640      	mov	r0, r8
 800c6f8:	4649      	mov	r1, r9
 800c6fa:	f7f3 fdd5 	bl	80002a8 <__aeabi_dsub>
 800c6fe:	4652      	mov	r2, sl
 800c700:	465b      	mov	r3, fp
 800c702:	4680      	mov	r8, r0
 800c704:	4689      	mov	r9, r1
 800c706:	f7f4 fa17 	bl	8000b38 <__aeabi_dcmpgt>
 800c70a:	2800      	cmp	r0, #0
 800c70c:	f040 8295 	bne.w	800cc3a <_dtoa_r+0x97a>
 800c710:	4652      	mov	r2, sl
 800c712:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c716:	4640      	mov	r0, r8
 800c718:	4649      	mov	r1, r9
 800c71a:	f7f4 f9ef 	bl	8000afc <__aeabi_dcmplt>
 800c71e:	2800      	cmp	r0, #0
 800c720:	f040 8289 	bne.w	800cc36 <_dtoa_r+0x976>
 800c724:	ec5b ab19 	vmov	sl, fp, d9
 800c728:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f2c0 8148 	blt.w	800c9c0 <_dtoa_r+0x700>
 800c730:	9a00      	ldr	r2, [sp, #0]
 800c732:	2a0e      	cmp	r2, #14
 800c734:	f300 8144 	bgt.w	800c9c0 <_dtoa_r+0x700>
 800c738:	4b67      	ldr	r3, [pc, #412]	; (800c8d8 <_dtoa_r+0x618>)
 800c73a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c73e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c744:	2b00      	cmp	r3, #0
 800c746:	f280 80d5 	bge.w	800c8f4 <_dtoa_r+0x634>
 800c74a:	9b03      	ldr	r3, [sp, #12]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	f300 80d1 	bgt.w	800c8f4 <_dtoa_r+0x634>
 800c752:	f040 826f 	bne.w	800cc34 <_dtoa_r+0x974>
 800c756:	4b65      	ldr	r3, [pc, #404]	; (800c8ec <_dtoa_r+0x62c>)
 800c758:	2200      	movs	r2, #0
 800c75a:	4640      	mov	r0, r8
 800c75c:	4649      	mov	r1, r9
 800c75e:	f7f3 ff5b 	bl	8000618 <__aeabi_dmul>
 800c762:	4652      	mov	r2, sl
 800c764:	465b      	mov	r3, fp
 800c766:	f7f4 f9dd 	bl	8000b24 <__aeabi_dcmpge>
 800c76a:	9e03      	ldr	r6, [sp, #12]
 800c76c:	4637      	mov	r7, r6
 800c76e:	2800      	cmp	r0, #0
 800c770:	f040 8245 	bne.w	800cbfe <_dtoa_r+0x93e>
 800c774:	9d01      	ldr	r5, [sp, #4]
 800c776:	2331      	movs	r3, #49	; 0x31
 800c778:	f805 3b01 	strb.w	r3, [r5], #1
 800c77c:	9b00      	ldr	r3, [sp, #0]
 800c77e:	3301      	adds	r3, #1
 800c780:	9300      	str	r3, [sp, #0]
 800c782:	e240      	b.n	800cc06 <_dtoa_r+0x946>
 800c784:	07f2      	lsls	r2, r6, #31
 800c786:	d505      	bpl.n	800c794 <_dtoa_r+0x4d4>
 800c788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c78c:	f7f3 ff44 	bl	8000618 <__aeabi_dmul>
 800c790:	3501      	adds	r5, #1
 800c792:	2301      	movs	r3, #1
 800c794:	1076      	asrs	r6, r6, #1
 800c796:	3708      	adds	r7, #8
 800c798:	e777      	b.n	800c68a <_dtoa_r+0x3ca>
 800c79a:	2502      	movs	r5, #2
 800c79c:	e779      	b.n	800c692 <_dtoa_r+0x3d2>
 800c79e:	9f00      	ldr	r7, [sp, #0]
 800c7a0:	9e03      	ldr	r6, [sp, #12]
 800c7a2:	e794      	b.n	800c6ce <_dtoa_r+0x40e>
 800c7a4:	9901      	ldr	r1, [sp, #4]
 800c7a6:	4b4c      	ldr	r3, [pc, #304]	; (800c8d8 <_dtoa_r+0x618>)
 800c7a8:	4431      	add	r1, r6
 800c7aa:	910d      	str	r1, [sp, #52]	; 0x34
 800c7ac:	9908      	ldr	r1, [sp, #32]
 800c7ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c7b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c7b6:	2900      	cmp	r1, #0
 800c7b8:	d043      	beq.n	800c842 <_dtoa_r+0x582>
 800c7ba:	494d      	ldr	r1, [pc, #308]	; (800c8f0 <_dtoa_r+0x630>)
 800c7bc:	2000      	movs	r0, #0
 800c7be:	f7f4 f855 	bl	800086c <__aeabi_ddiv>
 800c7c2:	4652      	mov	r2, sl
 800c7c4:	465b      	mov	r3, fp
 800c7c6:	f7f3 fd6f 	bl	80002a8 <__aeabi_dsub>
 800c7ca:	9d01      	ldr	r5, [sp, #4]
 800c7cc:	4682      	mov	sl, r0
 800c7ce:	468b      	mov	fp, r1
 800c7d0:	4649      	mov	r1, r9
 800c7d2:	4640      	mov	r0, r8
 800c7d4:	f7f4 f9d0 	bl	8000b78 <__aeabi_d2iz>
 800c7d8:	4606      	mov	r6, r0
 800c7da:	f7f3 feb3 	bl	8000544 <__aeabi_i2d>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	4640      	mov	r0, r8
 800c7e4:	4649      	mov	r1, r9
 800c7e6:	f7f3 fd5f 	bl	80002a8 <__aeabi_dsub>
 800c7ea:	3630      	adds	r6, #48	; 0x30
 800c7ec:	f805 6b01 	strb.w	r6, [r5], #1
 800c7f0:	4652      	mov	r2, sl
 800c7f2:	465b      	mov	r3, fp
 800c7f4:	4680      	mov	r8, r0
 800c7f6:	4689      	mov	r9, r1
 800c7f8:	f7f4 f980 	bl	8000afc <__aeabi_dcmplt>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d163      	bne.n	800c8c8 <_dtoa_r+0x608>
 800c800:	4642      	mov	r2, r8
 800c802:	464b      	mov	r3, r9
 800c804:	4936      	ldr	r1, [pc, #216]	; (800c8e0 <_dtoa_r+0x620>)
 800c806:	2000      	movs	r0, #0
 800c808:	f7f3 fd4e 	bl	80002a8 <__aeabi_dsub>
 800c80c:	4652      	mov	r2, sl
 800c80e:	465b      	mov	r3, fp
 800c810:	f7f4 f974 	bl	8000afc <__aeabi_dcmplt>
 800c814:	2800      	cmp	r0, #0
 800c816:	f040 80b5 	bne.w	800c984 <_dtoa_r+0x6c4>
 800c81a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c81c:	429d      	cmp	r5, r3
 800c81e:	d081      	beq.n	800c724 <_dtoa_r+0x464>
 800c820:	4b30      	ldr	r3, [pc, #192]	; (800c8e4 <_dtoa_r+0x624>)
 800c822:	2200      	movs	r2, #0
 800c824:	4650      	mov	r0, sl
 800c826:	4659      	mov	r1, fp
 800c828:	f7f3 fef6 	bl	8000618 <__aeabi_dmul>
 800c82c:	4b2d      	ldr	r3, [pc, #180]	; (800c8e4 <_dtoa_r+0x624>)
 800c82e:	4682      	mov	sl, r0
 800c830:	468b      	mov	fp, r1
 800c832:	4640      	mov	r0, r8
 800c834:	4649      	mov	r1, r9
 800c836:	2200      	movs	r2, #0
 800c838:	f7f3 feee 	bl	8000618 <__aeabi_dmul>
 800c83c:	4680      	mov	r8, r0
 800c83e:	4689      	mov	r9, r1
 800c840:	e7c6      	b.n	800c7d0 <_dtoa_r+0x510>
 800c842:	4650      	mov	r0, sl
 800c844:	4659      	mov	r1, fp
 800c846:	f7f3 fee7 	bl	8000618 <__aeabi_dmul>
 800c84a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c84c:	9d01      	ldr	r5, [sp, #4]
 800c84e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c850:	4682      	mov	sl, r0
 800c852:	468b      	mov	fp, r1
 800c854:	4649      	mov	r1, r9
 800c856:	4640      	mov	r0, r8
 800c858:	f7f4 f98e 	bl	8000b78 <__aeabi_d2iz>
 800c85c:	4606      	mov	r6, r0
 800c85e:	f7f3 fe71 	bl	8000544 <__aeabi_i2d>
 800c862:	3630      	adds	r6, #48	; 0x30
 800c864:	4602      	mov	r2, r0
 800c866:	460b      	mov	r3, r1
 800c868:	4640      	mov	r0, r8
 800c86a:	4649      	mov	r1, r9
 800c86c:	f7f3 fd1c 	bl	80002a8 <__aeabi_dsub>
 800c870:	f805 6b01 	strb.w	r6, [r5], #1
 800c874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c876:	429d      	cmp	r5, r3
 800c878:	4680      	mov	r8, r0
 800c87a:	4689      	mov	r9, r1
 800c87c:	f04f 0200 	mov.w	r2, #0
 800c880:	d124      	bne.n	800c8cc <_dtoa_r+0x60c>
 800c882:	4b1b      	ldr	r3, [pc, #108]	; (800c8f0 <_dtoa_r+0x630>)
 800c884:	4650      	mov	r0, sl
 800c886:	4659      	mov	r1, fp
 800c888:	f7f3 fd10 	bl	80002ac <__adddf3>
 800c88c:	4602      	mov	r2, r0
 800c88e:	460b      	mov	r3, r1
 800c890:	4640      	mov	r0, r8
 800c892:	4649      	mov	r1, r9
 800c894:	f7f4 f950 	bl	8000b38 <__aeabi_dcmpgt>
 800c898:	2800      	cmp	r0, #0
 800c89a:	d173      	bne.n	800c984 <_dtoa_r+0x6c4>
 800c89c:	4652      	mov	r2, sl
 800c89e:	465b      	mov	r3, fp
 800c8a0:	4913      	ldr	r1, [pc, #76]	; (800c8f0 <_dtoa_r+0x630>)
 800c8a2:	2000      	movs	r0, #0
 800c8a4:	f7f3 fd00 	bl	80002a8 <__aeabi_dsub>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	4640      	mov	r0, r8
 800c8ae:	4649      	mov	r1, r9
 800c8b0:	f7f4 f924 	bl	8000afc <__aeabi_dcmplt>
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	f43f af35 	beq.w	800c724 <_dtoa_r+0x464>
 800c8ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c8bc:	1e6b      	subs	r3, r5, #1
 800c8be:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c8c4:	2b30      	cmp	r3, #48	; 0x30
 800c8c6:	d0f8      	beq.n	800c8ba <_dtoa_r+0x5fa>
 800c8c8:	9700      	str	r7, [sp, #0]
 800c8ca:	e049      	b.n	800c960 <_dtoa_r+0x6a0>
 800c8cc:	4b05      	ldr	r3, [pc, #20]	; (800c8e4 <_dtoa_r+0x624>)
 800c8ce:	f7f3 fea3 	bl	8000618 <__aeabi_dmul>
 800c8d2:	4680      	mov	r8, r0
 800c8d4:	4689      	mov	r9, r1
 800c8d6:	e7bd      	b.n	800c854 <_dtoa_r+0x594>
 800c8d8:	0800f790 	.word	0x0800f790
 800c8dc:	0800f768 	.word	0x0800f768
 800c8e0:	3ff00000 	.word	0x3ff00000
 800c8e4:	40240000 	.word	0x40240000
 800c8e8:	401c0000 	.word	0x401c0000
 800c8ec:	40140000 	.word	0x40140000
 800c8f0:	3fe00000 	.word	0x3fe00000
 800c8f4:	9d01      	ldr	r5, [sp, #4]
 800c8f6:	4656      	mov	r6, sl
 800c8f8:	465f      	mov	r7, fp
 800c8fa:	4642      	mov	r2, r8
 800c8fc:	464b      	mov	r3, r9
 800c8fe:	4630      	mov	r0, r6
 800c900:	4639      	mov	r1, r7
 800c902:	f7f3 ffb3 	bl	800086c <__aeabi_ddiv>
 800c906:	f7f4 f937 	bl	8000b78 <__aeabi_d2iz>
 800c90a:	4682      	mov	sl, r0
 800c90c:	f7f3 fe1a 	bl	8000544 <__aeabi_i2d>
 800c910:	4642      	mov	r2, r8
 800c912:	464b      	mov	r3, r9
 800c914:	f7f3 fe80 	bl	8000618 <__aeabi_dmul>
 800c918:	4602      	mov	r2, r0
 800c91a:	460b      	mov	r3, r1
 800c91c:	4630      	mov	r0, r6
 800c91e:	4639      	mov	r1, r7
 800c920:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c924:	f7f3 fcc0 	bl	80002a8 <__aeabi_dsub>
 800c928:	f805 6b01 	strb.w	r6, [r5], #1
 800c92c:	9e01      	ldr	r6, [sp, #4]
 800c92e:	9f03      	ldr	r7, [sp, #12]
 800c930:	1bae      	subs	r6, r5, r6
 800c932:	42b7      	cmp	r7, r6
 800c934:	4602      	mov	r2, r0
 800c936:	460b      	mov	r3, r1
 800c938:	d135      	bne.n	800c9a6 <_dtoa_r+0x6e6>
 800c93a:	f7f3 fcb7 	bl	80002ac <__adddf3>
 800c93e:	4642      	mov	r2, r8
 800c940:	464b      	mov	r3, r9
 800c942:	4606      	mov	r6, r0
 800c944:	460f      	mov	r7, r1
 800c946:	f7f4 f8f7 	bl	8000b38 <__aeabi_dcmpgt>
 800c94a:	b9d0      	cbnz	r0, 800c982 <_dtoa_r+0x6c2>
 800c94c:	4642      	mov	r2, r8
 800c94e:	464b      	mov	r3, r9
 800c950:	4630      	mov	r0, r6
 800c952:	4639      	mov	r1, r7
 800c954:	f7f4 f8c8 	bl	8000ae8 <__aeabi_dcmpeq>
 800c958:	b110      	cbz	r0, 800c960 <_dtoa_r+0x6a0>
 800c95a:	f01a 0f01 	tst.w	sl, #1
 800c95e:	d110      	bne.n	800c982 <_dtoa_r+0x6c2>
 800c960:	4620      	mov	r0, r4
 800c962:	ee18 1a10 	vmov	r1, s16
 800c966:	f001 f8c5 	bl	800daf4 <_Bfree>
 800c96a:	2300      	movs	r3, #0
 800c96c:	9800      	ldr	r0, [sp, #0]
 800c96e:	702b      	strb	r3, [r5, #0]
 800c970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c972:	3001      	adds	r0, #1
 800c974:	6018      	str	r0, [r3, #0]
 800c976:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c978:	2b00      	cmp	r3, #0
 800c97a:	f43f acf1 	beq.w	800c360 <_dtoa_r+0xa0>
 800c97e:	601d      	str	r5, [r3, #0]
 800c980:	e4ee      	b.n	800c360 <_dtoa_r+0xa0>
 800c982:	9f00      	ldr	r7, [sp, #0]
 800c984:	462b      	mov	r3, r5
 800c986:	461d      	mov	r5, r3
 800c988:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c98c:	2a39      	cmp	r2, #57	; 0x39
 800c98e:	d106      	bne.n	800c99e <_dtoa_r+0x6de>
 800c990:	9a01      	ldr	r2, [sp, #4]
 800c992:	429a      	cmp	r2, r3
 800c994:	d1f7      	bne.n	800c986 <_dtoa_r+0x6c6>
 800c996:	9901      	ldr	r1, [sp, #4]
 800c998:	2230      	movs	r2, #48	; 0x30
 800c99a:	3701      	adds	r7, #1
 800c99c:	700a      	strb	r2, [r1, #0]
 800c99e:	781a      	ldrb	r2, [r3, #0]
 800c9a0:	3201      	adds	r2, #1
 800c9a2:	701a      	strb	r2, [r3, #0]
 800c9a4:	e790      	b.n	800c8c8 <_dtoa_r+0x608>
 800c9a6:	4ba6      	ldr	r3, [pc, #664]	; (800cc40 <_dtoa_r+0x980>)
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f7f3 fe35 	bl	8000618 <__aeabi_dmul>
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	460f      	mov	r7, r1
 800c9b6:	f7f4 f897 	bl	8000ae8 <__aeabi_dcmpeq>
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	d09d      	beq.n	800c8fa <_dtoa_r+0x63a>
 800c9be:	e7cf      	b.n	800c960 <_dtoa_r+0x6a0>
 800c9c0:	9a08      	ldr	r2, [sp, #32]
 800c9c2:	2a00      	cmp	r2, #0
 800c9c4:	f000 80d7 	beq.w	800cb76 <_dtoa_r+0x8b6>
 800c9c8:	9a06      	ldr	r2, [sp, #24]
 800c9ca:	2a01      	cmp	r2, #1
 800c9cc:	f300 80ba 	bgt.w	800cb44 <_dtoa_r+0x884>
 800c9d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9d2:	2a00      	cmp	r2, #0
 800c9d4:	f000 80b2 	beq.w	800cb3c <_dtoa_r+0x87c>
 800c9d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c9dc:	9e07      	ldr	r6, [sp, #28]
 800c9de:	9d04      	ldr	r5, [sp, #16]
 800c9e0:	9a04      	ldr	r2, [sp, #16]
 800c9e2:	441a      	add	r2, r3
 800c9e4:	9204      	str	r2, [sp, #16]
 800c9e6:	9a05      	ldr	r2, [sp, #20]
 800c9e8:	2101      	movs	r1, #1
 800c9ea:	441a      	add	r2, r3
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	9205      	str	r2, [sp, #20]
 800c9f0:	f001 f982 	bl	800dcf8 <__i2b>
 800c9f4:	4607      	mov	r7, r0
 800c9f6:	2d00      	cmp	r5, #0
 800c9f8:	dd0c      	ble.n	800ca14 <_dtoa_r+0x754>
 800c9fa:	9b05      	ldr	r3, [sp, #20]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	dd09      	ble.n	800ca14 <_dtoa_r+0x754>
 800ca00:	42ab      	cmp	r3, r5
 800ca02:	9a04      	ldr	r2, [sp, #16]
 800ca04:	bfa8      	it	ge
 800ca06:	462b      	movge	r3, r5
 800ca08:	1ad2      	subs	r2, r2, r3
 800ca0a:	9204      	str	r2, [sp, #16]
 800ca0c:	9a05      	ldr	r2, [sp, #20]
 800ca0e:	1aed      	subs	r5, r5, r3
 800ca10:	1ad3      	subs	r3, r2, r3
 800ca12:	9305      	str	r3, [sp, #20]
 800ca14:	9b07      	ldr	r3, [sp, #28]
 800ca16:	b31b      	cbz	r3, 800ca60 <_dtoa_r+0x7a0>
 800ca18:	9b08      	ldr	r3, [sp, #32]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	f000 80af 	beq.w	800cb7e <_dtoa_r+0x8be>
 800ca20:	2e00      	cmp	r6, #0
 800ca22:	dd13      	ble.n	800ca4c <_dtoa_r+0x78c>
 800ca24:	4639      	mov	r1, r7
 800ca26:	4632      	mov	r2, r6
 800ca28:	4620      	mov	r0, r4
 800ca2a:	f001 fa25 	bl	800de78 <__pow5mult>
 800ca2e:	ee18 2a10 	vmov	r2, s16
 800ca32:	4601      	mov	r1, r0
 800ca34:	4607      	mov	r7, r0
 800ca36:	4620      	mov	r0, r4
 800ca38:	f001 f974 	bl	800dd24 <__multiply>
 800ca3c:	ee18 1a10 	vmov	r1, s16
 800ca40:	4680      	mov	r8, r0
 800ca42:	4620      	mov	r0, r4
 800ca44:	f001 f856 	bl	800daf4 <_Bfree>
 800ca48:	ee08 8a10 	vmov	s16, r8
 800ca4c:	9b07      	ldr	r3, [sp, #28]
 800ca4e:	1b9a      	subs	r2, r3, r6
 800ca50:	d006      	beq.n	800ca60 <_dtoa_r+0x7a0>
 800ca52:	ee18 1a10 	vmov	r1, s16
 800ca56:	4620      	mov	r0, r4
 800ca58:	f001 fa0e 	bl	800de78 <__pow5mult>
 800ca5c:	ee08 0a10 	vmov	s16, r0
 800ca60:	2101      	movs	r1, #1
 800ca62:	4620      	mov	r0, r4
 800ca64:	f001 f948 	bl	800dcf8 <__i2b>
 800ca68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	4606      	mov	r6, r0
 800ca6e:	f340 8088 	ble.w	800cb82 <_dtoa_r+0x8c2>
 800ca72:	461a      	mov	r2, r3
 800ca74:	4601      	mov	r1, r0
 800ca76:	4620      	mov	r0, r4
 800ca78:	f001 f9fe 	bl	800de78 <__pow5mult>
 800ca7c:	9b06      	ldr	r3, [sp, #24]
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	4606      	mov	r6, r0
 800ca82:	f340 8081 	ble.w	800cb88 <_dtoa_r+0x8c8>
 800ca86:	f04f 0800 	mov.w	r8, #0
 800ca8a:	6933      	ldr	r3, [r6, #16]
 800ca8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ca90:	6918      	ldr	r0, [r3, #16]
 800ca92:	f001 f8e1 	bl	800dc58 <__hi0bits>
 800ca96:	f1c0 0020 	rsb	r0, r0, #32
 800ca9a:	9b05      	ldr	r3, [sp, #20]
 800ca9c:	4418      	add	r0, r3
 800ca9e:	f010 001f 	ands.w	r0, r0, #31
 800caa2:	f000 8092 	beq.w	800cbca <_dtoa_r+0x90a>
 800caa6:	f1c0 0320 	rsb	r3, r0, #32
 800caaa:	2b04      	cmp	r3, #4
 800caac:	f340 808a 	ble.w	800cbc4 <_dtoa_r+0x904>
 800cab0:	f1c0 001c 	rsb	r0, r0, #28
 800cab4:	9b04      	ldr	r3, [sp, #16]
 800cab6:	4403      	add	r3, r0
 800cab8:	9304      	str	r3, [sp, #16]
 800caba:	9b05      	ldr	r3, [sp, #20]
 800cabc:	4403      	add	r3, r0
 800cabe:	4405      	add	r5, r0
 800cac0:	9305      	str	r3, [sp, #20]
 800cac2:	9b04      	ldr	r3, [sp, #16]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	dd07      	ble.n	800cad8 <_dtoa_r+0x818>
 800cac8:	ee18 1a10 	vmov	r1, s16
 800cacc:	461a      	mov	r2, r3
 800cace:	4620      	mov	r0, r4
 800cad0:	f001 fa2c 	bl	800df2c <__lshift>
 800cad4:	ee08 0a10 	vmov	s16, r0
 800cad8:	9b05      	ldr	r3, [sp, #20]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	dd05      	ble.n	800caea <_dtoa_r+0x82a>
 800cade:	4631      	mov	r1, r6
 800cae0:	461a      	mov	r2, r3
 800cae2:	4620      	mov	r0, r4
 800cae4:	f001 fa22 	bl	800df2c <__lshift>
 800cae8:	4606      	mov	r6, r0
 800caea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800caec:	2b00      	cmp	r3, #0
 800caee:	d06e      	beq.n	800cbce <_dtoa_r+0x90e>
 800caf0:	ee18 0a10 	vmov	r0, s16
 800caf4:	4631      	mov	r1, r6
 800caf6:	f001 fa89 	bl	800e00c <__mcmp>
 800cafa:	2800      	cmp	r0, #0
 800cafc:	da67      	bge.n	800cbce <_dtoa_r+0x90e>
 800cafe:	9b00      	ldr	r3, [sp, #0]
 800cb00:	3b01      	subs	r3, #1
 800cb02:	ee18 1a10 	vmov	r1, s16
 800cb06:	9300      	str	r3, [sp, #0]
 800cb08:	220a      	movs	r2, #10
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	4620      	mov	r0, r4
 800cb0e:	f001 f813 	bl	800db38 <__multadd>
 800cb12:	9b08      	ldr	r3, [sp, #32]
 800cb14:	ee08 0a10 	vmov	s16, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	f000 81b1 	beq.w	800ce80 <_dtoa_r+0xbc0>
 800cb1e:	2300      	movs	r3, #0
 800cb20:	4639      	mov	r1, r7
 800cb22:	220a      	movs	r2, #10
 800cb24:	4620      	mov	r0, r4
 800cb26:	f001 f807 	bl	800db38 <__multadd>
 800cb2a:	9b02      	ldr	r3, [sp, #8]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	4607      	mov	r7, r0
 800cb30:	f300 808e 	bgt.w	800cc50 <_dtoa_r+0x990>
 800cb34:	9b06      	ldr	r3, [sp, #24]
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	dc51      	bgt.n	800cbde <_dtoa_r+0x91e>
 800cb3a:	e089      	b.n	800cc50 <_dtoa_r+0x990>
 800cb3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cb42:	e74b      	b.n	800c9dc <_dtoa_r+0x71c>
 800cb44:	9b03      	ldr	r3, [sp, #12]
 800cb46:	1e5e      	subs	r6, r3, #1
 800cb48:	9b07      	ldr	r3, [sp, #28]
 800cb4a:	42b3      	cmp	r3, r6
 800cb4c:	bfbf      	itttt	lt
 800cb4e:	9b07      	ldrlt	r3, [sp, #28]
 800cb50:	9607      	strlt	r6, [sp, #28]
 800cb52:	1af2      	sublt	r2, r6, r3
 800cb54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cb56:	bfb6      	itet	lt
 800cb58:	189b      	addlt	r3, r3, r2
 800cb5a:	1b9e      	subge	r6, r3, r6
 800cb5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cb5e:	9b03      	ldr	r3, [sp, #12]
 800cb60:	bfb8      	it	lt
 800cb62:	2600      	movlt	r6, #0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	bfb7      	itett	lt
 800cb68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cb6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cb70:	1a9d      	sublt	r5, r3, r2
 800cb72:	2300      	movlt	r3, #0
 800cb74:	e734      	b.n	800c9e0 <_dtoa_r+0x720>
 800cb76:	9e07      	ldr	r6, [sp, #28]
 800cb78:	9d04      	ldr	r5, [sp, #16]
 800cb7a:	9f08      	ldr	r7, [sp, #32]
 800cb7c:	e73b      	b.n	800c9f6 <_dtoa_r+0x736>
 800cb7e:	9a07      	ldr	r2, [sp, #28]
 800cb80:	e767      	b.n	800ca52 <_dtoa_r+0x792>
 800cb82:	9b06      	ldr	r3, [sp, #24]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	dc18      	bgt.n	800cbba <_dtoa_r+0x8fa>
 800cb88:	f1ba 0f00 	cmp.w	sl, #0
 800cb8c:	d115      	bne.n	800cbba <_dtoa_r+0x8fa>
 800cb8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb92:	b993      	cbnz	r3, 800cbba <_dtoa_r+0x8fa>
 800cb94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cb98:	0d1b      	lsrs	r3, r3, #20
 800cb9a:	051b      	lsls	r3, r3, #20
 800cb9c:	b183      	cbz	r3, 800cbc0 <_dtoa_r+0x900>
 800cb9e:	9b04      	ldr	r3, [sp, #16]
 800cba0:	3301      	adds	r3, #1
 800cba2:	9304      	str	r3, [sp, #16]
 800cba4:	9b05      	ldr	r3, [sp, #20]
 800cba6:	3301      	adds	r3, #1
 800cba8:	9305      	str	r3, [sp, #20]
 800cbaa:	f04f 0801 	mov.w	r8, #1
 800cbae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	f47f af6a 	bne.w	800ca8a <_dtoa_r+0x7ca>
 800cbb6:	2001      	movs	r0, #1
 800cbb8:	e76f      	b.n	800ca9a <_dtoa_r+0x7da>
 800cbba:	f04f 0800 	mov.w	r8, #0
 800cbbe:	e7f6      	b.n	800cbae <_dtoa_r+0x8ee>
 800cbc0:	4698      	mov	r8, r3
 800cbc2:	e7f4      	b.n	800cbae <_dtoa_r+0x8ee>
 800cbc4:	f43f af7d 	beq.w	800cac2 <_dtoa_r+0x802>
 800cbc8:	4618      	mov	r0, r3
 800cbca:	301c      	adds	r0, #28
 800cbcc:	e772      	b.n	800cab4 <_dtoa_r+0x7f4>
 800cbce:	9b03      	ldr	r3, [sp, #12]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	dc37      	bgt.n	800cc44 <_dtoa_r+0x984>
 800cbd4:	9b06      	ldr	r3, [sp, #24]
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	dd34      	ble.n	800cc44 <_dtoa_r+0x984>
 800cbda:	9b03      	ldr	r3, [sp, #12]
 800cbdc:	9302      	str	r3, [sp, #8]
 800cbde:	9b02      	ldr	r3, [sp, #8]
 800cbe0:	b96b      	cbnz	r3, 800cbfe <_dtoa_r+0x93e>
 800cbe2:	4631      	mov	r1, r6
 800cbe4:	2205      	movs	r2, #5
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	f000 ffa6 	bl	800db38 <__multadd>
 800cbec:	4601      	mov	r1, r0
 800cbee:	4606      	mov	r6, r0
 800cbf0:	ee18 0a10 	vmov	r0, s16
 800cbf4:	f001 fa0a 	bl	800e00c <__mcmp>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	f73f adbb 	bgt.w	800c774 <_dtoa_r+0x4b4>
 800cbfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc00:	9d01      	ldr	r5, [sp, #4]
 800cc02:	43db      	mvns	r3, r3
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	f04f 0800 	mov.w	r8, #0
 800cc0a:	4631      	mov	r1, r6
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	f000 ff71 	bl	800daf4 <_Bfree>
 800cc12:	2f00      	cmp	r7, #0
 800cc14:	f43f aea4 	beq.w	800c960 <_dtoa_r+0x6a0>
 800cc18:	f1b8 0f00 	cmp.w	r8, #0
 800cc1c:	d005      	beq.n	800cc2a <_dtoa_r+0x96a>
 800cc1e:	45b8      	cmp	r8, r7
 800cc20:	d003      	beq.n	800cc2a <_dtoa_r+0x96a>
 800cc22:	4641      	mov	r1, r8
 800cc24:	4620      	mov	r0, r4
 800cc26:	f000 ff65 	bl	800daf4 <_Bfree>
 800cc2a:	4639      	mov	r1, r7
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f000 ff61 	bl	800daf4 <_Bfree>
 800cc32:	e695      	b.n	800c960 <_dtoa_r+0x6a0>
 800cc34:	2600      	movs	r6, #0
 800cc36:	4637      	mov	r7, r6
 800cc38:	e7e1      	b.n	800cbfe <_dtoa_r+0x93e>
 800cc3a:	9700      	str	r7, [sp, #0]
 800cc3c:	4637      	mov	r7, r6
 800cc3e:	e599      	b.n	800c774 <_dtoa_r+0x4b4>
 800cc40:	40240000 	.word	0x40240000
 800cc44:	9b08      	ldr	r3, [sp, #32]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	f000 80ca 	beq.w	800cde0 <_dtoa_r+0xb20>
 800cc4c:	9b03      	ldr	r3, [sp, #12]
 800cc4e:	9302      	str	r3, [sp, #8]
 800cc50:	2d00      	cmp	r5, #0
 800cc52:	dd05      	ble.n	800cc60 <_dtoa_r+0x9a0>
 800cc54:	4639      	mov	r1, r7
 800cc56:	462a      	mov	r2, r5
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f001 f967 	bl	800df2c <__lshift>
 800cc5e:	4607      	mov	r7, r0
 800cc60:	f1b8 0f00 	cmp.w	r8, #0
 800cc64:	d05b      	beq.n	800cd1e <_dtoa_r+0xa5e>
 800cc66:	6879      	ldr	r1, [r7, #4]
 800cc68:	4620      	mov	r0, r4
 800cc6a:	f000 ff03 	bl	800da74 <_Balloc>
 800cc6e:	4605      	mov	r5, r0
 800cc70:	b928      	cbnz	r0, 800cc7e <_dtoa_r+0x9be>
 800cc72:	4b87      	ldr	r3, [pc, #540]	; (800ce90 <_dtoa_r+0xbd0>)
 800cc74:	4602      	mov	r2, r0
 800cc76:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cc7a:	f7ff bb3b 	b.w	800c2f4 <_dtoa_r+0x34>
 800cc7e:	693a      	ldr	r2, [r7, #16]
 800cc80:	3202      	adds	r2, #2
 800cc82:	0092      	lsls	r2, r2, #2
 800cc84:	f107 010c 	add.w	r1, r7, #12
 800cc88:	300c      	adds	r0, #12
 800cc8a:	f000 febf 	bl	800da0c <memcpy>
 800cc8e:	2201      	movs	r2, #1
 800cc90:	4629      	mov	r1, r5
 800cc92:	4620      	mov	r0, r4
 800cc94:	f001 f94a 	bl	800df2c <__lshift>
 800cc98:	9b01      	ldr	r3, [sp, #4]
 800cc9a:	f103 0901 	add.w	r9, r3, #1
 800cc9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cca2:	4413      	add	r3, r2
 800cca4:	9305      	str	r3, [sp, #20]
 800cca6:	f00a 0301 	and.w	r3, sl, #1
 800ccaa:	46b8      	mov	r8, r7
 800ccac:	9304      	str	r3, [sp, #16]
 800ccae:	4607      	mov	r7, r0
 800ccb0:	4631      	mov	r1, r6
 800ccb2:	ee18 0a10 	vmov	r0, s16
 800ccb6:	f7ff fa75 	bl	800c1a4 <quorem>
 800ccba:	4641      	mov	r1, r8
 800ccbc:	9002      	str	r0, [sp, #8]
 800ccbe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ccc2:	ee18 0a10 	vmov	r0, s16
 800ccc6:	f001 f9a1 	bl	800e00c <__mcmp>
 800ccca:	463a      	mov	r2, r7
 800cccc:	9003      	str	r0, [sp, #12]
 800ccce:	4631      	mov	r1, r6
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f001 f9b7 	bl	800e044 <__mdiff>
 800ccd6:	68c2      	ldr	r2, [r0, #12]
 800ccd8:	f109 3bff 	add.w	fp, r9, #4294967295
 800ccdc:	4605      	mov	r5, r0
 800ccde:	bb02      	cbnz	r2, 800cd22 <_dtoa_r+0xa62>
 800cce0:	4601      	mov	r1, r0
 800cce2:	ee18 0a10 	vmov	r0, s16
 800cce6:	f001 f991 	bl	800e00c <__mcmp>
 800ccea:	4602      	mov	r2, r0
 800ccec:	4629      	mov	r1, r5
 800ccee:	4620      	mov	r0, r4
 800ccf0:	9207      	str	r2, [sp, #28]
 800ccf2:	f000 feff 	bl	800daf4 <_Bfree>
 800ccf6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ccfa:	ea43 0102 	orr.w	r1, r3, r2
 800ccfe:	9b04      	ldr	r3, [sp, #16]
 800cd00:	430b      	orrs	r3, r1
 800cd02:	464d      	mov	r5, r9
 800cd04:	d10f      	bne.n	800cd26 <_dtoa_r+0xa66>
 800cd06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cd0a:	d02a      	beq.n	800cd62 <_dtoa_r+0xaa2>
 800cd0c:	9b03      	ldr	r3, [sp, #12]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	dd02      	ble.n	800cd18 <_dtoa_r+0xa58>
 800cd12:	9b02      	ldr	r3, [sp, #8]
 800cd14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cd18:	f88b a000 	strb.w	sl, [fp]
 800cd1c:	e775      	b.n	800cc0a <_dtoa_r+0x94a>
 800cd1e:	4638      	mov	r0, r7
 800cd20:	e7ba      	b.n	800cc98 <_dtoa_r+0x9d8>
 800cd22:	2201      	movs	r2, #1
 800cd24:	e7e2      	b.n	800ccec <_dtoa_r+0xa2c>
 800cd26:	9b03      	ldr	r3, [sp, #12]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	db04      	blt.n	800cd36 <_dtoa_r+0xa76>
 800cd2c:	9906      	ldr	r1, [sp, #24]
 800cd2e:	430b      	orrs	r3, r1
 800cd30:	9904      	ldr	r1, [sp, #16]
 800cd32:	430b      	orrs	r3, r1
 800cd34:	d122      	bne.n	800cd7c <_dtoa_r+0xabc>
 800cd36:	2a00      	cmp	r2, #0
 800cd38:	ddee      	ble.n	800cd18 <_dtoa_r+0xa58>
 800cd3a:	ee18 1a10 	vmov	r1, s16
 800cd3e:	2201      	movs	r2, #1
 800cd40:	4620      	mov	r0, r4
 800cd42:	f001 f8f3 	bl	800df2c <__lshift>
 800cd46:	4631      	mov	r1, r6
 800cd48:	ee08 0a10 	vmov	s16, r0
 800cd4c:	f001 f95e 	bl	800e00c <__mcmp>
 800cd50:	2800      	cmp	r0, #0
 800cd52:	dc03      	bgt.n	800cd5c <_dtoa_r+0xa9c>
 800cd54:	d1e0      	bne.n	800cd18 <_dtoa_r+0xa58>
 800cd56:	f01a 0f01 	tst.w	sl, #1
 800cd5a:	d0dd      	beq.n	800cd18 <_dtoa_r+0xa58>
 800cd5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cd60:	d1d7      	bne.n	800cd12 <_dtoa_r+0xa52>
 800cd62:	2339      	movs	r3, #57	; 0x39
 800cd64:	f88b 3000 	strb.w	r3, [fp]
 800cd68:	462b      	mov	r3, r5
 800cd6a:	461d      	mov	r5, r3
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cd72:	2a39      	cmp	r2, #57	; 0x39
 800cd74:	d071      	beq.n	800ce5a <_dtoa_r+0xb9a>
 800cd76:	3201      	adds	r2, #1
 800cd78:	701a      	strb	r2, [r3, #0]
 800cd7a:	e746      	b.n	800cc0a <_dtoa_r+0x94a>
 800cd7c:	2a00      	cmp	r2, #0
 800cd7e:	dd07      	ble.n	800cd90 <_dtoa_r+0xad0>
 800cd80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cd84:	d0ed      	beq.n	800cd62 <_dtoa_r+0xaa2>
 800cd86:	f10a 0301 	add.w	r3, sl, #1
 800cd8a:	f88b 3000 	strb.w	r3, [fp]
 800cd8e:	e73c      	b.n	800cc0a <_dtoa_r+0x94a>
 800cd90:	9b05      	ldr	r3, [sp, #20]
 800cd92:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cd96:	4599      	cmp	r9, r3
 800cd98:	d047      	beq.n	800ce2a <_dtoa_r+0xb6a>
 800cd9a:	ee18 1a10 	vmov	r1, s16
 800cd9e:	2300      	movs	r3, #0
 800cda0:	220a      	movs	r2, #10
 800cda2:	4620      	mov	r0, r4
 800cda4:	f000 fec8 	bl	800db38 <__multadd>
 800cda8:	45b8      	cmp	r8, r7
 800cdaa:	ee08 0a10 	vmov	s16, r0
 800cdae:	f04f 0300 	mov.w	r3, #0
 800cdb2:	f04f 020a 	mov.w	r2, #10
 800cdb6:	4641      	mov	r1, r8
 800cdb8:	4620      	mov	r0, r4
 800cdba:	d106      	bne.n	800cdca <_dtoa_r+0xb0a>
 800cdbc:	f000 febc 	bl	800db38 <__multadd>
 800cdc0:	4680      	mov	r8, r0
 800cdc2:	4607      	mov	r7, r0
 800cdc4:	f109 0901 	add.w	r9, r9, #1
 800cdc8:	e772      	b.n	800ccb0 <_dtoa_r+0x9f0>
 800cdca:	f000 feb5 	bl	800db38 <__multadd>
 800cdce:	4639      	mov	r1, r7
 800cdd0:	4680      	mov	r8, r0
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	220a      	movs	r2, #10
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f000 feae 	bl	800db38 <__multadd>
 800cddc:	4607      	mov	r7, r0
 800cdde:	e7f1      	b.n	800cdc4 <_dtoa_r+0xb04>
 800cde0:	9b03      	ldr	r3, [sp, #12]
 800cde2:	9302      	str	r3, [sp, #8]
 800cde4:	9d01      	ldr	r5, [sp, #4]
 800cde6:	ee18 0a10 	vmov	r0, s16
 800cdea:	4631      	mov	r1, r6
 800cdec:	f7ff f9da 	bl	800c1a4 <quorem>
 800cdf0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cdf4:	9b01      	ldr	r3, [sp, #4]
 800cdf6:	f805 ab01 	strb.w	sl, [r5], #1
 800cdfa:	1aea      	subs	r2, r5, r3
 800cdfc:	9b02      	ldr	r3, [sp, #8]
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	dd09      	ble.n	800ce16 <_dtoa_r+0xb56>
 800ce02:	ee18 1a10 	vmov	r1, s16
 800ce06:	2300      	movs	r3, #0
 800ce08:	220a      	movs	r2, #10
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	f000 fe94 	bl	800db38 <__multadd>
 800ce10:	ee08 0a10 	vmov	s16, r0
 800ce14:	e7e7      	b.n	800cde6 <_dtoa_r+0xb26>
 800ce16:	9b02      	ldr	r3, [sp, #8]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	bfc8      	it	gt
 800ce1c:	461d      	movgt	r5, r3
 800ce1e:	9b01      	ldr	r3, [sp, #4]
 800ce20:	bfd8      	it	le
 800ce22:	2501      	movle	r5, #1
 800ce24:	441d      	add	r5, r3
 800ce26:	f04f 0800 	mov.w	r8, #0
 800ce2a:	ee18 1a10 	vmov	r1, s16
 800ce2e:	2201      	movs	r2, #1
 800ce30:	4620      	mov	r0, r4
 800ce32:	f001 f87b 	bl	800df2c <__lshift>
 800ce36:	4631      	mov	r1, r6
 800ce38:	ee08 0a10 	vmov	s16, r0
 800ce3c:	f001 f8e6 	bl	800e00c <__mcmp>
 800ce40:	2800      	cmp	r0, #0
 800ce42:	dc91      	bgt.n	800cd68 <_dtoa_r+0xaa8>
 800ce44:	d102      	bne.n	800ce4c <_dtoa_r+0xb8c>
 800ce46:	f01a 0f01 	tst.w	sl, #1
 800ce4a:	d18d      	bne.n	800cd68 <_dtoa_r+0xaa8>
 800ce4c:	462b      	mov	r3, r5
 800ce4e:	461d      	mov	r5, r3
 800ce50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce54:	2a30      	cmp	r2, #48	; 0x30
 800ce56:	d0fa      	beq.n	800ce4e <_dtoa_r+0xb8e>
 800ce58:	e6d7      	b.n	800cc0a <_dtoa_r+0x94a>
 800ce5a:	9a01      	ldr	r2, [sp, #4]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d184      	bne.n	800cd6a <_dtoa_r+0xaaa>
 800ce60:	9b00      	ldr	r3, [sp, #0]
 800ce62:	3301      	adds	r3, #1
 800ce64:	9300      	str	r3, [sp, #0]
 800ce66:	2331      	movs	r3, #49	; 0x31
 800ce68:	7013      	strb	r3, [r2, #0]
 800ce6a:	e6ce      	b.n	800cc0a <_dtoa_r+0x94a>
 800ce6c:	4b09      	ldr	r3, [pc, #36]	; (800ce94 <_dtoa_r+0xbd4>)
 800ce6e:	f7ff ba95 	b.w	800c39c <_dtoa_r+0xdc>
 800ce72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f47f aa6e 	bne.w	800c356 <_dtoa_r+0x96>
 800ce7a:	4b07      	ldr	r3, [pc, #28]	; (800ce98 <_dtoa_r+0xbd8>)
 800ce7c:	f7ff ba8e 	b.w	800c39c <_dtoa_r+0xdc>
 800ce80:	9b02      	ldr	r3, [sp, #8]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	dcae      	bgt.n	800cde4 <_dtoa_r+0xb24>
 800ce86:	9b06      	ldr	r3, [sp, #24]
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	f73f aea8 	bgt.w	800cbde <_dtoa_r+0x91e>
 800ce8e:	e7a9      	b.n	800cde4 <_dtoa_r+0xb24>
 800ce90:	0800f61d 	.word	0x0800f61d
 800ce94:	0800f868 	.word	0x0800f868
 800ce98:	0800f5b5 	.word	0x0800f5b5

0800ce9c <__sflush_r>:
 800ce9c:	898a      	ldrh	r2, [r1, #12]
 800ce9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea2:	4605      	mov	r5, r0
 800cea4:	0710      	lsls	r0, r2, #28
 800cea6:	460c      	mov	r4, r1
 800cea8:	d458      	bmi.n	800cf5c <__sflush_r+0xc0>
 800ceaa:	684b      	ldr	r3, [r1, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	dc05      	bgt.n	800cebc <__sflush_r+0x20>
 800ceb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	dc02      	bgt.n	800cebc <__sflush_r+0x20>
 800ceb6:	2000      	movs	r0, #0
 800ceb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cebe:	2e00      	cmp	r6, #0
 800cec0:	d0f9      	beq.n	800ceb6 <__sflush_r+0x1a>
 800cec2:	2300      	movs	r3, #0
 800cec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cec8:	682f      	ldr	r7, [r5, #0]
 800ceca:	602b      	str	r3, [r5, #0]
 800cecc:	d032      	beq.n	800cf34 <__sflush_r+0x98>
 800cece:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ced0:	89a3      	ldrh	r3, [r4, #12]
 800ced2:	075a      	lsls	r2, r3, #29
 800ced4:	d505      	bpl.n	800cee2 <__sflush_r+0x46>
 800ced6:	6863      	ldr	r3, [r4, #4]
 800ced8:	1ac0      	subs	r0, r0, r3
 800ceda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cedc:	b10b      	cbz	r3, 800cee2 <__sflush_r+0x46>
 800cede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cee0:	1ac0      	subs	r0, r0, r3
 800cee2:	2300      	movs	r3, #0
 800cee4:	4602      	mov	r2, r0
 800cee6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cee8:	6a21      	ldr	r1, [r4, #32]
 800ceea:	4628      	mov	r0, r5
 800ceec:	47b0      	blx	r6
 800ceee:	1c43      	adds	r3, r0, #1
 800cef0:	89a3      	ldrh	r3, [r4, #12]
 800cef2:	d106      	bne.n	800cf02 <__sflush_r+0x66>
 800cef4:	6829      	ldr	r1, [r5, #0]
 800cef6:	291d      	cmp	r1, #29
 800cef8:	d82c      	bhi.n	800cf54 <__sflush_r+0xb8>
 800cefa:	4a2a      	ldr	r2, [pc, #168]	; (800cfa4 <__sflush_r+0x108>)
 800cefc:	40ca      	lsrs	r2, r1
 800cefe:	07d6      	lsls	r6, r2, #31
 800cf00:	d528      	bpl.n	800cf54 <__sflush_r+0xb8>
 800cf02:	2200      	movs	r2, #0
 800cf04:	6062      	str	r2, [r4, #4]
 800cf06:	04d9      	lsls	r1, r3, #19
 800cf08:	6922      	ldr	r2, [r4, #16]
 800cf0a:	6022      	str	r2, [r4, #0]
 800cf0c:	d504      	bpl.n	800cf18 <__sflush_r+0x7c>
 800cf0e:	1c42      	adds	r2, r0, #1
 800cf10:	d101      	bne.n	800cf16 <__sflush_r+0x7a>
 800cf12:	682b      	ldr	r3, [r5, #0]
 800cf14:	b903      	cbnz	r3, 800cf18 <__sflush_r+0x7c>
 800cf16:	6560      	str	r0, [r4, #84]	; 0x54
 800cf18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf1a:	602f      	str	r7, [r5, #0]
 800cf1c:	2900      	cmp	r1, #0
 800cf1e:	d0ca      	beq.n	800ceb6 <__sflush_r+0x1a>
 800cf20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf24:	4299      	cmp	r1, r3
 800cf26:	d002      	beq.n	800cf2e <__sflush_r+0x92>
 800cf28:	4628      	mov	r0, r5
 800cf2a:	f7fc ffb7 	bl	8009e9c <_free_r>
 800cf2e:	2000      	movs	r0, #0
 800cf30:	6360      	str	r0, [r4, #52]	; 0x34
 800cf32:	e7c1      	b.n	800ceb8 <__sflush_r+0x1c>
 800cf34:	6a21      	ldr	r1, [r4, #32]
 800cf36:	2301      	movs	r3, #1
 800cf38:	4628      	mov	r0, r5
 800cf3a:	47b0      	blx	r6
 800cf3c:	1c41      	adds	r1, r0, #1
 800cf3e:	d1c7      	bne.n	800ced0 <__sflush_r+0x34>
 800cf40:	682b      	ldr	r3, [r5, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d0c4      	beq.n	800ced0 <__sflush_r+0x34>
 800cf46:	2b1d      	cmp	r3, #29
 800cf48:	d001      	beq.n	800cf4e <__sflush_r+0xb2>
 800cf4a:	2b16      	cmp	r3, #22
 800cf4c:	d101      	bne.n	800cf52 <__sflush_r+0xb6>
 800cf4e:	602f      	str	r7, [r5, #0]
 800cf50:	e7b1      	b.n	800ceb6 <__sflush_r+0x1a>
 800cf52:	89a3      	ldrh	r3, [r4, #12]
 800cf54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf58:	81a3      	strh	r3, [r4, #12]
 800cf5a:	e7ad      	b.n	800ceb8 <__sflush_r+0x1c>
 800cf5c:	690f      	ldr	r7, [r1, #16]
 800cf5e:	2f00      	cmp	r7, #0
 800cf60:	d0a9      	beq.n	800ceb6 <__sflush_r+0x1a>
 800cf62:	0793      	lsls	r3, r2, #30
 800cf64:	680e      	ldr	r6, [r1, #0]
 800cf66:	bf08      	it	eq
 800cf68:	694b      	ldreq	r3, [r1, #20]
 800cf6a:	600f      	str	r7, [r1, #0]
 800cf6c:	bf18      	it	ne
 800cf6e:	2300      	movne	r3, #0
 800cf70:	eba6 0807 	sub.w	r8, r6, r7
 800cf74:	608b      	str	r3, [r1, #8]
 800cf76:	f1b8 0f00 	cmp.w	r8, #0
 800cf7a:	dd9c      	ble.n	800ceb6 <__sflush_r+0x1a>
 800cf7c:	6a21      	ldr	r1, [r4, #32]
 800cf7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf80:	4643      	mov	r3, r8
 800cf82:	463a      	mov	r2, r7
 800cf84:	4628      	mov	r0, r5
 800cf86:	47b0      	blx	r6
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	dc06      	bgt.n	800cf9a <__sflush_r+0xfe>
 800cf8c:	89a3      	ldrh	r3, [r4, #12]
 800cf8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf92:	81a3      	strh	r3, [r4, #12]
 800cf94:	f04f 30ff 	mov.w	r0, #4294967295
 800cf98:	e78e      	b.n	800ceb8 <__sflush_r+0x1c>
 800cf9a:	4407      	add	r7, r0
 800cf9c:	eba8 0800 	sub.w	r8, r8, r0
 800cfa0:	e7e9      	b.n	800cf76 <__sflush_r+0xda>
 800cfa2:	bf00      	nop
 800cfa4:	20400001 	.word	0x20400001

0800cfa8 <_fflush_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	690b      	ldr	r3, [r1, #16]
 800cfac:	4605      	mov	r5, r0
 800cfae:	460c      	mov	r4, r1
 800cfb0:	b913      	cbnz	r3, 800cfb8 <_fflush_r+0x10>
 800cfb2:	2500      	movs	r5, #0
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	bd38      	pop	{r3, r4, r5, pc}
 800cfb8:	b118      	cbz	r0, 800cfc2 <_fflush_r+0x1a>
 800cfba:	6983      	ldr	r3, [r0, #24]
 800cfbc:	b90b      	cbnz	r3, 800cfc2 <_fflush_r+0x1a>
 800cfbe:	f000 f887 	bl	800d0d0 <__sinit>
 800cfc2:	4b14      	ldr	r3, [pc, #80]	; (800d014 <_fflush_r+0x6c>)
 800cfc4:	429c      	cmp	r4, r3
 800cfc6:	d11b      	bne.n	800d000 <_fflush_r+0x58>
 800cfc8:	686c      	ldr	r4, [r5, #4]
 800cfca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d0ef      	beq.n	800cfb2 <_fflush_r+0xa>
 800cfd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cfd4:	07d0      	lsls	r0, r2, #31
 800cfd6:	d404      	bmi.n	800cfe2 <_fflush_r+0x3a>
 800cfd8:	0599      	lsls	r1, r3, #22
 800cfda:	d402      	bmi.n	800cfe2 <_fflush_r+0x3a>
 800cfdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfde:	f000 fc88 	bl	800d8f2 <__retarget_lock_acquire_recursive>
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	4621      	mov	r1, r4
 800cfe6:	f7ff ff59 	bl	800ce9c <__sflush_r>
 800cfea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfec:	07da      	lsls	r2, r3, #31
 800cfee:	4605      	mov	r5, r0
 800cff0:	d4e0      	bmi.n	800cfb4 <_fflush_r+0xc>
 800cff2:	89a3      	ldrh	r3, [r4, #12]
 800cff4:	059b      	lsls	r3, r3, #22
 800cff6:	d4dd      	bmi.n	800cfb4 <_fflush_r+0xc>
 800cff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cffa:	f000 fc7b 	bl	800d8f4 <__retarget_lock_release_recursive>
 800cffe:	e7d9      	b.n	800cfb4 <_fflush_r+0xc>
 800d000:	4b05      	ldr	r3, [pc, #20]	; (800d018 <_fflush_r+0x70>)
 800d002:	429c      	cmp	r4, r3
 800d004:	d101      	bne.n	800d00a <_fflush_r+0x62>
 800d006:	68ac      	ldr	r4, [r5, #8]
 800d008:	e7df      	b.n	800cfca <_fflush_r+0x22>
 800d00a:	4b04      	ldr	r3, [pc, #16]	; (800d01c <_fflush_r+0x74>)
 800d00c:	429c      	cmp	r4, r3
 800d00e:	bf08      	it	eq
 800d010:	68ec      	ldreq	r4, [r5, #12]
 800d012:	e7da      	b.n	800cfca <_fflush_r+0x22>
 800d014:	0800f650 	.word	0x0800f650
 800d018:	0800f670 	.word	0x0800f670
 800d01c:	0800f630 	.word	0x0800f630

0800d020 <std>:
 800d020:	2300      	movs	r3, #0
 800d022:	b510      	push	{r4, lr}
 800d024:	4604      	mov	r4, r0
 800d026:	e9c0 3300 	strd	r3, r3, [r0]
 800d02a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d02e:	6083      	str	r3, [r0, #8]
 800d030:	8181      	strh	r1, [r0, #12]
 800d032:	6643      	str	r3, [r0, #100]	; 0x64
 800d034:	81c2      	strh	r2, [r0, #14]
 800d036:	6183      	str	r3, [r0, #24]
 800d038:	4619      	mov	r1, r3
 800d03a:	2208      	movs	r2, #8
 800d03c:	305c      	adds	r0, #92	; 0x5c
 800d03e:	f7fc ff25 	bl	8009e8c <memset>
 800d042:	4b05      	ldr	r3, [pc, #20]	; (800d058 <std+0x38>)
 800d044:	6263      	str	r3, [r4, #36]	; 0x24
 800d046:	4b05      	ldr	r3, [pc, #20]	; (800d05c <std+0x3c>)
 800d048:	62a3      	str	r3, [r4, #40]	; 0x28
 800d04a:	4b05      	ldr	r3, [pc, #20]	; (800d060 <std+0x40>)
 800d04c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d04e:	4b05      	ldr	r3, [pc, #20]	; (800d064 <std+0x44>)
 800d050:	6224      	str	r4, [r4, #32]
 800d052:	6323      	str	r3, [r4, #48]	; 0x30
 800d054:	bd10      	pop	{r4, pc}
 800d056:	bf00      	nop
 800d058:	0800b0f5 	.word	0x0800b0f5
 800d05c:	0800b11b 	.word	0x0800b11b
 800d060:	0800b153 	.word	0x0800b153
 800d064:	0800b177 	.word	0x0800b177

0800d068 <_cleanup_r>:
 800d068:	4901      	ldr	r1, [pc, #4]	; (800d070 <_cleanup_r+0x8>)
 800d06a:	f000 b8af 	b.w	800d1cc <_fwalk_reent>
 800d06e:	bf00      	nop
 800d070:	0800cfa9 	.word	0x0800cfa9

0800d074 <__sfmoreglue>:
 800d074:	b570      	push	{r4, r5, r6, lr}
 800d076:	2268      	movs	r2, #104	; 0x68
 800d078:	1e4d      	subs	r5, r1, #1
 800d07a:	4355      	muls	r5, r2
 800d07c:	460e      	mov	r6, r1
 800d07e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d082:	f7fc ff77 	bl	8009f74 <_malloc_r>
 800d086:	4604      	mov	r4, r0
 800d088:	b140      	cbz	r0, 800d09c <__sfmoreglue+0x28>
 800d08a:	2100      	movs	r1, #0
 800d08c:	e9c0 1600 	strd	r1, r6, [r0]
 800d090:	300c      	adds	r0, #12
 800d092:	60a0      	str	r0, [r4, #8]
 800d094:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d098:	f7fc fef8 	bl	8009e8c <memset>
 800d09c:	4620      	mov	r0, r4
 800d09e:	bd70      	pop	{r4, r5, r6, pc}

0800d0a0 <__sfp_lock_acquire>:
 800d0a0:	4801      	ldr	r0, [pc, #4]	; (800d0a8 <__sfp_lock_acquire+0x8>)
 800d0a2:	f000 bc26 	b.w	800d8f2 <__retarget_lock_acquire_recursive>
 800d0a6:	bf00      	nop
 800d0a8:	20001c89 	.word	0x20001c89

0800d0ac <__sfp_lock_release>:
 800d0ac:	4801      	ldr	r0, [pc, #4]	; (800d0b4 <__sfp_lock_release+0x8>)
 800d0ae:	f000 bc21 	b.w	800d8f4 <__retarget_lock_release_recursive>
 800d0b2:	bf00      	nop
 800d0b4:	20001c89 	.word	0x20001c89

0800d0b8 <__sinit_lock_acquire>:
 800d0b8:	4801      	ldr	r0, [pc, #4]	; (800d0c0 <__sinit_lock_acquire+0x8>)
 800d0ba:	f000 bc1a 	b.w	800d8f2 <__retarget_lock_acquire_recursive>
 800d0be:	bf00      	nop
 800d0c0:	20001c8a 	.word	0x20001c8a

0800d0c4 <__sinit_lock_release>:
 800d0c4:	4801      	ldr	r0, [pc, #4]	; (800d0cc <__sinit_lock_release+0x8>)
 800d0c6:	f000 bc15 	b.w	800d8f4 <__retarget_lock_release_recursive>
 800d0ca:	bf00      	nop
 800d0cc:	20001c8a 	.word	0x20001c8a

0800d0d0 <__sinit>:
 800d0d0:	b510      	push	{r4, lr}
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	f7ff fff0 	bl	800d0b8 <__sinit_lock_acquire>
 800d0d8:	69a3      	ldr	r3, [r4, #24]
 800d0da:	b11b      	cbz	r3, 800d0e4 <__sinit+0x14>
 800d0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0e0:	f7ff bff0 	b.w	800d0c4 <__sinit_lock_release>
 800d0e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d0e8:	6523      	str	r3, [r4, #80]	; 0x50
 800d0ea:	4b13      	ldr	r3, [pc, #76]	; (800d138 <__sinit+0x68>)
 800d0ec:	4a13      	ldr	r2, [pc, #76]	; (800d13c <__sinit+0x6c>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d0f2:	42a3      	cmp	r3, r4
 800d0f4:	bf04      	itt	eq
 800d0f6:	2301      	moveq	r3, #1
 800d0f8:	61a3      	streq	r3, [r4, #24]
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	f000 f820 	bl	800d140 <__sfp>
 800d100:	6060      	str	r0, [r4, #4]
 800d102:	4620      	mov	r0, r4
 800d104:	f000 f81c 	bl	800d140 <__sfp>
 800d108:	60a0      	str	r0, [r4, #8]
 800d10a:	4620      	mov	r0, r4
 800d10c:	f000 f818 	bl	800d140 <__sfp>
 800d110:	2200      	movs	r2, #0
 800d112:	60e0      	str	r0, [r4, #12]
 800d114:	2104      	movs	r1, #4
 800d116:	6860      	ldr	r0, [r4, #4]
 800d118:	f7ff ff82 	bl	800d020 <std>
 800d11c:	68a0      	ldr	r0, [r4, #8]
 800d11e:	2201      	movs	r2, #1
 800d120:	2109      	movs	r1, #9
 800d122:	f7ff ff7d 	bl	800d020 <std>
 800d126:	68e0      	ldr	r0, [r4, #12]
 800d128:	2202      	movs	r2, #2
 800d12a:	2112      	movs	r1, #18
 800d12c:	f7ff ff78 	bl	800d020 <std>
 800d130:	2301      	movs	r3, #1
 800d132:	61a3      	str	r3, [r4, #24]
 800d134:	e7d2      	b.n	800d0dc <__sinit+0xc>
 800d136:	bf00      	nop
 800d138:	0800f3a4 	.word	0x0800f3a4
 800d13c:	0800d069 	.word	0x0800d069

0800d140 <__sfp>:
 800d140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d142:	4607      	mov	r7, r0
 800d144:	f7ff ffac 	bl	800d0a0 <__sfp_lock_acquire>
 800d148:	4b1e      	ldr	r3, [pc, #120]	; (800d1c4 <__sfp+0x84>)
 800d14a:	681e      	ldr	r6, [r3, #0]
 800d14c:	69b3      	ldr	r3, [r6, #24]
 800d14e:	b913      	cbnz	r3, 800d156 <__sfp+0x16>
 800d150:	4630      	mov	r0, r6
 800d152:	f7ff ffbd 	bl	800d0d0 <__sinit>
 800d156:	3648      	adds	r6, #72	; 0x48
 800d158:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d15c:	3b01      	subs	r3, #1
 800d15e:	d503      	bpl.n	800d168 <__sfp+0x28>
 800d160:	6833      	ldr	r3, [r6, #0]
 800d162:	b30b      	cbz	r3, 800d1a8 <__sfp+0x68>
 800d164:	6836      	ldr	r6, [r6, #0]
 800d166:	e7f7      	b.n	800d158 <__sfp+0x18>
 800d168:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d16c:	b9d5      	cbnz	r5, 800d1a4 <__sfp+0x64>
 800d16e:	4b16      	ldr	r3, [pc, #88]	; (800d1c8 <__sfp+0x88>)
 800d170:	60e3      	str	r3, [r4, #12]
 800d172:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d176:	6665      	str	r5, [r4, #100]	; 0x64
 800d178:	f000 fbba 	bl	800d8f0 <__retarget_lock_init_recursive>
 800d17c:	f7ff ff96 	bl	800d0ac <__sfp_lock_release>
 800d180:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d184:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d188:	6025      	str	r5, [r4, #0]
 800d18a:	61a5      	str	r5, [r4, #24]
 800d18c:	2208      	movs	r2, #8
 800d18e:	4629      	mov	r1, r5
 800d190:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d194:	f7fc fe7a 	bl	8009e8c <memset>
 800d198:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d19c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1a4:	3468      	adds	r4, #104	; 0x68
 800d1a6:	e7d9      	b.n	800d15c <__sfp+0x1c>
 800d1a8:	2104      	movs	r1, #4
 800d1aa:	4638      	mov	r0, r7
 800d1ac:	f7ff ff62 	bl	800d074 <__sfmoreglue>
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	6030      	str	r0, [r6, #0]
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	d1d5      	bne.n	800d164 <__sfp+0x24>
 800d1b8:	f7ff ff78 	bl	800d0ac <__sfp_lock_release>
 800d1bc:	230c      	movs	r3, #12
 800d1be:	603b      	str	r3, [r7, #0]
 800d1c0:	e7ee      	b.n	800d1a0 <__sfp+0x60>
 800d1c2:	bf00      	nop
 800d1c4:	0800f3a4 	.word	0x0800f3a4
 800d1c8:	ffff0001 	.word	0xffff0001

0800d1cc <_fwalk_reent>:
 800d1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1d0:	4606      	mov	r6, r0
 800d1d2:	4688      	mov	r8, r1
 800d1d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d1d8:	2700      	movs	r7, #0
 800d1da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d1de:	f1b9 0901 	subs.w	r9, r9, #1
 800d1e2:	d505      	bpl.n	800d1f0 <_fwalk_reent+0x24>
 800d1e4:	6824      	ldr	r4, [r4, #0]
 800d1e6:	2c00      	cmp	r4, #0
 800d1e8:	d1f7      	bne.n	800d1da <_fwalk_reent+0xe>
 800d1ea:	4638      	mov	r0, r7
 800d1ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1f0:	89ab      	ldrh	r3, [r5, #12]
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d907      	bls.n	800d206 <_fwalk_reent+0x3a>
 800d1f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	d003      	beq.n	800d206 <_fwalk_reent+0x3a>
 800d1fe:	4629      	mov	r1, r5
 800d200:	4630      	mov	r0, r6
 800d202:	47c0      	blx	r8
 800d204:	4307      	orrs	r7, r0
 800d206:	3568      	adds	r5, #104	; 0x68
 800d208:	e7e9      	b.n	800d1de <_fwalk_reent+0x12>

0800d20a <rshift>:
 800d20a:	6903      	ldr	r3, [r0, #16]
 800d20c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d214:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d218:	f100 0414 	add.w	r4, r0, #20
 800d21c:	dd45      	ble.n	800d2aa <rshift+0xa0>
 800d21e:	f011 011f 	ands.w	r1, r1, #31
 800d222:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d226:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d22a:	d10c      	bne.n	800d246 <rshift+0x3c>
 800d22c:	f100 0710 	add.w	r7, r0, #16
 800d230:	4629      	mov	r1, r5
 800d232:	42b1      	cmp	r1, r6
 800d234:	d334      	bcc.n	800d2a0 <rshift+0x96>
 800d236:	1a9b      	subs	r3, r3, r2
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	1eea      	subs	r2, r5, #3
 800d23c:	4296      	cmp	r6, r2
 800d23e:	bf38      	it	cc
 800d240:	2300      	movcc	r3, #0
 800d242:	4423      	add	r3, r4
 800d244:	e015      	b.n	800d272 <rshift+0x68>
 800d246:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d24a:	f1c1 0820 	rsb	r8, r1, #32
 800d24e:	40cf      	lsrs	r7, r1
 800d250:	f105 0e04 	add.w	lr, r5, #4
 800d254:	46a1      	mov	r9, r4
 800d256:	4576      	cmp	r6, lr
 800d258:	46f4      	mov	ip, lr
 800d25a:	d815      	bhi.n	800d288 <rshift+0x7e>
 800d25c:	1a9a      	subs	r2, r3, r2
 800d25e:	0092      	lsls	r2, r2, #2
 800d260:	3a04      	subs	r2, #4
 800d262:	3501      	adds	r5, #1
 800d264:	42ae      	cmp	r6, r5
 800d266:	bf38      	it	cc
 800d268:	2200      	movcc	r2, #0
 800d26a:	18a3      	adds	r3, r4, r2
 800d26c:	50a7      	str	r7, [r4, r2]
 800d26e:	b107      	cbz	r7, 800d272 <rshift+0x68>
 800d270:	3304      	adds	r3, #4
 800d272:	1b1a      	subs	r2, r3, r4
 800d274:	42a3      	cmp	r3, r4
 800d276:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d27a:	bf08      	it	eq
 800d27c:	2300      	moveq	r3, #0
 800d27e:	6102      	str	r2, [r0, #16]
 800d280:	bf08      	it	eq
 800d282:	6143      	streq	r3, [r0, #20]
 800d284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d288:	f8dc c000 	ldr.w	ip, [ip]
 800d28c:	fa0c fc08 	lsl.w	ip, ip, r8
 800d290:	ea4c 0707 	orr.w	r7, ip, r7
 800d294:	f849 7b04 	str.w	r7, [r9], #4
 800d298:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d29c:	40cf      	lsrs	r7, r1
 800d29e:	e7da      	b.n	800d256 <rshift+0x4c>
 800d2a0:	f851 cb04 	ldr.w	ip, [r1], #4
 800d2a4:	f847 cf04 	str.w	ip, [r7, #4]!
 800d2a8:	e7c3      	b.n	800d232 <rshift+0x28>
 800d2aa:	4623      	mov	r3, r4
 800d2ac:	e7e1      	b.n	800d272 <rshift+0x68>

0800d2ae <__hexdig_fun>:
 800d2ae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d2b2:	2b09      	cmp	r3, #9
 800d2b4:	d802      	bhi.n	800d2bc <__hexdig_fun+0xe>
 800d2b6:	3820      	subs	r0, #32
 800d2b8:	b2c0      	uxtb	r0, r0
 800d2ba:	4770      	bx	lr
 800d2bc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d2c0:	2b05      	cmp	r3, #5
 800d2c2:	d801      	bhi.n	800d2c8 <__hexdig_fun+0x1a>
 800d2c4:	3847      	subs	r0, #71	; 0x47
 800d2c6:	e7f7      	b.n	800d2b8 <__hexdig_fun+0xa>
 800d2c8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d2cc:	2b05      	cmp	r3, #5
 800d2ce:	d801      	bhi.n	800d2d4 <__hexdig_fun+0x26>
 800d2d0:	3827      	subs	r0, #39	; 0x27
 800d2d2:	e7f1      	b.n	800d2b8 <__hexdig_fun+0xa>
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	4770      	bx	lr

0800d2d8 <__gethex>:
 800d2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2dc:	ed2d 8b02 	vpush	{d8}
 800d2e0:	b089      	sub	sp, #36	; 0x24
 800d2e2:	ee08 0a10 	vmov	s16, r0
 800d2e6:	9304      	str	r3, [sp, #16]
 800d2e8:	4bb4      	ldr	r3, [pc, #720]	; (800d5bc <__gethex+0x2e4>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	9301      	str	r3, [sp, #4]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	468b      	mov	fp, r1
 800d2f2:	4690      	mov	r8, r2
 800d2f4:	f7f2 ff76 	bl	80001e4 <strlen>
 800d2f8:	9b01      	ldr	r3, [sp, #4]
 800d2fa:	f8db 2000 	ldr.w	r2, [fp]
 800d2fe:	4403      	add	r3, r0
 800d300:	4682      	mov	sl, r0
 800d302:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d306:	9305      	str	r3, [sp, #20]
 800d308:	1c93      	adds	r3, r2, #2
 800d30a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d30e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d312:	32fe      	adds	r2, #254	; 0xfe
 800d314:	18d1      	adds	r1, r2, r3
 800d316:	461f      	mov	r7, r3
 800d318:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d31c:	9100      	str	r1, [sp, #0]
 800d31e:	2830      	cmp	r0, #48	; 0x30
 800d320:	d0f8      	beq.n	800d314 <__gethex+0x3c>
 800d322:	f7ff ffc4 	bl	800d2ae <__hexdig_fun>
 800d326:	4604      	mov	r4, r0
 800d328:	2800      	cmp	r0, #0
 800d32a:	d13a      	bne.n	800d3a2 <__gethex+0xca>
 800d32c:	9901      	ldr	r1, [sp, #4]
 800d32e:	4652      	mov	r2, sl
 800d330:	4638      	mov	r0, r7
 800d332:	f001 fe05 	bl	800ef40 <strncmp>
 800d336:	4605      	mov	r5, r0
 800d338:	2800      	cmp	r0, #0
 800d33a:	d168      	bne.n	800d40e <__gethex+0x136>
 800d33c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d340:	eb07 060a 	add.w	r6, r7, sl
 800d344:	f7ff ffb3 	bl	800d2ae <__hexdig_fun>
 800d348:	2800      	cmp	r0, #0
 800d34a:	d062      	beq.n	800d412 <__gethex+0x13a>
 800d34c:	4633      	mov	r3, r6
 800d34e:	7818      	ldrb	r0, [r3, #0]
 800d350:	2830      	cmp	r0, #48	; 0x30
 800d352:	461f      	mov	r7, r3
 800d354:	f103 0301 	add.w	r3, r3, #1
 800d358:	d0f9      	beq.n	800d34e <__gethex+0x76>
 800d35a:	f7ff ffa8 	bl	800d2ae <__hexdig_fun>
 800d35e:	2301      	movs	r3, #1
 800d360:	fab0 f480 	clz	r4, r0
 800d364:	0964      	lsrs	r4, r4, #5
 800d366:	4635      	mov	r5, r6
 800d368:	9300      	str	r3, [sp, #0]
 800d36a:	463a      	mov	r2, r7
 800d36c:	4616      	mov	r6, r2
 800d36e:	3201      	adds	r2, #1
 800d370:	7830      	ldrb	r0, [r6, #0]
 800d372:	f7ff ff9c 	bl	800d2ae <__hexdig_fun>
 800d376:	2800      	cmp	r0, #0
 800d378:	d1f8      	bne.n	800d36c <__gethex+0x94>
 800d37a:	9901      	ldr	r1, [sp, #4]
 800d37c:	4652      	mov	r2, sl
 800d37e:	4630      	mov	r0, r6
 800d380:	f001 fdde 	bl	800ef40 <strncmp>
 800d384:	b980      	cbnz	r0, 800d3a8 <__gethex+0xd0>
 800d386:	b94d      	cbnz	r5, 800d39c <__gethex+0xc4>
 800d388:	eb06 050a 	add.w	r5, r6, sl
 800d38c:	462a      	mov	r2, r5
 800d38e:	4616      	mov	r6, r2
 800d390:	3201      	adds	r2, #1
 800d392:	7830      	ldrb	r0, [r6, #0]
 800d394:	f7ff ff8b 	bl	800d2ae <__hexdig_fun>
 800d398:	2800      	cmp	r0, #0
 800d39a:	d1f8      	bne.n	800d38e <__gethex+0xb6>
 800d39c:	1bad      	subs	r5, r5, r6
 800d39e:	00ad      	lsls	r5, r5, #2
 800d3a0:	e004      	b.n	800d3ac <__gethex+0xd4>
 800d3a2:	2400      	movs	r4, #0
 800d3a4:	4625      	mov	r5, r4
 800d3a6:	e7e0      	b.n	800d36a <__gethex+0x92>
 800d3a8:	2d00      	cmp	r5, #0
 800d3aa:	d1f7      	bne.n	800d39c <__gethex+0xc4>
 800d3ac:	7833      	ldrb	r3, [r6, #0]
 800d3ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d3b2:	2b50      	cmp	r3, #80	; 0x50
 800d3b4:	d13b      	bne.n	800d42e <__gethex+0x156>
 800d3b6:	7873      	ldrb	r3, [r6, #1]
 800d3b8:	2b2b      	cmp	r3, #43	; 0x2b
 800d3ba:	d02c      	beq.n	800d416 <__gethex+0x13e>
 800d3bc:	2b2d      	cmp	r3, #45	; 0x2d
 800d3be:	d02e      	beq.n	800d41e <__gethex+0x146>
 800d3c0:	1c71      	adds	r1, r6, #1
 800d3c2:	f04f 0900 	mov.w	r9, #0
 800d3c6:	7808      	ldrb	r0, [r1, #0]
 800d3c8:	f7ff ff71 	bl	800d2ae <__hexdig_fun>
 800d3cc:	1e43      	subs	r3, r0, #1
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	2b18      	cmp	r3, #24
 800d3d2:	d82c      	bhi.n	800d42e <__gethex+0x156>
 800d3d4:	f1a0 0210 	sub.w	r2, r0, #16
 800d3d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d3dc:	f7ff ff67 	bl	800d2ae <__hexdig_fun>
 800d3e0:	1e43      	subs	r3, r0, #1
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	2b18      	cmp	r3, #24
 800d3e6:	d91d      	bls.n	800d424 <__gethex+0x14c>
 800d3e8:	f1b9 0f00 	cmp.w	r9, #0
 800d3ec:	d000      	beq.n	800d3f0 <__gethex+0x118>
 800d3ee:	4252      	negs	r2, r2
 800d3f0:	4415      	add	r5, r2
 800d3f2:	f8cb 1000 	str.w	r1, [fp]
 800d3f6:	b1e4      	cbz	r4, 800d432 <__gethex+0x15a>
 800d3f8:	9b00      	ldr	r3, [sp, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	bf14      	ite	ne
 800d3fe:	2700      	movne	r7, #0
 800d400:	2706      	moveq	r7, #6
 800d402:	4638      	mov	r0, r7
 800d404:	b009      	add	sp, #36	; 0x24
 800d406:	ecbd 8b02 	vpop	{d8}
 800d40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d40e:	463e      	mov	r6, r7
 800d410:	4625      	mov	r5, r4
 800d412:	2401      	movs	r4, #1
 800d414:	e7ca      	b.n	800d3ac <__gethex+0xd4>
 800d416:	f04f 0900 	mov.w	r9, #0
 800d41a:	1cb1      	adds	r1, r6, #2
 800d41c:	e7d3      	b.n	800d3c6 <__gethex+0xee>
 800d41e:	f04f 0901 	mov.w	r9, #1
 800d422:	e7fa      	b.n	800d41a <__gethex+0x142>
 800d424:	230a      	movs	r3, #10
 800d426:	fb03 0202 	mla	r2, r3, r2, r0
 800d42a:	3a10      	subs	r2, #16
 800d42c:	e7d4      	b.n	800d3d8 <__gethex+0x100>
 800d42e:	4631      	mov	r1, r6
 800d430:	e7df      	b.n	800d3f2 <__gethex+0x11a>
 800d432:	1bf3      	subs	r3, r6, r7
 800d434:	3b01      	subs	r3, #1
 800d436:	4621      	mov	r1, r4
 800d438:	2b07      	cmp	r3, #7
 800d43a:	dc0b      	bgt.n	800d454 <__gethex+0x17c>
 800d43c:	ee18 0a10 	vmov	r0, s16
 800d440:	f000 fb18 	bl	800da74 <_Balloc>
 800d444:	4604      	mov	r4, r0
 800d446:	b940      	cbnz	r0, 800d45a <__gethex+0x182>
 800d448:	4b5d      	ldr	r3, [pc, #372]	; (800d5c0 <__gethex+0x2e8>)
 800d44a:	4602      	mov	r2, r0
 800d44c:	21de      	movs	r1, #222	; 0xde
 800d44e:	485d      	ldr	r0, [pc, #372]	; (800d5c4 <__gethex+0x2ec>)
 800d450:	f7fc fcb2 	bl	8009db8 <__assert_func>
 800d454:	3101      	adds	r1, #1
 800d456:	105b      	asrs	r3, r3, #1
 800d458:	e7ee      	b.n	800d438 <__gethex+0x160>
 800d45a:	f100 0914 	add.w	r9, r0, #20
 800d45e:	f04f 0b00 	mov.w	fp, #0
 800d462:	f1ca 0301 	rsb	r3, sl, #1
 800d466:	f8cd 9008 	str.w	r9, [sp, #8]
 800d46a:	f8cd b000 	str.w	fp, [sp]
 800d46e:	9306      	str	r3, [sp, #24]
 800d470:	42b7      	cmp	r7, r6
 800d472:	d340      	bcc.n	800d4f6 <__gethex+0x21e>
 800d474:	9802      	ldr	r0, [sp, #8]
 800d476:	9b00      	ldr	r3, [sp, #0]
 800d478:	f840 3b04 	str.w	r3, [r0], #4
 800d47c:	eba0 0009 	sub.w	r0, r0, r9
 800d480:	1080      	asrs	r0, r0, #2
 800d482:	0146      	lsls	r6, r0, #5
 800d484:	6120      	str	r0, [r4, #16]
 800d486:	4618      	mov	r0, r3
 800d488:	f000 fbe6 	bl	800dc58 <__hi0bits>
 800d48c:	1a30      	subs	r0, r6, r0
 800d48e:	f8d8 6000 	ldr.w	r6, [r8]
 800d492:	42b0      	cmp	r0, r6
 800d494:	dd63      	ble.n	800d55e <__gethex+0x286>
 800d496:	1b87      	subs	r7, r0, r6
 800d498:	4639      	mov	r1, r7
 800d49a:	4620      	mov	r0, r4
 800d49c:	f000 ff8a 	bl	800e3b4 <__any_on>
 800d4a0:	4682      	mov	sl, r0
 800d4a2:	b1a8      	cbz	r0, 800d4d0 <__gethex+0x1f8>
 800d4a4:	1e7b      	subs	r3, r7, #1
 800d4a6:	1159      	asrs	r1, r3, #5
 800d4a8:	f003 021f 	and.w	r2, r3, #31
 800d4ac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d4b0:	f04f 0a01 	mov.w	sl, #1
 800d4b4:	fa0a f202 	lsl.w	r2, sl, r2
 800d4b8:	420a      	tst	r2, r1
 800d4ba:	d009      	beq.n	800d4d0 <__gethex+0x1f8>
 800d4bc:	4553      	cmp	r3, sl
 800d4be:	dd05      	ble.n	800d4cc <__gethex+0x1f4>
 800d4c0:	1eb9      	subs	r1, r7, #2
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	f000 ff76 	bl	800e3b4 <__any_on>
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	d145      	bne.n	800d558 <__gethex+0x280>
 800d4cc:	f04f 0a02 	mov.w	sl, #2
 800d4d0:	4639      	mov	r1, r7
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f7ff fe99 	bl	800d20a <rshift>
 800d4d8:	443d      	add	r5, r7
 800d4da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d4de:	42ab      	cmp	r3, r5
 800d4e0:	da4c      	bge.n	800d57c <__gethex+0x2a4>
 800d4e2:	ee18 0a10 	vmov	r0, s16
 800d4e6:	4621      	mov	r1, r4
 800d4e8:	f000 fb04 	bl	800daf4 <_Bfree>
 800d4ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	6013      	str	r3, [r2, #0]
 800d4f2:	27a3      	movs	r7, #163	; 0xa3
 800d4f4:	e785      	b.n	800d402 <__gethex+0x12a>
 800d4f6:	1e73      	subs	r3, r6, #1
 800d4f8:	9a05      	ldr	r2, [sp, #20]
 800d4fa:	9303      	str	r3, [sp, #12]
 800d4fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d500:	4293      	cmp	r3, r2
 800d502:	d019      	beq.n	800d538 <__gethex+0x260>
 800d504:	f1bb 0f20 	cmp.w	fp, #32
 800d508:	d107      	bne.n	800d51a <__gethex+0x242>
 800d50a:	9b02      	ldr	r3, [sp, #8]
 800d50c:	9a00      	ldr	r2, [sp, #0]
 800d50e:	f843 2b04 	str.w	r2, [r3], #4
 800d512:	9302      	str	r3, [sp, #8]
 800d514:	2300      	movs	r3, #0
 800d516:	9300      	str	r3, [sp, #0]
 800d518:	469b      	mov	fp, r3
 800d51a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d51e:	f7ff fec6 	bl	800d2ae <__hexdig_fun>
 800d522:	9b00      	ldr	r3, [sp, #0]
 800d524:	f000 000f 	and.w	r0, r0, #15
 800d528:	fa00 f00b 	lsl.w	r0, r0, fp
 800d52c:	4303      	orrs	r3, r0
 800d52e:	9300      	str	r3, [sp, #0]
 800d530:	f10b 0b04 	add.w	fp, fp, #4
 800d534:	9b03      	ldr	r3, [sp, #12]
 800d536:	e00d      	b.n	800d554 <__gethex+0x27c>
 800d538:	9b03      	ldr	r3, [sp, #12]
 800d53a:	9a06      	ldr	r2, [sp, #24]
 800d53c:	4413      	add	r3, r2
 800d53e:	42bb      	cmp	r3, r7
 800d540:	d3e0      	bcc.n	800d504 <__gethex+0x22c>
 800d542:	4618      	mov	r0, r3
 800d544:	9901      	ldr	r1, [sp, #4]
 800d546:	9307      	str	r3, [sp, #28]
 800d548:	4652      	mov	r2, sl
 800d54a:	f001 fcf9 	bl	800ef40 <strncmp>
 800d54e:	9b07      	ldr	r3, [sp, #28]
 800d550:	2800      	cmp	r0, #0
 800d552:	d1d7      	bne.n	800d504 <__gethex+0x22c>
 800d554:	461e      	mov	r6, r3
 800d556:	e78b      	b.n	800d470 <__gethex+0x198>
 800d558:	f04f 0a03 	mov.w	sl, #3
 800d55c:	e7b8      	b.n	800d4d0 <__gethex+0x1f8>
 800d55e:	da0a      	bge.n	800d576 <__gethex+0x29e>
 800d560:	1a37      	subs	r7, r6, r0
 800d562:	4621      	mov	r1, r4
 800d564:	ee18 0a10 	vmov	r0, s16
 800d568:	463a      	mov	r2, r7
 800d56a:	f000 fcdf 	bl	800df2c <__lshift>
 800d56e:	1bed      	subs	r5, r5, r7
 800d570:	4604      	mov	r4, r0
 800d572:	f100 0914 	add.w	r9, r0, #20
 800d576:	f04f 0a00 	mov.w	sl, #0
 800d57a:	e7ae      	b.n	800d4da <__gethex+0x202>
 800d57c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d580:	42a8      	cmp	r0, r5
 800d582:	dd72      	ble.n	800d66a <__gethex+0x392>
 800d584:	1b45      	subs	r5, r0, r5
 800d586:	42ae      	cmp	r6, r5
 800d588:	dc36      	bgt.n	800d5f8 <__gethex+0x320>
 800d58a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d58e:	2b02      	cmp	r3, #2
 800d590:	d02a      	beq.n	800d5e8 <__gethex+0x310>
 800d592:	2b03      	cmp	r3, #3
 800d594:	d02c      	beq.n	800d5f0 <__gethex+0x318>
 800d596:	2b01      	cmp	r3, #1
 800d598:	d11c      	bne.n	800d5d4 <__gethex+0x2fc>
 800d59a:	42ae      	cmp	r6, r5
 800d59c:	d11a      	bne.n	800d5d4 <__gethex+0x2fc>
 800d59e:	2e01      	cmp	r6, #1
 800d5a0:	d112      	bne.n	800d5c8 <__gethex+0x2f0>
 800d5a2:	9a04      	ldr	r2, [sp, #16]
 800d5a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d5a8:	6013      	str	r3, [r2, #0]
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	6123      	str	r3, [r4, #16]
 800d5ae:	f8c9 3000 	str.w	r3, [r9]
 800d5b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d5b4:	2762      	movs	r7, #98	; 0x62
 800d5b6:	601c      	str	r4, [r3, #0]
 800d5b8:	e723      	b.n	800d402 <__gethex+0x12a>
 800d5ba:	bf00      	nop
 800d5bc:	0800f6f8 	.word	0x0800f6f8
 800d5c0:	0800f61d 	.word	0x0800f61d
 800d5c4:	0800f690 	.word	0x0800f690
 800d5c8:	1e71      	subs	r1, r6, #1
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	f000 fef2 	bl	800e3b4 <__any_on>
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	d1e6      	bne.n	800d5a2 <__gethex+0x2ca>
 800d5d4:	ee18 0a10 	vmov	r0, s16
 800d5d8:	4621      	mov	r1, r4
 800d5da:	f000 fa8b 	bl	800daf4 <_Bfree>
 800d5de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	6013      	str	r3, [r2, #0]
 800d5e4:	2750      	movs	r7, #80	; 0x50
 800d5e6:	e70c      	b.n	800d402 <__gethex+0x12a>
 800d5e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d1f2      	bne.n	800d5d4 <__gethex+0x2fc>
 800d5ee:	e7d8      	b.n	800d5a2 <__gethex+0x2ca>
 800d5f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d1d5      	bne.n	800d5a2 <__gethex+0x2ca>
 800d5f6:	e7ed      	b.n	800d5d4 <__gethex+0x2fc>
 800d5f8:	1e6f      	subs	r7, r5, #1
 800d5fa:	f1ba 0f00 	cmp.w	sl, #0
 800d5fe:	d131      	bne.n	800d664 <__gethex+0x38c>
 800d600:	b127      	cbz	r7, 800d60c <__gethex+0x334>
 800d602:	4639      	mov	r1, r7
 800d604:	4620      	mov	r0, r4
 800d606:	f000 fed5 	bl	800e3b4 <__any_on>
 800d60a:	4682      	mov	sl, r0
 800d60c:	117b      	asrs	r3, r7, #5
 800d60e:	2101      	movs	r1, #1
 800d610:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d614:	f007 071f 	and.w	r7, r7, #31
 800d618:	fa01 f707 	lsl.w	r7, r1, r7
 800d61c:	421f      	tst	r7, r3
 800d61e:	4629      	mov	r1, r5
 800d620:	4620      	mov	r0, r4
 800d622:	bf18      	it	ne
 800d624:	f04a 0a02 	orrne.w	sl, sl, #2
 800d628:	1b76      	subs	r6, r6, r5
 800d62a:	f7ff fdee 	bl	800d20a <rshift>
 800d62e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d632:	2702      	movs	r7, #2
 800d634:	f1ba 0f00 	cmp.w	sl, #0
 800d638:	d048      	beq.n	800d6cc <__gethex+0x3f4>
 800d63a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d63e:	2b02      	cmp	r3, #2
 800d640:	d015      	beq.n	800d66e <__gethex+0x396>
 800d642:	2b03      	cmp	r3, #3
 800d644:	d017      	beq.n	800d676 <__gethex+0x39e>
 800d646:	2b01      	cmp	r3, #1
 800d648:	d109      	bne.n	800d65e <__gethex+0x386>
 800d64a:	f01a 0f02 	tst.w	sl, #2
 800d64e:	d006      	beq.n	800d65e <__gethex+0x386>
 800d650:	f8d9 0000 	ldr.w	r0, [r9]
 800d654:	ea4a 0a00 	orr.w	sl, sl, r0
 800d658:	f01a 0f01 	tst.w	sl, #1
 800d65c:	d10e      	bne.n	800d67c <__gethex+0x3a4>
 800d65e:	f047 0710 	orr.w	r7, r7, #16
 800d662:	e033      	b.n	800d6cc <__gethex+0x3f4>
 800d664:	f04f 0a01 	mov.w	sl, #1
 800d668:	e7d0      	b.n	800d60c <__gethex+0x334>
 800d66a:	2701      	movs	r7, #1
 800d66c:	e7e2      	b.n	800d634 <__gethex+0x35c>
 800d66e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d670:	f1c3 0301 	rsb	r3, r3, #1
 800d674:	9315      	str	r3, [sp, #84]	; 0x54
 800d676:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d0f0      	beq.n	800d65e <__gethex+0x386>
 800d67c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d680:	f104 0314 	add.w	r3, r4, #20
 800d684:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d688:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d68c:	f04f 0c00 	mov.w	ip, #0
 800d690:	4618      	mov	r0, r3
 800d692:	f853 2b04 	ldr.w	r2, [r3], #4
 800d696:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d69a:	d01c      	beq.n	800d6d6 <__gethex+0x3fe>
 800d69c:	3201      	adds	r2, #1
 800d69e:	6002      	str	r2, [r0, #0]
 800d6a0:	2f02      	cmp	r7, #2
 800d6a2:	f104 0314 	add.w	r3, r4, #20
 800d6a6:	d13f      	bne.n	800d728 <__gethex+0x450>
 800d6a8:	f8d8 2000 	ldr.w	r2, [r8]
 800d6ac:	3a01      	subs	r2, #1
 800d6ae:	42b2      	cmp	r2, r6
 800d6b0:	d10a      	bne.n	800d6c8 <__gethex+0x3f0>
 800d6b2:	1171      	asrs	r1, r6, #5
 800d6b4:	2201      	movs	r2, #1
 800d6b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d6ba:	f006 061f 	and.w	r6, r6, #31
 800d6be:	fa02 f606 	lsl.w	r6, r2, r6
 800d6c2:	421e      	tst	r6, r3
 800d6c4:	bf18      	it	ne
 800d6c6:	4617      	movne	r7, r2
 800d6c8:	f047 0720 	orr.w	r7, r7, #32
 800d6cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d6ce:	601c      	str	r4, [r3, #0]
 800d6d0:	9b04      	ldr	r3, [sp, #16]
 800d6d2:	601d      	str	r5, [r3, #0]
 800d6d4:	e695      	b.n	800d402 <__gethex+0x12a>
 800d6d6:	4299      	cmp	r1, r3
 800d6d8:	f843 cc04 	str.w	ip, [r3, #-4]
 800d6dc:	d8d8      	bhi.n	800d690 <__gethex+0x3b8>
 800d6de:	68a3      	ldr	r3, [r4, #8]
 800d6e0:	459b      	cmp	fp, r3
 800d6e2:	db19      	blt.n	800d718 <__gethex+0x440>
 800d6e4:	6861      	ldr	r1, [r4, #4]
 800d6e6:	ee18 0a10 	vmov	r0, s16
 800d6ea:	3101      	adds	r1, #1
 800d6ec:	f000 f9c2 	bl	800da74 <_Balloc>
 800d6f0:	4681      	mov	r9, r0
 800d6f2:	b918      	cbnz	r0, 800d6fc <__gethex+0x424>
 800d6f4:	4b1a      	ldr	r3, [pc, #104]	; (800d760 <__gethex+0x488>)
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	2184      	movs	r1, #132	; 0x84
 800d6fa:	e6a8      	b.n	800d44e <__gethex+0x176>
 800d6fc:	6922      	ldr	r2, [r4, #16]
 800d6fe:	3202      	adds	r2, #2
 800d700:	f104 010c 	add.w	r1, r4, #12
 800d704:	0092      	lsls	r2, r2, #2
 800d706:	300c      	adds	r0, #12
 800d708:	f000 f980 	bl	800da0c <memcpy>
 800d70c:	4621      	mov	r1, r4
 800d70e:	ee18 0a10 	vmov	r0, s16
 800d712:	f000 f9ef 	bl	800daf4 <_Bfree>
 800d716:	464c      	mov	r4, r9
 800d718:	6923      	ldr	r3, [r4, #16]
 800d71a:	1c5a      	adds	r2, r3, #1
 800d71c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d720:	6122      	str	r2, [r4, #16]
 800d722:	2201      	movs	r2, #1
 800d724:	615a      	str	r2, [r3, #20]
 800d726:	e7bb      	b.n	800d6a0 <__gethex+0x3c8>
 800d728:	6922      	ldr	r2, [r4, #16]
 800d72a:	455a      	cmp	r2, fp
 800d72c:	dd0b      	ble.n	800d746 <__gethex+0x46e>
 800d72e:	2101      	movs	r1, #1
 800d730:	4620      	mov	r0, r4
 800d732:	f7ff fd6a 	bl	800d20a <rshift>
 800d736:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d73a:	3501      	adds	r5, #1
 800d73c:	42ab      	cmp	r3, r5
 800d73e:	f6ff aed0 	blt.w	800d4e2 <__gethex+0x20a>
 800d742:	2701      	movs	r7, #1
 800d744:	e7c0      	b.n	800d6c8 <__gethex+0x3f0>
 800d746:	f016 061f 	ands.w	r6, r6, #31
 800d74a:	d0fa      	beq.n	800d742 <__gethex+0x46a>
 800d74c:	4453      	add	r3, sl
 800d74e:	f1c6 0620 	rsb	r6, r6, #32
 800d752:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d756:	f000 fa7f 	bl	800dc58 <__hi0bits>
 800d75a:	42b0      	cmp	r0, r6
 800d75c:	dbe7      	blt.n	800d72e <__gethex+0x456>
 800d75e:	e7f0      	b.n	800d742 <__gethex+0x46a>
 800d760:	0800f61d 	.word	0x0800f61d

0800d764 <L_shift>:
 800d764:	f1c2 0208 	rsb	r2, r2, #8
 800d768:	0092      	lsls	r2, r2, #2
 800d76a:	b570      	push	{r4, r5, r6, lr}
 800d76c:	f1c2 0620 	rsb	r6, r2, #32
 800d770:	6843      	ldr	r3, [r0, #4]
 800d772:	6804      	ldr	r4, [r0, #0]
 800d774:	fa03 f506 	lsl.w	r5, r3, r6
 800d778:	432c      	orrs	r4, r5
 800d77a:	40d3      	lsrs	r3, r2
 800d77c:	6004      	str	r4, [r0, #0]
 800d77e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d782:	4288      	cmp	r0, r1
 800d784:	d3f4      	bcc.n	800d770 <L_shift+0xc>
 800d786:	bd70      	pop	{r4, r5, r6, pc}

0800d788 <__match>:
 800d788:	b530      	push	{r4, r5, lr}
 800d78a:	6803      	ldr	r3, [r0, #0]
 800d78c:	3301      	adds	r3, #1
 800d78e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d792:	b914      	cbnz	r4, 800d79a <__match+0x12>
 800d794:	6003      	str	r3, [r0, #0]
 800d796:	2001      	movs	r0, #1
 800d798:	bd30      	pop	{r4, r5, pc}
 800d79a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d79e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d7a2:	2d19      	cmp	r5, #25
 800d7a4:	bf98      	it	ls
 800d7a6:	3220      	addls	r2, #32
 800d7a8:	42a2      	cmp	r2, r4
 800d7aa:	d0f0      	beq.n	800d78e <__match+0x6>
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	e7f3      	b.n	800d798 <__match+0x10>

0800d7b0 <__hexnan>:
 800d7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b4:	680b      	ldr	r3, [r1, #0]
 800d7b6:	115e      	asrs	r6, r3, #5
 800d7b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d7bc:	f013 031f 	ands.w	r3, r3, #31
 800d7c0:	b087      	sub	sp, #28
 800d7c2:	bf18      	it	ne
 800d7c4:	3604      	addne	r6, #4
 800d7c6:	2500      	movs	r5, #0
 800d7c8:	1f37      	subs	r7, r6, #4
 800d7ca:	4690      	mov	r8, r2
 800d7cc:	6802      	ldr	r2, [r0, #0]
 800d7ce:	9301      	str	r3, [sp, #4]
 800d7d0:	4682      	mov	sl, r0
 800d7d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d7d6:	46b9      	mov	r9, r7
 800d7d8:	463c      	mov	r4, r7
 800d7da:	9502      	str	r5, [sp, #8]
 800d7dc:	46ab      	mov	fp, r5
 800d7de:	7851      	ldrb	r1, [r2, #1]
 800d7e0:	1c53      	adds	r3, r2, #1
 800d7e2:	9303      	str	r3, [sp, #12]
 800d7e4:	b341      	cbz	r1, 800d838 <__hexnan+0x88>
 800d7e6:	4608      	mov	r0, r1
 800d7e8:	9205      	str	r2, [sp, #20]
 800d7ea:	9104      	str	r1, [sp, #16]
 800d7ec:	f7ff fd5f 	bl	800d2ae <__hexdig_fun>
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	d14f      	bne.n	800d894 <__hexnan+0xe4>
 800d7f4:	9904      	ldr	r1, [sp, #16]
 800d7f6:	9a05      	ldr	r2, [sp, #20]
 800d7f8:	2920      	cmp	r1, #32
 800d7fa:	d818      	bhi.n	800d82e <__hexnan+0x7e>
 800d7fc:	9b02      	ldr	r3, [sp, #8]
 800d7fe:	459b      	cmp	fp, r3
 800d800:	dd13      	ble.n	800d82a <__hexnan+0x7a>
 800d802:	454c      	cmp	r4, r9
 800d804:	d206      	bcs.n	800d814 <__hexnan+0x64>
 800d806:	2d07      	cmp	r5, #7
 800d808:	dc04      	bgt.n	800d814 <__hexnan+0x64>
 800d80a:	462a      	mov	r2, r5
 800d80c:	4649      	mov	r1, r9
 800d80e:	4620      	mov	r0, r4
 800d810:	f7ff ffa8 	bl	800d764 <L_shift>
 800d814:	4544      	cmp	r4, r8
 800d816:	d950      	bls.n	800d8ba <__hexnan+0x10a>
 800d818:	2300      	movs	r3, #0
 800d81a:	f1a4 0904 	sub.w	r9, r4, #4
 800d81e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d822:	f8cd b008 	str.w	fp, [sp, #8]
 800d826:	464c      	mov	r4, r9
 800d828:	461d      	mov	r5, r3
 800d82a:	9a03      	ldr	r2, [sp, #12]
 800d82c:	e7d7      	b.n	800d7de <__hexnan+0x2e>
 800d82e:	2929      	cmp	r1, #41	; 0x29
 800d830:	d156      	bne.n	800d8e0 <__hexnan+0x130>
 800d832:	3202      	adds	r2, #2
 800d834:	f8ca 2000 	str.w	r2, [sl]
 800d838:	f1bb 0f00 	cmp.w	fp, #0
 800d83c:	d050      	beq.n	800d8e0 <__hexnan+0x130>
 800d83e:	454c      	cmp	r4, r9
 800d840:	d206      	bcs.n	800d850 <__hexnan+0xa0>
 800d842:	2d07      	cmp	r5, #7
 800d844:	dc04      	bgt.n	800d850 <__hexnan+0xa0>
 800d846:	462a      	mov	r2, r5
 800d848:	4649      	mov	r1, r9
 800d84a:	4620      	mov	r0, r4
 800d84c:	f7ff ff8a 	bl	800d764 <L_shift>
 800d850:	4544      	cmp	r4, r8
 800d852:	d934      	bls.n	800d8be <__hexnan+0x10e>
 800d854:	f1a8 0204 	sub.w	r2, r8, #4
 800d858:	4623      	mov	r3, r4
 800d85a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d85e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d862:	429f      	cmp	r7, r3
 800d864:	d2f9      	bcs.n	800d85a <__hexnan+0xaa>
 800d866:	1b3b      	subs	r3, r7, r4
 800d868:	f023 0303 	bic.w	r3, r3, #3
 800d86c:	3304      	adds	r3, #4
 800d86e:	3401      	adds	r4, #1
 800d870:	3e03      	subs	r6, #3
 800d872:	42b4      	cmp	r4, r6
 800d874:	bf88      	it	hi
 800d876:	2304      	movhi	r3, #4
 800d878:	4443      	add	r3, r8
 800d87a:	2200      	movs	r2, #0
 800d87c:	f843 2b04 	str.w	r2, [r3], #4
 800d880:	429f      	cmp	r7, r3
 800d882:	d2fb      	bcs.n	800d87c <__hexnan+0xcc>
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	b91b      	cbnz	r3, 800d890 <__hexnan+0xe0>
 800d888:	4547      	cmp	r7, r8
 800d88a:	d127      	bne.n	800d8dc <__hexnan+0x12c>
 800d88c:	2301      	movs	r3, #1
 800d88e:	603b      	str	r3, [r7, #0]
 800d890:	2005      	movs	r0, #5
 800d892:	e026      	b.n	800d8e2 <__hexnan+0x132>
 800d894:	3501      	adds	r5, #1
 800d896:	2d08      	cmp	r5, #8
 800d898:	f10b 0b01 	add.w	fp, fp, #1
 800d89c:	dd06      	ble.n	800d8ac <__hexnan+0xfc>
 800d89e:	4544      	cmp	r4, r8
 800d8a0:	d9c3      	bls.n	800d82a <__hexnan+0x7a>
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8a8:	2501      	movs	r5, #1
 800d8aa:	3c04      	subs	r4, #4
 800d8ac:	6822      	ldr	r2, [r4, #0]
 800d8ae:	f000 000f 	and.w	r0, r0, #15
 800d8b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d8b6:	6022      	str	r2, [r4, #0]
 800d8b8:	e7b7      	b.n	800d82a <__hexnan+0x7a>
 800d8ba:	2508      	movs	r5, #8
 800d8bc:	e7b5      	b.n	800d82a <__hexnan+0x7a>
 800d8be:	9b01      	ldr	r3, [sp, #4]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d0df      	beq.n	800d884 <__hexnan+0xd4>
 800d8c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c8:	f1c3 0320 	rsb	r3, r3, #32
 800d8cc:	fa22 f303 	lsr.w	r3, r2, r3
 800d8d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d8d4:	401a      	ands	r2, r3
 800d8d6:	f846 2c04 	str.w	r2, [r6, #-4]
 800d8da:	e7d3      	b.n	800d884 <__hexnan+0xd4>
 800d8dc:	3f04      	subs	r7, #4
 800d8de:	e7d1      	b.n	800d884 <__hexnan+0xd4>
 800d8e0:	2004      	movs	r0, #4
 800d8e2:	b007      	add	sp, #28
 800d8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d8e8 <_localeconv_r>:
 800d8e8:	4800      	ldr	r0, [pc, #0]	; (800d8ec <_localeconv_r+0x4>)
 800d8ea:	4770      	bx	lr
 800d8ec:	200010c8 	.word	0x200010c8

0800d8f0 <__retarget_lock_init_recursive>:
 800d8f0:	4770      	bx	lr

0800d8f2 <__retarget_lock_acquire_recursive>:
 800d8f2:	4770      	bx	lr

0800d8f4 <__retarget_lock_release_recursive>:
 800d8f4:	4770      	bx	lr
	...

0800d8f8 <_lseek_r>:
 800d8f8:	b538      	push	{r3, r4, r5, lr}
 800d8fa:	4d07      	ldr	r5, [pc, #28]	; (800d918 <_lseek_r+0x20>)
 800d8fc:	4604      	mov	r4, r0
 800d8fe:	4608      	mov	r0, r1
 800d900:	4611      	mov	r1, r2
 800d902:	2200      	movs	r2, #0
 800d904:	602a      	str	r2, [r5, #0]
 800d906:	461a      	mov	r2, r3
 800d908:	f7f7 fc74 	bl	80051f4 <_lseek>
 800d90c:	1c43      	adds	r3, r0, #1
 800d90e:	d102      	bne.n	800d916 <_lseek_r+0x1e>
 800d910:	682b      	ldr	r3, [r5, #0]
 800d912:	b103      	cbz	r3, 800d916 <_lseek_r+0x1e>
 800d914:	6023      	str	r3, [r4, #0]
 800d916:	bd38      	pop	{r3, r4, r5, pc}
 800d918:	20001c8c 	.word	0x20001c8c

0800d91c <__swhatbuf_r>:
 800d91c:	b570      	push	{r4, r5, r6, lr}
 800d91e:	460e      	mov	r6, r1
 800d920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d924:	2900      	cmp	r1, #0
 800d926:	b096      	sub	sp, #88	; 0x58
 800d928:	4614      	mov	r4, r2
 800d92a:	461d      	mov	r5, r3
 800d92c:	da08      	bge.n	800d940 <__swhatbuf_r+0x24>
 800d92e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d932:	2200      	movs	r2, #0
 800d934:	602a      	str	r2, [r5, #0]
 800d936:	061a      	lsls	r2, r3, #24
 800d938:	d410      	bmi.n	800d95c <__swhatbuf_r+0x40>
 800d93a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d93e:	e00e      	b.n	800d95e <__swhatbuf_r+0x42>
 800d940:	466a      	mov	r2, sp
 800d942:	f001 fbcd 	bl	800f0e0 <_fstat_r>
 800d946:	2800      	cmp	r0, #0
 800d948:	dbf1      	blt.n	800d92e <__swhatbuf_r+0x12>
 800d94a:	9a01      	ldr	r2, [sp, #4]
 800d94c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d950:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d954:	425a      	negs	r2, r3
 800d956:	415a      	adcs	r2, r3
 800d958:	602a      	str	r2, [r5, #0]
 800d95a:	e7ee      	b.n	800d93a <__swhatbuf_r+0x1e>
 800d95c:	2340      	movs	r3, #64	; 0x40
 800d95e:	2000      	movs	r0, #0
 800d960:	6023      	str	r3, [r4, #0]
 800d962:	b016      	add	sp, #88	; 0x58
 800d964:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d968 <__smakebuf_r>:
 800d968:	898b      	ldrh	r3, [r1, #12]
 800d96a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d96c:	079d      	lsls	r5, r3, #30
 800d96e:	4606      	mov	r6, r0
 800d970:	460c      	mov	r4, r1
 800d972:	d507      	bpl.n	800d984 <__smakebuf_r+0x1c>
 800d974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d978:	6023      	str	r3, [r4, #0]
 800d97a:	6123      	str	r3, [r4, #16]
 800d97c:	2301      	movs	r3, #1
 800d97e:	6163      	str	r3, [r4, #20]
 800d980:	b002      	add	sp, #8
 800d982:	bd70      	pop	{r4, r5, r6, pc}
 800d984:	ab01      	add	r3, sp, #4
 800d986:	466a      	mov	r2, sp
 800d988:	f7ff ffc8 	bl	800d91c <__swhatbuf_r>
 800d98c:	9900      	ldr	r1, [sp, #0]
 800d98e:	4605      	mov	r5, r0
 800d990:	4630      	mov	r0, r6
 800d992:	f7fc faef 	bl	8009f74 <_malloc_r>
 800d996:	b948      	cbnz	r0, 800d9ac <__smakebuf_r+0x44>
 800d998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d99c:	059a      	lsls	r2, r3, #22
 800d99e:	d4ef      	bmi.n	800d980 <__smakebuf_r+0x18>
 800d9a0:	f023 0303 	bic.w	r3, r3, #3
 800d9a4:	f043 0302 	orr.w	r3, r3, #2
 800d9a8:	81a3      	strh	r3, [r4, #12]
 800d9aa:	e7e3      	b.n	800d974 <__smakebuf_r+0xc>
 800d9ac:	4b0d      	ldr	r3, [pc, #52]	; (800d9e4 <__smakebuf_r+0x7c>)
 800d9ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9b0:	89a3      	ldrh	r3, [r4, #12]
 800d9b2:	6020      	str	r0, [r4, #0]
 800d9b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9b8:	81a3      	strh	r3, [r4, #12]
 800d9ba:	9b00      	ldr	r3, [sp, #0]
 800d9bc:	6163      	str	r3, [r4, #20]
 800d9be:	9b01      	ldr	r3, [sp, #4]
 800d9c0:	6120      	str	r0, [r4, #16]
 800d9c2:	b15b      	cbz	r3, 800d9dc <__smakebuf_r+0x74>
 800d9c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f001 fb9b 	bl	800f104 <_isatty_r>
 800d9ce:	b128      	cbz	r0, 800d9dc <__smakebuf_r+0x74>
 800d9d0:	89a3      	ldrh	r3, [r4, #12]
 800d9d2:	f023 0303 	bic.w	r3, r3, #3
 800d9d6:	f043 0301 	orr.w	r3, r3, #1
 800d9da:	81a3      	strh	r3, [r4, #12]
 800d9dc:	89a0      	ldrh	r0, [r4, #12]
 800d9de:	4305      	orrs	r5, r0
 800d9e0:	81a5      	strh	r5, [r4, #12]
 800d9e2:	e7cd      	b.n	800d980 <__smakebuf_r+0x18>
 800d9e4:	0800d069 	.word	0x0800d069

0800d9e8 <__ascii_mbtowc>:
 800d9e8:	b082      	sub	sp, #8
 800d9ea:	b901      	cbnz	r1, 800d9ee <__ascii_mbtowc+0x6>
 800d9ec:	a901      	add	r1, sp, #4
 800d9ee:	b142      	cbz	r2, 800da02 <__ascii_mbtowc+0x1a>
 800d9f0:	b14b      	cbz	r3, 800da06 <__ascii_mbtowc+0x1e>
 800d9f2:	7813      	ldrb	r3, [r2, #0]
 800d9f4:	600b      	str	r3, [r1, #0]
 800d9f6:	7812      	ldrb	r2, [r2, #0]
 800d9f8:	1e10      	subs	r0, r2, #0
 800d9fa:	bf18      	it	ne
 800d9fc:	2001      	movne	r0, #1
 800d9fe:	b002      	add	sp, #8
 800da00:	4770      	bx	lr
 800da02:	4610      	mov	r0, r2
 800da04:	e7fb      	b.n	800d9fe <__ascii_mbtowc+0x16>
 800da06:	f06f 0001 	mvn.w	r0, #1
 800da0a:	e7f8      	b.n	800d9fe <__ascii_mbtowc+0x16>

0800da0c <memcpy>:
 800da0c:	440a      	add	r2, r1
 800da0e:	4291      	cmp	r1, r2
 800da10:	f100 33ff 	add.w	r3, r0, #4294967295
 800da14:	d100      	bne.n	800da18 <memcpy+0xc>
 800da16:	4770      	bx	lr
 800da18:	b510      	push	{r4, lr}
 800da1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da22:	4291      	cmp	r1, r2
 800da24:	d1f9      	bne.n	800da1a <memcpy+0xe>
 800da26:	bd10      	pop	{r4, pc}

0800da28 <memmove>:
 800da28:	4288      	cmp	r0, r1
 800da2a:	b510      	push	{r4, lr}
 800da2c:	eb01 0402 	add.w	r4, r1, r2
 800da30:	d902      	bls.n	800da38 <memmove+0x10>
 800da32:	4284      	cmp	r4, r0
 800da34:	4623      	mov	r3, r4
 800da36:	d807      	bhi.n	800da48 <memmove+0x20>
 800da38:	1e43      	subs	r3, r0, #1
 800da3a:	42a1      	cmp	r1, r4
 800da3c:	d008      	beq.n	800da50 <memmove+0x28>
 800da3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da46:	e7f8      	b.n	800da3a <memmove+0x12>
 800da48:	4402      	add	r2, r0
 800da4a:	4601      	mov	r1, r0
 800da4c:	428a      	cmp	r2, r1
 800da4e:	d100      	bne.n	800da52 <memmove+0x2a>
 800da50:	bd10      	pop	{r4, pc}
 800da52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da5a:	e7f7      	b.n	800da4c <memmove+0x24>

0800da5c <__malloc_lock>:
 800da5c:	4801      	ldr	r0, [pc, #4]	; (800da64 <__malloc_lock+0x8>)
 800da5e:	f7ff bf48 	b.w	800d8f2 <__retarget_lock_acquire_recursive>
 800da62:	bf00      	nop
 800da64:	20001c88 	.word	0x20001c88

0800da68 <__malloc_unlock>:
 800da68:	4801      	ldr	r0, [pc, #4]	; (800da70 <__malloc_unlock+0x8>)
 800da6a:	f7ff bf43 	b.w	800d8f4 <__retarget_lock_release_recursive>
 800da6e:	bf00      	nop
 800da70:	20001c88 	.word	0x20001c88

0800da74 <_Balloc>:
 800da74:	b570      	push	{r4, r5, r6, lr}
 800da76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800da78:	4604      	mov	r4, r0
 800da7a:	460d      	mov	r5, r1
 800da7c:	b976      	cbnz	r6, 800da9c <_Balloc+0x28>
 800da7e:	2010      	movs	r0, #16
 800da80:	f7fc f9f4 	bl	8009e6c <malloc>
 800da84:	4602      	mov	r2, r0
 800da86:	6260      	str	r0, [r4, #36]	; 0x24
 800da88:	b920      	cbnz	r0, 800da94 <_Balloc+0x20>
 800da8a:	4b18      	ldr	r3, [pc, #96]	; (800daec <_Balloc+0x78>)
 800da8c:	4818      	ldr	r0, [pc, #96]	; (800daf0 <_Balloc+0x7c>)
 800da8e:	2166      	movs	r1, #102	; 0x66
 800da90:	f7fc f992 	bl	8009db8 <__assert_func>
 800da94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da98:	6006      	str	r6, [r0, #0]
 800da9a:	60c6      	str	r6, [r0, #12]
 800da9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800da9e:	68f3      	ldr	r3, [r6, #12]
 800daa0:	b183      	cbz	r3, 800dac4 <_Balloc+0x50>
 800daa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800daa4:	68db      	ldr	r3, [r3, #12]
 800daa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800daaa:	b9b8      	cbnz	r0, 800dadc <_Balloc+0x68>
 800daac:	2101      	movs	r1, #1
 800daae:	fa01 f605 	lsl.w	r6, r1, r5
 800dab2:	1d72      	adds	r2, r6, #5
 800dab4:	0092      	lsls	r2, r2, #2
 800dab6:	4620      	mov	r0, r4
 800dab8:	f000 fc9d 	bl	800e3f6 <_calloc_r>
 800dabc:	b160      	cbz	r0, 800dad8 <_Balloc+0x64>
 800dabe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dac2:	e00e      	b.n	800dae2 <_Balloc+0x6e>
 800dac4:	2221      	movs	r2, #33	; 0x21
 800dac6:	2104      	movs	r1, #4
 800dac8:	4620      	mov	r0, r4
 800daca:	f000 fc94 	bl	800e3f6 <_calloc_r>
 800dace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dad0:	60f0      	str	r0, [r6, #12]
 800dad2:	68db      	ldr	r3, [r3, #12]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d1e4      	bne.n	800daa2 <_Balloc+0x2e>
 800dad8:	2000      	movs	r0, #0
 800dada:	bd70      	pop	{r4, r5, r6, pc}
 800dadc:	6802      	ldr	r2, [r0, #0]
 800dade:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dae2:	2300      	movs	r3, #0
 800dae4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dae8:	e7f7      	b.n	800dada <_Balloc+0x66>
 800daea:	bf00      	nop
 800daec:	0800f440 	.word	0x0800f440
 800daf0:	0800f70c 	.word	0x0800f70c

0800daf4 <_Bfree>:
 800daf4:	b570      	push	{r4, r5, r6, lr}
 800daf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800daf8:	4605      	mov	r5, r0
 800dafa:	460c      	mov	r4, r1
 800dafc:	b976      	cbnz	r6, 800db1c <_Bfree+0x28>
 800dafe:	2010      	movs	r0, #16
 800db00:	f7fc f9b4 	bl	8009e6c <malloc>
 800db04:	4602      	mov	r2, r0
 800db06:	6268      	str	r0, [r5, #36]	; 0x24
 800db08:	b920      	cbnz	r0, 800db14 <_Bfree+0x20>
 800db0a:	4b09      	ldr	r3, [pc, #36]	; (800db30 <_Bfree+0x3c>)
 800db0c:	4809      	ldr	r0, [pc, #36]	; (800db34 <_Bfree+0x40>)
 800db0e:	218a      	movs	r1, #138	; 0x8a
 800db10:	f7fc f952 	bl	8009db8 <__assert_func>
 800db14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db18:	6006      	str	r6, [r0, #0]
 800db1a:	60c6      	str	r6, [r0, #12]
 800db1c:	b13c      	cbz	r4, 800db2e <_Bfree+0x3a>
 800db1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800db20:	6862      	ldr	r2, [r4, #4]
 800db22:	68db      	ldr	r3, [r3, #12]
 800db24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db28:	6021      	str	r1, [r4, #0]
 800db2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800db2e:	bd70      	pop	{r4, r5, r6, pc}
 800db30:	0800f440 	.word	0x0800f440
 800db34:	0800f70c 	.word	0x0800f70c

0800db38 <__multadd>:
 800db38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db3c:	690d      	ldr	r5, [r1, #16]
 800db3e:	4607      	mov	r7, r0
 800db40:	460c      	mov	r4, r1
 800db42:	461e      	mov	r6, r3
 800db44:	f101 0c14 	add.w	ip, r1, #20
 800db48:	2000      	movs	r0, #0
 800db4a:	f8dc 3000 	ldr.w	r3, [ip]
 800db4e:	b299      	uxth	r1, r3
 800db50:	fb02 6101 	mla	r1, r2, r1, r6
 800db54:	0c1e      	lsrs	r6, r3, #16
 800db56:	0c0b      	lsrs	r3, r1, #16
 800db58:	fb02 3306 	mla	r3, r2, r6, r3
 800db5c:	b289      	uxth	r1, r1
 800db5e:	3001      	adds	r0, #1
 800db60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db64:	4285      	cmp	r5, r0
 800db66:	f84c 1b04 	str.w	r1, [ip], #4
 800db6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db6e:	dcec      	bgt.n	800db4a <__multadd+0x12>
 800db70:	b30e      	cbz	r6, 800dbb6 <__multadd+0x7e>
 800db72:	68a3      	ldr	r3, [r4, #8]
 800db74:	42ab      	cmp	r3, r5
 800db76:	dc19      	bgt.n	800dbac <__multadd+0x74>
 800db78:	6861      	ldr	r1, [r4, #4]
 800db7a:	4638      	mov	r0, r7
 800db7c:	3101      	adds	r1, #1
 800db7e:	f7ff ff79 	bl	800da74 <_Balloc>
 800db82:	4680      	mov	r8, r0
 800db84:	b928      	cbnz	r0, 800db92 <__multadd+0x5a>
 800db86:	4602      	mov	r2, r0
 800db88:	4b0c      	ldr	r3, [pc, #48]	; (800dbbc <__multadd+0x84>)
 800db8a:	480d      	ldr	r0, [pc, #52]	; (800dbc0 <__multadd+0x88>)
 800db8c:	21b5      	movs	r1, #181	; 0xb5
 800db8e:	f7fc f913 	bl	8009db8 <__assert_func>
 800db92:	6922      	ldr	r2, [r4, #16]
 800db94:	3202      	adds	r2, #2
 800db96:	f104 010c 	add.w	r1, r4, #12
 800db9a:	0092      	lsls	r2, r2, #2
 800db9c:	300c      	adds	r0, #12
 800db9e:	f7ff ff35 	bl	800da0c <memcpy>
 800dba2:	4621      	mov	r1, r4
 800dba4:	4638      	mov	r0, r7
 800dba6:	f7ff ffa5 	bl	800daf4 <_Bfree>
 800dbaa:	4644      	mov	r4, r8
 800dbac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dbb0:	3501      	adds	r5, #1
 800dbb2:	615e      	str	r6, [r3, #20]
 800dbb4:	6125      	str	r5, [r4, #16]
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbbc:	0800f61d 	.word	0x0800f61d
 800dbc0:	0800f70c 	.word	0x0800f70c

0800dbc4 <__s2b>:
 800dbc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbc8:	460c      	mov	r4, r1
 800dbca:	4615      	mov	r5, r2
 800dbcc:	461f      	mov	r7, r3
 800dbce:	2209      	movs	r2, #9
 800dbd0:	3308      	adds	r3, #8
 800dbd2:	4606      	mov	r6, r0
 800dbd4:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbd8:	2100      	movs	r1, #0
 800dbda:	2201      	movs	r2, #1
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	db09      	blt.n	800dbf4 <__s2b+0x30>
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	f7ff ff47 	bl	800da74 <_Balloc>
 800dbe6:	b940      	cbnz	r0, 800dbfa <__s2b+0x36>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	4b19      	ldr	r3, [pc, #100]	; (800dc50 <__s2b+0x8c>)
 800dbec:	4819      	ldr	r0, [pc, #100]	; (800dc54 <__s2b+0x90>)
 800dbee:	21ce      	movs	r1, #206	; 0xce
 800dbf0:	f7fc f8e2 	bl	8009db8 <__assert_func>
 800dbf4:	0052      	lsls	r2, r2, #1
 800dbf6:	3101      	adds	r1, #1
 800dbf8:	e7f0      	b.n	800dbdc <__s2b+0x18>
 800dbfa:	9b08      	ldr	r3, [sp, #32]
 800dbfc:	6143      	str	r3, [r0, #20]
 800dbfe:	2d09      	cmp	r5, #9
 800dc00:	f04f 0301 	mov.w	r3, #1
 800dc04:	6103      	str	r3, [r0, #16]
 800dc06:	dd16      	ble.n	800dc36 <__s2b+0x72>
 800dc08:	f104 0909 	add.w	r9, r4, #9
 800dc0c:	46c8      	mov	r8, r9
 800dc0e:	442c      	add	r4, r5
 800dc10:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dc14:	4601      	mov	r1, r0
 800dc16:	3b30      	subs	r3, #48	; 0x30
 800dc18:	220a      	movs	r2, #10
 800dc1a:	4630      	mov	r0, r6
 800dc1c:	f7ff ff8c 	bl	800db38 <__multadd>
 800dc20:	45a0      	cmp	r8, r4
 800dc22:	d1f5      	bne.n	800dc10 <__s2b+0x4c>
 800dc24:	f1a5 0408 	sub.w	r4, r5, #8
 800dc28:	444c      	add	r4, r9
 800dc2a:	1b2d      	subs	r5, r5, r4
 800dc2c:	1963      	adds	r3, r4, r5
 800dc2e:	42bb      	cmp	r3, r7
 800dc30:	db04      	blt.n	800dc3c <__s2b+0x78>
 800dc32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc36:	340a      	adds	r4, #10
 800dc38:	2509      	movs	r5, #9
 800dc3a:	e7f6      	b.n	800dc2a <__s2b+0x66>
 800dc3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dc40:	4601      	mov	r1, r0
 800dc42:	3b30      	subs	r3, #48	; 0x30
 800dc44:	220a      	movs	r2, #10
 800dc46:	4630      	mov	r0, r6
 800dc48:	f7ff ff76 	bl	800db38 <__multadd>
 800dc4c:	e7ee      	b.n	800dc2c <__s2b+0x68>
 800dc4e:	bf00      	nop
 800dc50:	0800f61d 	.word	0x0800f61d
 800dc54:	0800f70c 	.word	0x0800f70c

0800dc58 <__hi0bits>:
 800dc58:	0c03      	lsrs	r3, r0, #16
 800dc5a:	041b      	lsls	r3, r3, #16
 800dc5c:	b9d3      	cbnz	r3, 800dc94 <__hi0bits+0x3c>
 800dc5e:	0400      	lsls	r0, r0, #16
 800dc60:	2310      	movs	r3, #16
 800dc62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dc66:	bf04      	itt	eq
 800dc68:	0200      	lsleq	r0, r0, #8
 800dc6a:	3308      	addeq	r3, #8
 800dc6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dc70:	bf04      	itt	eq
 800dc72:	0100      	lsleq	r0, r0, #4
 800dc74:	3304      	addeq	r3, #4
 800dc76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dc7a:	bf04      	itt	eq
 800dc7c:	0080      	lsleq	r0, r0, #2
 800dc7e:	3302      	addeq	r3, #2
 800dc80:	2800      	cmp	r0, #0
 800dc82:	db05      	blt.n	800dc90 <__hi0bits+0x38>
 800dc84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dc88:	f103 0301 	add.w	r3, r3, #1
 800dc8c:	bf08      	it	eq
 800dc8e:	2320      	moveq	r3, #32
 800dc90:	4618      	mov	r0, r3
 800dc92:	4770      	bx	lr
 800dc94:	2300      	movs	r3, #0
 800dc96:	e7e4      	b.n	800dc62 <__hi0bits+0xa>

0800dc98 <__lo0bits>:
 800dc98:	6803      	ldr	r3, [r0, #0]
 800dc9a:	f013 0207 	ands.w	r2, r3, #7
 800dc9e:	4601      	mov	r1, r0
 800dca0:	d00b      	beq.n	800dcba <__lo0bits+0x22>
 800dca2:	07da      	lsls	r2, r3, #31
 800dca4:	d423      	bmi.n	800dcee <__lo0bits+0x56>
 800dca6:	0798      	lsls	r0, r3, #30
 800dca8:	bf49      	itett	mi
 800dcaa:	085b      	lsrmi	r3, r3, #1
 800dcac:	089b      	lsrpl	r3, r3, #2
 800dcae:	2001      	movmi	r0, #1
 800dcb0:	600b      	strmi	r3, [r1, #0]
 800dcb2:	bf5c      	itt	pl
 800dcb4:	600b      	strpl	r3, [r1, #0]
 800dcb6:	2002      	movpl	r0, #2
 800dcb8:	4770      	bx	lr
 800dcba:	b298      	uxth	r0, r3
 800dcbc:	b9a8      	cbnz	r0, 800dcea <__lo0bits+0x52>
 800dcbe:	0c1b      	lsrs	r3, r3, #16
 800dcc0:	2010      	movs	r0, #16
 800dcc2:	b2da      	uxtb	r2, r3
 800dcc4:	b90a      	cbnz	r2, 800dcca <__lo0bits+0x32>
 800dcc6:	3008      	adds	r0, #8
 800dcc8:	0a1b      	lsrs	r3, r3, #8
 800dcca:	071a      	lsls	r2, r3, #28
 800dccc:	bf04      	itt	eq
 800dcce:	091b      	lsreq	r3, r3, #4
 800dcd0:	3004      	addeq	r0, #4
 800dcd2:	079a      	lsls	r2, r3, #30
 800dcd4:	bf04      	itt	eq
 800dcd6:	089b      	lsreq	r3, r3, #2
 800dcd8:	3002      	addeq	r0, #2
 800dcda:	07da      	lsls	r2, r3, #31
 800dcdc:	d403      	bmi.n	800dce6 <__lo0bits+0x4e>
 800dcde:	085b      	lsrs	r3, r3, #1
 800dce0:	f100 0001 	add.w	r0, r0, #1
 800dce4:	d005      	beq.n	800dcf2 <__lo0bits+0x5a>
 800dce6:	600b      	str	r3, [r1, #0]
 800dce8:	4770      	bx	lr
 800dcea:	4610      	mov	r0, r2
 800dcec:	e7e9      	b.n	800dcc2 <__lo0bits+0x2a>
 800dcee:	2000      	movs	r0, #0
 800dcf0:	4770      	bx	lr
 800dcf2:	2020      	movs	r0, #32
 800dcf4:	4770      	bx	lr
	...

0800dcf8 <__i2b>:
 800dcf8:	b510      	push	{r4, lr}
 800dcfa:	460c      	mov	r4, r1
 800dcfc:	2101      	movs	r1, #1
 800dcfe:	f7ff feb9 	bl	800da74 <_Balloc>
 800dd02:	4602      	mov	r2, r0
 800dd04:	b928      	cbnz	r0, 800dd12 <__i2b+0x1a>
 800dd06:	4b05      	ldr	r3, [pc, #20]	; (800dd1c <__i2b+0x24>)
 800dd08:	4805      	ldr	r0, [pc, #20]	; (800dd20 <__i2b+0x28>)
 800dd0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dd0e:	f7fc f853 	bl	8009db8 <__assert_func>
 800dd12:	2301      	movs	r3, #1
 800dd14:	6144      	str	r4, [r0, #20]
 800dd16:	6103      	str	r3, [r0, #16]
 800dd18:	bd10      	pop	{r4, pc}
 800dd1a:	bf00      	nop
 800dd1c:	0800f61d 	.word	0x0800f61d
 800dd20:	0800f70c 	.word	0x0800f70c

0800dd24 <__multiply>:
 800dd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd28:	4691      	mov	r9, r2
 800dd2a:	690a      	ldr	r2, [r1, #16]
 800dd2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	bfb8      	it	lt
 800dd34:	460b      	movlt	r3, r1
 800dd36:	460c      	mov	r4, r1
 800dd38:	bfbc      	itt	lt
 800dd3a:	464c      	movlt	r4, r9
 800dd3c:	4699      	movlt	r9, r3
 800dd3e:	6927      	ldr	r7, [r4, #16]
 800dd40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dd44:	68a3      	ldr	r3, [r4, #8]
 800dd46:	6861      	ldr	r1, [r4, #4]
 800dd48:	eb07 060a 	add.w	r6, r7, sl
 800dd4c:	42b3      	cmp	r3, r6
 800dd4e:	b085      	sub	sp, #20
 800dd50:	bfb8      	it	lt
 800dd52:	3101      	addlt	r1, #1
 800dd54:	f7ff fe8e 	bl	800da74 <_Balloc>
 800dd58:	b930      	cbnz	r0, 800dd68 <__multiply+0x44>
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	4b44      	ldr	r3, [pc, #272]	; (800de70 <__multiply+0x14c>)
 800dd5e:	4845      	ldr	r0, [pc, #276]	; (800de74 <__multiply+0x150>)
 800dd60:	f240 115d 	movw	r1, #349	; 0x15d
 800dd64:	f7fc f828 	bl	8009db8 <__assert_func>
 800dd68:	f100 0514 	add.w	r5, r0, #20
 800dd6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dd70:	462b      	mov	r3, r5
 800dd72:	2200      	movs	r2, #0
 800dd74:	4543      	cmp	r3, r8
 800dd76:	d321      	bcc.n	800ddbc <__multiply+0x98>
 800dd78:	f104 0314 	add.w	r3, r4, #20
 800dd7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dd80:	f109 0314 	add.w	r3, r9, #20
 800dd84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dd88:	9202      	str	r2, [sp, #8]
 800dd8a:	1b3a      	subs	r2, r7, r4
 800dd8c:	3a15      	subs	r2, #21
 800dd8e:	f022 0203 	bic.w	r2, r2, #3
 800dd92:	3204      	adds	r2, #4
 800dd94:	f104 0115 	add.w	r1, r4, #21
 800dd98:	428f      	cmp	r7, r1
 800dd9a:	bf38      	it	cc
 800dd9c:	2204      	movcc	r2, #4
 800dd9e:	9201      	str	r2, [sp, #4]
 800dda0:	9a02      	ldr	r2, [sp, #8]
 800dda2:	9303      	str	r3, [sp, #12]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d80c      	bhi.n	800ddc2 <__multiply+0x9e>
 800dda8:	2e00      	cmp	r6, #0
 800ddaa:	dd03      	ble.n	800ddb4 <__multiply+0x90>
 800ddac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d05a      	beq.n	800de6a <__multiply+0x146>
 800ddb4:	6106      	str	r6, [r0, #16]
 800ddb6:	b005      	add	sp, #20
 800ddb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddbc:	f843 2b04 	str.w	r2, [r3], #4
 800ddc0:	e7d8      	b.n	800dd74 <__multiply+0x50>
 800ddc2:	f8b3 a000 	ldrh.w	sl, [r3]
 800ddc6:	f1ba 0f00 	cmp.w	sl, #0
 800ddca:	d024      	beq.n	800de16 <__multiply+0xf2>
 800ddcc:	f104 0e14 	add.w	lr, r4, #20
 800ddd0:	46a9      	mov	r9, r5
 800ddd2:	f04f 0c00 	mov.w	ip, #0
 800ddd6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ddda:	f8d9 1000 	ldr.w	r1, [r9]
 800ddde:	fa1f fb82 	uxth.w	fp, r2
 800dde2:	b289      	uxth	r1, r1
 800dde4:	fb0a 110b 	mla	r1, sl, fp, r1
 800dde8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ddec:	f8d9 2000 	ldr.w	r2, [r9]
 800ddf0:	4461      	add	r1, ip
 800ddf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ddf6:	fb0a c20b 	mla	r2, sl, fp, ip
 800ddfa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ddfe:	b289      	uxth	r1, r1
 800de00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800de04:	4577      	cmp	r7, lr
 800de06:	f849 1b04 	str.w	r1, [r9], #4
 800de0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800de0e:	d8e2      	bhi.n	800ddd6 <__multiply+0xb2>
 800de10:	9a01      	ldr	r2, [sp, #4]
 800de12:	f845 c002 	str.w	ip, [r5, r2]
 800de16:	9a03      	ldr	r2, [sp, #12]
 800de18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800de1c:	3304      	adds	r3, #4
 800de1e:	f1b9 0f00 	cmp.w	r9, #0
 800de22:	d020      	beq.n	800de66 <__multiply+0x142>
 800de24:	6829      	ldr	r1, [r5, #0]
 800de26:	f104 0c14 	add.w	ip, r4, #20
 800de2a:	46ae      	mov	lr, r5
 800de2c:	f04f 0a00 	mov.w	sl, #0
 800de30:	f8bc b000 	ldrh.w	fp, [ip]
 800de34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800de38:	fb09 220b 	mla	r2, r9, fp, r2
 800de3c:	4492      	add	sl, r2
 800de3e:	b289      	uxth	r1, r1
 800de40:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800de44:	f84e 1b04 	str.w	r1, [lr], #4
 800de48:	f85c 2b04 	ldr.w	r2, [ip], #4
 800de4c:	f8be 1000 	ldrh.w	r1, [lr]
 800de50:	0c12      	lsrs	r2, r2, #16
 800de52:	fb09 1102 	mla	r1, r9, r2, r1
 800de56:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800de5a:	4567      	cmp	r7, ip
 800de5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800de60:	d8e6      	bhi.n	800de30 <__multiply+0x10c>
 800de62:	9a01      	ldr	r2, [sp, #4]
 800de64:	50a9      	str	r1, [r5, r2]
 800de66:	3504      	adds	r5, #4
 800de68:	e79a      	b.n	800dda0 <__multiply+0x7c>
 800de6a:	3e01      	subs	r6, #1
 800de6c:	e79c      	b.n	800dda8 <__multiply+0x84>
 800de6e:	bf00      	nop
 800de70:	0800f61d 	.word	0x0800f61d
 800de74:	0800f70c 	.word	0x0800f70c

0800de78 <__pow5mult>:
 800de78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de7c:	4615      	mov	r5, r2
 800de7e:	f012 0203 	ands.w	r2, r2, #3
 800de82:	4606      	mov	r6, r0
 800de84:	460f      	mov	r7, r1
 800de86:	d007      	beq.n	800de98 <__pow5mult+0x20>
 800de88:	4c25      	ldr	r4, [pc, #148]	; (800df20 <__pow5mult+0xa8>)
 800de8a:	3a01      	subs	r2, #1
 800de8c:	2300      	movs	r3, #0
 800de8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800de92:	f7ff fe51 	bl	800db38 <__multadd>
 800de96:	4607      	mov	r7, r0
 800de98:	10ad      	asrs	r5, r5, #2
 800de9a:	d03d      	beq.n	800df18 <__pow5mult+0xa0>
 800de9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800de9e:	b97c      	cbnz	r4, 800dec0 <__pow5mult+0x48>
 800dea0:	2010      	movs	r0, #16
 800dea2:	f7fb ffe3 	bl	8009e6c <malloc>
 800dea6:	4602      	mov	r2, r0
 800dea8:	6270      	str	r0, [r6, #36]	; 0x24
 800deaa:	b928      	cbnz	r0, 800deb8 <__pow5mult+0x40>
 800deac:	4b1d      	ldr	r3, [pc, #116]	; (800df24 <__pow5mult+0xac>)
 800deae:	481e      	ldr	r0, [pc, #120]	; (800df28 <__pow5mult+0xb0>)
 800deb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800deb4:	f7fb ff80 	bl	8009db8 <__assert_func>
 800deb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800debc:	6004      	str	r4, [r0, #0]
 800debe:	60c4      	str	r4, [r0, #12]
 800dec0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dec4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dec8:	b94c      	cbnz	r4, 800dede <__pow5mult+0x66>
 800deca:	f240 2171 	movw	r1, #625	; 0x271
 800dece:	4630      	mov	r0, r6
 800ded0:	f7ff ff12 	bl	800dcf8 <__i2b>
 800ded4:	2300      	movs	r3, #0
 800ded6:	f8c8 0008 	str.w	r0, [r8, #8]
 800deda:	4604      	mov	r4, r0
 800dedc:	6003      	str	r3, [r0, #0]
 800dede:	f04f 0900 	mov.w	r9, #0
 800dee2:	07eb      	lsls	r3, r5, #31
 800dee4:	d50a      	bpl.n	800defc <__pow5mult+0x84>
 800dee6:	4639      	mov	r1, r7
 800dee8:	4622      	mov	r2, r4
 800deea:	4630      	mov	r0, r6
 800deec:	f7ff ff1a 	bl	800dd24 <__multiply>
 800def0:	4639      	mov	r1, r7
 800def2:	4680      	mov	r8, r0
 800def4:	4630      	mov	r0, r6
 800def6:	f7ff fdfd 	bl	800daf4 <_Bfree>
 800defa:	4647      	mov	r7, r8
 800defc:	106d      	asrs	r5, r5, #1
 800defe:	d00b      	beq.n	800df18 <__pow5mult+0xa0>
 800df00:	6820      	ldr	r0, [r4, #0]
 800df02:	b938      	cbnz	r0, 800df14 <__pow5mult+0x9c>
 800df04:	4622      	mov	r2, r4
 800df06:	4621      	mov	r1, r4
 800df08:	4630      	mov	r0, r6
 800df0a:	f7ff ff0b 	bl	800dd24 <__multiply>
 800df0e:	6020      	str	r0, [r4, #0]
 800df10:	f8c0 9000 	str.w	r9, [r0]
 800df14:	4604      	mov	r4, r0
 800df16:	e7e4      	b.n	800dee2 <__pow5mult+0x6a>
 800df18:	4638      	mov	r0, r7
 800df1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df1e:	bf00      	nop
 800df20:	0800f858 	.word	0x0800f858
 800df24:	0800f440 	.word	0x0800f440
 800df28:	0800f70c 	.word	0x0800f70c

0800df2c <__lshift>:
 800df2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df30:	460c      	mov	r4, r1
 800df32:	6849      	ldr	r1, [r1, #4]
 800df34:	6923      	ldr	r3, [r4, #16]
 800df36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df3a:	68a3      	ldr	r3, [r4, #8]
 800df3c:	4607      	mov	r7, r0
 800df3e:	4691      	mov	r9, r2
 800df40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df44:	f108 0601 	add.w	r6, r8, #1
 800df48:	42b3      	cmp	r3, r6
 800df4a:	db0b      	blt.n	800df64 <__lshift+0x38>
 800df4c:	4638      	mov	r0, r7
 800df4e:	f7ff fd91 	bl	800da74 <_Balloc>
 800df52:	4605      	mov	r5, r0
 800df54:	b948      	cbnz	r0, 800df6a <__lshift+0x3e>
 800df56:	4602      	mov	r2, r0
 800df58:	4b2a      	ldr	r3, [pc, #168]	; (800e004 <__lshift+0xd8>)
 800df5a:	482b      	ldr	r0, [pc, #172]	; (800e008 <__lshift+0xdc>)
 800df5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800df60:	f7fb ff2a 	bl	8009db8 <__assert_func>
 800df64:	3101      	adds	r1, #1
 800df66:	005b      	lsls	r3, r3, #1
 800df68:	e7ee      	b.n	800df48 <__lshift+0x1c>
 800df6a:	2300      	movs	r3, #0
 800df6c:	f100 0114 	add.w	r1, r0, #20
 800df70:	f100 0210 	add.w	r2, r0, #16
 800df74:	4618      	mov	r0, r3
 800df76:	4553      	cmp	r3, sl
 800df78:	db37      	blt.n	800dfea <__lshift+0xbe>
 800df7a:	6920      	ldr	r0, [r4, #16]
 800df7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df80:	f104 0314 	add.w	r3, r4, #20
 800df84:	f019 091f 	ands.w	r9, r9, #31
 800df88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800df8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800df90:	d02f      	beq.n	800dff2 <__lshift+0xc6>
 800df92:	f1c9 0e20 	rsb	lr, r9, #32
 800df96:	468a      	mov	sl, r1
 800df98:	f04f 0c00 	mov.w	ip, #0
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	fa02 f209 	lsl.w	r2, r2, r9
 800dfa2:	ea42 020c 	orr.w	r2, r2, ip
 800dfa6:	f84a 2b04 	str.w	r2, [sl], #4
 800dfaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfae:	4298      	cmp	r0, r3
 800dfb0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dfb4:	d8f2      	bhi.n	800df9c <__lshift+0x70>
 800dfb6:	1b03      	subs	r3, r0, r4
 800dfb8:	3b15      	subs	r3, #21
 800dfba:	f023 0303 	bic.w	r3, r3, #3
 800dfbe:	3304      	adds	r3, #4
 800dfc0:	f104 0215 	add.w	r2, r4, #21
 800dfc4:	4290      	cmp	r0, r2
 800dfc6:	bf38      	it	cc
 800dfc8:	2304      	movcc	r3, #4
 800dfca:	f841 c003 	str.w	ip, [r1, r3]
 800dfce:	f1bc 0f00 	cmp.w	ip, #0
 800dfd2:	d001      	beq.n	800dfd8 <__lshift+0xac>
 800dfd4:	f108 0602 	add.w	r6, r8, #2
 800dfd8:	3e01      	subs	r6, #1
 800dfda:	4638      	mov	r0, r7
 800dfdc:	612e      	str	r6, [r5, #16]
 800dfde:	4621      	mov	r1, r4
 800dfe0:	f7ff fd88 	bl	800daf4 <_Bfree>
 800dfe4:	4628      	mov	r0, r5
 800dfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfea:	f842 0f04 	str.w	r0, [r2, #4]!
 800dfee:	3301      	adds	r3, #1
 800dff0:	e7c1      	b.n	800df76 <__lshift+0x4a>
 800dff2:	3904      	subs	r1, #4
 800dff4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dff8:	f841 2f04 	str.w	r2, [r1, #4]!
 800dffc:	4298      	cmp	r0, r3
 800dffe:	d8f9      	bhi.n	800dff4 <__lshift+0xc8>
 800e000:	e7ea      	b.n	800dfd8 <__lshift+0xac>
 800e002:	bf00      	nop
 800e004:	0800f61d 	.word	0x0800f61d
 800e008:	0800f70c 	.word	0x0800f70c

0800e00c <__mcmp>:
 800e00c:	b530      	push	{r4, r5, lr}
 800e00e:	6902      	ldr	r2, [r0, #16]
 800e010:	690c      	ldr	r4, [r1, #16]
 800e012:	1b12      	subs	r2, r2, r4
 800e014:	d10e      	bne.n	800e034 <__mcmp+0x28>
 800e016:	f100 0314 	add.w	r3, r0, #20
 800e01a:	3114      	adds	r1, #20
 800e01c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e020:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e024:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e028:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e02c:	42a5      	cmp	r5, r4
 800e02e:	d003      	beq.n	800e038 <__mcmp+0x2c>
 800e030:	d305      	bcc.n	800e03e <__mcmp+0x32>
 800e032:	2201      	movs	r2, #1
 800e034:	4610      	mov	r0, r2
 800e036:	bd30      	pop	{r4, r5, pc}
 800e038:	4283      	cmp	r3, r0
 800e03a:	d3f3      	bcc.n	800e024 <__mcmp+0x18>
 800e03c:	e7fa      	b.n	800e034 <__mcmp+0x28>
 800e03e:	f04f 32ff 	mov.w	r2, #4294967295
 800e042:	e7f7      	b.n	800e034 <__mcmp+0x28>

0800e044 <__mdiff>:
 800e044:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e048:	460c      	mov	r4, r1
 800e04a:	4606      	mov	r6, r0
 800e04c:	4611      	mov	r1, r2
 800e04e:	4620      	mov	r0, r4
 800e050:	4690      	mov	r8, r2
 800e052:	f7ff ffdb 	bl	800e00c <__mcmp>
 800e056:	1e05      	subs	r5, r0, #0
 800e058:	d110      	bne.n	800e07c <__mdiff+0x38>
 800e05a:	4629      	mov	r1, r5
 800e05c:	4630      	mov	r0, r6
 800e05e:	f7ff fd09 	bl	800da74 <_Balloc>
 800e062:	b930      	cbnz	r0, 800e072 <__mdiff+0x2e>
 800e064:	4b3a      	ldr	r3, [pc, #232]	; (800e150 <__mdiff+0x10c>)
 800e066:	4602      	mov	r2, r0
 800e068:	f240 2132 	movw	r1, #562	; 0x232
 800e06c:	4839      	ldr	r0, [pc, #228]	; (800e154 <__mdiff+0x110>)
 800e06e:	f7fb fea3 	bl	8009db8 <__assert_func>
 800e072:	2301      	movs	r3, #1
 800e074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e07c:	bfa4      	itt	ge
 800e07e:	4643      	movge	r3, r8
 800e080:	46a0      	movge	r8, r4
 800e082:	4630      	mov	r0, r6
 800e084:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e088:	bfa6      	itte	ge
 800e08a:	461c      	movge	r4, r3
 800e08c:	2500      	movge	r5, #0
 800e08e:	2501      	movlt	r5, #1
 800e090:	f7ff fcf0 	bl	800da74 <_Balloc>
 800e094:	b920      	cbnz	r0, 800e0a0 <__mdiff+0x5c>
 800e096:	4b2e      	ldr	r3, [pc, #184]	; (800e150 <__mdiff+0x10c>)
 800e098:	4602      	mov	r2, r0
 800e09a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e09e:	e7e5      	b.n	800e06c <__mdiff+0x28>
 800e0a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e0a4:	6926      	ldr	r6, [r4, #16]
 800e0a6:	60c5      	str	r5, [r0, #12]
 800e0a8:	f104 0914 	add.w	r9, r4, #20
 800e0ac:	f108 0514 	add.w	r5, r8, #20
 800e0b0:	f100 0e14 	add.w	lr, r0, #20
 800e0b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e0b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e0bc:	f108 0210 	add.w	r2, r8, #16
 800e0c0:	46f2      	mov	sl, lr
 800e0c2:	2100      	movs	r1, #0
 800e0c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e0c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e0cc:	fa1f f883 	uxth.w	r8, r3
 800e0d0:	fa11 f18b 	uxtah	r1, r1, fp
 800e0d4:	0c1b      	lsrs	r3, r3, #16
 800e0d6:	eba1 0808 	sub.w	r8, r1, r8
 800e0da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e0de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e0e2:	fa1f f888 	uxth.w	r8, r8
 800e0e6:	1419      	asrs	r1, r3, #16
 800e0e8:	454e      	cmp	r6, r9
 800e0ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e0ee:	f84a 3b04 	str.w	r3, [sl], #4
 800e0f2:	d8e7      	bhi.n	800e0c4 <__mdiff+0x80>
 800e0f4:	1b33      	subs	r3, r6, r4
 800e0f6:	3b15      	subs	r3, #21
 800e0f8:	f023 0303 	bic.w	r3, r3, #3
 800e0fc:	3304      	adds	r3, #4
 800e0fe:	3415      	adds	r4, #21
 800e100:	42a6      	cmp	r6, r4
 800e102:	bf38      	it	cc
 800e104:	2304      	movcc	r3, #4
 800e106:	441d      	add	r5, r3
 800e108:	4473      	add	r3, lr
 800e10a:	469e      	mov	lr, r3
 800e10c:	462e      	mov	r6, r5
 800e10e:	4566      	cmp	r6, ip
 800e110:	d30e      	bcc.n	800e130 <__mdiff+0xec>
 800e112:	f10c 0203 	add.w	r2, ip, #3
 800e116:	1b52      	subs	r2, r2, r5
 800e118:	f022 0203 	bic.w	r2, r2, #3
 800e11c:	3d03      	subs	r5, #3
 800e11e:	45ac      	cmp	ip, r5
 800e120:	bf38      	it	cc
 800e122:	2200      	movcc	r2, #0
 800e124:	441a      	add	r2, r3
 800e126:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e12a:	b17b      	cbz	r3, 800e14c <__mdiff+0x108>
 800e12c:	6107      	str	r7, [r0, #16]
 800e12e:	e7a3      	b.n	800e078 <__mdiff+0x34>
 800e130:	f856 8b04 	ldr.w	r8, [r6], #4
 800e134:	fa11 f288 	uxtah	r2, r1, r8
 800e138:	1414      	asrs	r4, r2, #16
 800e13a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e13e:	b292      	uxth	r2, r2
 800e140:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e144:	f84e 2b04 	str.w	r2, [lr], #4
 800e148:	1421      	asrs	r1, r4, #16
 800e14a:	e7e0      	b.n	800e10e <__mdiff+0xca>
 800e14c:	3f01      	subs	r7, #1
 800e14e:	e7ea      	b.n	800e126 <__mdiff+0xe2>
 800e150:	0800f61d 	.word	0x0800f61d
 800e154:	0800f70c 	.word	0x0800f70c

0800e158 <__ulp>:
 800e158:	b082      	sub	sp, #8
 800e15a:	ed8d 0b00 	vstr	d0, [sp]
 800e15e:	9b01      	ldr	r3, [sp, #4]
 800e160:	4912      	ldr	r1, [pc, #72]	; (800e1ac <__ulp+0x54>)
 800e162:	4019      	ands	r1, r3
 800e164:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e168:	2900      	cmp	r1, #0
 800e16a:	dd05      	ble.n	800e178 <__ulp+0x20>
 800e16c:	2200      	movs	r2, #0
 800e16e:	460b      	mov	r3, r1
 800e170:	ec43 2b10 	vmov	d0, r2, r3
 800e174:	b002      	add	sp, #8
 800e176:	4770      	bx	lr
 800e178:	4249      	negs	r1, r1
 800e17a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e17e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e182:	f04f 0200 	mov.w	r2, #0
 800e186:	f04f 0300 	mov.w	r3, #0
 800e18a:	da04      	bge.n	800e196 <__ulp+0x3e>
 800e18c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e190:	fa41 f300 	asr.w	r3, r1, r0
 800e194:	e7ec      	b.n	800e170 <__ulp+0x18>
 800e196:	f1a0 0114 	sub.w	r1, r0, #20
 800e19a:	291e      	cmp	r1, #30
 800e19c:	bfda      	itte	le
 800e19e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e1a2:	fa20 f101 	lsrle.w	r1, r0, r1
 800e1a6:	2101      	movgt	r1, #1
 800e1a8:	460a      	mov	r2, r1
 800e1aa:	e7e1      	b.n	800e170 <__ulp+0x18>
 800e1ac:	7ff00000 	.word	0x7ff00000

0800e1b0 <__b2d>:
 800e1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1b2:	6905      	ldr	r5, [r0, #16]
 800e1b4:	f100 0714 	add.w	r7, r0, #20
 800e1b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e1bc:	1f2e      	subs	r6, r5, #4
 800e1be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f7ff fd48 	bl	800dc58 <__hi0bits>
 800e1c8:	f1c0 0320 	rsb	r3, r0, #32
 800e1cc:	280a      	cmp	r0, #10
 800e1ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e24c <__b2d+0x9c>
 800e1d2:	600b      	str	r3, [r1, #0]
 800e1d4:	dc14      	bgt.n	800e200 <__b2d+0x50>
 800e1d6:	f1c0 0e0b 	rsb	lr, r0, #11
 800e1da:	fa24 f10e 	lsr.w	r1, r4, lr
 800e1de:	42b7      	cmp	r7, r6
 800e1e0:	ea41 030c 	orr.w	r3, r1, ip
 800e1e4:	bf34      	ite	cc
 800e1e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e1ea:	2100      	movcs	r1, #0
 800e1ec:	3015      	adds	r0, #21
 800e1ee:	fa04 f000 	lsl.w	r0, r4, r0
 800e1f2:	fa21 f10e 	lsr.w	r1, r1, lr
 800e1f6:	ea40 0201 	orr.w	r2, r0, r1
 800e1fa:	ec43 2b10 	vmov	d0, r2, r3
 800e1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e200:	42b7      	cmp	r7, r6
 800e202:	bf3a      	itte	cc
 800e204:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e208:	f1a5 0608 	subcc.w	r6, r5, #8
 800e20c:	2100      	movcs	r1, #0
 800e20e:	380b      	subs	r0, #11
 800e210:	d017      	beq.n	800e242 <__b2d+0x92>
 800e212:	f1c0 0c20 	rsb	ip, r0, #32
 800e216:	fa04 f500 	lsl.w	r5, r4, r0
 800e21a:	42be      	cmp	r6, r7
 800e21c:	fa21 f40c 	lsr.w	r4, r1, ip
 800e220:	ea45 0504 	orr.w	r5, r5, r4
 800e224:	bf8c      	ite	hi
 800e226:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e22a:	2400      	movls	r4, #0
 800e22c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e230:	fa01 f000 	lsl.w	r0, r1, r0
 800e234:	fa24 f40c 	lsr.w	r4, r4, ip
 800e238:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e23c:	ea40 0204 	orr.w	r2, r0, r4
 800e240:	e7db      	b.n	800e1fa <__b2d+0x4a>
 800e242:	ea44 030c 	orr.w	r3, r4, ip
 800e246:	460a      	mov	r2, r1
 800e248:	e7d7      	b.n	800e1fa <__b2d+0x4a>
 800e24a:	bf00      	nop
 800e24c:	3ff00000 	.word	0x3ff00000

0800e250 <__d2b>:
 800e250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e254:	4689      	mov	r9, r1
 800e256:	2101      	movs	r1, #1
 800e258:	ec57 6b10 	vmov	r6, r7, d0
 800e25c:	4690      	mov	r8, r2
 800e25e:	f7ff fc09 	bl	800da74 <_Balloc>
 800e262:	4604      	mov	r4, r0
 800e264:	b930      	cbnz	r0, 800e274 <__d2b+0x24>
 800e266:	4602      	mov	r2, r0
 800e268:	4b25      	ldr	r3, [pc, #148]	; (800e300 <__d2b+0xb0>)
 800e26a:	4826      	ldr	r0, [pc, #152]	; (800e304 <__d2b+0xb4>)
 800e26c:	f240 310a 	movw	r1, #778	; 0x30a
 800e270:	f7fb fda2 	bl	8009db8 <__assert_func>
 800e274:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e278:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e27c:	bb35      	cbnz	r5, 800e2cc <__d2b+0x7c>
 800e27e:	2e00      	cmp	r6, #0
 800e280:	9301      	str	r3, [sp, #4]
 800e282:	d028      	beq.n	800e2d6 <__d2b+0x86>
 800e284:	4668      	mov	r0, sp
 800e286:	9600      	str	r6, [sp, #0]
 800e288:	f7ff fd06 	bl	800dc98 <__lo0bits>
 800e28c:	9900      	ldr	r1, [sp, #0]
 800e28e:	b300      	cbz	r0, 800e2d2 <__d2b+0x82>
 800e290:	9a01      	ldr	r2, [sp, #4]
 800e292:	f1c0 0320 	rsb	r3, r0, #32
 800e296:	fa02 f303 	lsl.w	r3, r2, r3
 800e29a:	430b      	orrs	r3, r1
 800e29c:	40c2      	lsrs	r2, r0
 800e29e:	6163      	str	r3, [r4, #20]
 800e2a0:	9201      	str	r2, [sp, #4]
 800e2a2:	9b01      	ldr	r3, [sp, #4]
 800e2a4:	61a3      	str	r3, [r4, #24]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	bf14      	ite	ne
 800e2aa:	2202      	movne	r2, #2
 800e2ac:	2201      	moveq	r2, #1
 800e2ae:	6122      	str	r2, [r4, #16]
 800e2b0:	b1d5      	cbz	r5, 800e2e8 <__d2b+0x98>
 800e2b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e2b6:	4405      	add	r5, r0
 800e2b8:	f8c9 5000 	str.w	r5, [r9]
 800e2bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e2c0:	f8c8 0000 	str.w	r0, [r8]
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	b003      	add	sp, #12
 800e2c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e2d0:	e7d5      	b.n	800e27e <__d2b+0x2e>
 800e2d2:	6161      	str	r1, [r4, #20]
 800e2d4:	e7e5      	b.n	800e2a2 <__d2b+0x52>
 800e2d6:	a801      	add	r0, sp, #4
 800e2d8:	f7ff fcde 	bl	800dc98 <__lo0bits>
 800e2dc:	9b01      	ldr	r3, [sp, #4]
 800e2de:	6163      	str	r3, [r4, #20]
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	6122      	str	r2, [r4, #16]
 800e2e4:	3020      	adds	r0, #32
 800e2e6:	e7e3      	b.n	800e2b0 <__d2b+0x60>
 800e2e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e2ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e2f0:	f8c9 0000 	str.w	r0, [r9]
 800e2f4:	6918      	ldr	r0, [r3, #16]
 800e2f6:	f7ff fcaf 	bl	800dc58 <__hi0bits>
 800e2fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e2fe:	e7df      	b.n	800e2c0 <__d2b+0x70>
 800e300:	0800f61d 	.word	0x0800f61d
 800e304:	0800f70c 	.word	0x0800f70c

0800e308 <__ratio>:
 800e308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e30c:	4688      	mov	r8, r1
 800e30e:	4669      	mov	r1, sp
 800e310:	4681      	mov	r9, r0
 800e312:	f7ff ff4d 	bl	800e1b0 <__b2d>
 800e316:	a901      	add	r1, sp, #4
 800e318:	4640      	mov	r0, r8
 800e31a:	ec55 4b10 	vmov	r4, r5, d0
 800e31e:	f7ff ff47 	bl	800e1b0 <__b2d>
 800e322:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e326:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e32a:	eba3 0c02 	sub.w	ip, r3, r2
 800e32e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e332:	1a9b      	subs	r3, r3, r2
 800e334:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e338:	ec51 0b10 	vmov	r0, r1, d0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	bfd6      	itet	le
 800e340:	460a      	movle	r2, r1
 800e342:	462a      	movgt	r2, r5
 800e344:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e348:	468b      	mov	fp, r1
 800e34a:	462f      	mov	r7, r5
 800e34c:	bfd4      	ite	le
 800e34e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e352:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e356:	4620      	mov	r0, r4
 800e358:	ee10 2a10 	vmov	r2, s0
 800e35c:	465b      	mov	r3, fp
 800e35e:	4639      	mov	r1, r7
 800e360:	f7f2 fa84 	bl	800086c <__aeabi_ddiv>
 800e364:	ec41 0b10 	vmov	d0, r0, r1
 800e368:	b003      	add	sp, #12
 800e36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e36e <__copybits>:
 800e36e:	3901      	subs	r1, #1
 800e370:	b570      	push	{r4, r5, r6, lr}
 800e372:	1149      	asrs	r1, r1, #5
 800e374:	6914      	ldr	r4, [r2, #16]
 800e376:	3101      	adds	r1, #1
 800e378:	f102 0314 	add.w	r3, r2, #20
 800e37c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e380:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e384:	1f05      	subs	r5, r0, #4
 800e386:	42a3      	cmp	r3, r4
 800e388:	d30c      	bcc.n	800e3a4 <__copybits+0x36>
 800e38a:	1aa3      	subs	r3, r4, r2
 800e38c:	3b11      	subs	r3, #17
 800e38e:	f023 0303 	bic.w	r3, r3, #3
 800e392:	3211      	adds	r2, #17
 800e394:	42a2      	cmp	r2, r4
 800e396:	bf88      	it	hi
 800e398:	2300      	movhi	r3, #0
 800e39a:	4418      	add	r0, r3
 800e39c:	2300      	movs	r3, #0
 800e39e:	4288      	cmp	r0, r1
 800e3a0:	d305      	bcc.n	800e3ae <__copybits+0x40>
 800e3a2:	bd70      	pop	{r4, r5, r6, pc}
 800e3a4:	f853 6b04 	ldr.w	r6, [r3], #4
 800e3a8:	f845 6f04 	str.w	r6, [r5, #4]!
 800e3ac:	e7eb      	b.n	800e386 <__copybits+0x18>
 800e3ae:	f840 3b04 	str.w	r3, [r0], #4
 800e3b2:	e7f4      	b.n	800e39e <__copybits+0x30>

0800e3b4 <__any_on>:
 800e3b4:	f100 0214 	add.w	r2, r0, #20
 800e3b8:	6900      	ldr	r0, [r0, #16]
 800e3ba:	114b      	asrs	r3, r1, #5
 800e3bc:	4298      	cmp	r0, r3
 800e3be:	b510      	push	{r4, lr}
 800e3c0:	db11      	blt.n	800e3e6 <__any_on+0x32>
 800e3c2:	dd0a      	ble.n	800e3da <__any_on+0x26>
 800e3c4:	f011 011f 	ands.w	r1, r1, #31
 800e3c8:	d007      	beq.n	800e3da <__any_on+0x26>
 800e3ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e3ce:	fa24 f001 	lsr.w	r0, r4, r1
 800e3d2:	fa00 f101 	lsl.w	r1, r0, r1
 800e3d6:	428c      	cmp	r4, r1
 800e3d8:	d10b      	bne.n	800e3f2 <__any_on+0x3e>
 800e3da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d803      	bhi.n	800e3ea <__any_on+0x36>
 800e3e2:	2000      	movs	r0, #0
 800e3e4:	bd10      	pop	{r4, pc}
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	e7f7      	b.n	800e3da <__any_on+0x26>
 800e3ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e3ee:	2900      	cmp	r1, #0
 800e3f0:	d0f5      	beq.n	800e3de <__any_on+0x2a>
 800e3f2:	2001      	movs	r0, #1
 800e3f4:	e7f6      	b.n	800e3e4 <__any_on+0x30>

0800e3f6 <_calloc_r>:
 800e3f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3f8:	fba1 2402 	umull	r2, r4, r1, r2
 800e3fc:	b94c      	cbnz	r4, 800e412 <_calloc_r+0x1c>
 800e3fe:	4611      	mov	r1, r2
 800e400:	9201      	str	r2, [sp, #4]
 800e402:	f7fb fdb7 	bl	8009f74 <_malloc_r>
 800e406:	9a01      	ldr	r2, [sp, #4]
 800e408:	4605      	mov	r5, r0
 800e40a:	b930      	cbnz	r0, 800e41a <_calloc_r+0x24>
 800e40c:	4628      	mov	r0, r5
 800e40e:	b003      	add	sp, #12
 800e410:	bd30      	pop	{r4, r5, pc}
 800e412:	220c      	movs	r2, #12
 800e414:	6002      	str	r2, [r0, #0]
 800e416:	2500      	movs	r5, #0
 800e418:	e7f8      	b.n	800e40c <_calloc_r+0x16>
 800e41a:	4621      	mov	r1, r4
 800e41c:	f7fb fd36 	bl	8009e8c <memset>
 800e420:	e7f4      	b.n	800e40c <_calloc_r+0x16>

0800e422 <_realloc_r>:
 800e422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e426:	4680      	mov	r8, r0
 800e428:	4614      	mov	r4, r2
 800e42a:	460e      	mov	r6, r1
 800e42c:	b921      	cbnz	r1, 800e438 <_realloc_r+0x16>
 800e42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e432:	4611      	mov	r1, r2
 800e434:	f7fb bd9e 	b.w	8009f74 <_malloc_r>
 800e438:	b92a      	cbnz	r2, 800e446 <_realloc_r+0x24>
 800e43a:	f7fb fd2f 	bl	8009e9c <_free_r>
 800e43e:	4625      	mov	r5, r4
 800e440:	4628      	mov	r0, r5
 800e442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e446:	f000 fe6d 	bl	800f124 <_malloc_usable_size_r>
 800e44a:	4284      	cmp	r4, r0
 800e44c:	4607      	mov	r7, r0
 800e44e:	d802      	bhi.n	800e456 <_realloc_r+0x34>
 800e450:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e454:	d812      	bhi.n	800e47c <_realloc_r+0x5a>
 800e456:	4621      	mov	r1, r4
 800e458:	4640      	mov	r0, r8
 800e45a:	f7fb fd8b 	bl	8009f74 <_malloc_r>
 800e45e:	4605      	mov	r5, r0
 800e460:	2800      	cmp	r0, #0
 800e462:	d0ed      	beq.n	800e440 <_realloc_r+0x1e>
 800e464:	42bc      	cmp	r4, r7
 800e466:	4622      	mov	r2, r4
 800e468:	4631      	mov	r1, r6
 800e46a:	bf28      	it	cs
 800e46c:	463a      	movcs	r2, r7
 800e46e:	f7ff facd 	bl	800da0c <memcpy>
 800e472:	4631      	mov	r1, r6
 800e474:	4640      	mov	r0, r8
 800e476:	f7fb fd11 	bl	8009e9c <_free_r>
 800e47a:	e7e1      	b.n	800e440 <_realloc_r+0x1e>
 800e47c:	4635      	mov	r5, r6
 800e47e:	e7df      	b.n	800e440 <_realloc_r+0x1e>

0800e480 <__ssputs_r>:
 800e480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e484:	688e      	ldr	r6, [r1, #8]
 800e486:	429e      	cmp	r6, r3
 800e488:	4682      	mov	sl, r0
 800e48a:	460c      	mov	r4, r1
 800e48c:	4690      	mov	r8, r2
 800e48e:	461f      	mov	r7, r3
 800e490:	d838      	bhi.n	800e504 <__ssputs_r+0x84>
 800e492:	898a      	ldrh	r2, [r1, #12]
 800e494:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e498:	d032      	beq.n	800e500 <__ssputs_r+0x80>
 800e49a:	6825      	ldr	r5, [r4, #0]
 800e49c:	6909      	ldr	r1, [r1, #16]
 800e49e:	eba5 0901 	sub.w	r9, r5, r1
 800e4a2:	6965      	ldr	r5, [r4, #20]
 800e4a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e4a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	444b      	add	r3, r9
 800e4b0:	106d      	asrs	r5, r5, #1
 800e4b2:	429d      	cmp	r5, r3
 800e4b4:	bf38      	it	cc
 800e4b6:	461d      	movcc	r5, r3
 800e4b8:	0553      	lsls	r3, r2, #21
 800e4ba:	d531      	bpl.n	800e520 <__ssputs_r+0xa0>
 800e4bc:	4629      	mov	r1, r5
 800e4be:	f7fb fd59 	bl	8009f74 <_malloc_r>
 800e4c2:	4606      	mov	r6, r0
 800e4c4:	b950      	cbnz	r0, 800e4dc <__ssputs_r+0x5c>
 800e4c6:	230c      	movs	r3, #12
 800e4c8:	f8ca 3000 	str.w	r3, [sl]
 800e4cc:	89a3      	ldrh	r3, [r4, #12]
 800e4ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4d2:	81a3      	strh	r3, [r4, #12]
 800e4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4dc:	6921      	ldr	r1, [r4, #16]
 800e4de:	464a      	mov	r2, r9
 800e4e0:	f7ff fa94 	bl	800da0c <memcpy>
 800e4e4:	89a3      	ldrh	r3, [r4, #12]
 800e4e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e4ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4ee:	81a3      	strh	r3, [r4, #12]
 800e4f0:	6126      	str	r6, [r4, #16]
 800e4f2:	6165      	str	r5, [r4, #20]
 800e4f4:	444e      	add	r6, r9
 800e4f6:	eba5 0509 	sub.w	r5, r5, r9
 800e4fa:	6026      	str	r6, [r4, #0]
 800e4fc:	60a5      	str	r5, [r4, #8]
 800e4fe:	463e      	mov	r6, r7
 800e500:	42be      	cmp	r6, r7
 800e502:	d900      	bls.n	800e506 <__ssputs_r+0x86>
 800e504:	463e      	mov	r6, r7
 800e506:	6820      	ldr	r0, [r4, #0]
 800e508:	4632      	mov	r2, r6
 800e50a:	4641      	mov	r1, r8
 800e50c:	f7ff fa8c 	bl	800da28 <memmove>
 800e510:	68a3      	ldr	r3, [r4, #8]
 800e512:	1b9b      	subs	r3, r3, r6
 800e514:	60a3      	str	r3, [r4, #8]
 800e516:	6823      	ldr	r3, [r4, #0]
 800e518:	4433      	add	r3, r6
 800e51a:	6023      	str	r3, [r4, #0]
 800e51c:	2000      	movs	r0, #0
 800e51e:	e7db      	b.n	800e4d8 <__ssputs_r+0x58>
 800e520:	462a      	mov	r2, r5
 800e522:	f7ff ff7e 	bl	800e422 <_realloc_r>
 800e526:	4606      	mov	r6, r0
 800e528:	2800      	cmp	r0, #0
 800e52a:	d1e1      	bne.n	800e4f0 <__ssputs_r+0x70>
 800e52c:	6921      	ldr	r1, [r4, #16]
 800e52e:	4650      	mov	r0, sl
 800e530:	f7fb fcb4 	bl	8009e9c <_free_r>
 800e534:	e7c7      	b.n	800e4c6 <__ssputs_r+0x46>
	...

0800e538 <_svfiprintf_r>:
 800e538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e53c:	4698      	mov	r8, r3
 800e53e:	898b      	ldrh	r3, [r1, #12]
 800e540:	061b      	lsls	r3, r3, #24
 800e542:	b09d      	sub	sp, #116	; 0x74
 800e544:	4607      	mov	r7, r0
 800e546:	460d      	mov	r5, r1
 800e548:	4614      	mov	r4, r2
 800e54a:	d50e      	bpl.n	800e56a <_svfiprintf_r+0x32>
 800e54c:	690b      	ldr	r3, [r1, #16]
 800e54e:	b963      	cbnz	r3, 800e56a <_svfiprintf_r+0x32>
 800e550:	2140      	movs	r1, #64	; 0x40
 800e552:	f7fb fd0f 	bl	8009f74 <_malloc_r>
 800e556:	6028      	str	r0, [r5, #0]
 800e558:	6128      	str	r0, [r5, #16]
 800e55a:	b920      	cbnz	r0, 800e566 <_svfiprintf_r+0x2e>
 800e55c:	230c      	movs	r3, #12
 800e55e:	603b      	str	r3, [r7, #0]
 800e560:	f04f 30ff 	mov.w	r0, #4294967295
 800e564:	e0d1      	b.n	800e70a <_svfiprintf_r+0x1d2>
 800e566:	2340      	movs	r3, #64	; 0x40
 800e568:	616b      	str	r3, [r5, #20]
 800e56a:	2300      	movs	r3, #0
 800e56c:	9309      	str	r3, [sp, #36]	; 0x24
 800e56e:	2320      	movs	r3, #32
 800e570:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e574:	f8cd 800c 	str.w	r8, [sp, #12]
 800e578:	2330      	movs	r3, #48	; 0x30
 800e57a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e724 <_svfiprintf_r+0x1ec>
 800e57e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e582:	f04f 0901 	mov.w	r9, #1
 800e586:	4623      	mov	r3, r4
 800e588:	469a      	mov	sl, r3
 800e58a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e58e:	b10a      	cbz	r2, 800e594 <_svfiprintf_r+0x5c>
 800e590:	2a25      	cmp	r2, #37	; 0x25
 800e592:	d1f9      	bne.n	800e588 <_svfiprintf_r+0x50>
 800e594:	ebba 0b04 	subs.w	fp, sl, r4
 800e598:	d00b      	beq.n	800e5b2 <_svfiprintf_r+0x7a>
 800e59a:	465b      	mov	r3, fp
 800e59c:	4622      	mov	r2, r4
 800e59e:	4629      	mov	r1, r5
 800e5a0:	4638      	mov	r0, r7
 800e5a2:	f7ff ff6d 	bl	800e480 <__ssputs_r>
 800e5a6:	3001      	adds	r0, #1
 800e5a8:	f000 80aa 	beq.w	800e700 <_svfiprintf_r+0x1c8>
 800e5ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5ae:	445a      	add	r2, fp
 800e5b0:	9209      	str	r2, [sp, #36]	; 0x24
 800e5b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	f000 80a2 	beq.w	800e700 <_svfiprintf_r+0x1c8>
 800e5bc:	2300      	movs	r3, #0
 800e5be:	f04f 32ff 	mov.w	r2, #4294967295
 800e5c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5c6:	f10a 0a01 	add.w	sl, sl, #1
 800e5ca:	9304      	str	r3, [sp, #16]
 800e5cc:	9307      	str	r3, [sp, #28]
 800e5ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5d2:	931a      	str	r3, [sp, #104]	; 0x68
 800e5d4:	4654      	mov	r4, sl
 800e5d6:	2205      	movs	r2, #5
 800e5d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5dc:	4851      	ldr	r0, [pc, #324]	; (800e724 <_svfiprintf_r+0x1ec>)
 800e5de:	f7f1 fe0f 	bl	8000200 <memchr>
 800e5e2:	9a04      	ldr	r2, [sp, #16]
 800e5e4:	b9d8      	cbnz	r0, 800e61e <_svfiprintf_r+0xe6>
 800e5e6:	06d0      	lsls	r0, r2, #27
 800e5e8:	bf44      	itt	mi
 800e5ea:	2320      	movmi	r3, #32
 800e5ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5f0:	0711      	lsls	r1, r2, #28
 800e5f2:	bf44      	itt	mi
 800e5f4:	232b      	movmi	r3, #43	; 0x2b
 800e5f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5fa:	f89a 3000 	ldrb.w	r3, [sl]
 800e5fe:	2b2a      	cmp	r3, #42	; 0x2a
 800e600:	d015      	beq.n	800e62e <_svfiprintf_r+0xf6>
 800e602:	9a07      	ldr	r2, [sp, #28]
 800e604:	4654      	mov	r4, sl
 800e606:	2000      	movs	r0, #0
 800e608:	f04f 0c0a 	mov.w	ip, #10
 800e60c:	4621      	mov	r1, r4
 800e60e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e612:	3b30      	subs	r3, #48	; 0x30
 800e614:	2b09      	cmp	r3, #9
 800e616:	d94e      	bls.n	800e6b6 <_svfiprintf_r+0x17e>
 800e618:	b1b0      	cbz	r0, 800e648 <_svfiprintf_r+0x110>
 800e61a:	9207      	str	r2, [sp, #28]
 800e61c:	e014      	b.n	800e648 <_svfiprintf_r+0x110>
 800e61e:	eba0 0308 	sub.w	r3, r0, r8
 800e622:	fa09 f303 	lsl.w	r3, r9, r3
 800e626:	4313      	orrs	r3, r2
 800e628:	9304      	str	r3, [sp, #16]
 800e62a:	46a2      	mov	sl, r4
 800e62c:	e7d2      	b.n	800e5d4 <_svfiprintf_r+0x9c>
 800e62e:	9b03      	ldr	r3, [sp, #12]
 800e630:	1d19      	adds	r1, r3, #4
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	9103      	str	r1, [sp, #12]
 800e636:	2b00      	cmp	r3, #0
 800e638:	bfbb      	ittet	lt
 800e63a:	425b      	neglt	r3, r3
 800e63c:	f042 0202 	orrlt.w	r2, r2, #2
 800e640:	9307      	strge	r3, [sp, #28]
 800e642:	9307      	strlt	r3, [sp, #28]
 800e644:	bfb8      	it	lt
 800e646:	9204      	strlt	r2, [sp, #16]
 800e648:	7823      	ldrb	r3, [r4, #0]
 800e64a:	2b2e      	cmp	r3, #46	; 0x2e
 800e64c:	d10c      	bne.n	800e668 <_svfiprintf_r+0x130>
 800e64e:	7863      	ldrb	r3, [r4, #1]
 800e650:	2b2a      	cmp	r3, #42	; 0x2a
 800e652:	d135      	bne.n	800e6c0 <_svfiprintf_r+0x188>
 800e654:	9b03      	ldr	r3, [sp, #12]
 800e656:	1d1a      	adds	r2, r3, #4
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	9203      	str	r2, [sp, #12]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	bfb8      	it	lt
 800e660:	f04f 33ff 	movlt.w	r3, #4294967295
 800e664:	3402      	adds	r4, #2
 800e666:	9305      	str	r3, [sp, #20]
 800e668:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e734 <_svfiprintf_r+0x1fc>
 800e66c:	7821      	ldrb	r1, [r4, #0]
 800e66e:	2203      	movs	r2, #3
 800e670:	4650      	mov	r0, sl
 800e672:	f7f1 fdc5 	bl	8000200 <memchr>
 800e676:	b140      	cbz	r0, 800e68a <_svfiprintf_r+0x152>
 800e678:	2340      	movs	r3, #64	; 0x40
 800e67a:	eba0 000a 	sub.w	r0, r0, sl
 800e67e:	fa03 f000 	lsl.w	r0, r3, r0
 800e682:	9b04      	ldr	r3, [sp, #16]
 800e684:	4303      	orrs	r3, r0
 800e686:	3401      	adds	r4, #1
 800e688:	9304      	str	r3, [sp, #16]
 800e68a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e68e:	4826      	ldr	r0, [pc, #152]	; (800e728 <_svfiprintf_r+0x1f0>)
 800e690:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e694:	2206      	movs	r2, #6
 800e696:	f7f1 fdb3 	bl	8000200 <memchr>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	d038      	beq.n	800e710 <_svfiprintf_r+0x1d8>
 800e69e:	4b23      	ldr	r3, [pc, #140]	; (800e72c <_svfiprintf_r+0x1f4>)
 800e6a0:	bb1b      	cbnz	r3, 800e6ea <_svfiprintf_r+0x1b2>
 800e6a2:	9b03      	ldr	r3, [sp, #12]
 800e6a4:	3307      	adds	r3, #7
 800e6a6:	f023 0307 	bic.w	r3, r3, #7
 800e6aa:	3308      	adds	r3, #8
 800e6ac:	9303      	str	r3, [sp, #12]
 800e6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6b0:	4433      	add	r3, r6
 800e6b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e6b4:	e767      	b.n	800e586 <_svfiprintf_r+0x4e>
 800e6b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6ba:	460c      	mov	r4, r1
 800e6bc:	2001      	movs	r0, #1
 800e6be:	e7a5      	b.n	800e60c <_svfiprintf_r+0xd4>
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	3401      	adds	r4, #1
 800e6c4:	9305      	str	r3, [sp, #20]
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	f04f 0c0a 	mov.w	ip, #10
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6d2:	3a30      	subs	r2, #48	; 0x30
 800e6d4:	2a09      	cmp	r2, #9
 800e6d6:	d903      	bls.n	800e6e0 <_svfiprintf_r+0x1a8>
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d0c5      	beq.n	800e668 <_svfiprintf_r+0x130>
 800e6dc:	9105      	str	r1, [sp, #20]
 800e6de:	e7c3      	b.n	800e668 <_svfiprintf_r+0x130>
 800e6e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6e4:	4604      	mov	r4, r0
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	e7f0      	b.n	800e6cc <_svfiprintf_r+0x194>
 800e6ea:	ab03      	add	r3, sp, #12
 800e6ec:	9300      	str	r3, [sp, #0]
 800e6ee:	462a      	mov	r2, r5
 800e6f0:	4b0f      	ldr	r3, [pc, #60]	; (800e730 <_svfiprintf_r+0x1f8>)
 800e6f2:	a904      	add	r1, sp, #16
 800e6f4:	4638      	mov	r0, r7
 800e6f6:	f7fb feab 	bl	800a450 <_printf_float>
 800e6fa:	1c42      	adds	r2, r0, #1
 800e6fc:	4606      	mov	r6, r0
 800e6fe:	d1d6      	bne.n	800e6ae <_svfiprintf_r+0x176>
 800e700:	89ab      	ldrh	r3, [r5, #12]
 800e702:	065b      	lsls	r3, r3, #25
 800e704:	f53f af2c 	bmi.w	800e560 <_svfiprintf_r+0x28>
 800e708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e70a:	b01d      	add	sp, #116	; 0x74
 800e70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e710:	ab03      	add	r3, sp, #12
 800e712:	9300      	str	r3, [sp, #0]
 800e714:	462a      	mov	r2, r5
 800e716:	4b06      	ldr	r3, [pc, #24]	; (800e730 <_svfiprintf_r+0x1f8>)
 800e718:	a904      	add	r1, sp, #16
 800e71a:	4638      	mov	r0, r7
 800e71c:	f7fc f93c 	bl	800a998 <_printf_i>
 800e720:	e7eb      	b.n	800e6fa <_svfiprintf_r+0x1c2>
 800e722:	bf00      	nop
 800e724:	0800f3a8 	.word	0x0800f3a8
 800e728:	0800f3b2 	.word	0x0800f3b2
 800e72c:	0800a451 	.word	0x0800a451
 800e730:	0800e481 	.word	0x0800e481
 800e734:	0800f3ae 	.word	0x0800f3ae

0800e738 <_sungetc_r>:
 800e738:	b538      	push	{r3, r4, r5, lr}
 800e73a:	1c4b      	adds	r3, r1, #1
 800e73c:	4614      	mov	r4, r2
 800e73e:	d103      	bne.n	800e748 <_sungetc_r+0x10>
 800e740:	f04f 35ff 	mov.w	r5, #4294967295
 800e744:	4628      	mov	r0, r5
 800e746:	bd38      	pop	{r3, r4, r5, pc}
 800e748:	8993      	ldrh	r3, [r2, #12]
 800e74a:	f023 0320 	bic.w	r3, r3, #32
 800e74e:	8193      	strh	r3, [r2, #12]
 800e750:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e752:	6852      	ldr	r2, [r2, #4]
 800e754:	b2cd      	uxtb	r5, r1
 800e756:	b18b      	cbz	r3, 800e77c <_sungetc_r+0x44>
 800e758:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e75a:	4293      	cmp	r3, r2
 800e75c:	dd08      	ble.n	800e770 <_sungetc_r+0x38>
 800e75e:	6823      	ldr	r3, [r4, #0]
 800e760:	1e5a      	subs	r2, r3, #1
 800e762:	6022      	str	r2, [r4, #0]
 800e764:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e768:	6863      	ldr	r3, [r4, #4]
 800e76a:	3301      	adds	r3, #1
 800e76c:	6063      	str	r3, [r4, #4]
 800e76e:	e7e9      	b.n	800e744 <_sungetc_r+0xc>
 800e770:	4621      	mov	r1, r4
 800e772:	f000 fc6d 	bl	800f050 <__submore>
 800e776:	2800      	cmp	r0, #0
 800e778:	d0f1      	beq.n	800e75e <_sungetc_r+0x26>
 800e77a:	e7e1      	b.n	800e740 <_sungetc_r+0x8>
 800e77c:	6921      	ldr	r1, [r4, #16]
 800e77e:	6823      	ldr	r3, [r4, #0]
 800e780:	b151      	cbz	r1, 800e798 <_sungetc_r+0x60>
 800e782:	4299      	cmp	r1, r3
 800e784:	d208      	bcs.n	800e798 <_sungetc_r+0x60>
 800e786:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e78a:	42a9      	cmp	r1, r5
 800e78c:	d104      	bne.n	800e798 <_sungetc_r+0x60>
 800e78e:	3b01      	subs	r3, #1
 800e790:	3201      	adds	r2, #1
 800e792:	6023      	str	r3, [r4, #0]
 800e794:	6062      	str	r2, [r4, #4]
 800e796:	e7d5      	b.n	800e744 <_sungetc_r+0xc>
 800e798:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e79c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7a0:	6363      	str	r3, [r4, #52]	; 0x34
 800e7a2:	2303      	movs	r3, #3
 800e7a4:	63a3      	str	r3, [r4, #56]	; 0x38
 800e7a6:	4623      	mov	r3, r4
 800e7a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e7ac:	6023      	str	r3, [r4, #0]
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e7dc      	b.n	800e76c <_sungetc_r+0x34>

0800e7b2 <__ssrefill_r>:
 800e7b2:	b510      	push	{r4, lr}
 800e7b4:	460c      	mov	r4, r1
 800e7b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e7b8:	b169      	cbz	r1, 800e7d6 <__ssrefill_r+0x24>
 800e7ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7be:	4299      	cmp	r1, r3
 800e7c0:	d001      	beq.n	800e7c6 <__ssrefill_r+0x14>
 800e7c2:	f7fb fb6b 	bl	8009e9c <_free_r>
 800e7c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e7c8:	6063      	str	r3, [r4, #4]
 800e7ca:	2000      	movs	r0, #0
 800e7cc:	6360      	str	r0, [r4, #52]	; 0x34
 800e7ce:	b113      	cbz	r3, 800e7d6 <__ssrefill_r+0x24>
 800e7d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e7d2:	6023      	str	r3, [r4, #0]
 800e7d4:	bd10      	pop	{r4, pc}
 800e7d6:	6923      	ldr	r3, [r4, #16]
 800e7d8:	6023      	str	r3, [r4, #0]
 800e7da:	2300      	movs	r3, #0
 800e7dc:	6063      	str	r3, [r4, #4]
 800e7de:	89a3      	ldrh	r3, [r4, #12]
 800e7e0:	f043 0320 	orr.w	r3, r3, #32
 800e7e4:	81a3      	strh	r3, [r4, #12]
 800e7e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ea:	e7f3      	b.n	800e7d4 <__ssrefill_r+0x22>

0800e7ec <__ssvfiscanf_r>:
 800e7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7f0:	460c      	mov	r4, r1
 800e7f2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e7f6:	2100      	movs	r1, #0
 800e7f8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e7fc:	49a6      	ldr	r1, [pc, #664]	; (800ea98 <__ssvfiscanf_r+0x2ac>)
 800e7fe:	91a0      	str	r1, [sp, #640]	; 0x280
 800e800:	f10d 0804 	add.w	r8, sp, #4
 800e804:	49a5      	ldr	r1, [pc, #660]	; (800ea9c <__ssvfiscanf_r+0x2b0>)
 800e806:	4fa6      	ldr	r7, [pc, #664]	; (800eaa0 <__ssvfiscanf_r+0x2b4>)
 800e808:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800eaa4 <__ssvfiscanf_r+0x2b8>
 800e80c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e810:	4606      	mov	r6, r0
 800e812:	91a1      	str	r1, [sp, #644]	; 0x284
 800e814:	9300      	str	r3, [sp, #0]
 800e816:	7813      	ldrb	r3, [r2, #0]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	f000 815a 	beq.w	800ead2 <__ssvfiscanf_r+0x2e6>
 800e81e:	5dd9      	ldrb	r1, [r3, r7]
 800e820:	f011 0108 	ands.w	r1, r1, #8
 800e824:	f102 0501 	add.w	r5, r2, #1
 800e828:	d019      	beq.n	800e85e <__ssvfiscanf_r+0x72>
 800e82a:	6863      	ldr	r3, [r4, #4]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	dd0f      	ble.n	800e850 <__ssvfiscanf_r+0x64>
 800e830:	6823      	ldr	r3, [r4, #0]
 800e832:	781a      	ldrb	r2, [r3, #0]
 800e834:	5cba      	ldrb	r2, [r7, r2]
 800e836:	0712      	lsls	r2, r2, #28
 800e838:	d401      	bmi.n	800e83e <__ssvfiscanf_r+0x52>
 800e83a:	462a      	mov	r2, r5
 800e83c:	e7eb      	b.n	800e816 <__ssvfiscanf_r+0x2a>
 800e83e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e840:	3201      	adds	r2, #1
 800e842:	9245      	str	r2, [sp, #276]	; 0x114
 800e844:	6862      	ldr	r2, [r4, #4]
 800e846:	3301      	adds	r3, #1
 800e848:	3a01      	subs	r2, #1
 800e84a:	6062      	str	r2, [r4, #4]
 800e84c:	6023      	str	r3, [r4, #0]
 800e84e:	e7ec      	b.n	800e82a <__ssvfiscanf_r+0x3e>
 800e850:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e852:	4621      	mov	r1, r4
 800e854:	4630      	mov	r0, r6
 800e856:	4798      	blx	r3
 800e858:	2800      	cmp	r0, #0
 800e85a:	d0e9      	beq.n	800e830 <__ssvfiscanf_r+0x44>
 800e85c:	e7ed      	b.n	800e83a <__ssvfiscanf_r+0x4e>
 800e85e:	2b25      	cmp	r3, #37	; 0x25
 800e860:	d012      	beq.n	800e888 <__ssvfiscanf_r+0x9c>
 800e862:	469a      	mov	sl, r3
 800e864:	6863      	ldr	r3, [r4, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	f340 8091 	ble.w	800e98e <__ssvfiscanf_r+0x1a2>
 800e86c:	6822      	ldr	r2, [r4, #0]
 800e86e:	7813      	ldrb	r3, [r2, #0]
 800e870:	4553      	cmp	r3, sl
 800e872:	f040 812e 	bne.w	800ead2 <__ssvfiscanf_r+0x2e6>
 800e876:	6863      	ldr	r3, [r4, #4]
 800e878:	3b01      	subs	r3, #1
 800e87a:	6063      	str	r3, [r4, #4]
 800e87c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e87e:	3201      	adds	r2, #1
 800e880:	3301      	adds	r3, #1
 800e882:	6022      	str	r2, [r4, #0]
 800e884:	9345      	str	r3, [sp, #276]	; 0x114
 800e886:	e7d8      	b.n	800e83a <__ssvfiscanf_r+0x4e>
 800e888:	9141      	str	r1, [sp, #260]	; 0x104
 800e88a:	9143      	str	r1, [sp, #268]	; 0x10c
 800e88c:	7853      	ldrb	r3, [r2, #1]
 800e88e:	2b2a      	cmp	r3, #42	; 0x2a
 800e890:	bf02      	ittt	eq
 800e892:	2310      	moveq	r3, #16
 800e894:	1c95      	addeq	r5, r2, #2
 800e896:	9341      	streq	r3, [sp, #260]	; 0x104
 800e898:	220a      	movs	r2, #10
 800e89a:	46aa      	mov	sl, r5
 800e89c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e8a0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e8a4:	2b09      	cmp	r3, #9
 800e8a6:	d91d      	bls.n	800e8e4 <__ssvfiscanf_r+0xf8>
 800e8a8:	487e      	ldr	r0, [pc, #504]	; (800eaa4 <__ssvfiscanf_r+0x2b8>)
 800e8aa:	2203      	movs	r2, #3
 800e8ac:	f7f1 fca8 	bl	8000200 <memchr>
 800e8b0:	b140      	cbz	r0, 800e8c4 <__ssvfiscanf_r+0xd8>
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	eba0 0009 	sub.w	r0, r0, r9
 800e8b8:	fa03 f000 	lsl.w	r0, r3, r0
 800e8bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e8be:	4318      	orrs	r0, r3
 800e8c0:	9041      	str	r0, [sp, #260]	; 0x104
 800e8c2:	4655      	mov	r5, sl
 800e8c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e8c8:	2b78      	cmp	r3, #120	; 0x78
 800e8ca:	d806      	bhi.n	800e8da <__ssvfiscanf_r+0xee>
 800e8cc:	2b57      	cmp	r3, #87	; 0x57
 800e8ce:	d810      	bhi.n	800e8f2 <__ssvfiscanf_r+0x106>
 800e8d0:	2b25      	cmp	r3, #37	; 0x25
 800e8d2:	d0c6      	beq.n	800e862 <__ssvfiscanf_r+0x76>
 800e8d4:	d856      	bhi.n	800e984 <__ssvfiscanf_r+0x198>
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d064      	beq.n	800e9a4 <__ssvfiscanf_r+0x1b8>
 800e8da:	2303      	movs	r3, #3
 800e8dc:	9347      	str	r3, [sp, #284]	; 0x11c
 800e8de:	230a      	movs	r3, #10
 800e8e0:	9342      	str	r3, [sp, #264]	; 0x108
 800e8e2:	e071      	b.n	800e9c8 <__ssvfiscanf_r+0x1dc>
 800e8e4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e8e6:	fb02 1103 	mla	r1, r2, r3, r1
 800e8ea:	3930      	subs	r1, #48	; 0x30
 800e8ec:	9143      	str	r1, [sp, #268]	; 0x10c
 800e8ee:	4655      	mov	r5, sl
 800e8f0:	e7d3      	b.n	800e89a <__ssvfiscanf_r+0xae>
 800e8f2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e8f6:	2a20      	cmp	r2, #32
 800e8f8:	d8ef      	bhi.n	800e8da <__ssvfiscanf_r+0xee>
 800e8fa:	a101      	add	r1, pc, #4	; (adr r1, 800e900 <__ssvfiscanf_r+0x114>)
 800e8fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e900:	0800e9b3 	.word	0x0800e9b3
 800e904:	0800e8db 	.word	0x0800e8db
 800e908:	0800e8db 	.word	0x0800e8db
 800e90c:	0800ea11 	.word	0x0800ea11
 800e910:	0800e8db 	.word	0x0800e8db
 800e914:	0800e8db 	.word	0x0800e8db
 800e918:	0800e8db 	.word	0x0800e8db
 800e91c:	0800e8db 	.word	0x0800e8db
 800e920:	0800e8db 	.word	0x0800e8db
 800e924:	0800e8db 	.word	0x0800e8db
 800e928:	0800e8db 	.word	0x0800e8db
 800e92c:	0800ea27 	.word	0x0800ea27
 800e930:	0800e9fd 	.word	0x0800e9fd
 800e934:	0800e98b 	.word	0x0800e98b
 800e938:	0800e98b 	.word	0x0800e98b
 800e93c:	0800e98b 	.word	0x0800e98b
 800e940:	0800e8db 	.word	0x0800e8db
 800e944:	0800ea01 	.word	0x0800ea01
 800e948:	0800e8db 	.word	0x0800e8db
 800e94c:	0800e8db 	.word	0x0800e8db
 800e950:	0800e8db 	.word	0x0800e8db
 800e954:	0800e8db 	.word	0x0800e8db
 800e958:	0800ea37 	.word	0x0800ea37
 800e95c:	0800ea09 	.word	0x0800ea09
 800e960:	0800e9ab 	.word	0x0800e9ab
 800e964:	0800e8db 	.word	0x0800e8db
 800e968:	0800e8db 	.word	0x0800e8db
 800e96c:	0800ea33 	.word	0x0800ea33
 800e970:	0800e8db 	.word	0x0800e8db
 800e974:	0800e9fd 	.word	0x0800e9fd
 800e978:	0800e8db 	.word	0x0800e8db
 800e97c:	0800e8db 	.word	0x0800e8db
 800e980:	0800e9b3 	.word	0x0800e9b3
 800e984:	3b45      	subs	r3, #69	; 0x45
 800e986:	2b02      	cmp	r3, #2
 800e988:	d8a7      	bhi.n	800e8da <__ssvfiscanf_r+0xee>
 800e98a:	2305      	movs	r3, #5
 800e98c:	e01b      	b.n	800e9c6 <__ssvfiscanf_r+0x1da>
 800e98e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e990:	4621      	mov	r1, r4
 800e992:	4630      	mov	r0, r6
 800e994:	4798      	blx	r3
 800e996:	2800      	cmp	r0, #0
 800e998:	f43f af68 	beq.w	800e86c <__ssvfiscanf_r+0x80>
 800e99c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	f040 808d 	bne.w	800eabe <__ssvfiscanf_r+0x2d2>
 800e9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a8:	e08f      	b.n	800eaca <__ssvfiscanf_r+0x2de>
 800e9aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e9ac:	f042 0220 	orr.w	r2, r2, #32
 800e9b0:	9241      	str	r2, [sp, #260]	; 0x104
 800e9b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e9b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e9b8:	9241      	str	r2, [sp, #260]	; 0x104
 800e9ba:	2210      	movs	r2, #16
 800e9bc:	2b6f      	cmp	r3, #111	; 0x6f
 800e9be:	9242      	str	r2, [sp, #264]	; 0x108
 800e9c0:	bf34      	ite	cc
 800e9c2:	2303      	movcc	r3, #3
 800e9c4:	2304      	movcs	r3, #4
 800e9c6:	9347      	str	r3, [sp, #284]	; 0x11c
 800e9c8:	6863      	ldr	r3, [r4, #4]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	dd42      	ble.n	800ea54 <__ssvfiscanf_r+0x268>
 800e9ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e9d0:	0659      	lsls	r1, r3, #25
 800e9d2:	d404      	bmi.n	800e9de <__ssvfiscanf_r+0x1f2>
 800e9d4:	6823      	ldr	r3, [r4, #0]
 800e9d6:	781a      	ldrb	r2, [r3, #0]
 800e9d8:	5cba      	ldrb	r2, [r7, r2]
 800e9da:	0712      	lsls	r2, r2, #28
 800e9dc:	d441      	bmi.n	800ea62 <__ssvfiscanf_r+0x276>
 800e9de:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e9e0:	2b02      	cmp	r3, #2
 800e9e2:	dc50      	bgt.n	800ea86 <__ssvfiscanf_r+0x29a>
 800e9e4:	466b      	mov	r3, sp
 800e9e6:	4622      	mov	r2, r4
 800e9e8:	a941      	add	r1, sp, #260	; 0x104
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	f000 f876 	bl	800eadc <_scanf_chars>
 800e9f0:	2801      	cmp	r0, #1
 800e9f2:	d06e      	beq.n	800ead2 <__ssvfiscanf_r+0x2e6>
 800e9f4:	2802      	cmp	r0, #2
 800e9f6:	f47f af20 	bne.w	800e83a <__ssvfiscanf_r+0x4e>
 800e9fa:	e7cf      	b.n	800e99c <__ssvfiscanf_r+0x1b0>
 800e9fc:	220a      	movs	r2, #10
 800e9fe:	e7dd      	b.n	800e9bc <__ssvfiscanf_r+0x1d0>
 800ea00:	2300      	movs	r3, #0
 800ea02:	9342      	str	r3, [sp, #264]	; 0x108
 800ea04:	2303      	movs	r3, #3
 800ea06:	e7de      	b.n	800e9c6 <__ssvfiscanf_r+0x1da>
 800ea08:	2308      	movs	r3, #8
 800ea0a:	9342      	str	r3, [sp, #264]	; 0x108
 800ea0c:	2304      	movs	r3, #4
 800ea0e:	e7da      	b.n	800e9c6 <__ssvfiscanf_r+0x1da>
 800ea10:	4629      	mov	r1, r5
 800ea12:	4640      	mov	r0, r8
 800ea14:	f000 fa18 	bl	800ee48 <__sccl>
 800ea18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ea1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea1e:	9341      	str	r3, [sp, #260]	; 0x104
 800ea20:	4605      	mov	r5, r0
 800ea22:	2301      	movs	r3, #1
 800ea24:	e7cf      	b.n	800e9c6 <__ssvfiscanf_r+0x1da>
 800ea26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ea28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea2c:	9341      	str	r3, [sp, #260]	; 0x104
 800ea2e:	2300      	movs	r3, #0
 800ea30:	e7c9      	b.n	800e9c6 <__ssvfiscanf_r+0x1da>
 800ea32:	2302      	movs	r3, #2
 800ea34:	e7c7      	b.n	800e9c6 <__ssvfiscanf_r+0x1da>
 800ea36:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ea38:	06c3      	lsls	r3, r0, #27
 800ea3a:	f53f aefe 	bmi.w	800e83a <__ssvfiscanf_r+0x4e>
 800ea3e:	9b00      	ldr	r3, [sp, #0]
 800ea40:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ea42:	1d19      	adds	r1, r3, #4
 800ea44:	9100      	str	r1, [sp, #0]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f010 0f01 	tst.w	r0, #1
 800ea4c:	bf14      	ite	ne
 800ea4e:	801a      	strhne	r2, [r3, #0]
 800ea50:	601a      	streq	r2, [r3, #0]
 800ea52:	e6f2      	b.n	800e83a <__ssvfiscanf_r+0x4e>
 800ea54:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ea56:	4621      	mov	r1, r4
 800ea58:	4630      	mov	r0, r6
 800ea5a:	4798      	blx	r3
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d0b6      	beq.n	800e9ce <__ssvfiscanf_r+0x1e2>
 800ea60:	e79c      	b.n	800e99c <__ssvfiscanf_r+0x1b0>
 800ea62:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ea64:	3201      	adds	r2, #1
 800ea66:	9245      	str	r2, [sp, #276]	; 0x114
 800ea68:	6862      	ldr	r2, [r4, #4]
 800ea6a:	3a01      	subs	r2, #1
 800ea6c:	2a00      	cmp	r2, #0
 800ea6e:	6062      	str	r2, [r4, #4]
 800ea70:	dd02      	ble.n	800ea78 <__ssvfiscanf_r+0x28c>
 800ea72:	3301      	adds	r3, #1
 800ea74:	6023      	str	r3, [r4, #0]
 800ea76:	e7ad      	b.n	800e9d4 <__ssvfiscanf_r+0x1e8>
 800ea78:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ea7a:	4621      	mov	r1, r4
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	4798      	blx	r3
 800ea80:	2800      	cmp	r0, #0
 800ea82:	d0a7      	beq.n	800e9d4 <__ssvfiscanf_r+0x1e8>
 800ea84:	e78a      	b.n	800e99c <__ssvfiscanf_r+0x1b0>
 800ea86:	2b04      	cmp	r3, #4
 800ea88:	dc0e      	bgt.n	800eaa8 <__ssvfiscanf_r+0x2bc>
 800ea8a:	466b      	mov	r3, sp
 800ea8c:	4622      	mov	r2, r4
 800ea8e:	a941      	add	r1, sp, #260	; 0x104
 800ea90:	4630      	mov	r0, r6
 800ea92:	f000 f87d 	bl	800eb90 <_scanf_i>
 800ea96:	e7ab      	b.n	800e9f0 <__ssvfiscanf_r+0x204>
 800ea98:	0800e739 	.word	0x0800e739
 800ea9c:	0800e7b3 	.word	0x0800e7b3
 800eaa0:	0800f4b5 	.word	0x0800f4b5
 800eaa4:	0800f3ae 	.word	0x0800f3ae
 800eaa8:	4b0b      	ldr	r3, [pc, #44]	; (800ead8 <__ssvfiscanf_r+0x2ec>)
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	f43f aec5 	beq.w	800e83a <__ssvfiscanf_r+0x4e>
 800eab0:	466b      	mov	r3, sp
 800eab2:	4622      	mov	r2, r4
 800eab4:	a941      	add	r1, sp, #260	; 0x104
 800eab6:	4630      	mov	r0, r6
 800eab8:	f7fc f894 	bl	800abe4 <_scanf_float>
 800eabc:	e798      	b.n	800e9f0 <__ssvfiscanf_r+0x204>
 800eabe:	89a3      	ldrh	r3, [r4, #12]
 800eac0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800eac4:	bf18      	it	ne
 800eac6:	f04f 30ff 	movne.w	r0, #4294967295
 800eaca:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800eace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ead2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ead4:	e7f9      	b.n	800eaca <__ssvfiscanf_r+0x2de>
 800ead6:	bf00      	nop
 800ead8:	0800abe5 	.word	0x0800abe5

0800eadc <_scanf_chars>:
 800eadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eae0:	4615      	mov	r5, r2
 800eae2:	688a      	ldr	r2, [r1, #8]
 800eae4:	4680      	mov	r8, r0
 800eae6:	460c      	mov	r4, r1
 800eae8:	b932      	cbnz	r2, 800eaf8 <_scanf_chars+0x1c>
 800eaea:	698a      	ldr	r2, [r1, #24]
 800eaec:	2a00      	cmp	r2, #0
 800eaee:	bf0c      	ite	eq
 800eaf0:	2201      	moveq	r2, #1
 800eaf2:	f04f 32ff 	movne.w	r2, #4294967295
 800eaf6:	608a      	str	r2, [r1, #8]
 800eaf8:	6822      	ldr	r2, [r4, #0]
 800eafa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800eb8c <_scanf_chars+0xb0>
 800eafe:	06d1      	lsls	r1, r2, #27
 800eb00:	bf5f      	itttt	pl
 800eb02:	681a      	ldrpl	r2, [r3, #0]
 800eb04:	1d11      	addpl	r1, r2, #4
 800eb06:	6019      	strpl	r1, [r3, #0]
 800eb08:	6816      	ldrpl	r6, [r2, #0]
 800eb0a:	2700      	movs	r7, #0
 800eb0c:	69a0      	ldr	r0, [r4, #24]
 800eb0e:	b188      	cbz	r0, 800eb34 <_scanf_chars+0x58>
 800eb10:	2801      	cmp	r0, #1
 800eb12:	d107      	bne.n	800eb24 <_scanf_chars+0x48>
 800eb14:	682a      	ldr	r2, [r5, #0]
 800eb16:	7811      	ldrb	r1, [r2, #0]
 800eb18:	6962      	ldr	r2, [r4, #20]
 800eb1a:	5c52      	ldrb	r2, [r2, r1]
 800eb1c:	b952      	cbnz	r2, 800eb34 <_scanf_chars+0x58>
 800eb1e:	2f00      	cmp	r7, #0
 800eb20:	d031      	beq.n	800eb86 <_scanf_chars+0xaa>
 800eb22:	e022      	b.n	800eb6a <_scanf_chars+0x8e>
 800eb24:	2802      	cmp	r0, #2
 800eb26:	d120      	bne.n	800eb6a <_scanf_chars+0x8e>
 800eb28:	682b      	ldr	r3, [r5, #0]
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800eb30:	071b      	lsls	r3, r3, #28
 800eb32:	d41a      	bmi.n	800eb6a <_scanf_chars+0x8e>
 800eb34:	6823      	ldr	r3, [r4, #0]
 800eb36:	06da      	lsls	r2, r3, #27
 800eb38:	bf5e      	ittt	pl
 800eb3a:	682b      	ldrpl	r3, [r5, #0]
 800eb3c:	781b      	ldrbpl	r3, [r3, #0]
 800eb3e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800eb42:	682a      	ldr	r2, [r5, #0]
 800eb44:	686b      	ldr	r3, [r5, #4]
 800eb46:	3201      	adds	r2, #1
 800eb48:	602a      	str	r2, [r5, #0]
 800eb4a:	68a2      	ldr	r2, [r4, #8]
 800eb4c:	3b01      	subs	r3, #1
 800eb4e:	3a01      	subs	r2, #1
 800eb50:	606b      	str	r3, [r5, #4]
 800eb52:	3701      	adds	r7, #1
 800eb54:	60a2      	str	r2, [r4, #8]
 800eb56:	b142      	cbz	r2, 800eb6a <_scanf_chars+0x8e>
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	dcd7      	bgt.n	800eb0c <_scanf_chars+0x30>
 800eb5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800eb60:	4629      	mov	r1, r5
 800eb62:	4640      	mov	r0, r8
 800eb64:	4798      	blx	r3
 800eb66:	2800      	cmp	r0, #0
 800eb68:	d0d0      	beq.n	800eb0c <_scanf_chars+0x30>
 800eb6a:	6823      	ldr	r3, [r4, #0]
 800eb6c:	f013 0310 	ands.w	r3, r3, #16
 800eb70:	d105      	bne.n	800eb7e <_scanf_chars+0xa2>
 800eb72:	68e2      	ldr	r2, [r4, #12]
 800eb74:	3201      	adds	r2, #1
 800eb76:	60e2      	str	r2, [r4, #12]
 800eb78:	69a2      	ldr	r2, [r4, #24]
 800eb7a:	b102      	cbz	r2, 800eb7e <_scanf_chars+0xa2>
 800eb7c:	7033      	strb	r3, [r6, #0]
 800eb7e:	6923      	ldr	r3, [r4, #16]
 800eb80:	443b      	add	r3, r7
 800eb82:	6123      	str	r3, [r4, #16]
 800eb84:	2000      	movs	r0, #0
 800eb86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb8a:	bf00      	nop
 800eb8c:	0800f4b5 	.word	0x0800f4b5

0800eb90 <_scanf_i>:
 800eb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb94:	4698      	mov	r8, r3
 800eb96:	4b76      	ldr	r3, [pc, #472]	; (800ed70 <_scanf_i+0x1e0>)
 800eb98:	460c      	mov	r4, r1
 800eb9a:	4682      	mov	sl, r0
 800eb9c:	4616      	mov	r6, r2
 800eb9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eba2:	b087      	sub	sp, #28
 800eba4:	ab03      	add	r3, sp, #12
 800eba6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ebaa:	4b72      	ldr	r3, [pc, #456]	; (800ed74 <_scanf_i+0x1e4>)
 800ebac:	69a1      	ldr	r1, [r4, #24]
 800ebae:	4a72      	ldr	r2, [pc, #456]	; (800ed78 <_scanf_i+0x1e8>)
 800ebb0:	2903      	cmp	r1, #3
 800ebb2:	bf18      	it	ne
 800ebb4:	461a      	movne	r2, r3
 800ebb6:	68a3      	ldr	r3, [r4, #8]
 800ebb8:	9201      	str	r2, [sp, #4]
 800ebba:	1e5a      	subs	r2, r3, #1
 800ebbc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ebc0:	bf88      	it	hi
 800ebc2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ebc6:	4627      	mov	r7, r4
 800ebc8:	bf82      	ittt	hi
 800ebca:	eb03 0905 	addhi.w	r9, r3, r5
 800ebce:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ebd2:	60a3      	strhi	r3, [r4, #8]
 800ebd4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ebd8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ebdc:	bf98      	it	ls
 800ebde:	f04f 0900 	movls.w	r9, #0
 800ebe2:	6023      	str	r3, [r4, #0]
 800ebe4:	463d      	mov	r5, r7
 800ebe6:	f04f 0b00 	mov.w	fp, #0
 800ebea:	6831      	ldr	r1, [r6, #0]
 800ebec:	ab03      	add	r3, sp, #12
 800ebee:	7809      	ldrb	r1, [r1, #0]
 800ebf0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ebf4:	2202      	movs	r2, #2
 800ebf6:	f7f1 fb03 	bl	8000200 <memchr>
 800ebfa:	b328      	cbz	r0, 800ec48 <_scanf_i+0xb8>
 800ebfc:	f1bb 0f01 	cmp.w	fp, #1
 800ec00:	d159      	bne.n	800ecb6 <_scanf_i+0x126>
 800ec02:	6862      	ldr	r2, [r4, #4]
 800ec04:	b92a      	cbnz	r2, 800ec12 <_scanf_i+0x82>
 800ec06:	6822      	ldr	r2, [r4, #0]
 800ec08:	2308      	movs	r3, #8
 800ec0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec0e:	6063      	str	r3, [r4, #4]
 800ec10:	6022      	str	r2, [r4, #0]
 800ec12:	6822      	ldr	r2, [r4, #0]
 800ec14:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ec18:	6022      	str	r2, [r4, #0]
 800ec1a:	68a2      	ldr	r2, [r4, #8]
 800ec1c:	1e51      	subs	r1, r2, #1
 800ec1e:	60a1      	str	r1, [r4, #8]
 800ec20:	b192      	cbz	r2, 800ec48 <_scanf_i+0xb8>
 800ec22:	6832      	ldr	r2, [r6, #0]
 800ec24:	1c51      	adds	r1, r2, #1
 800ec26:	6031      	str	r1, [r6, #0]
 800ec28:	7812      	ldrb	r2, [r2, #0]
 800ec2a:	f805 2b01 	strb.w	r2, [r5], #1
 800ec2e:	6872      	ldr	r2, [r6, #4]
 800ec30:	3a01      	subs	r2, #1
 800ec32:	2a00      	cmp	r2, #0
 800ec34:	6072      	str	r2, [r6, #4]
 800ec36:	dc07      	bgt.n	800ec48 <_scanf_i+0xb8>
 800ec38:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ec3c:	4631      	mov	r1, r6
 800ec3e:	4650      	mov	r0, sl
 800ec40:	4790      	blx	r2
 800ec42:	2800      	cmp	r0, #0
 800ec44:	f040 8085 	bne.w	800ed52 <_scanf_i+0x1c2>
 800ec48:	f10b 0b01 	add.w	fp, fp, #1
 800ec4c:	f1bb 0f03 	cmp.w	fp, #3
 800ec50:	d1cb      	bne.n	800ebea <_scanf_i+0x5a>
 800ec52:	6863      	ldr	r3, [r4, #4]
 800ec54:	b90b      	cbnz	r3, 800ec5a <_scanf_i+0xca>
 800ec56:	230a      	movs	r3, #10
 800ec58:	6063      	str	r3, [r4, #4]
 800ec5a:	6863      	ldr	r3, [r4, #4]
 800ec5c:	4947      	ldr	r1, [pc, #284]	; (800ed7c <_scanf_i+0x1ec>)
 800ec5e:	6960      	ldr	r0, [r4, #20]
 800ec60:	1ac9      	subs	r1, r1, r3
 800ec62:	f000 f8f1 	bl	800ee48 <__sccl>
 800ec66:	f04f 0b00 	mov.w	fp, #0
 800ec6a:	68a3      	ldr	r3, [r4, #8]
 800ec6c:	6822      	ldr	r2, [r4, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d03d      	beq.n	800ecee <_scanf_i+0x15e>
 800ec72:	6831      	ldr	r1, [r6, #0]
 800ec74:	6960      	ldr	r0, [r4, #20]
 800ec76:	f891 c000 	ldrb.w	ip, [r1]
 800ec7a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	d035      	beq.n	800ecee <_scanf_i+0x15e>
 800ec82:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ec86:	d124      	bne.n	800ecd2 <_scanf_i+0x142>
 800ec88:	0510      	lsls	r0, r2, #20
 800ec8a:	d522      	bpl.n	800ecd2 <_scanf_i+0x142>
 800ec8c:	f10b 0b01 	add.w	fp, fp, #1
 800ec90:	f1b9 0f00 	cmp.w	r9, #0
 800ec94:	d003      	beq.n	800ec9e <_scanf_i+0x10e>
 800ec96:	3301      	adds	r3, #1
 800ec98:	f109 39ff 	add.w	r9, r9, #4294967295
 800ec9c:	60a3      	str	r3, [r4, #8]
 800ec9e:	6873      	ldr	r3, [r6, #4]
 800eca0:	3b01      	subs	r3, #1
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	6073      	str	r3, [r6, #4]
 800eca6:	dd1b      	ble.n	800ece0 <_scanf_i+0x150>
 800eca8:	6833      	ldr	r3, [r6, #0]
 800ecaa:	3301      	adds	r3, #1
 800ecac:	6033      	str	r3, [r6, #0]
 800ecae:	68a3      	ldr	r3, [r4, #8]
 800ecb0:	3b01      	subs	r3, #1
 800ecb2:	60a3      	str	r3, [r4, #8]
 800ecb4:	e7d9      	b.n	800ec6a <_scanf_i+0xda>
 800ecb6:	f1bb 0f02 	cmp.w	fp, #2
 800ecba:	d1ae      	bne.n	800ec1a <_scanf_i+0x8a>
 800ecbc:	6822      	ldr	r2, [r4, #0]
 800ecbe:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ecc2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ecc6:	d1bf      	bne.n	800ec48 <_scanf_i+0xb8>
 800ecc8:	2310      	movs	r3, #16
 800ecca:	6063      	str	r3, [r4, #4]
 800eccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ecd0:	e7a2      	b.n	800ec18 <_scanf_i+0x88>
 800ecd2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ecd6:	6022      	str	r2, [r4, #0]
 800ecd8:	780b      	ldrb	r3, [r1, #0]
 800ecda:	f805 3b01 	strb.w	r3, [r5], #1
 800ecde:	e7de      	b.n	800ec9e <_scanf_i+0x10e>
 800ece0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ece4:	4631      	mov	r1, r6
 800ece6:	4650      	mov	r0, sl
 800ece8:	4798      	blx	r3
 800ecea:	2800      	cmp	r0, #0
 800ecec:	d0df      	beq.n	800ecae <_scanf_i+0x11e>
 800ecee:	6823      	ldr	r3, [r4, #0]
 800ecf0:	05db      	lsls	r3, r3, #23
 800ecf2:	d50d      	bpl.n	800ed10 <_scanf_i+0x180>
 800ecf4:	42bd      	cmp	r5, r7
 800ecf6:	d909      	bls.n	800ed0c <_scanf_i+0x17c>
 800ecf8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ecfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ed00:	4632      	mov	r2, r6
 800ed02:	4650      	mov	r0, sl
 800ed04:	4798      	blx	r3
 800ed06:	f105 39ff 	add.w	r9, r5, #4294967295
 800ed0a:	464d      	mov	r5, r9
 800ed0c:	42bd      	cmp	r5, r7
 800ed0e:	d02d      	beq.n	800ed6c <_scanf_i+0x1dc>
 800ed10:	6822      	ldr	r2, [r4, #0]
 800ed12:	f012 0210 	ands.w	r2, r2, #16
 800ed16:	d113      	bne.n	800ed40 <_scanf_i+0x1b0>
 800ed18:	702a      	strb	r2, [r5, #0]
 800ed1a:	6863      	ldr	r3, [r4, #4]
 800ed1c:	9e01      	ldr	r6, [sp, #4]
 800ed1e:	4639      	mov	r1, r7
 800ed20:	4650      	mov	r0, sl
 800ed22:	47b0      	blx	r6
 800ed24:	6821      	ldr	r1, [r4, #0]
 800ed26:	f8d8 3000 	ldr.w	r3, [r8]
 800ed2a:	f011 0f20 	tst.w	r1, #32
 800ed2e:	d013      	beq.n	800ed58 <_scanf_i+0x1c8>
 800ed30:	1d1a      	adds	r2, r3, #4
 800ed32:	f8c8 2000 	str.w	r2, [r8]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	6018      	str	r0, [r3, #0]
 800ed3a:	68e3      	ldr	r3, [r4, #12]
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	60e3      	str	r3, [r4, #12]
 800ed40:	1bed      	subs	r5, r5, r7
 800ed42:	44ab      	add	fp, r5
 800ed44:	6925      	ldr	r5, [r4, #16]
 800ed46:	445d      	add	r5, fp
 800ed48:	6125      	str	r5, [r4, #16]
 800ed4a:	2000      	movs	r0, #0
 800ed4c:	b007      	add	sp, #28
 800ed4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed52:	f04f 0b00 	mov.w	fp, #0
 800ed56:	e7ca      	b.n	800ecee <_scanf_i+0x15e>
 800ed58:	1d1a      	adds	r2, r3, #4
 800ed5a:	f8c8 2000 	str.w	r2, [r8]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f011 0f01 	tst.w	r1, #1
 800ed64:	bf14      	ite	ne
 800ed66:	8018      	strhne	r0, [r3, #0]
 800ed68:	6018      	streq	r0, [r3, #0]
 800ed6a:	e7e6      	b.n	800ed3a <_scanf_i+0x1aa>
 800ed6c:	2001      	movs	r0, #1
 800ed6e:	e7ed      	b.n	800ed4c <_scanf_i+0x1bc>
 800ed70:	0800f330 	.word	0x0800f330
 800ed74:	0800f04d 	.word	0x0800f04d
 800ed78:	0800bfcd 	.word	0x0800bfcd
 800ed7c:	0800f87d 	.word	0x0800f87d

0800ed80 <_putc_r>:
 800ed80:	b570      	push	{r4, r5, r6, lr}
 800ed82:	460d      	mov	r5, r1
 800ed84:	4614      	mov	r4, r2
 800ed86:	4606      	mov	r6, r0
 800ed88:	b118      	cbz	r0, 800ed92 <_putc_r+0x12>
 800ed8a:	6983      	ldr	r3, [r0, #24]
 800ed8c:	b90b      	cbnz	r3, 800ed92 <_putc_r+0x12>
 800ed8e:	f7fe f99f 	bl	800d0d0 <__sinit>
 800ed92:	4b1c      	ldr	r3, [pc, #112]	; (800ee04 <_putc_r+0x84>)
 800ed94:	429c      	cmp	r4, r3
 800ed96:	d124      	bne.n	800ede2 <_putc_r+0x62>
 800ed98:	6874      	ldr	r4, [r6, #4]
 800ed9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed9c:	07d8      	lsls	r0, r3, #31
 800ed9e:	d405      	bmi.n	800edac <_putc_r+0x2c>
 800eda0:	89a3      	ldrh	r3, [r4, #12]
 800eda2:	0599      	lsls	r1, r3, #22
 800eda4:	d402      	bmi.n	800edac <_putc_r+0x2c>
 800eda6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eda8:	f7fe fda3 	bl	800d8f2 <__retarget_lock_acquire_recursive>
 800edac:	68a3      	ldr	r3, [r4, #8]
 800edae:	3b01      	subs	r3, #1
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	60a3      	str	r3, [r4, #8]
 800edb4:	da05      	bge.n	800edc2 <_putc_r+0x42>
 800edb6:	69a2      	ldr	r2, [r4, #24]
 800edb8:	4293      	cmp	r3, r2
 800edba:	db1c      	blt.n	800edf6 <_putc_r+0x76>
 800edbc:	b2eb      	uxtb	r3, r5
 800edbe:	2b0a      	cmp	r3, #10
 800edc0:	d019      	beq.n	800edf6 <_putc_r+0x76>
 800edc2:	6823      	ldr	r3, [r4, #0]
 800edc4:	1c5a      	adds	r2, r3, #1
 800edc6:	6022      	str	r2, [r4, #0]
 800edc8:	701d      	strb	r5, [r3, #0]
 800edca:	b2ed      	uxtb	r5, r5
 800edcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800edce:	07da      	lsls	r2, r3, #31
 800edd0:	d405      	bmi.n	800edde <_putc_r+0x5e>
 800edd2:	89a3      	ldrh	r3, [r4, #12]
 800edd4:	059b      	lsls	r3, r3, #22
 800edd6:	d402      	bmi.n	800edde <_putc_r+0x5e>
 800edd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edda:	f7fe fd8b 	bl	800d8f4 <__retarget_lock_release_recursive>
 800edde:	4628      	mov	r0, r5
 800ede0:	bd70      	pop	{r4, r5, r6, pc}
 800ede2:	4b09      	ldr	r3, [pc, #36]	; (800ee08 <_putc_r+0x88>)
 800ede4:	429c      	cmp	r4, r3
 800ede6:	d101      	bne.n	800edec <_putc_r+0x6c>
 800ede8:	68b4      	ldr	r4, [r6, #8]
 800edea:	e7d6      	b.n	800ed9a <_putc_r+0x1a>
 800edec:	4b07      	ldr	r3, [pc, #28]	; (800ee0c <_putc_r+0x8c>)
 800edee:	429c      	cmp	r4, r3
 800edf0:	bf08      	it	eq
 800edf2:	68f4      	ldreq	r4, [r6, #12]
 800edf4:	e7d1      	b.n	800ed9a <_putc_r+0x1a>
 800edf6:	4629      	mov	r1, r5
 800edf8:	4622      	mov	r2, r4
 800edfa:	4630      	mov	r0, r6
 800edfc:	f7fd f8e8 	bl	800bfd0 <__swbuf_r>
 800ee00:	4605      	mov	r5, r0
 800ee02:	e7e3      	b.n	800edcc <_putc_r+0x4c>
 800ee04:	0800f650 	.word	0x0800f650
 800ee08:	0800f670 	.word	0x0800f670
 800ee0c:	0800f630 	.word	0x0800f630

0800ee10 <_read_r>:
 800ee10:	b538      	push	{r3, r4, r5, lr}
 800ee12:	4d07      	ldr	r5, [pc, #28]	; (800ee30 <_read_r+0x20>)
 800ee14:	4604      	mov	r4, r0
 800ee16:	4608      	mov	r0, r1
 800ee18:	4611      	mov	r1, r2
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	602a      	str	r2, [r5, #0]
 800ee1e:	461a      	mov	r2, r3
 800ee20:	f7f6 f988 	bl	8005134 <_read>
 800ee24:	1c43      	adds	r3, r0, #1
 800ee26:	d102      	bne.n	800ee2e <_read_r+0x1e>
 800ee28:	682b      	ldr	r3, [r5, #0]
 800ee2a:	b103      	cbz	r3, 800ee2e <_read_r+0x1e>
 800ee2c:	6023      	str	r3, [r4, #0]
 800ee2e:	bd38      	pop	{r3, r4, r5, pc}
 800ee30:	20001c8c 	.word	0x20001c8c
 800ee34:	00000000 	.word	0x00000000

0800ee38 <nan>:
 800ee38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ee40 <nan+0x8>
 800ee3c:	4770      	bx	lr
 800ee3e:	bf00      	nop
 800ee40:	00000000 	.word	0x00000000
 800ee44:	7ff80000 	.word	0x7ff80000

0800ee48 <__sccl>:
 800ee48:	b570      	push	{r4, r5, r6, lr}
 800ee4a:	780b      	ldrb	r3, [r1, #0]
 800ee4c:	4604      	mov	r4, r0
 800ee4e:	2b5e      	cmp	r3, #94	; 0x5e
 800ee50:	bf0b      	itete	eq
 800ee52:	784b      	ldrbeq	r3, [r1, #1]
 800ee54:	1c48      	addne	r0, r1, #1
 800ee56:	1c88      	addeq	r0, r1, #2
 800ee58:	2200      	movne	r2, #0
 800ee5a:	bf08      	it	eq
 800ee5c:	2201      	moveq	r2, #1
 800ee5e:	1e61      	subs	r1, r4, #1
 800ee60:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ee64:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ee68:	42a9      	cmp	r1, r5
 800ee6a:	d1fb      	bne.n	800ee64 <__sccl+0x1c>
 800ee6c:	b90b      	cbnz	r3, 800ee72 <__sccl+0x2a>
 800ee6e:	3801      	subs	r0, #1
 800ee70:	bd70      	pop	{r4, r5, r6, pc}
 800ee72:	f082 0201 	eor.w	r2, r2, #1
 800ee76:	54e2      	strb	r2, [r4, r3]
 800ee78:	4605      	mov	r5, r0
 800ee7a:	4628      	mov	r0, r5
 800ee7c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ee80:	292d      	cmp	r1, #45	; 0x2d
 800ee82:	d006      	beq.n	800ee92 <__sccl+0x4a>
 800ee84:	295d      	cmp	r1, #93	; 0x5d
 800ee86:	d0f3      	beq.n	800ee70 <__sccl+0x28>
 800ee88:	b909      	cbnz	r1, 800ee8e <__sccl+0x46>
 800ee8a:	4628      	mov	r0, r5
 800ee8c:	e7f0      	b.n	800ee70 <__sccl+0x28>
 800ee8e:	460b      	mov	r3, r1
 800ee90:	e7f1      	b.n	800ee76 <__sccl+0x2e>
 800ee92:	786e      	ldrb	r6, [r5, #1]
 800ee94:	2e5d      	cmp	r6, #93	; 0x5d
 800ee96:	d0fa      	beq.n	800ee8e <__sccl+0x46>
 800ee98:	42b3      	cmp	r3, r6
 800ee9a:	dcf8      	bgt.n	800ee8e <__sccl+0x46>
 800ee9c:	3502      	adds	r5, #2
 800ee9e:	4619      	mov	r1, r3
 800eea0:	3101      	adds	r1, #1
 800eea2:	428e      	cmp	r6, r1
 800eea4:	5462      	strb	r2, [r4, r1]
 800eea6:	dcfb      	bgt.n	800eea0 <__sccl+0x58>
 800eea8:	1af1      	subs	r1, r6, r3
 800eeaa:	3901      	subs	r1, #1
 800eeac:	1c58      	adds	r0, r3, #1
 800eeae:	42b3      	cmp	r3, r6
 800eeb0:	bfa8      	it	ge
 800eeb2:	2100      	movge	r1, #0
 800eeb4:	1843      	adds	r3, r0, r1
 800eeb6:	e7e0      	b.n	800ee7a <__sccl+0x32>

0800eeb8 <_raise_r>:
 800eeb8:	291f      	cmp	r1, #31
 800eeba:	b538      	push	{r3, r4, r5, lr}
 800eebc:	4604      	mov	r4, r0
 800eebe:	460d      	mov	r5, r1
 800eec0:	d904      	bls.n	800eecc <_raise_r+0x14>
 800eec2:	2316      	movs	r3, #22
 800eec4:	6003      	str	r3, [r0, #0]
 800eec6:	f04f 30ff 	mov.w	r0, #4294967295
 800eeca:	bd38      	pop	{r3, r4, r5, pc}
 800eecc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eece:	b112      	cbz	r2, 800eed6 <_raise_r+0x1e>
 800eed0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eed4:	b94b      	cbnz	r3, 800eeea <_raise_r+0x32>
 800eed6:	4620      	mov	r0, r4
 800eed8:	f000 f830 	bl	800ef3c <_getpid_r>
 800eedc:	462a      	mov	r2, r5
 800eede:	4601      	mov	r1, r0
 800eee0:	4620      	mov	r0, r4
 800eee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eee6:	f000 b817 	b.w	800ef18 <_kill_r>
 800eeea:	2b01      	cmp	r3, #1
 800eeec:	d00a      	beq.n	800ef04 <_raise_r+0x4c>
 800eeee:	1c59      	adds	r1, r3, #1
 800eef0:	d103      	bne.n	800eefa <_raise_r+0x42>
 800eef2:	2316      	movs	r3, #22
 800eef4:	6003      	str	r3, [r0, #0]
 800eef6:	2001      	movs	r0, #1
 800eef8:	e7e7      	b.n	800eeca <_raise_r+0x12>
 800eefa:	2400      	movs	r4, #0
 800eefc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef00:	4628      	mov	r0, r5
 800ef02:	4798      	blx	r3
 800ef04:	2000      	movs	r0, #0
 800ef06:	e7e0      	b.n	800eeca <_raise_r+0x12>

0800ef08 <raise>:
 800ef08:	4b02      	ldr	r3, [pc, #8]	; (800ef14 <raise+0xc>)
 800ef0a:	4601      	mov	r1, r0
 800ef0c:	6818      	ldr	r0, [r3, #0]
 800ef0e:	f7ff bfd3 	b.w	800eeb8 <_raise_r>
 800ef12:	bf00      	nop
 800ef14:	20000f70 	.word	0x20000f70

0800ef18 <_kill_r>:
 800ef18:	b538      	push	{r3, r4, r5, lr}
 800ef1a:	4d07      	ldr	r5, [pc, #28]	; (800ef38 <_kill_r+0x20>)
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	4604      	mov	r4, r0
 800ef20:	4608      	mov	r0, r1
 800ef22:	4611      	mov	r1, r2
 800ef24:	602b      	str	r3, [r5, #0]
 800ef26:	f7f6 f8eb 	bl	8005100 <_kill>
 800ef2a:	1c43      	adds	r3, r0, #1
 800ef2c:	d102      	bne.n	800ef34 <_kill_r+0x1c>
 800ef2e:	682b      	ldr	r3, [r5, #0]
 800ef30:	b103      	cbz	r3, 800ef34 <_kill_r+0x1c>
 800ef32:	6023      	str	r3, [r4, #0]
 800ef34:	bd38      	pop	{r3, r4, r5, pc}
 800ef36:	bf00      	nop
 800ef38:	20001c8c 	.word	0x20001c8c

0800ef3c <_getpid_r>:
 800ef3c:	f7f6 b8d8 	b.w	80050f0 <_getpid>

0800ef40 <strncmp>:
 800ef40:	b510      	push	{r4, lr}
 800ef42:	b17a      	cbz	r2, 800ef64 <strncmp+0x24>
 800ef44:	4603      	mov	r3, r0
 800ef46:	3901      	subs	r1, #1
 800ef48:	1884      	adds	r4, r0, r2
 800ef4a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ef4e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ef52:	4290      	cmp	r0, r2
 800ef54:	d101      	bne.n	800ef5a <strncmp+0x1a>
 800ef56:	42a3      	cmp	r3, r4
 800ef58:	d101      	bne.n	800ef5e <strncmp+0x1e>
 800ef5a:	1a80      	subs	r0, r0, r2
 800ef5c:	bd10      	pop	{r4, pc}
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	d1f3      	bne.n	800ef4a <strncmp+0xa>
 800ef62:	e7fa      	b.n	800ef5a <strncmp+0x1a>
 800ef64:	4610      	mov	r0, r2
 800ef66:	e7f9      	b.n	800ef5c <strncmp+0x1c>

0800ef68 <_strtoul_l.constprop.0>:
 800ef68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef6c:	4f36      	ldr	r7, [pc, #216]	; (800f048 <_strtoul_l.constprop.0+0xe0>)
 800ef6e:	4686      	mov	lr, r0
 800ef70:	460d      	mov	r5, r1
 800ef72:	4628      	mov	r0, r5
 800ef74:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef78:	5de6      	ldrb	r6, [r4, r7]
 800ef7a:	f016 0608 	ands.w	r6, r6, #8
 800ef7e:	d1f8      	bne.n	800ef72 <_strtoul_l.constprop.0+0xa>
 800ef80:	2c2d      	cmp	r4, #45	; 0x2d
 800ef82:	d12f      	bne.n	800efe4 <_strtoul_l.constprop.0+0x7c>
 800ef84:	782c      	ldrb	r4, [r5, #0]
 800ef86:	2601      	movs	r6, #1
 800ef88:	1c85      	adds	r5, r0, #2
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d057      	beq.n	800f03e <_strtoul_l.constprop.0+0xd6>
 800ef8e:	2b10      	cmp	r3, #16
 800ef90:	d109      	bne.n	800efa6 <_strtoul_l.constprop.0+0x3e>
 800ef92:	2c30      	cmp	r4, #48	; 0x30
 800ef94:	d107      	bne.n	800efa6 <_strtoul_l.constprop.0+0x3e>
 800ef96:	7828      	ldrb	r0, [r5, #0]
 800ef98:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ef9c:	2858      	cmp	r0, #88	; 0x58
 800ef9e:	d149      	bne.n	800f034 <_strtoul_l.constprop.0+0xcc>
 800efa0:	786c      	ldrb	r4, [r5, #1]
 800efa2:	2310      	movs	r3, #16
 800efa4:	3502      	adds	r5, #2
 800efa6:	f04f 38ff 	mov.w	r8, #4294967295
 800efaa:	2700      	movs	r7, #0
 800efac:	fbb8 f8f3 	udiv	r8, r8, r3
 800efb0:	fb03 f908 	mul.w	r9, r3, r8
 800efb4:	ea6f 0909 	mvn.w	r9, r9
 800efb8:	4638      	mov	r0, r7
 800efba:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800efbe:	f1bc 0f09 	cmp.w	ip, #9
 800efc2:	d814      	bhi.n	800efee <_strtoul_l.constprop.0+0x86>
 800efc4:	4664      	mov	r4, ip
 800efc6:	42a3      	cmp	r3, r4
 800efc8:	dd22      	ble.n	800f010 <_strtoul_l.constprop.0+0xa8>
 800efca:	2f00      	cmp	r7, #0
 800efcc:	db1d      	blt.n	800f00a <_strtoul_l.constprop.0+0xa2>
 800efce:	4580      	cmp	r8, r0
 800efd0:	d31b      	bcc.n	800f00a <_strtoul_l.constprop.0+0xa2>
 800efd2:	d101      	bne.n	800efd8 <_strtoul_l.constprop.0+0x70>
 800efd4:	45a1      	cmp	r9, r4
 800efd6:	db18      	blt.n	800f00a <_strtoul_l.constprop.0+0xa2>
 800efd8:	fb00 4003 	mla	r0, r0, r3, r4
 800efdc:	2701      	movs	r7, #1
 800efde:	f815 4b01 	ldrb.w	r4, [r5], #1
 800efe2:	e7ea      	b.n	800efba <_strtoul_l.constprop.0+0x52>
 800efe4:	2c2b      	cmp	r4, #43	; 0x2b
 800efe6:	bf04      	itt	eq
 800efe8:	782c      	ldrbeq	r4, [r5, #0]
 800efea:	1c85      	addeq	r5, r0, #2
 800efec:	e7cd      	b.n	800ef8a <_strtoul_l.constprop.0+0x22>
 800efee:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800eff2:	f1bc 0f19 	cmp.w	ip, #25
 800eff6:	d801      	bhi.n	800effc <_strtoul_l.constprop.0+0x94>
 800eff8:	3c37      	subs	r4, #55	; 0x37
 800effa:	e7e4      	b.n	800efc6 <_strtoul_l.constprop.0+0x5e>
 800effc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f000:	f1bc 0f19 	cmp.w	ip, #25
 800f004:	d804      	bhi.n	800f010 <_strtoul_l.constprop.0+0xa8>
 800f006:	3c57      	subs	r4, #87	; 0x57
 800f008:	e7dd      	b.n	800efc6 <_strtoul_l.constprop.0+0x5e>
 800f00a:	f04f 37ff 	mov.w	r7, #4294967295
 800f00e:	e7e6      	b.n	800efde <_strtoul_l.constprop.0+0x76>
 800f010:	2f00      	cmp	r7, #0
 800f012:	da07      	bge.n	800f024 <_strtoul_l.constprop.0+0xbc>
 800f014:	2322      	movs	r3, #34	; 0x22
 800f016:	f8ce 3000 	str.w	r3, [lr]
 800f01a:	f04f 30ff 	mov.w	r0, #4294967295
 800f01e:	b932      	cbnz	r2, 800f02e <_strtoul_l.constprop.0+0xc6>
 800f020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f024:	b106      	cbz	r6, 800f028 <_strtoul_l.constprop.0+0xc0>
 800f026:	4240      	negs	r0, r0
 800f028:	2a00      	cmp	r2, #0
 800f02a:	d0f9      	beq.n	800f020 <_strtoul_l.constprop.0+0xb8>
 800f02c:	b107      	cbz	r7, 800f030 <_strtoul_l.constprop.0+0xc8>
 800f02e:	1e69      	subs	r1, r5, #1
 800f030:	6011      	str	r1, [r2, #0]
 800f032:	e7f5      	b.n	800f020 <_strtoul_l.constprop.0+0xb8>
 800f034:	2430      	movs	r4, #48	; 0x30
 800f036:	2b00      	cmp	r3, #0
 800f038:	d1b5      	bne.n	800efa6 <_strtoul_l.constprop.0+0x3e>
 800f03a:	2308      	movs	r3, #8
 800f03c:	e7b3      	b.n	800efa6 <_strtoul_l.constprop.0+0x3e>
 800f03e:	2c30      	cmp	r4, #48	; 0x30
 800f040:	d0a9      	beq.n	800ef96 <_strtoul_l.constprop.0+0x2e>
 800f042:	230a      	movs	r3, #10
 800f044:	e7af      	b.n	800efa6 <_strtoul_l.constprop.0+0x3e>
 800f046:	bf00      	nop
 800f048:	0800f4b5 	.word	0x0800f4b5

0800f04c <_strtoul_r>:
 800f04c:	f7ff bf8c 	b.w	800ef68 <_strtoul_l.constprop.0>

0800f050 <__submore>:
 800f050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f054:	460c      	mov	r4, r1
 800f056:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f05c:	4299      	cmp	r1, r3
 800f05e:	d11d      	bne.n	800f09c <__submore+0x4c>
 800f060:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f064:	f7fa ff86 	bl	8009f74 <_malloc_r>
 800f068:	b918      	cbnz	r0, 800f072 <__submore+0x22>
 800f06a:	f04f 30ff 	mov.w	r0, #4294967295
 800f06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f076:	63a3      	str	r3, [r4, #56]	; 0x38
 800f078:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800f07c:	6360      	str	r0, [r4, #52]	; 0x34
 800f07e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800f082:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f086:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800f08a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f08e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800f092:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800f096:	6020      	str	r0, [r4, #0]
 800f098:	2000      	movs	r0, #0
 800f09a:	e7e8      	b.n	800f06e <__submore+0x1e>
 800f09c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800f09e:	0077      	lsls	r7, r6, #1
 800f0a0:	463a      	mov	r2, r7
 800f0a2:	f7ff f9be 	bl	800e422 <_realloc_r>
 800f0a6:	4605      	mov	r5, r0
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	d0de      	beq.n	800f06a <__submore+0x1a>
 800f0ac:	eb00 0806 	add.w	r8, r0, r6
 800f0b0:	4601      	mov	r1, r0
 800f0b2:	4632      	mov	r2, r6
 800f0b4:	4640      	mov	r0, r8
 800f0b6:	f7fe fca9 	bl	800da0c <memcpy>
 800f0ba:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800f0be:	f8c4 8000 	str.w	r8, [r4]
 800f0c2:	e7e9      	b.n	800f098 <__submore+0x48>

0800f0c4 <__ascii_wctomb>:
 800f0c4:	b149      	cbz	r1, 800f0da <__ascii_wctomb+0x16>
 800f0c6:	2aff      	cmp	r2, #255	; 0xff
 800f0c8:	bf85      	ittet	hi
 800f0ca:	238a      	movhi	r3, #138	; 0x8a
 800f0cc:	6003      	strhi	r3, [r0, #0]
 800f0ce:	700a      	strbls	r2, [r1, #0]
 800f0d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800f0d4:	bf98      	it	ls
 800f0d6:	2001      	movls	r0, #1
 800f0d8:	4770      	bx	lr
 800f0da:	4608      	mov	r0, r1
 800f0dc:	4770      	bx	lr
	...

0800f0e0 <_fstat_r>:
 800f0e0:	b538      	push	{r3, r4, r5, lr}
 800f0e2:	4d07      	ldr	r5, [pc, #28]	; (800f100 <_fstat_r+0x20>)
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	4608      	mov	r0, r1
 800f0ea:	4611      	mov	r1, r2
 800f0ec:	602b      	str	r3, [r5, #0]
 800f0ee:	f7f6 f866 	bl	80051be <_fstat>
 800f0f2:	1c43      	adds	r3, r0, #1
 800f0f4:	d102      	bne.n	800f0fc <_fstat_r+0x1c>
 800f0f6:	682b      	ldr	r3, [r5, #0]
 800f0f8:	b103      	cbz	r3, 800f0fc <_fstat_r+0x1c>
 800f0fa:	6023      	str	r3, [r4, #0]
 800f0fc:	bd38      	pop	{r3, r4, r5, pc}
 800f0fe:	bf00      	nop
 800f100:	20001c8c 	.word	0x20001c8c

0800f104 <_isatty_r>:
 800f104:	b538      	push	{r3, r4, r5, lr}
 800f106:	4d06      	ldr	r5, [pc, #24]	; (800f120 <_isatty_r+0x1c>)
 800f108:	2300      	movs	r3, #0
 800f10a:	4604      	mov	r4, r0
 800f10c:	4608      	mov	r0, r1
 800f10e:	602b      	str	r3, [r5, #0]
 800f110:	f7f6 f865 	bl	80051de <_isatty>
 800f114:	1c43      	adds	r3, r0, #1
 800f116:	d102      	bne.n	800f11e <_isatty_r+0x1a>
 800f118:	682b      	ldr	r3, [r5, #0]
 800f11a:	b103      	cbz	r3, 800f11e <_isatty_r+0x1a>
 800f11c:	6023      	str	r3, [r4, #0]
 800f11e:	bd38      	pop	{r3, r4, r5, pc}
 800f120:	20001c8c 	.word	0x20001c8c

0800f124 <_malloc_usable_size_r>:
 800f124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f128:	1f18      	subs	r0, r3, #4
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	bfbc      	itt	lt
 800f12e:	580b      	ldrlt	r3, [r1, r0]
 800f130:	18c0      	addlt	r0, r0, r3
 800f132:	4770      	bx	lr

0800f134 <_init>:
 800f134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f136:	bf00      	nop
 800f138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f13a:	bc08      	pop	{r3}
 800f13c:	469e      	mov	lr, r3
 800f13e:	4770      	bx	lr

0800f140 <_fini>:
 800f140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f142:	bf00      	nop
 800f144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f146:	bc08      	pop	{r3}
 800f148:	469e      	mov	lr, r3
 800f14a:	4770      	bx	lr
