
PierceStat_F407VET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001010c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  080102a0  080102a0  000202a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080109f0  080109f0  000315c0  2**0
                  CONTENTS
  4 .ARM          00000008  080109f0  080109f0  000209f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080109f8  080109f8  000315c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080109f8  080109f8  000209f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080109fc  080109fc  000209fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000015c0  20000000  08010a00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000315c0  2**0
                  CONTENTS
 10 .bss          00000b74  200015c0  200015c0  000315c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002134  20002134  000315c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000315c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a62  00000000  00000000  000315f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032b8  00000000  00000000  00047052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d8  00000000  00000000  0004a310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001498  00000000  00000000  0004b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e8e  00000000  00000000  0004cd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017824  00000000  00000000  00071c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db058  00000000  00000000  00089432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016448a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007494  00000000  00000000  001644dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200015c0 	.word	0x200015c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010284 	.word	0x08010284

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200015c4 	.word	0x200015c4
 80001cc:	08010284 	.word	0x08010284

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <limitPID>:
float errorLast[2] = {0.0, 0.0};
uint32_t tStart[2] = {0, 0};
uint32_t tLast[2] = {0, 0};
uint32_t normCoeff[2] = {0, 0};

float limitPID(float PID) {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(PID > 100.0)
 8001022:	edd7 7a01 	vldr	s15, [r7, #4]
 8001026:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001064 <limitPID+0x4c>
 800102a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800102e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001032:	dd01      	ble.n	8001038 <limitPID+0x20>
		return 100.0;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <limitPID+0x50>)
 8001036:	e00b      	b.n	8001050 <limitPID+0x38>
	if(PID < -100.0)
 8001038:	edd7 7a01 	vldr	s15, [r7, #4]
 800103c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800106c <limitPID+0x54>
 8001040:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001048:	d501      	bpl.n	800104e <limitPID+0x36>
		return -100.0;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <limitPID+0x58>)
 800104c:	e000      	b.n	8001050 <limitPID+0x38>
	else
		return PID;
 800104e:	687b      	ldr	r3, [r7, #4]
}
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eeb0 0a67 	vmov.f32	s0, s15
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	42c80000 	.word	0x42c80000
 8001068:	42c80000 	.word	0x42c80000
 800106c:	c2c80000 	.word	0xc2c80000
 8001070:	c2c80000 	.word	0xc2c80000

08001074 <proceedPID>:

float proceedPID(uint8_t channel) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b0a6      	sub	sp, #152	; 0x98
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	switch (channel) { //Channel choice
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <proceedPID+0x18>
 8001084:	2b01      	cmp	r3, #1
 8001086:	f000 816d 	beq.w	8001364 <proceedPID+0x2f0>
 800108a:	e2e3      	b.n	8001654 <proceedPID+0x5e0>
	case 0: {
		float tempRead;
		bool isFreq = false;
 800108c:	2300      	movs	r3, #0
 800108e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		float freqRead = getFreq().val_float;
 8001092:	f002 fcff 	bl	8003a94 <getFreq>
 8001096:	4603      	mov	r3, r0
 8001098:	647b      	str	r3, [r7, #68]	; 0x44

		uint8_t source = getSourceSelect1().val_uint8_t;
 800109a:	f001 ffd1 	bl	8003040 <getSourceSelect1>
 800109e:	4603      	mov	r3, r0
 80010a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		switch (source) { //Source choice ch1
 80010a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d829      	bhi.n	8001100 <proceedPID+0x8c>
 80010ac:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <proceedPID+0x40>)
 80010ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b2:	bf00      	nop
 80010b4:	080010c9 	.word	0x080010c9
 80010b8:	080010d5 	.word	0x080010d5
 80010bc:	080010e1 	.word	0x080010e1
 80010c0:	080010ed 	.word	0x080010ed
 80010c4:	080010f9 	.word	0x080010f9
		case 0:
			tempRead = getTemp1().val_float;
 80010c8:	f001 fc28 	bl	800291c <getTemp1>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			break;
 80010d2:	e015      	b.n	8001100 <proceedPID+0x8c>
		case 1:
			tempRead = getTemp2().val_float;
 80010d4:	f001 fc3e 	bl	8002954 <getTemp2>
 80010d8:	4603      	mov	r3, r0
 80010da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			break;
 80010de:	e00f      	b.n	8001100 <proceedPID+0x8c>
		case 2:
			tempRead = getTemp3().val_float;
 80010e0:	f001 fc54 	bl	800298c <getTemp3>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			break;
 80010ea:	e009      	b.n	8001100 <proceedPID+0x8c>
		case 3:
			tempRead = getTemp4().val_float;
 80010ec:	f001 fc6a 	bl	80029c4 <getTemp4>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			break;
 80010f6:	e003      	b.n	8001100 <proceedPID+0x8c>
		case 4:
			isFreq = true;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			break;
 80010fe:	bf00      	nop
		}

		if(!isFreq) { //Temp source ch1
 8001100:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001104:	f083 0301 	eor.w	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 8095 	beq.w	800123a <proceedPID+0x1c6>
			float P = getPcoeff1Temp().val_float;
 8001110:	f001 ffea 	bl	80030e8 <getPcoeff1Temp>
 8001114:	4603      	mov	r3, r0
 8001116:	623b      	str	r3, [r7, #32]
			float PID = 0.0;
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
				errorLast[0] = tempRead - getTempCh1Set().val_float;
				PID = P*errorLast[0];
			}
			else {

				float I = getIcoeff1Temp().val_float;
 800111e:	f002 f847 	bl	80031b0 <getIcoeff1Temp>
 8001122:	4603      	mov	r3, r0
 8001124:	61bb      	str	r3, [r7, #24]
				float D = getDcoeff1Temp().val_float;
 8001126:	f002 f8a7 	bl	8003278 <getDcoeff1Temp>
 800112a:	4603      	mov	r3, r0
 800112c:	617b      	str	r3, [r7, #20]
				float error = tempRead - getTempCh1Set().val_float;
 800112e:	f002 fa33 	bl	8003598 <getTempCh1Set>
 8001132:	4603      	mov	r3, r0
 8001134:	ee07 3a10 	vmov	s14, r3
 8001138:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800113c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001140:	edc7 7a04 	vstr	s15, [r7, #16]
				uint32_t time = __HAL_TIM_GET_COUNTER(&htim5);
 8001144:	4ba2      	ldr	r3, [pc, #648]	; (80013d0 <proceedPID+0x35c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	60fb      	str	r3, [r7, #12]
				if(normCoeff[0] == 0) {
 800114c:	4ba1      	ldr	r3, [pc, #644]	; (80013d4 <proceedPID+0x360>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d105      	bne.n	8001160 <proceedPID+0xec>
					normCoeff[0] = time - tLast[0];
 8001154:	4ba0      	ldr	r3, [pc, #640]	; (80013d8 <proceedPID+0x364>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	4a9d      	ldr	r2, [pc, #628]	; (80013d4 <proceedPID+0x360>)
 800115e:	6013      	str	r3, [r2, #0]
				}
				Integral[0] += error*(time - tLast[0])/normCoeff[0];
 8001160:	4b9e      	ldr	r3, [pc, #632]	; (80013dc <proceedPID+0x368>)
 8001162:	ed93 7a00 	vldr	s14, [r3]
 8001166:	4b9c      	ldr	r3, [pc, #624]	; (80013d8 <proceedPID+0x364>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001176:	edd7 7a04 	vldr	s15, [r7, #16]
 800117a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800117e:	4b95      	ldr	r3, [pc, #596]	; (80013d4 <proceedPID+0x360>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	ee07 3a90 	vmov	s15, r3
 8001186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800118a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800118e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001192:	4b92      	ldr	r3, [pc, #584]	; (80013dc <proceedPID+0x368>)
 8001194:	edc3 7a00 	vstr	s15, [r3]
				if(Integral[0] > IntegralMax[0])
 8001198:	4b90      	ldr	r3, [pc, #576]	; (80013dc <proceedPID+0x368>)
 800119a:	ed93 7a00 	vldr	s14, [r3]
 800119e:	4b90      	ldr	r3, [pc, #576]	; (80013e0 <proceedPID+0x36c>)
 80011a0:	edd3 7a00 	vldr	s15, [r3]
 80011a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ac:	dd03      	ble.n	80011b6 <proceedPID+0x142>
					Integral[0] = IntegralMax[0];
 80011ae:	4b8c      	ldr	r3, [pc, #560]	; (80013e0 <proceedPID+0x36c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a8a      	ldr	r2, [pc, #552]	; (80013dc <proceedPID+0x368>)
 80011b4:	6013      	str	r3, [r2, #0]
				float Der = (error - errorLast[0])/(time - tLast[0])*normCoeff[0];
 80011b6:	4b8b      	ldr	r3, [pc, #556]	; (80013e4 <proceedPID+0x370>)
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80011c0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011c4:	4b84      	ldr	r3, [pc, #528]	; (80013d8 <proceedPID+0x364>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011d8:	4b7e      	ldr	r3, [pc, #504]	; (80013d4 <proceedPID+0x360>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e8:	edc7 7a02 	vstr	s15, [r7, #8]
				PID = P*error + I*Integral[0] + D*Der;
 80011ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80011f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80011f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f8:	4b78      	ldr	r3, [pc, #480]	; (80013dc <proceedPID+0x368>)
 80011fa:	edd3 6a00 	vldr	s13, [r3]
 80011fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001206:	ee37 7a27 	vadd.f32	s14, s14, s15
 800120a:	edd7 6a05 	vldr	s13, [r7, #20]
 800120e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121a:	edc7 7a07 	vstr	s15, [r7, #28]
				tLast[0] = time;
 800121e:	4a6e      	ldr	r2, [pc, #440]	; (80013d8 <proceedPID+0x364>)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6013      	str	r3, [r2, #0]
				errorLast[0] = error;
 8001224:	4a6f      	ldr	r2, [pc, #444]	; (80013e4 <proceedPID+0x370>)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	6013      	str	r3, [r2, #0]
			}
			PID = limitPID(PID);
 800122a:	ed97 0a07 	vldr	s0, [r7, #28]
 800122e:	f7ff fef3 	bl	8001018 <limitPID>
 8001232:	ed87 0a07 	vstr	s0, [r7, #28]
			return PID;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	e20e      	b.n	8001658 <proceedPID+0x5e4>
		}
		else { //Freq source ch1
			float P = getPcoeff1Freq().val_float;
 800123a:	f002 f881 	bl	8003340 <getPcoeff1Freq>
 800123e:	4603      	mov	r3, r0
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
			float PID = 0.0;
 8001242:	f04f 0300 	mov.w	r3, #0
 8001246:	63bb      	str	r3, [r7, #56]	; 0x38
				errorLast[0] = freqRead - getFreqSet().val_float;
				PID = P*errorLast[0];
			}
			else {

				float I = getIcoeff1Freq().val_float;
 8001248:	f002 f8de 	bl	8003408 <getIcoeff1Freq>
 800124c:	4603      	mov	r3, r0
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
				float D = getDcoeff1Freq().val_float;
 8001250:	f002 f93e 	bl	80034d0 <getDcoeff1Freq>
 8001254:	4603      	mov	r3, r0
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
				float error = freqRead - getFreqSet().val_float;
 8001258:	f002 fc4e 	bl	8003af8 <getFreqSet>
 800125c:	4603      	mov	r3, r0
 800125e:	ee07 3a10 	vmov	s14, r3
 8001262:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001266:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800126a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				uint32_t time = __HAL_TIM_GET_COUNTER(&htim5);
 800126e:	4b58      	ldr	r3, [pc, #352]	; (80013d0 <proceedPID+0x35c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
				if(normCoeff[0] == 0) {
 8001276:	4b57      	ldr	r3, [pc, #348]	; (80013d4 <proceedPID+0x360>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d105      	bne.n	800128a <proceedPID+0x216>
					normCoeff[0] = time - tLast[0];
 800127e:	4b56      	ldr	r3, [pc, #344]	; (80013d8 <proceedPID+0x364>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	4a53      	ldr	r2, [pc, #332]	; (80013d4 <proceedPID+0x360>)
 8001288:	6013      	str	r3, [r2, #0]
				}
				Integral[0] += error*(time - tLast[0])/normCoeff[0];
 800128a:	4b54      	ldr	r3, [pc, #336]	; (80013dc <proceedPID+0x368>)
 800128c:	ed93 7a00 	vldr	s14, [r3]
 8001290:	4b51      	ldr	r3, [pc, #324]	; (80013d8 <proceedPID+0x364>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	ee07 3a90 	vmov	s15, r3
 800129c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80012a4:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80012a8:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <proceedPID+0x360>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012b4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80012b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012bc:	4b47      	ldr	r3, [pc, #284]	; (80013dc <proceedPID+0x368>)
 80012be:	edc3 7a00 	vstr	s15, [r3]
				if(Integral[0] > IntegralMax[0])
 80012c2:	4b46      	ldr	r3, [pc, #280]	; (80013dc <proceedPID+0x368>)
 80012c4:	ed93 7a00 	vldr	s14, [r3]
 80012c8:	4b45      	ldr	r3, [pc, #276]	; (80013e0 <proceedPID+0x36c>)
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d6:	dd03      	ble.n	80012e0 <proceedPID+0x26c>
					Integral[0] = IntegralMax[0];
 80012d8:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <proceedPID+0x36c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a3f      	ldr	r2, [pc, #252]	; (80013dc <proceedPID+0x368>)
 80012de:	6013      	str	r3, [r2, #0]
				float Der = (error - errorLast[0])/(time - tLast[0])*normCoeff[0];
 80012e0:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <proceedPID+0x370>)
 80012e2:	edd3 7a00 	vldr	s15, [r3]
 80012e6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80012ea:	ee77 6a67 	vsub.f32	s13, s14, s15
 80012ee:	4b3a      	ldr	r3, [pc, #232]	; (80013d8 <proceedPID+0x364>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001302:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <proceedPID+0x360>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	ee07 3a90 	vmov	s15, r3
 800130a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800130e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001312:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				PID = P*error + I*Integral[0] + D*Der;
 8001316:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800131a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800131e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001322:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <proceedPID+0x368>)
 8001324:	edd3 6a00 	vldr	s13, [r3]
 8001328:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800132c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001330:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001334:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001338:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800133c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				tLast[0] = time;
 8001348:	4a23      	ldr	r2, [pc, #140]	; (80013d8 <proceedPID+0x364>)
 800134a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134c:	6013      	str	r3, [r2, #0]
				errorLast[0] = error;
 800134e:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <proceedPID+0x370>)
 8001350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001352:	6013      	str	r3, [r2, #0]
			}
			PID = limitPID(PID);
 8001354:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001358:	f7ff fe5e 	bl	8001018 <limitPID>
 800135c:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
			return PID;
 8001360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001362:	e179      	b.n	8001658 <proceedPID+0x5e4>
		}
		break;
	}
	case 1: {
		float tempRead;
		bool isFreq = false;
 8001364:	2300      	movs	r3, #0
 8001366:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
		float freqRead = getFreq().val_float;
 800136a:	f002 fb93 	bl	8003a94 <getFreq>
 800136e:	4603      	mov	r3, r0
 8001370:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		uint8_t source = getSourceSelect2().val_uint8_t;
 8001374:	f001 fe86 	bl	8003084 <getSourceSelect2>
 8001378:	4603      	mov	r3, r0
 800137a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		switch (source) {
 800137e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001382:	2b04      	cmp	r3, #4
 8001384:	d834      	bhi.n	80013f0 <proceedPID+0x37c>
 8001386:	a201      	add	r2, pc, #4	; (adr r2, 800138c <proceedPID+0x318>)
 8001388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138c:	080013a1 	.word	0x080013a1
 8001390:	080013ad 	.word	0x080013ad
 8001394:	080013b9 	.word	0x080013b9
 8001398:	080013c5 	.word	0x080013c5
 800139c:	080013e9 	.word	0x080013e9
		case 0:
			tempRead = getTemp1().val_float;
 80013a0:	f001 fabc 	bl	800291c <getTemp1>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			break;
 80013aa:	e021      	b.n	80013f0 <proceedPID+0x37c>
		case 1:
			tempRead = getTemp2().val_float;
 80013ac:	f001 fad2 	bl	8002954 <getTemp2>
 80013b0:	4603      	mov	r3, r0
 80013b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			break;
 80013b6:	e01b      	b.n	80013f0 <proceedPID+0x37c>
		case 2:
			tempRead = getTemp3().val_float;
 80013b8:	f001 fae8 	bl	800298c <getTemp3>
 80013bc:	4603      	mov	r3, r0
 80013be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			break;
 80013c2:	e015      	b.n	80013f0 <proceedPID+0x37c>
		case 3:
			tempRead = getTemp4().val_float;
 80013c4:	f001 fafe 	bl	80029c4 <getTemp4>
 80013c8:	4603      	mov	r3, r0
 80013ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			break;
 80013ce:	e00f      	b.n	80013f0 <proceedPID+0x37c>
 80013d0:	20001fc4 	.word	0x20001fc4
 80013d4:	200015fc 	.word	0x200015fc
 80013d8:	200015f4 	.word	0x200015f4
 80013dc:	200015dc 	.word	0x200015dc
 80013e0:	20000000 	.word	0x20000000
 80013e4:	200015e4 	.word	0x200015e4
		case 4:
			isFreq = true;
 80013e8:	2301      	movs	r3, #1
 80013ea:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			break;
 80013ee:	bf00      	nop
		}

		if(!isFreq) { //Temp source ch1
 80013f0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80013f4:	f083 0301 	eor.w	r3, r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 8095 	beq.w	800152a <proceedPID+0x4b6>
			float P = getPcoeff2Temp().val_float;
 8001400:	f001 fea4 	bl	800314c <getPcoeff2Temp>
 8001404:	4603      	mov	r3, r0
 8001406:	663b      	str	r3, [r7, #96]	; 0x60
			float PID = 0.0;
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	65fb      	str	r3, [r7, #92]	; 0x5c
				errorLast[1] = tempRead - getTempCh2Set().val_float;
				PID = P*errorLast[1];
			}
			else {

				float I = getIcoeff2Temp().val_float;
 800140e:	f001 ff01 	bl	8003214 <getIcoeff2Temp>
 8001412:	4603      	mov	r3, r0
 8001414:	65bb      	str	r3, [r7, #88]	; 0x58
				float D = getDcoeff2Temp().val_float;
 8001416:	f001 ff61 	bl	80032dc <getDcoeff2Temp>
 800141a:	4603      	mov	r3, r0
 800141c:	657b      	str	r3, [r7, #84]	; 0x54
				float error = tempRead - getTempCh2Set().val_float;
 800141e:	f002 f8ed 	bl	80035fc <getTempCh2Set>
 8001422:	4603      	mov	r3, r0
 8001424:	ee07 3a10 	vmov	s14, r3
 8001428:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800142c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001430:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				uint32_t time = __HAL_TIM_GET_COUNTER(&htim5);
 8001434:	4b8c      	ldr	r3, [pc, #560]	; (8001668 <proceedPID+0x5f4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143a:	64fb      	str	r3, [r7, #76]	; 0x4c
				if(normCoeff[1] == 0) {
 800143c:	4b8b      	ldr	r3, [pc, #556]	; (800166c <proceedPID+0x5f8>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d105      	bne.n	8001450 <proceedPID+0x3dc>
					normCoeff[1] = time - tLast[1];
 8001444:	4b8a      	ldr	r3, [pc, #552]	; (8001670 <proceedPID+0x5fc>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	4a87      	ldr	r2, [pc, #540]	; (800166c <proceedPID+0x5f8>)
 800144e:	6053      	str	r3, [r2, #4]
				}
				Integral[1] += error*(time - tLast[1])/normCoeff[1];
 8001450:	4b88      	ldr	r3, [pc, #544]	; (8001674 <proceedPID+0x600>)
 8001452:	ed93 7a01 	vldr	s14, [r3, #4]
 8001456:	4b86      	ldr	r3, [pc, #536]	; (8001670 <proceedPID+0x5fc>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001466:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800146a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800146e:	4b7f      	ldr	r3, [pc, #508]	; (800166c <proceedPID+0x5f8>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800147a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800147e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001482:	4b7c      	ldr	r3, [pc, #496]	; (8001674 <proceedPID+0x600>)
 8001484:	edc3 7a01 	vstr	s15, [r3, #4]
				if(Integral[1] > IntegralMax[1])
 8001488:	4b7a      	ldr	r3, [pc, #488]	; (8001674 <proceedPID+0x600>)
 800148a:	ed93 7a01 	vldr	s14, [r3, #4]
 800148e:	4b7a      	ldr	r3, [pc, #488]	; (8001678 <proceedPID+0x604>)
 8001490:	edd3 7a01 	vldr	s15, [r3, #4]
 8001494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149c:	dd03      	ble.n	80014a6 <proceedPID+0x432>
					Integral[1] = IntegralMax[1];
 800149e:	4b76      	ldr	r3, [pc, #472]	; (8001678 <proceedPID+0x604>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	4a74      	ldr	r2, [pc, #464]	; (8001674 <proceedPID+0x600>)
 80014a4:	6053      	str	r3, [r2, #4]
				float Der = (error - errorLast[1])/(time - tLast[1])*normCoeff[1];
 80014a6:	4b75      	ldr	r3, [pc, #468]	; (800167c <proceedPID+0x608>)
 80014a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80014ac:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80014b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80014b4:	4b6e      	ldr	r3, [pc, #440]	; (8001670 <proceedPID+0x5fc>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014c8:	4b68      	ldr	r3, [pc, #416]	; (800166c <proceedPID+0x5f8>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	ee07 3a90 	vmov	s15, r3
 80014d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
				PID = P*error + I*Integral[1] + D*Der;
 80014dc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80014e0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80014e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e8:	4b62      	ldr	r3, [pc, #392]	; (8001674 <proceedPID+0x600>)
 80014ea:	edd3 6a01 	vldr	s13, [r3, #4]
 80014ee:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80014f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014fa:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80014fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
				tLast[1] = time;
 800150e:	4a58      	ldr	r2, [pc, #352]	; (8001670 <proceedPID+0x5fc>)
 8001510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001512:	6053      	str	r3, [r2, #4]
				errorLast[1] = error;
 8001514:	4a59      	ldr	r2, [pc, #356]	; (800167c <proceedPID+0x608>)
 8001516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001518:	6053      	str	r3, [r2, #4]
			}
			PID = limitPID(PID);
 800151a:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 800151e:	f7ff fd7b 	bl	8001018 <limitPID>
 8001522:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
			return PID;
 8001526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001528:	e096      	b.n	8001658 <proceedPID+0x5e4>
		}
		else { //Freq source ch1
			float P = getPcoeff2Freq().val_float;
 800152a:	f001 ff3b 	bl	80033a4 <getPcoeff2Freq>
 800152e:	4603      	mov	r3, r0
 8001530:	67fb      	str	r3, [r7, #124]	; 0x7c
			float PID = 0.0;
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	67bb      	str	r3, [r7, #120]	; 0x78
				errorLast[1] = freqRead - getFreqSet().val_float;
				PID = P*errorLast[1];
			}
			else {

				float I = getIcoeff2Freq().val_float;
 8001538:	f001 ff98 	bl	800346c <getIcoeff2Freq>
 800153c:	4603      	mov	r3, r0
 800153e:	677b      	str	r3, [r7, #116]	; 0x74
				float D = getDcoeff2Freq().val_float;
 8001540:	f001 fff8 	bl	8003534 <getDcoeff2Freq>
 8001544:	4603      	mov	r3, r0
 8001546:	673b      	str	r3, [r7, #112]	; 0x70
				float error = freqRead - getFreqSet().val_float;
 8001548:	f002 fad6 	bl	8003af8 <getFreqSet>
 800154c:	4603      	mov	r3, r0
 800154e:	ee07 3a10 	vmov	s14, r3
 8001552:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001556:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800155a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
				uint32_t time = __HAL_TIM_GET_COUNTER(&htim5);
 800155e:	4b42      	ldr	r3, [pc, #264]	; (8001668 <proceedPID+0x5f4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	66bb      	str	r3, [r7, #104]	; 0x68
				if(normCoeff[1] == 0) {
 8001566:	4b41      	ldr	r3, [pc, #260]	; (800166c <proceedPID+0x5f8>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d105      	bne.n	800157a <proceedPID+0x506>
					normCoeff[1] = time - tLast[1];
 800156e:	4b40      	ldr	r3, [pc, #256]	; (8001670 <proceedPID+0x5fc>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	4a3d      	ldr	r2, [pc, #244]	; (800166c <proceedPID+0x5f8>)
 8001578:	6053      	str	r3, [r2, #4]
				}
				Integral[1] += error*(time - tLast[1])/normCoeff[1];
 800157a:	4b3e      	ldr	r3, [pc, #248]	; (8001674 <proceedPID+0x600>)
 800157c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001580:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <proceedPID+0x5fc>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001590:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001594:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001598:	4b34      	ldr	r3, [pc, #208]	; (800166c <proceedPID+0x5f8>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015a4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80015a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ac:	4b31      	ldr	r3, [pc, #196]	; (8001674 <proceedPID+0x600>)
 80015ae:	edc3 7a01 	vstr	s15, [r3, #4]
				if(Integral[1] > IntegralMax[1])
 80015b2:	4b30      	ldr	r3, [pc, #192]	; (8001674 <proceedPID+0x600>)
 80015b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80015b8:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <proceedPID+0x604>)
 80015ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80015be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c6:	dd03      	ble.n	80015d0 <proceedPID+0x55c>
					Integral[1] = IntegralMax[1];
 80015c8:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <proceedPID+0x604>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4a29      	ldr	r2, [pc, #164]	; (8001674 <proceedPID+0x600>)
 80015ce:	6053      	str	r3, [r2, #4]
				float Der = (error - errorLast[1])/(time - tLast[1])*normCoeff[1];
 80015d0:	4b2a      	ldr	r3, [pc, #168]	; (800167c <proceedPID+0x608>)
 80015d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80015d6:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80015da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015de:	4b24      	ldr	r3, [pc, #144]	; (8001670 <proceedPID+0x5fc>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <proceedPID+0x5f8>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001602:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
				PID = P*error + I*Integral[0] + D*Der;
 8001606:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800160a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800160e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <proceedPID+0x600>)
 8001614:	edd3 6a00 	vldr	s13, [r3]
 8001618:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800161c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001620:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001624:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8001628:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800162c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001634:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
				tLast[1] = time;
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <proceedPID+0x5fc>)
 800163a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800163c:	6053      	str	r3, [r2, #4]
				errorLast[1] = error;
 800163e:	4a0f      	ldr	r2, [pc, #60]	; (800167c <proceedPID+0x608>)
 8001640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001642:	6053      	str	r3, [r2, #4]
			}
			PID = limitPID(PID);
 8001644:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8001648:	f7ff fce6 	bl	8001018 <limitPID>
 800164c:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
			return PID;
 8001650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001652:	e001      	b.n	8001658 <proceedPID+0x5e4>
		}
		break;
	}
	default:
		return 0.0;
 8001654:	f04f 0300 	mov.w	r3, #0
	}

}
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eeb0 0a67 	vmov.f32	s0, s15
 8001660:	3798      	adds	r7, #152	; 0x98
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20001fc4 	.word	0x20001fc4
 800166c:	200015fc 	.word	0x200015fc
 8001670:	200015f4 	.word	0x200015f4
 8001674:	200015dc 	.word	0x200015dc
 8001678:	20000000 	.word	0x20000000
 800167c:	200015e4 	.word	0x200015e4

08001680 <resetPID>:

void resetPID(uint8_t channel) {
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
	if(channel > 1)
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d81d      	bhi.n	80016cc <resetPID+0x4c>
		return;
	Integral[channel] = 0.0;
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <resetPID+0x58>)
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
	errorLast[channel] = 0.0;
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <resetPID+0x5c>)
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
	tStart[channel] = 0;
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <resetPID+0x60>)
 80016b0:	2100      	movs	r1, #0
 80016b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	tLast[channel] = 0;
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <resetPID+0x64>)
 80016ba:	2100      	movs	r1, #0
 80016bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	normCoeff[channel] = 0;
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <resetPID+0x68>)
 80016c4:	2100      	movs	r1, #0
 80016c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80016ca:	e000      	b.n	80016ce <resetPID+0x4e>
		return;
 80016cc:	bf00      	nop
}
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	200015dc 	.word	0x200015dc
 80016dc:	200015e4 	.word	0x200015e4
 80016e0:	200015ec 	.word	0x200015ec
 80016e4:	200015f4 	.word	0x200015f4
 80016e8:	200015fc 	.word	0x200015fc

080016ec <setPWM>:

void setPWM() {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
	//Heater PWM
	if(!getCh1_OnOff().val_bool) {
 80016f2:	f001 fc65 	bl	8002fc0 <getCh1_OnOff>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f083 0301 	eor.w	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d01c      	beq.n	800173e <setPWM+0x52>
		setPWM_CH1((valueTypes)0.0f);
 8001704:	2300      	movs	r3, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f002 f918 	bl	800393c <setPWM_CH1>
		setGate1A_OnOff(FALSE);
 800170c:	2300      	movs	r3, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f001 ffe4 	bl	80036dc <setGate1A_OnOff>
		setGate1B_OnOff(FALSE);
 8001714:	2300      	movs	r3, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f002 f806 	bl	8003728 <setGate1B_OnOff>
		setGateH1A(FALSE);
 800171c:	2300      	movs	r3, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f002 f874 	bl	800380c <setGateH1A>
		setGateH1B(FALSE);
 8001724:	2300      	movs	r3, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f002 f896 	bl	8003858 <setGateH1B>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800172c:	4bb6      	ldr	r3, [pc, #728]	; (8001a08 <setPWM+0x31c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001734:	4bb4      	ldr	r3, [pc, #720]	; (8001a08 <setPWM+0x31c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2200      	movs	r2, #0
 800173a:	639a      	str	r2, [r3, #56]	; 0x38
 800173c:	e0bc      	b.n	80018b8 <setPWM+0x1cc>
	}
	else {
		setGate1A_OnOff(TRUE);
 800173e:	2300      	movs	r3, #0
 8001740:	2201      	movs	r2, #1
 8001742:	f362 0307 	bfi	r3, r2, #0, #8
 8001746:	4618      	mov	r0, r3
 8001748:	f001 ffc8 	bl	80036dc <setGate1A_OnOff>
		setGate1B_OnOff(TRUE);
 800174c:	2300      	movs	r3, #0
 800174e:	2201      	movs	r2, #1
 8001750:	f362 0307 	bfi	r3, r2, #0, #8
 8001754:	4618      	mov	r0, r3
 8001756:	f001 ffe7 	bl	8003728 <setGate1B_OnOff>
		if(getModeSelect1().val_bool)
 800175a:	f001 fbf1 	bl	8002f40 <getModeSelect1>
 800175e:	4603      	mov	r3, r0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d006      	beq.n	8001774 <setPWM+0x88>
			setPWM_CH1(getI1Set());
 8001766:	f001 ff7b 	bl	8003660 <getI1Set>
 800176a:	4603      	mov	r3, r0
 800176c:	4618      	mov	r0, r3
 800176e:	f002 f8e5 	bl	800393c <setPWM_CH1>
 8001772:	e008      	b.n	8001786 <setPWM+0x9a>
		else
			setPWM_CH1((valueTypes)proceedPID(0));
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff fc7d 	bl	8001074 <proceedPID>
 800177a:	ed87 0a01 	vstr	s0, [r7, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4618      	mov	r0, r3
 8001782:	f002 f8db 	bl	800393c <setPWM_CH1>


		float dutyCH1 = getPWM_CH1().val_float/100.0;
 8001786:	f002 f8ff 	bl	8003988 <getPWM_CH1>
 800178a:	4603      	mov	r3, r0
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe feeb 	bl	8000568 <__aeabi_f2d>
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	4b9d      	ldr	r3, [pc, #628]	; (8001a0c <setPWM+0x320>)
 8001798:	f7ff f868 	bl	800086c <__aeabi_ddiv>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f7ff fa30 	bl	8000c08 <__aeabi_d2f>
 80017a8:	4603      	mov	r3, r0
 80017aa:	60fb      	str	r3, [r7, #12]
		if(!getCH1_Polarity().val_bool) {
 80017ac:	f002 f93a 	bl	8003a24 <getCH1_Polarity>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f083 0301 	eor.w	r3, r3, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00f      	beq.n	80017de <setPWM+0xf2>
			dutyCH1 = dutyCH1*(-1.0);
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f7fe fed2 	bl	8000568 <__aeabi_f2d>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	f7ff fa1c 	bl	8000c08 <__aeabi_d2f>
 80017d0:	4603      	mov	r3, r0
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eef1 7a67 	vneg.f32	s15, s15
 80017da:	edc7 7a03 	vstr	s15, [r7, #12]
		}
		if(!getLoadSelect1().val_bool && dutyCH1 < 0.0f) {
 80017de:	f001 fb6b 	bl	8002eb8 <getLoadSelect1>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f083 0301 	eor.w	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d009      	beq.n	8001804 <setPWM+0x118>
 80017f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80017f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fc:	d502      	bpl.n	8001804 <setPWM+0x118>
			dutyCH1 = 0.0f;
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
		}

		if(dutyCH1 > 0) {
 8001804:	edd7 7a03 	vldr	s15, [r7, #12]
 8001808:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001810:	dd28      	ble.n	8001864 <setPWM+0x178>
			setGateH1A(FALSE);
 8001812:	2300      	movs	r3, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f001 fff9 	bl	800380c <setGateH1A>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800181a:	4b7b      	ldr	r3, [pc, #492]	; (8001a08 <setPWM+0x31c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2200      	movs	r2, #0
 8001820:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, freq_PWM_MO/freq_PWM_CH1 * dutyCH1 - 1);
 8001822:	4b7b      	ldr	r3, [pc, #492]	; (8001a10 <setPWM+0x324>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b7b      	ldr	r3, [pc, #492]	; (8001a14 <setPWM+0x328>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	ee07 3a90 	vmov	s15, r3
 8001832:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001836:	edd7 7a03 	vldr	s15, [r7, #12]
 800183a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001842:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001846:	4b70      	ldr	r3, [pc, #448]	; (8001a08 <setPWM+0x31c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800184e:	ee17 2a90 	vmov	r2, s15
 8001852:	635a      	str	r2, [r3, #52]	; 0x34
			setGateH1B(TRUE);
 8001854:	2300      	movs	r3, #0
 8001856:	2201      	movs	r2, #1
 8001858:	f362 0307 	bfi	r3, r2, #0, #8
 800185c:	4618      	mov	r0, r3
 800185e:	f001 fffb 	bl	8003858 <setGateH1B>
 8001862:	e029      	b.n	80018b8 <setPWM+0x1cc>
		}
		else {
			setGateH1B(FALSE);
 8001864:	2300      	movs	r3, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f001 fff6 	bl	8003858 <setGateH1B>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800186c:	4b66      	ldr	r3, [pc, #408]	; (8001a08 <setPWM+0x31c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2200      	movs	r2, #0
 8001872:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, freq_PWM_MO/freq_PWM_CH1 * (-dutyCH1) + 1);
 8001874:	4b66      	ldr	r3, [pc, #408]	; (8001a10 <setPWM+0x324>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b66      	ldr	r3, [pc, #408]	; (8001a14 <setPWM+0x328>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001888:	edd7 7a03 	vldr	s15, [r7, #12]
 800188c:	eef1 7a67 	vneg.f32	s15, s15
 8001890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001894:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001898:	ee77 7a87 	vadd.f32	s15, s15, s14
 800189c:	4b5a      	ldr	r3, [pc, #360]	; (8001a08 <setPWM+0x31c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018a4:	ee17 2a90 	vmov	r2, s15
 80018a8:	639a      	str	r2, [r3, #56]	; 0x38
			setGateH1A(TRUE);
 80018aa:	2300      	movs	r3, #0
 80018ac:	2201      	movs	r2, #1
 80018ae:	f362 0307 	bfi	r3, r2, #0, #8
 80018b2:	4618      	mov	r0, r3
 80018b4:	f001 ffaa 	bl	800380c <setGateH1A>
		}
	}
	if(!getCh2_OnOff().val_bool) {
 80018b8:	f001 fba0 	bl	8002ffc <getCh2_OnOff>
 80018bc:	4603      	mov	r3, r0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f083 0301 	eor.w	r3, r3, #1
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d01c      	beq.n	8001904 <setPWM+0x218>
		setPWM_CH2((valueTypes)0.0f);
 80018ca:	2300      	movs	r3, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 f867 	bl	80039a0 <setPWM_CH2>
		setGate2A_OnOff(FALSE);
 80018d2:	2300      	movs	r3, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f001 ff4d 	bl	8003774 <setGate2A_OnOff>
		setGate2B_OnOff(FALSE);
 80018da:	2300      	movs	r3, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f001 ff6f 	bl	80037c0 <setGate2B_OnOff>
		setGateH2A(FALSE);
 80018e2:	2300      	movs	r3, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f001 ffdd 	bl	80038a4 <setGateH2A>
		setGateH2B(FALSE);
 80018ea:	2300      	movs	r3, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f001 ffff 	bl	80038f0 <setGateH2B>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80018f2:	4b49      	ldr	r3, [pc, #292]	; (8001a18 <setPWM+0x32c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2200      	movs	r2, #0
 80018f8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80018fa:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <setPWM+0x32c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2200      	movs	r2, #0
 8001900:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, freq_PWM_MO/freq_PWM_CH2 * (-dutyCH2) + 1);
			setGateH2A(TRUE);
		}
	}
}
 8001902:	e0b9      	b.n	8001a78 <setPWM+0x38c>
		setGate2A_OnOff(TRUE);
 8001904:	2300      	movs	r3, #0
 8001906:	2201      	movs	r2, #1
 8001908:	f362 0307 	bfi	r3, r2, #0, #8
 800190c:	4618      	mov	r0, r3
 800190e:	f001 ff31 	bl	8003774 <setGate2A_OnOff>
		setGate2B_OnOff(TRUE);
 8001912:	2300      	movs	r3, #0
 8001914:	2201      	movs	r2, #1
 8001916:	f362 0307 	bfi	r3, r2, #0, #8
 800191a:	4618      	mov	r0, r3
 800191c:	f001 ff50 	bl	80037c0 <setGate2B_OnOff>
		if(getModeSelect2().val_bool)
 8001920:	f001 fb30 	bl	8002f84 <getModeSelect2>
 8001924:	4603      	mov	r3, r0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <setPWM+0x24e>
			setPWM_CH2(getI2Set());
 800192c:	f001 feca 	bl	80036c4 <getI2Set>
 8001930:	4603      	mov	r3, r0
 8001932:	4618      	mov	r0, r3
 8001934:	f002 f834 	bl	80039a0 <setPWM_CH2>
 8001938:	e008      	b.n	800194c <setPWM+0x260>
			setPWM_CH2((valueTypes)proceedPID(1));
 800193a:	2001      	movs	r0, #1
 800193c:	f7ff fb9a 	bl	8001074 <proceedPID>
 8001940:	ed87 0a01 	vstr	s0, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4618      	mov	r0, r3
 8001948:	f002 f82a 	bl	80039a0 <setPWM_CH2>
		float dutyCH2 = getPWM_CH2().val_float/100.0f;
 800194c:	f002 f84e 	bl	80039ec <getPWM_CH2>
 8001950:	4603      	mov	r3, r0
 8001952:	ee06 3a90 	vmov	s13, r3
 8001956:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001a1c <setPWM+0x330>
 800195a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195e:	edc7 7a02 	vstr	s15, [r7, #8]
		if(!getCH2_Polarity().val_bool) {
 8001962:	f002 f87b 	bl	8003a5c <getCH2_Polarity>
 8001966:	4603      	mov	r3, r0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	f083 0301 	eor.w	r3, r3, #1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <setPWM+0x294>
			dutyCH2 = dutyCH2*(-1.0f);
 8001974:	edd7 7a02 	vldr	s15, [r7, #8]
 8001978:	eef1 7a67 	vneg.f32	s15, s15
 800197c:	edc7 7a02 	vstr	s15, [r7, #8]
		if(!getLoadSelect1().val_bool && dutyCH2 < 0.0f) {
 8001980:	f001 fa9a 	bl	8002eb8 <getLoadSelect1>
 8001984:	4603      	mov	r3, r0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f083 0301 	eor.w	r3, r3, #1
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d009      	beq.n	80019a6 <setPWM+0x2ba>
 8001992:	edd7 7a02 	vldr	s15, [r7, #8]
 8001996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	d502      	bpl.n	80019a6 <setPWM+0x2ba>
			dutyCH2 = 0.0f;
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
		if(dutyCH2 > 0) {
 80019a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b2:	dd37      	ble.n	8001a24 <setPWM+0x338>
			setGateH2A(FALSE);
 80019b4:	2300      	movs	r3, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 ff74 	bl	80038a4 <setGateH2A>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80019bc:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <setPWM+0x32c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2200      	movs	r2, #0
 80019c2:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, freq_PWM_MO/freq_PWM_CH2 * dutyCH2 - 1);
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <setPWM+0x324>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <setPWM+0x334>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d0:	ee07 3a90 	vmov	s15, r3
 80019d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80019dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <setPWM+0x32c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f0:	ee17 2a90 	vmov	r2, s15
 80019f4:	635a      	str	r2, [r3, #52]	; 0x34
			setGateH2B(TRUE);
 80019f6:	2300      	movs	r3, #0
 80019f8:	2201      	movs	r2, #1
 80019fa:	f362 0307 	bfi	r3, r2, #0, #8
 80019fe:	4618      	mov	r0, r3
 8001a00:	f001 ff76 	bl	80038f0 <setGateH2B>
}
 8001a04:	e038      	b.n	8001a78 <setPWM+0x38c>
 8001a06:	bf00      	nop
 8001a08:	20001f34 	.word	0x20001f34
 8001a0c:	40590000 	.word	0x40590000
 8001a10:	20001318 	.word	0x20001318
 8001a14:	2000131c 	.word	0x2000131c
 8001a18:	20001f7c 	.word	0x20001f7c
 8001a1c:	42c80000 	.word	0x42c80000
 8001a20:	20001320 	.word	0x20001320
			setGateH2B(FALSE);
 8001a24:	2300      	movs	r3, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f001 ff62 	bl	80038f0 <setGateH2B>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <setPWM+0x394>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2200      	movs	r2, #0
 8001a32:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, freq_PWM_MO/freq_PWM_CH2 * (-dutyCH2) + 1);
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <setPWM+0x398>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <setPWM+0x39c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a48:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a4c:	eef1 7a67 	vneg.f32	s15, s15
 8001a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <setPWM+0x394>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a64:	ee17 2a90 	vmov	r2, s15
 8001a68:	639a      	str	r2, [r3, #56]	; 0x38
			setGateH2A(TRUE);
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f362 0307 	bfi	r3, r2, #0, #8
 8001a72:	4618      	mov	r0, r3
 8001a74:	f001 ff16 	bl	80038a4 <setGateH2A>
}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20001f7c 	.word	0x20001f7c
 8001a84:	20001318 	.word	0x20001318
 8001a88:	20001320 	.word	0x20001320

08001a8c <InitParams>:
							.commandDescription = "Alarm masks vector (0 - masked)",
							.type = UINT32_T,
							.value.val_uint32_t = 0};


void InitParams() {
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	71bb      	strb	r3, [r7, #6]
	params[i++] = &ParamList;
 8001a96:	79bb      	ldrb	r3, [r7, #6]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	71ba      	strb	r2, [r7, #6]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4bb8      	ldr	r3, [pc, #736]	; (8001d80 <InitParams+0x2f4>)
 8001aa0:	4ab8      	ldr	r2, [pc, #736]	; (8001d84 <InitParams+0x2f8>)
 8001aa2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &SaveFlash;
 8001aa6:	79bb      	ldrb	r3, [r7, #6]
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	71ba      	strb	r2, [r7, #6]
 8001aac:	4619      	mov	r1, r3
 8001aae:	4bb4      	ldr	r3, [pc, #720]	; (8001d80 <InitParams+0x2f4>)
 8001ab0:	4ab5      	ldr	r2, [pc, #724]	; (8001d88 <InitParams+0x2fc>)
 8001ab2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &U_HeaterSet;
 8001ab6:	79bb      	ldrb	r3, [r7, #6]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	71ba      	strb	r2, [r7, #6]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4bb0      	ldr	r3, [pc, #704]	; (8001d80 <InitParams+0x2f4>)
 8001ac0:	4ab2      	ldr	r2, [pc, #712]	; (8001d8c <InitParams+0x300>)
 8001ac2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_HeaterMin;
 8001ac6:	79bb      	ldrb	r3, [r7, #6]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	71ba      	strb	r2, [r7, #6]
 8001acc:	4619      	mov	r1, r3
 8001ace:	4bac      	ldr	r3, [pc, #688]	; (8001d80 <InitParams+0x2f4>)
 8001ad0:	4aaf      	ldr	r2, [pc, #700]	; (8001d90 <InitParams+0x304>)
 8001ad2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_HeaterMax;
 8001ad6:	79bb      	ldrb	r3, [r7, #6]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	71ba      	strb	r2, [r7, #6]
 8001adc:	4619      	mov	r1, r3
 8001ade:	4ba8      	ldr	r3, [pc, #672]	; (8001d80 <InitParams+0x2f4>)
 8001ae0:	4aac      	ldr	r2, [pc, #688]	; (8001d94 <InitParams+0x308>)
 8001ae2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_HeaterOnOff;
 8001ae6:	79bb      	ldrb	r3, [r7, #6]
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	71ba      	strb	r2, [r7, #6]
 8001aec:	4619      	mov	r1, r3
 8001aee:	4ba4      	ldr	r3, [pc, #656]	; (8001d80 <InitParams+0x2f4>)
 8001af0:	4aa9      	ldr	r2, [pc, #676]	; (8001d98 <InitParams+0x30c>)
 8001af2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_24Vmeas;
 8001af6:	79bb      	ldrb	r3, [r7, #6]
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	71ba      	strb	r2, [r7, #6]
 8001afc:	4619      	mov	r1, r3
 8001afe:	4ba0      	ldr	r3, [pc, #640]	; (8001d80 <InitParams+0x2f4>)
 8001b00:	4aa6      	ldr	r2, [pc, #664]	; (8001d9c <InitParams+0x310>)
 8001b02:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_24Vcoeff;
 8001b06:	79bb      	ldrb	r3, [r7, #6]
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	71ba      	strb	r2, [r7, #6]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4b9c      	ldr	r3, [pc, #624]	; (8001d80 <InitParams+0x2f4>)
 8001b10:	4aa3      	ldr	r2, [pc, #652]	; (8001da0 <InitParams+0x314>)
 8001b12:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_HeaterMeas;
 8001b16:	79bb      	ldrb	r3, [r7, #6]
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	71ba      	strb	r2, [r7, #6]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4b98      	ldr	r3, [pc, #608]	; (8001d80 <InitParams+0x2f4>)
 8001b20:	4aa0      	ldr	r2, [pc, #640]	; (8001da4 <InitParams+0x318>)
 8001b22:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_HeaterCoeff;
 8001b26:	79bb      	ldrb	r3, [r7, #6]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	71ba      	strb	r2, [r7, #6]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4b94      	ldr	r3, [pc, #592]	; (8001d80 <InitParams+0x2f4>)
 8001b30:	4a9d      	ldr	r2, [pc, #628]	; (8001da8 <InitParams+0x31c>)
 8001b32:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_24V_Min;
 8001b36:	79bb      	ldrb	r3, [r7, #6]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	71ba      	strb	r2, [r7, #6]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4b90      	ldr	r3, [pc, #576]	; (8001d80 <InitParams+0x2f4>)
 8001b40:	4a9a      	ldr	r2, [pc, #616]	; (8001dac <InitParams+0x320>)
 8001b42:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &U_24V_Max;
 8001b46:	79bb      	ldrb	r3, [r7, #6]
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	71ba      	strb	r2, [r7, #6]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4b8c      	ldr	r3, [pc, #560]	; (8001d80 <InitParams+0x2f4>)
 8001b50:	4a97      	ldr	r2, [pc, #604]	; (8001db0 <InitParams+0x324>)
 8001b52:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &I_1A;
 8001b56:	79bb      	ldrb	r3, [r7, #6]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	71ba      	strb	r2, [r7, #6]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4b88      	ldr	r3, [pc, #544]	; (8001d80 <InitParams+0x2f4>)
 8001b60:	4a94      	ldr	r2, [pc, #592]	; (8001db4 <InitParams+0x328>)
 8001b62:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1B;
 8001b66:	79bb      	ldrb	r3, [r7, #6]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	71ba      	strb	r2, [r7, #6]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4b84      	ldr	r3, [pc, #528]	; (8001d80 <InitParams+0x2f4>)
 8001b70:	4a91      	ldr	r2, [pc, #580]	; (8001db8 <InitParams+0x32c>)
 8001b72:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2A;
 8001b76:	79bb      	ldrb	r3, [r7, #6]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	71ba      	strb	r2, [r7, #6]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4b80      	ldr	r3, [pc, #512]	; (8001d80 <InitParams+0x2f4>)
 8001b80:	4a8e      	ldr	r2, [pc, #568]	; (8001dbc <InitParams+0x330>)
 8001b82:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2B;
 8001b86:	79bb      	ldrb	r3, [r7, #6]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	71ba      	strb	r2, [r7, #6]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4b7c      	ldr	r3, [pc, #496]	; (8001d80 <InitParams+0x2f4>)
 8001b90:	4a8b      	ldr	r2, [pc, #556]	; (8001dc0 <InitParams+0x334>)
 8001b92:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1A_Coeff;
 8001b96:	79bb      	ldrb	r3, [r7, #6]
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	71ba      	strb	r2, [r7, #6]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4b78      	ldr	r3, [pc, #480]	; (8001d80 <InitParams+0x2f4>)
 8001ba0:	4a88      	ldr	r2, [pc, #544]	; (8001dc4 <InitParams+0x338>)
 8001ba2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1B_Coeff;
 8001ba6:	79bb      	ldrb	r3, [r7, #6]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	71ba      	strb	r2, [r7, #6]
 8001bac:	4619      	mov	r1, r3
 8001bae:	4b74      	ldr	r3, [pc, #464]	; (8001d80 <InitParams+0x2f4>)
 8001bb0:	4a85      	ldr	r2, [pc, #532]	; (8001dc8 <InitParams+0x33c>)
 8001bb2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2A_Coeff;
 8001bb6:	79bb      	ldrb	r3, [r7, #6]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	71ba      	strb	r2, [r7, #6]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4b70      	ldr	r3, [pc, #448]	; (8001d80 <InitParams+0x2f4>)
 8001bc0:	4a82      	ldr	r2, [pc, #520]	; (8001dcc <InitParams+0x340>)
 8001bc2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2B_Coeff;
 8001bc6:	79bb      	ldrb	r3, [r7, #6]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	71ba      	strb	r2, [r7, #6]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4b6c      	ldr	r3, [pc, #432]	; (8001d80 <InitParams+0x2f4>)
 8001bd0:	4a7f      	ldr	r2, [pc, #508]	; (8001dd0 <InitParams+0x344>)
 8001bd2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1A_Max;
 8001bd6:	79bb      	ldrb	r3, [r7, #6]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	71ba      	strb	r2, [r7, #6]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4b68      	ldr	r3, [pc, #416]	; (8001d80 <InitParams+0x2f4>)
 8001be0:	4a7c      	ldr	r2, [pc, #496]	; (8001dd4 <InitParams+0x348>)
 8001be2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_1B_Max;
 8001be6:	79bb      	ldrb	r3, [r7, #6]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	71ba      	strb	r2, [r7, #6]
 8001bec:	4619      	mov	r1, r3
 8001bee:	4b64      	ldr	r3, [pc, #400]	; (8001d80 <InitParams+0x2f4>)
 8001bf0:	4a79      	ldr	r2, [pc, #484]	; (8001dd8 <InitParams+0x34c>)
 8001bf2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2A_Max;
 8001bf6:	79bb      	ldrb	r3, [r7, #6]
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	71ba      	strb	r2, [r7, #6]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4b60      	ldr	r3, [pc, #384]	; (8001d80 <InitParams+0x2f4>)
 8001c00:	4a76      	ldr	r2, [pc, #472]	; (8001ddc <InitParams+0x350>)
 8001c02:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I_2B_Max;
 8001c06:	79bb      	ldrb	r3, [r7, #6]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	71ba      	strb	r2, [r7, #6]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4b5c      	ldr	r3, [pc, #368]	; (8001d80 <InitParams+0x2f4>)
 8001c10:	4a73      	ldr	r2, [pc, #460]	; (8001de0 <InitParams+0x354>)
 8001c12:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Temp1;
 8001c16:	79bb      	ldrb	r3, [r7, #6]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	71ba      	strb	r2, [r7, #6]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4b58      	ldr	r3, [pc, #352]	; (8001d80 <InitParams+0x2f4>)
 8001c20:	4a70      	ldr	r2, [pc, #448]	; (8001de4 <InitParams+0x358>)
 8001c22:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp2;
 8001c26:	79bb      	ldrb	r3, [r7, #6]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	71ba      	strb	r2, [r7, #6]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4b54      	ldr	r3, [pc, #336]	; (8001d80 <InitParams+0x2f4>)
 8001c30:	4a6d      	ldr	r2, [pc, #436]	; (8001de8 <InitParams+0x35c>)
 8001c32:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp3;
 8001c36:	79bb      	ldrb	r3, [r7, #6]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	71ba      	strb	r2, [r7, #6]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <InitParams+0x2f4>)
 8001c40:	4a6a      	ldr	r2, [pc, #424]	; (8001dec <InitParams+0x360>)
 8001c42:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp4;
 8001c46:	79bb      	ldrb	r3, [r7, #6]
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	71ba      	strb	r2, [r7, #6]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <InitParams+0x2f4>)
 8001c50:	4a67      	ldr	r2, [pc, #412]	; (8001df0 <InitParams+0x364>)
 8001c52:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp1_coeff;
 8001c56:	79bb      	ldrb	r3, [r7, #6]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	71ba      	strb	r2, [r7, #6]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4b48      	ldr	r3, [pc, #288]	; (8001d80 <InitParams+0x2f4>)
 8001c60:	4a64      	ldr	r2, [pc, #400]	; (8001df4 <InitParams+0x368>)
 8001c62:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp2_coeff;
 8001c66:	79bb      	ldrb	r3, [r7, #6]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	71ba      	strb	r2, [r7, #6]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4b44      	ldr	r3, [pc, #272]	; (8001d80 <InitParams+0x2f4>)
 8001c70:	4a61      	ldr	r2, [pc, #388]	; (8001df8 <InitParams+0x36c>)
 8001c72:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp3_coeff;
 8001c76:	79bb      	ldrb	r3, [r7, #6]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	71ba      	strb	r2, [r7, #6]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4b40      	ldr	r3, [pc, #256]	; (8001d80 <InitParams+0x2f4>)
 8001c80:	4a5e      	ldr	r2, [pc, #376]	; (8001dfc <InitParams+0x370>)
 8001c82:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp4_coeff;
 8001c86:	79bb      	ldrb	r3, [r7, #6]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	71ba      	strb	r2, [r7, #6]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <InitParams+0x2f4>)
 8001c90:	4a5b      	ldr	r2, [pc, #364]	; (8001e00 <InitParams+0x374>)
 8001c92:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp1_Min;
 8001c96:	79bb      	ldrb	r3, [r7, #6]
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	71ba      	strb	r2, [r7, #6]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <InitParams+0x2f4>)
 8001ca0:	4a58      	ldr	r2, [pc, #352]	; (8001e04 <InitParams+0x378>)
 8001ca2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp1_Max;
 8001ca6:	79bb      	ldrb	r3, [r7, #6]
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	71ba      	strb	r2, [r7, #6]
 8001cac:	4619      	mov	r1, r3
 8001cae:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <InitParams+0x2f4>)
 8001cb0:	4a55      	ldr	r2, [pc, #340]	; (8001e08 <InitParams+0x37c>)
 8001cb2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp2_Min;
 8001cb6:	79bb      	ldrb	r3, [r7, #6]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	71ba      	strb	r2, [r7, #6]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <InitParams+0x2f4>)
 8001cc0:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <InitParams+0x380>)
 8001cc2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp2_Max;
 8001cc6:	79bb      	ldrb	r3, [r7, #6]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	71ba      	strb	r2, [r7, #6]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <InitParams+0x2f4>)
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <InitParams+0x384>)
 8001cd2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp3_Min;
 8001cd6:	79bb      	ldrb	r3, [r7, #6]
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	71ba      	strb	r2, [r7, #6]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <InitParams+0x2f4>)
 8001ce0:	4a4c      	ldr	r2, [pc, #304]	; (8001e14 <InitParams+0x388>)
 8001ce2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp3_Max;
 8001ce6:	79bb      	ldrb	r3, [r7, #6]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	71ba      	strb	r2, [r7, #6]
 8001cec:	4619      	mov	r1, r3
 8001cee:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <InitParams+0x2f4>)
 8001cf0:	4a49      	ldr	r2, [pc, #292]	; (8001e18 <InitParams+0x38c>)
 8001cf2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp4_Min;
 8001cf6:	79bb      	ldrb	r3, [r7, #6]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	71ba      	strb	r2, [r7, #6]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <InitParams+0x2f4>)
 8001d00:	4a46      	ldr	r2, [pc, #280]	; (8001e1c <InitParams+0x390>)
 8001d02:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Temp4_Max;
 8001d06:	79bb      	ldrb	r3, [r7, #6]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	71ba      	strb	r2, [r7, #6]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <InitParams+0x2f4>)
 8001d10:	4a43      	ldr	r2, [pc, #268]	; (8001e20 <InitParams+0x394>)
 8001d12:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &LoadSelect1;
 8001d16:	79bb      	ldrb	r3, [r7, #6]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	71ba      	strb	r2, [r7, #6]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <InitParams+0x2f4>)
 8001d20:	4a40      	ldr	r2, [pc, #256]	; (8001e24 <InitParams+0x398>)
 8001d22:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &LoadSelect2;
 8001d26:	79bb      	ldrb	r3, [r7, #6]
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	71ba      	strb	r2, [r7, #6]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <InitParams+0x2f4>)
 8001d30:	4a3d      	ldr	r2, [pc, #244]	; (8001e28 <InitParams+0x39c>)
 8001d32:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &ModeSelect1;
 8001d36:	79bb      	ldrb	r3, [r7, #6]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	71ba      	strb	r2, [r7, #6]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <InitParams+0x2f4>)
 8001d40:	4a3a      	ldr	r2, [pc, #232]	; (8001e2c <InitParams+0x3a0>)
 8001d42:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &ModeSelect2;
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	71ba      	strb	r2, [r7, #6]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <InitParams+0x2f4>)
 8001d50:	4a37      	ldr	r2, [pc, #220]	; (8001e30 <InitParams+0x3a4>)
 8001d52:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Ch1_OnOff;
 8001d56:	79bb      	ldrb	r3, [r7, #6]
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	71ba      	strb	r2, [r7, #6]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <InitParams+0x2f4>)
 8001d60:	4a34      	ldr	r2, [pc, #208]	; (8001e34 <InitParams+0x3a8>)
 8001d62:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Ch2_OnOff;
 8001d66:	79bb      	ldrb	r3, [r7, #6]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	71ba      	strb	r2, [r7, #6]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <InitParams+0x2f4>)
 8001d70:	4a31      	ldr	r2, [pc, #196]	; (8001e38 <InitParams+0x3ac>)
 8001d72:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &SourceSelect1;
 8001d76:	79bb      	ldrb	r3, [r7, #6]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	71ba      	strb	r2, [r7, #6]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	e05d      	b.n	8001e3c <InitParams+0x3b0>
 8001d80:	20001604 	.word	0x20001604
 8001d84:	20000028 	.word	0x20000028
 8001d88:	20000064 	.word	0x20000064
 8001d8c:	200000a0 	.word	0x200000a0
 8001d90:	200000dc 	.word	0x200000dc
 8001d94:	20000118 	.word	0x20000118
 8001d98:	20000154 	.word	0x20000154
 8001d9c:	20000190 	.word	0x20000190
 8001da0:	200001cc 	.word	0x200001cc
 8001da4:	20000208 	.word	0x20000208
 8001da8:	20000244 	.word	0x20000244
 8001dac:	20000280 	.word	0x20000280
 8001db0:	200002bc 	.word	0x200002bc
 8001db4:	200002f8 	.word	0x200002f8
 8001db8:	20000334 	.word	0x20000334
 8001dbc:	20000370 	.word	0x20000370
 8001dc0:	200003ac 	.word	0x200003ac
 8001dc4:	200003e8 	.word	0x200003e8
 8001dc8:	20000424 	.word	0x20000424
 8001dcc:	20000460 	.word	0x20000460
 8001dd0:	2000049c 	.word	0x2000049c
 8001dd4:	200004d8 	.word	0x200004d8
 8001dd8:	20000514 	.word	0x20000514
 8001ddc:	20000550 	.word	0x20000550
 8001de0:	2000058c 	.word	0x2000058c
 8001de4:	200005c8 	.word	0x200005c8
 8001de8:	20000604 	.word	0x20000604
 8001dec:	20000640 	.word	0x20000640
 8001df0:	2000067c 	.word	0x2000067c
 8001df4:	200006b8 	.word	0x200006b8
 8001df8:	200006f4 	.word	0x200006f4
 8001dfc:	20000730 	.word	0x20000730
 8001e00:	2000076c 	.word	0x2000076c
 8001e04:	200007a8 	.word	0x200007a8
 8001e08:	200007e4 	.word	0x200007e4
 8001e0c:	20000820 	.word	0x20000820
 8001e10:	2000085c 	.word	0x2000085c
 8001e14:	20000898 	.word	0x20000898
 8001e18:	200008d4 	.word	0x200008d4
 8001e1c:	20000910 	.word	0x20000910
 8001e20:	2000094c 	.word	0x2000094c
 8001e24:	20000988 	.word	0x20000988
 8001e28:	200009c4 	.word	0x200009c4
 8001e2c:	20000a00 	.word	0x20000a00
 8001e30:	20000a3c 	.word	0x20000a3c
 8001e34:	20000a78 	.word	0x20000a78
 8001e38:	20000ab4 	.word	0x20000ab4
 8001e3c:	4b93      	ldr	r3, [pc, #588]	; (800208c <InitParams+0x600>)
 8001e3e:	4a94      	ldr	r2, [pc, #592]	; (8002090 <InitParams+0x604>)
 8001e40:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &SourceSelect2;
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	71ba      	strb	r2, [r7, #6]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4b8f      	ldr	r3, [pc, #572]	; (800208c <InitParams+0x600>)
 8001e4e:	4a91      	ldr	r2, [pc, #580]	; (8002094 <InitParams+0x608>)
 8001e50:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Pcoeff1Temp;
 8001e54:	79bb      	ldrb	r3, [r7, #6]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	71ba      	strb	r2, [r7, #6]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4b8b      	ldr	r3, [pc, #556]	; (800208c <InitParams+0x600>)
 8001e5e:	4a8e      	ldr	r2, [pc, #568]	; (8002098 <InitParams+0x60c>)
 8001e60:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Pcoeff2Temp;
 8001e64:	79bb      	ldrb	r3, [r7, #6]
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	71ba      	strb	r2, [r7, #6]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4b87      	ldr	r3, [pc, #540]	; (800208c <InitParams+0x600>)
 8001e6e:	4a8b      	ldr	r2, [pc, #556]	; (800209c <InitParams+0x610>)
 8001e70:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Icoeff1Temp;
 8001e74:	79bb      	ldrb	r3, [r7, #6]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	71ba      	strb	r2, [r7, #6]
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4b83      	ldr	r3, [pc, #524]	; (800208c <InitParams+0x600>)
 8001e7e:	4a88      	ldr	r2, [pc, #544]	; (80020a0 <InitParams+0x614>)
 8001e80:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Icoeff2Temp;
 8001e84:	79bb      	ldrb	r3, [r7, #6]
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	71ba      	strb	r2, [r7, #6]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4b7f      	ldr	r3, [pc, #508]	; (800208c <InitParams+0x600>)
 8001e8e:	4a85      	ldr	r2, [pc, #532]	; (80020a4 <InitParams+0x618>)
 8001e90:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Dcoeff1Temp;
 8001e94:	79bb      	ldrb	r3, [r7, #6]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	71ba      	strb	r2, [r7, #6]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4b7b      	ldr	r3, [pc, #492]	; (800208c <InitParams+0x600>)
 8001e9e:	4a82      	ldr	r2, [pc, #520]	; (80020a8 <InitParams+0x61c>)
 8001ea0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Dcoeff2Temp;
 8001ea4:	79bb      	ldrb	r3, [r7, #6]
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	71ba      	strb	r2, [r7, #6]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4b77      	ldr	r3, [pc, #476]	; (800208c <InitParams+0x600>)
 8001eae:	4a7f      	ldr	r2, [pc, #508]	; (80020ac <InitParams+0x620>)
 8001eb0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Pcoeff1Freq;
 8001eb4:	79bb      	ldrb	r3, [r7, #6]
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	71ba      	strb	r2, [r7, #6]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4b73      	ldr	r3, [pc, #460]	; (800208c <InitParams+0x600>)
 8001ebe:	4a7c      	ldr	r2, [pc, #496]	; (80020b0 <InitParams+0x624>)
 8001ec0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Pcoeff2Freq;
 8001ec4:	79bb      	ldrb	r3, [r7, #6]
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	71ba      	strb	r2, [r7, #6]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4b6f      	ldr	r3, [pc, #444]	; (800208c <InitParams+0x600>)
 8001ece:	4a79      	ldr	r2, [pc, #484]	; (80020b4 <InitParams+0x628>)
 8001ed0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Icoeff1Freq;
 8001ed4:	79bb      	ldrb	r3, [r7, #6]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	71ba      	strb	r2, [r7, #6]
 8001eda:	4619      	mov	r1, r3
 8001edc:	4b6b      	ldr	r3, [pc, #428]	; (800208c <InitParams+0x600>)
 8001ede:	4a76      	ldr	r2, [pc, #472]	; (80020b8 <InitParams+0x62c>)
 8001ee0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Icoeff2Freq;
 8001ee4:	79bb      	ldrb	r3, [r7, #6]
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	71ba      	strb	r2, [r7, #6]
 8001eea:	4619      	mov	r1, r3
 8001eec:	4b67      	ldr	r3, [pc, #412]	; (800208c <InitParams+0x600>)
 8001eee:	4a73      	ldr	r2, [pc, #460]	; (80020bc <InitParams+0x630>)
 8001ef0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Dcoeff1Freq;
 8001ef4:	79bb      	ldrb	r3, [r7, #6]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	71ba      	strb	r2, [r7, #6]
 8001efa:	4619      	mov	r1, r3
 8001efc:	4b63      	ldr	r3, [pc, #396]	; (800208c <InitParams+0x600>)
 8001efe:	4a70      	ldr	r2, [pc, #448]	; (80020c0 <InitParams+0x634>)
 8001f00:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Dcoeff2Freq;
 8001f04:	79bb      	ldrb	r3, [r7, #6]
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	71ba      	strb	r2, [r7, #6]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4b5f      	ldr	r3, [pc, #380]	; (800208c <InitParams+0x600>)
 8001f0e:	4a6d      	ldr	r2, [pc, #436]	; (80020c4 <InitParams+0x638>)
 8001f10:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &TempCh1Set;
 8001f14:	79bb      	ldrb	r3, [r7, #6]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	71ba      	strb	r2, [r7, #6]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4b5b      	ldr	r3, [pc, #364]	; (800208c <InitParams+0x600>)
 8001f1e:	4a6a      	ldr	r2, [pc, #424]	; (80020c8 <InitParams+0x63c>)
 8001f20:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &TempCh2Set;
 8001f24:	79bb      	ldrb	r3, [r7, #6]
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	71ba      	strb	r2, [r7, #6]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4b57      	ldr	r3, [pc, #348]	; (800208c <InitParams+0x600>)
 8001f2e:	4a67      	ldr	r2, [pc, #412]	; (80020cc <InitParams+0x640>)
 8001f30:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &I1Set;
 8001f34:	79bb      	ldrb	r3, [r7, #6]
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	71ba      	strb	r2, [r7, #6]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4b53      	ldr	r3, [pc, #332]	; (800208c <InitParams+0x600>)
 8001f3e:	4a64      	ldr	r2, [pc, #400]	; (80020d0 <InitParams+0x644>)
 8001f40:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &I2Set;
 8001f44:	79bb      	ldrb	r3, [r7, #6]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	71ba      	strb	r2, [r7, #6]
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4b4f      	ldr	r3, [pc, #316]	; (800208c <InitParams+0x600>)
 8001f4e:	4a61      	ldr	r2, [pc, #388]	; (80020d4 <InitParams+0x648>)
 8001f50:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Gate1A_OnOff;
 8001f54:	79bb      	ldrb	r3, [r7, #6]
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	71ba      	strb	r2, [r7, #6]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4b4b      	ldr	r3, [pc, #300]	; (800208c <InitParams+0x600>)
 8001f5e:	4a5e      	ldr	r2, [pc, #376]	; (80020d8 <InitParams+0x64c>)
 8001f60:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Gate1B_OnOff;
 8001f64:	79bb      	ldrb	r3, [r7, #6]
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	71ba      	strb	r2, [r7, #6]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4b47      	ldr	r3, [pc, #284]	; (800208c <InitParams+0x600>)
 8001f6e:	4a5b      	ldr	r2, [pc, #364]	; (80020dc <InitParams+0x650>)
 8001f70:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Gate2A_OnOff;
 8001f74:	79bb      	ldrb	r3, [r7, #6]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	71ba      	strb	r2, [r7, #6]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4b43      	ldr	r3, [pc, #268]	; (800208c <InitParams+0x600>)
 8001f7e:	4a58      	ldr	r2, [pc, #352]	; (80020e0 <InitParams+0x654>)
 8001f80:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &Gate2B_OnOff;
 8001f84:	79bb      	ldrb	r3, [r7, #6]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	71ba      	strb	r2, [r7, #6]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4b3f      	ldr	r3, [pc, #252]	; (800208c <InitParams+0x600>)
 8001f8e:	4a55      	ldr	r2, [pc, #340]	; (80020e4 <InitParams+0x658>)
 8001f90:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &GateH1A;
 8001f94:	79bb      	ldrb	r3, [r7, #6]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	71ba      	strb	r2, [r7, #6]
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4b3b      	ldr	r3, [pc, #236]	; (800208c <InitParams+0x600>)
 8001f9e:	4a52      	ldr	r2, [pc, #328]	; (80020e8 <InitParams+0x65c>)
 8001fa0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &GateH1B;
 8001fa4:	79bb      	ldrb	r3, [r7, #6]
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	71ba      	strb	r2, [r7, #6]
 8001faa:	4619      	mov	r1, r3
 8001fac:	4b37      	ldr	r3, [pc, #220]	; (800208c <InitParams+0x600>)
 8001fae:	4a4f      	ldr	r2, [pc, #316]	; (80020ec <InitParams+0x660>)
 8001fb0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &GateH2A;
 8001fb4:	79bb      	ldrb	r3, [r7, #6]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	71ba      	strb	r2, [r7, #6]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4b33      	ldr	r3, [pc, #204]	; (800208c <InitParams+0x600>)
 8001fbe:	4a4c      	ldr	r2, [pc, #304]	; (80020f0 <InitParams+0x664>)
 8001fc0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &GateH2B;
 8001fc4:	79bb      	ldrb	r3, [r7, #6]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	71ba      	strb	r2, [r7, #6]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4b2f      	ldr	r3, [pc, #188]	; (800208c <InitParams+0x600>)
 8001fce:	4a49      	ldr	r2, [pc, #292]	; (80020f4 <InitParams+0x668>)
 8001fd0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &PWM_CH1;
 8001fd4:	79bb      	ldrb	r3, [r7, #6]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	71ba      	strb	r2, [r7, #6]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	; (800208c <InitParams+0x600>)
 8001fde:	4a46      	ldr	r2, [pc, #280]	; (80020f8 <InitParams+0x66c>)
 8001fe0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &PWM_CH2;
 8001fe4:	79bb      	ldrb	r3, [r7, #6]
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	71ba      	strb	r2, [r7, #6]
 8001fea:	4619      	mov	r1, r3
 8001fec:	4b27      	ldr	r3, [pc, #156]	; (800208c <InitParams+0x600>)
 8001fee:	4a43      	ldr	r2, [pc, #268]	; (80020fc <InitParams+0x670>)
 8001ff0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &CH1_Polarity;
 8001ff4:	79bb      	ldrb	r3, [r7, #6]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	71ba      	strb	r2, [r7, #6]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4b23      	ldr	r3, [pc, #140]	; (800208c <InitParams+0x600>)
 8001ffe:	4a40      	ldr	r2, [pc, #256]	; (8002100 <InitParams+0x674>)
 8002000:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &CH2_Polarity;
 8002004:	79bb      	ldrb	r3, [r7, #6]
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	71ba      	strb	r2, [r7, #6]
 800200a:	4619      	mov	r1, r3
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <InitParams+0x600>)
 800200e:	4a3d      	ldr	r2, [pc, #244]	; (8002104 <InitParams+0x678>)
 8002010:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Freq;
 8002014:	79bb      	ldrb	r3, [r7, #6]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	71ba      	strb	r2, [r7, #6]
 800201a:	4619      	mov	r1, r3
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <InitParams+0x600>)
 800201e:	4a3a      	ldr	r2, [pc, #232]	; (8002108 <InitParams+0x67c>)
 8002020:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &FreqSet;
 8002024:	79bb      	ldrb	r3, [r7, #6]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	71ba      	strb	r2, [r7, #6]
 800202a:	4619      	mov	r1, r3
 800202c:	4b17      	ldr	r3, [pc, #92]	; (800208c <InitParams+0x600>)
 800202e:	4a37      	ldr	r2, [pc, #220]	; (800210c <InitParams+0x680>)
 8002030:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	params[i++] = &Alarms;
 8002034:	79bb      	ldrb	r3, [r7, #6]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	71ba      	strb	r2, [r7, #6]
 800203a:	4619      	mov	r1, r3
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <InitParams+0x600>)
 800203e:	4a34      	ldr	r2, [pc, #208]	; (8002110 <InitParams+0x684>)
 8002040:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	params[i++] = &AlarmMasks;
 8002044:	79bb      	ldrb	r3, [r7, #6]
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	71ba      	strb	r2, [r7, #6]
 800204a:	4619      	mov	r1, r3
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <InitParams+0x600>)
 800204e:	4a31      	ldr	r2, [pc, #196]	; (8002114 <InitParams+0x688>)
 8002050:	f843 2021 	str.w	r2, [r3, r1, lsl #2]


	for(uint8_t j = 0; j < PARAMS_COUNT; j++) {
 8002054:	2300      	movs	r3, #0
 8002056:	71fb      	strb	r3, [r7, #7]
 8002058:	e00d      	b.n	8002076 <InitParams+0x5ea>
		paramTable[params[j]->commandNumber] = j+1;
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	4a0b      	ldr	r2, [pc, #44]	; (800208c <InitParams+0x600>)
 800205e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	3301      	adds	r3, #1
 800206a:	b2d9      	uxtb	r1, r3
 800206c:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <InitParams+0x68c>)
 800206e:	5499      	strb	r1, [r3, r2]
	for(uint8_t j = 0; j < PARAMS_COUNT; j++) {
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	3301      	adds	r3, #1
 8002074:	71fb      	strb	r3, [r7, #7]
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	2b63      	cmp	r3, #99	; 0x63
 800207a:	d9ee      	bls.n	800205a <InitParams+0x5ce>
	}
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20001604 	.word	0x20001604
 8002090:	20000af0 	.word	0x20000af0
 8002094:	20000b2c 	.word	0x20000b2c
 8002098:	20000b68 	.word	0x20000b68
 800209c:	20000ba4 	.word	0x20000ba4
 80020a0:	20000be0 	.word	0x20000be0
 80020a4:	20000c1c 	.word	0x20000c1c
 80020a8:	20000c58 	.word	0x20000c58
 80020ac:	20000c94 	.word	0x20000c94
 80020b0:	20000cd0 	.word	0x20000cd0
 80020b4:	20000d0c 	.word	0x20000d0c
 80020b8:	20000d48 	.word	0x20000d48
 80020bc:	20000d84 	.word	0x20000d84
 80020c0:	20000dc0 	.word	0x20000dc0
 80020c4:	20000dfc 	.word	0x20000dfc
 80020c8:	20000e38 	.word	0x20000e38
 80020cc:	20000e74 	.word	0x20000e74
 80020d0:	20000eb0 	.word	0x20000eb0
 80020d4:	20000eec 	.word	0x20000eec
 80020d8:	20000f28 	.word	0x20000f28
 80020dc:	20000f64 	.word	0x20000f64
 80020e0:	20000fa0 	.word	0x20000fa0
 80020e4:	20000fdc 	.word	0x20000fdc
 80020e8:	20001018 	.word	0x20001018
 80020ec:	20001054 	.word	0x20001054
 80020f0:	20001090 	.word	0x20001090
 80020f4:	200010cc 	.word	0x200010cc
 80020f8:	20001108 	.word	0x20001108
 80020fc:	20001144 	.word	0x20001144
 8002100:	20001180 	.word	0x20001180
 8002104:	200011bc 	.word	0x200011bc
 8002108:	200011f8 	.word	0x200011f8
 800210c:	20001234 	.word	0x20001234
 8002110:	20001270 	.word	0x20001270
 8002114:	200012ac 	.word	0x200012ac
 8002118:	20001794 	.word	0x20001794
 800211c:	00000000 	.word	0x00000000

08002120 <setU_HeaterSet>:

bool setU_HeaterSet(valueTypes value) {
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
    if(value.val_float >= U_HeaterSet.valueAbsMax.val_float ||
 8002128:	ed97 7a01 	vldr	s14, [r7, #4]
 800212c:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <setU_HeaterSet+0xa8>)
 800212e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002132:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213a:	da09      	bge.n	8002150 <setU_HeaterSet+0x30>
       value.val_float <= U_HeaterSet.valueAbsMin.val_float) {
 800213c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002140:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <setU_HeaterSet+0xa8>)
 8002142:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= U_HeaterSet.valueAbsMax.val_float ||
 8002146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800214a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214e:	d801      	bhi.n	8002154 <setU_HeaterSet+0x34>
       return false;
 8002150:	2300      	movs	r3, #0
 8002152:	e02c      	b.n	80021ae <setU_HeaterSet+0x8e>
    } else {
    	//Set_U_Heater PWM (10 kHz, 16800)
    	extern TIM_HandleTypeDef htim8;
    	int16_t counterSet = 16800*(1.20 - 0.05 * value.val_float);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fa06 	bl	8000568 <__aeabi_f2d>
 800215c:	a316      	add	r3, pc, #88	; (adr r3, 80021b8 <setU_HeaterSet+0x98>)
 800215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002162:	f7fe fa59 	bl	8000618 <__aeabi_dmul>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	f04f 3033 	mov.w	r0, #858993459	; 0x33333333
 800216e:	4917      	ldr	r1, [pc, #92]	; (80021cc <setU_HeaterSet+0xac>)
 8002170:	f7fe f89a 	bl	80002a8 <__aeabi_dsub>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	a310      	add	r3, pc, #64	; (adr r3, 80021c0 <setU_HeaterSet+0xa0>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe fa49 	bl	8000618 <__aeabi_dmul>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f7fe fcf3 	bl	8000b78 <__aeabi_d2iz>
 8002192:	4603      	mov	r3, r0
 8002194:	81fb      	strh	r3, [r7, #14]
    	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, counterSet > 0 ? counterSet : 0);
 8002196:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800219a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800219e:	b21a      	sxth	r2, r3
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <setU_HeaterSet+0xb0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	63da      	str	r2, [r3, #60]	; 0x3c
        U_HeaterSet.value = value;
 80021a6:	4a08      	ldr	r2, [pc, #32]	; (80021c8 <setU_HeaterSet+0xa8>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80021ac:	2301      	movs	r3, #1
    }
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	9999999a 	.word	0x9999999a
 80021bc:	3fa99999 	.word	0x3fa99999
 80021c0:	00000000 	.word	0x00000000
 80021c4:	40d06800 	.word	0x40d06800
 80021c8:	200000a0 	.word	0x200000a0
 80021cc:	3ff33333 	.word	0x3ff33333
 80021d0:	20002054 	.word	0x20002054

080021d4 <getU_HeaterSet>:
valueTypes getU_HeaterSet(void) {
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
    return U_HeaterSet.value;
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <getU_HeaterSet+0x14>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	200000a0 	.word	0x200000a0

080021ec <setU_HeaterOnOff>:

bool setU_HeaterOnOff(valueTypes state) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Disable_DC_DC_GPIO_Port, Disable_DC_DC_Pin, state.val_bool);
 80021f4:	793b      	ldrb	r3, [r7, #4]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021fc:	4805      	ldr	r0, [pc, #20]	; (8002214 <setU_HeaterOnOff+0x28>)
 80021fe:	f006 f813 	bl	8008228 <HAL_GPIO_WritePin>
    U_HeaterOnOff.value = state;
 8002202:	4a05      	ldr	r2, [pc, #20]	; (8002218 <setU_HeaterOnOff+0x2c>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8002208:	2301      	movs	r3, #1
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40020800 	.word	0x40020800
 8002218:	20000154 	.word	0x20000154

0800221c <getU_HeaterOnOff>:
valueTypes getU_HeaterOnOff(void) {
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
    return U_HeaterOnOff.value;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <getU_HeaterOnOff+0x14>)
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000154 	.word	0x20000154

08002234 <setU_HeaterMin>:

bool setU_HeaterMin(valueTypes value) {
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	if(value.val_float >= U_HeaterMin.valueAbsMax.val_float ||
 800223c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002240:	4b0e      	ldr	r3, [pc, #56]	; (800227c <setU_HeaterMin+0x48>)
 8002242:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002246:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800224a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224e:	da09      	bge.n	8002264 <setU_HeaterMin+0x30>
	   value.val_float <= U_HeaterMin.valueAbsMin.val_float) {
 8002250:	ed97 7a01 	vldr	s14, [r7, #4]
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <setU_HeaterMin+0x48>)
 8002256:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= U_HeaterMin.valueAbsMax.val_float ||
 800225a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800225e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002262:	d801      	bhi.n	8002268 <setU_HeaterMin+0x34>
	   return false;
 8002264:	2300      	movs	r3, #0
 8002266:	e003      	b.n	8002270 <setU_HeaterMin+0x3c>
	} else {
		U_HeaterMin.value = value;
 8002268:	4a04      	ldr	r2, [pc, #16]	; (800227c <setU_HeaterMin+0x48>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 800226e:	2301      	movs	r3, #1
	}
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	200000dc 	.word	0x200000dc

08002280 <getU_HeaterMin>:
valueTypes getU_HeaterMin(void) {
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
    return U_HeaterMin.value;
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <getU_HeaterMin+0x14>)
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	200000dc 	.word	0x200000dc

08002298 <setU_HeaterMax>:

bool setU_HeaterMax(valueTypes value) {
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	if(value.val_float >= U_HeaterMax.valueAbsMax.val_float ||
 80022a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <setU_HeaterMax+0x48>)
 80022a6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80022aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b2:	da09      	bge.n	80022c8 <setU_HeaterMax+0x30>
	   value.val_float <= U_HeaterMax.valueAbsMin.val_float) {
 80022b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <setU_HeaterMax+0x48>)
 80022ba:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= U_HeaterMax.valueAbsMax.val_float ||
 80022be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c6:	d801      	bhi.n	80022cc <setU_HeaterMax+0x34>
	   return false;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e003      	b.n	80022d4 <setU_HeaterMax+0x3c>
	} else {
		U_HeaterMax.value = value;
 80022cc:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <setU_HeaterMax+0x48>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 80022d2:	2301      	movs	r3, #1
	}
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	20000118 	.word	0x20000118

080022e4 <getU_HeaterMax>:
valueTypes getU_HeaterMax(void) {
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
    return U_HeaterMax.value;
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <getU_HeaterMax+0x14>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000118 	.word	0x20000118

080022fc <setU_24Vmeas>:


bool setU_24Vmeas(valueTypes value) {
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    U_24Vmeas.value = value;
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <setU_24Vmeas+0x1c>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	20000190 	.word	0x20000190

0800231c <getU_24Vmeas>:
valueTypes getU_24Vmeas() {
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
    return U_24Vmeas.value;
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <getU_24Vmeas+0x14>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000190 	.word	0x20000190

08002334 <setU_24Vcoeff>:

bool setU_24Vcoeff(valueTypes value) {
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
    if(value.val_float >= U_24Vcoeff.valueAbsMax.val_float ||
 800233c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <setU_24Vcoeff+0x48>)
 8002342:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800234a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234e:	da09      	bge.n	8002364 <setU_24Vcoeff+0x30>
       value.val_float <= U_24Vcoeff.valueAbsMin.val_float) {
 8002350:	ed97 7a01 	vldr	s14, [r7, #4]
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <setU_24Vcoeff+0x48>)
 8002356:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= U_24Vcoeff.valueAbsMax.val_float ||
 800235a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800235e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002362:	d801      	bhi.n	8002368 <setU_24Vcoeff+0x34>
       return false;
 8002364:	2300      	movs	r3, #0
 8002366:	e003      	b.n	8002370 <setU_24Vcoeff+0x3c>
    } else {
        U_24Vcoeff.value = value;
 8002368:	4a04      	ldr	r2, [pc, #16]	; (800237c <setU_24Vcoeff+0x48>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800236e:	2301      	movs	r3, #1
    }
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	200001cc 	.word	0x200001cc

08002380 <getU_24Vcoeff>:

valueTypes getU_24Vcoeff(void) {
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
    return U_24Vcoeff.value;
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <getU_24Vcoeff+0x14>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	200001cc 	.word	0x200001cc

08002398 <setU_HeaterMeas>:


bool setU_HeaterMeas(valueTypes value) {
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
    U_HeaterMeas.value = value;
 80023a0:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <setU_HeaterMeas+0x1c>)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	20000208 	.word	0x20000208

080023b8 <getU_HeaterMeas>:
valueTypes getU_HeaterMeas() {
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
    return U_HeaterMeas.value;
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <getU_HeaterMeas+0x14>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000208 	.word	0x20000208

080023d0 <setU_HeaterCoeff>:

bool setU_HeaterCoeff(valueTypes value) {
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
    if(value.val_float >= U_HeaterCoeff.valueAbsMax.val_float ||
 80023d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <setU_HeaterCoeff+0x48>)
 80023de:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80023e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ea:	da09      	bge.n	8002400 <setU_HeaterCoeff+0x30>
       value.val_float <= U_HeaterCoeff.valueAbsMin.val_float) {
 80023ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <setU_HeaterCoeff+0x48>)
 80023f2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= U_HeaterCoeff.valueAbsMax.val_float ||
 80023f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fe:	d801      	bhi.n	8002404 <setU_HeaterCoeff+0x34>
       return false;
 8002400:	2300      	movs	r3, #0
 8002402:	e003      	b.n	800240c <setU_HeaterCoeff+0x3c>
    } else {
       U_HeaterCoeff.value = value;
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <setU_HeaterCoeff+0x48>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
       return true;
 800240a:	2301      	movs	r3, #1
    }
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	20000244 	.word	0x20000244

0800241c <getU_HeaterCoeff>:

valueTypes getU_HeaterCoeff(void) {
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
    return U_HeaterCoeff.value;
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <getU_HeaterCoeff+0x14>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000244 	.word	0x20000244

08002434 <setU_24V_Min>:

bool setU_24V_Min(valueTypes value) {
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	if(value.val_float >= U_24V_Min.valueAbsMax.val_float ||
 800243c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002440:	4b0e      	ldr	r3, [pc, #56]	; (800247c <setU_24V_Min+0x48>)
 8002442:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002446:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244e:	da09      	bge.n	8002464 <setU_24V_Min+0x30>
	   value.val_float <= U_24V_Min.valueAbsMin.val_float) {
 8002450:	ed97 7a01 	vldr	s14, [r7, #4]
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <setU_24V_Min+0x48>)
 8002456:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= U_24V_Min.valueAbsMax.val_float ||
 800245a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002462:	d801      	bhi.n	8002468 <setU_24V_Min+0x34>
	   return false;
 8002464:	2300      	movs	r3, #0
 8002466:	e003      	b.n	8002470 <setU_24V_Min+0x3c>
	} else {
		U_24V_Min.value = value;
 8002468:	4a04      	ldr	r2, [pc, #16]	; (800247c <setU_24V_Min+0x48>)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 800246e:	2301      	movs	r3, #1
	}
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	20000280 	.word	0x20000280

08002480 <getU_24V_Min>:
valueTypes getU_24V_Min(void) {
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
    return U_24V_Min.value;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <getU_24V_Min+0x14>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000280 	.word	0x20000280

08002498 <setU_24V_Max>:

bool setU_24V_Max(valueTypes value) {
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	if(value.val_float >= U_24V_Max.valueAbsMax.val_float ||
 80024a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80024a4:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <setU_24V_Max+0x48>)
 80024a6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80024aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b2:	da09      	bge.n	80024c8 <setU_24V_Max+0x30>
	   value.val_float <= U_24V_Max.valueAbsMin.val_float) {
 80024b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <setU_24V_Max+0x48>)
 80024ba:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= U_24V_Max.valueAbsMax.val_float ||
 80024be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c6:	d801      	bhi.n	80024cc <setU_24V_Max+0x34>
	   return false;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e003      	b.n	80024d4 <setU_24V_Max+0x3c>
	} else {
		U_24V_Max.value = value;
 80024cc:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <setU_24V_Max+0x48>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 80024d2:	2301      	movs	r3, #1
	}
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	200002bc 	.word	0x200002bc

080024e4 <getU_24V_Max>:
valueTypes getU_24V_Max(void) {
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
    return U_24V_Max.value;
 80024e8:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <getU_24V_Max+0x14>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	200002bc 	.word	0x200002bc

080024fc <setI_1A>:

bool setI_1A(valueTypes value) {
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
    I_1A.value = value;
 8002504:	4a04      	ldr	r2, [pc, #16]	; (8002518 <setI_1A+0x1c>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 800250a:	2301      	movs	r3, #1
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	200002f8 	.word	0x200002f8

0800251c <getI_1A>:
valueTypes getI_1A() {
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
    return I_1A.value;
 8002520:	4b03      	ldr	r3, [pc, #12]	; (8002530 <getI_1A+0x14>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	200002f8 	.word	0x200002f8

08002534 <setI_1B>:
bool setI_1B(valueTypes value) {
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
    I_1B.value = value;
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <setI_1B+0x1c>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8002542:	2301      	movs	r3, #1
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	20000334 	.word	0x20000334

08002554 <getI_1B>:
valueTypes getI_1B() {
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
    return I_1B.value;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <getI_1B+0x14>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000334 	.word	0x20000334

0800256c <setI_2A>:
bool setI_2A(valueTypes value) {
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
    I_2A.value = value;
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <setI_2A+0x1c>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 800257a:	2301      	movs	r3, #1
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	20000370 	.word	0x20000370

0800258c <getI_2A>:
valueTypes getI_2A() {
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
    return I_2A.value;
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <getI_2A+0x14>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	20000370 	.word	0x20000370

080025a4 <setI_2B>:
bool setI_2B(valueTypes value) {
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
    I_2B.value = value;
 80025ac:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <setI_2B+0x1c>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	200003ac 	.word	0x200003ac

080025c4 <getI_2B>:
valueTypes getI_2B() {
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
    return I_2B.value;
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <getI_2B+0x14>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	200003ac 	.word	0x200003ac

080025dc <setI_1A_Coeff>:

bool setI_1A_Coeff(valueTypes value) {
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I_1A_Coeff.valueAbsMax.val_float ||
 80025e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80025e8:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <setI_1A_Coeff+0x48>)
 80025ea:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80025ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	da09      	bge.n	800260c <setI_1A_Coeff+0x30>
       value.val_float <= I_1A_Coeff.valueAbsMin.val_float) {
 80025f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <setI_1A_Coeff+0x48>)
 80025fe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I_1A_Coeff.valueAbsMax.val_float ||
 8002602:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260a:	d801      	bhi.n	8002610 <setI_1A_Coeff+0x34>
       return false;
 800260c:	2300      	movs	r3, #0
 800260e:	e003      	b.n	8002618 <setI_1A_Coeff+0x3c>
    } else {
        I_1A_Coeff.value = value;
 8002610:	4a04      	ldr	r2, [pc, #16]	; (8002624 <setI_1A_Coeff+0x48>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002616:	2301      	movs	r3, #1
    }
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	200003e8 	.word	0x200003e8

08002628 <getI_1A_Coeff>:
valueTypes getI_1A_Coeff(void) {
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
    return I_1A_Coeff.value;
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <getI_1A_Coeff+0x14>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	200003e8 	.word	0x200003e8

08002640 <setI_1B_Coeff>:
bool setI_1B_Coeff(valueTypes value) {
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I_1B_Coeff.valueAbsMax.val_float ||
 8002648:	ed97 7a01 	vldr	s14, [r7, #4]
 800264c:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <setI_1B_Coeff+0x48>)
 800264e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265a:	da09      	bge.n	8002670 <setI_1B_Coeff+0x30>
       value.val_float <= I_1B_Coeff.valueAbsMin.val_float) {
 800265c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <setI_1B_Coeff+0x48>)
 8002662:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I_1B_Coeff.valueAbsMax.val_float ||
 8002666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	d801      	bhi.n	8002674 <setI_1B_Coeff+0x34>
       return false;
 8002670:	2300      	movs	r3, #0
 8002672:	e003      	b.n	800267c <setI_1B_Coeff+0x3c>
    } else {
        I_1B_Coeff.value = value;
 8002674:	4a04      	ldr	r2, [pc, #16]	; (8002688 <setI_1B_Coeff+0x48>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800267a:	2301      	movs	r3, #1
    }
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	20000424 	.word	0x20000424

0800268c <getI_1B_Coeff>:
valueTypes getI_1B_Coeff(void) {
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
    return I_1B_Coeff.value;
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <getI_1B_Coeff+0x14>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000424 	.word	0x20000424

080026a4 <setI_2A_Coeff>:
bool setI_2A_Coeff(valueTypes value) {
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I_2A_Coeff.valueAbsMax.val_float ||
 80026ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80026b0:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <setI_2A_Coeff+0x48>)
 80026b2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80026b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026be:	da09      	bge.n	80026d4 <setI_2A_Coeff+0x30>
       value.val_float <= I_2A_Coeff.valueAbsMin.val_float) {
 80026c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <setI_2A_Coeff+0x48>)
 80026c6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I_2A_Coeff.valueAbsMax.val_float ||
 80026ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d2:	d801      	bhi.n	80026d8 <setI_2A_Coeff+0x34>
       return false;
 80026d4:	2300      	movs	r3, #0
 80026d6:	e003      	b.n	80026e0 <setI_2A_Coeff+0x3c>
    } else {
        I_2A_Coeff.value = value;
 80026d8:	4a04      	ldr	r2, [pc, #16]	; (80026ec <setI_2A_Coeff+0x48>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80026de:	2301      	movs	r3, #1
    }
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	20000460 	.word	0x20000460

080026f0 <getI_2A_Coeff>:
valueTypes getI_2A_Coeff(void) {
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
    return I_2A_Coeff.value;
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <getI_2A_Coeff+0x14>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000460 	.word	0x20000460

08002708 <setI_2B_Coeff>:
bool setI_2B_Coeff(valueTypes value) {
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I_2B_Coeff.valueAbsMax.val_float ||
 8002710:	ed97 7a01 	vldr	s14, [r7, #4]
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <setI_2B_Coeff+0x48>)
 8002716:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800271a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800271e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002722:	da09      	bge.n	8002738 <setI_2B_Coeff+0x30>
       value.val_float <= I_2B_Coeff.valueAbsMin.val_float) {
 8002724:	ed97 7a01 	vldr	s14, [r7, #4]
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <setI_2B_Coeff+0x48>)
 800272a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I_2B_Coeff.valueAbsMax.val_float ||
 800272e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002736:	d801      	bhi.n	800273c <setI_2B_Coeff+0x34>
       return false;
 8002738:	2300      	movs	r3, #0
 800273a:	e003      	b.n	8002744 <setI_2B_Coeff+0x3c>
    } else {
        I_2B_Coeff.value = value;
 800273c:	4a04      	ldr	r2, [pc, #16]	; (8002750 <setI_2B_Coeff+0x48>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002742:	2301      	movs	r3, #1
    }
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	2000049c 	.word	0x2000049c

08002754 <getI_2B_Coeff>:
valueTypes getI_2B_Coeff(void) {
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
    return I_2B_Coeff.value;
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <getI_2B_Coeff+0x14>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	2000049c 	.word	0x2000049c

0800276c <setI_1A_Max>:

bool setI_1A_Max(valueTypes value) {
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
	if(value.val_float >= I_1A_Max.valueAbsMax.val_float ||
 8002774:	ed97 7a01 	vldr	s14, [r7, #4]
 8002778:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <setI_1A_Max+0x48>)
 800277a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800277e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002786:	da09      	bge.n	800279c <setI_1A_Max+0x30>
	   value.val_float <= I_1A_Max.valueAbsMin.val_float) {
 8002788:	ed97 7a01 	vldr	s14, [r7, #4]
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <setI_1A_Max+0x48>)
 800278e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= I_1A_Max.valueAbsMax.val_float ||
 8002792:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279a:	d801      	bhi.n	80027a0 <setI_1A_Max+0x34>
	   return false;
 800279c:	2300      	movs	r3, #0
 800279e:	e003      	b.n	80027a8 <setI_1A_Max+0x3c>
	} else {
		I_1A_Max.value = value;
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <setI_1A_Max+0x48>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 80027a6:	2301      	movs	r3, #1
	}
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	200004d8 	.word	0x200004d8

080027b8 <getI_1A_Max>:
valueTypes getI_1A_Max(void) {
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
    return I_1A_Max.value;
 80027bc:	4b03      	ldr	r3, [pc, #12]	; (80027cc <getI_1A_Max+0x14>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	200004d8 	.word	0x200004d8

080027d0 <setI_1B_Max>:
bool setI_1B_Max(valueTypes value) {
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	if(value.val_float >= I_1B_Max.valueAbsMax.val_float ||
 80027d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80027dc:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <setI_1B_Max+0x48>)
 80027de:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80027e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ea:	da09      	bge.n	8002800 <setI_1B_Max+0x30>
	   value.val_float <= I_1B_Max.valueAbsMin.val_float) {
 80027ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <setI_1B_Max+0x48>)
 80027f2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= I_1B_Max.valueAbsMax.val_float ||
 80027f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fe:	d801      	bhi.n	8002804 <setI_1B_Max+0x34>
	   return false;
 8002800:	2300      	movs	r3, #0
 8002802:	e003      	b.n	800280c <setI_1B_Max+0x3c>
	} else {
		I_1B_Max.value = value;
 8002804:	4a04      	ldr	r2, [pc, #16]	; (8002818 <setI_1B_Max+0x48>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 800280a:	2301      	movs	r3, #1
	}
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	20000514 	.word	0x20000514

0800281c <getI_1B_Max>:
valueTypes getI_1B_Max(void) {
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
    return I_1B_Max.value;
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <getI_1B_Max+0x14>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000514 	.word	0x20000514

08002834 <setI_2A_Max>:
bool setI_2A_Max(valueTypes value) {
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	if(value.val_float >= I_2A_Max.valueAbsMax.val_float ||
 800283c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <setI_2A_Max+0x48>)
 8002842:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002846:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800284a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284e:	da09      	bge.n	8002864 <setI_2A_Max+0x30>
	   value.val_float <= I_2A_Max.valueAbsMin.val_float) {
 8002850:	ed97 7a01 	vldr	s14, [r7, #4]
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <setI_2A_Max+0x48>)
 8002856:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= I_2A_Max.valueAbsMax.val_float ||
 800285a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800285e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002862:	d801      	bhi.n	8002868 <setI_2A_Max+0x34>
	   return false;
 8002864:	2300      	movs	r3, #0
 8002866:	e003      	b.n	8002870 <setI_2A_Max+0x3c>
	} else {
		I_2A_Max.value = value;
 8002868:	4a04      	ldr	r2, [pc, #16]	; (800287c <setI_2A_Max+0x48>)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 800286e:	2301      	movs	r3, #1
	}
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	20000550 	.word	0x20000550

08002880 <getI_2A_Max>:
valueTypes getI_2A_Max(void) {
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
    return I_2A_Max.value;
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <getI_2A_Max+0x14>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000550 	.word	0x20000550

08002898 <setI_2B_Max>:
bool setI_2B_Max(valueTypes value) {
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	if(value.val_float >= I_2B_Max.valueAbsMax.val_float ||
 80028a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80028a4:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <setI_2B_Max+0x48>)
 80028a6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80028aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b2:	da09      	bge.n	80028c8 <setI_2B_Max+0x30>
	   value.val_float <= I_2B_Max.valueAbsMin.val_float) {
 80028b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <setI_2B_Max+0x48>)
 80028ba:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= I_2B_Max.valueAbsMax.val_float ||
 80028be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c6:	d801      	bhi.n	80028cc <setI_2B_Max+0x34>
	   return false;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e003      	b.n	80028d4 <setI_2B_Max+0x3c>
	} else {
		I_2B_Max.value = value;
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <setI_2B_Max+0x48>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 80028d2:	2301      	movs	r3, #1
	}
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	2000058c 	.word	0x2000058c

080028e4 <getI_2B_Max>:
valueTypes getI_2B_Max(void) {
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
    return I_2B_Max.value;
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <getI_2B_Max+0x14>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	2000058c 	.word	0x2000058c

080028fc <setTemp1>:


bool setTemp1(valueTypes value) {
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
    Temp1.value = value;
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <setTemp1+0x1c>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 800290a:	2301      	movs	r3, #1
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	200005c8 	.word	0x200005c8

0800291c <getTemp1>:
valueTypes getTemp1() {
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
    return Temp1.value;
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <getTemp1+0x14>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	200005c8 	.word	0x200005c8

08002934 <setTemp2>:
bool setTemp2(valueTypes value) {
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
    Temp2.value = value;
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <setTemp2+0x1c>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8002942:	2301      	movs	r3, #1
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	20000604 	.word	0x20000604

08002954 <getTemp2>:
valueTypes getTemp2() {
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
    return Temp2.value;
 8002958:	4b03      	ldr	r3, [pc, #12]	; (8002968 <getTemp2+0x14>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000604 	.word	0x20000604

0800296c <setTemp3>:
bool setTemp3(valueTypes value) {
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
    Temp3.value = value;
 8002974:	4a04      	ldr	r2, [pc, #16]	; (8002988 <setTemp3+0x1c>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 800297a:	2301      	movs	r3, #1
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	20000640 	.word	0x20000640

0800298c <getTemp3>:
valueTypes getTemp3() {
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
    return Temp3.value;
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <getTemp3+0x14>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000640 	.word	0x20000640

080029a4 <setTemp4>:
bool setTemp4(valueTypes value) {
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
    Temp4.value = value;
 80029ac:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <setTemp4+0x1c>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80029b2:	2301      	movs	r3, #1
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	2000067c 	.word	0x2000067c

080029c4 <getTemp4>:
valueTypes getTemp4() {
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
    return Temp4.value;
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <getTemp4+0x14>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	2000067c 	.word	0x2000067c

080029dc <setTemp1_coeff>:

bool setTemp1_coeff(valueTypes value) {
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Temp1_coeff.valueAbsMax.val_float ||
 80029e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <setTemp1_coeff+0x48>)
 80029ea:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80029ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f6:	da09      	bge.n	8002a0c <setTemp1_coeff+0x30>
       value.val_float <= Temp1_coeff.valueAbsMin.val_float) {
 80029f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <setTemp1_coeff+0x48>)
 80029fe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Temp1_coeff.valueAbsMax.val_float ||
 8002a02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0a:	d801      	bhi.n	8002a10 <setTemp1_coeff+0x34>
       return false;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e003      	b.n	8002a18 <setTemp1_coeff+0x3c>
    } else {
        Temp1_coeff.value = value;
 8002a10:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <setTemp1_coeff+0x48>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002a16:	2301      	movs	r3, #1
    }
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	200006b8 	.word	0x200006b8

08002a28 <getTemp1_coeff>:
valueTypes getTemp1_coeff(void) {
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
    return Temp1_coeff.value;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <getTemp1_coeff+0x14>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	200006b8 	.word	0x200006b8

08002a40 <setTemp2_coeff>:
bool setTemp2_coeff(valueTypes value) {
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Temp2_coeff.valueAbsMax.val_float ||
 8002a48:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <setTemp2_coeff+0x48>)
 8002a4e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002a52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5a:	da09      	bge.n	8002a70 <setTemp2_coeff+0x30>
       value.val_float <= Temp2_coeff.valueAbsMin.val_float) {
 8002a5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <setTemp2_coeff+0x48>)
 8002a62:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Temp2_coeff.valueAbsMax.val_float ||
 8002a66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6e:	d801      	bhi.n	8002a74 <setTemp2_coeff+0x34>
       return false;
 8002a70:	2300      	movs	r3, #0
 8002a72:	e003      	b.n	8002a7c <setTemp2_coeff+0x3c>
    } else {
        Temp2_coeff.value = value;
 8002a74:	4a04      	ldr	r2, [pc, #16]	; (8002a88 <setTemp2_coeff+0x48>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002a7a:	2301      	movs	r3, #1
    }
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	200006f4 	.word	0x200006f4

08002a8c <getTemp2_coeff>:
valueTypes getTemp2_coeff(void) {
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
    return Temp2_coeff.value;
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <getTemp2_coeff+0x14>)
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	200006f4 	.word	0x200006f4

08002aa4 <setTemp3_coeff>:
bool setTemp3_coeff(valueTypes value) {
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Temp3_coeff.valueAbsMax.val_float ||
 8002aac:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <setTemp3_coeff+0x48>)
 8002ab2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002ab6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abe:	da09      	bge.n	8002ad4 <setTemp3_coeff+0x30>
       value.val_float <= Temp3_coeff.valueAbsMin.val_float) {
 8002ac0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <setTemp3_coeff+0x48>)
 8002ac6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Temp3_coeff.valueAbsMax.val_float ||
 8002aca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad2:	d801      	bhi.n	8002ad8 <setTemp3_coeff+0x34>
       return false;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e003      	b.n	8002ae0 <setTemp3_coeff+0x3c>
    } else {
        Temp3_coeff.value = value;
 8002ad8:	4a04      	ldr	r2, [pc, #16]	; (8002aec <setTemp3_coeff+0x48>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002ade:	2301      	movs	r3, #1
    }
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	20000730 	.word	0x20000730

08002af0 <getTemp3_coeff>:
valueTypes getTemp3_coeff(void) {
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
    return Temp3_coeff.value;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <getTemp3_coeff+0x14>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000730 	.word	0x20000730

08002b08 <setTemp4_coeff>:
bool setTemp4_coeff(valueTypes value) {
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Temp4_coeff.valueAbsMax.val_float ||
 8002b10:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <setTemp4_coeff+0x48>)
 8002b16:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002b1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b22:	da09      	bge.n	8002b38 <setTemp4_coeff+0x30>
       value.val_float <= Temp4_coeff.valueAbsMin.val_float) {
 8002b24:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <setTemp4_coeff+0x48>)
 8002b2a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Temp4_coeff.valueAbsMax.val_float ||
 8002b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b36:	d801      	bhi.n	8002b3c <setTemp4_coeff+0x34>
       return false;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e003      	b.n	8002b44 <setTemp4_coeff+0x3c>
    } else {
        Temp4_coeff.value = value;
 8002b3c:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <setTemp4_coeff+0x48>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8002b42:	2301      	movs	r3, #1
    }
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	2000076c 	.word	0x2000076c

08002b54 <getTemp4_coeff>:
valueTypes getTemp4_coeff(void) {
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
    return Temp4_coeff.value;
 8002b58:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <getTemp4_coeff+0x14>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	2000076c 	.word	0x2000076c

08002b6c <setTemp1_Min>:

bool setTemp1_Min(valueTypes value) {
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
	if(value.val_float >= Temp1_Min.valueAbsMax.val_float ||
 8002b74:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <setTemp1_Min+0x48>)
 8002b7a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002b7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b86:	da09      	bge.n	8002b9c <setTemp1_Min+0x30>
	   value.val_float <= Temp1_Min.valueAbsMin.val_float) {
 8002b88:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <setTemp1_Min+0x48>)
 8002b8e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= Temp1_Min.valueAbsMax.val_float ||
 8002b92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9a:	d801      	bhi.n	8002ba0 <setTemp1_Min+0x34>
	   return false;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e003      	b.n	8002ba8 <setTemp1_Min+0x3c>
	} else {
		Temp1_Min.value = value;
 8002ba0:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <setTemp1_Min+0x48>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8002ba6:	2301      	movs	r3, #1
	}
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	200007a8 	.word	0x200007a8

08002bb8 <getTemp1_Min>:
valueTypes getTemp1_Min(void) {
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
    return Temp1_Min.value;
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <getTemp1_Min+0x14>)
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	200007a8 	.word	0x200007a8

08002bd0 <setTemp1_Max>:

bool setTemp1_Max(valueTypes value) {
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	if(value.val_float >= Temp1_Max.valueAbsMax.val_float ||
 8002bd8:	ed97 7a01 	vldr	s14, [r7, #4]
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <setTemp1_Max+0x48>)
 8002bde:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002be2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bea:	da09      	bge.n	8002c00 <setTemp1_Max+0x30>
	   value.val_float <= Temp1_Max.valueAbsMin.val_float) {
 8002bec:	ed97 7a01 	vldr	s14, [r7, #4]
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <setTemp1_Max+0x48>)
 8002bf2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= Temp1_Max.valueAbsMax.val_float ||
 8002bf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfe:	d801      	bhi.n	8002c04 <setTemp1_Max+0x34>
	   return false;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e003      	b.n	8002c0c <setTemp1_Max+0x3c>
	} else {
		Temp1_Max.value = value;
 8002c04:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <setTemp1_Max+0x48>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8002c0a:	2301      	movs	r3, #1
	}
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	200007e4 	.word	0x200007e4

08002c1c <getTemp1_Max>:
valueTypes getTemp1_Max(void) {
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
    return Temp1_Max.value;
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <getTemp1_Max+0x14>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	200007e4 	.word	0x200007e4

08002c34 <setTemp2_Min>:
bool setTemp2_Min(valueTypes value) {
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	if(value.val_float >= Temp2_Min.valueAbsMax.val_float ||
 8002c3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c40:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <setTemp2_Min+0x48>)
 8002c42:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4e:	da09      	bge.n	8002c64 <setTemp2_Min+0x30>
	   value.val_float <= Temp2_Min.valueAbsMin.val_float) {
 8002c50:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c54:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <setTemp2_Min+0x48>)
 8002c56:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= Temp2_Min.valueAbsMax.val_float ||
 8002c5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c62:	d801      	bhi.n	8002c68 <setTemp2_Min+0x34>
	   return false;
 8002c64:	2300      	movs	r3, #0
 8002c66:	e003      	b.n	8002c70 <setTemp2_Min+0x3c>
	} else {
		Temp2_Min.value = value;
 8002c68:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <setTemp2_Min+0x48>)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8002c6e:	2301      	movs	r3, #1
	}
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	20000820 	.word	0x20000820

08002c80 <getTemp2_Min>:
valueTypes getTemp2_Min(void) {
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
    return Temp2_Min.value;
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <getTemp2_Min+0x14>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000820 	.word	0x20000820

08002c98 <setTemp2_Max>:

bool setTemp2_Max(valueTypes value) {
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	if(value.val_float >= Temp2_Max.valueAbsMax.val_float ||
 8002ca0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ca4:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <setTemp2_Max+0x48>)
 8002ca6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002caa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb2:	da09      	bge.n	8002cc8 <setTemp2_Max+0x30>
	   value.val_float <= Temp2_Max.valueAbsMin.val_float) {
 8002cb4:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cb8:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <setTemp2_Max+0x48>)
 8002cba:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= Temp2_Max.valueAbsMax.val_float ||
 8002cbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc6:	d801      	bhi.n	8002ccc <setTemp2_Max+0x34>
	   return false;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	e003      	b.n	8002cd4 <setTemp2_Max+0x3c>
	} else {
		Temp2_Max.value = value;
 8002ccc:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <setTemp2_Max+0x48>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8002cd2:	2301      	movs	r3, #1
	}
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	2000085c 	.word	0x2000085c

08002ce4 <getTemp2_Max>:
valueTypes getTemp2_Max(void) {
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
    return Temp2_Max.value;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <getTemp2_Max+0x14>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	2000085c 	.word	0x2000085c

08002cfc <setTemp3_Min>:
bool setTemp3_Min(valueTypes value) {
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
	if(value.val_float >= Temp3_Min.valueAbsMax.val_float ||
 8002d04:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d08:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <setTemp3_Min+0x48>)
 8002d0a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002d0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d16:	da09      	bge.n	8002d2c <setTemp3_Min+0x30>
	   value.val_float <= Temp3_Min.valueAbsMin.val_float) {
 8002d18:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d1c:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <setTemp3_Min+0x48>)
 8002d1e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= Temp3_Min.valueAbsMax.val_float ||
 8002d22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2a:	d801      	bhi.n	8002d30 <setTemp3_Min+0x34>
	   return false;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e003      	b.n	8002d38 <setTemp3_Min+0x3c>
	} else {
		Temp3_Min.value = value;
 8002d30:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <setTemp3_Min+0x48>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8002d36:	2301      	movs	r3, #1
	}
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	20000898 	.word	0x20000898

08002d48 <getTemp3_Min>:
valueTypes getTemp3_Min(void) {
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
    return Temp3_Min.value;
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <getTemp3_Min+0x14>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000898 	.word	0x20000898

08002d60 <setTemp3_Max>:

bool setTemp3_Max(valueTypes value) {
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	if(value.val_float >= Temp3_Max.valueAbsMax.val_float ||
 8002d68:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <setTemp3_Max+0x48>)
 8002d6e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7a:	da09      	bge.n	8002d90 <setTemp3_Max+0x30>
	   value.val_float <= Temp3_Max.valueAbsMin.val_float) {
 8002d7c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d80:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <setTemp3_Max+0x48>)
 8002d82:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= Temp3_Max.valueAbsMax.val_float ||
 8002d86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8e:	d801      	bhi.n	8002d94 <setTemp3_Max+0x34>
	   return false;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e003      	b.n	8002d9c <setTemp3_Max+0x3c>
	} else {
		Temp3_Max.value = value;
 8002d94:	4a04      	ldr	r2, [pc, #16]	; (8002da8 <setTemp3_Max+0x48>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8002d9a:	2301      	movs	r3, #1
	}
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	200008d4 	.word	0x200008d4

08002dac <getTemp3_Max>:
valueTypes getTemp3_Max(void) {
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
    return Temp3_Max.value;
 8002db0:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <getTemp3_Max+0x14>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	200008d4 	.word	0x200008d4

08002dc4 <setTemp4_Min>:
bool setTemp4_Min(valueTypes value) {
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	if(value.val_float >= Temp4_Min.valueAbsMax.val_float ||
 8002dcc:	ed97 7a01 	vldr	s14, [r7, #4]
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <setTemp4_Min+0x48>)
 8002dd2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002dd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dde:	da09      	bge.n	8002df4 <setTemp4_Min+0x30>
	   value.val_float <= Temp4_Min.valueAbsMin.val_float) {
 8002de0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002de4:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <setTemp4_Min+0x48>)
 8002de6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= Temp4_Min.valueAbsMax.val_float ||
 8002dea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df2:	d801      	bhi.n	8002df8 <setTemp4_Min+0x34>
	   return false;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e003      	b.n	8002e00 <setTemp4_Min+0x3c>
	} else {
		Temp4_Min.value = value;
 8002df8:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <setTemp4_Min+0x48>)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8002dfe:	2301      	movs	r3, #1
	}
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	20000910 	.word	0x20000910

08002e10 <getTemp4_Min>:
valueTypes getTemp4_Min(void) {
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
    return Temp4_Min.value;
 8002e14:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <getTemp4_Min+0x14>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000910 	.word	0x20000910

08002e28 <setTemp4_Max>:

bool setTemp4_Max(valueTypes value) {
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
	if(value.val_float >= Temp4_Max.valueAbsMax.val_float ||
 8002e30:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <setTemp4_Max+0x48>)
 8002e36:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002e3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e42:	da09      	bge.n	8002e58 <setTemp4_Max+0x30>
	   value.val_float <= Temp4_Max.valueAbsMin.val_float) {
 8002e44:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <setTemp4_Max+0x48>)
 8002e4a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
	if(value.val_float >= Temp4_Max.valueAbsMax.val_float ||
 8002e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e56:	d801      	bhi.n	8002e5c <setTemp4_Max+0x34>
	   return false;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e003      	b.n	8002e64 <setTemp4_Max+0x3c>
	} else {
		Temp4_Max.value = value;
 8002e5c:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <setTemp4_Max+0x48>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
		return true;
 8002e62:	2301      	movs	r3, #1
	}
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	2000094c 	.word	0x2000094c

08002e74 <getTemp4_Max>:
valueTypes getTemp4_Max(void) {
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
    return Temp4_Max.value;
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <getTemp4_Max+0x14>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	2000094c 	.word	0x2000094c

08002e8c <setLoadSelect1>:

bool setLoadSelect1(valueTypes state) {
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	Ch1_OnOff.value.val_bool = false; //Отключение канала
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <setLoadSelect1+0x24>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    LoadSelect1.value = state;
 8002e9c:	4a05      	ldr	r2, [pc, #20]	; (8002eb4 <setLoadSelect1+0x28>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8002ea2:	2301      	movs	r3, #1
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	20000a78 	.word	0x20000a78
 8002eb4:	20000988 	.word	0x20000988

08002eb8 <getLoadSelect1>:
valueTypes getLoadSelect1(void) {
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
    return LoadSelect1.value;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <getLoadSelect1+0x14>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000988 	.word	0x20000988

08002ed0 <setLoadSelect2>:
bool setLoadSelect2(valueTypes state) {
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	Ch2_OnOff.value.val_bool = false; //Отключение канала
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <setLoadSelect2+0x24>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    LoadSelect2.value = state;
 8002ee0:	4a05      	ldr	r2, [pc, #20]	; (8002ef8 <setLoadSelect2+0x28>)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8002ee6:	2301      	movs	r3, #1
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	20000ab4 	.word	0x20000ab4
 8002ef8:	200009c4 	.word	0x200009c4

08002efc <getLoadSelect2>:
valueTypes getLoadSelect2(void) {
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
    return LoadSelect2.value;
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <getLoadSelect2+0x14>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	200009c4 	.word	0x200009c4

08002f14 <setModeSelect1>:

bool setModeSelect1(valueTypes state) {
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
	Ch1_OnOff.value.val_bool = false; //Отключение канала
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <setModeSelect1+0x24>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ModeSelect1.value = state;
 8002f24:	4a05      	ldr	r2, [pc, #20]	; (8002f3c <setModeSelect1+0x28>)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8002f2a:	2301      	movs	r3, #1
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	20000a78 	.word	0x20000a78
 8002f3c:	20000a00 	.word	0x20000a00

08002f40 <getModeSelect1>:
valueTypes getModeSelect1(void) {
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
    return ModeSelect1.value;
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <getModeSelect1+0x14>)
 8002f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000a00 	.word	0x20000a00

08002f58 <setModeSelect2>:
bool setModeSelect2(valueTypes state) {
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
	Ch2_OnOff.value.val_bool = false; //Отключение канала
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <setModeSelect2+0x24>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ModeSelect2.value = state;
 8002f68:	4a05      	ldr	r2, [pc, #20]	; (8002f80 <setModeSelect2+0x28>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8002f6e:	2301      	movs	r3, #1
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	20000ab4 	.word	0x20000ab4
 8002f80:	20000a3c 	.word	0x20000a3c

08002f84 <getModeSelect2>:
valueTypes getModeSelect2(void) {
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
    return ModeSelect2.value;
 8002f88:	4b03      	ldr	r3, [pc, #12]	; (8002f98 <getModeSelect2+0x14>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	20000a3c 	.word	0x20000a3c

08002f9c <setCh1_OnOff>:

bool setCh1_OnOff(valueTypes state) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	resetPID(0);
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f7fe fb6b 	bl	8001680 <resetPID>
	Ch1_OnOff.value = state;
 8002faa:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <setCh1_OnOff+0x20>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8002fb0:	2301      	movs	r3, #1
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000a78 	.word	0x20000a78

08002fc0 <getCh1_OnOff>:
valueTypes getCh1_OnOff(void) {
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
    return Ch1_OnOff.value;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <getCh1_OnOff+0x14>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000a78 	.word	0x20000a78

08002fd8 <setCh2_OnOff>:
bool setCh2_OnOff(valueTypes state) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	resetPID(1);
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	f7fe fb4d 	bl	8001680 <resetPID>
    Ch2_OnOff.value = state;
 8002fe6:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <setCh2_OnOff+0x20>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8002fec:	2301      	movs	r3, #1
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000ab4 	.word	0x20000ab4

08002ffc <getCh2_OnOff>:
valueTypes getCh2_OnOff(void) {
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
    return Ch2_OnOff.value;
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <getCh2_OnOff+0x14>)
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000ab4 	.word	0x20000ab4

08003014 <setSourceSelect1>:

bool setSourceSelect1(valueTypes state) {
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	Ch1_OnOff.value.val_bool = false; //Отключение канала
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <setSourceSelect1+0x24>)
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SourceSelect1.value = state;
 8003024:	4a05      	ldr	r2, [pc, #20]	; (800303c <setSourceSelect1+0x28>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6313      	str	r3, [r2, #48]	; 0x30
	return true;
 800302a:	2301      	movs	r3, #1
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	20000a78 	.word	0x20000a78
 800303c:	20000af0 	.word	0x20000af0

08003040 <getSourceSelect1>:
valueTypes getSourceSelect1(void) {
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
    return SourceSelect1.value;
 8003044:	4b03      	ldr	r3, [pc, #12]	; (8003054 <getSourceSelect1+0x14>)
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000af0 	.word	0x20000af0

08003058 <setSourceSelect2>:
bool setSourceSelect2(valueTypes state) {
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	Ch2_OnOff.value.val_bool = false; //Отключение канала
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <setSourceSelect2+0x24>)
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SourceSelect2.value = state;
 8003068:	4a05      	ldr	r2, [pc, #20]	; (8003080 <setSourceSelect2+0x28>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 800306e:	2301      	movs	r3, #1
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	20000ab4 	.word	0x20000ab4
 8003080:	20000b2c 	.word	0x20000b2c

08003084 <getSourceSelect2>:
valueTypes getSourceSelect2(void) {
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
    return SourceSelect2.value;
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <getSourceSelect2+0x14>)
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20000b2c 	.word	0x20000b2c

0800309c <setPcoeff1Temp>:

bool setPcoeff1Temp(valueTypes value) {
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Pcoeff1Temp.valueAbsMax.val_float ||
 80030a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <setPcoeff1Temp+0x48>)
 80030aa:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80030ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b6:	da09      	bge.n	80030cc <setPcoeff1Temp+0x30>
       value.val_float <= Pcoeff1Temp.valueAbsMin.val_float) {
 80030b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <setPcoeff1Temp+0x48>)
 80030be:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Pcoeff1Temp.valueAbsMax.val_float ||
 80030c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ca:	d801      	bhi.n	80030d0 <setPcoeff1Temp+0x34>
       return false;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e003      	b.n	80030d8 <setPcoeff1Temp+0x3c>
    } else {
        Pcoeff1Temp.value = value;
 80030d0:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <setPcoeff1Temp+0x48>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80030d6:	2301      	movs	r3, #1
    }
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	20000b68 	.word	0x20000b68

080030e8 <getPcoeff1Temp>:
valueTypes getPcoeff1Temp(void) {
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
    return Pcoeff1Temp.value;
 80030ec:	4b03      	ldr	r3, [pc, #12]	; (80030fc <getPcoeff1Temp+0x14>)
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000b68 	.word	0x20000b68

08003100 <setPcoeff2Temp>:
bool setPcoeff2Temp(valueTypes value) {
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Pcoeff2Temp.valueAbsMax.val_float ||
 8003108:	ed97 7a01 	vldr	s14, [r7, #4]
 800310c:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <setPcoeff2Temp+0x48>)
 800310e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311a:	da09      	bge.n	8003130 <setPcoeff2Temp+0x30>
       value.val_float <= Pcoeff2Temp.valueAbsMin.val_float) {
 800311c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003120:	4b09      	ldr	r3, [pc, #36]	; (8003148 <setPcoeff2Temp+0x48>)
 8003122:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Pcoeff2Temp.valueAbsMax.val_float ||
 8003126:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800312a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312e:	d801      	bhi.n	8003134 <setPcoeff2Temp+0x34>
       return false;
 8003130:	2300      	movs	r3, #0
 8003132:	e003      	b.n	800313c <setPcoeff2Temp+0x3c>
    } else {
        Pcoeff2Temp.value = value;
 8003134:	4a04      	ldr	r2, [pc, #16]	; (8003148 <setPcoeff2Temp+0x48>)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800313a:	2301      	movs	r3, #1
    }
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	20000ba4 	.word	0x20000ba4

0800314c <getPcoeff2Temp>:
valueTypes getPcoeff2Temp(void) {
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
    return Pcoeff2Temp.value;
 8003150:	4b03      	ldr	r3, [pc, #12]	; (8003160 <getPcoeff2Temp+0x14>)
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20000ba4 	.word	0x20000ba4

08003164 <setIcoeff1Temp>:
bool setIcoeff1Temp(valueTypes value) {
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Icoeff1Temp.valueAbsMax.val_float ||
 800316c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003170:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <setIcoeff1Temp+0x48>)
 8003172:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003176:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800317a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317e:	da09      	bge.n	8003194 <setIcoeff1Temp+0x30>
       value.val_float <= Icoeff1Temp.valueAbsMin.val_float) {
 8003180:	ed97 7a01 	vldr	s14, [r7, #4]
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <setIcoeff1Temp+0x48>)
 8003186:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Icoeff1Temp.valueAbsMax.val_float ||
 800318a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800318e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003192:	d801      	bhi.n	8003198 <setIcoeff1Temp+0x34>
       return false;
 8003194:	2300      	movs	r3, #0
 8003196:	e003      	b.n	80031a0 <setIcoeff1Temp+0x3c>
    } else {
        Icoeff1Temp.value = value;
 8003198:	4a04      	ldr	r2, [pc, #16]	; (80031ac <setIcoeff1Temp+0x48>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800319e:	2301      	movs	r3, #1
    }
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	20000be0 	.word	0x20000be0

080031b0 <getIcoeff1Temp>:
valueTypes getIcoeff1Temp(void) {
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
    return Icoeff1Temp.value;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <getIcoeff1Temp+0x14>)
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20000be0 	.word	0x20000be0

080031c8 <setIcoeff2Temp>:
bool setIcoeff2Temp(valueTypes value) {
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Icoeff2Temp.valueAbsMax.val_float ||
 80031d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80031d4:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <setIcoeff2Temp+0x48>)
 80031d6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80031da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e2:	da09      	bge.n	80031f8 <setIcoeff2Temp+0x30>
       value.val_float <= Icoeff2Temp.valueAbsMin.val_float) {
 80031e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <setIcoeff2Temp+0x48>)
 80031ea:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Icoeff2Temp.valueAbsMax.val_float ||
 80031ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f6:	d801      	bhi.n	80031fc <setIcoeff2Temp+0x34>
       return false;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e003      	b.n	8003204 <setIcoeff2Temp+0x3c>
    } else {
        Icoeff2Temp.value = value;
 80031fc:	4a04      	ldr	r2, [pc, #16]	; (8003210 <setIcoeff2Temp+0x48>)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8003202:	2301      	movs	r3, #1
    }
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	20000c1c 	.word	0x20000c1c

08003214 <getIcoeff2Temp>:
valueTypes getIcoeff2Temp(void) {
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
    return Icoeff2Temp.value;
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <getIcoeff2Temp+0x14>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800321c:	4618      	mov	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000c1c 	.word	0x20000c1c

0800322c <setDcoeff1Temp>:
bool setDcoeff1Temp(valueTypes value) {
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Dcoeff1Temp.valueAbsMax.val_float ||
 8003234:	ed97 7a01 	vldr	s14, [r7, #4]
 8003238:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <setDcoeff1Temp+0x48>)
 800323a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800323e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003246:	da09      	bge.n	800325c <setDcoeff1Temp+0x30>
       value.val_float <= Dcoeff1Temp.valueAbsMin.val_float) {
 8003248:	ed97 7a01 	vldr	s14, [r7, #4]
 800324c:	4b09      	ldr	r3, [pc, #36]	; (8003274 <setDcoeff1Temp+0x48>)
 800324e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Dcoeff1Temp.valueAbsMax.val_float ||
 8003252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325a:	d801      	bhi.n	8003260 <setDcoeff1Temp+0x34>
       return false;
 800325c:	2300      	movs	r3, #0
 800325e:	e003      	b.n	8003268 <setDcoeff1Temp+0x3c>
    } else {
        Dcoeff1Temp.value = value;
 8003260:	4a04      	ldr	r2, [pc, #16]	; (8003274 <setDcoeff1Temp+0x48>)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8003266:	2301      	movs	r3, #1
    }
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	20000c58 	.word	0x20000c58

08003278 <getDcoeff1Temp>:
valueTypes getDcoeff1Temp(void) {
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
    return Dcoeff1Temp.value;
 800327c:	4b03      	ldr	r3, [pc, #12]	; (800328c <getDcoeff1Temp+0x14>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003280:	4618      	mov	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20000c58 	.word	0x20000c58

08003290 <setDcoeff2Temp>:
bool setDcoeff2Temp(valueTypes value) {
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Dcoeff2Temp.valueAbsMax.val_float ||
 8003298:	ed97 7a01 	vldr	s14, [r7, #4]
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <setDcoeff2Temp+0x48>)
 800329e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80032a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032aa:	da09      	bge.n	80032c0 <setDcoeff2Temp+0x30>
       value.val_float <= Dcoeff2Temp.valueAbsMin.val_float) {
 80032ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <setDcoeff2Temp+0x48>)
 80032b2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Dcoeff2Temp.valueAbsMax.val_float ||
 80032b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032be:	d801      	bhi.n	80032c4 <setDcoeff2Temp+0x34>
       return false;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e003      	b.n	80032cc <setDcoeff2Temp+0x3c>
    } else {
        Dcoeff2Temp.value = value;
 80032c4:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <setDcoeff2Temp+0x48>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80032ca:	2301      	movs	r3, #1
    }
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	20000c94 	.word	0x20000c94

080032dc <getDcoeff2Temp>:

valueTypes getDcoeff2Temp(void) {
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
    return Dcoeff2Temp.value;
 80032e0:	4b03      	ldr	r3, [pc, #12]	; (80032f0 <getDcoeff2Temp+0x14>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000c94 	.word	0x20000c94

080032f4 <setPcoeff1Freq>:


bool setPcoeff1Freq(valueTypes value) {
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Pcoeff1Freq.valueAbsMax.val_float ||
 80032fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8003300:	4b0e      	ldr	r3, [pc, #56]	; (800333c <setPcoeff1Freq+0x48>)
 8003302:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003306:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800330a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330e:	da09      	bge.n	8003324 <setPcoeff1Freq+0x30>
       value.val_float <= Pcoeff1Freq.valueAbsMin.val_float) {
 8003310:	ed97 7a01 	vldr	s14, [r7, #4]
 8003314:	4b09      	ldr	r3, [pc, #36]	; (800333c <setPcoeff1Freq+0x48>)
 8003316:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Pcoeff1Freq.valueAbsMax.val_float ||
 800331a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800331e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003322:	d801      	bhi.n	8003328 <setPcoeff1Freq+0x34>
       return false;
 8003324:	2300      	movs	r3, #0
 8003326:	e003      	b.n	8003330 <setPcoeff1Freq+0x3c>
    } else {
        Pcoeff1Freq.value = value;
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <setPcoeff1Freq+0x48>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800332e:	2301      	movs	r3, #1
    }
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	20000cd0 	.word	0x20000cd0

08003340 <getPcoeff1Freq>:
valueTypes getPcoeff1Freq(void) {
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
    return Pcoeff1Freq.value;
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <getPcoeff1Freq+0x14>)
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003348:	4618      	mov	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20000cd0 	.word	0x20000cd0

08003358 <setPcoeff2Freq>:
bool setPcoeff2Freq(valueTypes value) {
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Pcoeff2Freq.valueAbsMax.val_float ||
 8003360:	ed97 7a01 	vldr	s14, [r7, #4]
 8003364:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <setPcoeff2Freq+0x48>)
 8003366:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800336a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800336e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003372:	da09      	bge.n	8003388 <setPcoeff2Freq+0x30>
       value.val_float <= Pcoeff2Freq.valueAbsMin.val_float) {
 8003374:	ed97 7a01 	vldr	s14, [r7, #4]
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <setPcoeff2Freq+0x48>)
 800337a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Pcoeff2Freq.valueAbsMax.val_float ||
 800337e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003386:	d801      	bhi.n	800338c <setPcoeff2Freq+0x34>
       return false;
 8003388:	2300      	movs	r3, #0
 800338a:	e003      	b.n	8003394 <setPcoeff2Freq+0x3c>
    } else {
        Pcoeff2Freq.value = value;
 800338c:	4a04      	ldr	r2, [pc, #16]	; (80033a0 <setPcoeff2Freq+0x48>)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8003392:	2301      	movs	r3, #1
    }
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	20000d0c 	.word	0x20000d0c

080033a4 <getPcoeff2Freq>:
valueTypes getPcoeff2Freq(void) {
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
    return Pcoeff2Freq.value;
 80033a8:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <getPcoeff2Freq+0x14>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000d0c 	.word	0x20000d0c

080033bc <setIcoeff1Freq>:
bool setIcoeff1Freq(valueTypes value) {
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Icoeff1Freq.valueAbsMax.val_float ||
 80033c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <setIcoeff1Freq+0x48>)
 80033ca:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80033ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d6:	da09      	bge.n	80033ec <setIcoeff1Freq+0x30>
       value.val_float <= Icoeff1Freq.valueAbsMin.val_float) {
 80033d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <setIcoeff1Freq+0x48>)
 80033de:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Icoeff1Freq.valueAbsMax.val_float ||
 80033e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ea:	d801      	bhi.n	80033f0 <setIcoeff1Freq+0x34>
       return false;
 80033ec:	2300      	movs	r3, #0
 80033ee:	e003      	b.n	80033f8 <setIcoeff1Freq+0x3c>
    } else {
        Icoeff1Freq.value = value;
 80033f0:	4a04      	ldr	r2, [pc, #16]	; (8003404 <setIcoeff1Freq+0x48>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80033f6:	2301      	movs	r3, #1
    }
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	20000d48 	.word	0x20000d48

08003408 <getIcoeff1Freq>:
valueTypes getIcoeff1Freq(void) {
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
    return Icoeff1Freq.value;
 800340c:	4b03      	ldr	r3, [pc, #12]	; (800341c <getIcoeff1Freq+0x14>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000d48 	.word	0x20000d48

08003420 <setIcoeff2Freq>:
bool setIcoeff2Freq(valueTypes value) {
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Icoeff2Freq.valueAbsMax.val_float ||
 8003428:	ed97 7a01 	vldr	s14, [r7, #4]
 800342c:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <setIcoeff2Freq+0x48>)
 800342e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003432:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343a:	da09      	bge.n	8003450 <setIcoeff2Freq+0x30>
       value.val_float <= Icoeff2Freq.valueAbsMin.val_float) {
 800343c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003440:	4b09      	ldr	r3, [pc, #36]	; (8003468 <setIcoeff2Freq+0x48>)
 8003442:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Icoeff2Freq.valueAbsMax.val_float ||
 8003446:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800344a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344e:	d801      	bhi.n	8003454 <setIcoeff2Freq+0x34>
       return false;
 8003450:	2300      	movs	r3, #0
 8003452:	e003      	b.n	800345c <setIcoeff2Freq+0x3c>
    } else {
        Icoeff2Freq.value = value;
 8003454:	4a04      	ldr	r2, [pc, #16]	; (8003468 <setIcoeff2Freq+0x48>)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 800345a:	2301      	movs	r3, #1
    }
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	20000d84 	.word	0x20000d84

0800346c <getIcoeff2Freq>:
valueTypes getIcoeff2Freq(void) {
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
    return Icoeff2Freq.value;
 8003470:	4b03      	ldr	r3, [pc, #12]	; (8003480 <getIcoeff2Freq+0x14>)
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000d84 	.word	0x20000d84

08003484 <setDcoeff1Freq>:
bool setDcoeff1Freq(valueTypes value) {
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Dcoeff1Freq.valueAbsMax.val_float ||
 800348c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003490:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <setDcoeff1Freq+0x48>)
 8003492:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800349a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349e:	da09      	bge.n	80034b4 <setDcoeff1Freq+0x30>
       value.val_float <= Dcoeff1Freq.valueAbsMin.val_float) {
 80034a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80034a4:	4b09      	ldr	r3, [pc, #36]	; (80034cc <setDcoeff1Freq+0x48>)
 80034a6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Dcoeff1Freq.valueAbsMax.val_float ||
 80034aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b2:	d801      	bhi.n	80034b8 <setDcoeff1Freq+0x34>
       return false;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e003      	b.n	80034c0 <setDcoeff1Freq+0x3c>
    } else {
        Dcoeff1Freq.value = value;
 80034b8:	4a04      	ldr	r2, [pc, #16]	; (80034cc <setDcoeff1Freq+0x48>)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80034be:	2301      	movs	r3, #1
    }
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	20000dc0 	.word	0x20000dc0

080034d0 <getDcoeff1Freq>:
valueTypes getDcoeff1Freq(void) {
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
    return Dcoeff1Freq.value;
 80034d4:	4b03      	ldr	r3, [pc, #12]	; (80034e4 <getDcoeff1Freq+0x14>)
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	20000dc0 	.word	0x20000dc0

080034e8 <setDcoeff2Freq>:
bool setDcoeff2Freq(valueTypes value) {
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
    if(value.val_float >= Dcoeff2Freq.valueAbsMax.val_float ||
 80034f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80034f4:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <setDcoeff2Freq+0x48>)
 80034f6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80034fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003502:	da09      	bge.n	8003518 <setDcoeff2Freq+0x30>
       value.val_float <= Dcoeff2Freq.valueAbsMin.val_float) {
 8003504:	ed97 7a01 	vldr	s14, [r7, #4]
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <setDcoeff2Freq+0x48>)
 800350a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= Dcoeff2Freq.valueAbsMax.val_float ||
 800350e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003516:	d801      	bhi.n	800351c <setDcoeff2Freq+0x34>
       return false;
 8003518:	2300      	movs	r3, #0
 800351a:	e003      	b.n	8003524 <setDcoeff2Freq+0x3c>
    } else {
        Dcoeff2Freq.value = value;
 800351c:	4a04      	ldr	r2, [pc, #16]	; (8003530 <setDcoeff2Freq+0x48>)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8003522:	2301      	movs	r3, #1
    }
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	20000dfc 	.word	0x20000dfc

08003534 <getDcoeff2Freq>:

valueTypes getDcoeff2Freq(void) {
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
    return Dcoeff2Freq.value;
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <getDcoeff2Freq+0x14>)
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800353c:	4618      	mov	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	20000dfc 	.word	0x20000dfc

0800354c <setTempCh1Set>:

bool setTempCh1Set(valueTypes value) {
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
    if(value.val_float >= TempCh1Set.valueAbsMax.val_float ||
 8003554:	ed97 7a01 	vldr	s14, [r7, #4]
 8003558:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <setTempCh1Set+0x48>)
 800355a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800355e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003566:	da09      	bge.n	800357c <setTempCh1Set+0x30>
       value.val_float <= TempCh1Set.valueAbsMin.val_float) {
 8003568:	ed97 7a01 	vldr	s14, [r7, #4]
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <setTempCh1Set+0x48>)
 800356e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= TempCh1Set.valueAbsMax.val_float ||
 8003572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357a:	d801      	bhi.n	8003580 <setTempCh1Set+0x34>
       return false;
 800357c:	2300      	movs	r3, #0
 800357e:	e003      	b.n	8003588 <setTempCh1Set+0x3c>
    } else {
    	TempCh1Set.value = value;
 8003580:	4a04      	ldr	r2, [pc, #16]	; (8003594 <setTempCh1Set+0x48>)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8003586:	2301      	movs	r3, #1
    }
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	20000e38 	.word	0x20000e38

08003598 <getTempCh1Set>:
valueTypes getTempCh1Set(void) {
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
    return TempCh1Set.value;
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <getTempCh1Set+0x14>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000e38 	.word	0x20000e38

080035b0 <setTempCh2Set>:
bool setTempCh2Set(valueTypes value) {
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
    if(value.val_float >= TempCh2Set.valueAbsMax.val_float ||
 80035b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80035bc:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <setTempCh2Set+0x48>)
 80035be:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80035c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ca:	da09      	bge.n	80035e0 <setTempCh2Set+0x30>
       value.val_float <= TempCh2Set.valueAbsMin.val_float) {
 80035cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80035d0:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <setTempCh2Set+0x48>)
 80035d2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= TempCh2Set.valueAbsMax.val_float ||
 80035d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035de:	d801      	bhi.n	80035e4 <setTempCh2Set+0x34>
       return false;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e003      	b.n	80035ec <setTempCh2Set+0x3c>
    } else {
    	TempCh2Set.value = value;
 80035e4:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <setTempCh2Set+0x48>)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80035ea:	2301      	movs	r3, #1
    }
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	20000e74 	.word	0x20000e74

080035fc <getTempCh2Set>:
valueTypes getTempCh2Set(void) {
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
    return TempCh2Set.value;
 8003600:	4b03      	ldr	r3, [pc, #12]	; (8003610 <getTempCh2Set+0x14>)
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003604:	4618      	mov	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20000e74 	.word	0x20000e74

08003614 <setI1Set>:

bool setI1Set(valueTypes value) {
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I1Set.valueAbsMax.val_float ||
 800361c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003620:	4b0e      	ldr	r3, [pc, #56]	; (800365c <setI1Set+0x48>)
 8003622:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362e:	da09      	bge.n	8003644 <setI1Set+0x30>
       value.val_float <= I1Set.valueAbsMin.val_float) {
 8003630:	ed97 7a01 	vldr	s14, [r7, #4]
 8003634:	4b09      	ldr	r3, [pc, #36]	; (800365c <setI1Set+0x48>)
 8003636:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I1Set.valueAbsMax.val_float ||
 800363a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800363e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003642:	d801      	bhi.n	8003648 <setI1Set+0x34>
       return false;
 8003644:	2300      	movs	r3, #0
 8003646:	e003      	b.n	8003650 <setI1Set+0x3c>
    } else {
       I1Set.value = value;
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <setI1Set+0x48>)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6313      	str	r3, [r2, #48]	; 0x30
       return true;
 800364e:	2301      	movs	r3, #1
    }
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	20000eb0 	.word	0x20000eb0

08003660 <getI1Set>:
valueTypes getI1Set(void) {
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
    return I1Set.value;
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <getI1Set+0x14>)
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000eb0 	.word	0x20000eb0

08003678 <setI2Set>:
bool setI2Set(valueTypes value) {
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
    if(value.val_float >= I2Set.valueAbsMax.val_float ||
 8003680:	ed97 7a01 	vldr	s14, [r7, #4]
 8003684:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <setI2Set+0x48>)
 8003686:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800368a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800368e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003692:	da09      	bge.n	80036a8 <setI2Set+0x30>
       value.val_float <= I2Set.valueAbsMin.val_float) {
 8003694:	ed97 7a01 	vldr	s14, [r7, #4]
 8003698:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <setI2Set+0x48>)
 800369a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= I2Set.valueAbsMax.val_float ||
 800369e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a6:	d801      	bhi.n	80036ac <setI2Set+0x34>
       return false;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e003      	b.n	80036b4 <setI2Set+0x3c>
    } else {
       I2Set.value = value;
 80036ac:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <setI2Set+0x48>)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6313      	str	r3, [r2, #48]	; 0x30
       return true;
 80036b2:	2301      	movs	r3, #1
    }
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	20000eec 	.word	0x20000eec

080036c4 <getI2Set>:
valueTypes getI2Set(void) {
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
    return I2Set.value;
 80036c8:	4b03      	ldr	r3, [pc, #12]	; (80036d8 <getI2Set+0x14>)
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20000eec 	.word	0x20000eec

080036dc <setGate1A_OnOff>:

bool setGate1A_OnOff(valueTypes value) {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
	Gate1A_OnOff.value = value;
 80036e4:	4a08      	ldr	r2, [pc, #32]	; (8003708 <setGate1A_OnOff+0x2c>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6313      	str	r3, [r2, #48]	; 0x30
	HAL_GPIO_WritePin(Gates1_A_Dis_GPIO_Port, Gates1_A_Dis_Pin, !value.val_bool);
 80036ea:	793b      	ldrb	r3, [r7, #4]
 80036ec:	f083 0301 	eor.w	r3, r3, #1
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	2101      	movs	r1, #1
 80036f6:	4805      	ldr	r0, [pc, #20]	; (800370c <setGate1A_OnOff+0x30>)
 80036f8:	f004 fd96 	bl	8008228 <HAL_GPIO_WritePin>
    return true;
 80036fc:	2301      	movs	r3, #1
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000f28 	.word	0x20000f28
 800370c:	40020400 	.word	0x40020400

08003710 <getGate1A_OnOff>:
valueTypes getGate1A_OnOff(void) {
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
    return Gate1A_OnOff.value;
 8003714:	4b03      	ldr	r3, [pc, #12]	; (8003724 <getGate1A_OnOff+0x14>)
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003718:	4618      	mov	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	20000f28 	.word	0x20000f28

08003728 <setGate1B_OnOff>:
bool setGate1B_OnOff(valueTypes value) {
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Gates1_B_Dis_GPIO_Port, Gates1_B_Dis_Pin, !value.val_bool);
 8003730:	793b      	ldrb	r3, [r7, #4]
 8003732:	f083 0301 	eor.w	r3, r3, #1
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	2102      	movs	r1, #2
 800373c:	4805      	ldr	r0, [pc, #20]	; (8003754 <setGate1B_OnOff+0x2c>)
 800373e:	f004 fd73 	bl	8008228 <HAL_GPIO_WritePin>
    Gate1B_OnOff.value = value;
 8003742:	4a05      	ldr	r2, [pc, #20]	; (8003758 <setGate1B_OnOff+0x30>)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8003748:	2301      	movs	r3, #1
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40020400 	.word	0x40020400
 8003758:	20000f64 	.word	0x20000f64

0800375c <getGate1B_OnOff>:
valueTypes getGate1B_OnOff(void) {
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
    return Gate1B_OnOff.value;
 8003760:	4b03      	ldr	r3, [pc, #12]	; (8003770 <getGate1B_OnOff+0x14>)
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000f64 	.word	0x20000f64

08003774 <setGate2A_OnOff>:
bool setGate2A_OnOff(valueTypes value) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Gates2_A_Dis_GPIO_Port, Gates2_A_Dis_Pin, !value.val_bool);
 800377c:	793b      	ldrb	r3, [r7, #4]
 800377e:	f083 0301 	eor.w	r3, r3, #1
 8003782:	b2db      	uxtb	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	2104      	movs	r1, #4
 8003788:	4805      	ldr	r0, [pc, #20]	; (80037a0 <setGate2A_OnOff+0x2c>)
 800378a:	f004 fd4d 	bl	8008228 <HAL_GPIO_WritePin>
	Gate2A_OnOff.value = value;
 800378e:	4a05      	ldr	r2, [pc, #20]	; (80037a4 <setGate2A_OnOff+0x30>)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 8003794:	2301      	movs	r3, #1
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40020400 	.word	0x40020400
 80037a4:	20000fa0 	.word	0x20000fa0

080037a8 <getGate2A_OnOff>:
valueTypes getGate2A_OnOff(void) {
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
    return Gate2A_OnOff.value;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <getGate2A_OnOff+0x14>)
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000fa0 	.word	0x20000fa0

080037c0 <setGate2B_OnOff>:
bool setGate2B_OnOff(valueTypes value) {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Gates2_B_Dis_GPIO_Port, Gates2_B_Dis_Pin, !value.val_bool);
 80037c8:	793b      	ldrb	r3, [r7, #4]
 80037ca:	f083 0301 	eor.w	r3, r3, #1
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	2108      	movs	r1, #8
 80037d4:	4805      	ldr	r0, [pc, #20]	; (80037ec <setGate2B_OnOff+0x2c>)
 80037d6:	f004 fd27 	bl	8008228 <HAL_GPIO_WritePin>
    Gate2B_OnOff.value = value;
 80037da:	4a05      	ldr	r2, [pc, #20]	; (80037f0 <setGate2B_OnOff+0x30>)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6313      	str	r3, [r2, #48]	; 0x30
    return true;
 80037e0:	2301      	movs	r3, #1
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40020400 	.word	0x40020400
 80037f0:	20000fdc 	.word	0x20000fdc

080037f4 <getGate2B_OnOff>:
valueTypes getGate2B_OnOff(void) {
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
    return Gate2B_OnOff.value;
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <getGate2B_OnOff+0x14>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000fdc 	.word	0x20000fdc

0800380c <setGateH1A>:

bool setGateH1A(valueTypes value) {
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
	GateH1A.value = value;
 8003814:	4a08      	ldr	r2, [pc, #32]	; (8003838 <setGateH1A+0x2c>)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6313      	str	r3, [r2, #48]	; 0x30
	HAL_GPIO_WritePin(GateH1_A_GPIO_Port, GateH1_A_Pin, !value.val_bool);
 800381a:	793b      	ldrb	r3, [r7, #4]
 800381c:	f083 0301 	eor.w	r3, r3, #1
 8003820:	b2db      	uxtb	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	2110      	movs	r1, #16
 8003826:	4805      	ldr	r0, [pc, #20]	; (800383c <setGateH1A+0x30>)
 8003828:	f004 fcfe 	bl	8008228 <HAL_GPIO_WritePin>
    return true;
 800382c:	2301      	movs	r3, #1
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20001018 	.word	0x20001018
 800383c:	40020800 	.word	0x40020800

08003840 <getGateH1A>:
valueTypes getGateH1A(void) {
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
    return GateH1A.value;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <getGateH1A+0x14>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20001018 	.word	0x20001018

08003858 <setGateH1B>:
bool setGateH1B(valueTypes value) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
    GateH1B.value = value;
 8003860:	4a08      	ldr	r2, [pc, #32]	; (8003884 <setGateH1B+0x2c>)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6313      	str	r3, [r2, #48]	; 0x30
    HAL_GPIO_WritePin(GateH1_B_GPIO_Port, GateH1_B_Pin, !value.val_bool);
 8003866:	793b      	ldrb	r3, [r7, #4]
 8003868:	f083 0301 	eor.w	r3, r3, #1
 800386c:	b2db      	uxtb	r3, r3
 800386e:	461a      	mov	r2, r3
 8003870:	2120      	movs	r1, #32
 8003872:	4805      	ldr	r0, [pc, #20]	; (8003888 <setGateH1B+0x30>)
 8003874:	f004 fcd8 	bl	8008228 <HAL_GPIO_WritePin>
    return true;
 8003878:	2301      	movs	r3, #1
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20001054 	.word	0x20001054
 8003888:	40020800 	.word	0x40020800

0800388c <getGateH1B>:
valueTypes getGateH1B(void) {
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
    return GateH1B.value;
 8003890:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <getGateH1B+0x14>)
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20001054 	.word	0x20001054

080038a4 <setGateH2A>:
bool setGateH2A(valueTypes value) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	GateH2A.value = value;
 80038ac:	4a08      	ldr	r2, [pc, #32]	; (80038d0 <setGateH2A+0x2c>)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6313      	str	r3, [r2, #48]	; 0x30
	HAL_GPIO_WritePin(GateH2_A_GPIO_Port, GateH2_A_Pin, !value.val_bool);
 80038b2:	793b      	ldrb	r3, [r7, #4]
 80038b4:	f083 0301 	eor.w	r3, r3, #1
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80038c0:	4804      	ldr	r0, [pc, #16]	; (80038d4 <setGateH2A+0x30>)
 80038c2:	f004 fcb1 	bl	8008228 <HAL_GPIO_WritePin>
    return true;
 80038c6:	2301      	movs	r3, #1
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20001090 	.word	0x20001090
 80038d4:	40020c00 	.word	0x40020c00

080038d8 <getGateH2A>:
valueTypes getGateH2A(void) {
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
    return GateH2A.value;
 80038dc:	4b03      	ldr	r3, [pc, #12]	; (80038ec <getGateH2A+0x14>)
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20001090 	.word	0x20001090

080038f0 <setGateH2B>:
bool setGateH2B(valueTypes value) {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
    GateH2B.value = value;
 80038f8:	4a08      	ldr	r2, [pc, #32]	; (800391c <setGateH2B+0x2c>)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6313      	str	r3, [r2, #48]	; 0x30
    HAL_GPIO_WritePin(GateH2_B_GPIO_Port, GateH2_B_Pin, !value.val_bool);
 80038fe:	793b      	ldrb	r3, [r7, #4]
 8003900:	f083 0301 	eor.w	r3, r3, #1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800390c:	4804      	ldr	r0, [pc, #16]	; (8003920 <setGateH2B+0x30>)
 800390e:	f004 fc8b 	bl	8008228 <HAL_GPIO_WritePin>
    return true;
 8003912:	2301      	movs	r3, #1
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	200010cc 	.word	0x200010cc
 8003920:	40020c00 	.word	0x40020c00

08003924 <getGateH2B>:
valueTypes getGateH2B(void) {
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
    return GateH2B.value;
 8003928:	4b03      	ldr	r3, [pc, #12]	; (8003938 <getGateH2B+0x14>)
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	200010cc 	.word	0x200010cc

0800393c <setPWM_CH1>:

bool setPWM_CH1(valueTypes value) {
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
    if(value.val_float >= PWM_CH1.valueAbsMax.val_float ||
 8003944:	ed97 7a01 	vldr	s14, [r7, #4]
 8003948:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <setPWM_CH1+0x48>)
 800394a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800394e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003956:	da09      	bge.n	800396c <setPWM_CH1+0x30>
       value.val_float <= PWM_CH1.valueAbsMin.val_float) {
 8003958:	ed97 7a01 	vldr	s14, [r7, #4]
 800395c:	4b09      	ldr	r3, [pc, #36]	; (8003984 <setPWM_CH1+0x48>)
 800395e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= PWM_CH1.valueAbsMax.val_float ||
 8003962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396a:	d801      	bhi.n	8003970 <setPWM_CH1+0x34>
       return false;
 800396c:	2300      	movs	r3, #0
 800396e:	e003      	b.n	8003978 <setPWM_CH1+0x3c>
    } else {
        PWM_CH1.value = value;
 8003970:	4a04      	ldr	r2, [pc, #16]	; (8003984 <setPWM_CH1+0x48>)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8003976:	2301      	movs	r3, #1
    }
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	20001108 	.word	0x20001108

08003988 <getPWM_CH1>:
valueTypes getPWM_CH1(void) {
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
    return PWM_CH1.value;
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <getPWM_CH1+0x14>)
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20001108 	.word	0x20001108

080039a0 <setPWM_CH2>:

bool setPWM_CH2(valueTypes value) {
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
    if(value.val_float >= PWM_CH2.valueAbsMax.val_float ||
 80039a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80039ac:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <setPWM_CH2+0x48>)
 80039ae:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80039b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ba:	da09      	bge.n	80039d0 <setPWM_CH2+0x30>
       value.val_float <= PWM_CH2.valueAbsMin.val_float) {
 80039bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <setPWM_CH2+0x48>)
 80039c2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= PWM_CH2.valueAbsMax.val_float ||
 80039c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ce:	d801      	bhi.n	80039d4 <setPWM_CH2+0x34>
       return false;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e003      	b.n	80039dc <setPWM_CH2+0x3c>
    } else {
    	PWM_CH2.value = value;
 80039d4:	4a04      	ldr	r2, [pc, #16]	; (80039e8 <setPWM_CH2+0x48>)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 80039da:	2301      	movs	r3, #1
    }
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	20001144 	.word	0x20001144

080039ec <getPWM_CH2>:
valueTypes getPWM_CH2(void) {
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
    return PWM_CH2.value;
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <getPWM_CH2+0x14>)
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	20001144 	.word	0x20001144

08003a04 <setCH1_Polarity>:

bool setCH1_Polarity(valueTypes value) {
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	CH1_Polarity.value = value;
 8003a0c:	4a04      	ldr	r2, [pc, #16]	; (8003a20 <setCH1_Polarity+0x1c>)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6313      	str	r3, [r2, #48]	; 0x30
	return true;
 8003a12:	2301      	movs	r3, #1
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	20001180 	.word	0x20001180

08003a24 <getCH1_Polarity>:

valueTypes getCH1_Polarity() {
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
	return CH1_Polarity.value;
 8003a28:	4b03      	ldr	r3, [pc, #12]	; (8003a38 <getCH1_Polarity+0x14>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	20001180 	.word	0x20001180

08003a3c <setCH2_Polarity>:

bool setCH2_Polarity(valueTypes value) {
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	CH2_Polarity.value = value;
 8003a44:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <setCH2_Polarity+0x1c>)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6313      	str	r3, [r2, #48]	; 0x30
	return true;
 8003a4a:	2301      	movs	r3, #1
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	200011bc 	.word	0x200011bc

08003a5c <getCH2_Polarity>:

valueTypes getCH2_Polarity() {
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
	return CH2_Polarity.value;
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <getCH2_Polarity+0x14>)
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	200011bc 	.word	0x200011bc

08003a74 <setFreq>:

bool setFreq(valueTypes value) {
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
   Freq.value = value;
 8003a7c:	4a04      	ldr	r2, [pc, #16]	; (8003a90 <setFreq+0x1c>)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6313      	str	r3, [r2, #48]	; 0x30
   return true;
 8003a82:	2301      	movs	r3, #1
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	200011f8 	.word	0x200011f8

08003a94 <getFreq>:
valueTypes getFreq() {
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
    return Freq.value;
 8003a98:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <getFreq+0x14>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	200011f8 	.word	0x200011f8

08003aac <setFreqSet>:

bool setFreqSet(valueTypes value) {
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
    if(value.val_float >= FreqSet.valueAbsMax.val_float ||
 8003ab4:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ab8:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <setFreqSet+0x48>)
 8003aba:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003abe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac6:	da09      	bge.n	8003adc <setFreqSet+0x30>
       value.val_float <= FreqSet.valueAbsMin.val_float) {
 8003ac8:	ed97 7a01 	vldr	s14, [r7, #4]
 8003acc:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <setFreqSet+0x48>)
 8003ace:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    if(value.val_float >= FreqSet.valueAbsMax.val_float ||
 8003ad2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ada:	d801      	bhi.n	8003ae0 <setFreqSet+0x34>
       return false;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e003      	b.n	8003ae8 <setFreqSet+0x3c>
    } else {
    	FreqSet.value = value;
 8003ae0:	4a04      	ldr	r2, [pc, #16]	; (8003af4 <setFreqSet+0x48>)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6313      	str	r3, [r2, #48]	; 0x30
        return true;
 8003ae6:	2301      	movs	r3, #1
    }
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	20001234 	.word	0x20001234

08003af8 <getFreqSet>:
valueTypes getFreqSet(void) {
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
    return FreqSet.value;
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <getFreqSet+0x14>)
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	20001234 	.word	0x20001234

08003b10 <commandParamList>:
}
valueTypes getAlarmMasks() {
    return AlarmMasks.value;
}

void commandParamList() {
 8003b10:	b5b0      	push	{r4, r5, r7, lr}
 8003b12:	b0a6      	sub	sp, #152	; 0x98
 8003b14:	af04      	add	r7, sp, #16
	for(int i = 0; i < PARAMS_COUNT; i++) {
 8003b16:	2300      	movs	r3, #0
 8003b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b1c:	e055      	b.n	8003bca <commandParamList+0xba>
		if(params[i] == 0) {
 8003b1e:	4a2f      	ldr	r2, [pc, #188]	; (8003bdc <commandParamList+0xcc>)
 8003b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d048      	beq.n	8003bbe <commandParamList+0xae>
			continue;
		} else {
			char buffer[128];
			sprintf((char*)buffer, "%u:[%s:%s:%s]:%s",
					params[i]->commandNumber,
 8003b2c:	4a2b      	ldr	r2, [pc, #172]	; (8003bdc <commandParamList+0xcc>)
 8003b2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b36:	881b      	ldrh	r3, [r3, #0]
			sprintf((char*)buffer, "%u:[%s:%s:%s]:%s",
 8003b38:	461d      	mov	r5, r3
					params[i]->isCommand ? "COMMAND" : typeNames[params[i]->type],
 8003b3a:	4a28      	ldr	r2, [pc, #160]	; (8003bdc <commandParamList+0xcc>)
 8003b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
			sprintf((char*)buffer, "%u:[%s:%s:%s]:%s",
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <commandParamList+0x40>
 8003b4c:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <commandParamList+0xd0>)
 8003b4e:	e00a      	b.n	8003b66 <commandParamList+0x56>
					params[i]->isCommand ? "COMMAND" : typeNames[params[i]->type],
 8003b50:	4a22      	ldr	r2, [pc, #136]	; (8003bdc <commandParamList+0xcc>)
 8003b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b5e:	461a      	mov	r2, r3
			sprintf((char*)buffer, "%u:[%s:%s:%s]:%s",
 8003b60:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <commandParamList+0xd4>)
 8003b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
					params[i]->readOnly ? "R/O" : "",
 8003b66:	491d      	ldr	r1, [pc, #116]	; (8003bdc <commandParamList+0xcc>)
 8003b68:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003b6c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003b70:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
			sprintf((char*)buffer, "%u:[%s:%s:%s]:%s",
 8003b74:	2a00      	cmp	r2, #0
 8003b76:	d001      	beq.n	8003b7c <commandParamList+0x6c>
 8003b78:	4a1b      	ldr	r2, [pc, #108]	; (8003be8 <commandParamList+0xd8>)
 8003b7a:	e000      	b.n	8003b7e <commandParamList+0x6e>
 8003b7c:	4a1b      	ldr	r2, [pc, #108]	; (8003bec <commandParamList+0xdc>)
					params[i]->isFlash ? "F" : "",
 8003b7e:	4817      	ldr	r0, [pc, #92]	; (8003bdc <commandParamList+0xcc>)
 8003b80:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003b84:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8003b88:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
			sprintf((char*)buffer, "%u:[%s:%s:%s]:%s",
 8003b8c:	2900      	cmp	r1, #0
 8003b8e:	d001      	beq.n	8003b94 <commandParamList+0x84>
 8003b90:	4917      	ldr	r1, [pc, #92]	; (8003bf0 <commandParamList+0xe0>)
 8003b92:	e000      	b.n	8003b96 <commandParamList+0x86>
 8003b94:	4915      	ldr	r1, [pc, #84]	; (8003bec <commandParamList+0xdc>)
					params[i]->commandDescription);
 8003b96:	4c11      	ldr	r4, [pc, #68]	; (8003bdc <commandParamList+0xcc>)
 8003b98:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8003b9c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003ba0:	3002      	adds	r0, #2
			sprintf((char*)buffer, "%u:[%s:%s:%s]:%s",
 8003ba2:	1d3c      	adds	r4, r7, #4
 8003ba4:	9002      	str	r0, [sp, #8]
 8003ba6:	9101      	str	r1, [sp, #4]
 8003ba8:	9200      	str	r2, [sp, #0]
 8003baa:	462a      	mov	r2, r5
 8003bac:	4911      	ldr	r1, [pc, #68]	; (8003bf4 <commandParamList+0xe4>)
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f008 fafe 	bl	800c1b0 <siprintf>
			UARTtransmit((char*)buffer);
 8003bb4:	1d3b      	adds	r3, r7, #4
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f8b4 	bl	8003d24 <UARTtransmit>
 8003bbc:	e000      	b.n	8003bc0 <commandParamList+0xb0>
			continue;
 8003bbe:	bf00      	nop
	for(int i = 0; i < PARAMS_COUNT; i++) {
 8003bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bce:	2b63      	cmp	r3, #99	; 0x63
 8003bd0:	dda5      	ble.n	8003b1e <commandParamList+0xe>
		}
	}
	return;
 8003bd2:	bf00      	nop
}
 8003bd4:	3788      	adds	r7, #136	; 0x88
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20001604 	.word	0x20001604
 8003be0:	080102e8 	.word	0x080102e8
 8003be4:	20000008 	.word	0x20000008
 8003be8:	080102f0 	.word	0x080102f0
 8003bec:	080102f4 	.word	0x080102f4
 8003bf0:	080102f8 	.word	0x080102f8
 8003bf4:	080102fc 	.word	0x080102fc

08003bf8 <commandSaveFlash>:

void commandSaveFlash() {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
	SaveToFlash();
 8003bfc:	f000 fff6 	bl	8004bec <SaveToFlash>
	UARTtransmit("Flash was succesfully saved");
 8003c00:	4802      	ldr	r0, [pc, #8]	; (8003c0c <commandSaveFlash+0x14>)
 8003c02:	f000 f88f 	bl	8003d24 <UARTtransmit>
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	08010310 	.word	0x08010310

08003c10 <str_split>:
uint16_t TXtimeout = 1000;
uint8_t RXbufferChar[1];
uint8_t RXbufferElem = 0;

char** str_split(char* a_str, const char a_delim)
{
 8003c10:	b590      	push	{r4, r7, lr}
 8003c12:	b08b      	sub	sp, #44	; 0x2c
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	70fb      	strb	r3, [r7, #3]
    char** result    = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	613b      	str	r3, [r7, #16]
    size_t count     = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
    char* tmp        = a_str;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	623b      	str	r3, [r7, #32]
    char* last_comma = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61fb      	str	r3, [r7, #28]
    char delim[2];
    delim[0] = a_delim;
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	733b      	strb	r3, [r7, #12]
    delim[1] = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	737b      	strb	r3, [r7, #13]

    /* Count how many elements will be extracted. */
    while (*tmp)
 8003c34:	e00c      	b.n	8003c50 <str_split+0x40>
    {
        if (a_delim == *tmp)
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d104      	bne.n	8003c4a <str_split+0x3a>
        {
            count++;
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	3301      	adds	r3, #1
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
            last_comma = tmp;
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	61fb      	str	r3, [r7, #28]
        }
        tmp++;
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	623b      	str	r3, [r7, #32]
    while (*tmp)
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ee      	bne.n	8003c36 <str_split+0x26>
    }

    /* Add space for trailing token. */
    count += last_comma < (a_str + strlen(a_str) - 1);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7fc fac3 	bl	80001e4 <strlen>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	3b01      	subs	r3, #1
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	bf34      	ite	cc
 8003c6c:	2301      	movcc	r3, #1
 8003c6e:	2300      	movcs	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	4413      	add	r3, r2
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24

    /* Add space for terminating null string so caller
       knows where the list of returned strings ends. */
    count++;
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24

    result = malloc(sizeof(char*) * count);
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f007 f99b 	bl	800afc0 <malloc>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	613b      	str	r3, [r7, #16]

    if (result)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d039      	beq.n	8003d08 <str_split+0xf8>
    {
        size_t idx  = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61bb      	str	r3, [r7, #24]
        char* token = strtok(a_str, delim);
 8003c98:	f107 030c 	add.w	r3, r7, #12
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f009 f95e 	bl	800cf60 <strtok>
 8003ca4:	6178      	str	r0, [r7, #20]

        while (token)
 8003ca6:	e01b      	b.n	8003ce0 <str_split+0xd0>
        {
            assert(idx < count);
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d305      	bcc.n	8003cbc <str_split+0xac>
 8003cb0:	4b18      	ldr	r3, [pc, #96]	; (8003d14 <str_split+0x104>)
 8003cb2:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <str_split+0x108>)
 8003cb4:	2137      	movs	r1, #55	; 0x37
 8003cb6:	4819      	ldr	r0, [pc, #100]	; (8003d1c <str_split+0x10c>)
 8003cb8:	f007 f928 	bl	800af0c <__assert_func>
            *(result + idx++) = strdup(token);
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	61ba      	str	r2, [r7, #24]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	18d4      	adds	r4, r2, r3
 8003cc8:	6978      	ldr	r0, [r7, #20]
 8003cca:	f008 fb03 	bl	800c2d4 <strdup>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	6023      	str	r3, [r4, #0]
            token = strtok(0, delim);
 8003cd2:	f107 030c 	add.w	r3, r7, #12
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	2000      	movs	r0, #0
 8003cda:	f009 f941 	bl	800cf60 <strtok>
 8003cde:	6178      	str	r0, [r7, #20]
        while (token)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e0      	bne.n	8003ca8 <str_split+0x98>
        }
        assert(idx == count - 1);
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d005      	beq.n	8003cfc <str_split+0xec>
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <str_split+0x110>)
 8003cf2:	4a09      	ldr	r2, [pc, #36]	; (8003d18 <str_split+0x108>)
 8003cf4:	213b      	movs	r1, #59	; 0x3b
 8003cf6:	4809      	ldr	r0, [pc, #36]	; (8003d1c <str_split+0x10c>)
 8003cf8:	f007 f908 	bl	800af0c <__assert_func>
        *(result + idx) = 0;
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4413      	add	r3, r2
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
    }

    return result;
 8003d08:	693b      	ldr	r3, [r7, #16]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	372c      	adds	r7, #44	; 0x2c
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd90      	pop	{r4, r7, pc}
 8003d12:	bf00      	nop
 8003d14:	0801032c 	.word	0x0801032c
 8003d18:	080104a8 	.word	0x080104a8
 8003d1c:	08010338 	.word	0x08010338
 8003d20:	08010358 	.word	0x08010358

08003d24 <UARTtransmit>:

void UARTtransmit(char* string) {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	uint16_t size = sprintf((char*)TXbuffer, "%s%c",string, EOL);
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <UARTtransmit+0x30>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	4909      	ldr	r1, [pc, #36]	; (8003d58 <UARTtransmit+0x34>)
 8003d34:	4809      	ldr	r0, [pc, #36]	; (8003d5c <UARTtransmit+0x38>)
 8003d36:	f008 fa3b 	bl	800c1b0 <siprintf>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, TXbuffer, size, TXtimeout);
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <UARTtransmit+0x3c>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	89fa      	ldrh	r2, [r7, #14]
 8003d44:	4905      	ldr	r1, [pc, #20]	; (8003d5c <UARTtransmit+0x38>)
 8003d46:	4807      	ldr	r0, [pc, #28]	; (8003d64 <UARTtransmit+0x40>)
 8003d48:	f006 f8b5 	bl	8009eb6 <HAL_UART_Transmit>
}
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	200012e9 	.word	0x200012e9
 8003d58:	0801036c 	.word	0x0801036c
 8003d5c:	20001bfc 	.word	0x20001bfc
 8003d60:	200012ea 	.word	0x200012ea
 8003d64:	2000209c 	.word	0x2000209c

08003d68 <UARTget>:

bool UARTget(uint16_t com) {
 8003d68:	b590      	push	{r4, r7, lr}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	4603      	mov	r3, r0
 8003d70:	80fb      	strh	r3, [r7, #6]
	if(params[paramTable[com]-1]->get) {
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	4a4f      	ldr	r2, [pc, #316]	; (8003eb4 <UARTget+0x14c>)
 8003d76:	5cd3      	ldrb	r3, [r2, r3]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	4a4f      	ldr	r2, [pc, #316]	; (8003eb8 <UARTget+0x150>)
 8003d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 808b 	beq.w	8003e9e <UARTget+0x136>
		valueTypes value = params[paramTable[com]-1]->get();
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	4a4a      	ldr	r2, [pc, #296]	; (8003eb4 <UARTget+0x14c>)
 8003d8c:	5cd3      	ldrb	r3, [r2, r3]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	4a49      	ldr	r2, [pc, #292]	; (8003eb8 <UARTget+0x150>)
 8003d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	4798      	blx	r3
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	60fb      	str	r3, [r7, #12]
		switch(params[paramTable[com]-1]->type) {
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	4a44      	ldr	r2, [pc, #272]	; (8003eb4 <UARTget+0x14c>)
 8003da2:	5cd3      	ldrb	r3, [r2, r3]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	4a44      	ldr	r2, [pc, #272]	; (8003eb8 <UARTget+0x150>)
 8003da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003db0:	2b07      	cmp	r3, #7
 8003db2:	d872      	bhi.n	8003e9a <UARTget+0x132>
 8003db4:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <UARTget+0x54>)
 8003db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dba:	bf00      	nop
 8003dbc:	08003ddd 	.word	0x08003ddd
 8003dc0:	08003df1 	.word	0x08003df1
 8003dc4:	08003e05 	.word	0x08003e05
 8003dc8:	08003e19 	.word	0x08003e19
 8003dcc:	08003e2f 	.word	0x08003e2f
 8003dd0:	08003e45 	.word	0x08003e45
 8003dd4:	08003e59 	.word	0x08003e59
 8003dd8:	08003e7d 	.word	0x08003e7d
		case UINT8_T:
			sprintf((char*)TXbuffer, "$%u:%u",com, value.val_uint8_t);
 8003ddc:	88fa      	ldrh	r2, [r7, #6]
 8003dde:	7b3b      	ldrb	r3, [r7, #12]
 8003de0:	4936      	ldr	r1, [pc, #216]	; (8003ebc <UARTget+0x154>)
 8003de2:	4837      	ldr	r0, [pc, #220]	; (8003ec0 <UARTget+0x158>)
 8003de4:	f008 f9e4 	bl	800c1b0 <siprintf>
			UARTtransmit((char*)TXbuffer);
 8003de8:	4835      	ldr	r0, [pc, #212]	; (8003ec0 <UARTget+0x158>)
 8003dea:	f7ff ff9b 	bl	8003d24 <UARTtransmit>
			break;
 8003dee:	e054      	b.n	8003e9a <UARTget+0x132>
		case UINT16_T:
				sprintf((char*)TXbuffer, "$%u:%u",com,value.val_uint16_t);
 8003df0:	88fa      	ldrh	r2, [r7, #6]
 8003df2:	89bb      	ldrh	r3, [r7, #12]
 8003df4:	4931      	ldr	r1, [pc, #196]	; (8003ebc <UARTget+0x154>)
 8003df6:	4832      	ldr	r0, [pc, #200]	; (8003ec0 <UARTget+0x158>)
 8003df8:	f008 f9da 	bl	800c1b0 <siprintf>
				UARTtransmit((char*)TXbuffer);
 8003dfc:	4830      	ldr	r0, [pc, #192]	; (8003ec0 <UARTget+0x158>)
 8003dfe:	f7ff ff91 	bl	8003d24 <UARTtransmit>
				break;
 8003e02:	e04a      	b.n	8003e9a <UARTget+0x132>
		case UINT32_T:
				sprintf((char*)TXbuffer, "$%u:%lu",com, value.val_uint32_t);
 8003e04:	88fa      	ldrh	r2, [r7, #6]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	492e      	ldr	r1, [pc, #184]	; (8003ec4 <UARTget+0x15c>)
 8003e0a:	482d      	ldr	r0, [pc, #180]	; (8003ec0 <UARTget+0x158>)
 8003e0c:	f008 f9d0 	bl	800c1b0 <siprintf>
				UARTtransmit((char*)TXbuffer);
 8003e10:	482b      	ldr	r0, [pc, #172]	; (8003ec0 <UARTget+0x158>)
 8003e12:	f7ff ff87 	bl	8003d24 <UARTtransmit>
				break;
 8003e16:	e040      	b.n	8003e9a <UARTget+0x132>
		case INT8_T:
				sprintf((char*)TXbuffer, "$%u:%d",com, value.val_int8_t);
 8003e18:	88fa      	ldrh	r2, [r7, #6]
 8003e1a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003e1e:	492a      	ldr	r1, [pc, #168]	; (8003ec8 <UARTget+0x160>)
 8003e20:	4827      	ldr	r0, [pc, #156]	; (8003ec0 <UARTget+0x158>)
 8003e22:	f008 f9c5 	bl	800c1b0 <siprintf>
				UARTtransmit((char*)TXbuffer);
 8003e26:	4826      	ldr	r0, [pc, #152]	; (8003ec0 <UARTget+0x158>)
 8003e28:	f7ff ff7c 	bl	8003d24 <UARTtransmit>
				break;
 8003e2c:	e035      	b.n	8003e9a <UARTget+0x132>
		case INT16_T:
				sprintf((char*)TXbuffer, "$%u:%d",com, value.val_int16_t);
 8003e2e:	88fa      	ldrh	r2, [r7, #6]
 8003e30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e34:	4924      	ldr	r1, [pc, #144]	; (8003ec8 <UARTget+0x160>)
 8003e36:	4822      	ldr	r0, [pc, #136]	; (8003ec0 <UARTget+0x158>)
 8003e38:	f008 f9ba 	bl	800c1b0 <siprintf>
				UARTtransmit((char*)TXbuffer);
 8003e3c:	4820      	ldr	r0, [pc, #128]	; (8003ec0 <UARTget+0x158>)
 8003e3e:	f7ff ff71 	bl	8003d24 <UARTtransmit>
				break;
 8003e42:	e02a      	b.n	8003e9a <UARTget+0x132>
		case INT32_T:
				sprintf((char*)TXbuffer, "$%u:%ld",com, value.val_int32_t);
 8003e44:	88fa      	ldrh	r2, [r7, #6]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4920      	ldr	r1, [pc, #128]	; (8003ecc <UARTget+0x164>)
 8003e4a:	481d      	ldr	r0, [pc, #116]	; (8003ec0 <UARTget+0x158>)
 8003e4c:	f008 f9b0 	bl	800c1b0 <siprintf>
				UARTtransmit((char*)TXbuffer);
 8003e50:	481b      	ldr	r0, [pc, #108]	; (8003ec0 <UARTget+0x158>)
 8003e52:	f7ff ff67 	bl	8003d24 <UARTtransmit>
				break;
 8003e56:	e020      	b.n	8003e9a <UARTget+0x132>
		case FLOAT:
				sprintf((char*)TXbuffer, "$%u:%f",com, value.val_float);
 8003e58:	88fc      	ldrh	r4, [r7, #6]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fc fb83 	bl	8000568 <__aeabi_f2d>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	e9cd 2300 	strd	r2, r3, [sp]
 8003e6a:	4622      	mov	r2, r4
 8003e6c:	4918      	ldr	r1, [pc, #96]	; (8003ed0 <UARTget+0x168>)
 8003e6e:	4814      	ldr	r0, [pc, #80]	; (8003ec0 <UARTget+0x158>)
 8003e70:	f008 f99e 	bl	800c1b0 <siprintf>
				UARTtransmit((char*)TXbuffer);
 8003e74:	4812      	ldr	r0, [pc, #72]	; (8003ec0 <UARTget+0x158>)
 8003e76:	f7ff ff55 	bl	8003d24 <UARTtransmit>
				break;
 8003e7a:	e00e      	b.n	8003e9a <UARTget+0x132>
		case BOOL:
				sprintf((char*)TXbuffer, "$%u:%s",com, value.val_bool ? "true" : "false");
 8003e7c:	88fa      	ldrh	r2, [r7, #6]
 8003e7e:	7b3b      	ldrb	r3, [r7, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <UARTget+0x120>
 8003e84:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <UARTget+0x16c>)
 8003e86:	e000      	b.n	8003e8a <UARTget+0x122>
 8003e88:	4b13      	ldr	r3, [pc, #76]	; (8003ed8 <UARTget+0x170>)
 8003e8a:	4914      	ldr	r1, [pc, #80]	; (8003edc <UARTget+0x174>)
 8003e8c:	480c      	ldr	r0, [pc, #48]	; (8003ec0 <UARTget+0x158>)
 8003e8e:	f008 f98f 	bl	800c1b0 <siprintf>
				UARTtransmit((char*)TXbuffer);
 8003e92:	480b      	ldr	r0, [pc, #44]	; (8003ec0 <UARTget+0x158>)
 8003e94:	f7ff ff46 	bl	8003d24 <UARTtransmit>
				break;
 8003e98:	bf00      	nop
		}
		return true;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e005      	b.n	8003eaa <UARTget+0x142>
	}
	else {
		UARTtransmitNum(com, "Error\%no get function");
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	490f      	ldr	r1, [pc, #60]	; (8003ee0 <UARTget+0x178>)
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 f8ea 	bl	800407c <UARTtransmitNum>
		return false;
 8003ea8:	2300      	movs	r3, #0
	}
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd90      	pop	{r4, r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20001794 	.word	0x20001794
 8003eb8:	20001604 	.word	0x20001604
 8003ebc:	08010374 	.word	0x08010374
 8003ec0:	20001bfc 	.word	0x20001bfc
 8003ec4:	0801037c 	.word	0x0801037c
 8003ec8:	08010384 	.word	0x08010384
 8003ecc:	0801038c 	.word	0x0801038c
 8003ed0:	08010394 	.word	0x08010394
 8003ed4:	0801039c 	.word	0x0801039c
 8003ed8:	080103a4 	.word	0x080103a4
 8003edc:	080103ac 	.word	0x080103ac
 8003ee0:	080103b4 	.word	0x080103b4

08003ee4 <UARTset>:

bool UARTset(uint16_t com, char* str) {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	6039      	str	r1, [r7, #0]
 8003eee:	80fb      	strh	r3, [r7, #6]
	if(!params[paramTable[com]-1]->set) {
 8003ef0:	88fb      	ldrh	r3, [r7, #6]
 8003ef2:	4a53      	ldr	r2, [pc, #332]	; (8004040 <UARTset+0x15c>)
 8003ef4:	5cd3      	ldrb	r3, [r2, r3]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	4a52      	ldr	r2, [pc, #328]	; (8004044 <UARTset+0x160>)
 8003efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <UARTset+0x2e>
		UARTtransmitNum(com, "Error\%no set function");
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	4950      	ldr	r1, [pc, #320]	; (8004048 <UARTset+0x164>)
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 f8b7 	bl	800407c <UARTtransmitNum>
		return false;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e092      	b.n	8004038 <UARTset+0x154>
	} else if(params[paramTable[com]-1]->readOnly) {
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	4a4a      	ldr	r2, [pc, #296]	; (8004040 <UARTset+0x15c>)
 8003f16:	5cd3      	ldrb	r3, [r2, r3]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	4a4a      	ldr	r2, [pc, #296]	; (8004044 <UARTset+0x160>)
 8003f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f20:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d006      	beq.n	8003f36 <UARTset+0x52>
		UARTtransmitNum(com, "Error\%read only");
 8003f28:	88fb      	ldrh	r3, [r7, #6]
 8003f2a:	4948      	ldr	r1, [pc, #288]	; (800404c <UARTset+0x168>)
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 f8a5 	bl	800407c <UARTtransmitNum>
		return false;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e080      	b.n	8004038 <UARTset+0x154>
	}
	valueTypes value;
	switch(params[paramTable[com] - 1]->type) {
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	4a41      	ldr	r2, [pc, #260]	; (8004040 <UARTset+0x15c>)
 8003f3a:	5cd3      	ldrb	r3, [r2, r3]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	4a41      	ldr	r2, [pc, #260]	; (8004044 <UARTset+0x160>)
 8003f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f48:	2b07      	cmp	r3, #7
 8003f4a:	d85a      	bhi.n	8004002 <UARTset+0x11e>
 8003f4c:	a201      	add	r2, pc, #4	; (adr r2, 8003f54 <UARTset+0x70>)
 8003f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f52:	bf00      	nop
 8003f54:	08003f75 	.word	0x08003f75
 8003f58:	08003f85 	.word	0x08003f85
 8003f5c:	08003f95 	.word	0x08003f95
 8003f60:	08003fa5 	.word	0x08003fa5
 8003f64:	08003fb5 	.word	0x08003fb5
 8003f68:	08003fc5 	.word	0x08003fc5
 8003f6c:	08003fd5 	.word	0x08003fd5
 8003f70:	08003fe5 	.word	0x08003fe5
	case UINT8_T:
		sscanf(str, "%c", &value.val_uint8_t);
 8003f74:	f107 0308 	add.w	r3, r7, #8
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4935      	ldr	r1, [pc, #212]	; (8004050 <UARTset+0x16c>)
 8003f7c:	6838      	ldr	r0, [r7, #0]
 8003f7e:	f008 f937 	bl	800c1f0 <siscanf>
		break;
 8003f82:	e03e      	b.n	8004002 <UARTset+0x11e>
	case UINT16_T:
		sscanf(str, "%hu", &value.val_uint16_t);
 8003f84:	f107 0308 	add.w	r3, r7, #8
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4932      	ldr	r1, [pc, #200]	; (8004054 <UARTset+0x170>)
 8003f8c:	6838      	ldr	r0, [r7, #0]
 8003f8e:	f008 f92f 	bl	800c1f0 <siscanf>
		break;
 8003f92:	e036      	b.n	8004002 <UARTset+0x11e>
	case UINT32_T:
		sscanf(str, "%lu", &value.val_uint32_t);
 8003f94:	f107 0308 	add.w	r3, r7, #8
 8003f98:	461a      	mov	r2, r3
 8003f9a:	492f      	ldr	r1, [pc, #188]	; (8004058 <UARTset+0x174>)
 8003f9c:	6838      	ldr	r0, [r7, #0]
 8003f9e:	f008 f927 	bl	800c1f0 <siscanf>
		break;
 8003fa2:	e02e      	b.n	8004002 <UARTset+0x11e>
	case INT8_T:
		sscanf(str, "%c", &value.val_int8_t);
 8003fa4:	f107 0308 	add.w	r3, r7, #8
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4929      	ldr	r1, [pc, #164]	; (8004050 <UARTset+0x16c>)
 8003fac:	6838      	ldr	r0, [r7, #0]
 8003fae:	f008 f91f 	bl	800c1f0 <siscanf>
		break;
 8003fb2:	e026      	b.n	8004002 <UARTset+0x11e>
	case INT16_T:
		sscanf(str, "%hd", &value.val_int16_t);
 8003fb4:	f107 0308 	add.w	r3, r7, #8
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4928      	ldr	r1, [pc, #160]	; (800405c <UARTset+0x178>)
 8003fbc:	6838      	ldr	r0, [r7, #0]
 8003fbe:	f008 f917 	bl	800c1f0 <siscanf>
		break;
 8003fc2:	e01e      	b.n	8004002 <UARTset+0x11e>
	case INT32_T:
		sscanf(str, "%ld", &value.val_int32_t);
 8003fc4:	f107 0308 	add.w	r3, r7, #8
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4925      	ldr	r1, [pc, #148]	; (8004060 <UARTset+0x17c>)
 8003fcc:	6838      	ldr	r0, [r7, #0]
 8003fce:	f008 f90f 	bl	800c1f0 <siscanf>
		break;
 8003fd2:	e016      	b.n	8004002 <UARTset+0x11e>
	case FLOAT:
		sscanf(str, "%f", &value.val_float);
 8003fd4:	f107 0308 	add.w	r3, r7, #8
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4922      	ldr	r1, [pc, #136]	; (8004064 <UARTset+0x180>)
 8003fdc:	6838      	ldr	r0, [r7, #0]
 8003fde:	f008 f907 	bl	800c1f0 <siscanf>
		break;
 8003fe2:	e00e      	b.n	8004002 <UARTset+0x11e>
	case BOOL:
		value = (valueTypes)(bool)!strcmp(str, "true");
 8003fe4:	4920      	ldr	r1, [pc, #128]	; (8004068 <UARTset+0x184>)
 8003fe6:	6838      	ldr	r0, [r7, #0]
 8003fe8:	f7fc f8f2 	bl	80001d0 <strcmp>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	bf0c      	ite	eq
 8003ff2:	2301      	moveq	r3, #1
 8003ff4:	2300      	movne	r3, #0
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	723b      	strb	r3, [r7, #8]
		break;
 8004000:	bf00      	nop
	}
	bool setRes = params[paramTable[com]-1]->set((valueTypes)value);
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	4a0e      	ldr	r2, [pc, #56]	; (8004040 <UARTset+0x15c>)
 8004006:	5cd3      	ldrb	r3, [r2, r3]
 8004008:	3b01      	subs	r3, #1
 800400a:	4a0e      	ldr	r2, [pc, #56]	; (8004044 <UARTset+0x160>)
 800400c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	68b8      	ldr	r0, [r7, #8]
 8004014:	4798      	blx	r3
 8004016:	4603      	mov	r3, r0
 8004018:	73fb      	strb	r3, [r7, #15]
	sprintf((char*)TXbuffer, "$%u:%s",com, setRes ? "Y" : "N");
 800401a:	88fa      	ldrh	r2, [r7, #6]
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <UARTset+0x142>
 8004022:	4b12      	ldr	r3, [pc, #72]	; (800406c <UARTset+0x188>)
 8004024:	e000      	b.n	8004028 <UARTset+0x144>
 8004026:	4b12      	ldr	r3, [pc, #72]	; (8004070 <UARTset+0x18c>)
 8004028:	4912      	ldr	r1, [pc, #72]	; (8004074 <UARTset+0x190>)
 800402a:	4813      	ldr	r0, [pc, #76]	; (8004078 <UARTset+0x194>)
 800402c:	f008 f8c0 	bl	800c1b0 <siprintf>
	UARTtransmit((char*)TXbuffer);
 8004030:	4811      	ldr	r0, [pc, #68]	; (8004078 <UARTset+0x194>)
 8004032:	f7ff fe77 	bl	8003d24 <UARTtransmit>
	return setRes;
 8004036:	7bfb      	ldrb	r3, [r7, #15]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	20001794 	.word	0x20001794
 8004044:	20001604 	.word	0x20001604
 8004048:	080103cc 	.word	0x080103cc
 800404c:	080103e4 	.word	0x080103e4
 8004050:	080103f4 	.word	0x080103f4
 8004054:	080103f8 	.word	0x080103f8
 8004058:	080103fc 	.word	0x080103fc
 800405c:	08010400 	.word	0x08010400
 8004060:	08010404 	.word	0x08010404
 8004064:	08010408 	.word	0x08010408
 8004068:	0801039c 	.word	0x0801039c
 800406c:	0801040c 	.word	0x0801040c
 8004070:	08010410 	.word	0x08010410
 8004074:	080103ac 	.word	0x080103ac
 8004078:	20001bfc 	.word	0x20001bfc

0800407c <UARTtransmitNum>:

void UARTtransmitNum(int com, char* string) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
	sprintf((char*)TXbuffer, "%d:%s",com, string);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	4905      	ldr	r1, [pc, #20]	; (80040a0 <UARTtransmitNum+0x24>)
 800408c:	4805      	ldr	r0, [pc, #20]	; (80040a4 <UARTtransmitNum+0x28>)
 800408e:	f008 f88f 	bl	800c1b0 <siprintf>
	UARTtransmit((char*)TXbuffer);
 8004092:	4804      	ldr	r0, [pc, #16]	; (80040a4 <UARTtransmitNum+0x28>)
 8004094:	f7ff fe46 	bl	8003d24 <UARTtransmit>
}
 8004098:	bf00      	nop
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	08010414 	.word	0x08010414
 80040a4:	20001bfc 	.word	0x20001bfc

080040a8 <commandSearch>:

void commandSearch() {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0
	char** commands;
	commands = str_split((char*)RXbuffer, delim);
 80040ae:	4b51      	ldr	r3, [pc, #324]	; (80041f4 <commandSearch+0x14c>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	4619      	mov	r1, r3
 80040b4:	4850      	ldr	r0, [pc, #320]	; (80041f8 <commandSearch+0x150>)
 80040b6:	f7ff fdab 	bl	8003c10 <str_split>
 80040ba:	61b8      	str	r0, [r7, #24]
	if (commands)
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 8093 	beq.w	80041ea <commandSearch+0x142>
	{
		int i;
		for (i = 0; *(commands + i); i++)
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	e081      	b.n	80041ce <commandSearch+0x126>
		{
			char* command = *(commands + i);
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4413      	add	r3, r2
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	617b      	str	r3, [r7, #20]
			if(strlen(command) < 5) {
 80040d6:	6978      	ldr	r0, [r7, #20]
 80040d8:	f7fc f884 	bl	80001e4 <strlen>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d803      	bhi.n	80040ea <commandSearch+0x42>
				UARTtransmit("Error\%invalid command style");
 80040e2:	4846      	ldr	r0, [pc, #280]	; (80041fc <commandSearch+0x154>)
 80040e4:	f7ff fe1e 	bl	8003d24 <UARTtransmit>
 80040e8:	e066      	b.n	80041b8 <commandSearch+0x110>
			} else if(!strcmp(command, "*IDN?")) {
 80040ea:	4945      	ldr	r1, [pc, #276]	; (8004200 <commandSearch+0x158>)
 80040ec:	6978      	ldr	r0, [r7, #20]
 80040ee:	f7fc f86f 	bl	80001d0 <strcmp>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d103      	bne.n	8004100 <commandSearch+0x58>
				UARTtransmit(IDNstring);
 80040f8:	4842      	ldr	r0, [pc, #264]	; (8004204 <commandSearch+0x15c>)
 80040fa:	f7ff fe13 	bl	8003d24 <UARTtransmit>
 80040fe:	e05b      	b.n	80041b8 <commandSearch+0x110>
			} else if(command[0] == '$') {
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b24      	cmp	r3, #36	; 0x24
 8004106:	d154      	bne.n	80041b2 <commandSearch+0x10a>
				char attr[10];
				int com;
				sscanf(&command[1], "%d%s", &com, attr);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	1c58      	adds	r0, r3, #1
 800410c:	f107 0308 	add.w	r3, r7, #8
 8004110:	1d3a      	adds	r2, r7, #4
 8004112:	493d      	ldr	r1, [pc, #244]	; (8004208 <commandSearch+0x160>)
 8004114:	f008 f86c 	bl	800c1f0 <siscanf>
				if(com < 100 || com > PARAMS_RANGE - 1) {
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b63      	cmp	r3, #99	; 0x63
 800411c:	dd03      	ble.n	8004126 <commandSearch+0x7e>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004124:	db05      	blt.n	8004132 <commandSearch+0x8a>
					UARTtransmitNum(com,"Error\%invalid command");
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4938      	ldr	r1, [pc, #224]	; (800420c <commandSearch+0x164>)
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff ffa6 	bl	800407c <UARTtransmitNum>
 8004130:	e042      	b.n	80041b8 <commandSearch+0x110>
				}
				else if(!params[paramTable[com]-1])
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a36      	ldr	r2, [pc, #216]	; (8004210 <commandSearch+0x168>)
 8004136:	5cd3      	ldrb	r3, [r2, r3]
 8004138:	3b01      	subs	r3, #1
 800413a:	4a36      	ldr	r2, [pc, #216]	; (8004214 <commandSearch+0x16c>)
 800413c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <commandSearch+0xa8>
				{
					UARTtransmitNum(com,"Error\%invalid parameter");
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4934      	ldr	r1, [pc, #208]	; (8004218 <commandSearch+0x170>)
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff ff97 	bl	800407c <UARTtransmitNum>
 800414e:	e033      	b.n	80041b8 <commandSearch+0x110>
				}
				else if(attr[0] == '?') {
 8004150:	7a3b      	ldrb	r3, [r7, #8]
 8004152:	2b3f      	cmp	r3, #63	; 0x3f
 8004154:	d11a      	bne.n	800418c <commandSearch+0xe4>
					if(params[paramTable[com]-1]->isCommand) {
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2d      	ldr	r2, [pc, #180]	; (8004210 <commandSearch+0x168>)
 800415a:	5cd3      	ldrb	r3, [r2, r3]
 800415c:	3b01      	subs	r3, #1
 800415e:	4a2d      	ldr	r2, [pc, #180]	; (8004214 <commandSearch+0x16c>)
 8004160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004164:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <commandSearch+0xd8>
						params[paramTable[com]-1]->command();
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a28      	ldr	r2, [pc, #160]	; (8004210 <commandSearch+0x168>)
 8004170:	5cd3      	ldrb	r3, [r2, r3]
 8004172:	3b01      	subs	r3, #1
 8004174:	4a27      	ldr	r2, [pc, #156]	; (8004214 <commandSearch+0x16c>)
 8004176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	4798      	blx	r3
 800417e:	e01b      	b.n	80041b8 <commandSearch+0x110>
					}
					else  {
						UARTget(com);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	b29b      	uxth	r3, r3
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fdef 	bl	8003d68 <UARTget>
 800418a:	e015      	b.n	80041b8 <commandSearch+0x110>
					}
				}
				else if (attr[0] == ':') {
 800418c:	7a3b      	ldrb	r3, [r7, #8]
 800418e:	2b3a      	cmp	r3, #58	; 0x3a
 8004190:	d109      	bne.n	80041a6 <commandSearch+0xfe>
					UARTset(com, &attr[1]);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	b29a      	uxth	r2, r3
 8004196:	f107 0308 	add.w	r3, r7, #8
 800419a:	3301      	adds	r3, #1
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f7ff fea0 	bl	8003ee4 <UARTset>
 80041a4:	e008      	b.n	80041b8 <commandSearch+0x110>
				}
				else {
					UARTtransmitNum(com, "Error\%invalid command style");
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4914      	ldr	r1, [pc, #80]	; (80041fc <commandSearch+0x154>)
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff ff66 	bl	800407c <UARTtransmitNum>
 80041b0:	e002      	b.n	80041b8 <commandSearch+0x110>
				}
			} else {
				UARTtransmit("Error\%invalid command style");
 80041b2:	4812      	ldr	r0, [pc, #72]	; (80041fc <commandSearch+0x154>)
 80041b4:	f7ff fdb6 	bl	8003d24 <UARTtransmit>
			}

			free(*(commands + i));
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4413      	add	r3, r2
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f006 ff04 	bl	800afd0 <free>
		for (i = 0; *(commands + i); i++)
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	3301      	adds	r3, #1
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4413      	add	r3, r2
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f47f af76 	bne.w	80040ca <commandSearch+0x22>
		}
		printf("\n");
 80041de:	200a      	movs	r0, #10
 80041e0:	f007 ffba 	bl	800c158 <putchar>
		free(commands);
 80041e4:	69b8      	ldr	r0, [r7, #24]
 80041e6:	f006 fef3 	bl	800afd0 <free>
	}
}
 80041ea:	bf00      	nop
 80041ec:	3720      	adds	r7, #32
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	200012e8 	.word	0x200012e8
 80041f8:	20001b7c 	.word	0x20001b7c
 80041fc:	0801041c 	.word	0x0801041c
 8004200:	08010438 	.word	0x08010438
 8004204:	200012f0 	.word	0x200012f0
 8004208:	08010440 	.word	0x08010440
 800420c:	08010448 	.word	0x08010448
 8004210:	20001794 	.word	0x20001794
 8004214:	20001604 	.word	0x20001604
 8004218:	08010460 	.word	0x08010460

0800421c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
    if(RXbufferChar[0] != EOL) {
 8004224:	4b13      	ldr	r3, [pc, #76]	; (8004274 <HAL_UART_RxCpltCallback+0x58>)
 8004226:	781a      	ldrb	r2, [r3, #0]
 8004228:	4b13      	ldr	r3, [pc, #76]	; (8004278 <HAL_UART_RxCpltCallback+0x5c>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d00d      	beq.n	800424c <HAL_UART_RxCpltCallback+0x30>
    	RXbuffer[RXbufferElem] = RXbufferChar[0];
 8004230:	4b12      	ldr	r3, [pc, #72]	; (800427c <HAL_UART_RxCpltCallback+0x60>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <HAL_UART_RxCpltCallback+0x58>)
 8004238:	7819      	ldrb	r1, [r3, #0]
 800423a:	4b11      	ldr	r3, [pc, #68]	; (8004280 <HAL_UART_RxCpltCallback+0x64>)
 800423c:	5499      	strb	r1, [r3, r2]
    	RXbufferElem++;
 800423e:	4b0f      	ldr	r3, [pc, #60]	; (800427c <HAL_UART_RxCpltCallback+0x60>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	3301      	adds	r3, #1
 8004244:	b2da      	uxtb	r2, r3
 8004246:	4b0d      	ldr	r3, [pc, #52]	; (800427c <HAL_UART_RxCpltCallback+0x60>)
 8004248:	701a      	strb	r2, [r3, #0]
 800424a:	e00a      	b.n	8004262 <HAL_UART_RxCpltCallback+0x46>
    }
    else {
    	RXbuffer[RXbufferElem] = '\0';
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_UART_RxCpltCallback+0x60>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_UART_RxCpltCallback+0x64>)
 8004254:	2100      	movs	r1, #0
 8004256:	5499      	strb	r1, [r3, r2]
    	commandSearch();
 8004258:	f7ff ff26 	bl	80040a8 <commandSearch>
    	RXbufferElem = 0;
 800425c:	4b07      	ldr	r3, [pc, #28]	; (800427c <HAL_UART_RxCpltCallback+0x60>)
 800425e:	2200      	movs	r2, #0
 8004260:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, RXbufferChar, 1);
 8004262:	2201      	movs	r2, #1
 8004264:	4903      	ldr	r1, [pc, #12]	; (8004274 <HAL_UART_RxCpltCallback+0x58>)
 8004266:	4807      	ldr	r0, [pc, #28]	; (8004284 <HAL_UART_RxCpltCallback+0x68>)
 8004268:	f005 feb7 	bl	8009fda <HAL_UART_Receive_IT>
}
 800426c:	bf00      	nop
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20001c7c 	.word	0x20001c7c
 8004278:	200012e9 	.word	0x200012e9
 800427c:	20001c7d 	.word	0x20001c7d
 8004280:	20001b7c 	.word	0x20001b7c
 8004284:	2000209c 	.word	0x2000209c

08004288 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	; 0x28
 800428c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800428e:	2306      	movs	r3, #6
 8004290:	847b      	strh	r3, [r7, #34]	; 0x22
 8004292:	2306      	movs	r3, #6
 8004294:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8004296:	2300      	movs	r3, #0
 8004298:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800429a:	2300      	movs	r3, #0
 800429c:	83fb      	strh	r3, [r7, #30]
 800429e:	2300      	movs	r3, #0
 80042a0:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 80042a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042a6:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80042ac:	4ba1      	ldr	r3, [pc, #644]	; (8004534 <EE_Init+0x2ac>)
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80042b2:	4ba1      	ldr	r3, [pc, #644]	; (8004538 <EE_Init+0x2b0>)
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80042b8:	2300      	movs	r3, #0
 80042ba:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 80042bc:	2306      	movs	r3, #6
 80042be:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 80042c0:	2301      	movs	r3, #1
 80042c2:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80042c4:	2302      	movs	r3, #2
 80042c6:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 80042c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80042ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00b      	beq.n	80042ea <EE_Init+0x62>
 80042d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d6:	f280 8196 	bge.w	8004606 <EE_Init+0x37e>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80f8 	beq.w	80044d0 <EE_Init+0x248>
 80042e0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d050      	beq.n	800438a <EE_Init+0x102>
 80042e8:	e18d      	b.n	8004606 <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80042ea:	8c3b      	ldrh	r3, [r7, #32]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d116      	bne.n	800431e <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80042f0:	4890      	ldr	r0, [pc, #576]	; (8004534 <EE_Init+0x2ac>)
 80042f2:	f000 f9a9 	bl	8004648 <EE_VerifyPageFullyErased>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f040 818e 	bne.w	800461a <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80042fe:	f107 0214 	add.w	r2, r7, #20
 8004302:	463b      	mov	r3, r7
 8004304:	4611      	mov	r1, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f003 fcd0 	bl	8007cac <HAL_FLASHEx_Erase>
 800430c:	4603      	mov	r3, r0
 800430e:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8004310:	7efb      	ldrb	r3, [r7, #27]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 8181 	beq.w	800461a <EE_Init+0x392>
          {
            return FlashStatus;
 8004318:	7efb      	ldrb	r3, [r7, #27]
 800431a:	b29b      	uxth	r3, r3
 800431c:	e185      	b.n	800462a <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 800431e:	8c3b      	ldrh	r3, [r7, #32]
 8004320:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8004324:	4293      	cmp	r3, r2
 8004326:	d125      	bne.n	8004374 <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8004328:	4882      	ldr	r0, [pc, #520]	; (8004534 <EE_Init+0x2ac>)
 800432a:	f000 f98d 	bl	8004648 <EE_VerifyPageFullyErased>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10e      	bne.n	8004352 <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8004334:	f107 0214 	add.w	r2, r7, #20
 8004338:	463b      	mov	r3, r7
 800433a:	4611      	mov	r1, r2
 800433c:	4618      	mov	r0, r3
 800433e:	f003 fcb5 	bl	8007cac <HAL_FLASHEx_Erase>
 8004342:	4603      	mov	r3, r0
 8004344:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8004346:	7efb      	ldrb	r3, [r7, #27]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <EE_Init+0xca>
          {
            return FlashStatus;
 800434c:	7efb      	ldrb	r3, [r7, #27]
 800434e:	b29b      	uxth	r3, r3
 8004350:	e16b      	b.n	800462a <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	4977      	ldr	r1, [pc, #476]	; (8004538 <EE_Init+0x2b0>)
 800435c:	2001      	movs	r0, #1
 800435e:	f003 faff 	bl	8007960 <HAL_FLASH_Program>
 8004362:	4603      	mov	r3, r0
 8004364:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8004366:	7efb      	ldrb	r3, [r7, #27]
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8156 	beq.w	800461a <EE_Init+0x392>
        {
          return FlashStatus;
 800436e:	7efb      	ldrb	r3, [r7, #27]
 8004370:	b29b      	uxth	r3, r3
 8004372:	e15a      	b.n	800462a <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8004374:	f000 f9f8 	bl	8004768 <EE_Format>
 8004378:	4603      	mov	r3, r0
 800437a:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800437c:	7efb      	ldrb	r3, [r7, #27]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 814b 	beq.w	800461a <EE_Init+0x392>
        {
          return FlashStatus;
 8004384:	7efb      	ldrb	r3, [r7, #27]
 8004386:	b29b      	uxth	r3, r3
 8004388:	e14f      	b.n	800462a <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800438a:	8c3b      	ldrh	r3, [r7, #32]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d163      	bne.n	8004458 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8004390:	2300      	movs	r3, #0
 8004392:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004394:	e030      	b.n	80043f8 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8004396:	4b69      	ldr	r3, [pc, #420]	; (800453c <EE_Init+0x2b4>)
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b29a      	uxth	r2, r3
 800439c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800439e:	4968      	ldr	r1, [pc, #416]	; (8004540 <EE_Init+0x2b8>)
 80043a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d101      	bne.n	80043ac <EE_Init+0x124>
          {
            x = VarIdx;
 80043a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043aa:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80043ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80043ae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d01d      	beq.n	80043f2 <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80043b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043b8:	4a61      	ldr	r2, [pc, #388]	; (8004540 <EE_Init+0x2b8>)
 80043ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043be:	4961      	ldr	r1, [pc, #388]	; (8004544 <EE_Init+0x2bc>)
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 f967 	bl	8004694 <EE_ReadVariable>
 80043c6:	4603      	mov	r3, r0
 80043c8:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80043ca:	8bbb      	ldrh	r3, [r7, #28]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d010      	beq.n	80043f2 <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80043d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043d2:	4a5b      	ldr	r2, [pc, #364]	; (8004540 <EE_Init+0x2b8>)
 80043d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043d8:	4a5a      	ldr	r2, [pc, #360]	; (8004544 <EE_Init+0x2bc>)
 80043da:	8812      	ldrh	r2, [r2, #0]
 80043dc:	4611      	mov	r1, r2
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fa5a 	bl	8004898 <EE_VerifyPageFullWriteVariable>
 80043e4:	4603      	mov	r3, r0
 80043e6:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80043e8:	8bfb      	ldrh	r3, [r7, #30]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <EE_Init+0x16a>
              {
                return EepromStatus;
 80043ee:	8bfb      	ldrh	r3, [r7, #30]
 80043f0:	e11b      	b.n	800462a <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80043f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043f4:	3301      	adds	r3, #1
 80043f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80043f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043fa:	2b63      	cmp	r3, #99	; 0x63
 80043fc:	d9cb      	bls.n	8004396 <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	494b      	ldr	r1, [pc, #300]	; (8004534 <EE_Init+0x2ac>)
 8004408:	2001      	movs	r0, #1
 800440a:	f003 faa9 	bl	8007960 <HAL_FLASH_Program>
 800440e:	4603      	mov	r3, r0
 8004410:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8004412:	7efb      	ldrb	r3, [r7, #27]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <EE_Init+0x196>
        {
          return FlashStatus;
 8004418:	7efb      	ldrb	r3, [r7, #27]
 800441a:	b29b      	uxth	r3, r3
 800441c:	e105      	b.n	800462a <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 800441e:	2307      	movs	r3, #7
 8004420:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8004422:	2301      	movs	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8004426:	2302      	movs	r3, #2
 8004428:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800442a:	4843      	ldr	r0, [pc, #268]	; (8004538 <EE_Init+0x2b0>)
 800442c:	f000 f90c 	bl	8004648 <EE_VerifyPageFullyErased>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	f040 80f3 	bne.w	800461e <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8004438:	f107 0214 	add.w	r2, r7, #20
 800443c:	463b      	mov	r3, r7
 800443e:	4611      	mov	r1, r2
 8004440:	4618      	mov	r0, r3
 8004442:	f003 fc33 	bl	8007cac <HAL_FLASHEx_Erase>
 8004446:	4603      	mov	r3, r0
 8004448:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800444a:	7efb      	ldrb	r3, [r7, #27]
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 80e6 	beq.w	800461e <EE_Init+0x396>
          {
            return FlashStatus;
 8004452:	7efb      	ldrb	r3, [r7, #27]
 8004454:	b29b      	uxth	r3, r3
 8004456:	e0e8      	b.n	800462a <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8004458:	8c3b      	ldrh	r3, [r7, #32]
 800445a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800445e:	4293      	cmp	r3, r2
 8004460:	d12b      	bne.n	80044ba <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 8004462:	2307      	movs	r3, #7
 8004464:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8004466:	2301      	movs	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800446a:	2302      	movs	r3, #2
 800446c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800446e:	4832      	ldr	r0, [pc, #200]	; (8004538 <EE_Init+0x2b0>)
 8004470:	f000 f8ea 	bl	8004648 <EE_VerifyPageFullyErased>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10e      	bne.n	8004498 <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800447a:	f107 0214 	add.w	r2, r7, #20
 800447e:	463b      	mov	r3, r7
 8004480:	4611      	mov	r1, r2
 8004482:	4618      	mov	r0, r3
 8004484:	f003 fc12 	bl	8007cac <HAL_FLASHEx_Erase>
 8004488:	4603      	mov	r3, r0
 800448a:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800448c:	7efb      	ldrb	r3, [r7, #27]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <EE_Init+0x210>
          {
            return FlashStatus;
 8004492:	7efb      	ldrb	r3, [r7, #27]
 8004494:	b29b      	uxth	r3, r3
 8004496:	e0c8      	b.n	800462a <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	4924      	ldr	r1, [pc, #144]	; (8004534 <EE_Init+0x2ac>)
 80044a2:	2001      	movs	r0, #1
 80044a4:	f003 fa5c 	bl	8007960 <HAL_FLASH_Program>
 80044a8:	4603      	mov	r3, r0
 80044aa:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80044ac:	7efb      	ldrb	r3, [r7, #27]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80b5 	beq.w	800461e <EE_Init+0x396>
        {
          return FlashStatus;
 80044b4:	7efb      	ldrb	r3, [r7, #27]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	e0b7      	b.n	800462a <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80044ba:	f000 f955 	bl	8004768 <EE_Format>
 80044be:	4603      	mov	r3, r0
 80044c0:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80044c2:	7efb      	ldrb	r3, [r7, #27]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80aa 	beq.w	800461e <EE_Init+0x396>
        {
          return FlashStatus;
 80044ca:	7efb      	ldrb	r3, [r7, #27]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	e0ac      	b.n	800462a <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80044d0:	8c3b      	ldrh	r3, [r7, #32]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10a      	bne.n	80044ec <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80044d6:	f000 f947 	bl	8004768 <EE_Format>
 80044da:	4603      	mov	r3, r0
 80044dc:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80044de:	7efb      	ldrb	r3, [r7, #27]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 809e 	beq.w	8004622 <EE_Init+0x39a>
        {
          return FlashStatus;
 80044e6:	7efb      	ldrb	r3, [r7, #27]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	e09e      	b.n	800462a <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80044ec:	8c3b      	ldrh	r3, [r7, #32]
 80044ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d11b      	bne.n	800452e <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 80044f6:	2307      	movs	r3, #7
 80044f8:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80044fa:	2301      	movs	r3, #1
 80044fc:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80044fe:	2302      	movs	r3, #2
 8004500:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8004502:	480d      	ldr	r0, [pc, #52]	; (8004538 <EE_Init+0x2b0>)
 8004504:	f000 f8a0 	bl	8004648 <EE_VerifyPageFullyErased>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	f040 8089 	bne.w	8004622 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8004510:	f107 0214 	add.w	r2, r7, #20
 8004514:	463b      	mov	r3, r7
 8004516:	4611      	mov	r1, r2
 8004518:	4618      	mov	r0, r3
 800451a:	f003 fbc7 	bl	8007cac <HAL_FLASHEx_Erase>
 800451e:	4603      	mov	r3, r0
 8004520:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8004522:	7efb      	ldrb	r3, [r7, #27]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d07c      	beq.n	8004622 <EE_Init+0x39a>
          {
            return FlashStatus;
 8004528:	7efb      	ldrb	r3, [r7, #27]
 800452a:	b29b      	uxth	r3, r3
 800452c:	e07d      	b.n	800462a <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800452e:	2300      	movs	r3, #0
 8004530:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004532:	e03a      	b.n	80045aa <EE_Init+0x322>
 8004534:	08040000 	.word	0x08040000
 8004538:	08060000 	.word	0x08060000
 800453c:	08040006 	.word	0x08040006
 8004540:	20001c80 	.word	0x20001c80
 8004544:	20001c7e 	.word	0x20001c7e
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8004548:	4b3a      	ldr	r3, [pc, #232]	; (8004634 <EE_Init+0x3ac>)
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b29a      	uxth	r2, r3
 800454e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004550:	4939      	ldr	r1, [pc, #228]	; (8004638 <EE_Init+0x3b0>)
 8004552:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004556:	429a      	cmp	r2, r3
 8004558:	d101      	bne.n	800455e <EE_Init+0x2d6>
          {
            x = VarIdx;
 800455a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800455c:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 800455e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004560:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004564:	429a      	cmp	r2, r3
 8004566:	d01d      	beq.n	80045a4 <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8004568:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800456a:	4a33      	ldr	r2, [pc, #204]	; (8004638 <EE_Init+0x3b0>)
 800456c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004570:	4932      	ldr	r1, [pc, #200]	; (800463c <EE_Init+0x3b4>)
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f88e 	bl	8004694 <EE_ReadVariable>
 8004578:	4603      	mov	r3, r0
 800457a:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800457c:	8bbb      	ldrh	r3, [r7, #28]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d010      	beq.n	80045a4 <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8004582:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004584:	4a2c      	ldr	r2, [pc, #176]	; (8004638 <EE_Init+0x3b0>)
 8004586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800458a:	4a2c      	ldr	r2, [pc, #176]	; (800463c <EE_Init+0x3b4>)
 800458c:	8812      	ldrh	r2, [r2, #0]
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f000 f981 	bl	8004898 <EE_VerifyPageFullWriteVariable>
 8004596:	4603      	mov	r3, r0
 8004598:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800459a:	8bfb      	ldrh	r3, [r7, #30]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <EE_Init+0x31c>
              {
                return EepromStatus;
 80045a0:	8bfb      	ldrh	r3, [r7, #30]
 80045a2:	e042      	b.n	800462a <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80045a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045a6:	3301      	adds	r3, #1
 80045a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80045aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045ac:	2b63      	cmp	r3, #99	; 0x63
 80045ae:	d9cb      	bls.n	8004548 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	4921      	ldr	r1, [pc, #132]	; (8004640 <EE_Init+0x3b8>)
 80045ba:	2001      	movs	r0, #1
 80045bc:	f003 f9d0 	bl	8007960 <HAL_FLASH_Program>
 80045c0:	4603      	mov	r3, r0
 80045c2:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80045c4:	7efb      	ldrb	r3, [r7, #27]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <EE_Init+0x348>
        {
          return FlashStatus;
 80045ca:	7efb      	ldrb	r3, [r7, #27]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	e02c      	b.n	800462a <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 80045d0:	2306      	movs	r3, #6
 80045d2:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80045d4:	2301      	movs	r3, #1
 80045d6:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80045d8:	2302      	movs	r3, #2
 80045da:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80045dc:	4819      	ldr	r0, [pc, #100]	; (8004644 <EE_Init+0x3bc>)
 80045de:	f000 f833 	bl	8004648 <EE_VerifyPageFullyErased>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d11c      	bne.n	8004622 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80045e8:	f107 0214 	add.w	r2, r7, #20
 80045ec:	463b      	mov	r3, r7
 80045ee:	4611      	mov	r1, r2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f003 fb5b 	bl	8007cac <HAL_FLASHEx_Erase>
 80045f6:	4603      	mov	r3, r0
 80045f8:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80045fa:	7efb      	ldrb	r3, [r7, #27]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d010      	beq.n	8004622 <EE_Init+0x39a>
          {
            return FlashStatus;
 8004600:	7efb      	ldrb	r3, [r7, #27]
 8004602:	b29b      	uxth	r3, r3
 8004604:	e011      	b.n	800462a <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8004606:	f000 f8af 	bl	8004768 <EE_Format>
 800460a:	4603      	mov	r3, r0
 800460c:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800460e:	7efb      	ldrb	r3, [r7, #27]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <EE_Init+0x39e>
      {
        return FlashStatus;
 8004614:	7efb      	ldrb	r3, [r7, #27]
 8004616:	b29b      	uxth	r3, r3
 8004618:	e007      	b.n	800462a <EE_Init+0x3a2>
      break;
 800461a:	bf00      	nop
 800461c:	e004      	b.n	8004628 <EE_Init+0x3a0>
      break;
 800461e:	bf00      	nop
 8004620:	e002      	b.n	8004628 <EE_Init+0x3a0>
      break;
 8004622:	bf00      	nop
 8004624:	e000      	b.n	8004628 <EE_Init+0x3a0>
      }
      break;
 8004626:	bf00      	nop
  }

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3728      	adds	r7, #40	; 0x28
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	08060006 	.word	0x08060006
 8004638:	20001c80 	.word	0x20001c80
 800463c:	20001c7e 	.word	0x20001c7e
 8004640:	08060000 	.word	0x08060000
 8004644:	08040000 	.word	0x08040000

08004648 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8004650:	2301      	movs	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8004654:	f245 5355 	movw	r3, #21845	; 0x5555
 8004658:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 800465a:	e00d      	b.n	8004678 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8004662:	897b      	ldrh	r3, [r7, #10]
 8004664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004668:	4293      	cmp	r3, r2
 800466a:	d002      	beq.n	8004672 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]

      break;
 8004670:	e006      	b.n	8004680 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a05      	ldr	r2, [pc, #20]	; (8004690 <EE_VerifyPageFullyErased+0x48>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d9ed      	bls.n	800465c <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	b29b      	uxth	r3, r3
}
 8004684:	4618      	mov	r0, r3
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	0805ffff 	.word	0x0805ffff

08004694 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	6039      	str	r1, [r7, #0]
 800469e:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80046a4:	f245 5355 	movw	r3, #21845	; 0x5555
 80046a8:	81bb      	strh	r3, [r7, #12]
 80046aa:	2301      	movs	r3, #1
 80046ac:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 80046ae:	4b1b      	ldr	r3, [pc, #108]	; (800471c <EE_ReadVariable+0x88>)
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	4b1a      	ldr	r3, [pc, #104]	; (800471c <EE_ReadVariable+0x88>)
 80046b4:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80046b6:	2000      	movs	r0, #0
 80046b8:	f000 f8a8 	bl	800480c <EE_FindValidPage>
 80046bc:	4603      	mov	r3, r0
 80046be:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80046c0:	89fb      	ldrh	r3, [r7, #14]
 80046c2:	2bab      	cmp	r3, #171	; 0xab
 80046c4:	d101      	bne.n	80046ca <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80046c6:	23ab      	movs	r3, #171	; 0xab
 80046c8:	e024      	b.n	8004714 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80046ca:	89fb      	ldrh	r3, [r7, #14]
 80046cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80046d0:	045b      	lsls	r3, r3, #17
 80046d2:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80046d4:	89fb      	ldrh	r3, [r7, #14]
 80046d6:	3301      	adds	r3, #1
 80046d8:	045a      	lsls	r2, r3, #17
 80046da:	4b11      	ldr	r3, [pc, #68]	; (8004720 <EE_ReadVariable+0x8c>)
 80046dc:	4413      	add	r3, r2
 80046de:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 80046e0:	e012      	b.n	8004708 <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 80046e8:	89ba      	ldrh	r2, [r7, #12]
 80046ea:	88fb      	ldrh	r3, [r7, #6]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d108      	bne.n	8004702 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	3b02      	subs	r3, #2
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	82fb      	strh	r3, [r7, #22]

      break;
 8004700:	e007      	b.n	8004712 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	3b04      	subs	r3, #4
 8004706:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	3302      	adds	r3, #2
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	429a      	cmp	r2, r3
 8004710:	d8e7      	bhi.n	80046e2 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8004712:	8afb      	ldrh	r3, [r7, #22]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3718      	adds	r7, #24
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	08040000 	.word	0x08040000
 8004720:	0803fffe 	.word	0x0803fffe

08004724 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	460a      	mov	r2, r1
 800472e:	80fb      	strh	r3, [r7, #6]
 8004730:	4613      	mov	r3, r2
 8004732:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8004734:	2300      	movs	r3, #0
 8004736:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8004738:	88ba      	ldrh	r2, [r7, #4]
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	4611      	mov	r1, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f8aa 	bl	8004898 <EE_VerifyPageFullWriteVariable>
 8004744:	4603      	mov	r3, r0
 8004746:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8004748:	89fb      	ldrh	r3, [r7, #14]
 800474a:	2b80      	cmp	r3, #128	; 0x80
 800474c:	d107      	bne.n	800475e <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 800474e:	88ba      	ldrh	r2, [r7, #4]
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	4611      	mov	r1, r2
 8004754:	4618      	mov	r0, r3
 8004756:	f000 f901 	bl	800495c <EE_PageTransfer>
 800475a:	4603      	mov	r3, r0
 800475c:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 800475e:	89fb      	ldrh	r3, [r7, #14]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8004772:	2300      	movs	r3, #0
 8004774:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 8004776:	2300      	movs	r3, #0
 8004778:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 800477a:	2306      	movs	r3, #6
 800477c:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 800477e:	2301      	movs	r3, #1
 8004780:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8004782:	2302      	movs	r3, #2
 8004784:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8004786:	481f      	ldr	r0, [pc, #124]	; (8004804 <EE_Format+0x9c>)
 8004788:	f7ff ff5e 	bl	8004648 <EE_VerifyPageFullyErased>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10d      	bne.n	80047ae <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8004792:	f107 0218 	add.w	r2, r7, #24
 8004796:	1d3b      	adds	r3, r7, #4
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f003 fa86 	bl	8007cac <HAL_FLASHEx_Erase>
 80047a0:	4603      	mov	r3, r0
 80047a2:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80047a4:	7ffb      	ldrb	r3, [r7, #31]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <EE_Format+0x46>
    {
      return FlashStatus;
 80047aa:	7ffb      	ldrb	r3, [r7, #31]
 80047ac:	e025      	b.n	80047fa <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	4913      	ldr	r1, [pc, #76]	; (8004804 <EE_Format+0x9c>)
 80047b8:	2001      	movs	r0, #1
 80047ba:	f003 f8d1 	bl	8007960 <HAL_FLASH_Program>
 80047be:	4603      	mov	r3, r0
 80047c0:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80047c2:	7ffb      	ldrb	r3, [r7, #31]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <EE_Format+0x64>
  {
    return FlashStatus;
 80047c8:	7ffb      	ldrb	r3, [r7, #31]
 80047ca:	e016      	b.n	80047fa <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 80047cc:	2307      	movs	r3, #7
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80047d0:	480d      	ldr	r0, [pc, #52]	; (8004808 <EE_Format+0xa0>)
 80047d2:	f7ff ff39 	bl	8004648 <EE_VerifyPageFullyErased>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10d      	bne.n	80047f8 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 80047dc:	f107 0218 	add.w	r2, r7, #24
 80047e0:	1d3b      	adds	r3, r7, #4
 80047e2:	4611      	mov	r1, r2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f003 fa61 	bl	8007cac <HAL_FLASHEx_Erase>
 80047ea:	4603      	mov	r3, r0
 80047ec:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80047ee:	7ffb      	ldrb	r3, [r7, #31]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <EE_Format+0x90>
    {
      return FlashStatus;
 80047f4:	7ffb      	ldrb	r3, [r7, #31]
 80047f6:	e000      	b.n	80047fa <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3720      	adds	r7, #32
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	08040000 	.word	0x08040000
 8004808:	08060000 	.word	0x08060000

0800480c <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8004816:	2306      	movs	r3, #6
 8004818:	81fb      	strh	r3, [r7, #14]
 800481a:	2306      	movs	r3, #6
 800481c:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800481e:	4b1c      	ldr	r3, [pc, #112]	; (8004890 <EE_FindValidPage+0x84>)
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8004824:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <EE_FindValidPage+0x88>)
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01b      	beq.n	8004868 <EE_FindValidPage+0x5c>
 8004830:	2b01      	cmp	r3, #1
 8004832:	d125      	bne.n	8004880 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8004834:	89bb      	ldrh	r3, [r7, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d108      	bne.n	800484c <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 800483a:	89fb      	ldrh	r3, [r7, #14]
 800483c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8004840:	4293      	cmp	r3, r2
 8004842:	d101      	bne.n	8004848 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8004844:	2300      	movs	r3, #0
 8004846:	e01c      	b.n	8004882 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8004848:	2301      	movs	r3, #1
 800484a:	e01a      	b.n	8004882 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 800484c:	89fb      	ldrh	r3, [r7, #14]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d108      	bne.n	8004864 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8004852:	89bb      	ldrh	r3, [r7, #12]
 8004854:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8004858:	4293      	cmp	r3, r2
 800485a:	d101      	bne.n	8004860 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 800485c:	2301      	movs	r3, #1
 800485e:	e010      	b.n	8004882 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8004860:	2300      	movs	r3, #0
 8004862:	e00e      	b.n	8004882 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8004864:	23ab      	movs	r3, #171	; 0xab
 8004866:	e00c      	b.n	8004882 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8004868:	89fb      	ldrh	r3, [r7, #14]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800486e:	2300      	movs	r3, #0
 8004870:	e007      	b.n	8004882 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8004872:	89bb      	ldrh	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8004878:	2301      	movs	r3, #1
 800487a:	e002      	b.n	8004882 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 800487c:	23ab      	movs	r3, #171	; 0xab
 800487e:	e000      	b.n	8004882 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8004880:	2300      	movs	r3, #0
  }
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	08040000 	.word	0x08040000
 8004894:	08060000 	.word	0x08060000

08004898 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8004898:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800489c:	b086      	sub	sp, #24
 800489e:	af00      	add	r7, sp, #0
 80048a0:	4603      	mov	r3, r0
 80048a2:	460a      	mov	r2, r1
 80048a4:	80fb      	strh	r3, [r7, #6]
 80048a6:	4613      	mov	r3, r2
 80048a8:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 80048b2:	4b27      	ldr	r3, [pc, #156]	; (8004950 <EE_VerifyPageFullWriteVariable+0xb8>)
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	4b27      	ldr	r3, [pc, #156]	; (8004954 <EE_VerifyPageFullWriteVariable+0xbc>)
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80048ba:	2001      	movs	r0, #1
 80048bc:	f7ff ffa6 	bl	800480c <EE_FindValidPage>
 80048c0:	4603      	mov	r3, r0
 80048c2:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80048c4:	8a3b      	ldrh	r3, [r7, #16]
 80048c6:	2bab      	cmp	r3, #171	; 0xab
 80048c8:	d101      	bne.n	80048ce <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80048ca:	23ab      	movs	r3, #171	; 0xab
 80048cc:	e03a      	b.n	8004944 <EE_VerifyPageFullWriteVariable+0xac>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80048ce:	8a3b      	ldrh	r3, [r7, #16]
 80048d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048d4:	045b      	lsls	r3, r3, #17
 80048d6:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 80048d8:	8a3b      	ldrh	r3, [r7, #16]
 80048da:	3301      	adds	r3, #1
 80048dc:	045a      	lsls	r2, r3, #17
 80048de:	4b1e      	ldr	r3, [pc, #120]	; (8004958 <EE_VerifyPageFullWriteVariable+0xc0>)
 80048e0:	4413      	add	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 80048e4:	e029      	b.n	800493a <EE_VerifyPageFullWriteVariable+0xa2>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ee:	d121      	bne.n	8004934 <EE_VerifyPageFullWriteVariable+0x9c>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 80048f0:	88bb      	ldrh	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	461c      	mov	r4, r3
 80048f6:	4615      	mov	r5, r2
 80048f8:	4622      	mov	r2, r4
 80048fa:	462b      	mov	r3, r5
 80048fc:	6979      	ldr	r1, [r7, #20]
 80048fe:	2001      	movs	r0, #1
 8004900:	f003 f82e 	bl	8007960 <HAL_FLASH_Program>
 8004904:	4603      	mov	r3, r0
 8004906:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <EE_VerifyPageFullWriteVariable+0x7c>
      {
        return FlashStatus;
 800490e:	7cfb      	ldrb	r3, [r7, #19]
 8004910:	b29b      	uxth	r3, r3
 8004912:	e017      	b.n	8004944 <EE_VerifyPageFullWriteVariable+0xac>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	1c99      	adds	r1, r3, #2
 8004918:	88fb      	ldrh	r3, [r7, #6]
 800491a:	2200      	movs	r2, #0
 800491c:	4698      	mov	r8, r3
 800491e:	4691      	mov	r9, r2
 8004920:	4642      	mov	r2, r8
 8004922:	464b      	mov	r3, r9
 8004924:	2001      	movs	r0, #1
 8004926:	f003 f81b 	bl	8007960 <HAL_FLASH_Program>
 800492a:	4603      	mov	r3, r0
 800492c:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 800492e:	7cfb      	ldrb	r3, [r7, #19]
 8004930:	b29b      	uxth	r3, r3
 8004932:	e007      	b.n	8004944 <EE_VerifyPageFullWriteVariable+0xac>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	3304      	adds	r3, #4
 8004938:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	429a      	cmp	r2, r3
 8004940:	d3d1      	bcc.n	80048e6 <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8004942:	2380      	movs	r3, #128	; 0x80
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800494e:	bf00      	nop
 8004950:	08040000 	.word	0x08040000
 8004954:	08060000 	.word	0x08060000
 8004958:	0803ffff 	.word	0x0803ffff

0800495c <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08c      	sub	sp, #48	; 0x30
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	460a      	mov	r2, r1
 8004966:	80fb      	strh	r3, [r7, #6]
 8004968:	4613      	mov	r3, r2
 800496a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8004972:	4b54      	ldr	r3, [pc, #336]	; (8004ac4 <EE_PageTransfer+0x168>)
 8004974:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 8004976:	2300      	movs	r3, #0
 8004978:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800497e:	2300      	movs	r3, #0
 8004980:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8004982:	2300      	movs	r3, #0
 8004984:	847b      	strh	r3, [r7, #34]	; 0x22
 8004986:	2300      	movs	r3, #0
 8004988:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800498e:	2000      	movs	r0, #0
 8004990:	f7ff ff3c 	bl	800480c <EE_FindValidPage>
 8004994:	4603      	mov	r3, r0
 8004996:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8004998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800499a:	2b01      	cmp	r3, #1
 800499c:	d104      	bne.n	80049a8 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 800499e:	4b49      	ldr	r3, [pc, #292]	; (8004ac4 <EE_PageTransfer+0x168>)
 80049a0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 80049a2:	2307      	movs	r3, #7
 80049a4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80049a6:	e009      	b.n	80049bc <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 80049a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d104      	bne.n	80049b8 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 80049ae:	4b46      	ldr	r3, [pc, #280]	; (8004ac8 <EE_PageTransfer+0x16c>)
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 80049b2:	2306      	movs	r3, #6
 80049b4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80049b6:	e001      	b.n	80049bc <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80049b8:	23ab      	movs	r3, #171	; 0xab
 80049ba:	e07e      	b.n	8004aba <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 80049bc:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049c6:	2001      	movs	r0, #1
 80049c8:	f002 ffca 	bl	8007960 <HAL_FLASH_Program>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80049d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 80049da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049de:	b29b      	uxth	r3, r3
 80049e0:	e06b      	b.n	8004aba <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80049e2:	88ba      	ldrh	r2, [r7, #4]
 80049e4:	88fb      	ldrh	r3, [r7, #6]
 80049e6:	4611      	mov	r1, r2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff ff55 	bl	8004898 <EE_VerifyPageFullWriteVariable>
 80049ee:	4603      	mov	r3, r0
 80049f0:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 80049f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 80049f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049fa:	e05e      	b.n	8004aba <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80049fc:	2300      	movs	r3, #0
 80049fe:	853b      	strh	r3, [r7, #40]	; 0x28
 8004a00:	e027      	b.n	8004a52 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8004a02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a04:	4a31      	ldr	r2, [pc, #196]	; (8004acc <EE_PageTransfer+0x170>)
 8004a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a0a:	88fa      	ldrh	r2, [r7, #6]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d01d      	beq.n	8004a4c <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8004a10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a12:	4a2e      	ldr	r2, [pc, #184]	; (8004acc <EE_PageTransfer+0x170>)
 8004a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a18:	492d      	ldr	r1, [pc, #180]	; (8004ad0 <EE_PageTransfer+0x174>)
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff fe3a 	bl	8004694 <EE_ReadVariable>
 8004a20:	4603      	mov	r3, r0
 8004a22:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8004a24:	8c3b      	ldrh	r3, [r7, #32]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d010      	beq.n	8004a4c <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8004a2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a2c:	4a27      	ldr	r2, [pc, #156]	; (8004acc <EE_PageTransfer+0x170>)
 8004a2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a32:	4a27      	ldr	r2, [pc, #156]	; (8004ad0 <EE_PageTransfer+0x174>)
 8004a34:	8812      	ldrh	r2, [r2, #0]
 8004a36:	4611      	mov	r1, r2
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff ff2d 	bl	8004898 <EE_VerifyPageFullWriteVariable>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8004a42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8004a48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a4a:	e036      	b.n	8004aba <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8004a4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a4e:	3301      	adds	r3, #1
 8004a50:	853b      	strh	r3, [r7, #40]	; 0x28
 8004a52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a54:	2b63      	cmp	r3, #99	; 0x63
 8004a56:	d9d4      	bls.n	8004a02 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8004a5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a5e:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8004a60:	2301      	movs	r3, #1
 8004a62:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8004a64:	2302      	movs	r3, #2
 8004a66:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8004a68:	f107 021c 	add.w	r2, r7, #28
 8004a6c:	f107 0308 	add.w	r3, r7, #8
 8004a70:	4611      	mov	r1, r2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f003 f91a 	bl	8007cac <HAL_FLASHEx_Erase>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8004a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8004a86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	e015      	b.n	8004aba <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a98:	2001      	movs	r0, #1
 8004a9a:	f002 ff61 	bl	8007960 <HAL_FLASH_Program>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8004aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8004aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	e002      	b.n	8004aba <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8004ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ab8:	b29b      	uxth	r3, r3
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3730      	adds	r7, #48	; 0x30
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	08040000 	.word	0x08040000
 8004ac8:	08060000 	.word	0x08060000
 8004acc:	20001c80 	.word	0x20001c80
 8004ad0:	20001c7e 	.word	0x20001c7e

08004ad4 <InitVirtAddTab>:
#include "Parameters.h"

//EEPROM Emulation
uint16_t VirtAddVarTab[NB_OF_VAR];

void InitVirtAddTab() {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8004ada:	f002 ff95 	bl	8007a08 <HAL_FLASH_Unlock>
	EE_Init();
 8004ade:	f7ff fbd3 	bl	8004288 <EE_Init>
	uint8_t counter = 0;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	71bb      	strb	r3, [r7, #6]
 8004aea:	e01e      	b.n	8004b2a <InitVirtAddTab+0x56>
		if(params[i]->isFlash == true) {
 8004aec:	79bb      	ldrb	r3, [r7, #6]
 8004aee:	4a13      	ldr	r2, [pc, #76]	; (8004b3c <InitVirtAddTab+0x68>)
 8004af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d013      	beq.n	8004b24 <InitVirtAddTab+0x50>
			VirtAddVarTab[counter] = counter+1;
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	3201      	adds	r2, #1
 8004b04:	b291      	uxth	r1, r2
 8004b06:	4a0e      	ldr	r2, [pc, #56]	; (8004b40 <InitVirtAddTab+0x6c>)
 8004b08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			VirtAddVarTab[counter+1] = counter+2;
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	3301      	adds	r3, #1
 8004b14:	3202      	adds	r2, #2
 8004b16:	b291      	uxth	r1, r2
 8004b18:	4a09      	ldr	r2, [pc, #36]	; (8004b40 <InitVirtAddTab+0x6c>)
 8004b1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			counter +=2;
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	3302      	adds	r3, #2
 8004b22:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 8004b24:	79bb      	ldrb	r3, [r7, #6]
 8004b26:	3301      	adds	r3, #1
 8004b28:	71bb      	strb	r3, [r7, #6]
 8004b2a:	79bb      	ldrb	r3, [r7, #6]
 8004b2c:	2b63      	cmp	r3, #99	; 0x63
 8004b2e:	d9dd      	bls.n	8004aec <InitVirtAddTab+0x18>
		}
	}
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20001604 	.word	0x20001604
 8004b40:	20001c80 	.word	0x20001c80

08004b44 <ReadFlash>:

void ReadFlash() {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
	uint8_t counter = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 8004b4e:	2300      	movs	r3, #0
 8004b50:	71bb      	strb	r3, [r7, #6]
 8004b52:	e041      	b.n	8004bd8 <ReadFlash+0x94>
		if(params[i]->isFlash == true) {
 8004b54:	79bb      	ldrb	r3, [r7, #6]
 8004b56:	4a23      	ldr	r2, [pc, #140]	; (8004be4 <ReadFlash+0xa0>)
 8004b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b5c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d036      	beq.n	8004bd2 <ReadFlash+0x8e>
			uint16_t var[2];
			uint16_t flag = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	80bb      	strh	r3, [r7, #4]
			flag += EE_ReadVariable(VirtAddVarTab[counter++], &var[0]);
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	71fa      	strb	r2, [r7, #7]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <ReadFlash+0xa4>)
 8004b72:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004b76:	463a      	mov	r2, r7
 8004b78:	4611      	mov	r1, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fd8a 	bl	8004694 <EE_ReadVariable>
 8004b80:	4603      	mov	r3, r0
 8004b82:	461a      	mov	r2, r3
 8004b84:	88bb      	ldrh	r3, [r7, #4]
 8004b86:	4413      	add	r3, r2
 8004b88:	80bb      	strh	r3, [r7, #4]
			flag += EE_ReadVariable(VirtAddVarTab[counter++], &var[1]);
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	71fa      	strb	r2, [r7, #7]
 8004b90:	461a      	mov	r2, r3
 8004b92:	4b15      	ldr	r3, [pc, #84]	; (8004be8 <ReadFlash+0xa4>)
 8004b94:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004b98:	463b      	mov	r3, r7
 8004b9a:	3302      	adds	r3, #2
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	f7ff fd78 	bl	8004694 <EE_ReadVariable>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	88bb      	ldrh	r3, [r7, #4]
 8004baa:	4413      	add	r3, r2
 8004bac:	80bb      	strh	r3, [r7, #4]
			if(flag != 0) { //First start up of new firmware (no flash data)
 8004bae:	88bb      	ldrh	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <ReadFlash+0x76>
				SaveToFlash();
 8004bb4:	f000 f81a 	bl	8004bec <SaveToFlash>
 8004bb8:	e011      	b.n	8004bde <ReadFlash+0x9a>
				return;
			}
			else {
				params[i]->value.flashType[0] = var[0];
 8004bba:	79bb      	ldrb	r3, [r7, #6]
 8004bbc:	4a09      	ldr	r2, [pc, #36]	; (8004be4 <ReadFlash+0xa0>)
 8004bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc2:	883a      	ldrh	r2, [r7, #0]
 8004bc4:	861a      	strh	r2, [r3, #48]	; 0x30
				params[i]->value.flashType[1] = var[1];
 8004bc6:	79bb      	ldrb	r3, [r7, #6]
 8004bc8:	4a06      	ldr	r2, [pc, #24]	; (8004be4 <ReadFlash+0xa0>)
 8004bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bce:	887a      	ldrh	r2, [r7, #2]
 8004bd0:	865a      	strh	r2, [r3, #50]	; 0x32
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 8004bd2:	79bb      	ldrb	r3, [r7, #6]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	71bb      	strb	r3, [r7, #6]
 8004bd8:	79bb      	ldrb	r3, [r7, #6]
 8004bda:	2b63      	cmp	r3, #99	; 0x63
 8004bdc:	d9ba      	bls.n	8004b54 <ReadFlash+0x10>
			}
		}
	}
}
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	20001604 	.word	0x20001604
 8004be8:	20001c80 	.word	0x20001c80

08004bec <SaveToFlash>:


void SaveToFlash() {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
	uint8_t counter = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	71bb      	strb	r3, [r7, #6]
 8004bfa:	e02e      	b.n	8004c5a <SaveToFlash+0x6e>
		if(params[i]->isFlash == true) {
 8004bfc:	79bb      	ldrb	r3, [r7, #6]
 8004bfe:	4a1b      	ldr	r2, [pc, #108]	; (8004c6c <SaveToFlash+0x80>)
 8004c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c04:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d023      	beq.n	8004c54 <SaveToFlash+0x68>
			uint16_t var[2];
			var[0] = params[i]->value.flashType[0];
 8004c0c:	79bb      	ldrb	r3, [r7, #6]
 8004c0e:	4a17      	ldr	r2, [pc, #92]	; (8004c6c <SaveToFlash+0x80>)
 8004c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c14:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004c16:	803b      	strh	r3, [r7, #0]
			var[1] = params[i]->value.flashType[1];
 8004c18:	79bb      	ldrb	r3, [r7, #6]
 8004c1a:	4a14      	ldr	r2, [pc, #80]	; (8004c6c <SaveToFlash+0x80>)
 8004c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c22:	807b      	strh	r3, [r7, #2]
			EE_WriteVariable(VirtAddVarTab[counter++], var[0]);
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	71fa      	strb	r2, [r7, #7]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <SaveToFlash+0x84>)
 8004c2e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004c32:	883a      	ldrh	r2, [r7, #0]
 8004c34:	4611      	mov	r1, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff fd74 	bl	8004724 <EE_WriteVariable>
			EE_WriteVariable(VirtAddVarTab[counter++], var[1]);
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	71fa      	strb	r2, [r7, #7]
 8004c42:	461a      	mov	r2, r3
 8004c44:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <SaveToFlash+0x84>)
 8004c46:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004c4a:	887a      	ldrh	r2, [r7, #2]
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fd68 	bl	8004724 <EE_WriteVariable>
	for(uint8_t i = 0; i < PARAMS_COUNT; i++) {
 8004c54:	79bb      	ldrb	r3, [r7, #6]
 8004c56:	3301      	adds	r3, #1
 8004c58:	71bb      	strb	r3, [r7, #6]
 8004c5a:	79bb      	ldrb	r3, [r7, #6]
 8004c5c:	2b63      	cmp	r3, #99	; 0x63
 8004c5e:	d9cd      	bls.n	8004bfc <SaveToFlash+0x10>
		}
	}
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20001604 	.word	0x20001604
 8004c70:	20001c80 	.word	0x20001c80

08004c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	InitParams();
 8004c78:	f7fc ff08 	bl	8001a8c <InitParams>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004c7c:	f001 fcd8 	bl	8006630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004c80:	f000 f8b4 	bl	8004dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004c84:	f000 fdc0 	bl	8005808 <MX_GPIO_Init>
  MX_DMA_Init();
 8004c88:	f000 fd96 	bl	80057b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8004c8c:	f000 f91a 	bl	8004ec4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004c90:	f000 f9b0 	bl	8004ff4 <MX_ADC2_Init>
  MX_TIM1_Init();
 8004c94:	f000 fa44 	bl	8005120 <MX_TIM1_Init>
  MX_TIM2_Init();
 8004c98:	f000 faea 	bl	8005270 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004c9c:	f000 fb34 	bl	8005308 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004ca0:	f000 fbb6 	bl	8005410 <MX_TIM4_Init>
  MX_TIM8_Init();
 8004ca4:	f000 fcbc 	bl	8005620 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8004ca8:	f000 fd5c 	bl	8005764 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8004cac:	f000 fc34 	bl	8005518 <MX_TIM5_Init>
  MX_TIM6_Init();
 8004cb0:	f000 fc80 	bl	80055b4 <MX_TIM6_Init>
  MX_IWDG_Init();
 8004cb4:	f000 fa1a 	bl	80050ec <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  //Init flash reading
  InitVirtAddTab();
 8004cb8:	f7ff ff0c 	bl	8004ad4 <InitVirtAddTab>
  ReadFlash(); //time consuming
 8004cbc:	f7ff ff42 	bl	8004b44 <ReadFlash>

  //Global 100us clock start (RTC - 120 hours limit)
  HAL_TIM_Base_Start(&htim5);
 8004cc0:	4838      	ldr	r0, [pc, #224]	; (8004da4 <main+0x130>)
 8004cc2:	f004 f805 	bl	8008cd0 <HAL_TIM_Base_Start>

  //Gate PWMs init
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	4837      	ldr	r0, [pc, #220]	; (8004da8 <main+0x134>)
 8004cca:	f004 f933 	bl	8008f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004cce:	2104      	movs	r1, #4
 8004cd0:	4835      	ldr	r0, [pc, #212]	; (8004da8 <main+0x134>)
 8004cd2:	f004 f92f 	bl	8008f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	4834      	ldr	r0, [pc, #208]	; (8004dac <main+0x138>)
 8004cda:	f004 f92b 	bl	8008f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004cde:	2104      	movs	r1, #4
 8004ce0:	4832      	ldr	r0, [pc, #200]	; (8004dac <main+0x138>)
 8004ce2:	f004 f927 	bl	8008f34 <HAL_TIM_PWM_Start>
  //Set_U_Heater PWM (10 kHz, 16800)
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8004ce6:	2108      	movs	r1, #8
 8004ce8:	4831      	ldr	r0, [pc, #196]	; (8004db0 <main+0x13c>)
 8004cea:	f004 f923 	bl	8008f34 <HAL_TIM_PWM_Start>
  //Timer @84MHz for clock reference
  HAL_TIM_Base_Start(&htim2);
 8004cee:	4831      	ldr	r0, [pc, #196]	; (8004db4 <main+0x140>)
 8004cf0:	f003 ffee 	bl	8008cd0 <HAL_TIM_Base_Start>
  //External clock source for counter
  counterPeriod = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8004cf4:	4b30      	ldr	r3, [pc, #192]	; (8004db8 <main+0x144>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	4b2f      	ldr	r3, [pc, #188]	; (8004dbc <main+0x148>)
 8004cfe:	801a      	strh	r2, [r3, #0]
  __HAL_TIM_CLEAR_IT(&htim1,TIM_IT_UPDATE);
 8004d00:	4b2d      	ldr	r3, [pc, #180]	; (8004db8 <main+0x144>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0201 	mvn.w	r2, #1
 8004d08:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim1);
 8004d0a:	482b      	ldr	r0, [pc, #172]	; (8004db8 <main+0x144>)
 8004d0c:	f004 f848 	bl	8008da0 <HAL_TIM_Base_Start_IT>

  //ADC DMA start (10 channels)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)dmaADC1buffer, 6);
 8004d10:	2206      	movs	r2, #6
 8004d12:	492b      	ldr	r1, [pc, #172]	; (8004dc0 <main+0x14c>)
 8004d14:	482b      	ldr	r0, [pc, #172]	; (8004dc4 <main+0x150>)
 8004d16:	f001 fd41 	bl	800679c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)dmaADC2buffer, 4);
 8004d1a:	2204      	movs	r2, #4
 8004d1c:	492a      	ldr	r1, [pc, #168]	; (8004dc8 <main+0x154>)
 8004d1e:	482b      	ldr	r0, [pc, #172]	; (8004dcc <main+0x158>)
 8004d20:	f001 fd3c 	bl	800679c <HAL_ADC_Start_DMA>

  //100ms interrupt for ADC and other staff
  __HAL_TIM_CLEAR_IT(&htim6,TIM_IT_UPDATE);
 8004d24:	4b2a      	ldr	r3, [pc, #168]	; (8004dd0 <main+0x15c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0201 	mvn.w	r2, #1
 8004d2c:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim6);
 8004d2e:	4828      	ldr	r0, [pc, #160]	; (8004dd0 <main+0x15c>)
 8004d30:	f004 f836 	bl	8008da0 <HAL_TIM_Base_Start_IT>

  //UART interrupt enabling
  HAL_UART_Receive_IT(&huart1, RXbufferChar, 1);
 8004d34:	2201      	movs	r2, #1
 8004d36:	4927      	ldr	r1, [pc, #156]	; (8004dd4 <main+0x160>)
 8004d38:	4827      	ldr	r0, [pc, #156]	; (8004dd8 <main+0x164>)
 8004d3a:	f005 f94e 	bl	8009fda <HAL_UART_Receive_IT>

  //Heater PWM init
  __HAL_TIM_SET_PRESCALER(&htim3, 0);
 8004d3e:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <main+0x138>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2200      	movs	r2, #0
 8004d44:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_TIM_SET_AUTORELOAD(&htim3, freq_PWM_MO/freq_PWM_CH1 - 1);
 8004d46:	4b25      	ldr	r3, [pc, #148]	; (8004ddc <main+0x168>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4b25      	ldr	r3, [pc, #148]	; (8004de0 <main+0x16c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d52:	4b16      	ldr	r3, [pc, #88]	; (8004dac <main+0x138>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3a01      	subs	r2, #1
 8004d58:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d5a:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <main+0x168>)
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	4b20      	ldr	r3, [pc, #128]	; (8004de0 <main+0x16c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	4a10      	ldr	r2, [pc, #64]	; (8004dac <main+0x138>)
 8004d6a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SET_PRESCALER(&htim4, 0);
 8004d6c:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <main+0x134>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2200      	movs	r2, #0
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_TIM_SET_AUTORELOAD(&htim4, freq_PWM_MO/freq_PWM_CH2 - 1);
 8004d74:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <main+0x168>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <main+0x170>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d80:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <main+0x134>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3a01      	subs	r2, #1
 8004d86:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d88:	4b14      	ldr	r3, [pc, #80]	; (8004ddc <main+0x168>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	4b15      	ldr	r3, [pc, #84]	; (8004de4 <main+0x170>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	4a04      	ldr	r2, [pc, #16]	; (8004da8 <main+0x134>)
 8004d98:	60d3      	str	r3, [r2, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
{
	//Watch dog reset
	HAL_IWDG_Refresh(&hiwdg);
 8004d9a:	4813      	ldr	r0, [pc, #76]	; (8004de8 <main+0x174>)
 8004d9c:	f003 fa9f 	bl	80082de <HAL_IWDG_Refresh>
 8004da0:	e7fb      	b.n	8004d9a <main+0x126>
 8004da2:	bf00      	nop
 8004da4:	20001fc4 	.word	0x20001fc4
 8004da8:	20001f7c 	.word	0x20001f7c
 8004dac:	20001f34 	.word	0x20001f34
 8004db0:	20002054 	.word	0x20002054
 8004db4:	20001eec 	.word	0x20001eec
 8004db8:	20001ea4 	.word	0x20001ea4
 8004dbc:	200020e0 	.word	0x200020e0
 8004dc0:	200020e8 	.word	0x200020e8
 8004dc4:	20001d48 	.word	0x20001d48
 8004dc8:	200020f4 	.word	0x200020f4
 8004dcc:	20001d90 	.word	0x20001d90
 8004dd0:	2000200c 	.word	0x2000200c
 8004dd4:	20001c7c 	.word	0x20001c7c
 8004dd8:	2000209c 	.word	0x2000209c
 8004ddc:	20001318 	.word	0x20001318
 8004de0:	2000131c 	.word	0x2000131c
 8004de4:	20001320 	.word	0x20001320
 8004de8:	20001e98 	.word	0x20001e98

08004dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b094      	sub	sp, #80	; 0x50
 8004df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004df2:	f107 0320 	add.w	r3, r7, #32
 8004df6:	2230      	movs	r2, #48	; 0x30
 8004df8:	2100      	movs	r1, #0
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f006 f8f0 	bl	800afe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e00:	f107 030c 	add.w	r3, r7, #12
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	605a      	str	r2, [r3, #4]
 8004e0a:	609a      	str	r2, [r3, #8]
 8004e0c:	60da      	str	r2, [r3, #12]
 8004e0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e10:	2300      	movs	r3, #0
 8004e12:	60bb      	str	r3, [r7, #8]
 8004e14:	4b29      	ldr	r3, [pc, #164]	; (8004ebc <SystemClock_Config+0xd0>)
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	4a28      	ldr	r2, [pc, #160]	; (8004ebc <SystemClock_Config+0xd0>)
 8004e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8004e20:	4b26      	ldr	r3, [pc, #152]	; (8004ebc <SystemClock_Config+0xd0>)
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	607b      	str	r3, [r7, #4]
 8004e30:	4b23      	ldr	r3, [pc, #140]	; (8004ec0 <SystemClock_Config+0xd4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a22      	ldr	r2, [pc, #136]	; (8004ec0 <SystemClock_Config+0xd4>)
 8004e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	4b20      	ldr	r3, [pc, #128]	; (8004ec0 <SystemClock_Config+0xd4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e44:	607b      	str	r3, [r7, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004e48:	2309      	movs	r3, #9
 8004e4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004e52:	2301      	movs	r3, #1
 8004e54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e56:	2302      	movs	r3, #2
 8004e58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004e5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004e60:	2304      	movs	r3, #4
 8004e62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004e64:	23a8      	movs	r3, #168	; 0xa8
 8004e66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e68:	2302      	movs	r3, #2
 8004e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004e6c:	2304      	movs	r3, #4
 8004e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e70:	f107 0320 	add.w	r3, r7, #32
 8004e74:	4618      	mov	r0, r3
 8004e76:	f003 fa43 	bl	8008300 <HAL_RCC_OscConfig>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004e80:	f000 fe96 	bl	8005bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e84:	230f      	movs	r3, #15
 8004e86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e88:	2302      	movs	r3, #2
 8004e8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004e90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004e94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004e9c:	f107 030c 	add.w	r3, r7, #12
 8004ea0:	2105      	movs	r1, #5
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f003 fca4 	bl	80087f0 <HAL_RCC_ClockConfig>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004eae:	f000 fe7f 	bl	8005bb0 <Error_Handler>
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	3750      	adds	r7, #80	; 0x50
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	40007000 	.word	0x40007000

08004ec4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004eca:	463b      	mov	r3, r7
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	605a      	str	r2, [r3, #4]
 8004ed2:	609a      	str	r2, [r3, #8]
 8004ed4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004ed6:	4b44      	ldr	r3, [pc, #272]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004ed8:	4a44      	ldr	r2, [pc, #272]	; (8004fec <MX_ADC1_Init+0x128>)
 8004eda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004edc:	4b42      	ldr	r3, [pc, #264]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004ede:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ee2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004ee4:	4b40      	ldr	r3, [pc, #256]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004eea:	4b3f      	ldr	r3, [pc, #252]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004ef0:	4b3d      	ldr	r3, [pc, #244]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004ef6:	4b3c      	ldr	r3, [pc, #240]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004efe:	4b3a      	ldr	r3, [pc, #232]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f04:	4b38      	ldr	r3, [pc, #224]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004f06:	4a3a      	ldr	r2, [pc, #232]	; (8004ff0 <MX_ADC1_Init+0x12c>)
 8004f08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f0a:	4b37      	ldr	r3, [pc, #220]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8004f10:	4b35      	ldr	r3, [pc, #212]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004f12:	2206      	movs	r2, #6
 8004f14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004f16:	4b34      	ldr	r3, [pc, #208]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004f1e:	4b32      	ldr	r3, [pc, #200]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004f24:	4830      	ldr	r0, [pc, #192]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004f26:	f001 fbf5 	bl	8006714 <HAL_ADC_Init>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004f30:	f000 fe3e 	bl	8005bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004f3c:	2307      	movs	r3, #7
 8004f3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f40:	463b      	mov	r3, r7
 8004f42:	4619      	mov	r1, r3
 8004f44:	4828      	ldr	r0, [pc, #160]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004f46:	f001 fd57 	bl	80069f8 <HAL_ADC_ConfigChannel>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004f50:	f000 fe2e 	bl	8005bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004f54:	2301      	movs	r3, #1
 8004f56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f5c:	463b      	mov	r3, r7
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4821      	ldr	r0, [pc, #132]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004f62:	f001 fd49 	bl	80069f8 <HAL_ADC_ConfigChannel>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004f6c:	f000 fe20 	bl	8005bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004f70:	2302      	movs	r3, #2
 8004f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004f74:	2303      	movs	r3, #3
 8004f76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f78:	463b      	mov	r3, r7
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	481a      	ldr	r0, [pc, #104]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004f7e:	f001 fd3b 	bl	80069f8 <HAL_ADC_ConfigChannel>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8004f88:	f000 fe12 	bl	8005bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004f90:	2304      	movs	r3, #4
 8004f92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f94:	463b      	mov	r3, r7
 8004f96:	4619      	mov	r1, r3
 8004f98:	4813      	ldr	r0, [pc, #76]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004f9a:	f001 fd2d 	bl	80069f8 <HAL_ADC_ConfigChannel>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8004fa4:	f000 fe04 	bl	8005bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004fa8:	2304      	movs	r3, #4
 8004faa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004fac:	2305      	movs	r3, #5
 8004fae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004fb0:	463b      	mov	r3, r7
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	480c      	ldr	r0, [pc, #48]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004fb6:	f001 fd1f 	bl	80069f8 <HAL_ADC_ConfigChannel>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8004fc0:	f000 fdf6 	bl	8005bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004fc4:	2305      	movs	r3, #5
 8004fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004fc8:	2306      	movs	r3, #6
 8004fca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004fcc:	463b      	mov	r3, r7
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4805      	ldr	r0, [pc, #20]	; (8004fe8 <MX_ADC1_Init+0x124>)
 8004fd2:	f001 fd11 	bl	80069f8 <HAL_ADC_ConfigChannel>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8004fdc:	f000 fde8 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004fe0:	bf00      	nop
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	20001d48 	.word	0x20001d48
 8004fec:	40012000 	.word	0x40012000
 8004ff0:	0f000001 	.word	0x0f000001

08004ff4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004ffa:	463b      	mov	r3, r7
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005006:	4b36      	ldr	r3, [pc, #216]	; (80050e0 <MX_ADC2_Init+0xec>)
 8005008:	4a36      	ldr	r2, [pc, #216]	; (80050e4 <MX_ADC2_Init+0xf0>)
 800500a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800500c:	4b34      	ldr	r3, [pc, #208]	; (80050e0 <MX_ADC2_Init+0xec>)
 800500e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005012:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005014:	4b32      	ldr	r3, [pc, #200]	; (80050e0 <MX_ADC2_Init+0xec>)
 8005016:	2200      	movs	r2, #0
 8005018:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800501a:	4b31      	ldr	r3, [pc, #196]	; (80050e0 <MX_ADC2_Init+0xec>)
 800501c:	2201      	movs	r2, #1
 800501e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005020:	4b2f      	ldr	r3, [pc, #188]	; (80050e0 <MX_ADC2_Init+0xec>)
 8005022:	2201      	movs	r2, #1
 8005024:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005026:	4b2e      	ldr	r3, [pc, #184]	; (80050e0 <MX_ADC2_Init+0xec>)
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800502e:	4b2c      	ldr	r3, [pc, #176]	; (80050e0 <MX_ADC2_Init+0xec>)
 8005030:	2200      	movs	r2, #0
 8005032:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005034:	4b2a      	ldr	r3, [pc, #168]	; (80050e0 <MX_ADC2_Init+0xec>)
 8005036:	4a2c      	ldr	r2, [pc, #176]	; (80050e8 <MX_ADC2_Init+0xf4>)
 8005038:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800503a:	4b29      	ldr	r3, [pc, #164]	; (80050e0 <MX_ADC2_Init+0xec>)
 800503c:	2200      	movs	r2, #0
 800503e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8005040:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <MX_ADC2_Init+0xec>)
 8005042:	2204      	movs	r2, #4
 8005044:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005046:	4b26      	ldr	r3, [pc, #152]	; (80050e0 <MX_ADC2_Init+0xec>)
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800504e:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <MX_ADC2_Init+0xec>)
 8005050:	2200      	movs	r2, #0
 8005052:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005054:	4822      	ldr	r0, [pc, #136]	; (80050e0 <MX_ADC2_Init+0xec>)
 8005056:	f001 fb5d 	bl	8006714 <HAL_ADC_Init>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005060:	f000 fda6 	bl	8005bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005064:	230a      	movs	r3, #10
 8005066:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005068:	2301      	movs	r3, #1
 800506a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800506c:	2307      	movs	r3, #7
 800506e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005070:	463b      	mov	r3, r7
 8005072:	4619      	mov	r1, r3
 8005074:	481a      	ldr	r0, [pc, #104]	; (80050e0 <MX_ADC2_Init+0xec>)
 8005076:	f001 fcbf 	bl	80069f8 <HAL_ADC_ConfigChannel>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005080:	f000 fd96 	bl	8005bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005084:	230b      	movs	r3, #11
 8005086:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005088:	2302      	movs	r3, #2
 800508a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800508c:	463b      	mov	r3, r7
 800508e:	4619      	mov	r1, r3
 8005090:	4813      	ldr	r0, [pc, #76]	; (80050e0 <MX_ADC2_Init+0xec>)
 8005092:	f001 fcb1 	bl	80069f8 <HAL_ADC_ConfigChannel>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800509c:	f000 fd88 	bl	8005bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80050a0:	230c      	movs	r3, #12
 80050a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80050a4:	2303      	movs	r3, #3
 80050a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80050a8:	463b      	mov	r3, r7
 80050aa:	4619      	mov	r1, r3
 80050ac:	480c      	ldr	r0, [pc, #48]	; (80050e0 <MX_ADC2_Init+0xec>)
 80050ae:	f001 fca3 	bl	80069f8 <HAL_ADC_ConfigChannel>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80050b8:	f000 fd7a 	bl	8005bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80050bc:	230d      	movs	r3, #13
 80050be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80050c0:	2304      	movs	r3, #4
 80050c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80050c4:	463b      	mov	r3, r7
 80050c6:	4619      	mov	r1, r3
 80050c8:	4805      	ldr	r0, [pc, #20]	; (80050e0 <MX_ADC2_Init+0xec>)
 80050ca:	f001 fc95 	bl	80069f8 <HAL_ADC_ConfigChannel>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80050d4:	f000 fd6c 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20001d90 	.word	0x20001d90
 80050e4:	40012100 	.word	0x40012100
 80050e8:	0f000001 	.word	0x0f000001

080050ec <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80050f0:	4b09      	ldr	r3, [pc, #36]	; (8005118 <MX_IWDG_Init+0x2c>)
 80050f2:	4a0a      	ldr	r2, [pc, #40]	; (800511c <MX_IWDG_Init+0x30>)
 80050f4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 80050f6:	4b08      	ldr	r3, [pc, #32]	; (8005118 <MX_IWDG_Init+0x2c>)
 80050f8:	2202      	movs	r2, #2
 80050fa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80050fc:	4b06      	ldr	r3, [pc, #24]	; (8005118 <MX_IWDG_Init+0x2c>)
 80050fe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005102:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8005104:	4804      	ldr	r0, [pc, #16]	; (8005118 <MX_IWDG_Init+0x2c>)
 8005106:	f003 f8a8 	bl	800825a <HAL_IWDG_Init>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8005110:	f000 fd4e 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8005114:	bf00      	nop
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20001e98 	.word	0x20001e98
 800511c:	40003000 	.word	0x40003000

08005120 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b096      	sub	sp, #88	; 0x58
 8005124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005126:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	605a      	str	r2, [r3, #4]
 8005130:	609a      	str	r2, [r3, #8]
 8005132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005134:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800513e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	605a      	str	r2, [r3, #4]
 8005148:	609a      	str	r2, [r3, #8]
 800514a:	60da      	str	r2, [r3, #12]
 800514c:	611a      	str	r2, [r3, #16]
 800514e:	615a      	str	r2, [r3, #20]
 8005150:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005152:	1d3b      	adds	r3, r7, #4
 8005154:	2220      	movs	r2, #32
 8005156:	2100      	movs	r1, #0
 8005158:	4618      	mov	r0, r3
 800515a:	f005 ff41 	bl	800afe0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800515e:	4b42      	ldr	r3, [pc, #264]	; (8005268 <MX_TIM1_Init+0x148>)
 8005160:	4a42      	ldr	r2, [pc, #264]	; (800526c <MX_TIM1_Init+0x14c>)
 8005162:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005164:	4b40      	ldr	r3, [pc, #256]	; (8005268 <MX_TIM1_Init+0x148>)
 8005166:	2200      	movs	r2, #0
 8005168:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800516a:	4b3f      	ldr	r3, [pc, #252]	; (8005268 <MX_TIM1_Init+0x148>)
 800516c:	2200      	movs	r2, #0
 800516e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8005170:	4b3d      	ldr	r3, [pc, #244]	; (8005268 <MX_TIM1_Init+0x148>)
 8005172:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005176:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005178:	4b3b      	ldr	r3, [pc, #236]	; (8005268 <MX_TIM1_Init+0x148>)
 800517a:	2200      	movs	r2, #0
 800517c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800517e:	4b3a      	ldr	r3, [pc, #232]	; (8005268 <MX_TIM1_Init+0x148>)
 8005180:	2200      	movs	r2, #0
 8005182:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005184:	4b38      	ldr	r3, [pc, #224]	; (8005268 <MX_TIM1_Init+0x148>)
 8005186:	2200      	movs	r2, #0
 8005188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800518a:	4837      	ldr	r0, [pc, #220]	; (8005268 <MX_TIM1_Init+0x148>)
 800518c:	f003 fd50 	bl	8008c30 <HAL_TIM_Base_Init>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005196:	f000 fd0b 	bl	8005bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800519a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800519e:	64bb      	str	r3, [r7, #72]	; 0x48
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80051a0:	2300      	movs	r3, #0
 80051a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80051a4:	2300      	movs	r3, #0
 80051a6:	653b      	str	r3, [r7, #80]	; 0x50
  sClockSourceConfig.ClockFilter = 0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80051ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80051b0:	4619      	mov	r1, r3
 80051b2:	482d      	ldr	r0, [pc, #180]	; (8005268 <MX_TIM1_Init+0x148>)
 80051b4:	f004 f950 	bl	8009458 <HAL_TIM_ConfigClockSource>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80051be:	f000 fcf7 	bl	8005bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80051c2:	4829      	ldr	r0, [pc, #164]	; (8005268 <MX_TIM1_Init+0x148>)
 80051c4:	f003 fe5c 	bl	8008e80 <HAL_TIM_PWM_Init>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 80051ce:	f000 fcef 	bl	8005bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051d2:	2300      	movs	r3, #0
 80051d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051d6:	2300      	movs	r3, #0
 80051d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80051da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80051de:	4619      	mov	r1, r3
 80051e0:	4821      	ldr	r0, [pc, #132]	; (8005268 <MX_TIM1_Init+0x148>)
 80051e2:	f004 fd39 	bl	8009c58 <HAL_TIMEx_MasterConfigSynchronization>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80051ec:	f000 fce0 	bl	8005bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051f0:	2360      	movs	r3, #96	; 0x60
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 30000-1;
 80051f4:	f247 532f 	movw	r3, #29999	; 0x752f
 80051f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051fa:	2300      	movs	r3, #0
 80051fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80051fe:	2300      	movs	r3, #0
 8005200:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005202:	2300      	movs	r3, #0
 8005204:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005206:	2300      	movs	r3, #0
 8005208:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800520a:	2300      	movs	r3, #0
 800520c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800520e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005212:	2200      	movs	r2, #0
 8005214:	4619      	mov	r1, r3
 8005216:	4814      	ldr	r0, [pc, #80]	; (8005268 <MX_TIM1_Init+0x148>)
 8005218:	f004 f85c 	bl	80092d4 <HAL_TIM_PWM_ConfigChannel>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8005222:	f000 fcc5 	bl	8005bb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005226:	2300      	movs	r3, #0
 8005228:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800522a:	2300      	movs	r3, #0
 800522c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005232:	2300      	movs	r3, #0
 8005234:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005236:	2300      	movs	r3, #0
 8005238:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800523a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800523e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005240:	2300      	movs	r3, #0
 8005242:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005244:	1d3b      	adds	r3, r7, #4
 8005246:	4619      	mov	r1, r3
 8005248:	4807      	ldr	r0, [pc, #28]	; (8005268 <MX_TIM1_Init+0x148>)
 800524a:	f004 fd81 	bl	8009d50 <HAL_TIMEx_ConfigBreakDeadTime>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8005254:	f000 fcac 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005258:	4803      	ldr	r0, [pc, #12]	; (8005268 <MX_TIM1_Init+0x148>)
 800525a:	f000 fe93 	bl	8005f84 <HAL_TIM_MspPostInit>

}
 800525e:	bf00      	nop
 8005260:	3758      	adds	r7, #88	; 0x58
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20001ea4 	.word	0x20001ea4
 800526c:	40010000 	.word	0x40010000

08005270 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005276:	f107 0308 	add.w	r3, r7, #8
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	605a      	str	r2, [r3, #4]
 8005280:	609a      	str	r2, [r3, #8]
 8005282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005284:	463b      	mov	r3, r7
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800528c:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <MX_TIM2_Init+0x94>)
 800528e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005292:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005294:	4b1b      	ldr	r3, [pc, #108]	; (8005304 <MX_TIM2_Init+0x94>)
 8005296:	2200      	movs	r2, #0
 8005298:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800529a:	4b1a      	ldr	r3, [pc, #104]	; (8005304 <MX_TIM2_Init+0x94>)
 800529c:	2200      	movs	r2, #0
 800529e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80052a0:	4b18      	ldr	r3, [pc, #96]	; (8005304 <MX_TIM2_Init+0x94>)
 80052a2:	f04f 32ff 	mov.w	r2, #4294967295
 80052a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052a8:	4b16      	ldr	r3, [pc, #88]	; (8005304 <MX_TIM2_Init+0x94>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052ae:	4b15      	ldr	r3, [pc, #84]	; (8005304 <MX_TIM2_Init+0x94>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80052b4:	4813      	ldr	r0, [pc, #76]	; (8005304 <MX_TIM2_Init+0x94>)
 80052b6:	f003 fcbb 	bl	8008c30 <HAL_TIM_Base_Init>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80052c0:	f000 fc76 	bl	8005bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80052ca:	f107 0308 	add.w	r3, r7, #8
 80052ce:	4619      	mov	r1, r3
 80052d0:	480c      	ldr	r0, [pc, #48]	; (8005304 <MX_TIM2_Init+0x94>)
 80052d2:	f004 f8c1 	bl	8009458 <HAL_TIM_ConfigClockSource>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80052dc:	f000 fc68 	bl	8005bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052e0:	2300      	movs	r3, #0
 80052e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80052e8:	463b      	mov	r3, r7
 80052ea:	4619      	mov	r1, r3
 80052ec:	4805      	ldr	r0, [pc, #20]	; (8005304 <MX_TIM2_Init+0x94>)
 80052ee:	f004 fcb3 	bl	8009c58 <HAL_TIMEx_MasterConfigSynchronization>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80052f8:	f000 fc5a 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80052fc:	bf00      	nop
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20001eec 	.word	0x20001eec

08005308 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b08e      	sub	sp, #56	; 0x38
 800530c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800530e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	605a      	str	r2, [r3, #4]
 8005318:	609a      	str	r2, [r3, #8]
 800531a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800531c:	f107 0320 	add.w	r3, r7, #32
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005326:	1d3b      	adds	r3, r7, #4
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	605a      	str	r2, [r3, #4]
 800532e:	609a      	str	r2, [r3, #8]
 8005330:	60da      	str	r2, [r3, #12]
 8005332:	611a      	str	r2, [r3, #16]
 8005334:	615a      	str	r2, [r3, #20]
 8005336:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005338:	4b33      	ldr	r3, [pc, #204]	; (8005408 <MX_TIM3_Init+0x100>)
 800533a:	4a34      	ldr	r2, [pc, #208]	; (800540c <MX_TIM3_Init+0x104>)
 800533c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800533e:	4b32      	ldr	r3, [pc, #200]	; (8005408 <MX_TIM3_Init+0x100>)
 8005340:	2200      	movs	r2, #0
 8005342:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005344:	4b30      	ldr	r3, [pc, #192]	; (8005408 <MX_TIM3_Init+0x100>)
 8005346:	2200      	movs	r2, #0
 8005348:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 840-1;
 800534a:	4b2f      	ldr	r3, [pc, #188]	; (8005408 <MX_TIM3_Init+0x100>)
 800534c:	f240 3247 	movw	r2, #839	; 0x347
 8005350:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005352:	4b2d      	ldr	r3, [pc, #180]	; (8005408 <MX_TIM3_Init+0x100>)
 8005354:	2200      	movs	r2, #0
 8005356:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005358:	4b2b      	ldr	r3, [pc, #172]	; (8005408 <MX_TIM3_Init+0x100>)
 800535a:	2200      	movs	r2, #0
 800535c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800535e:	482a      	ldr	r0, [pc, #168]	; (8005408 <MX_TIM3_Init+0x100>)
 8005360:	f003 fc66 	bl	8008c30 <HAL_TIM_Base_Init>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800536a:	f000 fc21 	bl	8005bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800536e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005372:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005374:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005378:	4619      	mov	r1, r3
 800537a:	4823      	ldr	r0, [pc, #140]	; (8005408 <MX_TIM3_Init+0x100>)
 800537c:	f004 f86c 	bl	8009458 <HAL_TIM_ConfigClockSource>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005386:	f000 fc13 	bl	8005bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800538a:	481f      	ldr	r0, [pc, #124]	; (8005408 <MX_TIM3_Init+0x100>)
 800538c:	f003 fd78 	bl	8008e80 <HAL_TIM_PWM_Init>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005396:	f000 fc0b 	bl	8005bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800539a:	2300      	movs	r3, #0
 800539c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800539e:	2300      	movs	r3, #0
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80053a2:	f107 0320 	add.w	r3, r7, #32
 80053a6:	4619      	mov	r1, r3
 80053a8:	4817      	ldr	r0, [pc, #92]	; (8005408 <MX_TIM3_Init+0x100>)
 80053aa:	f004 fc55 	bl	8009c58 <HAL_TIMEx_MasterConfigSynchronization>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80053b4:	f000 fbfc 	bl	8005bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053b8:	2360      	movs	r3, #96	; 0x60
 80053ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 630-1;
 80053bc:	f240 2375 	movw	r3, #629	; 0x275
 80053c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053ca:	1d3b      	adds	r3, r7, #4
 80053cc:	2200      	movs	r2, #0
 80053ce:	4619      	mov	r1, r3
 80053d0:	480d      	ldr	r0, [pc, #52]	; (8005408 <MX_TIM3_Init+0x100>)
 80053d2:	f003 ff7f 	bl	80092d4 <HAL_TIM_PWM_ConfigChannel>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80053dc:	f000 fbe8 	bl	8005bb0 <Error_Handler>
  }
  sConfigOC.Pulse = 120-1;
 80053e0:	2377      	movs	r3, #119	; 0x77
 80053e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80053e4:	1d3b      	adds	r3, r7, #4
 80053e6:	2204      	movs	r2, #4
 80053e8:	4619      	mov	r1, r3
 80053ea:	4807      	ldr	r0, [pc, #28]	; (8005408 <MX_TIM3_Init+0x100>)
 80053ec:	f003 ff72 	bl	80092d4 <HAL_TIM_PWM_ConfigChannel>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 80053f6:	f000 fbdb 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80053fa:	4803      	ldr	r0, [pc, #12]	; (8005408 <MX_TIM3_Init+0x100>)
 80053fc:	f000 fdc2 	bl	8005f84 <HAL_TIM_MspPostInit>

}
 8005400:	bf00      	nop
 8005402:	3738      	adds	r7, #56	; 0x38
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	20001f34 	.word	0x20001f34
 800540c:	40000400 	.word	0x40000400

08005410 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08e      	sub	sp, #56	; 0x38
 8005414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005416:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	605a      	str	r2, [r3, #4]
 8005420:	609a      	str	r2, [r3, #8]
 8005422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005424:	f107 0320 	add.w	r3, r7, #32
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800542e:	1d3b      	adds	r3, r7, #4
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	605a      	str	r2, [r3, #4]
 8005436:	609a      	str	r2, [r3, #8]
 8005438:	60da      	str	r2, [r3, #12]
 800543a:	611a      	str	r2, [r3, #16]
 800543c:	615a      	str	r2, [r3, #20]
 800543e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005440:	4b33      	ldr	r3, [pc, #204]	; (8005510 <MX_TIM4_Init+0x100>)
 8005442:	4a34      	ldr	r2, [pc, #208]	; (8005514 <MX_TIM4_Init+0x104>)
 8005444:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005446:	4b32      	ldr	r3, [pc, #200]	; (8005510 <MX_TIM4_Init+0x100>)
 8005448:	2200      	movs	r2, #0
 800544a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800544c:	4b30      	ldr	r3, [pc, #192]	; (8005510 <MX_TIM4_Init+0x100>)
 800544e:	2200      	movs	r2, #0
 8005450:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 840-1;
 8005452:	4b2f      	ldr	r3, [pc, #188]	; (8005510 <MX_TIM4_Init+0x100>)
 8005454:	f240 3247 	movw	r2, #839	; 0x347
 8005458:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800545a:	4b2d      	ldr	r3, [pc, #180]	; (8005510 <MX_TIM4_Init+0x100>)
 800545c:	2200      	movs	r2, #0
 800545e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005460:	4b2b      	ldr	r3, [pc, #172]	; (8005510 <MX_TIM4_Init+0x100>)
 8005462:	2200      	movs	r2, #0
 8005464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005466:	482a      	ldr	r0, [pc, #168]	; (8005510 <MX_TIM4_Init+0x100>)
 8005468:	f003 fbe2 	bl	8008c30 <HAL_TIM_Base_Init>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8005472:	f000 fb9d 	bl	8005bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800547c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005480:	4619      	mov	r1, r3
 8005482:	4823      	ldr	r0, [pc, #140]	; (8005510 <MX_TIM4_Init+0x100>)
 8005484:	f003 ffe8 	bl	8009458 <HAL_TIM_ConfigClockSource>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800548e:	f000 fb8f 	bl	8005bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005492:	481f      	ldr	r0, [pc, #124]	; (8005510 <MX_TIM4_Init+0x100>)
 8005494:	f003 fcf4 	bl	8008e80 <HAL_TIM_PWM_Init>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800549e:	f000 fb87 	bl	8005bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054a2:	2300      	movs	r3, #0
 80054a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054a6:	2300      	movs	r3, #0
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80054aa:	f107 0320 	add.w	r3, r7, #32
 80054ae:	4619      	mov	r1, r3
 80054b0:	4817      	ldr	r0, [pc, #92]	; (8005510 <MX_TIM4_Init+0x100>)
 80054b2:	f004 fbd1 	bl	8009c58 <HAL_TIMEx_MasterConfigSynchronization>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80054bc:	f000 fb78 	bl	8005bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80054c0:	2360      	movs	r3, #96	; 0x60
 80054c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 420-1;
 80054c4:	f240 13a3 	movw	r3, #419	; 0x1a3
 80054c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80054d2:	1d3b      	adds	r3, r7, #4
 80054d4:	2200      	movs	r2, #0
 80054d6:	4619      	mov	r1, r3
 80054d8:	480d      	ldr	r0, [pc, #52]	; (8005510 <MX_TIM4_Init+0x100>)
 80054da:	f003 fefb 	bl	80092d4 <HAL_TIM_PWM_ConfigChannel>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80054e4:	f000 fb64 	bl	8005bb0 <Error_Handler>
  }
  sConfigOC.Pulse = 210-1;
 80054e8:	23d1      	movs	r3, #209	; 0xd1
 80054ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80054ec:	1d3b      	adds	r3, r7, #4
 80054ee:	2204      	movs	r2, #4
 80054f0:	4619      	mov	r1, r3
 80054f2:	4807      	ldr	r0, [pc, #28]	; (8005510 <MX_TIM4_Init+0x100>)
 80054f4:	f003 feee 	bl	80092d4 <HAL_TIM_PWM_ConfigChannel>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 80054fe:	f000 fb57 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005502:	4803      	ldr	r0, [pc, #12]	; (8005510 <MX_TIM4_Init+0x100>)
 8005504:	f000 fd3e 	bl	8005f84 <HAL_TIM_MspPostInit>

}
 8005508:	bf00      	nop
 800550a:	3738      	adds	r7, #56	; 0x38
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	20001f7c 	.word	0x20001f7c
 8005514:	40000800 	.word	0x40000800

08005518 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800551e:	f107 0308 	add.w	r3, r7, #8
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	605a      	str	r2, [r3, #4]
 8005528:	609a      	str	r2, [r3, #8]
 800552a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800552c:	463b      	mov	r3, r7
 800552e:	2200      	movs	r2, #0
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005534:	4b1d      	ldr	r3, [pc, #116]	; (80055ac <MX_TIM5_Init+0x94>)
 8005536:	4a1e      	ldr	r2, [pc, #120]	; (80055b0 <MX_TIM5_Init+0x98>)
 8005538:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400-1;
 800553a:	4b1c      	ldr	r3, [pc, #112]	; (80055ac <MX_TIM5_Init+0x94>)
 800553c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8005540:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005542:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <MX_TIM5_Init+0x94>)
 8005544:	2200      	movs	r2, #0
 8005546:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8005548:	4b18      	ldr	r3, [pc, #96]	; (80055ac <MX_TIM5_Init+0x94>)
 800554a:	f04f 32ff 	mov.w	r2, #4294967295
 800554e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005550:	4b16      	ldr	r3, [pc, #88]	; (80055ac <MX_TIM5_Init+0x94>)
 8005552:	2200      	movs	r2, #0
 8005554:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005556:	4b15      	ldr	r3, [pc, #84]	; (80055ac <MX_TIM5_Init+0x94>)
 8005558:	2200      	movs	r2, #0
 800555a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800555c:	4813      	ldr	r0, [pc, #76]	; (80055ac <MX_TIM5_Init+0x94>)
 800555e:	f003 fb67 	bl	8008c30 <HAL_TIM_Base_Init>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005568:	f000 fb22 	bl	8005bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800556c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005570:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005572:	f107 0308 	add.w	r3, r7, #8
 8005576:	4619      	mov	r1, r3
 8005578:	480c      	ldr	r0, [pc, #48]	; (80055ac <MX_TIM5_Init+0x94>)
 800557a:	f003 ff6d 	bl	8009458 <HAL_TIM_ConfigClockSource>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005584:	f000 fb14 	bl	8005bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005588:	2300      	movs	r3, #0
 800558a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800558c:	2300      	movs	r3, #0
 800558e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005590:	463b      	mov	r3, r7
 8005592:	4619      	mov	r1, r3
 8005594:	4805      	ldr	r0, [pc, #20]	; (80055ac <MX_TIM5_Init+0x94>)
 8005596:	f004 fb5f 	bl	8009c58 <HAL_TIMEx_MasterConfigSynchronization>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80055a0:	f000 fb06 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80055a4:	bf00      	nop
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20001fc4 	.word	0x20001fc4
 80055b0:	40000c00 	.word	0x40000c00

080055b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055ba:	463b      	mov	r3, r7
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80055c2:	4b15      	ldr	r3, [pc, #84]	; (8005618 <MX_TIM6_Init+0x64>)
 80055c4:	4a15      	ldr	r2, [pc, #84]	; (800561c <MX_TIM6_Init+0x68>)
 80055c6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 80055c8:	4b13      	ldr	r3, [pc, #76]	; (8005618 <MX_TIM6_Init+0x64>)
 80055ca:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80055ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055d0:	4b11      	ldr	r3, [pc, #68]	; (8005618 <MX_TIM6_Init+0x64>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 80055d6:	4b10      	ldr	r3, [pc, #64]	; (8005618 <MX_TIM6_Init+0x64>)
 80055d8:	22c7      	movs	r2, #199	; 0xc7
 80055da:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055dc:	4b0e      	ldr	r3, [pc, #56]	; (8005618 <MX_TIM6_Init+0x64>)
 80055de:	2200      	movs	r2, #0
 80055e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80055e2:	480d      	ldr	r0, [pc, #52]	; (8005618 <MX_TIM6_Init+0x64>)
 80055e4:	f003 fb24 	bl	8008c30 <HAL_TIM_Base_Init>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80055ee:	f000 fadf 	bl	8005bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055f2:	2300      	movs	r3, #0
 80055f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80055fa:	463b      	mov	r3, r7
 80055fc:	4619      	mov	r1, r3
 80055fe:	4806      	ldr	r0, [pc, #24]	; (8005618 <MX_TIM6_Init+0x64>)
 8005600:	f004 fb2a 	bl	8009c58 <HAL_TIMEx_MasterConfigSynchronization>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800560a:	f000 fad1 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800560e:	bf00      	nop
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	2000200c 	.word	0x2000200c
 800561c:	40001000 	.word	0x40001000

08005620 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b096      	sub	sp, #88	; 0x58
 8005624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005626:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	605a      	str	r2, [r3, #4]
 8005630:	609a      	str	r2, [r3, #8]
 8005632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005634:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800563e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	605a      	str	r2, [r3, #4]
 8005648:	609a      	str	r2, [r3, #8]
 800564a:	60da      	str	r2, [r3, #12]
 800564c:	611a      	str	r2, [r3, #16]
 800564e:	615a      	str	r2, [r3, #20]
 8005650:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005652:	1d3b      	adds	r3, r7, #4
 8005654:	2220      	movs	r2, #32
 8005656:	2100      	movs	r1, #0
 8005658:	4618      	mov	r0, r3
 800565a:	f005 fcc1 	bl	800afe0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800565e:	4b3f      	ldr	r3, [pc, #252]	; (800575c <MX_TIM8_Init+0x13c>)
 8005660:	4a3f      	ldr	r2, [pc, #252]	; (8005760 <MX_TIM8_Init+0x140>)
 8005662:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005664:	4b3d      	ldr	r3, [pc, #244]	; (800575c <MX_TIM8_Init+0x13c>)
 8005666:	2200      	movs	r2, #0
 8005668:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800566a:	4b3c      	ldr	r3, [pc, #240]	; (800575c <MX_TIM8_Init+0x13c>)
 800566c:	2200      	movs	r2, #0
 800566e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16800-1;
 8005670:	4b3a      	ldr	r3, [pc, #232]	; (800575c <MX_TIM8_Init+0x13c>)
 8005672:	f244 129f 	movw	r2, #16799	; 0x419f
 8005676:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005678:	4b38      	ldr	r3, [pc, #224]	; (800575c <MX_TIM8_Init+0x13c>)
 800567a:	2200      	movs	r2, #0
 800567c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800567e:	4b37      	ldr	r3, [pc, #220]	; (800575c <MX_TIM8_Init+0x13c>)
 8005680:	2200      	movs	r2, #0
 8005682:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005684:	4b35      	ldr	r3, [pc, #212]	; (800575c <MX_TIM8_Init+0x13c>)
 8005686:	2200      	movs	r2, #0
 8005688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800568a:	4834      	ldr	r0, [pc, #208]	; (800575c <MX_TIM8_Init+0x13c>)
 800568c:	f003 fad0 	bl	8008c30 <HAL_TIM_Base_Init>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8005696:	f000 fa8b 	bl	8005bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800569a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800569e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80056a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80056a4:	4619      	mov	r1, r3
 80056a6:	482d      	ldr	r0, [pc, #180]	; (800575c <MX_TIM8_Init+0x13c>)
 80056a8:	f003 fed6 	bl	8009458 <HAL_TIM_ConfigClockSource>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80056b2:	f000 fa7d 	bl	8005bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80056b6:	4829      	ldr	r0, [pc, #164]	; (800575c <MX_TIM8_Init+0x13c>)
 80056b8:	f003 fbe2 	bl	8008e80 <HAL_TIM_PWM_Init>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80056c2:	f000 fa75 	bl	8005bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056c6:	2300      	movs	r3, #0
 80056c8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80056ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80056d2:	4619      	mov	r1, r3
 80056d4:	4821      	ldr	r0, [pc, #132]	; (800575c <MX_TIM8_Init+0x13c>)
 80056d6:	f004 fabf 	bl	8009c58 <HAL_TIMEx_MasterConfigSynchronization>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80056e0:	f000 fa66 	bl	8005bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056e4:	2360      	movs	r3, #96	; 0x60
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2100-1;
 80056e8:	f640 0333 	movw	r3, #2099	; 0x833
 80056ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056ee:	2300      	movs	r3, #0
 80056f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80056f2:	2300      	movs	r3, #0
 80056f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80056fa:	2300      	movs	r3, #0
 80056fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80056fe:	2300      	movs	r3, #0
 8005700:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005706:	2208      	movs	r2, #8
 8005708:	4619      	mov	r1, r3
 800570a:	4814      	ldr	r0, [pc, #80]	; (800575c <MX_TIM8_Init+0x13c>)
 800570c:	f003 fde2 	bl	80092d4 <HAL_TIM_PWM_ConfigChannel>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8005716:	f000 fa4b 	bl	8005bb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800571a:	2300      	movs	r3, #0
 800571c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800571e:	2300      	movs	r3, #0
 8005720:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800572e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005732:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005734:	2300      	movs	r3, #0
 8005736:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005738:	1d3b      	adds	r3, r7, #4
 800573a:	4619      	mov	r1, r3
 800573c:	4807      	ldr	r0, [pc, #28]	; (800575c <MX_TIM8_Init+0x13c>)
 800573e:	f004 fb07 	bl	8009d50 <HAL_TIMEx_ConfigBreakDeadTime>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8005748:	f000 fa32 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800574c:	4803      	ldr	r0, [pc, #12]	; (800575c <MX_TIM8_Init+0x13c>)
 800574e:	f000 fc19 	bl	8005f84 <HAL_TIM_MspPostInit>

}
 8005752:	bf00      	nop
 8005754:	3758      	adds	r7, #88	; 0x58
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20002054 	.word	0x20002054
 8005760:	40010400 	.word	0x40010400

08005764 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005768:	4b11      	ldr	r3, [pc, #68]	; (80057b0 <MX_USART1_UART_Init+0x4c>)
 800576a:	4a12      	ldr	r2, [pc, #72]	; (80057b4 <MX_USART1_UART_Init+0x50>)
 800576c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800576e:	4b10      	ldr	r3, [pc, #64]	; (80057b0 <MX_USART1_UART_Init+0x4c>)
 8005770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005776:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <MX_USART1_UART_Init+0x4c>)
 8005778:	2200      	movs	r2, #0
 800577a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800577c:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <MX_USART1_UART_Init+0x4c>)
 800577e:	2200      	movs	r2, #0
 8005780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005782:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <MX_USART1_UART_Init+0x4c>)
 8005784:	2200      	movs	r2, #0
 8005786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005788:	4b09      	ldr	r3, [pc, #36]	; (80057b0 <MX_USART1_UART_Init+0x4c>)
 800578a:	220c      	movs	r2, #12
 800578c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800578e:	4b08      	ldr	r3, [pc, #32]	; (80057b0 <MX_USART1_UART_Init+0x4c>)
 8005790:	2200      	movs	r2, #0
 8005792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005794:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <MX_USART1_UART_Init+0x4c>)
 8005796:	2200      	movs	r2, #0
 8005798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800579a:	4805      	ldr	r0, [pc, #20]	; (80057b0 <MX_USART1_UART_Init+0x4c>)
 800579c:	f004 fb3e 	bl	8009e1c <HAL_UART_Init>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80057a6:	f000 fa03 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80057aa:	bf00      	nop
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	2000209c 	.word	0x2000209c
 80057b4:	40011000 	.word	0x40011000

080057b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80057be:	2300      	movs	r3, #0
 80057c0:	607b      	str	r3, [r7, #4]
 80057c2:	4b10      	ldr	r3, [pc, #64]	; (8005804 <MX_DMA_Init+0x4c>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	4a0f      	ldr	r2, [pc, #60]	; (8005804 <MX_DMA_Init+0x4c>)
 80057c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057cc:	6313      	str	r3, [r2, #48]	; 0x30
 80057ce:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <MX_DMA_Init+0x4c>)
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d6:	607b      	str	r3, [r7, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 80057da:	2200      	movs	r2, #0
 80057dc:	2101      	movs	r1, #1
 80057de:	2038      	movs	r0, #56	; 0x38
 80057e0:	f001 fc85 	bl	80070ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80057e4:	2038      	movs	r0, #56	; 0x38
 80057e6:	f001 fc9e 	bl	8007126 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 80057ea:	2200      	movs	r2, #0
 80057ec:	2101      	movs	r1, #1
 80057ee:	203a      	movs	r0, #58	; 0x3a
 80057f0:	f001 fc7d 	bl	80070ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80057f4:	203a      	movs	r0, #58	; 0x3a
 80057f6:	f001 fc96 	bl	8007126 <HAL_NVIC_EnableIRQ>

}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40023800 	.word	0x40023800

08005808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08c      	sub	sp, #48	; 0x30
 800580c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800580e:	f107 031c 	add.w	r3, r7, #28
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	605a      	str	r2, [r3, #4]
 8005818:	609a      	str	r2, [r3, #8]
 800581a:	60da      	str	r2, [r3, #12]
 800581c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800581e:	2300      	movs	r3, #0
 8005820:	61bb      	str	r3, [r7, #24]
 8005822:	4b4c      	ldr	r3, [pc, #304]	; (8005954 <MX_GPIO_Init+0x14c>)
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	4a4b      	ldr	r2, [pc, #300]	; (8005954 <MX_GPIO_Init+0x14c>)
 8005828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582c:	6313      	str	r3, [r2, #48]	; 0x30
 800582e:	4b49      	ldr	r3, [pc, #292]	; (8005954 <MX_GPIO_Init+0x14c>)
 8005830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005836:	61bb      	str	r3, [r7, #24]
 8005838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	4b45      	ldr	r3, [pc, #276]	; (8005954 <MX_GPIO_Init+0x14c>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	4a44      	ldr	r2, [pc, #272]	; (8005954 <MX_GPIO_Init+0x14c>)
 8005844:	f043 0304 	orr.w	r3, r3, #4
 8005848:	6313      	str	r3, [r2, #48]	; 0x30
 800584a:	4b42      	ldr	r3, [pc, #264]	; (8005954 <MX_GPIO_Init+0x14c>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005856:	2300      	movs	r3, #0
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	4b3e      	ldr	r3, [pc, #248]	; (8005954 <MX_GPIO_Init+0x14c>)
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	4a3d      	ldr	r2, [pc, #244]	; (8005954 <MX_GPIO_Init+0x14c>)
 8005860:	f043 0301 	orr.w	r3, r3, #1
 8005864:	6313      	str	r3, [r2, #48]	; 0x30
 8005866:	4b3b      	ldr	r3, [pc, #236]	; (8005954 <MX_GPIO_Init+0x14c>)
 8005868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	613b      	str	r3, [r7, #16]
 8005870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	4b37      	ldr	r3, [pc, #220]	; (8005954 <MX_GPIO_Init+0x14c>)
 8005878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587a:	4a36      	ldr	r2, [pc, #216]	; (8005954 <MX_GPIO_Init+0x14c>)
 800587c:	f043 0302 	orr.w	r3, r3, #2
 8005880:	6313      	str	r3, [r2, #48]	; 0x30
 8005882:	4b34      	ldr	r3, [pc, #208]	; (8005954 <MX_GPIO_Init+0x14c>)
 8005884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800588e:	2300      	movs	r3, #0
 8005890:	60bb      	str	r3, [r7, #8]
 8005892:	4b30      	ldr	r3, [pc, #192]	; (8005954 <MX_GPIO_Init+0x14c>)
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	4a2f      	ldr	r2, [pc, #188]	; (8005954 <MX_GPIO_Init+0x14c>)
 8005898:	f043 0310 	orr.w	r3, r3, #16
 800589c:	6313      	str	r3, [r2, #48]	; 0x30
 800589e:	4b2d      	ldr	r3, [pc, #180]	; (8005954 <MX_GPIO_Init+0x14c>)
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	f003 0310 	and.w	r3, r3, #16
 80058a6:	60bb      	str	r3, [r7, #8]
 80058a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80058aa:	2300      	movs	r3, #0
 80058ac:	607b      	str	r3, [r7, #4]
 80058ae:	4b29      	ldr	r3, [pc, #164]	; (8005954 <MX_GPIO_Init+0x14c>)
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	4a28      	ldr	r2, [pc, #160]	; (8005954 <MX_GPIO_Init+0x14c>)
 80058b4:	f043 0308 	orr.w	r3, r3, #8
 80058b8:	6313      	str	r3, [r2, #48]	; 0x30
 80058ba:	4b26      	ldr	r3, [pc, #152]	; (8005954 <MX_GPIO_Init+0x14c>)
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	607b      	str	r3, [r7, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GateH1_A_Pin|GateH1_B_Pin, GPIO_PIN_SET);
 80058c6:	2201      	movs	r2, #1
 80058c8:	2130      	movs	r1, #48	; 0x30
 80058ca:	4823      	ldr	r0, [pc, #140]	; (8005958 <MX_GPIO_Init+0x150>)
 80058cc:	f002 fcac 	bl	8008228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Gates1_A_Dis_Pin|Gates1_B_Dis_Pin|Gates2_A_Dis_Pin|Gates2_B_Dis_Pin, GPIO_PIN_SET);
 80058d0:	2201      	movs	r2, #1
 80058d2:	210f      	movs	r1, #15
 80058d4:	4821      	ldr	r0, [pc, #132]	; (800595c <MX_GPIO_Init+0x154>)
 80058d6:	f002 fca7 	bl	8008228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GateH2_A_Pin|GateH2_B_Pin, GPIO_PIN_SET);
 80058da:	2201      	movs	r2, #1
 80058dc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80058e0:	481f      	ldr	r0, [pc, #124]	; (8005960 <MX_GPIO_Init+0x158>)
 80058e2:	f002 fca1 	bl	8008228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disable_DC_DC_GPIO_Port, Disable_DC_DC_Pin, GPIO_PIN_RESET);
 80058e6:	2200      	movs	r2, #0
 80058e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058ec:	481a      	ldr	r0, [pc, #104]	; (8005958 <MX_GPIO_Init+0x150>)
 80058ee:	f002 fc9b 	bl	8008228 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GateH1_A_Pin GateH1_B_Pin Disable_DC_DC_Pin */
  GPIO_InitStruct.Pin = GateH1_A_Pin|GateH1_B_Pin|Disable_DC_DC_Pin;
 80058f2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80058f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058f8:	2301      	movs	r3, #1
 80058fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fc:	2300      	movs	r3, #0
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005900:	2300      	movs	r3, #0
 8005902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005904:	f107 031c 	add.w	r3, r7, #28
 8005908:	4619      	mov	r1, r3
 800590a:	4813      	ldr	r0, [pc, #76]	; (8005958 <MX_GPIO_Init+0x150>)
 800590c:	f002 faf0 	bl	8007ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Gates1_A_Dis_Pin Gates1_B_Dis_Pin Gates2_A_Dis_Pin Gates2_B_Dis_Pin */
  GPIO_InitStruct.Pin = Gates1_A_Dis_Pin|Gates1_B_Dis_Pin|Gates2_A_Dis_Pin|Gates2_B_Dis_Pin;
 8005910:	230f      	movs	r3, #15
 8005912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005914:	2301      	movs	r3, #1
 8005916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005918:	2300      	movs	r3, #0
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800591c:	2300      	movs	r3, #0
 800591e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005920:	f107 031c 	add.w	r3, r7, #28
 8005924:	4619      	mov	r1, r3
 8005926:	480d      	ldr	r0, [pc, #52]	; (800595c <MX_GPIO_Init+0x154>)
 8005928:	f002 fae2 	bl	8007ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GateH2_A_Pin GateH2_B_Pin */
  GPIO_InitStruct.Pin = GateH2_A_Pin|GateH2_B_Pin;
 800592c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005932:	2301      	movs	r3, #1
 8005934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005936:	2300      	movs	r3, #0
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800593a:	2300      	movs	r3, #0
 800593c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800593e:	f107 031c 	add.w	r3, r7, #28
 8005942:	4619      	mov	r1, r3
 8005944:	4806      	ldr	r0, [pc, #24]	; (8005960 <MX_GPIO_Init+0x158>)
 8005946:	f002 fad3 	bl	8007ef0 <HAL_GPIO_Init>

}
 800594a:	bf00      	nop
 800594c:	3730      	adds	r7, #48	; 0x30
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	40023800 	.word	0x40023800
 8005958:	40020800 	.word	0x40020800
 800595c:	40020400 	.word	0x40020400
 8005960:	40020c00 	.word	0x40020c00

08005964 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8005964:	b580      	push	{r7, lr}
 8005966:	ed2d 8b02 	vpush	{d8}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]

	if(htim == &htim1) {
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a87      	ldr	r2, [pc, #540]	; (8005b90 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d126      	bne.n	80059c6 <HAL_TIM_PeriodElapsedCallback+0x62>
		uint32_t temp = __HAL_TIM_GET_COUNTER(&htim2);
 8005978:	4b86      	ldr	r3, [pc, #536]	; (8005b94 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	60fb      	str	r3, [r7, #12]
		float freq = ((float)counterPeriod + 1) / (temp - counterValue) * TimerFreq;
 8005980:	4b85      	ldr	r3, [pc, #532]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	ee07 3a90 	vmov	s15, r3
 8005988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005990:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005994:	4b81      	ldr	r3, [pc, #516]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	ee07 3a90 	vmov	s15, r3
 80059a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a8:	4b7d      	ldr	r3, [pc, #500]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80059aa:	edd3 7a00 	vldr	s15, [r3]
 80059ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b2:	edc7 7a02 	vstr	s15, [r7, #8]
		setFreq((valueTypes)freq);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fe f85b 	bl	8003a74 <setFreq>
		counterValue = temp;
 80059be:	4a77      	ldr	r2, [pc, #476]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0x238>)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6013      	str	r3, [r2, #0]
		setTemp4((valueTypes)(getTempPt1000(dmaADC2buffer[3] * getTemp4_coeff().val_float)));

		setPWM();
	}

}
 80059c4:	e0de      	b.n	8005b84 <HAL_TIM_PeriodElapsedCallback+0x220>
	else if(htim == &htim6) {
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a76      	ldr	r2, [pc, #472]	; (8005ba4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	f040 80da 	bne.w	8005b84 <HAL_TIM_PeriodElapsedCallback+0x220>
		setU_24Vmeas((valueTypes)(dmaADC1buffer[0] * getU_24Vcoeff().val_float));
 80059d0:	4b75      	ldr	r3, [pc, #468]	; (8005ba8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	ee07 3a90 	vmov	s15, r3
 80059d8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80059dc:	f7fc fcd0 	bl	8002380 <getU_24Vcoeff>
 80059e0:	4603      	mov	r3, r0
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80059ea:	ee17 3a90 	vmov	r3, s15
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fc fc84 	bl	80022fc <setU_24Vmeas>
		setU_HeaterMeas((valueTypes)(dmaADC1buffer[1] * getU_HeaterCoeff().val_float));
 80059f4:	4b6c      	ldr	r3, [pc, #432]	; (8005ba8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80059f6:	885b      	ldrh	r3, [r3, #2]
 80059f8:	ee07 3a90 	vmov	s15, r3
 80059fc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005a00:	f7fc fd0c 	bl	800241c <getU_HeaterCoeff>
 8005a04:	4603      	mov	r3, r0
 8005a06:	ee07 3a90 	vmov	s15, r3
 8005a0a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005a0e:	ee17 3a90 	vmov	r3, s15
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fc fcc0 	bl	8002398 <setU_HeaterMeas>
		setI_1A((valueTypes)(dmaADC1buffer[2] * getI_1A_Coeff().val_float));
 8005a18:	4b63      	ldr	r3, [pc, #396]	; (8005ba8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005a1a:	889b      	ldrh	r3, [r3, #4]
 8005a1c:	ee07 3a90 	vmov	s15, r3
 8005a20:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005a24:	f7fc fe00 	bl	8002628 <getI_1A_Coeff>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005a32:	ee17 3a90 	vmov	r3, s15
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fc fd60 	bl	80024fc <setI_1A>
		setI_1B((valueTypes)(dmaADC1buffer[3] * getI_1B_Coeff().val_float));
 8005a3c:	4b5a      	ldr	r3, [pc, #360]	; (8005ba8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005a3e:	88db      	ldrh	r3, [r3, #6]
 8005a40:	ee07 3a90 	vmov	s15, r3
 8005a44:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005a48:	f7fc fe20 	bl	800268c <getI_1B_Coeff>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005a56:	ee17 3a90 	vmov	r3, s15
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fc fd6a 	bl	8002534 <setI_1B>
		setI_2A((valueTypes)(dmaADC1buffer[4] * getI_2A_Coeff().val_float));
 8005a60:	4b51      	ldr	r3, [pc, #324]	; (8005ba8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005a62:	891b      	ldrh	r3, [r3, #8]
 8005a64:	ee07 3a90 	vmov	s15, r3
 8005a68:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005a6c:	f7fc fe40 	bl	80026f0 <getI_2A_Coeff>
 8005a70:	4603      	mov	r3, r0
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005a7a:	ee17 3a90 	vmov	r3, s15
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fc fd74 	bl	800256c <setI_2A>
		setI_2B((valueTypes)(dmaADC1buffer[5] * getI_2B_Coeff().val_float));
 8005a84:	4b48      	ldr	r3, [pc, #288]	; (8005ba8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005a86:	895b      	ldrh	r3, [r3, #10]
 8005a88:	ee07 3a90 	vmov	s15, r3
 8005a8c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005a90:	f7fc fe60 	bl	8002754 <getI_2B_Coeff>
 8005a94:	4603      	mov	r3, r0
 8005a96:	ee07 3a90 	vmov	s15, r3
 8005a9a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005a9e:	ee17 3a90 	vmov	r3, s15
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fc fd7e 	bl	80025a4 <setI_2B>
		setTemp1((valueTypes)(getTemp3455(dmaADC2buffer[0] * getTemp1_coeff().val_float)));
 8005aa8:	4b40      	ldr	r3, [pc, #256]	; (8005bac <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	ee07 3a90 	vmov	s15, r3
 8005ab0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005ab4:	f7fc ffb8 	bl	8002a28 <getTemp1_coeff>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ac6:	ee17 3a90 	vmov	r3, s15
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 fc91 	bl	80063f4 <getTemp3455>
 8005ad2:	ed87 0a00 	vstr	s0, [r7]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fc ff0f 	bl	80028fc <setTemp1>
		setTemp2((valueTypes)(getTemp3455(dmaADC2buffer[1] * getTemp2_coeff().val_float)));
 8005ade:	4b33      	ldr	r3, [pc, #204]	; (8005bac <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005ae0:	885b      	ldrh	r3, [r3, #2]
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005aea:	f7fc ffcf 	bl	8002a8c <getTemp2_coeff>
 8005aee:	4603      	mov	r3, r0
 8005af0:	ee07 3a90 	vmov	s15, r3
 8005af4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005afc:	ee17 3a90 	vmov	r3, s15
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fc76 	bl	80063f4 <getTemp3455>
 8005b08:	ed87 0a00 	vstr	s0, [r7]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fc ff10 	bl	8002934 <setTemp2>
		setTemp3((valueTypes)(getTempPt1000(dmaADC2buffer[2] * getTemp3_coeff().val_float)));
 8005b14:	4b25      	ldr	r3, [pc, #148]	; (8005bac <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005b16:	889b      	ldrh	r3, [r3, #4]
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005b20:	f7fc ffe6 	bl	8002af0 <getTemp3_coeff>
 8005b24:	4603      	mov	r3, r0
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b32:	ee17 3a90 	vmov	r3, s15
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fcdd 	bl	80064f8 <getTempPt1000>
 8005b3e:	ed87 0a00 	vstr	s0, [r7]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fc ff11 	bl	800296c <setTemp3>
		setTemp4((valueTypes)(getTempPt1000(dmaADC2buffer[3] * getTemp4_coeff().val_float)));
 8005b4a:	4b18      	ldr	r3, [pc, #96]	; (8005bac <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005b4c:	88db      	ldrh	r3, [r3, #6]
 8005b4e:	ee07 3a90 	vmov	s15, r3
 8005b52:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005b56:	f7fc fffd 	bl	8002b54 <getTemp4_coeff>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	ee07 3a90 	vmov	s15, r3
 8005b60:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b68:	ee17 3a90 	vmov	r3, s15
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fcc2 	bl	80064f8 <getTempPt1000>
 8005b74:	ed87 0a00 	vstr	s0, [r7]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fc ff12 	bl	80029a4 <setTemp4>
		setPWM();
 8005b80:	f7fb fdb4 	bl	80016ec <setPWM>
}
 8005b84:	bf00      	nop
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	ecbd 8b02 	vpop	{d8}
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20001ea4 	.word	0x20001ea4
 8005b94:	20001eec 	.word	0x20001eec
 8005b98:	200020e0 	.word	0x200020e0
 8005b9c:	200020e4 	.word	0x200020e4
 8005ba0:	200012ec 	.word	0x200012ec
 8005ba4:	2000200c 	.word	0x2000200c
 8005ba8:	200020e8 	.word	0x200020e8
 8005bac:	200020f4 	.word	0x200020f4

08005bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005bb4:	b672      	cpsid	i
}
 8005bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  UARTtransmit("Hard fault! Something went wrong.");
 8005bb8:	4801      	ldr	r0, [pc, #4]	; (8005bc0 <Error_Handler+0x10>)
 8005bba:	f7fe f8b3 	bl	8003d24 <UARTtransmit>
 8005bbe:	e7fb      	b.n	8005bb8 <Error_Handler+0x8>
 8005bc0:	08010478 	.word	0x08010478

08005bc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bca:	2300      	movs	r3, #0
 8005bcc:	607b      	str	r3, [r7, #4]
 8005bce:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <HAL_MspInit+0x4c>)
 8005bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd2:	4a0f      	ldr	r2, [pc, #60]	; (8005c10 <HAL_MspInit+0x4c>)
 8005bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8005bda:	4b0d      	ldr	r3, [pc, #52]	; (8005c10 <HAL_MspInit+0x4c>)
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005be2:	607b      	str	r3, [r7, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005be6:	2300      	movs	r3, #0
 8005be8:	603b      	str	r3, [r7, #0]
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <HAL_MspInit+0x4c>)
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	4a08      	ldr	r2, [pc, #32]	; (8005c10 <HAL_MspInit+0x4c>)
 8005bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8005bf6:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <HAL_MspInit+0x4c>)
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	40023800 	.word	0x40023800

08005c14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08c      	sub	sp, #48	; 0x30
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c1c:	f107 031c 	add.w	r3, r7, #28
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	605a      	str	r2, [r3, #4]
 8005c26:	609a      	str	r2, [r3, #8]
 8005c28:	60da      	str	r2, [r3, #12]
 8005c2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a5e      	ldr	r2, [pc, #376]	; (8005dac <HAL_ADC_MspInit+0x198>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d158      	bne.n	8005ce8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005c36:	2300      	movs	r3, #0
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	4b5d      	ldr	r3, [pc, #372]	; (8005db0 <HAL_ADC_MspInit+0x19c>)
 8005c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3e:	4a5c      	ldr	r2, [pc, #368]	; (8005db0 <HAL_ADC_MspInit+0x19c>)
 8005c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c44:	6453      	str	r3, [r2, #68]	; 0x44
 8005c46:	4b5a      	ldr	r3, [pc, #360]	; (8005db0 <HAL_ADC_MspInit+0x19c>)
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4e:	61bb      	str	r3, [r7, #24]
 8005c50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c52:	2300      	movs	r3, #0
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	4b56      	ldr	r3, [pc, #344]	; (8005db0 <HAL_ADC_MspInit+0x19c>)
 8005c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5a:	4a55      	ldr	r2, [pc, #340]	; (8005db0 <HAL_ADC_MspInit+0x19c>)
 8005c5c:	f043 0301 	orr.w	r3, r3, #1
 8005c60:	6313      	str	r3, [r2, #48]	; 0x30
 8005c62:	4b53      	ldr	r3, [pc, #332]	; (8005db0 <HAL_ADC_MspInit+0x19c>)
 8005c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	697b      	ldr	r3, [r7, #20]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = U_Heater_Meas_Pin|U_POWER_Meas_Pin|CurrMeas1_A_Pin|CurrMeas1_B_Pin
 8005c6e:	233f      	movs	r3, #63	; 0x3f
 8005c70:	61fb      	str	r3, [r7, #28]
                          |CurrMeas2_A_Pin|CurrMeas2_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005c72:	2303      	movs	r3, #3
 8005c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c7a:	f107 031c 	add.w	r3, r7, #28
 8005c7e:	4619      	mov	r1, r3
 8005c80:	484c      	ldr	r0, [pc, #304]	; (8005db4 <HAL_ADC_MspInit+0x1a0>)
 8005c82:	f002 f935 	bl	8007ef0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005c86:	4b4c      	ldr	r3, [pc, #304]	; (8005db8 <HAL_ADC_MspInit+0x1a4>)
 8005c88:	4a4c      	ldr	r2, [pc, #304]	; (8005dbc <HAL_ADC_MspInit+0x1a8>)
 8005c8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005c8c:	4b4a      	ldr	r3, [pc, #296]	; (8005db8 <HAL_ADC_MspInit+0x1a4>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c92:	4b49      	ldr	r3, [pc, #292]	; (8005db8 <HAL_ADC_MspInit+0x1a4>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c98:	4b47      	ldr	r3, [pc, #284]	; (8005db8 <HAL_ADC_MspInit+0x1a4>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005c9e:	4b46      	ldr	r3, [pc, #280]	; (8005db8 <HAL_ADC_MspInit+0x1a4>)
 8005ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ca4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005ca6:	4b44      	ldr	r3, [pc, #272]	; (8005db8 <HAL_ADC_MspInit+0x1a4>)
 8005ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005cae:	4b42      	ldr	r3, [pc, #264]	; (8005db8 <HAL_ADC_MspInit+0x1a4>)
 8005cb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005cb6:	4b40      	ldr	r3, [pc, #256]	; (8005db8 <HAL_ADC_MspInit+0x1a4>)
 8005cb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cbc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005cbe:	4b3e      	ldr	r3, [pc, #248]	; (8005db8 <HAL_ADC_MspInit+0x1a4>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005cc4:	4b3c      	ldr	r3, [pc, #240]	; (8005db8 <HAL_ADC_MspInit+0x1a4>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005cca:	483b      	ldr	r0, [pc, #236]	; (8005db8 <HAL_ADC_MspInit+0x1a4>)
 8005ccc:	f001 fa46 	bl	800715c <HAL_DMA_Init>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005cd6:	f7ff ff6b 	bl	8005bb0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a36      	ldr	r2, [pc, #216]	; (8005db8 <HAL_ADC_MspInit+0x1a4>)
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38
 8005ce0:	4a35      	ldr	r2, [pc, #212]	; (8005db8 <HAL_ADC_MspInit+0x1a4>)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005ce6:	e05d      	b.n	8005da4 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a34      	ldr	r2, [pc, #208]	; (8005dc0 <HAL_ADC_MspInit+0x1ac>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d158      	bne.n	8005da4 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	4b2e      	ldr	r3, [pc, #184]	; (8005db0 <HAL_ADC_MspInit+0x19c>)
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfa:	4a2d      	ldr	r2, [pc, #180]	; (8005db0 <HAL_ADC_MspInit+0x19c>)
 8005cfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d00:	6453      	str	r3, [r2, #68]	; 0x44
 8005d02:	4b2b      	ldr	r3, [pc, #172]	; (8005db0 <HAL_ADC_MspInit+0x19c>)
 8005d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d0a:	613b      	str	r3, [r7, #16]
 8005d0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	4b27      	ldr	r3, [pc, #156]	; (8005db0 <HAL_ADC_MspInit+0x19c>)
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	4a26      	ldr	r2, [pc, #152]	; (8005db0 <HAL_ADC_MspInit+0x19c>)
 8005d18:	f043 0304 	orr.w	r3, r3, #4
 8005d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8005d1e:	4b24      	ldr	r3, [pc, #144]	; (8005db0 <HAL_ADC_MspInit+0x19c>)
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TempMeas1_Pin|TempMeas2_Pin|TempMeas3_Pin|TempMeas4_Pin;
 8005d2a:	230f      	movs	r3, #15
 8005d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d36:	f107 031c 	add.w	r3, r7, #28
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4821      	ldr	r0, [pc, #132]	; (8005dc4 <HAL_ADC_MspInit+0x1b0>)
 8005d3e:	f002 f8d7 	bl	8007ef0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005d42:	4b21      	ldr	r3, [pc, #132]	; (8005dc8 <HAL_ADC_MspInit+0x1b4>)
 8005d44:	4a21      	ldr	r2, [pc, #132]	; (8005dcc <HAL_ADC_MspInit+0x1b8>)
 8005d46:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005d48:	4b1f      	ldr	r3, [pc, #124]	; (8005dc8 <HAL_ADC_MspInit+0x1b4>)
 8005d4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d4e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d50:	4b1d      	ldr	r3, [pc, #116]	; (8005dc8 <HAL_ADC_MspInit+0x1b4>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d56:	4b1c      	ldr	r3, [pc, #112]	; (8005dc8 <HAL_ADC_MspInit+0x1b4>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005d5c:	4b1a      	ldr	r3, [pc, #104]	; (8005dc8 <HAL_ADC_MspInit+0x1b4>)
 8005d5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d62:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005d64:	4b18      	ldr	r3, [pc, #96]	; (8005dc8 <HAL_ADC_MspInit+0x1b4>)
 8005d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d6a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005d6c:	4b16      	ldr	r3, [pc, #88]	; (8005dc8 <HAL_ADC_MspInit+0x1b4>)
 8005d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d72:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005d74:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <HAL_ADC_MspInit+0x1b4>)
 8005d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d7a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005d7c:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <HAL_ADC_MspInit+0x1b4>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d82:	4b11      	ldr	r3, [pc, #68]	; (8005dc8 <HAL_ADC_MspInit+0x1b4>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005d88:	480f      	ldr	r0, [pc, #60]	; (8005dc8 <HAL_ADC_MspInit+0x1b4>)
 8005d8a:	f001 f9e7 	bl	800715c <HAL_DMA_Init>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8005d94:	f7ff ff0c 	bl	8005bb0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a0b      	ldr	r2, [pc, #44]	; (8005dc8 <HAL_ADC_MspInit+0x1b4>)
 8005d9c:	639a      	str	r2, [r3, #56]	; 0x38
 8005d9e:	4a0a      	ldr	r2, [pc, #40]	; (8005dc8 <HAL_ADC_MspInit+0x1b4>)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005da4:	bf00      	nop
 8005da6:	3730      	adds	r7, #48	; 0x30
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	40012000 	.word	0x40012000
 8005db0:	40023800 	.word	0x40023800
 8005db4:	40020000 	.word	0x40020000
 8005db8:	20001dd8 	.word	0x20001dd8
 8005dbc:	40026410 	.word	0x40026410
 8005dc0:	40012100 	.word	0x40012100
 8005dc4:	40020800 	.word	0x40020800
 8005dc8:	20001e38 	.word	0x20001e38
 8005dcc:	40026440 	.word	0x40026440

08005dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b090      	sub	sp, #64	; 0x40
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	605a      	str	r2, [r3, #4]
 8005de2:	609a      	str	r2, [r3, #8]
 8005de4:	60da      	str	r2, [r3, #12]
 8005de6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a5d      	ldr	r2, [pc, #372]	; (8005f64 <HAL_TIM_Base_MspInit+0x194>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d134      	bne.n	8005e5c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005df2:	2300      	movs	r3, #0
 8005df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df6:	4b5c      	ldr	r3, [pc, #368]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfa:	4a5b      	ldr	r2, [pc, #364]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005dfc:	f043 0301 	orr.w	r3, r3, #1
 8005e00:	6453      	str	r3, [r2, #68]	; 0x44
 8005e02:	4b59      	ldr	r3, [pc, #356]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e0e:	2300      	movs	r3, #0
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
 8005e12:	4b55      	ldr	r3, [pc, #340]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e16:	4a54      	ldr	r2, [pc, #336]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005e18:	f043 0310 	orr.w	r3, r3, #16
 8005e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e1e:	4b52      	ldr	r3, [pc, #328]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	f003 0310 	and.w	r3, r3, #16
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005e2a:	2380      	movs	r3, #128	; 0x80
 8005e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e2e:	2302      	movs	r3, #2
 8005e30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e32:	2300      	movs	r3, #0
 8005e34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e36:	2300      	movs	r3, #0
 8005e38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e42:	4619      	mov	r1, r3
 8005e44:	4849      	ldr	r0, [pc, #292]	; (8005f6c <HAL_TIM_Base_MspInit+0x19c>)
 8005e46:	f002 f853 	bl	8007ef0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	2019      	movs	r0, #25
 8005e50:	f001 f94d 	bl	80070ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005e54:	2019      	movs	r0, #25
 8005e56:	f001 f966 	bl	8007126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005e5a:	e07e      	b.n	8005f5a <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM2)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e64:	d10e      	bne.n	8005e84 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005e66:	2300      	movs	r3, #0
 8005e68:	623b      	str	r3, [r7, #32]
 8005e6a:	4b3f      	ldr	r3, [pc, #252]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	4a3e      	ldr	r2, [pc, #248]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005e70:	f043 0301 	orr.w	r3, r3, #1
 8005e74:	6413      	str	r3, [r2, #64]	; 0x40
 8005e76:	4b3c      	ldr	r3, [pc, #240]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	623b      	str	r3, [r7, #32]
 8005e80:	6a3b      	ldr	r3, [r7, #32]
}
 8005e82:	e06a      	b.n	8005f5a <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM3)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a39      	ldr	r2, [pc, #228]	; (8005f70 <HAL_TIM_Base_MspInit+0x1a0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d10e      	bne.n	8005eac <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005e8e:	2300      	movs	r3, #0
 8005e90:	61fb      	str	r3, [r7, #28]
 8005e92:	4b35      	ldr	r3, [pc, #212]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	4a34      	ldr	r2, [pc, #208]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005e98:	f043 0302 	orr.w	r3, r3, #2
 8005e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e9e:	4b32      	ldr	r3, [pc, #200]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	69fb      	ldr	r3, [r7, #28]
}
 8005eaa:	e056      	b.n	8005f5a <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM4)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a30      	ldr	r2, [pc, #192]	; (8005f74 <HAL_TIM_Base_MspInit+0x1a4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d10e      	bne.n	8005ed4 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	4b2b      	ldr	r3, [pc, #172]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	4a2a      	ldr	r2, [pc, #168]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005ec0:	f043 0304 	orr.w	r3, r3, #4
 8005ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ec6:	4b28      	ldr	r3, [pc, #160]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	61bb      	str	r3, [r7, #24]
 8005ed0:	69bb      	ldr	r3, [r7, #24]
}
 8005ed2:	e042      	b.n	8005f5a <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM5)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a27      	ldr	r2, [pc, #156]	; (8005f78 <HAL_TIM_Base_MspInit+0x1a8>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d10e      	bne.n	8005efc <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005ede:	2300      	movs	r3, #0
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	4b21      	ldr	r3, [pc, #132]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	4a20      	ldr	r2, [pc, #128]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005ee8:	f043 0308 	orr.w	r3, r3, #8
 8005eec:	6413      	str	r3, [r2, #64]	; 0x40
 8005eee:	4b1e      	ldr	r3, [pc, #120]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	617b      	str	r3, [r7, #20]
 8005ef8:	697b      	ldr	r3, [r7, #20]
}
 8005efa:	e02e      	b.n	8005f5a <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM6)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a1e      	ldr	r2, [pc, #120]	; (8005f7c <HAL_TIM_Base_MspInit+0x1ac>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d116      	bne.n	8005f34 <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005f06:	2300      	movs	r3, #0
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	4b17      	ldr	r3, [pc, #92]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	4a16      	ldr	r2, [pc, #88]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005f10:	f043 0310 	orr.w	r3, r3, #16
 8005f14:	6413      	str	r3, [r2, #64]	; 0x40
 8005f16:	4b14      	ldr	r3, [pc, #80]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f003 0310 	and.w	r3, r3, #16
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8005f22:	2200      	movs	r2, #0
 8005f24:	2103      	movs	r1, #3
 8005f26:	2036      	movs	r0, #54	; 0x36
 8005f28:	f001 f8e1 	bl	80070ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005f2c:	2036      	movs	r0, #54	; 0x36
 8005f2e:	f001 f8fa 	bl	8007126 <HAL_NVIC_EnableIRQ>
}
 8005f32:	e012      	b.n	8005f5a <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM8)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a11      	ldr	r2, [pc, #68]	; (8005f80 <HAL_TIM_Base_MspInit+0x1b0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d10d      	bne.n	8005f5a <HAL_TIM_Base_MspInit+0x18a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f46:	4a08      	ldr	r2, [pc, #32]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005f48:	f043 0302 	orr.w	r3, r3, #2
 8005f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <HAL_TIM_Base_MspInit+0x198>)
 8005f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
}
 8005f5a:	bf00      	nop
 8005f5c:	3740      	adds	r7, #64	; 0x40
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	40010000 	.word	0x40010000
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	40000400 	.word	0x40000400
 8005f74:	40000800 	.word	0x40000800
 8005f78:	40000c00 	.word	0x40000c00
 8005f7c:	40001000 	.word	0x40001000
 8005f80:	40010400 	.word	0x40010400

08005f84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08c      	sub	sp, #48	; 0x30
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f8c:	f107 031c 	add.w	r3, r7, #28
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	605a      	str	r2, [r3, #4]
 8005f96:	609a      	str	r2, [r3, #8]
 8005f98:	60da      	str	r2, [r3, #12]
 8005f9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a49      	ldr	r2, [pc, #292]	; (80060c8 <HAL_TIM_MspPostInit+0x144>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d11f      	bne.n	8005fe6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61bb      	str	r3, [r7, #24]
 8005faa:	4b48      	ldr	r3, [pc, #288]	; (80060cc <HAL_TIM_MspPostInit+0x148>)
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	4a47      	ldr	r2, [pc, #284]	; (80060cc <HAL_TIM_MspPostInit+0x148>)
 8005fb0:	f043 0310 	orr.w	r3, r3, #16
 8005fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fb6:	4b45      	ldr	r3, [pc, #276]	; (80060cc <HAL_TIM_MspPostInit+0x148>)
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fba:	f003 0310 	and.w	r3, r3, #16
 8005fbe:	61bb      	str	r3, [r7, #24]
 8005fc0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005fd8:	f107 031c 	add.w	r3, r7, #28
 8005fdc:	4619      	mov	r1, r3
 8005fde:	483c      	ldr	r0, [pc, #240]	; (80060d0 <HAL_TIM_MspPostInit+0x14c>)
 8005fe0:	f001 ff86 	bl	8007ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005fe4:	e06c      	b.n	80060c0 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM3)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a3a      	ldr	r2, [pc, #232]	; (80060d4 <HAL_TIM_MspPostInit+0x150>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d11e      	bne.n	800602e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	4b35      	ldr	r3, [pc, #212]	; (80060cc <HAL_TIM_MspPostInit+0x148>)
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff8:	4a34      	ldr	r2, [pc, #208]	; (80060cc <HAL_TIM_MspPostInit+0x148>)
 8005ffa:	f043 0301 	orr.w	r3, r3, #1
 8005ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8006000:	4b32      	ldr	r3, [pc, #200]	; (80060cc <HAL_TIM_MspPostInit+0x148>)
 8006002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	617b      	str	r3, [r7, #20]
 800600a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GateL1_A_Pin|GateL1_B_Pin;
 800600c:	23c0      	movs	r3, #192	; 0xc0
 800600e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006010:	2302      	movs	r3, #2
 8006012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006014:	2300      	movs	r3, #0
 8006016:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006018:	2300      	movs	r3, #0
 800601a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800601c:	2302      	movs	r3, #2
 800601e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006020:	f107 031c 	add.w	r3, r7, #28
 8006024:	4619      	mov	r1, r3
 8006026:	482c      	ldr	r0, [pc, #176]	; (80060d8 <HAL_TIM_MspPostInit+0x154>)
 8006028:	f001 ff62 	bl	8007ef0 <HAL_GPIO_Init>
}
 800602c:	e048      	b.n	80060c0 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a2a      	ldr	r2, [pc, #168]	; (80060dc <HAL_TIM_MspPostInit+0x158>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d11f      	bne.n	8006078 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006038:	2300      	movs	r3, #0
 800603a:	613b      	str	r3, [r7, #16]
 800603c:	4b23      	ldr	r3, [pc, #140]	; (80060cc <HAL_TIM_MspPostInit+0x148>)
 800603e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006040:	4a22      	ldr	r2, [pc, #136]	; (80060cc <HAL_TIM_MspPostInit+0x148>)
 8006042:	f043 0308 	orr.w	r3, r3, #8
 8006046:	6313      	str	r3, [r2, #48]	; 0x30
 8006048:	4b20      	ldr	r3, [pc, #128]	; (80060cc <HAL_TIM_MspPostInit+0x148>)
 800604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GateL2_A_Pin|GateL2_B_Pin;
 8006054:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800605a:	2302      	movs	r3, #2
 800605c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800605e:	2300      	movs	r3, #0
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006062:	2300      	movs	r3, #0
 8006064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006066:	2302      	movs	r3, #2
 8006068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800606a:	f107 031c 	add.w	r3, r7, #28
 800606e:	4619      	mov	r1, r3
 8006070:	481b      	ldr	r0, [pc, #108]	; (80060e0 <HAL_TIM_MspPostInit+0x15c>)
 8006072:	f001 ff3d 	bl	8007ef0 <HAL_GPIO_Init>
}
 8006076:	e023      	b.n	80060c0 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM8)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a19      	ldr	r2, [pc, #100]	; (80060e4 <HAL_TIM_MspPostInit+0x160>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d11e      	bne.n	80060c0 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	4b11      	ldr	r3, [pc, #68]	; (80060cc <HAL_TIM_MspPostInit+0x148>)
 8006088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608a:	4a10      	ldr	r2, [pc, #64]	; (80060cc <HAL_TIM_MspPostInit+0x148>)
 800608c:	f043 0304 	orr.w	r3, r3, #4
 8006090:	6313      	str	r3, [r2, #48]	; 0x30
 8006092:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <HAL_TIM_MspPostInit+0x148>)
 8006094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Set_U_Heater_Pin;
 800609e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060a4:	2302      	movs	r3, #2
 80060a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060a8:	2300      	movs	r3, #0
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060ac:	2300      	movs	r3, #0
 80060ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80060b0:	2303      	movs	r3, #3
 80060b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Set_U_Heater_GPIO_Port, &GPIO_InitStruct);
 80060b4:	f107 031c 	add.w	r3, r7, #28
 80060b8:	4619      	mov	r1, r3
 80060ba:	480b      	ldr	r0, [pc, #44]	; (80060e8 <HAL_TIM_MspPostInit+0x164>)
 80060bc:	f001 ff18 	bl	8007ef0 <HAL_GPIO_Init>
}
 80060c0:	bf00      	nop
 80060c2:	3730      	adds	r7, #48	; 0x30
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40010000 	.word	0x40010000
 80060cc:	40023800 	.word	0x40023800
 80060d0:	40021000 	.word	0x40021000
 80060d4:	40000400 	.word	0x40000400
 80060d8:	40020000 	.word	0x40020000
 80060dc:	40000800 	.word	0x40000800
 80060e0:	40020c00 	.word	0x40020c00
 80060e4:	40010400 	.word	0x40010400
 80060e8:	40020800 	.word	0x40020800

080060ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08a      	sub	sp, #40	; 0x28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060f4:	f107 0314 	add.w	r3, r7, #20
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	605a      	str	r2, [r3, #4]
 80060fe:	609a      	str	r2, [r3, #8]
 8006100:	60da      	str	r2, [r3, #12]
 8006102:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1d      	ldr	r2, [pc, #116]	; (8006180 <HAL_UART_MspInit+0x94>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d133      	bne.n	8006176 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800610e:	2300      	movs	r3, #0
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	4b1c      	ldr	r3, [pc, #112]	; (8006184 <HAL_UART_MspInit+0x98>)
 8006114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006116:	4a1b      	ldr	r2, [pc, #108]	; (8006184 <HAL_UART_MspInit+0x98>)
 8006118:	f043 0310 	orr.w	r3, r3, #16
 800611c:	6453      	str	r3, [r2, #68]	; 0x44
 800611e:	4b19      	ldr	r3, [pc, #100]	; (8006184 <HAL_UART_MspInit+0x98>)
 8006120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006122:	f003 0310 	and.w	r3, r3, #16
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	4b15      	ldr	r3, [pc, #84]	; (8006184 <HAL_UART_MspInit+0x98>)
 8006130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006132:	4a14      	ldr	r2, [pc, #80]	; (8006184 <HAL_UART_MspInit+0x98>)
 8006134:	f043 0302 	orr.w	r3, r3, #2
 8006138:	6313      	str	r3, [r2, #48]	; 0x30
 800613a:	4b12      	ldr	r3, [pc, #72]	; (8006184 <HAL_UART_MspInit+0x98>)
 800613c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006146:	23c0      	movs	r3, #192	; 0xc0
 8006148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800614a:	2302      	movs	r3, #2
 800614c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006152:	2303      	movs	r3, #3
 8006154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006156:	2307      	movs	r3, #7
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800615a:	f107 0314 	add.w	r3, r7, #20
 800615e:	4619      	mov	r1, r3
 8006160:	4809      	ldr	r0, [pc, #36]	; (8006188 <HAL_UART_MspInit+0x9c>)
 8006162:	f001 fec5 	bl	8007ef0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8006166:	2200      	movs	r2, #0
 8006168:	2101      	movs	r1, #1
 800616a:	2025      	movs	r0, #37	; 0x25
 800616c:	f000 ffbf 	bl	80070ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006170:	2025      	movs	r0, #37	; 0x25
 8006172:	f000 ffd8 	bl	8007126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006176:	bf00      	nop
 8006178:	3728      	adds	r7, #40	; 0x28
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40011000 	.word	0x40011000
 8006184:	40023800 	.word	0x40023800
 8006188:	40020400 	.word	0x40020400

0800618c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006190:	e7fe      	b.n	8006190 <NMI_Handler+0x4>

08006192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006192:	b480      	push	{r7}
 8006194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006196:	e7fe      	b.n	8006196 <HardFault_Handler+0x4>

08006198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800619c:	e7fe      	b.n	800619c <MemManage_Handler+0x4>

0800619e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800619e:	b480      	push	{r7}
 80061a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80061a2:	e7fe      	b.n	80061a2 <BusFault_Handler+0x4>

080061a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80061a8:	e7fe      	b.n	80061a8 <UsageFault_Handler+0x4>

080061aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80061aa:	b480      	push	{r7}
 80061ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80061ae:	bf00      	nop
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80061bc:	bf00      	nop
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80061c6:	b480      	push	{r7}
 80061c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80061ca:	bf00      	nop
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80061d8:	f000 fa7c 	bl	80066d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80061dc:	bf00      	nop
 80061de:	bd80      	pop	{r7, pc}

080061e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80061e4:	4802      	ldr	r0, [pc, #8]	; (80061f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80061e6:	f002 ff6d 	bl	80090c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80061ea:	bf00      	nop
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20001ea4 	.word	0x20001ea4

080061f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80061f8:	4802      	ldr	r0, [pc, #8]	; (8006204 <USART1_IRQHandler+0x10>)
 80061fa:	f003 ff1f 	bl	800a03c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80061fe:	bf00      	nop
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	2000209c 	.word	0x2000209c

08006208 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800620c:	4802      	ldr	r0, [pc, #8]	; (8006218 <TIM6_DAC_IRQHandler+0x10>)
 800620e:	f002 ff59 	bl	80090c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006212:	bf00      	nop
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	2000200c 	.word	0x2000200c

0800621c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006220:	4802      	ldr	r0, [pc, #8]	; (800622c <DMA2_Stream0_IRQHandler+0x10>)
 8006222:	f001 f933 	bl	800748c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006226:	bf00      	nop
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20001dd8 	.word	0x20001dd8

08006230 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006234:	4802      	ldr	r0, [pc, #8]	; (8006240 <DMA2_Stream2_IRQHandler+0x10>)
 8006236:	f001 f929 	bl	800748c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800623a:	bf00      	nop
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	20001e38 	.word	0x20001e38

08006244 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
	return 1;
 8006248:	2301      	movs	r3, #1
}
 800624a:	4618      	mov	r0, r3
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <_kill>:

int _kill(int pid, int sig)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800625e:	f004 fe73 	bl	800af48 <__errno>
 8006262:	4603      	mov	r3, r0
 8006264:	2216      	movs	r2, #22
 8006266:	601a      	str	r2, [r3, #0]
	return -1;
 8006268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800626c:	4618      	mov	r0, r3
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <_exit>:

void _exit (int status)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800627c:	f04f 31ff 	mov.w	r1, #4294967295
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff ffe7 	bl	8006254 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006286:	e7fe      	b.n	8006286 <_exit+0x12>

08006288 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006294:	2300      	movs	r3, #0
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	e00a      	b.n	80062b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800629a:	f3af 8000 	nop.w
 800629e:	4601      	mov	r1, r0
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	60ba      	str	r2, [r7, #8]
 80062a6:	b2ca      	uxtb	r2, r1
 80062a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	3301      	adds	r3, #1
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	dbf0      	blt.n	800629a <_read+0x12>
	}

return len;
 80062b8:	687b      	ldr	r3, [r7, #4]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b086      	sub	sp, #24
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	60f8      	str	r0, [r7, #12]
 80062ca:	60b9      	str	r1, [r7, #8]
 80062cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80062ce:	2300      	movs	r3, #0
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	e009      	b.n	80062e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	1c5a      	adds	r2, r3, #1
 80062d8:	60ba      	str	r2, [r7, #8]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	4618      	mov	r0, r3
 80062de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	3301      	adds	r3, #1
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	dbf1      	blt.n	80062d4 <_write+0x12>
	}
	return len;
 80062f0:	687b      	ldr	r3, [r7, #4]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <_close>:

int _close(int file)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
	return -1;
 8006302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006306:	4618      	mov	r0, r3
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006322:	605a      	str	r2, [r3, #4]
	return 0;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <_isatty>:

int _isatty(int file)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
	return 1;
 800633a:	2301      	movs	r3, #1
}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
	return 0;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
	...

08006364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800636c:	4a14      	ldr	r2, [pc, #80]	; (80063c0 <_sbrk+0x5c>)
 800636e:	4b15      	ldr	r3, [pc, #84]	; (80063c4 <_sbrk+0x60>)
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006378:	4b13      	ldr	r3, [pc, #76]	; (80063c8 <_sbrk+0x64>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006380:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <_sbrk+0x64>)
 8006382:	4a12      	ldr	r2, [pc, #72]	; (80063cc <_sbrk+0x68>)
 8006384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006386:	4b10      	ldr	r3, [pc, #64]	; (80063c8 <_sbrk+0x64>)
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4413      	add	r3, r2
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	429a      	cmp	r2, r3
 8006392:	d207      	bcs.n	80063a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006394:	f004 fdd8 	bl	800af48 <__errno>
 8006398:	4603      	mov	r3, r0
 800639a:	220c      	movs	r2, #12
 800639c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800639e:	f04f 33ff 	mov.w	r3, #4294967295
 80063a2:	e009      	b.n	80063b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80063a4:	4b08      	ldr	r3, [pc, #32]	; (80063c8 <_sbrk+0x64>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <_sbrk+0x64>)
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4413      	add	r3, r2
 80063b2:	4a05      	ldr	r2, [pc, #20]	; (80063c8 <_sbrk+0x64>)
 80063b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80063b6:	68fb      	ldr	r3, [r7, #12]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20020000 	.word	0x20020000
 80063c4:	00000400 	.word	0x00000400
 80063c8:	200020fc 	.word	0x200020fc
 80063cc:	20002138 	.word	0x20002138

080063d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80063d4:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <SystemInit+0x20>)
 80063d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063da:	4a05      	ldr	r2, [pc, #20]	; (80063f0 <SystemInit+0x20>)
 80063dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80063e4:	bf00      	nop
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	e000ed00 	.word	0xe000ed00

080063f4 <getTemp3455>:
		3266, 3340, 3413, 3487, 3559,
		3632, 3704, 3776, 3848, 3919,
		3990
};

float getTemp3455(uint16_t rawData) {
 80063f4:	b5b0      	push	{r4, r5, r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	4603      	mov	r3, r0
 80063fc:	80fb      	strh	r3, [r7, #6]
	if(rawData < rawValues3455[41] ||
 80063fe:	4b3a      	ldr	r3, [pc, #232]	; (80064e8 <getTemp3455+0xf4>)
 8006400:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006404:	88fa      	ldrh	r2, [r7, #6]
 8006406:	429a      	cmp	r2, r3
 8006408:	d304      	bcc.n	8006414 <getTemp3455+0x20>
		rawData > rawValues3455[0]) {
 800640a:	4b37      	ldr	r3, [pc, #220]	; (80064e8 <getTemp3455+0xf4>)
 800640c:	881b      	ldrh	r3, [r3, #0]
	if(rawData < rawValues3455[41] ||
 800640e:	88fa      	ldrh	r2, [r7, #6]
 8006410:	429a      	cmp	r2, r3
 8006412:	d901      	bls.n	8006418 <getTemp3455+0x24>
		return 999.9;
 8006414:	4b35      	ldr	r3, [pc, #212]	; (80064ec <getTemp3455+0xf8>)
 8006416:	e05f      	b.n	80064d8 <getTemp3455+0xe4>
	}
	else {
		for(int i = 1; i < 42; i++) {
 8006418:	2301      	movs	r3, #1
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	e058      	b.n	80064d0 <getTemp3455+0xdc>
			if(rawData >= rawValues3455[i]) {
 800641e:	4a32      	ldr	r2, [pc, #200]	; (80064e8 <getTemp3455+0xf4>)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006426:	88fa      	ldrh	r2, [r7, #6]
 8006428:	429a      	cmp	r2, r3
 800642a:	d34e      	bcc.n	80064ca <getTemp3455+0xd6>
				float temp;
				temp = 5.0/(rawValues3455[i-1] - rawValues3455[i]) * (rawValues3455[i-1] - rawData) + i * 5.0 - 60; //C
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	3b01      	subs	r3, #1
 8006430:	4a2d      	ldr	r2, [pc, #180]	; (80064e8 <getTemp3455+0xf4>)
 8006432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006436:	4619      	mov	r1, r3
 8006438:	4a2b      	ldr	r2, [pc, #172]	; (80064e8 <getTemp3455+0xf4>)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006440:	1acb      	subs	r3, r1, r3
 8006442:	4618      	mov	r0, r3
 8006444:	f7fa f87e 	bl	8000544 <__aeabi_i2d>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	f04f 0000 	mov.w	r0, #0
 8006450:	4927      	ldr	r1, [pc, #156]	; (80064f0 <getTemp3455+0xfc>)
 8006452:	f7fa fa0b 	bl	800086c <__aeabi_ddiv>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	4614      	mov	r4, r2
 800645c:	461d      	mov	r5, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3b01      	subs	r3, #1
 8006462:	4a21      	ldr	r2, [pc, #132]	; (80064e8 <getTemp3455+0xf4>)
 8006464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006468:	461a      	mov	r2, r3
 800646a:	88fb      	ldrh	r3, [r7, #6]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	4618      	mov	r0, r3
 8006470:	f7fa f868 	bl	8000544 <__aeabi_i2d>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4620      	mov	r0, r4
 800647a:	4629      	mov	r1, r5
 800647c:	f7fa f8cc 	bl	8000618 <__aeabi_dmul>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4614      	mov	r4, r2
 8006486:	461d      	mov	r5, r3
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f7fa f85b 	bl	8000544 <__aeabi_i2d>
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	4b17      	ldr	r3, [pc, #92]	; (80064f0 <getTemp3455+0xfc>)
 8006494:	f7fa f8c0 	bl	8000618 <__aeabi_dmul>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4620      	mov	r0, r4
 800649e:	4629      	mov	r1, r5
 80064a0:	f7f9 ff04 	bl	80002ac <__adddf3>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4610      	mov	r0, r2
 80064aa:	4619      	mov	r1, r3
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	4b10      	ldr	r3, [pc, #64]	; (80064f4 <getTemp3455+0x100>)
 80064b2:	f7f9 fef9 	bl	80002a8 <__aeabi_dsub>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4610      	mov	r0, r2
 80064bc:	4619      	mov	r1, r3
 80064be:	f7fa fba3 	bl	8000c08 <__aeabi_d2f>
 80064c2:	4603      	mov	r3, r0
 80064c4:	60bb      	str	r3, [r7, #8]
				return temp;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	e006      	b.n	80064d8 <getTemp3455+0xe4>
		for(int i = 1; i < 42; i++) {
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3301      	adds	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b29      	cmp	r3, #41	; 0x29
 80064d4:	dda3      	ble.n	800641e <getTemp3455+0x2a>
			}
		}
		return 999.9;
 80064d6:	4b05      	ldr	r3, [pc, #20]	; (80064ec <getTemp3455+0xf8>)
	}
}
 80064d8:	ee07 3a90 	vmov	s15, r3
 80064dc:	eeb0 0a67 	vmov.f32	s0, s15
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bdb0      	pop	{r4, r5, r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20001328 	.word	0x20001328
 80064ec:	4479f99a 	.word	0x4479f99a
 80064f0:	40140000 	.word	0x40140000
 80064f4:	404e0000 	.word	0x404e0000

080064f8 <getTempPt1000>:

float getTempPt1000(uint16_t rawData) {
 80064f8:	b5b0      	push	{r4, r5, r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	4603      	mov	r3, r0
 8006500:	80fb      	strh	r3, [r7, #6]
	if(rawData > rawValuesPt1000[50]) {
 8006502:	4b33      	ldr	r3, [pc, #204]	; (80065d0 <getTempPt1000+0xd8>)
 8006504:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006508:	88fa      	ldrh	r2, [r7, #6]
 800650a:	429a      	cmp	r2, r3
 800650c:	d901      	bls.n	8006512 <getTempPt1000+0x1a>
		return 999.9;
 800650e:	4b31      	ldr	r3, [pc, #196]	; (80065d4 <getTempPt1000+0xdc>)
 8006510:	e057      	b.n	80065c2 <getTempPt1000+0xca>
	}
	else {
		for(int i = 1; i < 51; i++) {
 8006512:	2301      	movs	r3, #1
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	e050      	b.n	80065ba <getTempPt1000+0xc2>
			if(rawData <= rawValuesPt1000[i]) {
 8006518:	4a2d      	ldr	r2, [pc, #180]	; (80065d0 <getTempPt1000+0xd8>)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006520:	88fa      	ldrh	r2, [r7, #6]
 8006522:	429a      	cmp	r2, r3
 8006524:	d846      	bhi.n	80065b4 <getTempPt1000+0xbc>
				float temp;
				temp = 5.0/(rawValuesPt1000[i] - rawValuesPt1000[i-1]) * (rawData - rawValuesPt1000[i-1]) + (i-1) * 5.0; //C
 8006526:	4a2a      	ldr	r2, [pc, #168]	; (80065d0 <getTempPt1000+0xd8>)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800652e:	4619      	mov	r1, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3b01      	subs	r3, #1
 8006534:	4a26      	ldr	r2, [pc, #152]	; (80065d0 <getTempPt1000+0xd8>)
 8006536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800653a:	1acb      	subs	r3, r1, r3
 800653c:	4618      	mov	r0, r3
 800653e:	f7fa f801 	bl	8000544 <__aeabi_i2d>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	f04f 0000 	mov.w	r0, #0
 800654a:	4923      	ldr	r1, [pc, #140]	; (80065d8 <getTempPt1000+0xe0>)
 800654c:	f7fa f98e 	bl	800086c <__aeabi_ddiv>
 8006550:	4602      	mov	r2, r0
 8006552:	460b      	mov	r3, r1
 8006554:	4614      	mov	r4, r2
 8006556:	461d      	mov	r5, r3
 8006558:	88fb      	ldrh	r3, [r7, #6]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	3a01      	subs	r2, #1
 800655e:	491c      	ldr	r1, [pc, #112]	; (80065d0 <getTempPt1000+0xd8>)
 8006560:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8006564:	1a9b      	subs	r3, r3, r2
 8006566:	4618      	mov	r0, r3
 8006568:	f7f9 ffec 	bl	8000544 <__aeabi_i2d>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4620      	mov	r0, r4
 8006572:	4629      	mov	r1, r5
 8006574:	f7fa f850 	bl	8000618 <__aeabi_dmul>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4614      	mov	r4, r2
 800657e:	461d      	mov	r5, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3b01      	subs	r3, #1
 8006584:	4618      	mov	r0, r3
 8006586:	f7f9 ffdd 	bl	8000544 <__aeabi_i2d>
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	4b12      	ldr	r3, [pc, #72]	; (80065d8 <getTempPt1000+0xe0>)
 8006590:	f7fa f842 	bl	8000618 <__aeabi_dmul>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4620      	mov	r0, r4
 800659a:	4629      	mov	r1, r5
 800659c:	f7f9 fe86 	bl	80002ac <__adddf3>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4610      	mov	r0, r2
 80065a6:	4619      	mov	r1, r3
 80065a8:	f7fa fb2e 	bl	8000c08 <__aeabi_d2f>
 80065ac:	4603      	mov	r3, r0
 80065ae:	60bb      	str	r3, [r7, #8]
				return temp;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	e006      	b.n	80065c2 <getTempPt1000+0xca>
		for(int i = 1; i < 51; i++) {
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	3301      	adds	r3, #1
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b32      	cmp	r3, #50	; 0x32
 80065be:	ddab      	ble.n	8006518 <getTempPt1000+0x20>
			}
		}
		return 999.9;
 80065c0:	4b04      	ldr	r3, [pc, #16]	; (80065d4 <getTempPt1000+0xdc>)
	}
}
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eeb0 0a67 	vmov.f32	s0, s15
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bdb0      	pop	{r4, r5, r7, pc}
 80065d0:	2000137c 	.word	0x2000137c
 80065d4:	4479f99a 	.word	0x4479f99a
 80065d8:	40140000 	.word	0x40140000

080065dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80065dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006614 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80065e0:	480d      	ldr	r0, [pc, #52]	; (8006618 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80065e2:	490e      	ldr	r1, [pc, #56]	; (800661c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80065e4:	4a0e      	ldr	r2, [pc, #56]	; (8006620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80065e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80065e8:	e002      	b.n	80065f0 <LoopCopyDataInit>

080065ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80065ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80065ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80065ee:	3304      	adds	r3, #4

080065f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80065f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80065f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80065f4:	d3f9      	bcc.n	80065ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80065f6:	4a0b      	ldr	r2, [pc, #44]	; (8006624 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80065f8:	4c0b      	ldr	r4, [pc, #44]	; (8006628 <LoopFillZerobss+0x26>)
  movs r3, #0
 80065fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80065fc:	e001      	b.n	8006602 <LoopFillZerobss>

080065fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80065fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006600:	3204      	adds	r2, #4

08006602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006604:	d3fb      	bcc.n	80065fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006606:	f7ff fee3 	bl	80063d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800660a:	f004 fcb5 	bl	800af78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800660e:	f7fe fb31 	bl	8004c74 <main>
  bx  lr    
 8006612:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800661c:	200015c0 	.word	0x200015c0
  ldr r2, =_sidata
 8006620:	08010a00 	.word	0x08010a00
  ldr r2, =_sbss
 8006624:	200015c0 	.word	0x200015c0
  ldr r4, =_ebss
 8006628:	20002134 	.word	0x20002134

0800662c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800662c:	e7fe      	b.n	800662c <ADC_IRQHandler>
	...

08006630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006634:	4b0e      	ldr	r3, [pc, #56]	; (8006670 <HAL_Init+0x40>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a0d      	ldr	r2, [pc, #52]	; (8006670 <HAL_Init+0x40>)
 800663a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800663e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006640:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <HAL_Init+0x40>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a0a      	ldr	r2, [pc, #40]	; (8006670 <HAL_Init+0x40>)
 8006646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800664a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800664c:	4b08      	ldr	r3, [pc, #32]	; (8006670 <HAL_Init+0x40>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a07      	ldr	r2, [pc, #28]	; (8006670 <HAL_Init+0x40>)
 8006652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006658:	2003      	movs	r0, #3
 800665a:	f000 fd3d 	bl	80070d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800665e:	200f      	movs	r0, #15
 8006660:	f000 f808 	bl	8006674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006664:	f7ff faae 	bl	8005bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	40023c00 	.word	0x40023c00

08006674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800667c:	4b12      	ldr	r3, [pc, #72]	; (80066c8 <HAL_InitTick+0x54>)
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	4b12      	ldr	r3, [pc, #72]	; (80066cc <HAL_InitTick+0x58>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	4619      	mov	r1, r3
 8006686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800668a:	fbb3 f3f1 	udiv	r3, r3, r1
 800668e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fd55 	bl	8007142 <HAL_SYSTICK_Config>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e00e      	b.n	80066c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b0f      	cmp	r3, #15
 80066a6:	d80a      	bhi.n	80066be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80066a8:	2200      	movs	r2, #0
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	f04f 30ff 	mov.w	r0, #4294967295
 80066b0:	f000 fd1d 	bl	80070ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80066b4:	4a06      	ldr	r2, [pc, #24]	; (80066d0 <HAL_InitTick+0x5c>)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	e000      	b.n	80066c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	20001324 	.word	0x20001324
 80066cc:	200013e8 	.word	0x200013e8
 80066d0:	200013e4 	.word	0x200013e4

080066d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80066d8:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <HAL_IncTick+0x20>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	461a      	mov	r2, r3
 80066de:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <HAL_IncTick+0x24>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4413      	add	r3, r2
 80066e4:	4a04      	ldr	r2, [pc, #16]	; (80066f8 <HAL_IncTick+0x24>)
 80066e6:	6013      	str	r3, [r2, #0]
}
 80066e8:	bf00      	nop
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	200013e8 	.word	0x200013e8
 80066f8:	20002100 	.word	0x20002100

080066fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80066fc:	b480      	push	{r7}
 80066fe:	af00      	add	r7, sp, #0
  return uwTick;
 8006700:	4b03      	ldr	r3, [pc, #12]	; (8006710 <HAL_GetTick+0x14>)
 8006702:	681b      	ldr	r3, [r3, #0]
}
 8006704:	4618      	mov	r0, r3
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	20002100 	.word	0x20002100

08006714 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e033      	b.n	8006792 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	d109      	bne.n	8006746 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff fa6e 	bl	8005c14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	f003 0310 	and.w	r3, r3, #16
 800674e:	2b00      	cmp	r3, #0
 8006750:	d118      	bne.n	8006784 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800675a:	f023 0302 	bic.w	r3, r3, #2
 800675e:	f043 0202 	orr.w	r2, r3, #2
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fa68 	bl	8006c3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	f023 0303 	bic.w	r3, r3, #3
 800677a:	f043 0201 	orr.w	r2, r3, #1
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	641a      	str	r2, [r3, #64]	; 0x40
 8006782:	e001      	b.n	8006788 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006790:	7bfb      	ldrb	r3, [r7, #15]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <HAL_ADC_Start_DMA+0x1e>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e0e9      	b.n	800698e <HAL_ADC_Start_DMA+0x1f2>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d018      	beq.n	8006802 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0201 	orr.w	r2, r2, #1
 80067de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80067e0:	4b6d      	ldr	r3, [pc, #436]	; (8006998 <HAL_ADC_Start_DMA+0x1fc>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a6d      	ldr	r2, [pc, #436]	; (800699c <HAL_ADC_Start_DMA+0x200>)
 80067e6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ea:	0c9a      	lsrs	r2, r3, #18
 80067ec:	4613      	mov	r3, r2
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	4413      	add	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80067f4:	e002      	b.n	80067fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1f9      	bne.n	80067f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006810:	d107      	bne.n	8006822 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006820:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b01      	cmp	r3, #1
 800682e:	f040 80a1 	bne.w	8006974 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800683a:	f023 0301 	bic.w	r3, r3, #1
 800683e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006850:	2b00      	cmp	r3, #0
 8006852:	d007      	beq.n	8006864 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800685c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800686c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006870:	d106      	bne.n	8006880 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006876:	f023 0206 	bic.w	r2, r3, #6
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	645a      	str	r2, [r3, #68]	; 0x44
 800687e:	e002      	b.n	8006886 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800688e:	4b44      	ldr	r3, [pc, #272]	; (80069a0 <HAL_ADC_Start_DMA+0x204>)
 8006890:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006896:	4a43      	ldr	r2, [pc, #268]	; (80069a4 <HAL_ADC_Start_DMA+0x208>)
 8006898:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	4a42      	ldr	r2, [pc, #264]	; (80069a8 <HAL_ADC_Start_DMA+0x20c>)
 80068a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	4a41      	ldr	r2, [pc, #260]	; (80069ac <HAL_ADC_Start_DMA+0x210>)
 80068a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80068b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80068c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689a      	ldr	r2, [r3, #8]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	334c      	adds	r3, #76	; 0x4c
 80068de:	4619      	mov	r1, r3
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f000 fce8 	bl	80072b8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f003 031f 	and.w	r3, r3, #31
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d12a      	bne.n	800694a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a2d      	ldr	r2, [pc, #180]	; (80069b0 <HAL_ADC_Start_DMA+0x214>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d015      	beq.n	800692a <HAL_ADC_Start_DMA+0x18e>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a2c      	ldr	r2, [pc, #176]	; (80069b4 <HAL_ADC_Start_DMA+0x218>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d105      	bne.n	8006914 <HAL_ADC_Start_DMA+0x178>
 8006908:	4b25      	ldr	r3, [pc, #148]	; (80069a0 <HAL_ADC_Start_DMA+0x204>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f003 031f 	and.w	r3, r3, #31
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00a      	beq.n	800692a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a27      	ldr	r2, [pc, #156]	; (80069b8 <HAL_ADC_Start_DMA+0x21c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d136      	bne.n	800698c <HAL_ADC_Start_DMA+0x1f0>
 800691e:	4b20      	ldr	r3, [pc, #128]	; (80069a0 <HAL_ADC_Start_DMA+0x204>)
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f003 0310 	and.w	r3, r3, #16
 8006926:	2b00      	cmp	r3, #0
 8006928:	d130      	bne.n	800698c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d129      	bne.n	800698c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689a      	ldr	r2, [r3, #8]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006946:	609a      	str	r2, [r3, #8]
 8006948:	e020      	b.n	800698c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a18      	ldr	r2, [pc, #96]	; (80069b0 <HAL_ADC_Start_DMA+0x214>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d11b      	bne.n	800698c <HAL_ADC_Start_DMA+0x1f0>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d114      	bne.n	800698c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006970:	609a      	str	r2, [r3, #8]
 8006972:	e00b      	b.n	800698c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	f043 0210 	orr.w	r2, r3, #16
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006984:	f043 0201 	orr.w	r2, r3, #1
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	20001324 	.word	0x20001324
 800699c:	431bde83 	.word	0x431bde83
 80069a0:	40012300 	.word	0x40012300
 80069a4:	08006e35 	.word	0x08006e35
 80069a8:	08006eef 	.word	0x08006eef
 80069ac:	08006f0b 	.word	0x08006f0b
 80069b0:	40012000 	.word	0x40012000
 80069b4:	40012100 	.word	0x40012100
 80069b8:	40012200 	.word	0x40012200

080069bc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d101      	bne.n	8006a14 <HAL_ADC_ConfigChannel+0x1c>
 8006a10:	2302      	movs	r3, #2
 8006a12:	e105      	b.n	8006c20 <HAL_ADC_ConfigChannel+0x228>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b09      	cmp	r3, #9
 8006a22:	d925      	bls.n	8006a70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68d9      	ldr	r1, [r3, #12]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	461a      	mov	r2, r3
 8006a32:	4613      	mov	r3, r2
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	4413      	add	r3, r2
 8006a38:	3b1e      	subs	r3, #30
 8006a3a:	2207      	movs	r2, #7
 8006a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a40:	43da      	mvns	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	400a      	ands	r2, r1
 8006a48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68d9      	ldr	r1, [r3, #12]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	4403      	add	r3, r0
 8006a62:	3b1e      	subs	r3, #30
 8006a64:	409a      	lsls	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	60da      	str	r2, [r3, #12]
 8006a6e:	e022      	b.n	8006ab6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6919      	ldr	r1, [r3, #16]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	4613      	mov	r3, r2
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	4413      	add	r3, r2
 8006a84:	2207      	movs	r2, #7
 8006a86:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8a:	43da      	mvns	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	400a      	ands	r2, r1
 8006a92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6919      	ldr	r1, [r3, #16]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	4403      	add	r3, r0
 8006aac:	409a      	lsls	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	2b06      	cmp	r3, #6
 8006abc:	d824      	bhi.n	8006b08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	3b05      	subs	r3, #5
 8006ad0:	221f      	movs	r2, #31
 8006ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad6:	43da      	mvns	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	400a      	ands	r2, r1
 8006ade:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	4618      	mov	r0, r3
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	4613      	mov	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	3b05      	subs	r3, #5
 8006afa:	fa00 f203 	lsl.w	r2, r0, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	635a      	str	r2, [r3, #52]	; 0x34
 8006b06:	e04c      	b.n	8006ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	2b0c      	cmp	r3, #12
 8006b0e:	d824      	bhi.n	8006b5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	3b23      	subs	r3, #35	; 0x23
 8006b22:	221f      	movs	r2, #31
 8006b24:	fa02 f303 	lsl.w	r3, r2, r3
 8006b28:	43da      	mvns	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	400a      	ands	r2, r1
 8006b30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	4618      	mov	r0, r3
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	3b23      	subs	r3, #35	; 0x23
 8006b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30
 8006b58:	e023      	b.n	8006ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	3b41      	subs	r3, #65	; 0x41
 8006b6c:	221f      	movs	r2, #31
 8006b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b72:	43da      	mvns	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	400a      	ands	r2, r1
 8006b7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	4618      	mov	r0, r3
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	3b41      	subs	r3, #65	; 0x41
 8006b96:	fa00 f203 	lsl.w	r2, r0, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ba2:	4b22      	ldr	r3, [pc, #136]	; (8006c2c <HAL_ADC_ConfigChannel+0x234>)
 8006ba4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a21      	ldr	r2, [pc, #132]	; (8006c30 <HAL_ADC_ConfigChannel+0x238>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d109      	bne.n	8006bc4 <HAL_ADC_ConfigChannel+0x1cc>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b12      	cmp	r3, #18
 8006bb6:	d105      	bne.n	8006bc4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a19      	ldr	r2, [pc, #100]	; (8006c30 <HAL_ADC_ConfigChannel+0x238>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d123      	bne.n	8006c16 <HAL_ADC_ConfigChannel+0x21e>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b10      	cmp	r3, #16
 8006bd4:	d003      	beq.n	8006bde <HAL_ADC_ConfigChannel+0x1e6>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b11      	cmp	r3, #17
 8006bdc:	d11b      	bne.n	8006c16 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b10      	cmp	r3, #16
 8006bf0:	d111      	bne.n	8006c16 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006bf2:	4b10      	ldr	r3, [pc, #64]	; (8006c34 <HAL_ADC_ConfigChannel+0x23c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a10      	ldr	r2, [pc, #64]	; (8006c38 <HAL_ADC_ConfigChannel+0x240>)
 8006bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfc:	0c9a      	lsrs	r2, r3, #18
 8006bfe:	4613      	mov	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006c08:	e002      	b.n	8006c10 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1f9      	bne.n	8006c0a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	40012300 	.word	0x40012300
 8006c30:	40012000 	.word	0x40012000
 8006c34:	20001324 	.word	0x20001324
 8006c38:	431bde83 	.word	0x431bde83

08006c3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c44:	4b79      	ldr	r3, [pc, #484]	; (8006e2c <ADC_Init+0x1f0>)
 8006c46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6859      	ldr	r1, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	021a      	lsls	r2, r3, #8
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006c94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6859      	ldr	r1, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6899      	ldr	r1, [r3, #8]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68da      	ldr	r2, [r3, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cce:	4a58      	ldr	r2, [pc, #352]	; (8006e30 <ADC_Init+0x1f4>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d022      	beq.n	8006d1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689a      	ldr	r2, [r3, #8]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ce2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6899      	ldr	r1, [r3, #8]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6899      	ldr	r1, [r3, #8]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	609a      	str	r2, [r3, #8]
 8006d18:	e00f      	b.n	8006d3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0202 	bic.w	r2, r2, #2
 8006d48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6899      	ldr	r1, [r3, #8]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7e1b      	ldrb	r3, [r3, #24]
 8006d54:	005a      	lsls	r2, r3, #1
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01b      	beq.n	8006da0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006d86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6859      	ldr	r1, [r3, #4]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	3b01      	subs	r3, #1
 8006d94:	035a      	lsls	r2, r3, #13
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	605a      	str	r2, [r3, #4]
 8006d9e:	e007      	b.n	8006db0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	051a      	lsls	r2, r3, #20
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006de4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6899      	ldr	r1, [r3, #8]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006df2:	025a      	lsls	r2, r3, #9
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6899      	ldr	r1, [r3, #8]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	029a      	lsls	r2, r3, #10
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	609a      	str	r2, [r3, #8]
}
 8006e20:	bf00      	nop
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	40012300 	.word	0x40012300
 8006e30:	0f000001 	.word	0x0f000001

08006e34 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e40:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d13c      	bne.n	8006ec8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d12b      	bne.n	8006ec0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d127      	bne.n	8006ec0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e76:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d006      	beq.n	8006e8c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d119      	bne.n	8006ec0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 0220 	bic.w	r2, r2, #32
 8006e9a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d105      	bne.n	8006ec0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	f043 0201 	orr.w	r2, r3, #1
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f7ff fd7b 	bl	80069bc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006ec6:	e00e      	b.n	8006ee6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f7ff fd85 	bl	80069e4 <HAL_ADC_ErrorCallback>
}
 8006eda:	e004      	b.n	8006ee6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	4798      	blx	r3
}
 8006ee6:	bf00      	nop
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f7ff fd67 	bl	80069d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f02:	bf00      	nop
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f16:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2240      	movs	r2, #64	; 0x40
 8006f1c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f22:	f043 0204 	orr.w	r2, r3, #4
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7ff fd5a 	bl	80069e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f30:	bf00      	nop
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f48:	4b0c      	ldr	r3, [pc, #48]	; (8006f7c <__NVIC_SetPriorityGrouping+0x44>)
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f54:	4013      	ands	r3, r2
 8006f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f6a:	4a04      	ldr	r2, [pc, #16]	; (8006f7c <__NVIC_SetPriorityGrouping+0x44>)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	60d3      	str	r3, [r2, #12]
}
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	e000ed00 	.word	0xe000ed00

08006f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f80:	b480      	push	{r7}
 8006f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f84:	4b04      	ldr	r3, [pc, #16]	; (8006f98 <__NVIC_GetPriorityGrouping+0x18>)
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	0a1b      	lsrs	r3, r3, #8
 8006f8a:	f003 0307 	and.w	r3, r3, #7
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	e000ed00 	.word	0xe000ed00

08006f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	db0b      	blt.n	8006fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	f003 021f 	and.w	r2, r3, #31
 8006fb4:	4907      	ldr	r1, [pc, #28]	; (8006fd4 <__NVIC_EnableIRQ+0x38>)
 8006fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fba:	095b      	lsrs	r3, r3, #5
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8006fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006fc6:	bf00      	nop
 8006fc8:	370c      	adds	r7, #12
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	e000e100 	.word	0xe000e100

08006fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	6039      	str	r1, [r7, #0]
 8006fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	db0a      	blt.n	8007002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	490c      	ldr	r1, [pc, #48]	; (8007024 <__NVIC_SetPriority+0x4c>)
 8006ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ff6:	0112      	lsls	r2, r2, #4
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007000:	e00a      	b.n	8007018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	b2da      	uxtb	r2, r3
 8007006:	4908      	ldr	r1, [pc, #32]	; (8007028 <__NVIC_SetPriority+0x50>)
 8007008:	79fb      	ldrb	r3, [r7, #7]
 800700a:	f003 030f 	and.w	r3, r3, #15
 800700e:	3b04      	subs	r3, #4
 8007010:	0112      	lsls	r2, r2, #4
 8007012:	b2d2      	uxtb	r2, r2
 8007014:	440b      	add	r3, r1
 8007016:	761a      	strb	r2, [r3, #24]
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	e000e100 	.word	0xe000e100
 8007028:	e000ed00 	.word	0xe000ed00

0800702c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800702c:	b480      	push	{r7}
 800702e:	b089      	sub	sp, #36	; 0x24
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	f1c3 0307 	rsb	r3, r3, #7
 8007046:	2b04      	cmp	r3, #4
 8007048:	bf28      	it	cs
 800704a:	2304      	movcs	r3, #4
 800704c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	3304      	adds	r3, #4
 8007052:	2b06      	cmp	r3, #6
 8007054:	d902      	bls.n	800705c <NVIC_EncodePriority+0x30>
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	3b03      	subs	r3, #3
 800705a:	e000      	b.n	800705e <NVIC_EncodePriority+0x32>
 800705c:	2300      	movs	r3, #0
 800705e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007060:	f04f 32ff 	mov.w	r2, #4294967295
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	fa02 f303 	lsl.w	r3, r2, r3
 800706a:	43da      	mvns	r2, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	401a      	ands	r2, r3
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007074:	f04f 31ff 	mov.w	r1, #4294967295
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	fa01 f303 	lsl.w	r3, r1, r3
 800707e:	43d9      	mvns	r1, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007084:	4313      	orrs	r3, r2
         );
}
 8007086:	4618      	mov	r0, r3
 8007088:	3724      	adds	r7, #36	; 0x24
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
	...

08007094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3b01      	subs	r3, #1
 80070a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070a4:	d301      	bcc.n	80070aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80070a6:	2301      	movs	r3, #1
 80070a8:	e00f      	b.n	80070ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070aa:	4a0a      	ldr	r2, [pc, #40]	; (80070d4 <SysTick_Config+0x40>)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070b2:	210f      	movs	r1, #15
 80070b4:	f04f 30ff 	mov.w	r0, #4294967295
 80070b8:	f7ff ff8e 	bl	8006fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070bc:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <SysTick_Config+0x40>)
 80070be:	2200      	movs	r2, #0
 80070c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070c2:	4b04      	ldr	r3, [pc, #16]	; (80070d4 <SysTick_Config+0x40>)
 80070c4:	2207      	movs	r2, #7
 80070c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	e000e010 	.word	0xe000e010

080070d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff ff29 	bl	8006f38 <__NVIC_SetPriorityGrouping>
}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b086      	sub	sp, #24
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	4603      	mov	r3, r0
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	607a      	str	r2, [r7, #4]
 80070fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007100:	f7ff ff3e 	bl	8006f80 <__NVIC_GetPriorityGrouping>
 8007104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	68b9      	ldr	r1, [r7, #8]
 800710a:	6978      	ldr	r0, [r7, #20]
 800710c:	f7ff ff8e 	bl	800702c <NVIC_EncodePriority>
 8007110:	4602      	mov	r2, r0
 8007112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007116:	4611      	mov	r1, r2
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff ff5d 	bl	8006fd8 <__NVIC_SetPriority>
}
 800711e:	bf00      	nop
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b082      	sub	sp, #8
 800712a:	af00      	add	r7, sp, #0
 800712c:	4603      	mov	r3, r0
 800712e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff ff31 	bl	8006f9c <__NVIC_EnableIRQ>
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b082      	sub	sp, #8
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff ffa2 	bl	8007094 <SysTick_Config>
 8007150:	4603      	mov	r3, r0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007168:	f7ff fac8 	bl	80066fc <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e099      	b.n	80072ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0201 	bic.w	r2, r2, #1
 8007196:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007198:	e00f      	b.n	80071ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800719a:	f7ff faaf 	bl	80066fc <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b05      	cmp	r3, #5
 80071a6:	d908      	bls.n	80071ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2203      	movs	r2, #3
 80071b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e078      	b.n	80072ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e8      	bne.n	800719a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	4b38      	ldr	r3, [pc, #224]	; (80072b4 <HAL_DMA_Init+0x158>)
 80071d4:	4013      	ands	r3, r2
 80071d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80071e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	4313      	orrs	r3, r2
 800720a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	2b04      	cmp	r3, #4
 8007212:	d107      	bne.n	8007224 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721c:	4313      	orrs	r3, r2
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f023 0307 	bic.w	r3, r3, #7
 800723a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	4313      	orrs	r3, r2
 8007244:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	2b04      	cmp	r3, #4
 800724c:	d117      	bne.n	800727e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	4313      	orrs	r3, r2
 8007256:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00e      	beq.n	800727e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fb01 	bl	8007868 <DMA_CheckFifoParam>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d008      	beq.n	800727e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2240      	movs	r2, #64	; 0x40
 8007270:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800727a:	2301      	movs	r3, #1
 800727c:	e016      	b.n	80072ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fab8 	bl	80077fc <DMA_CalcBaseAndBitshift>
 800728c:	4603      	mov	r3, r0
 800728e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007294:	223f      	movs	r2, #63	; 0x3f
 8007296:	409a      	lsls	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	f010803f 	.word	0xf010803f

080072b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <HAL_DMA_Start_IT+0x26>
 80072da:	2302      	movs	r3, #2
 80072dc:	e040      	b.n	8007360 <HAL_DMA_Start_IT+0xa8>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d12f      	bne.n	8007352 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2202      	movs	r2, #2
 80072f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	68b9      	ldr	r1, [r7, #8]
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f000 fa4a 	bl	80077a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007310:	223f      	movs	r2, #63	; 0x3f
 8007312:	409a      	lsls	r2, r3
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0216 	orr.w	r2, r2, #22
 8007326:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d007      	beq.n	8007340 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0208 	orr.w	r2, r2, #8
 800733e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0201 	orr.w	r2, r2, #1
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	e005      	b.n	800735e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800735a:	2302      	movs	r3, #2
 800735c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800735e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007374:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007376:	f7ff f9c1 	bl	80066fc <HAL_GetTick>
 800737a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d008      	beq.n	800739a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2280      	movs	r2, #128	; 0x80
 800738c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e052      	b.n	8007440 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0216 	bic.w	r2, r2, #22
 80073a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	695a      	ldr	r2, [r3, #20]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d103      	bne.n	80073ca <HAL_DMA_Abort+0x62>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d007      	beq.n	80073da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f022 0208 	bic.w	r2, r2, #8
 80073d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0201 	bic.w	r2, r2, #1
 80073e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073ea:	e013      	b.n	8007414 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073ec:	f7ff f986 	bl	80066fc <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b05      	cmp	r3, #5
 80073f8:	d90c      	bls.n	8007414 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2220      	movs	r2, #32
 80073fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2203      	movs	r2, #3
 8007404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e015      	b.n	8007440 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e4      	bne.n	80073ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007426:	223f      	movs	r2, #63	; 0x3f
 8007428:	409a      	lsls	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b02      	cmp	r3, #2
 800745a:	d004      	beq.n	8007466 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2280      	movs	r2, #128	; 0x80
 8007460:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e00c      	b.n	8007480 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2205      	movs	r2, #5
 800746a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0201 	bic.w	r2, r2, #1
 800747c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007498:	4b8e      	ldr	r3, [pc, #568]	; (80076d4 <HAL_DMA_IRQHandler+0x248>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a8e      	ldr	r2, [pc, #568]	; (80076d8 <HAL_DMA_IRQHandler+0x24c>)
 800749e:	fba2 2303 	umull	r2, r3, r2, r3
 80074a2:	0a9b      	lsrs	r3, r3, #10
 80074a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b6:	2208      	movs	r2, #8
 80074b8:	409a      	lsls	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4013      	ands	r3, r2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d01a      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0304 	and.w	r3, r3, #4
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d013      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f022 0204 	bic.w	r2, r2, #4
 80074de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e4:	2208      	movs	r2, #8
 80074e6:	409a      	lsls	r2, r3
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f0:	f043 0201 	orr.w	r2, r3, #1
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fc:	2201      	movs	r2, #1
 80074fe:	409a      	lsls	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4013      	ands	r3, r2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d012      	beq.n	800752e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00b      	beq.n	800752e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800751a:	2201      	movs	r2, #1
 800751c:	409a      	lsls	r2, r3
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007526:	f043 0202 	orr.w	r2, r3, #2
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007532:	2204      	movs	r2, #4
 8007534:	409a      	lsls	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	4013      	ands	r3, r2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d012      	beq.n	8007564 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00b      	beq.n	8007564 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007550:	2204      	movs	r2, #4
 8007552:	409a      	lsls	r2, r3
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755c:	f043 0204 	orr.w	r2, r3, #4
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007568:	2210      	movs	r2, #16
 800756a:	409a      	lsls	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4013      	ands	r3, r2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d043      	beq.n	80075fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0308 	and.w	r3, r3, #8
 800757e:	2b00      	cmp	r3, #0
 8007580:	d03c      	beq.n	80075fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007586:	2210      	movs	r2, #16
 8007588:	409a      	lsls	r2, r3
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d018      	beq.n	80075ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d108      	bne.n	80075bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d024      	beq.n	80075fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	4798      	blx	r3
 80075ba:	e01f      	b.n	80075fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d01b      	beq.n	80075fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	4798      	blx	r3
 80075cc:	e016      	b.n	80075fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d107      	bne.n	80075ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 0208 	bic.w	r2, r2, #8
 80075ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007600:	2220      	movs	r2, #32
 8007602:	409a      	lsls	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4013      	ands	r3, r2
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 808f 	beq.w	800772c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0310 	and.w	r3, r3, #16
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 8087 	beq.w	800772c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007622:	2220      	movs	r2, #32
 8007624:	409a      	lsls	r2, r3
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b05      	cmp	r3, #5
 8007634:	d136      	bne.n	80076a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 0216 	bic.w	r2, r2, #22
 8007644:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	695a      	ldr	r2, [r3, #20]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007654:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	2b00      	cmp	r3, #0
 800765c:	d103      	bne.n	8007666 <HAL_DMA_IRQHandler+0x1da>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007662:	2b00      	cmp	r3, #0
 8007664:	d007      	beq.n	8007676 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 0208 	bic.w	r2, r2, #8
 8007674:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800767a:	223f      	movs	r2, #63	; 0x3f
 800767c:	409a      	lsls	r2, r3
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007696:	2b00      	cmp	r3, #0
 8007698:	d07e      	beq.n	8007798 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	4798      	blx	r3
        }
        return;
 80076a2:	e079      	b.n	8007798 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d01d      	beq.n	80076ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10d      	bne.n	80076dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d031      	beq.n	800772c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	4798      	blx	r3
 80076d0:	e02c      	b.n	800772c <HAL_DMA_IRQHandler+0x2a0>
 80076d2:	bf00      	nop
 80076d4:	20001324 	.word	0x20001324
 80076d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d023      	beq.n	800772c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	4798      	blx	r3
 80076ec:	e01e      	b.n	800772c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10f      	bne.n	800771c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 0210 	bic.w	r2, r2, #16
 800770a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007730:	2b00      	cmp	r3, #0
 8007732:	d032      	beq.n	800779a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d022      	beq.n	8007786 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2205      	movs	r2, #5
 8007744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 0201 	bic.w	r2, r2, #1
 8007756:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	3301      	adds	r3, #1
 800775c:	60bb      	str	r3, [r7, #8]
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	429a      	cmp	r2, r3
 8007762:	d307      	bcc.n	8007774 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1f2      	bne.n	8007758 <HAL_DMA_IRQHandler+0x2cc>
 8007772:	e000      	b.n	8007776 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007774:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800778a:	2b00      	cmp	r3, #0
 800778c:	d005      	beq.n	800779a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	4798      	blx	r3
 8007796:	e000      	b.n	800779a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007798:	bf00      	nop
    }
  }
}
 800779a:	3718      	adds	r7, #24
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
 80077ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80077bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	2b40      	cmp	r3, #64	; 0x40
 80077cc:	d108      	bne.n	80077e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80077de:	e007      	b.n	80077f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	60da      	str	r2, [r3, #12]
}
 80077f0:	bf00      	nop
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	b2db      	uxtb	r3, r3
 800780a:	3b10      	subs	r3, #16
 800780c:	4a14      	ldr	r2, [pc, #80]	; (8007860 <DMA_CalcBaseAndBitshift+0x64>)
 800780e:	fba2 2303 	umull	r2, r3, r2, r3
 8007812:	091b      	lsrs	r3, r3, #4
 8007814:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007816:	4a13      	ldr	r2, [pc, #76]	; (8007864 <DMA_CalcBaseAndBitshift+0x68>)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4413      	add	r3, r2
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b03      	cmp	r3, #3
 8007828:	d909      	bls.n	800783e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007832:	f023 0303 	bic.w	r3, r3, #3
 8007836:	1d1a      	adds	r2, r3, #4
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	659a      	str	r2, [r3, #88]	; 0x58
 800783c:	e007      	b.n	800784e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007846:	f023 0303 	bic.w	r3, r3, #3
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	aaaaaaab 	.word	0xaaaaaaab
 8007864:	080104cc 	.word	0x080104cc

08007868 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007878:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d11f      	bne.n	80078c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2b03      	cmp	r3, #3
 8007886:	d856      	bhi.n	8007936 <DMA_CheckFifoParam+0xce>
 8007888:	a201      	add	r2, pc, #4	; (adr r2, 8007890 <DMA_CheckFifoParam+0x28>)
 800788a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788e:	bf00      	nop
 8007890:	080078a1 	.word	0x080078a1
 8007894:	080078b3 	.word	0x080078b3
 8007898:	080078a1 	.word	0x080078a1
 800789c:	08007937 	.word	0x08007937
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d046      	beq.n	800793a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078b0:	e043      	b.n	800793a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80078ba:	d140      	bne.n	800793e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078c0:	e03d      	b.n	800793e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ca:	d121      	bne.n	8007910 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d837      	bhi.n	8007942 <DMA_CheckFifoParam+0xda>
 80078d2:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <DMA_CheckFifoParam+0x70>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078e9 	.word	0x080078e9
 80078dc:	080078ef 	.word	0x080078ef
 80078e0:	080078e9 	.word	0x080078e9
 80078e4:	08007901 	.word	0x08007901
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	73fb      	strb	r3, [r7, #15]
      break;
 80078ec:	e030      	b.n	8007950 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d025      	beq.n	8007946 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078fe:	e022      	b.n	8007946 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007908:	d11f      	bne.n	800794a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800790e:	e01c      	b.n	800794a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b02      	cmp	r3, #2
 8007914:	d903      	bls.n	800791e <DMA_CheckFifoParam+0xb6>
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2b03      	cmp	r3, #3
 800791a:	d003      	beq.n	8007924 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800791c:	e018      	b.n	8007950 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	73fb      	strb	r3, [r7, #15]
      break;
 8007922:	e015      	b.n	8007950 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00e      	beq.n	800794e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	73fb      	strb	r3, [r7, #15]
      break;
 8007934:	e00b      	b.n	800794e <DMA_CheckFifoParam+0xe6>
      break;
 8007936:	bf00      	nop
 8007938:	e00a      	b.n	8007950 <DMA_CheckFifoParam+0xe8>
      break;
 800793a:	bf00      	nop
 800793c:	e008      	b.n	8007950 <DMA_CheckFifoParam+0xe8>
      break;
 800793e:	bf00      	nop
 8007940:	e006      	b.n	8007950 <DMA_CheckFifoParam+0xe8>
      break;
 8007942:	bf00      	nop
 8007944:	e004      	b.n	8007950 <DMA_CheckFifoParam+0xe8>
      break;
 8007946:	bf00      	nop
 8007948:	e002      	b.n	8007950 <DMA_CheckFifoParam+0xe8>
      break;   
 800794a:	bf00      	nop
 800794c:	e000      	b.n	8007950 <DMA_CheckFifoParam+0xe8>
      break;
 800794e:	bf00      	nop
    }
  } 
  
  return status; 
 8007950:	7bfb      	ldrb	r3, [r7, #15]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop

08007960 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007972:	4b23      	ldr	r3, [pc, #140]	; (8007a00 <HAL_FLASH_Program+0xa0>)
 8007974:	7e1b      	ldrb	r3, [r3, #24]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d101      	bne.n	800797e <HAL_FLASH_Program+0x1e>
 800797a:	2302      	movs	r3, #2
 800797c:	e03b      	b.n	80079f6 <HAL_FLASH_Program+0x96>
 800797e:	4b20      	ldr	r3, [pc, #128]	; (8007a00 <HAL_FLASH_Program+0xa0>)
 8007980:	2201      	movs	r2, #1
 8007982:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007984:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007988:	f000 f860 	bl	8007a4c <FLASH_WaitForLastOperation>
 800798c:	4603      	mov	r3, r0
 800798e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8007990:	7dfb      	ldrb	r3, [r7, #23]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d12b      	bne.n	80079ee <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d105      	bne.n	80079a8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800799c:	783b      	ldrb	r3, [r7, #0]
 800799e:	4619      	mov	r1, r3
 80079a0:	68b8      	ldr	r0, [r7, #8]
 80079a2:	f000 f90b 	bl	8007bbc <FLASH_Program_Byte>
 80079a6:	e016      	b.n	80079d6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d105      	bne.n	80079ba <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80079ae:	883b      	ldrh	r3, [r7, #0]
 80079b0:	4619      	mov	r1, r3
 80079b2:	68b8      	ldr	r0, [r7, #8]
 80079b4:	f000 f8de 	bl	8007b74 <FLASH_Program_HalfWord>
 80079b8:	e00d      	b.n	80079d6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d105      	bne.n	80079cc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	4619      	mov	r1, r3
 80079c4:	68b8      	ldr	r0, [r7, #8]
 80079c6:	f000 f8b3 	bl	8007b30 <FLASH_Program_Word>
 80079ca:	e004      	b.n	80079d6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80079cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079d0:	68b8      	ldr	r0, [r7, #8]
 80079d2:	f000 f87b 	bl	8007acc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80079d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80079da:	f000 f837 	bl	8007a4c <FLASH_WaitForLastOperation>
 80079de:	4603      	mov	r3, r0
 80079e0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80079e2:	4b08      	ldr	r3, [pc, #32]	; (8007a04 <HAL_FLASH_Program+0xa4>)
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	4a07      	ldr	r2, [pc, #28]	; (8007a04 <HAL_FLASH_Program+0xa4>)
 80079e8:	f023 0301 	bic.w	r3, r3, #1
 80079ec:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80079ee:	4b04      	ldr	r3, [pc, #16]	; (8007a00 <HAL_FLASH_Program+0xa0>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20002104 	.word	0x20002104
 8007a04:	40023c00 	.word	0x40023c00

08007a08 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007a12:	4b0b      	ldr	r3, [pc, #44]	; (8007a40 <HAL_FLASH_Unlock+0x38>)
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	da0b      	bge.n	8007a32 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007a1a:	4b09      	ldr	r3, [pc, #36]	; (8007a40 <HAL_FLASH_Unlock+0x38>)
 8007a1c:	4a09      	ldr	r2, [pc, #36]	; (8007a44 <HAL_FLASH_Unlock+0x3c>)
 8007a1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007a20:	4b07      	ldr	r3, [pc, #28]	; (8007a40 <HAL_FLASH_Unlock+0x38>)
 8007a22:	4a09      	ldr	r2, [pc, #36]	; (8007a48 <HAL_FLASH_Unlock+0x40>)
 8007a24:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007a26:	4b06      	ldr	r3, [pc, #24]	; (8007a40 <HAL_FLASH_Unlock+0x38>)
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	da01      	bge.n	8007a32 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007a32:	79fb      	ldrb	r3, [r7, #7]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	40023c00 	.word	0x40023c00
 8007a44:	45670123 	.word	0x45670123
 8007a48:	cdef89ab 	.word	0xcdef89ab

08007a4c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007a58:	4b1a      	ldr	r3, [pc, #104]	; (8007ac4 <FLASH_WaitForLastOperation+0x78>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007a5e:	f7fe fe4d 	bl	80066fc <HAL_GetTick>
 8007a62:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007a64:	e010      	b.n	8007a88 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6c:	d00c      	beq.n	8007a88 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d007      	beq.n	8007a84 <FLASH_WaitForLastOperation+0x38>
 8007a74:	f7fe fe42 	bl	80066fc <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d201      	bcs.n	8007a88 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e019      	b.n	8007abc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007a88:	4b0f      	ldr	r3, [pc, #60]	; (8007ac8 <FLASH_WaitForLastOperation+0x7c>)
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e8      	bne.n	8007a66 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007a94:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <FLASH_WaitForLastOperation+0x7c>)
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007aa0:	4b09      	ldr	r3, [pc, #36]	; (8007ac8 <FLASH_WaitForLastOperation+0x7c>)
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007aa6:	4b08      	ldr	r3, [pc, #32]	; (8007ac8 <FLASH_WaitForLastOperation+0x7c>)
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007ab2:	f000 f8a5 	bl	8007c00 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e000      	b.n	8007abc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
  
}  
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	20002104 	.word	0x20002104
 8007ac8:	40023c00 	.word	0x40023c00

08007acc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007ad8:	4b14      	ldr	r3, [pc, #80]	; (8007b2c <FLASH_Program_DoubleWord+0x60>)
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	4a13      	ldr	r2, [pc, #76]	; (8007b2c <FLASH_Program_DoubleWord+0x60>)
 8007ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007ae4:	4b11      	ldr	r3, [pc, #68]	; (8007b2c <FLASH_Program_DoubleWord+0x60>)
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	4a10      	ldr	r2, [pc, #64]	; (8007b2c <FLASH_Program_DoubleWord+0x60>)
 8007aea:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007aee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007af0:	4b0e      	ldr	r3, [pc, #56]	; (8007b2c <FLASH_Program_DoubleWord+0x60>)
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	4a0d      	ldr	r2, [pc, #52]	; (8007b2c <FLASH_Program_DoubleWord+0x60>)
 8007af6:	f043 0301 	orr.w	r3, r3, #1
 8007afa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8007b02:	f3bf 8f6f 	isb	sy
}
 8007b06:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007b08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b0c:	f04f 0200 	mov.w	r2, #0
 8007b10:	f04f 0300 	mov.w	r3, #0
 8007b14:	000a      	movs	r2, r1
 8007b16:	2300      	movs	r3, #0
 8007b18:	68f9      	ldr	r1, [r7, #12]
 8007b1a:	3104      	adds	r1, #4
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	600b      	str	r3, [r1, #0]
}
 8007b20:	bf00      	nop
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	40023c00 	.word	0x40023c00

08007b30 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007b3a:	4b0d      	ldr	r3, [pc, #52]	; (8007b70 <FLASH_Program_Word+0x40>)
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	4a0c      	ldr	r2, [pc, #48]	; (8007b70 <FLASH_Program_Word+0x40>)
 8007b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007b46:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <FLASH_Program_Word+0x40>)
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	4a09      	ldr	r2, [pc, #36]	; (8007b70 <FLASH_Program_Word+0x40>)
 8007b4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b50:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007b52:	4b07      	ldr	r3, [pc, #28]	; (8007b70 <FLASH_Program_Word+0x40>)
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	4a06      	ldr	r2, [pc, #24]	; (8007b70 <FLASH_Program_Word+0x40>)
 8007b58:	f043 0301 	orr.w	r3, r3, #1
 8007b5c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	601a      	str	r2, [r3, #0]
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	40023c00 	.word	0x40023c00

08007b74 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007b80:	4b0d      	ldr	r3, [pc, #52]	; (8007bb8 <FLASH_Program_HalfWord+0x44>)
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	4a0c      	ldr	r2, [pc, #48]	; (8007bb8 <FLASH_Program_HalfWord+0x44>)
 8007b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <FLASH_Program_HalfWord+0x44>)
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	4a09      	ldr	r2, [pc, #36]	; (8007bb8 <FLASH_Program_HalfWord+0x44>)
 8007b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007b98:	4b07      	ldr	r3, [pc, #28]	; (8007bb8 <FLASH_Program_HalfWord+0x44>)
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	4a06      	ldr	r2, [pc, #24]	; (8007bb8 <FLASH_Program_HalfWord+0x44>)
 8007b9e:	f043 0301 	orr.w	r3, r3, #1
 8007ba2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	887a      	ldrh	r2, [r7, #2]
 8007ba8:	801a      	strh	r2, [r3, #0]
}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	40023c00 	.word	0x40023c00

08007bbc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007bc8:	4b0c      	ldr	r3, [pc, #48]	; (8007bfc <FLASH_Program_Byte+0x40>)
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	4a0b      	ldr	r2, [pc, #44]	; (8007bfc <FLASH_Program_Byte+0x40>)
 8007bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007bd4:	4b09      	ldr	r3, [pc, #36]	; (8007bfc <FLASH_Program_Byte+0x40>)
 8007bd6:	4a09      	ldr	r2, [pc, #36]	; (8007bfc <FLASH_Program_Byte+0x40>)
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007bdc:	4b07      	ldr	r3, [pc, #28]	; (8007bfc <FLASH_Program_Byte+0x40>)
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	4a06      	ldr	r2, [pc, #24]	; (8007bfc <FLASH_Program_Byte+0x40>)
 8007be2:	f043 0301 	orr.w	r3, r3, #1
 8007be6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	78fa      	ldrb	r2, [r7, #3]
 8007bec:	701a      	strb	r2, [r3, #0]
}
 8007bee:	bf00      	nop
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	40023c00 	.word	0x40023c00

08007c00 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007c00:	b480      	push	{r7}
 8007c02:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007c04:	4b27      	ldr	r3, [pc, #156]	; (8007ca4 <FLASH_SetErrorCode+0xa4>)
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d008      	beq.n	8007c22 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007c10:	4b25      	ldr	r3, [pc, #148]	; (8007ca8 <FLASH_SetErrorCode+0xa8>)
 8007c12:	69db      	ldr	r3, [r3, #28]
 8007c14:	f043 0310 	orr.w	r3, r3, #16
 8007c18:	4a23      	ldr	r2, [pc, #140]	; (8007ca8 <FLASH_SetErrorCode+0xa8>)
 8007c1a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007c1c:	4b21      	ldr	r3, [pc, #132]	; (8007ca4 <FLASH_SetErrorCode+0xa4>)
 8007c1e:	2210      	movs	r2, #16
 8007c20:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007c22:	4b20      	ldr	r3, [pc, #128]	; (8007ca4 <FLASH_SetErrorCode+0xa4>)
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f003 0320 	and.w	r3, r3, #32
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d008      	beq.n	8007c40 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007c2e:	4b1e      	ldr	r3, [pc, #120]	; (8007ca8 <FLASH_SetErrorCode+0xa8>)
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	f043 0308 	orr.w	r3, r3, #8
 8007c36:	4a1c      	ldr	r2, [pc, #112]	; (8007ca8 <FLASH_SetErrorCode+0xa8>)
 8007c38:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007c3a:	4b1a      	ldr	r3, [pc, #104]	; (8007ca4 <FLASH_SetErrorCode+0xa4>)
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007c40:	4b18      	ldr	r3, [pc, #96]	; (8007ca4 <FLASH_SetErrorCode+0xa4>)
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d008      	beq.n	8007c5e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007c4c:	4b16      	ldr	r3, [pc, #88]	; (8007ca8 <FLASH_SetErrorCode+0xa8>)
 8007c4e:	69db      	ldr	r3, [r3, #28]
 8007c50:	f043 0304 	orr.w	r3, r3, #4
 8007c54:	4a14      	ldr	r2, [pc, #80]	; (8007ca8 <FLASH_SetErrorCode+0xa8>)
 8007c56:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007c58:	4b12      	ldr	r3, [pc, #72]	; (8007ca4 <FLASH_SetErrorCode+0xa4>)
 8007c5a:	2240      	movs	r2, #64	; 0x40
 8007c5c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007c5e:	4b11      	ldr	r3, [pc, #68]	; (8007ca4 <FLASH_SetErrorCode+0xa4>)
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d008      	beq.n	8007c7c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007c6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ca8 <FLASH_SetErrorCode+0xa8>)
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	f043 0302 	orr.w	r3, r3, #2
 8007c72:	4a0d      	ldr	r2, [pc, #52]	; (8007ca8 <FLASH_SetErrorCode+0xa8>)
 8007c74:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007c76:	4b0b      	ldr	r3, [pc, #44]	; (8007ca4 <FLASH_SetErrorCode+0xa4>)
 8007c78:	2280      	movs	r2, #128	; 0x80
 8007c7a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007c7c:	4b09      	ldr	r3, [pc, #36]	; (8007ca4 <FLASH_SetErrorCode+0xa4>)
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d008      	beq.n	8007c9a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007c88:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <FLASH_SetErrorCode+0xa8>)
 8007c8a:	69db      	ldr	r3, [r3, #28]
 8007c8c:	f043 0320 	orr.w	r3, r3, #32
 8007c90:	4a05      	ldr	r2, [pc, #20]	; (8007ca8 <FLASH_SetErrorCode+0xa8>)
 8007c92:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007c94:	4b03      	ldr	r3, [pc, #12]	; (8007ca4 <FLASH_SetErrorCode+0xa4>)
 8007c96:	2202      	movs	r2, #2
 8007c98:	60da      	str	r2, [r3, #12]
  }
}
 8007c9a:	bf00      	nop
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	40023c00 	.word	0x40023c00
 8007ca8:	20002104 	.word	0x20002104

08007cac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007cbe:	4b31      	ldr	r3, [pc, #196]	; (8007d84 <HAL_FLASHEx_Erase+0xd8>)
 8007cc0:	7e1b      	ldrb	r3, [r3, #24]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d101      	bne.n	8007cca <HAL_FLASHEx_Erase+0x1e>
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	e058      	b.n	8007d7c <HAL_FLASHEx_Erase+0xd0>
 8007cca:	4b2e      	ldr	r3, [pc, #184]	; (8007d84 <HAL_FLASHEx_Erase+0xd8>)
 8007ccc:	2201      	movs	r2, #1
 8007cce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007cd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007cd4:	f7ff feba 	bl	8007a4c <FLASH_WaitForLastOperation>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d148      	bne.n	8007d74 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d115      	bne.n	8007d1e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	4610      	mov	r0, r2
 8007d00:	f000 f844 	bl	8007d8c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007d08:	f7ff fea0 	bl	8007a4c <FLASH_WaitForLastOperation>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007d10:	4b1d      	ldr	r3, [pc, #116]	; (8007d88 <HAL_FLASHEx_Erase+0xdc>)
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	4a1c      	ldr	r2, [pc, #112]	; (8007d88 <HAL_FLASHEx_Erase+0xdc>)
 8007d16:	f023 0304 	bic.w	r3, r3, #4
 8007d1a:	6113      	str	r3, [r2, #16]
 8007d1c:	e028      	b.n	8007d70 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	60bb      	str	r3, [r7, #8]
 8007d24:	e01c      	b.n	8007d60 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	68b8      	ldr	r0, [r7, #8]
 8007d30:	f000 f850 	bl	8007dd4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007d38:	f7ff fe88 	bl	8007a4c <FLASH_WaitForLastOperation>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007d40:	4b11      	ldr	r3, [pc, #68]	; (8007d88 <HAL_FLASHEx_Erase+0xdc>)
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	4a10      	ldr	r2, [pc, #64]	; (8007d88 <HAL_FLASHEx_Erase+0xdc>)
 8007d46:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007d4a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	601a      	str	r2, [r3, #0]
          break;
 8007d58:	e00a      	b.n	8007d70 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	60bb      	str	r3, [r7, #8]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	68da      	ldr	r2, [r3, #12]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	4413      	add	r3, r2
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d3da      	bcc.n	8007d26 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007d70:	f000 f878 	bl	8007e64 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007d74:	4b03      	ldr	r3, [pc, #12]	; (8007d84 <HAL_FLASHEx_Erase+0xd8>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	761a      	strb	r2, [r3, #24]

  return status;
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	20002104 	.word	0x20002104
 8007d88:	40023c00 	.word	0x40023c00

08007d8c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	6039      	str	r1, [r7, #0]
 8007d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007d98:	4b0d      	ldr	r3, [pc, #52]	; (8007dd0 <FLASH_MassErase+0x44>)
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	4a0c      	ldr	r2, [pc, #48]	; (8007dd0 <FLASH_MassErase+0x44>)
 8007d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007da2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007da4:	4b0a      	ldr	r3, [pc, #40]	; (8007dd0 <FLASH_MassErase+0x44>)
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	4a09      	ldr	r2, [pc, #36]	; (8007dd0 <FLASH_MassErase+0x44>)
 8007daa:	f043 0304 	orr.w	r3, r3, #4
 8007dae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8007db0:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <FLASH_MassErase+0x44>)
 8007db2:	691a      	ldr	r2, [r3, #16]
 8007db4:	79fb      	ldrb	r3, [r7, #7]
 8007db6:	021b      	lsls	r3, r3, #8
 8007db8:	4313      	orrs	r3, r2
 8007dba:	4a05      	ldr	r2, [pc, #20]	; (8007dd0 <FLASH_MassErase+0x44>)
 8007dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dc0:	6113      	str	r3, [r2, #16]
}
 8007dc2:	bf00      	nop
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	40023c00 	.word	0x40023c00

08007dd4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007de0:	2300      	movs	r3, #0
 8007de2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007de4:	78fb      	ldrb	r3, [r7, #3]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d102      	bne.n	8007df0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
 8007dee:	e010      	b.n	8007e12 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007df0:	78fb      	ldrb	r3, [r7, #3]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d103      	bne.n	8007dfe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	e009      	b.n	8007e12 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007dfe:	78fb      	ldrb	r3, [r7, #3]
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d103      	bne.n	8007e0c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	e002      	b.n	8007e12 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007e0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007e10:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007e12:	4b13      	ldr	r3, [pc, #76]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	4a12      	ldr	r2, [pc, #72]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007e1e:	4b10      	ldr	r3, [pc, #64]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e20:	691a      	ldr	r2, [r3, #16]
 8007e22:	490f      	ldr	r1, [pc, #60]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007e2a:	4b0d      	ldr	r3, [pc, #52]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	4a0c      	ldr	r2, [pc, #48]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e30:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007e34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007e36:	4b0a      	ldr	r3, [pc, #40]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e38:	691a      	ldr	r2, [r3, #16]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	4a07      	ldr	r2, [pc, #28]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e42:	f043 0302 	orr.w	r3, r3, #2
 8007e46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007e48:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	4a04      	ldr	r2, [pc, #16]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e52:	6113      	str	r3, [r2, #16]
}
 8007e54:	bf00      	nop
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	40023c00 	.word	0x40023c00

08007e64 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8007e68:	4b20      	ldr	r3, [pc, #128]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d017      	beq.n	8007ea4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007e74:	4b1d      	ldr	r3, [pc, #116]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a1c      	ldr	r2, [pc, #112]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e7e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007e80:	4b1a      	ldr	r3, [pc, #104]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a19      	ldr	r2, [pc, #100]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	4b17      	ldr	r3, [pc, #92]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a16      	ldr	r2, [pc, #88]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e96:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007e98:	4b14      	ldr	r3, [pc, #80]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a13      	ldr	r2, [pc, #76]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ea2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007ea4:	4b11      	ldr	r3, [pc, #68]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d017      	beq.n	8007ee0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007eb0:	4b0e      	ldr	r3, [pc, #56]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a0d      	ldr	r2, [pc, #52]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007eb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007eba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007ebc:	4b0b      	ldr	r3, [pc, #44]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a0a      	ldr	r2, [pc, #40]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007ec2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	4b08      	ldr	r3, [pc, #32]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a07      	ldr	r2, [pc, #28]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007ece:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ed2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007ed4:	4b05      	ldr	r3, [pc, #20]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a04      	ldr	r2, [pc, #16]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ede:	6013      	str	r3, [r2, #0]
  }
}
 8007ee0:	bf00      	nop
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	40023c00 	.word	0x40023c00

08007ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b089      	sub	sp, #36	; 0x24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f06:	2300      	movs	r3, #0
 8007f08:	61fb      	str	r3, [r7, #28]
 8007f0a:	e16b      	b.n	80081e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	fa02 f303 	lsl.w	r3, r2, r3
 8007f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	f040 815a 	bne.w	80081de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d005      	beq.n	8007f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d130      	bne.n	8007fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	005b      	lsls	r3, r3, #1
 8007f4c:	2203      	movs	r2, #3
 8007f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f52:	43db      	mvns	r3, r3
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	4013      	ands	r3, r2
 8007f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	fa02 f303 	lsl.w	r3, r2, r3
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007f78:	2201      	movs	r2, #1
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f80:	43db      	mvns	r3, r3
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	4013      	ands	r3, r2
 8007f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	091b      	lsrs	r3, r3, #4
 8007f8e:	f003 0201 	and.w	r2, r3, #1
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	fa02 f303 	lsl.w	r3, r2, r3
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f003 0303 	and.w	r3, r3, #3
 8007fac:	2b03      	cmp	r3, #3
 8007fae:	d017      	beq.n	8007fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	2203      	movs	r2, #3
 8007fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc0:	43db      	mvns	r3, r3
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	005b      	lsls	r3, r3, #1
 8007fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd4:	69ba      	ldr	r2, [r7, #24]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f003 0303 	and.w	r3, r3, #3
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d123      	bne.n	8008034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	08da      	lsrs	r2, r3, #3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3208      	adds	r2, #8
 8007ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	f003 0307 	and.w	r3, r3, #7
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	220f      	movs	r2, #15
 8008004:	fa02 f303 	lsl.w	r3, r2, r3
 8008008:	43db      	mvns	r3, r3
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	4013      	ands	r3, r2
 800800e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	691a      	ldr	r2, [r3, #16]
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	fa02 f303 	lsl.w	r3, r2, r3
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	4313      	orrs	r3, r2
 8008024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	08da      	lsrs	r2, r3, #3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	3208      	adds	r2, #8
 800802e:	69b9      	ldr	r1, [r7, #24]
 8008030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	005b      	lsls	r3, r3, #1
 800803e:	2203      	movs	r2, #3
 8008040:	fa02 f303 	lsl.w	r3, r2, r3
 8008044:	43db      	mvns	r3, r3
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	4013      	ands	r3, r2
 800804a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f003 0203 	and.w	r2, r3, #3
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	fa02 f303 	lsl.w	r3, r2, r3
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	4313      	orrs	r3, r2
 8008060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 80b4 	beq.w	80081de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008076:	2300      	movs	r3, #0
 8008078:	60fb      	str	r3, [r7, #12]
 800807a:	4b60      	ldr	r3, [pc, #384]	; (80081fc <HAL_GPIO_Init+0x30c>)
 800807c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807e:	4a5f      	ldr	r2, [pc, #380]	; (80081fc <HAL_GPIO_Init+0x30c>)
 8008080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008084:	6453      	str	r3, [r2, #68]	; 0x44
 8008086:	4b5d      	ldr	r3, [pc, #372]	; (80081fc <HAL_GPIO_Init+0x30c>)
 8008088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008092:	4a5b      	ldr	r2, [pc, #364]	; (8008200 <HAL_GPIO_Init+0x310>)
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	089b      	lsrs	r3, r3, #2
 8008098:	3302      	adds	r3, #2
 800809a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800809e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	220f      	movs	r2, #15
 80080aa:	fa02 f303 	lsl.w	r3, r2, r3
 80080ae:	43db      	mvns	r3, r3
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	4013      	ands	r3, r2
 80080b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a52      	ldr	r2, [pc, #328]	; (8008204 <HAL_GPIO_Init+0x314>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d02b      	beq.n	8008116 <HAL_GPIO_Init+0x226>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a51      	ldr	r2, [pc, #324]	; (8008208 <HAL_GPIO_Init+0x318>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d025      	beq.n	8008112 <HAL_GPIO_Init+0x222>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a50      	ldr	r2, [pc, #320]	; (800820c <HAL_GPIO_Init+0x31c>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d01f      	beq.n	800810e <HAL_GPIO_Init+0x21e>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a4f      	ldr	r2, [pc, #316]	; (8008210 <HAL_GPIO_Init+0x320>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d019      	beq.n	800810a <HAL_GPIO_Init+0x21a>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a4e      	ldr	r2, [pc, #312]	; (8008214 <HAL_GPIO_Init+0x324>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d013      	beq.n	8008106 <HAL_GPIO_Init+0x216>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a4d      	ldr	r2, [pc, #308]	; (8008218 <HAL_GPIO_Init+0x328>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00d      	beq.n	8008102 <HAL_GPIO_Init+0x212>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a4c      	ldr	r2, [pc, #304]	; (800821c <HAL_GPIO_Init+0x32c>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d007      	beq.n	80080fe <HAL_GPIO_Init+0x20e>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a4b      	ldr	r2, [pc, #300]	; (8008220 <HAL_GPIO_Init+0x330>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d101      	bne.n	80080fa <HAL_GPIO_Init+0x20a>
 80080f6:	2307      	movs	r3, #7
 80080f8:	e00e      	b.n	8008118 <HAL_GPIO_Init+0x228>
 80080fa:	2308      	movs	r3, #8
 80080fc:	e00c      	b.n	8008118 <HAL_GPIO_Init+0x228>
 80080fe:	2306      	movs	r3, #6
 8008100:	e00a      	b.n	8008118 <HAL_GPIO_Init+0x228>
 8008102:	2305      	movs	r3, #5
 8008104:	e008      	b.n	8008118 <HAL_GPIO_Init+0x228>
 8008106:	2304      	movs	r3, #4
 8008108:	e006      	b.n	8008118 <HAL_GPIO_Init+0x228>
 800810a:	2303      	movs	r3, #3
 800810c:	e004      	b.n	8008118 <HAL_GPIO_Init+0x228>
 800810e:	2302      	movs	r3, #2
 8008110:	e002      	b.n	8008118 <HAL_GPIO_Init+0x228>
 8008112:	2301      	movs	r3, #1
 8008114:	e000      	b.n	8008118 <HAL_GPIO_Init+0x228>
 8008116:	2300      	movs	r3, #0
 8008118:	69fa      	ldr	r2, [r7, #28]
 800811a:	f002 0203 	and.w	r2, r2, #3
 800811e:	0092      	lsls	r2, r2, #2
 8008120:	4093      	lsls	r3, r2
 8008122:	69ba      	ldr	r2, [r7, #24]
 8008124:	4313      	orrs	r3, r2
 8008126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008128:	4935      	ldr	r1, [pc, #212]	; (8008200 <HAL_GPIO_Init+0x310>)
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	089b      	lsrs	r3, r3, #2
 800812e:	3302      	adds	r3, #2
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008136:	4b3b      	ldr	r3, [pc, #236]	; (8008224 <HAL_GPIO_Init+0x334>)
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	43db      	mvns	r3, r3
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	4013      	ands	r3, r2
 8008144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	4313      	orrs	r3, r2
 8008158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800815a:	4a32      	ldr	r2, [pc, #200]	; (8008224 <HAL_GPIO_Init+0x334>)
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008160:	4b30      	ldr	r3, [pc, #192]	; (8008224 <HAL_GPIO_Init+0x334>)
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	43db      	mvns	r3, r3
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	4013      	ands	r3, r2
 800816e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800817c:	69ba      	ldr	r2, [r7, #24]
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	4313      	orrs	r3, r2
 8008182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008184:	4a27      	ldr	r2, [pc, #156]	; (8008224 <HAL_GPIO_Init+0x334>)
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800818a:	4b26      	ldr	r3, [pc, #152]	; (8008224 <HAL_GPIO_Init+0x334>)
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	43db      	mvns	r3, r3
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	4013      	ands	r3, r2
 8008198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80081ae:	4a1d      	ldr	r2, [pc, #116]	; (8008224 <HAL_GPIO_Init+0x334>)
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80081b4:	4b1b      	ldr	r3, [pc, #108]	; (8008224 <HAL_GPIO_Init+0x334>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	43db      	mvns	r3, r3
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	4013      	ands	r3, r2
 80081c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d003      	beq.n	80081d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80081d8:	4a12      	ldr	r2, [pc, #72]	; (8008224 <HAL_GPIO_Init+0x334>)
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	3301      	adds	r3, #1
 80081e2:	61fb      	str	r3, [r7, #28]
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	2b0f      	cmp	r3, #15
 80081e8:	f67f ae90 	bls.w	8007f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80081ec:	bf00      	nop
 80081ee:	bf00      	nop
 80081f0:	3724      	adds	r7, #36	; 0x24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	40023800 	.word	0x40023800
 8008200:	40013800 	.word	0x40013800
 8008204:	40020000 	.word	0x40020000
 8008208:	40020400 	.word	0x40020400
 800820c:	40020800 	.word	0x40020800
 8008210:	40020c00 	.word	0x40020c00
 8008214:	40021000 	.word	0x40021000
 8008218:	40021400 	.word	0x40021400
 800821c:	40021800 	.word	0x40021800
 8008220:	40021c00 	.word	0x40021c00
 8008224:	40013c00 	.word	0x40013c00

08008228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	807b      	strh	r3, [r7, #2]
 8008234:	4613      	mov	r3, r2
 8008236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008238:	787b      	ldrb	r3, [r7, #1]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800823e:	887a      	ldrh	r2, [r7, #2]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008244:	e003      	b.n	800824e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008246:	887b      	ldrh	r3, [r7, #2]
 8008248:	041a      	lsls	r2, r3, #16
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	619a      	str	r2, [r3, #24]
}
 800824e:	bf00      	nop
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e034      	b.n	80082d6 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8008274:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f245 5255 	movw	r2, #21845	; 0x5555
 800827e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	6852      	ldr	r2, [r2, #4]
 8008288:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	6892      	ldr	r2, [r2, #8]
 8008292:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8008294:	f7fe fa32 	bl	80066fc <HAL_GetTick>
 8008298:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800829a:	e00f      	b.n	80082bc <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800829c:	f7fe fa2e 	bl	80066fc <HAL_GetTick>
 80082a0:	4602      	mov	r2, r0
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	2b31      	cmp	r3, #49	; 0x31
 80082a8:	d908      	bls.n	80082bc <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	f003 0303 	and.w	r3, r3, #3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e00c      	b.n	80082d6 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1e8      	bne.n	800829c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80082d2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80082de:	b480      	push	{r7}
 80082e0:	b083      	sub	sp, #12
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80082ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
	...

08008300 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e267      	b.n	80087e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d075      	beq.n	800840a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800831e:	4b88      	ldr	r3, [pc, #544]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f003 030c 	and.w	r3, r3, #12
 8008326:	2b04      	cmp	r3, #4
 8008328:	d00c      	beq.n	8008344 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800832a:	4b85      	ldr	r3, [pc, #532]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008332:	2b08      	cmp	r3, #8
 8008334:	d112      	bne.n	800835c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008336:	4b82      	ldr	r3, [pc, #520]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800833e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008342:	d10b      	bne.n	800835c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008344:	4b7e      	ldr	r3, [pc, #504]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d05b      	beq.n	8008408 <HAL_RCC_OscConfig+0x108>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d157      	bne.n	8008408 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e242      	b.n	80087e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008364:	d106      	bne.n	8008374 <HAL_RCC_OscConfig+0x74>
 8008366:	4b76      	ldr	r3, [pc, #472]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a75      	ldr	r2, [pc, #468]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 800836c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008370:	6013      	str	r3, [r2, #0]
 8008372:	e01d      	b.n	80083b0 <HAL_RCC_OscConfig+0xb0>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800837c:	d10c      	bne.n	8008398 <HAL_RCC_OscConfig+0x98>
 800837e:	4b70      	ldr	r3, [pc, #448]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a6f      	ldr	r2, [pc, #444]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 8008384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008388:	6013      	str	r3, [r2, #0]
 800838a:	4b6d      	ldr	r3, [pc, #436]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a6c      	ldr	r2, [pc, #432]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 8008390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008394:	6013      	str	r3, [r2, #0]
 8008396:	e00b      	b.n	80083b0 <HAL_RCC_OscConfig+0xb0>
 8008398:	4b69      	ldr	r3, [pc, #420]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a68      	ldr	r2, [pc, #416]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 800839e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083a2:	6013      	str	r3, [r2, #0]
 80083a4:	4b66      	ldr	r3, [pc, #408]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a65      	ldr	r2, [pc, #404]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 80083aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d013      	beq.n	80083e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083b8:	f7fe f9a0 	bl	80066fc <HAL_GetTick>
 80083bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083be:	e008      	b.n	80083d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083c0:	f7fe f99c 	bl	80066fc <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	2b64      	cmp	r3, #100	; 0x64
 80083cc:	d901      	bls.n	80083d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e207      	b.n	80087e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083d2:	4b5b      	ldr	r3, [pc, #364]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0f0      	beq.n	80083c0 <HAL_RCC_OscConfig+0xc0>
 80083de:	e014      	b.n	800840a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083e0:	f7fe f98c 	bl	80066fc <HAL_GetTick>
 80083e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083e6:	e008      	b.n	80083fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083e8:	f7fe f988 	bl	80066fc <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	2b64      	cmp	r3, #100	; 0x64
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e1f3      	b.n	80087e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083fa:	4b51      	ldr	r3, [pc, #324]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1f0      	bne.n	80083e8 <HAL_RCC_OscConfig+0xe8>
 8008406:	e000      	b.n	800840a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	2b00      	cmp	r3, #0
 8008414:	d063      	beq.n	80084de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008416:	4b4a      	ldr	r3, [pc, #296]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f003 030c 	and.w	r3, r3, #12
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00b      	beq.n	800843a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008422:	4b47      	ldr	r3, [pc, #284]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800842a:	2b08      	cmp	r3, #8
 800842c:	d11c      	bne.n	8008468 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800842e:	4b44      	ldr	r3, [pc, #272]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d116      	bne.n	8008468 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800843a:	4b41      	ldr	r3, [pc, #260]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d005      	beq.n	8008452 <HAL_RCC_OscConfig+0x152>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d001      	beq.n	8008452 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e1c7      	b.n	80087e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008452:	4b3b      	ldr	r3, [pc, #236]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	00db      	lsls	r3, r3, #3
 8008460:	4937      	ldr	r1, [pc, #220]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 8008462:	4313      	orrs	r3, r2
 8008464:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008466:	e03a      	b.n	80084de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d020      	beq.n	80084b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008470:	4b34      	ldr	r3, [pc, #208]	; (8008544 <HAL_RCC_OscConfig+0x244>)
 8008472:	2201      	movs	r2, #1
 8008474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008476:	f7fe f941 	bl	80066fc <HAL_GetTick>
 800847a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800847c:	e008      	b.n	8008490 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800847e:	f7fe f93d 	bl	80066fc <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	2b02      	cmp	r3, #2
 800848a:	d901      	bls.n	8008490 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e1a8      	b.n	80087e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008490:	4b2b      	ldr	r3, [pc, #172]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0302 	and.w	r3, r3, #2
 8008498:	2b00      	cmp	r3, #0
 800849a:	d0f0      	beq.n	800847e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800849c:	4b28      	ldr	r3, [pc, #160]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	00db      	lsls	r3, r3, #3
 80084aa:	4925      	ldr	r1, [pc, #148]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	600b      	str	r3, [r1, #0]
 80084b0:	e015      	b.n	80084de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084b2:	4b24      	ldr	r3, [pc, #144]	; (8008544 <HAL_RCC_OscConfig+0x244>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b8:	f7fe f920 	bl	80066fc <HAL_GetTick>
 80084bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084be:	e008      	b.n	80084d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084c0:	f7fe f91c 	bl	80066fc <HAL_GetTick>
 80084c4:	4602      	mov	r2, r0
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d901      	bls.n	80084d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e187      	b.n	80087e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084d2:	4b1b      	ldr	r3, [pc, #108]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0302 	and.w	r3, r3, #2
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1f0      	bne.n	80084c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 0308 	and.w	r3, r3, #8
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d036      	beq.n	8008558 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d016      	beq.n	8008520 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084f2:	4b15      	ldr	r3, [pc, #84]	; (8008548 <HAL_RCC_OscConfig+0x248>)
 80084f4:	2201      	movs	r2, #1
 80084f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084f8:	f7fe f900 	bl	80066fc <HAL_GetTick>
 80084fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084fe:	e008      	b.n	8008512 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008500:	f7fe f8fc 	bl	80066fc <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b02      	cmp	r3, #2
 800850c:	d901      	bls.n	8008512 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e167      	b.n	80087e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008512:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <HAL_RCC_OscConfig+0x240>)
 8008514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008516:	f003 0302 	and.w	r3, r3, #2
 800851a:	2b00      	cmp	r3, #0
 800851c:	d0f0      	beq.n	8008500 <HAL_RCC_OscConfig+0x200>
 800851e:	e01b      	b.n	8008558 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008520:	4b09      	ldr	r3, [pc, #36]	; (8008548 <HAL_RCC_OscConfig+0x248>)
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008526:	f7fe f8e9 	bl	80066fc <HAL_GetTick>
 800852a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800852c:	e00e      	b.n	800854c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800852e:	f7fe f8e5 	bl	80066fc <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	2b02      	cmp	r3, #2
 800853a:	d907      	bls.n	800854c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e150      	b.n	80087e2 <HAL_RCC_OscConfig+0x4e2>
 8008540:	40023800 	.word	0x40023800
 8008544:	42470000 	.word	0x42470000
 8008548:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800854c:	4b88      	ldr	r3, [pc, #544]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 800854e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008550:	f003 0302 	and.w	r3, r3, #2
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1ea      	bne.n	800852e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 0304 	and.w	r3, r3, #4
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 8097 	beq.w	8008694 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008566:	2300      	movs	r3, #0
 8008568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800856a:	4b81      	ldr	r3, [pc, #516]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10f      	bne.n	8008596 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008576:	2300      	movs	r3, #0
 8008578:	60bb      	str	r3, [r7, #8]
 800857a:	4b7d      	ldr	r3, [pc, #500]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	4a7c      	ldr	r2, [pc, #496]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 8008580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008584:	6413      	str	r3, [r2, #64]	; 0x40
 8008586:	4b7a      	ldr	r3, [pc, #488]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 8008588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800858e:	60bb      	str	r3, [r7, #8]
 8008590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008592:	2301      	movs	r3, #1
 8008594:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008596:	4b77      	ldr	r3, [pc, #476]	; (8008774 <HAL_RCC_OscConfig+0x474>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d118      	bne.n	80085d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80085a2:	4b74      	ldr	r3, [pc, #464]	; (8008774 <HAL_RCC_OscConfig+0x474>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a73      	ldr	r2, [pc, #460]	; (8008774 <HAL_RCC_OscConfig+0x474>)
 80085a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085ae:	f7fe f8a5 	bl	80066fc <HAL_GetTick>
 80085b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085b4:	e008      	b.n	80085c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085b6:	f7fe f8a1 	bl	80066fc <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d901      	bls.n	80085c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e10c      	b.n	80087e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085c8:	4b6a      	ldr	r3, [pc, #424]	; (8008774 <HAL_RCC_OscConfig+0x474>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d0f0      	beq.n	80085b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d106      	bne.n	80085ea <HAL_RCC_OscConfig+0x2ea>
 80085dc:	4b64      	ldr	r3, [pc, #400]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 80085de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e0:	4a63      	ldr	r2, [pc, #396]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 80085e2:	f043 0301 	orr.w	r3, r3, #1
 80085e6:	6713      	str	r3, [r2, #112]	; 0x70
 80085e8:	e01c      	b.n	8008624 <HAL_RCC_OscConfig+0x324>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	2b05      	cmp	r3, #5
 80085f0:	d10c      	bne.n	800860c <HAL_RCC_OscConfig+0x30c>
 80085f2:	4b5f      	ldr	r3, [pc, #380]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 80085f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f6:	4a5e      	ldr	r2, [pc, #376]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 80085f8:	f043 0304 	orr.w	r3, r3, #4
 80085fc:	6713      	str	r3, [r2, #112]	; 0x70
 80085fe:	4b5c      	ldr	r3, [pc, #368]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 8008600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008602:	4a5b      	ldr	r2, [pc, #364]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 8008604:	f043 0301 	orr.w	r3, r3, #1
 8008608:	6713      	str	r3, [r2, #112]	; 0x70
 800860a:	e00b      	b.n	8008624 <HAL_RCC_OscConfig+0x324>
 800860c:	4b58      	ldr	r3, [pc, #352]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 800860e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008610:	4a57      	ldr	r2, [pc, #348]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 8008612:	f023 0301 	bic.w	r3, r3, #1
 8008616:	6713      	str	r3, [r2, #112]	; 0x70
 8008618:	4b55      	ldr	r3, [pc, #340]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 800861a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861c:	4a54      	ldr	r2, [pc, #336]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 800861e:	f023 0304 	bic.w	r3, r3, #4
 8008622:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d015      	beq.n	8008658 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800862c:	f7fe f866 	bl	80066fc <HAL_GetTick>
 8008630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008632:	e00a      	b.n	800864a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008634:	f7fe f862 	bl	80066fc <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008642:	4293      	cmp	r3, r2
 8008644:	d901      	bls.n	800864a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e0cb      	b.n	80087e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800864a:	4b49      	ldr	r3, [pc, #292]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 800864c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800864e:	f003 0302 	and.w	r3, r3, #2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d0ee      	beq.n	8008634 <HAL_RCC_OscConfig+0x334>
 8008656:	e014      	b.n	8008682 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008658:	f7fe f850 	bl	80066fc <HAL_GetTick>
 800865c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800865e:	e00a      	b.n	8008676 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008660:	f7fe f84c 	bl	80066fc <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	f241 3288 	movw	r2, #5000	; 0x1388
 800866e:	4293      	cmp	r3, r2
 8008670:	d901      	bls.n	8008676 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e0b5      	b.n	80087e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008676:	4b3e      	ldr	r3, [pc, #248]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 8008678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800867a:	f003 0302 	and.w	r3, r3, #2
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1ee      	bne.n	8008660 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008682:	7dfb      	ldrb	r3, [r7, #23]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d105      	bne.n	8008694 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008688:	4b39      	ldr	r3, [pc, #228]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 800868a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868c:	4a38      	ldr	r2, [pc, #224]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 800868e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008692:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 80a1 	beq.w	80087e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800869e:	4b34      	ldr	r3, [pc, #208]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f003 030c 	and.w	r3, r3, #12
 80086a6:	2b08      	cmp	r3, #8
 80086a8:	d05c      	beq.n	8008764 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d141      	bne.n	8008736 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086b2:	4b31      	ldr	r3, [pc, #196]	; (8008778 <HAL_RCC_OscConfig+0x478>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086b8:	f7fe f820 	bl	80066fc <HAL_GetTick>
 80086bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086be:	e008      	b.n	80086d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086c0:	f7fe f81c 	bl	80066fc <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d901      	bls.n	80086d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e087      	b.n	80087e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086d2:	4b27      	ldr	r3, [pc, #156]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1f0      	bne.n	80086c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	69da      	ldr	r2, [r3, #28]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	431a      	orrs	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	019b      	lsls	r3, r3, #6
 80086ee:	431a      	orrs	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f4:	085b      	lsrs	r3, r3, #1
 80086f6:	3b01      	subs	r3, #1
 80086f8:	041b      	lsls	r3, r3, #16
 80086fa:	431a      	orrs	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008700:	061b      	lsls	r3, r3, #24
 8008702:	491b      	ldr	r1, [pc, #108]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 8008704:	4313      	orrs	r3, r2
 8008706:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008708:	4b1b      	ldr	r3, [pc, #108]	; (8008778 <HAL_RCC_OscConfig+0x478>)
 800870a:	2201      	movs	r2, #1
 800870c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800870e:	f7fd fff5 	bl	80066fc <HAL_GetTick>
 8008712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008714:	e008      	b.n	8008728 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008716:	f7fd fff1 	bl	80066fc <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	2b02      	cmp	r3, #2
 8008722:	d901      	bls.n	8008728 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e05c      	b.n	80087e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008728:	4b11      	ldr	r3, [pc, #68]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d0f0      	beq.n	8008716 <HAL_RCC_OscConfig+0x416>
 8008734:	e054      	b.n	80087e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008736:	4b10      	ldr	r3, [pc, #64]	; (8008778 <HAL_RCC_OscConfig+0x478>)
 8008738:	2200      	movs	r2, #0
 800873a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800873c:	f7fd ffde 	bl	80066fc <HAL_GetTick>
 8008740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008742:	e008      	b.n	8008756 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008744:	f7fd ffda 	bl	80066fc <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b02      	cmp	r3, #2
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e045      	b.n	80087e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008756:	4b06      	ldr	r3, [pc, #24]	; (8008770 <HAL_RCC_OscConfig+0x470>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1f0      	bne.n	8008744 <HAL_RCC_OscConfig+0x444>
 8008762:	e03d      	b.n	80087e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d107      	bne.n	800877c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e038      	b.n	80087e2 <HAL_RCC_OscConfig+0x4e2>
 8008770:	40023800 	.word	0x40023800
 8008774:	40007000 	.word	0x40007000
 8008778:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800877c:	4b1b      	ldr	r3, [pc, #108]	; (80087ec <HAL_RCC_OscConfig+0x4ec>)
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d028      	beq.n	80087dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008794:	429a      	cmp	r2, r3
 8008796:	d121      	bne.n	80087dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d11a      	bne.n	80087dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80087ac:	4013      	ands	r3, r2
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80087b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d111      	bne.n	80087dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c2:	085b      	lsrs	r3, r3, #1
 80087c4:	3b01      	subs	r3, #1
 80087c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d107      	bne.n	80087dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087d8:	429a      	cmp	r2, r3
 80087da:	d001      	beq.n	80087e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e000      	b.n	80087e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	40023800 	.word	0x40023800

080087f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e0cc      	b.n	800899e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008804:	4b68      	ldr	r3, [pc, #416]	; (80089a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0307 	and.w	r3, r3, #7
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d90c      	bls.n	800882c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008812:	4b65      	ldr	r3, [pc, #404]	; (80089a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	b2d2      	uxtb	r2, r2
 8008818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800881a:	4b63      	ldr	r3, [pc, #396]	; (80089a8 <HAL_RCC_ClockConfig+0x1b8>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0307 	and.w	r3, r3, #7
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	429a      	cmp	r2, r3
 8008826:	d001      	beq.n	800882c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e0b8      	b.n	800899e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0302 	and.w	r3, r3, #2
 8008834:	2b00      	cmp	r3, #0
 8008836:	d020      	beq.n	800887a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0304 	and.w	r3, r3, #4
 8008840:	2b00      	cmp	r3, #0
 8008842:	d005      	beq.n	8008850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008844:	4b59      	ldr	r3, [pc, #356]	; (80089ac <HAL_RCC_ClockConfig+0x1bc>)
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	4a58      	ldr	r2, [pc, #352]	; (80089ac <HAL_RCC_ClockConfig+0x1bc>)
 800884a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800884e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0308 	and.w	r3, r3, #8
 8008858:	2b00      	cmp	r3, #0
 800885a:	d005      	beq.n	8008868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800885c:	4b53      	ldr	r3, [pc, #332]	; (80089ac <HAL_RCC_ClockConfig+0x1bc>)
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	4a52      	ldr	r2, [pc, #328]	; (80089ac <HAL_RCC_ClockConfig+0x1bc>)
 8008862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008868:	4b50      	ldr	r3, [pc, #320]	; (80089ac <HAL_RCC_ClockConfig+0x1bc>)
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	494d      	ldr	r1, [pc, #308]	; (80089ac <HAL_RCC_ClockConfig+0x1bc>)
 8008876:	4313      	orrs	r3, r2
 8008878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	d044      	beq.n	8008910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d107      	bne.n	800889e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800888e:	4b47      	ldr	r3, [pc, #284]	; (80089ac <HAL_RCC_ClockConfig+0x1bc>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d119      	bne.n	80088ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e07f      	b.n	800899e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d003      	beq.n	80088ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088aa:	2b03      	cmp	r3, #3
 80088ac:	d107      	bne.n	80088be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088ae:	4b3f      	ldr	r3, [pc, #252]	; (80089ac <HAL_RCC_ClockConfig+0x1bc>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d109      	bne.n	80088ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e06f      	b.n	800899e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088be:	4b3b      	ldr	r3, [pc, #236]	; (80089ac <HAL_RCC_ClockConfig+0x1bc>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0302 	and.w	r3, r3, #2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d101      	bne.n	80088ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e067      	b.n	800899e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088ce:	4b37      	ldr	r3, [pc, #220]	; (80089ac <HAL_RCC_ClockConfig+0x1bc>)
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f023 0203 	bic.w	r2, r3, #3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	4934      	ldr	r1, [pc, #208]	; (80089ac <HAL_RCC_ClockConfig+0x1bc>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80088e0:	f7fd ff0c 	bl	80066fc <HAL_GetTick>
 80088e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088e6:	e00a      	b.n	80088fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088e8:	f7fd ff08 	bl	80066fc <HAL_GetTick>
 80088ec:	4602      	mov	r2, r0
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d901      	bls.n	80088fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e04f      	b.n	800899e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088fe:	4b2b      	ldr	r3, [pc, #172]	; (80089ac <HAL_RCC_ClockConfig+0x1bc>)
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	f003 020c 	and.w	r2, r3, #12
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	429a      	cmp	r2, r3
 800890e:	d1eb      	bne.n	80088e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008910:	4b25      	ldr	r3, [pc, #148]	; (80089a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0307 	and.w	r3, r3, #7
 8008918:	683a      	ldr	r2, [r7, #0]
 800891a:	429a      	cmp	r2, r3
 800891c:	d20c      	bcs.n	8008938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800891e:	4b22      	ldr	r3, [pc, #136]	; (80089a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	b2d2      	uxtb	r2, r2
 8008924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008926:	4b20      	ldr	r3, [pc, #128]	; (80089a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0307 	and.w	r3, r3, #7
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	429a      	cmp	r2, r3
 8008932:	d001      	beq.n	8008938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e032      	b.n	800899e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	d008      	beq.n	8008956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008944:	4b19      	ldr	r3, [pc, #100]	; (80089ac <HAL_RCC_ClockConfig+0x1bc>)
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	4916      	ldr	r1, [pc, #88]	; (80089ac <HAL_RCC_ClockConfig+0x1bc>)
 8008952:	4313      	orrs	r3, r2
 8008954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 0308 	and.w	r3, r3, #8
 800895e:	2b00      	cmp	r3, #0
 8008960:	d009      	beq.n	8008976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008962:	4b12      	ldr	r3, [pc, #72]	; (80089ac <HAL_RCC_ClockConfig+0x1bc>)
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	490e      	ldr	r1, [pc, #56]	; (80089ac <HAL_RCC_ClockConfig+0x1bc>)
 8008972:	4313      	orrs	r3, r2
 8008974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008976:	f000 f821 	bl	80089bc <HAL_RCC_GetSysClockFreq>
 800897a:	4602      	mov	r2, r0
 800897c:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <HAL_RCC_ClockConfig+0x1bc>)
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	091b      	lsrs	r3, r3, #4
 8008982:	f003 030f 	and.w	r3, r3, #15
 8008986:	490a      	ldr	r1, [pc, #40]	; (80089b0 <HAL_RCC_ClockConfig+0x1c0>)
 8008988:	5ccb      	ldrb	r3, [r1, r3]
 800898a:	fa22 f303 	lsr.w	r3, r2, r3
 800898e:	4a09      	ldr	r2, [pc, #36]	; (80089b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008992:	4b09      	ldr	r3, [pc, #36]	; (80089b8 <HAL_RCC_ClockConfig+0x1c8>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4618      	mov	r0, r3
 8008998:	f7fd fe6c 	bl	8006674 <HAL_InitTick>

  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	40023c00 	.word	0x40023c00
 80089ac:	40023800 	.word	0x40023800
 80089b0:	080104b4 	.word	0x080104b4
 80089b4:	20001324 	.word	0x20001324
 80089b8:	200013e4 	.word	0x200013e4

080089bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089c0:	b094      	sub	sp, #80	; 0x50
 80089c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80089c4:	2300      	movs	r3, #0
 80089c6:	647b      	str	r3, [r7, #68]	; 0x44
 80089c8:	2300      	movs	r3, #0
 80089ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089cc:	2300      	movs	r3, #0
 80089ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80089d0:	2300      	movs	r3, #0
 80089d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089d4:	4b79      	ldr	r3, [pc, #484]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x200>)
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f003 030c 	and.w	r3, r3, #12
 80089dc:	2b08      	cmp	r3, #8
 80089de:	d00d      	beq.n	80089fc <HAL_RCC_GetSysClockFreq+0x40>
 80089e0:	2b08      	cmp	r3, #8
 80089e2:	f200 80e1 	bhi.w	8008ba8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <HAL_RCC_GetSysClockFreq+0x34>
 80089ea:	2b04      	cmp	r3, #4
 80089ec:	d003      	beq.n	80089f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80089ee:	e0db      	b.n	8008ba8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80089f0:	4b73      	ldr	r3, [pc, #460]	; (8008bc0 <HAL_RCC_GetSysClockFreq+0x204>)
 80089f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80089f4:	e0db      	b.n	8008bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80089f6:	4b73      	ldr	r3, [pc, #460]	; (8008bc4 <HAL_RCC_GetSysClockFreq+0x208>)
 80089f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80089fa:	e0d8      	b.n	8008bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80089fc:	4b6f      	ldr	r3, [pc, #444]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x200>)
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a06:	4b6d      	ldr	r3, [pc, #436]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d063      	beq.n	8008ada <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a12:	4b6a      	ldr	r3, [pc, #424]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	099b      	lsrs	r3, r3, #6
 8008a18:	2200      	movs	r2, #0
 8008a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a24:	633b      	str	r3, [r7, #48]	; 0x30
 8008a26:	2300      	movs	r3, #0
 8008a28:	637b      	str	r3, [r7, #52]	; 0x34
 8008a2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008a2e:	4622      	mov	r2, r4
 8008a30:	462b      	mov	r3, r5
 8008a32:	f04f 0000 	mov.w	r0, #0
 8008a36:	f04f 0100 	mov.w	r1, #0
 8008a3a:	0159      	lsls	r1, r3, #5
 8008a3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a40:	0150      	lsls	r0, r2, #5
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	4621      	mov	r1, r4
 8008a48:	1a51      	subs	r1, r2, r1
 8008a4a:	6139      	str	r1, [r7, #16]
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	eb63 0301 	sbc.w	r3, r3, r1
 8008a52:	617b      	str	r3, [r7, #20]
 8008a54:	f04f 0200 	mov.w	r2, #0
 8008a58:	f04f 0300 	mov.w	r3, #0
 8008a5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a60:	4659      	mov	r1, fp
 8008a62:	018b      	lsls	r3, r1, #6
 8008a64:	4651      	mov	r1, sl
 8008a66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008a6a:	4651      	mov	r1, sl
 8008a6c:	018a      	lsls	r2, r1, #6
 8008a6e:	4651      	mov	r1, sl
 8008a70:	ebb2 0801 	subs.w	r8, r2, r1
 8008a74:	4659      	mov	r1, fp
 8008a76:	eb63 0901 	sbc.w	r9, r3, r1
 8008a7a:	f04f 0200 	mov.w	r2, #0
 8008a7e:	f04f 0300 	mov.w	r3, #0
 8008a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a8e:	4690      	mov	r8, r2
 8008a90:	4699      	mov	r9, r3
 8008a92:	4623      	mov	r3, r4
 8008a94:	eb18 0303 	adds.w	r3, r8, r3
 8008a98:	60bb      	str	r3, [r7, #8]
 8008a9a:	462b      	mov	r3, r5
 8008a9c:	eb49 0303 	adc.w	r3, r9, r3
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	f04f 0200 	mov.w	r2, #0
 8008aa6:	f04f 0300 	mov.w	r3, #0
 8008aaa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008aae:	4629      	mov	r1, r5
 8008ab0:	024b      	lsls	r3, r1, #9
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008ab8:	4621      	mov	r1, r4
 8008aba:	024a      	lsls	r2, r1, #9
 8008abc:	4610      	mov	r0, r2
 8008abe:	4619      	mov	r1, r3
 8008ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ac8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008acc:	f7f8 f8ec 	bl	8000ca8 <__aeabi_uldivmod>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ad8:	e058      	b.n	8008b8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ada:	4b38      	ldr	r3, [pc, #224]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	099b      	lsrs	r3, r3, #6
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008aea:	623b      	str	r3, [r7, #32]
 8008aec:	2300      	movs	r3, #0
 8008aee:	627b      	str	r3, [r7, #36]	; 0x24
 8008af0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008af4:	4642      	mov	r2, r8
 8008af6:	464b      	mov	r3, r9
 8008af8:	f04f 0000 	mov.w	r0, #0
 8008afc:	f04f 0100 	mov.w	r1, #0
 8008b00:	0159      	lsls	r1, r3, #5
 8008b02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b06:	0150      	lsls	r0, r2, #5
 8008b08:	4602      	mov	r2, r0
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	4641      	mov	r1, r8
 8008b0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008b12:	4649      	mov	r1, r9
 8008b14:	eb63 0b01 	sbc.w	fp, r3, r1
 8008b18:	f04f 0200 	mov.w	r2, #0
 8008b1c:	f04f 0300 	mov.w	r3, #0
 8008b20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008b24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008b28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008b2c:	ebb2 040a 	subs.w	r4, r2, sl
 8008b30:	eb63 050b 	sbc.w	r5, r3, fp
 8008b34:	f04f 0200 	mov.w	r2, #0
 8008b38:	f04f 0300 	mov.w	r3, #0
 8008b3c:	00eb      	lsls	r3, r5, #3
 8008b3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b42:	00e2      	lsls	r2, r4, #3
 8008b44:	4614      	mov	r4, r2
 8008b46:	461d      	mov	r5, r3
 8008b48:	4643      	mov	r3, r8
 8008b4a:	18e3      	adds	r3, r4, r3
 8008b4c:	603b      	str	r3, [r7, #0]
 8008b4e:	464b      	mov	r3, r9
 8008b50:	eb45 0303 	adc.w	r3, r5, r3
 8008b54:	607b      	str	r3, [r7, #4]
 8008b56:	f04f 0200 	mov.w	r2, #0
 8008b5a:	f04f 0300 	mov.w	r3, #0
 8008b5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008b62:	4629      	mov	r1, r5
 8008b64:	028b      	lsls	r3, r1, #10
 8008b66:	4621      	mov	r1, r4
 8008b68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	028a      	lsls	r2, r1, #10
 8008b70:	4610      	mov	r0, r2
 8008b72:	4619      	mov	r1, r3
 8008b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b76:	2200      	movs	r2, #0
 8008b78:	61bb      	str	r3, [r7, #24]
 8008b7a:	61fa      	str	r2, [r7, #28]
 8008b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b80:	f7f8 f892 	bl	8000ca8 <__aeabi_uldivmod>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4613      	mov	r3, r2
 8008b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b8c:	4b0b      	ldr	r3, [pc, #44]	; (8008bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	0c1b      	lsrs	r3, r3, #16
 8008b92:	f003 0303 	and.w	r3, r3, #3
 8008b96:	3301      	adds	r3, #1
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008b9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ba6:	e002      	b.n	8008bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ba8:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008baa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3750      	adds	r7, #80	; 0x50
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bba:	bf00      	nop
 8008bbc:	40023800 	.word	0x40023800
 8008bc0:	00f42400 	.word	0x00f42400
 8008bc4:	007a1200 	.word	0x007a1200

08008bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bcc:	4b03      	ldr	r3, [pc, #12]	; (8008bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8008bce:	681b      	ldr	r3, [r3, #0]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	20001324 	.word	0x20001324

08008be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008be4:	f7ff fff0 	bl	8008bc8 <HAL_RCC_GetHCLKFreq>
 8008be8:	4602      	mov	r2, r0
 8008bea:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	0a9b      	lsrs	r3, r3, #10
 8008bf0:	f003 0307 	and.w	r3, r3, #7
 8008bf4:	4903      	ldr	r1, [pc, #12]	; (8008c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bf6:	5ccb      	ldrb	r3, [r1, r3]
 8008bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	40023800 	.word	0x40023800
 8008c04:	080104c4 	.word	0x080104c4

08008c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008c0c:	f7ff ffdc 	bl	8008bc8 <HAL_RCC_GetHCLKFreq>
 8008c10:	4602      	mov	r2, r0
 8008c12:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	0b5b      	lsrs	r3, r3, #13
 8008c18:	f003 0307 	and.w	r3, r3, #7
 8008c1c:	4903      	ldr	r1, [pc, #12]	; (8008c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c1e:	5ccb      	ldrb	r3, [r1, r3]
 8008c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	40023800 	.word	0x40023800
 8008c2c:	080104c4 	.word	0x080104c4

08008c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e041      	b.n	8008cc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d106      	bne.n	8008c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7fd f8ba 	bl	8005dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	4610      	mov	r0, r2
 8008c70:	f000 fce2 	bl	8009638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d001      	beq.n	8008ce8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e046      	b.n	8008d76 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2202      	movs	r2, #2
 8008cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a23      	ldr	r2, [pc, #140]	; (8008d84 <HAL_TIM_Base_Start+0xb4>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d022      	beq.n	8008d40 <HAL_TIM_Base_Start+0x70>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d02:	d01d      	beq.n	8008d40 <HAL_TIM_Base_Start+0x70>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a1f      	ldr	r2, [pc, #124]	; (8008d88 <HAL_TIM_Base_Start+0xb8>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d018      	beq.n	8008d40 <HAL_TIM_Base_Start+0x70>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a1e      	ldr	r2, [pc, #120]	; (8008d8c <HAL_TIM_Base_Start+0xbc>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d013      	beq.n	8008d40 <HAL_TIM_Base_Start+0x70>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a1c      	ldr	r2, [pc, #112]	; (8008d90 <HAL_TIM_Base_Start+0xc0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d00e      	beq.n	8008d40 <HAL_TIM_Base_Start+0x70>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a1b      	ldr	r2, [pc, #108]	; (8008d94 <HAL_TIM_Base_Start+0xc4>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d009      	beq.n	8008d40 <HAL_TIM_Base_Start+0x70>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a19      	ldr	r2, [pc, #100]	; (8008d98 <HAL_TIM_Base_Start+0xc8>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d004      	beq.n	8008d40 <HAL_TIM_Base_Start+0x70>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a18      	ldr	r2, [pc, #96]	; (8008d9c <HAL_TIM_Base_Start+0xcc>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d111      	bne.n	8008d64 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	f003 0307 	and.w	r3, r3, #7
 8008d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2b06      	cmp	r3, #6
 8008d50:	d010      	beq.n	8008d74 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f042 0201 	orr.w	r2, r2, #1
 8008d60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d62:	e007      	b.n	8008d74 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f042 0201 	orr.w	r2, r2, #1
 8008d72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	40010000 	.word	0x40010000
 8008d88:	40000400 	.word	0x40000400
 8008d8c:	40000800 	.word	0x40000800
 8008d90:	40000c00 	.word	0x40000c00
 8008d94:	40010400 	.word	0x40010400
 8008d98:	40014000 	.word	0x40014000
 8008d9c:	40001800 	.word	0x40001800

08008da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d001      	beq.n	8008db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e04e      	b.n	8008e56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68da      	ldr	r2, [r3, #12]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f042 0201 	orr.w	r2, r2, #1
 8008dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a23      	ldr	r2, [pc, #140]	; (8008e64 <HAL_TIM_Base_Start_IT+0xc4>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d022      	beq.n	8008e20 <HAL_TIM_Base_Start_IT+0x80>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008de2:	d01d      	beq.n	8008e20 <HAL_TIM_Base_Start_IT+0x80>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a1f      	ldr	r2, [pc, #124]	; (8008e68 <HAL_TIM_Base_Start_IT+0xc8>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d018      	beq.n	8008e20 <HAL_TIM_Base_Start_IT+0x80>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a1e      	ldr	r2, [pc, #120]	; (8008e6c <HAL_TIM_Base_Start_IT+0xcc>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d013      	beq.n	8008e20 <HAL_TIM_Base_Start_IT+0x80>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a1c      	ldr	r2, [pc, #112]	; (8008e70 <HAL_TIM_Base_Start_IT+0xd0>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d00e      	beq.n	8008e20 <HAL_TIM_Base_Start_IT+0x80>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a1b      	ldr	r2, [pc, #108]	; (8008e74 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d009      	beq.n	8008e20 <HAL_TIM_Base_Start_IT+0x80>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a19      	ldr	r2, [pc, #100]	; (8008e78 <HAL_TIM_Base_Start_IT+0xd8>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d004      	beq.n	8008e20 <HAL_TIM_Base_Start_IT+0x80>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a18      	ldr	r2, [pc, #96]	; (8008e7c <HAL_TIM_Base_Start_IT+0xdc>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d111      	bne.n	8008e44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2b06      	cmp	r3, #6
 8008e30:	d010      	beq.n	8008e54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f042 0201 	orr.w	r2, r2, #1
 8008e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e42:	e007      	b.n	8008e54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f042 0201 	orr.w	r2, r2, #1
 8008e52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	40010000 	.word	0x40010000
 8008e68:	40000400 	.word	0x40000400
 8008e6c:	40000800 	.word	0x40000800
 8008e70:	40000c00 	.word	0x40000c00
 8008e74:	40010400 	.word	0x40010400
 8008e78:	40014000 	.word	0x40014000
 8008e7c:	40001800 	.word	0x40001800

08008e80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d101      	bne.n	8008e92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e041      	b.n	8008f16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d106      	bne.n	8008eac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f839 	bl	8008f1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	f000 fbba 	bl	8009638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b083      	sub	sp, #12
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008f26:	bf00      	nop
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
	...

08008f34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d109      	bne.n	8008f58 <HAL_TIM_PWM_Start+0x24>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	bf14      	ite	ne
 8008f50:	2301      	movne	r3, #1
 8008f52:	2300      	moveq	r3, #0
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	e022      	b.n	8008f9e <HAL_TIM_PWM_Start+0x6a>
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	2b04      	cmp	r3, #4
 8008f5c:	d109      	bne.n	8008f72 <HAL_TIM_PWM_Start+0x3e>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	bf14      	ite	ne
 8008f6a:	2301      	movne	r3, #1
 8008f6c:	2300      	moveq	r3, #0
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	e015      	b.n	8008f9e <HAL_TIM_PWM_Start+0x6a>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2b08      	cmp	r3, #8
 8008f76:	d109      	bne.n	8008f8c <HAL_TIM_PWM_Start+0x58>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	bf14      	ite	ne
 8008f84:	2301      	movne	r3, #1
 8008f86:	2300      	moveq	r3, #0
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	e008      	b.n	8008f9e <HAL_TIM_PWM_Start+0x6a>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	bf14      	ite	ne
 8008f98:	2301      	movne	r3, #1
 8008f9a:	2300      	moveq	r3, #0
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e07c      	b.n	80090a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <HAL_TIM_PWM_Start+0x82>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fb4:	e013      	b.n	8008fde <HAL_TIM_PWM_Start+0xaa>
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	d104      	bne.n	8008fc6 <HAL_TIM_PWM_Start+0x92>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fc4:	e00b      	b.n	8008fde <HAL_TIM_PWM_Start+0xaa>
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b08      	cmp	r3, #8
 8008fca:	d104      	bne.n	8008fd6 <HAL_TIM_PWM_Start+0xa2>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fd4:	e003      	b.n	8008fde <HAL_TIM_PWM_Start+0xaa>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2202      	movs	r2, #2
 8008fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 fe10 	bl	8009c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a2d      	ldr	r2, [pc, #180]	; (80090a8 <HAL_TIM_PWM_Start+0x174>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d004      	beq.n	8009000 <HAL_TIM_PWM_Start+0xcc>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a2c      	ldr	r2, [pc, #176]	; (80090ac <HAL_TIM_PWM_Start+0x178>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d101      	bne.n	8009004 <HAL_TIM_PWM_Start+0xd0>
 8009000:	2301      	movs	r3, #1
 8009002:	e000      	b.n	8009006 <HAL_TIM_PWM_Start+0xd2>
 8009004:	2300      	movs	r3, #0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d007      	beq.n	800901a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009018:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a22      	ldr	r2, [pc, #136]	; (80090a8 <HAL_TIM_PWM_Start+0x174>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d022      	beq.n	800906a <HAL_TIM_PWM_Start+0x136>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800902c:	d01d      	beq.n	800906a <HAL_TIM_PWM_Start+0x136>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a1f      	ldr	r2, [pc, #124]	; (80090b0 <HAL_TIM_PWM_Start+0x17c>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d018      	beq.n	800906a <HAL_TIM_PWM_Start+0x136>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a1d      	ldr	r2, [pc, #116]	; (80090b4 <HAL_TIM_PWM_Start+0x180>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d013      	beq.n	800906a <HAL_TIM_PWM_Start+0x136>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a1c      	ldr	r2, [pc, #112]	; (80090b8 <HAL_TIM_PWM_Start+0x184>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d00e      	beq.n	800906a <HAL_TIM_PWM_Start+0x136>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a16      	ldr	r2, [pc, #88]	; (80090ac <HAL_TIM_PWM_Start+0x178>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d009      	beq.n	800906a <HAL_TIM_PWM_Start+0x136>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a18      	ldr	r2, [pc, #96]	; (80090bc <HAL_TIM_PWM_Start+0x188>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d004      	beq.n	800906a <HAL_TIM_PWM_Start+0x136>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a16      	ldr	r2, [pc, #88]	; (80090c0 <HAL_TIM_PWM_Start+0x18c>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d111      	bne.n	800908e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f003 0307 	and.w	r3, r3, #7
 8009074:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b06      	cmp	r3, #6
 800907a:	d010      	beq.n	800909e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f042 0201 	orr.w	r2, r2, #1
 800908a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800908c:	e007      	b.n	800909e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0201 	orr.w	r2, r2, #1
 800909c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	40010000 	.word	0x40010000
 80090ac:	40010400 	.word	0x40010400
 80090b0:	40000400 	.word	0x40000400
 80090b4:	40000800 	.word	0x40000800
 80090b8:	40000c00 	.word	0x40000c00
 80090bc:	40014000 	.word	0x40014000
 80090c0:	40001800 	.word	0x40001800

080090c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	f003 0302 	and.w	r3, r3, #2
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d122      	bne.n	8009120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	f003 0302 	and.w	r3, r3, #2
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d11b      	bne.n	8009120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f06f 0202 	mvn.w	r2, #2
 80090f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	f003 0303 	and.w	r3, r3, #3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d003      	beq.n	800910e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fa77 	bl	80095fa <HAL_TIM_IC_CaptureCallback>
 800910c:	e005      	b.n	800911a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fa69 	bl	80095e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fa7a 	bl	800960e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	f003 0304 	and.w	r3, r3, #4
 800912a:	2b04      	cmp	r3, #4
 800912c:	d122      	bne.n	8009174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f003 0304 	and.w	r3, r3, #4
 8009138:	2b04      	cmp	r3, #4
 800913a:	d11b      	bne.n	8009174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f06f 0204 	mvn.w	r2, #4
 8009144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2202      	movs	r2, #2
 800914a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fa4d 	bl	80095fa <HAL_TIM_IC_CaptureCallback>
 8009160:	e005      	b.n	800916e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fa3f 	bl	80095e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fa50 	bl	800960e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	f003 0308 	and.w	r3, r3, #8
 800917e:	2b08      	cmp	r3, #8
 8009180:	d122      	bne.n	80091c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	f003 0308 	and.w	r3, r3, #8
 800918c:	2b08      	cmp	r3, #8
 800918e:	d11b      	bne.n	80091c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f06f 0208 	mvn.w	r2, #8
 8009198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2204      	movs	r2, #4
 800919e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	f003 0303 	and.w	r3, r3, #3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fa23 	bl	80095fa <HAL_TIM_IC_CaptureCallback>
 80091b4:	e005      	b.n	80091c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fa15 	bl	80095e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fa26 	bl	800960e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	f003 0310 	and.w	r3, r3, #16
 80091d2:	2b10      	cmp	r3, #16
 80091d4:	d122      	bne.n	800921c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f003 0310 	and.w	r3, r3, #16
 80091e0:	2b10      	cmp	r3, #16
 80091e2:	d11b      	bne.n	800921c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f06f 0210 	mvn.w	r2, #16
 80091ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2208      	movs	r2, #8
 80091f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f9f9 	bl	80095fa <HAL_TIM_IC_CaptureCallback>
 8009208:	e005      	b.n	8009216 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f9eb 	bl	80095e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f9fc 	bl	800960e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b01      	cmp	r3, #1
 8009228:	d10e      	bne.n	8009248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	f003 0301 	and.w	r3, r3, #1
 8009234:	2b01      	cmp	r3, #1
 8009236:	d107      	bne.n	8009248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f06f 0201 	mvn.w	r2, #1
 8009240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7fc fb8e 	bl	8005964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009252:	2b80      	cmp	r3, #128	; 0x80
 8009254:	d10e      	bne.n	8009274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009260:	2b80      	cmp	r3, #128	; 0x80
 8009262:	d107      	bne.n	8009274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800926c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 fdca 	bl	8009e08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800927e:	2b40      	cmp	r3, #64	; 0x40
 8009280:	d10e      	bne.n	80092a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928c:	2b40      	cmp	r3, #64	; 0x40
 800928e:	d107      	bne.n	80092a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f9c1 	bl	8009622 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	f003 0320 	and.w	r3, r3, #32
 80092aa:	2b20      	cmp	r3, #32
 80092ac:	d10e      	bne.n	80092cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	f003 0320 	and.w	r3, r3, #32
 80092b8:	2b20      	cmp	r3, #32
 80092ba:	d107      	bne.n	80092cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f06f 0220 	mvn.w	r2, #32
 80092c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fd94 	bl	8009df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092cc:	bf00      	nop
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d101      	bne.n	80092f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80092ee:	2302      	movs	r3, #2
 80092f0:	e0ae      	b.n	8009450 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b0c      	cmp	r3, #12
 80092fe:	f200 809f 	bhi.w	8009440 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009302:	a201      	add	r2, pc, #4	; (adr r2, 8009308 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009308:	0800933d 	.word	0x0800933d
 800930c:	08009441 	.word	0x08009441
 8009310:	08009441 	.word	0x08009441
 8009314:	08009441 	.word	0x08009441
 8009318:	0800937d 	.word	0x0800937d
 800931c:	08009441 	.word	0x08009441
 8009320:	08009441 	.word	0x08009441
 8009324:	08009441 	.word	0x08009441
 8009328:	080093bf 	.word	0x080093bf
 800932c:	08009441 	.word	0x08009441
 8009330:	08009441 	.word	0x08009441
 8009334:	08009441 	.word	0x08009441
 8009338:	080093ff 	.word	0x080093ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68b9      	ldr	r1, [r7, #8]
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fa18 	bl	8009778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	699a      	ldr	r2, [r3, #24]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0208 	orr.w	r2, r2, #8
 8009356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	699a      	ldr	r2, [r3, #24]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f022 0204 	bic.w	r2, r2, #4
 8009366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6999      	ldr	r1, [r3, #24]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	691a      	ldr	r2, [r3, #16]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	619a      	str	r2, [r3, #24]
      break;
 800937a:	e064      	b.n	8009446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68b9      	ldr	r1, [r7, #8]
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fa68 	bl	8009858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	699a      	ldr	r2, [r3, #24]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	699a      	ldr	r2, [r3, #24]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6999      	ldr	r1, [r3, #24]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	021a      	lsls	r2, r3, #8
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	430a      	orrs	r2, r1
 80093ba:	619a      	str	r2, [r3, #24]
      break;
 80093bc:	e043      	b.n	8009446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68b9      	ldr	r1, [r7, #8]
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 fabd 	bl	8009944 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	69da      	ldr	r2, [r3, #28]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f042 0208 	orr.w	r2, r2, #8
 80093d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	69da      	ldr	r2, [r3, #28]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f022 0204 	bic.w	r2, r2, #4
 80093e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	69d9      	ldr	r1, [r3, #28]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	691a      	ldr	r2, [r3, #16]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	430a      	orrs	r2, r1
 80093fa:	61da      	str	r2, [r3, #28]
      break;
 80093fc:	e023      	b.n	8009446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68b9      	ldr	r1, [r7, #8]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 fb11 	bl	8009a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	69da      	ldr	r2, [r3, #28]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	69da      	ldr	r2, [r3, #28]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	69d9      	ldr	r1, [r3, #28]
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	021a      	lsls	r2, r3, #8
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	61da      	str	r2, [r3, #28]
      break;
 800943e:	e002      	b.n	8009446 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	75fb      	strb	r3, [r7, #23]
      break;
 8009444:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800944e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800946c:	2b01      	cmp	r3, #1
 800946e:	d101      	bne.n	8009474 <HAL_TIM_ConfigClockSource+0x1c>
 8009470:	2302      	movs	r3, #2
 8009472:	e0b4      	b.n	80095de <HAL_TIM_ConfigClockSource+0x186>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2202      	movs	r2, #2
 8009480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800949a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094ac:	d03e      	beq.n	800952c <HAL_TIM_ConfigClockSource+0xd4>
 80094ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094b2:	f200 8087 	bhi.w	80095c4 <HAL_TIM_ConfigClockSource+0x16c>
 80094b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ba:	f000 8086 	beq.w	80095ca <HAL_TIM_ConfigClockSource+0x172>
 80094be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094c2:	d87f      	bhi.n	80095c4 <HAL_TIM_ConfigClockSource+0x16c>
 80094c4:	2b70      	cmp	r3, #112	; 0x70
 80094c6:	d01a      	beq.n	80094fe <HAL_TIM_ConfigClockSource+0xa6>
 80094c8:	2b70      	cmp	r3, #112	; 0x70
 80094ca:	d87b      	bhi.n	80095c4 <HAL_TIM_ConfigClockSource+0x16c>
 80094cc:	2b60      	cmp	r3, #96	; 0x60
 80094ce:	d050      	beq.n	8009572 <HAL_TIM_ConfigClockSource+0x11a>
 80094d0:	2b60      	cmp	r3, #96	; 0x60
 80094d2:	d877      	bhi.n	80095c4 <HAL_TIM_ConfigClockSource+0x16c>
 80094d4:	2b50      	cmp	r3, #80	; 0x50
 80094d6:	d03c      	beq.n	8009552 <HAL_TIM_ConfigClockSource+0xfa>
 80094d8:	2b50      	cmp	r3, #80	; 0x50
 80094da:	d873      	bhi.n	80095c4 <HAL_TIM_ConfigClockSource+0x16c>
 80094dc:	2b40      	cmp	r3, #64	; 0x40
 80094de:	d058      	beq.n	8009592 <HAL_TIM_ConfigClockSource+0x13a>
 80094e0:	2b40      	cmp	r3, #64	; 0x40
 80094e2:	d86f      	bhi.n	80095c4 <HAL_TIM_ConfigClockSource+0x16c>
 80094e4:	2b30      	cmp	r3, #48	; 0x30
 80094e6:	d064      	beq.n	80095b2 <HAL_TIM_ConfigClockSource+0x15a>
 80094e8:	2b30      	cmp	r3, #48	; 0x30
 80094ea:	d86b      	bhi.n	80095c4 <HAL_TIM_ConfigClockSource+0x16c>
 80094ec:	2b20      	cmp	r3, #32
 80094ee:	d060      	beq.n	80095b2 <HAL_TIM_ConfigClockSource+0x15a>
 80094f0:	2b20      	cmp	r3, #32
 80094f2:	d867      	bhi.n	80095c4 <HAL_TIM_ConfigClockSource+0x16c>
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d05c      	beq.n	80095b2 <HAL_TIM_ConfigClockSource+0x15a>
 80094f8:	2b10      	cmp	r3, #16
 80094fa:	d05a      	beq.n	80095b2 <HAL_TIM_ConfigClockSource+0x15a>
 80094fc:	e062      	b.n	80095c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6818      	ldr	r0, [r3, #0]
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	6899      	ldr	r1, [r3, #8]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	685a      	ldr	r2, [r3, #4]
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	f000 fb5d 	bl	8009bcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009520:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	609a      	str	r2, [r3, #8]
      break;
 800952a:	e04f      	b.n	80095cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6818      	ldr	r0, [r3, #0]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	6899      	ldr	r1, [r3, #8]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	f000 fb46 	bl	8009bcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689a      	ldr	r2, [r3, #8]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800954e:	609a      	str	r2, [r3, #8]
      break;
 8009550:	e03c      	b.n	80095cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	6859      	ldr	r1, [r3, #4]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	461a      	mov	r2, r3
 8009560:	f000 faba 	bl	8009ad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2150      	movs	r1, #80	; 0x50
 800956a:	4618      	mov	r0, r3
 800956c:	f000 fb13 	bl	8009b96 <TIM_ITRx_SetConfig>
      break;
 8009570:	e02c      	b.n	80095cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6818      	ldr	r0, [r3, #0]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	6859      	ldr	r1, [r3, #4]
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	461a      	mov	r2, r3
 8009580:	f000 fad9 	bl	8009b36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2160      	movs	r1, #96	; 0x60
 800958a:	4618      	mov	r0, r3
 800958c:	f000 fb03 	bl	8009b96 <TIM_ITRx_SetConfig>
      break;
 8009590:	e01c      	b.n	80095cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6818      	ldr	r0, [r3, #0]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	6859      	ldr	r1, [r3, #4]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	461a      	mov	r2, r3
 80095a0:	f000 fa9a 	bl	8009ad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2140      	movs	r1, #64	; 0x40
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 faf3 	bl	8009b96 <TIM_ITRx_SetConfig>
      break;
 80095b0:	e00c      	b.n	80095cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4619      	mov	r1, r3
 80095bc:	4610      	mov	r0, r2
 80095be:	f000 faea 	bl	8009b96 <TIM_ITRx_SetConfig>
      break;
 80095c2:	e003      	b.n	80095cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	73fb      	strb	r3, [r7, #15]
      break;
 80095c8:	e000      	b.n	80095cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80095ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095ee:	bf00      	nop
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b083      	sub	sp, #12
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009602:	bf00      	nop
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800960e:	b480      	push	{r7}
 8009610:	b083      	sub	sp, #12
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009616:	bf00      	nop
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800962a:	bf00      	nop
 800962c:	370c      	adds	r7, #12
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
	...

08009638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a40      	ldr	r2, [pc, #256]	; (800974c <TIM_Base_SetConfig+0x114>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d013      	beq.n	8009678 <TIM_Base_SetConfig+0x40>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009656:	d00f      	beq.n	8009678 <TIM_Base_SetConfig+0x40>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a3d      	ldr	r2, [pc, #244]	; (8009750 <TIM_Base_SetConfig+0x118>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d00b      	beq.n	8009678 <TIM_Base_SetConfig+0x40>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a3c      	ldr	r2, [pc, #240]	; (8009754 <TIM_Base_SetConfig+0x11c>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d007      	beq.n	8009678 <TIM_Base_SetConfig+0x40>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a3b      	ldr	r2, [pc, #236]	; (8009758 <TIM_Base_SetConfig+0x120>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d003      	beq.n	8009678 <TIM_Base_SetConfig+0x40>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a3a      	ldr	r2, [pc, #232]	; (800975c <TIM_Base_SetConfig+0x124>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d108      	bne.n	800968a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800967e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	4313      	orrs	r3, r2
 8009688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a2f      	ldr	r2, [pc, #188]	; (800974c <TIM_Base_SetConfig+0x114>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d02b      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009698:	d027      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a2c      	ldr	r2, [pc, #176]	; (8009750 <TIM_Base_SetConfig+0x118>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d023      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a2b      	ldr	r2, [pc, #172]	; (8009754 <TIM_Base_SetConfig+0x11c>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d01f      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a2a      	ldr	r2, [pc, #168]	; (8009758 <TIM_Base_SetConfig+0x120>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d01b      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a29      	ldr	r2, [pc, #164]	; (800975c <TIM_Base_SetConfig+0x124>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d017      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a28      	ldr	r2, [pc, #160]	; (8009760 <TIM_Base_SetConfig+0x128>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d013      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a27      	ldr	r2, [pc, #156]	; (8009764 <TIM_Base_SetConfig+0x12c>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d00f      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a26      	ldr	r2, [pc, #152]	; (8009768 <TIM_Base_SetConfig+0x130>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d00b      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a25      	ldr	r2, [pc, #148]	; (800976c <TIM_Base_SetConfig+0x134>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d007      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a24      	ldr	r2, [pc, #144]	; (8009770 <TIM_Base_SetConfig+0x138>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d003      	beq.n	80096ea <TIM_Base_SetConfig+0xb2>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a23      	ldr	r2, [pc, #140]	; (8009774 <TIM_Base_SetConfig+0x13c>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d108      	bne.n	80096fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	4313      	orrs	r3, r2
 8009708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	689a      	ldr	r2, [r3, #8]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a0a      	ldr	r2, [pc, #40]	; (800974c <TIM_Base_SetConfig+0x114>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d003      	beq.n	8009730 <TIM_Base_SetConfig+0xf8>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a0c      	ldr	r2, [pc, #48]	; (800975c <TIM_Base_SetConfig+0x124>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d103      	bne.n	8009738 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	691a      	ldr	r2, [r3, #16]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	615a      	str	r2, [r3, #20]
}
 800973e:	bf00      	nop
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	40010000 	.word	0x40010000
 8009750:	40000400 	.word	0x40000400
 8009754:	40000800 	.word	0x40000800
 8009758:	40000c00 	.word	0x40000c00
 800975c:	40010400 	.word	0x40010400
 8009760:	40014000 	.word	0x40014000
 8009764:	40014400 	.word	0x40014400
 8009768:	40014800 	.word	0x40014800
 800976c:	40001800 	.word	0x40001800
 8009770:	40001c00 	.word	0x40001c00
 8009774:	40002000 	.word	0x40002000

08009778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009778:	b480      	push	{r7}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	f023 0201 	bic.w	r2, r3, #1
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f023 0303 	bic.w	r3, r3, #3
 80097ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	f023 0302 	bic.w	r3, r3, #2
 80097c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a20      	ldr	r2, [pc, #128]	; (8009850 <TIM_OC1_SetConfig+0xd8>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d003      	beq.n	80097dc <TIM_OC1_SetConfig+0x64>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a1f      	ldr	r2, [pc, #124]	; (8009854 <TIM_OC1_SetConfig+0xdc>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d10c      	bne.n	80097f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	f023 0308 	bic.w	r3, r3, #8
 80097e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	f023 0304 	bic.w	r3, r3, #4
 80097f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4a15      	ldr	r2, [pc, #84]	; (8009850 <TIM_OC1_SetConfig+0xd8>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d003      	beq.n	8009806 <TIM_OC1_SetConfig+0x8e>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a14      	ldr	r2, [pc, #80]	; (8009854 <TIM_OC1_SetConfig+0xdc>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d111      	bne.n	800982a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800980c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	695b      	ldr	r3, [r3, #20]
 800981a:	693a      	ldr	r2, [r7, #16]
 800981c:	4313      	orrs	r3, r2
 800981e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	4313      	orrs	r3, r2
 8009828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	685a      	ldr	r2, [r3, #4]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	697a      	ldr	r2, [r7, #20]
 8009842:	621a      	str	r2, [r3, #32]
}
 8009844:	bf00      	nop
 8009846:	371c      	adds	r7, #28
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	40010000 	.word	0x40010000
 8009854:	40010400 	.word	0x40010400

08009858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009858:	b480      	push	{r7}
 800985a:	b087      	sub	sp, #28
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a1b      	ldr	r3, [r3, #32]
 8009866:	f023 0210 	bic.w	r2, r3, #16
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800988e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	021b      	lsls	r3, r3, #8
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	4313      	orrs	r3, r2
 800989a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	f023 0320 	bic.w	r3, r3, #32
 80098a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	011b      	lsls	r3, r3, #4
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a22      	ldr	r2, [pc, #136]	; (800993c <TIM_OC2_SetConfig+0xe4>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d003      	beq.n	80098c0 <TIM_OC2_SetConfig+0x68>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a21      	ldr	r2, [pc, #132]	; (8009940 <TIM_OC2_SetConfig+0xe8>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d10d      	bne.n	80098dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	011b      	lsls	r3, r3, #4
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a17      	ldr	r2, [pc, #92]	; (800993c <TIM_OC2_SetConfig+0xe4>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d003      	beq.n	80098ec <TIM_OC2_SetConfig+0x94>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4a16      	ldr	r2, [pc, #88]	; (8009940 <TIM_OC2_SetConfig+0xe8>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d113      	bne.n	8009914 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	695b      	ldr	r3, [r3, #20]
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	4313      	orrs	r3, r2
 8009906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	4313      	orrs	r3, r2
 8009912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	621a      	str	r2, [r3, #32]
}
 800992e:	bf00      	nop
 8009930:	371c      	adds	r7, #28
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	40010000 	.word	0x40010000
 8009940:	40010400 	.word	0x40010400

08009944 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009944:	b480      	push	{r7}
 8009946:	b087      	sub	sp, #28
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	69db      	ldr	r3, [r3, #28]
 800996a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f023 0303 	bic.w	r3, r3, #3
 800997a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	4313      	orrs	r3, r2
 8009984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800998c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	021b      	lsls	r3, r3, #8
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	4313      	orrs	r3, r2
 8009998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a21      	ldr	r2, [pc, #132]	; (8009a24 <TIM_OC3_SetConfig+0xe0>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d003      	beq.n	80099aa <TIM_OC3_SetConfig+0x66>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a20      	ldr	r2, [pc, #128]	; (8009a28 <TIM_OC3_SetConfig+0xe4>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d10d      	bne.n	80099c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	021b      	lsls	r3, r3, #8
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a16      	ldr	r2, [pc, #88]	; (8009a24 <TIM_OC3_SetConfig+0xe0>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d003      	beq.n	80099d6 <TIM_OC3_SetConfig+0x92>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a15      	ldr	r2, [pc, #84]	; (8009a28 <TIM_OC3_SetConfig+0xe4>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d113      	bne.n	80099fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	011b      	lsls	r3, r3, #4
 80099ec:	693a      	ldr	r2, [r7, #16]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	011b      	lsls	r3, r3, #4
 80099f8:	693a      	ldr	r2, [r7, #16]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	685a      	ldr	r2, [r3, #4]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	621a      	str	r2, [r3, #32]
}
 8009a18:	bf00      	nop
 8009a1a:	371c      	adds	r7, #28
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	40010000 	.word	0x40010000
 8009a28:	40010400 	.word	0x40010400

08009a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b087      	sub	sp, #28
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a1b      	ldr	r3, [r3, #32]
 8009a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	69db      	ldr	r3, [r3, #28]
 8009a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	021b      	lsls	r3, r3, #8
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	031b      	lsls	r3, r3, #12
 8009a7e:	693a      	ldr	r2, [r7, #16]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a12      	ldr	r2, [pc, #72]	; (8009ad0 <TIM_OC4_SetConfig+0xa4>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d003      	beq.n	8009a94 <TIM_OC4_SetConfig+0x68>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a11      	ldr	r2, [pc, #68]	; (8009ad4 <TIM_OC4_SetConfig+0xa8>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d109      	bne.n	8009aa8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	695b      	ldr	r3, [r3, #20]
 8009aa0:	019b      	lsls	r3, r3, #6
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	693a      	ldr	r2, [r7, #16]
 8009ac0:	621a      	str	r2, [r3, #32]
}
 8009ac2:	bf00      	nop
 8009ac4:	371c      	adds	r7, #28
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	40010000 	.word	0x40010000
 8009ad4:	40010400 	.word	0x40010400

08009ad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b087      	sub	sp, #28
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6a1b      	ldr	r3, [r3, #32]
 8009ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	f023 0201 	bic.w	r2, r3, #1
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	011b      	lsls	r3, r3, #4
 8009b08:	693a      	ldr	r2, [r7, #16]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	f023 030a 	bic.w	r3, r3, #10
 8009b14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	693a      	ldr	r2, [r7, #16]
 8009b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	697a      	ldr	r2, [r7, #20]
 8009b28:	621a      	str	r2, [r3, #32]
}
 8009b2a:	bf00      	nop
 8009b2c:	371c      	adds	r7, #28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b36:	b480      	push	{r7}
 8009b38:	b087      	sub	sp, #28
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	60f8      	str	r0, [r7, #12]
 8009b3e:	60b9      	str	r1, [r7, #8]
 8009b40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	f023 0210 	bic.w	r2, r3, #16
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6a1b      	ldr	r3, [r3, #32]
 8009b58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	031b      	lsls	r3, r3, #12
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	011b      	lsls	r3, r3, #4
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	693a      	ldr	r2, [r7, #16]
 8009b88:	621a      	str	r2, [r3, #32]
}
 8009b8a:	bf00      	nop
 8009b8c:	371c      	adds	r7, #28
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr

08009b96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b96:	b480      	push	{r7}
 8009b98:	b085      	sub	sp, #20
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
 8009b9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bae:	683a      	ldr	r2, [r7, #0]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	f043 0307 	orr.w	r3, r3, #7
 8009bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	609a      	str	r2, [r3, #8]
}
 8009bc0:	bf00      	nop
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b087      	sub	sp, #28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
 8009bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009be6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	021a      	lsls	r2, r3, #8
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	431a      	orrs	r2, r3
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	609a      	str	r2, [r3, #8]
}
 8009c00:	bf00      	nop
 8009c02:	371c      	adds	r7, #28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	f003 031f 	and.w	r3, r3, #31
 8009c1e:	2201      	movs	r2, #1
 8009c20:	fa02 f303 	lsl.w	r3, r2, r3
 8009c24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6a1a      	ldr	r2, [r3, #32]
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	43db      	mvns	r3, r3
 8009c2e:	401a      	ands	r2, r3
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6a1a      	ldr	r2, [r3, #32]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f003 031f 	and.w	r3, r3, #31
 8009c3e:	6879      	ldr	r1, [r7, #4]
 8009c40:	fa01 f303 	lsl.w	r3, r1, r3
 8009c44:	431a      	orrs	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	621a      	str	r2, [r3, #32]
}
 8009c4a:	bf00      	nop
 8009c4c:	371c      	adds	r7, #28
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
	...

08009c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d101      	bne.n	8009c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	e05a      	b.n	8009d26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a21      	ldr	r2, [pc, #132]	; (8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d022      	beq.n	8009cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cbc:	d01d      	beq.n	8009cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a1d      	ldr	r2, [pc, #116]	; (8009d38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d018      	beq.n	8009cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a1b      	ldr	r2, [pc, #108]	; (8009d3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d013      	beq.n	8009cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a1a      	ldr	r2, [pc, #104]	; (8009d40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d00e      	beq.n	8009cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a18      	ldr	r2, [pc, #96]	; (8009d44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d009      	beq.n	8009cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a17      	ldr	r2, [pc, #92]	; (8009d48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d004      	beq.n	8009cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a15      	ldr	r2, [pc, #84]	; (8009d4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d10c      	bne.n	8009d14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	40010000 	.word	0x40010000
 8009d38:	40000400 	.word	0x40000400
 8009d3c:	40000800 	.word	0x40000800
 8009d40:	40000c00 	.word	0x40000c00
 8009d44:	40010400 	.word	0x40010400
 8009d48:	40014000 	.word	0x40014000
 8009d4c:	40001800 	.word	0x40001800

08009d50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d101      	bne.n	8009d6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009d68:	2302      	movs	r3, #2
 8009d6a:	e03d      	b.n	8009de8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	695b      	ldr	r3, [r3, #20]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	69db      	ldr	r3, [r3, #28]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e03f      	b.n	8009eae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d106      	bne.n	8009e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f7fc f952 	bl	80060ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2224      	movs	r2, #36	; 0x24
 8009e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68da      	ldr	r2, [r3, #12]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 fddf 	bl	800aa24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	691a      	ldr	r2, [r3, #16]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	695a      	ldr	r2, [r3, #20]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68da      	ldr	r2, [r3, #12]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2220      	movs	r2, #32
 8009ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2220      	movs	r2, #32
 8009ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b08a      	sub	sp, #40	; 0x28
 8009eba:	af02      	add	r7, sp, #8
 8009ebc:	60f8      	str	r0, [r7, #12]
 8009ebe:	60b9      	str	r1, [r7, #8]
 8009ec0:	603b      	str	r3, [r7, #0]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b20      	cmp	r3, #32
 8009ed4:	d17c      	bne.n	8009fd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <HAL_UART_Transmit+0x2c>
 8009edc:	88fb      	ldrh	r3, [r7, #6]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d101      	bne.n	8009ee6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e075      	b.n	8009fd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d101      	bne.n	8009ef4 <HAL_UART_Transmit+0x3e>
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	e06e      	b.n	8009fd2 <HAL_UART_Transmit+0x11c>
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2221      	movs	r2, #33	; 0x21
 8009f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f0a:	f7fc fbf7 	bl	80066fc <HAL_GetTick>
 8009f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	88fa      	ldrh	r2, [r7, #6]
 8009f14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	88fa      	ldrh	r2, [r7, #6]
 8009f1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f24:	d108      	bne.n	8009f38 <HAL_UART_Transmit+0x82>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d104      	bne.n	8009f38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	61bb      	str	r3, [r7, #24]
 8009f36:	e003      	b.n	8009f40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009f48:	e02a      	b.n	8009fa0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	2200      	movs	r2, #0
 8009f52:	2180      	movs	r1, #128	; 0x80
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f000 fb1f 	bl	800a598 <UART_WaitOnFlagUntilTimeout>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d001      	beq.n	8009f64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009f60:	2303      	movs	r3, #3
 8009f62:	e036      	b.n	8009fd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10b      	bne.n	8009f82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	881b      	ldrh	r3, [r3, #0]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	3302      	adds	r3, #2
 8009f7e:	61bb      	str	r3, [r7, #24]
 8009f80:	e007      	b.n	8009f92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	781a      	ldrb	r2, [r3, #0]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1cf      	bne.n	8009f4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	2140      	movs	r1, #64	; 0x40
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 faef 	bl	800a598 <UART_WaitOnFlagUntilTimeout>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e006      	b.n	8009fd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2220      	movs	r2, #32
 8009fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	e000      	b.n	8009fd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009fd0:	2302      	movs	r3, #2
  }
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3720      	adds	r7, #32
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b084      	sub	sp, #16
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	60f8      	str	r0, [r7, #12]
 8009fe2:	60b9      	str	r1, [r7, #8]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	2b20      	cmp	r3, #32
 8009ff2:	d11d      	bne.n	800a030 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d002      	beq.n	800a000 <HAL_UART_Receive_IT+0x26>
 8009ffa:	88fb      	ldrh	r3, [r7, #6]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d101      	bne.n	800a004 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e016      	b.n	800a032 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d101      	bne.n	800a012 <HAL_UART_Receive_IT+0x38>
 800a00e:	2302      	movs	r3, #2
 800a010:	e00f      	b.n	800a032 <HAL_UART_Receive_IT+0x58>
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a020:	88fb      	ldrh	r3, [r7, #6]
 800a022:	461a      	mov	r2, r3
 800a024:	68b9      	ldr	r1, [r7, #8]
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f000 fb24 	bl	800a674 <UART_Start_Receive_IT>
 800a02c:	4603      	mov	r3, r0
 800a02e:	e000      	b.n	800a032 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a030:	2302      	movs	r3, #2
  }
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
	...

0800a03c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b0ba      	sub	sp, #232	; 0xe8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	695b      	ldr	r3, [r3, #20]
 800a05e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a062:	2300      	movs	r3, #0
 800a064:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a068:	2300      	movs	r3, #0
 800a06a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a072:	f003 030f 	and.w	r3, r3, #15
 800a076:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a07a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10f      	bne.n	800a0a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a086:	f003 0320 	and.w	r3, r3, #32
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d009      	beq.n	800a0a2 <HAL_UART_IRQHandler+0x66>
 800a08e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a092:	f003 0320 	and.w	r3, r3, #32
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fc07 	bl	800a8ae <UART_Receive_IT>
      return;
 800a0a0:	e256      	b.n	800a550 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a0a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f000 80de 	beq.w	800a268 <HAL_UART_IRQHandler+0x22c>
 800a0ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0b0:	f003 0301 	and.w	r3, r3, #1
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d106      	bne.n	800a0c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f000 80d1 	beq.w	800a268 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ca:	f003 0301 	and.w	r3, r3, #1
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00b      	beq.n	800a0ea <HAL_UART_IRQHandler+0xae>
 800a0d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d005      	beq.n	800a0ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e2:	f043 0201 	orr.w	r2, r3, #1
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a0ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ee:	f003 0304 	and.w	r3, r3, #4
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00b      	beq.n	800a10e <HAL_UART_IRQHandler+0xd2>
 800a0f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0fa:	f003 0301 	and.w	r3, r3, #1
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d005      	beq.n	800a10e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a106:	f043 0202 	orr.w	r2, r3, #2
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a112:	f003 0302 	and.w	r3, r3, #2
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00b      	beq.n	800a132 <HAL_UART_IRQHandler+0xf6>
 800a11a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a11e:	f003 0301 	and.w	r3, r3, #1
 800a122:	2b00      	cmp	r3, #0
 800a124:	d005      	beq.n	800a132 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12a:	f043 0204 	orr.w	r2, r3, #4
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a136:	f003 0308 	and.w	r3, r3, #8
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d011      	beq.n	800a162 <HAL_UART_IRQHandler+0x126>
 800a13e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a142:	f003 0320 	and.w	r3, r3, #32
 800a146:	2b00      	cmp	r3, #0
 800a148:	d105      	bne.n	800a156 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a14a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a14e:	f003 0301 	and.w	r3, r3, #1
 800a152:	2b00      	cmp	r3, #0
 800a154:	d005      	beq.n	800a162 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15a:	f043 0208 	orr.w	r2, r3, #8
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a166:	2b00      	cmp	r3, #0
 800a168:	f000 81ed 	beq.w	800a546 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a16c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a170:	f003 0320 	and.w	r3, r3, #32
 800a174:	2b00      	cmp	r3, #0
 800a176:	d008      	beq.n	800a18a <HAL_UART_IRQHandler+0x14e>
 800a178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a17c:	f003 0320 	and.w	r3, r3, #32
 800a180:	2b00      	cmp	r3, #0
 800a182:	d002      	beq.n	800a18a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 fb92 	bl	800a8ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	695b      	ldr	r3, [r3, #20]
 800a190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a194:	2b40      	cmp	r3, #64	; 0x40
 800a196:	bf0c      	ite	eq
 800a198:	2301      	moveq	r3, #1
 800a19a:	2300      	movne	r3, #0
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a6:	f003 0308 	and.w	r3, r3, #8
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d103      	bne.n	800a1b6 <HAL_UART_IRQHandler+0x17a>
 800a1ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d04f      	beq.n	800a256 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fa9a 	bl	800a6f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1c6:	2b40      	cmp	r3, #64	; 0x40
 800a1c8:	d141      	bne.n	800a24e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3314      	adds	r3, #20
 800a1d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a1d8:	e853 3f00 	ldrex	r3, [r3]
 800a1dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a1e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a1e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	3314      	adds	r3, #20
 800a1f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a1f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a1fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a202:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a206:	e841 2300 	strex	r3, r2, [r1]
 800a20a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a20e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d1d9      	bne.n	800a1ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d013      	beq.n	800a246 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a222:	4a7d      	ldr	r2, [pc, #500]	; (800a418 <HAL_UART_IRQHandler+0x3dc>)
 800a224:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fd f90c 	bl	8007448 <HAL_DMA_Abort_IT>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d016      	beq.n	800a264 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a240:	4610      	mov	r0, r2
 800a242:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a244:	e00e      	b.n	800a264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f990 	bl	800a56c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a24c:	e00a      	b.n	800a264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f98c 	bl	800a56c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a254:	e006      	b.n	800a264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 f988 	bl	800a56c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a262:	e170      	b.n	800a546 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a264:	bf00      	nop
    return;
 800a266:	e16e      	b.n	800a546 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	f040 814a 	bne.w	800a506 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a276:	f003 0310 	and.w	r3, r3, #16
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 8143 	beq.w	800a506 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a284:	f003 0310 	and.w	r3, r3, #16
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f000 813c 	beq.w	800a506 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a28e:	2300      	movs	r3, #0
 800a290:	60bb      	str	r3, [r7, #8]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	60bb      	str	r3, [r7, #8]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	60bb      	str	r3, [r7, #8]
 800a2a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ae:	2b40      	cmp	r3, #64	; 0x40
 800a2b0:	f040 80b4 	bne.w	800a41c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a2c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f000 8140 	beq.w	800a54a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a2ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	f080 8139 	bcs.w	800a54a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a2de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e4:	69db      	ldr	r3, [r3, #28]
 800a2e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2ea:	f000 8088 	beq.w	800a3fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	330c      	adds	r3, #12
 800a2f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a2fc:	e853 3f00 	ldrex	r3, [r3]
 800a300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a30c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	330c      	adds	r3, #12
 800a316:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a31a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a31e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a322:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a326:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a32a:	e841 2300 	strex	r3, r2, [r1]
 800a32e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a332:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1d9      	bne.n	800a2ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3314      	adds	r3, #20
 800a340:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a344:	e853 3f00 	ldrex	r3, [r3]
 800a348:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a34a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a34c:	f023 0301 	bic.w	r3, r3, #1
 800a350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	3314      	adds	r3, #20
 800a35a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a35e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a362:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a364:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a366:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a36a:	e841 2300 	strex	r3, r2, [r1]
 800a36e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1e1      	bne.n	800a33a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	3314      	adds	r3, #20
 800a37c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a380:	e853 3f00 	ldrex	r3, [r3]
 800a384:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a38c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3314      	adds	r3, #20
 800a396:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a39a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a39c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a3a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a3a2:	e841 2300 	strex	r3, r2, [r1]
 800a3a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a3a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1e3      	bne.n	800a376 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2220      	movs	r2, #32
 800a3b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	330c      	adds	r3, #12
 800a3c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c6:	e853 3f00 	ldrex	r3, [r3]
 800a3ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a3cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3ce:	f023 0310 	bic.w	r3, r3, #16
 800a3d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	330c      	adds	r3, #12
 800a3dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a3e0:	65ba      	str	r2, [r7, #88]	; 0x58
 800a3e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a3e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3e8:	e841 2300 	strex	r3, r2, [r1]
 800a3ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a3ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1e3      	bne.n	800a3bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7fc ffb5 	bl	8007368 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a406:	b29b      	uxth	r3, r3
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	4619      	mov	r1, r3
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 f8b6 	bl	800a580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a414:	e099      	b.n	800a54a <HAL_UART_IRQHandler+0x50e>
 800a416:	bf00      	nop
 800a418:	0800a7b7 	.word	0x0800a7b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a424:	b29b      	uxth	r3, r3
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a430:	b29b      	uxth	r3, r3
 800a432:	2b00      	cmp	r3, #0
 800a434:	f000 808b 	beq.w	800a54e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a438:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f000 8086 	beq.w	800a54e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	330c      	adds	r3, #12
 800a448:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	e853 3f00 	ldrex	r3, [r3]
 800a450:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a454:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a458:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	330c      	adds	r3, #12
 800a462:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a466:	647a      	str	r2, [r7, #68]	; 0x44
 800a468:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a46c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a46e:	e841 2300 	strex	r3, r2, [r1]
 800a472:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1e3      	bne.n	800a442 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	3314      	adds	r3, #20
 800a480:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a484:	e853 3f00 	ldrex	r3, [r3]
 800a488:	623b      	str	r3, [r7, #32]
   return(result);
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	f023 0301 	bic.w	r3, r3, #1
 800a490:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	3314      	adds	r3, #20
 800a49a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a49e:	633a      	str	r2, [r7, #48]	; 0x30
 800a4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4a6:	e841 2300 	strex	r3, r2, [r1]
 800a4aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1e3      	bne.n	800a47a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	330c      	adds	r3, #12
 800a4c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	e853 3f00 	ldrex	r3, [r3]
 800a4ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f023 0310 	bic.w	r3, r3, #16
 800a4d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	330c      	adds	r3, #12
 800a4e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a4e4:	61fa      	str	r2, [r7, #28]
 800a4e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e8:	69b9      	ldr	r1, [r7, #24]
 800a4ea:	69fa      	ldr	r2, [r7, #28]
 800a4ec:	e841 2300 	strex	r3, r2, [r1]
 800a4f0:	617b      	str	r3, [r7, #20]
   return(result);
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1e3      	bne.n	800a4c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a4f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 f83e 	bl	800a580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a504:	e023      	b.n	800a54e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a50a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d009      	beq.n	800a526 <HAL_UART_IRQHandler+0x4ea>
 800a512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d003      	beq.n	800a526 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 f95d 	bl	800a7de <UART_Transmit_IT>
    return;
 800a524:	e014      	b.n	800a550 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00e      	beq.n	800a550 <HAL_UART_IRQHandler+0x514>
 800a532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d008      	beq.n	800a550 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f99d 	bl	800a87e <UART_EndTransmit_IT>
    return;
 800a544:	e004      	b.n	800a550 <HAL_UART_IRQHandler+0x514>
    return;
 800a546:	bf00      	nop
 800a548:	e002      	b.n	800a550 <HAL_UART_IRQHandler+0x514>
      return;
 800a54a:	bf00      	nop
 800a54c:	e000      	b.n	800a550 <HAL_UART_IRQHandler+0x514>
      return;
 800a54e:	bf00      	nop
  }
}
 800a550:	37e8      	adds	r7, #232	; 0xe8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop

0800a558 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a560:	bf00      	nop
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a574:	bf00      	nop
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	460b      	mov	r3, r1
 800a58a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a58c:	bf00      	nop
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b090      	sub	sp, #64	; 0x40
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	603b      	str	r3, [r7, #0]
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5a8:	e050      	b.n	800a64c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b0:	d04c      	beq.n	800a64c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a5b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d007      	beq.n	800a5c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5b8:	f7fc f8a0 	bl	80066fc <HAL_GetTick>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d241      	bcs.n	800a64c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	330c      	adds	r3, #12
 800a5ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d2:	e853 3f00 	ldrex	r3, [r3]
 800a5d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a5de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	330c      	adds	r3, #12
 800a5e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a5e8:	637a      	str	r2, [r7, #52]	; 0x34
 800a5ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a5ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5f0:	e841 2300 	strex	r3, r2, [r1]
 800a5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1e5      	bne.n	800a5c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	3314      	adds	r3, #20
 800a602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	e853 3f00 	ldrex	r3, [r3]
 800a60a:	613b      	str	r3, [r7, #16]
   return(result);
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	f023 0301 	bic.w	r3, r3, #1
 800a612:	63bb      	str	r3, [r7, #56]	; 0x38
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	3314      	adds	r3, #20
 800a61a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a61c:	623a      	str	r2, [r7, #32]
 800a61e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a620:	69f9      	ldr	r1, [r7, #28]
 800a622:	6a3a      	ldr	r2, [r7, #32]
 800a624:	e841 2300 	strex	r3, r2, [r1]
 800a628:	61bb      	str	r3, [r7, #24]
   return(result);
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1e5      	bne.n	800a5fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2220      	movs	r2, #32
 800a634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2220      	movs	r2, #32
 800a63c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a648:	2303      	movs	r3, #3
 800a64a:	e00f      	b.n	800a66c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	4013      	ands	r3, r2
 800a656:	68ba      	ldr	r2, [r7, #8]
 800a658:	429a      	cmp	r2, r3
 800a65a:	bf0c      	ite	eq
 800a65c:	2301      	moveq	r3, #1
 800a65e:	2300      	movne	r3, #0
 800a660:	b2db      	uxtb	r3, r3
 800a662:	461a      	mov	r2, r3
 800a664:	79fb      	ldrb	r3, [r7, #7]
 800a666:	429a      	cmp	r2, r3
 800a668:	d09f      	beq.n	800a5aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3740      	adds	r7, #64	; 0x40
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	4613      	mov	r3, r2
 800a680:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	88fa      	ldrh	r2, [r7, #6]
 800a68c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	88fa      	ldrh	r2, [r7, #6]
 800a692:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2222      	movs	r2, #34	; 0x22
 800a69e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d007      	beq.n	800a6c2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68da      	ldr	r2, [r3, #12]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a6c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	695a      	ldr	r2, [r3, #20]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f042 0201 	orr.w	r2, r2, #1
 800a6d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68da      	ldr	r2, [r3, #12]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f042 0220 	orr.w	r2, r2, #32
 800a6e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b095      	sub	sp, #84	; 0x54
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	330c      	adds	r3, #12
 800a6fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a702:	e853 3f00 	ldrex	r3, [r3]
 800a706:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a70e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	330c      	adds	r3, #12
 800a716:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a718:	643a      	str	r2, [r7, #64]	; 0x40
 800a71a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a71e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a720:	e841 2300 	strex	r3, r2, [r1]
 800a724:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1e5      	bne.n	800a6f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	3314      	adds	r3, #20
 800a732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	e853 3f00 	ldrex	r3, [r3]
 800a73a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	f023 0301 	bic.w	r3, r3, #1
 800a742:	64bb      	str	r3, [r7, #72]	; 0x48
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	3314      	adds	r3, #20
 800a74a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a74c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a74e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a754:	e841 2300 	strex	r3, r2, [r1]
 800a758:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1e5      	bne.n	800a72c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a764:	2b01      	cmp	r3, #1
 800a766:	d119      	bne.n	800a79c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	330c      	adds	r3, #12
 800a76e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	e853 3f00 	ldrex	r3, [r3]
 800a776:	60bb      	str	r3, [r7, #8]
   return(result);
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f023 0310 	bic.w	r3, r3, #16
 800a77e:	647b      	str	r3, [r7, #68]	; 0x44
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	330c      	adds	r3, #12
 800a786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a788:	61ba      	str	r2, [r7, #24]
 800a78a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78c:	6979      	ldr	r1, [r7, #20]
 800a78e:	69ba      	ldr	r2, [r7, #24]
 800a790:	e841 2300 	strex	r3, r2, [r1]
 800a794:	613b      	str	r3, [r7, #16]
   return(result);
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1e5      	bne.n	800a768 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2220      	movs	r2, #32
 800a7a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a7aa:	bf00      	nop
 800a7ac:	3754      	adds	r7, #84	; 0x54
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b084      	sub	sp, #16
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f7ff fecb 	bl	800a56c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7d6:	bf00      	nop
 800a7d8:	3710      	adds	r7, #16
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b085      	sub	sp, #20
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	2b21      	cmp	r3, #33	; 0x21
 800a7f0:	d13e      	bne.n	800a870 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7fa:	d114      	bne.n	800a826 <UART_Transmit_IT+0x48>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d110      	bne.n	800a826 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a1b      	ldr	r3, [r3, #32]
 800a808:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	881b      	ldrh	r3, [r3, #0]
 800a80e:	461a      	mov	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a818:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a1b      	ldr	r3, [r3, #32]
 800a81e:	1c9a      	adds	r2, r3, #2
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	621a      	str	r2, [r3, #32]
 800a824:	e008      	b.n	800a838 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	1c59      	adds	r1, r3, #1
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	6211      	str	r1, [r2, #32]
 800a830:	781a      	ldrb	r2, [r3, #0]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	3b01      	subs	r3, #1
 800a840:	b29b      	uxth	r3, r3
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	4619      	mov	r1, r3
 800a846:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d10f      	bne.n	800a86c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68da      	ldr	r2, [r3, #12]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a85a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68da      	ldr	r2, [r3, #12]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a86a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a86c:	2300      	movs	r3, #0
 800a86e:	e000      	b.n	800a872 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a870:	2302      	movs	r3, #2
  }
}
 800a872:	4618      	mov	r0, r3
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b082      	sub	sp, #8
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68da      	ldr	r2, [r3, #12]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a894:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2220      	movs	r2, #32
 800a89a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f7ff fe5a 	bl	800a558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b08c      	sub	sp, #48	; 0x30
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	2b22      	cmp	r3, #34	; 0x22
 800a8c0:	f040 80ab 	bne.w	800aa1a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8cc:	d117      	bne.n	800a8fe <UART_Receive_IT+0x50>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d113      	bne.n	800a8fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8f6:	1c9a      	adds	r2, r3, #2
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	629a      	str	r2, [r3, #40]	; 0x28
 800a8fc:	e026      	b.n	800a94c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a902:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a904:	2300      	movs	r3, #0
 800a906:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a910:	d007      	beq.n	800a922 <UART_Receive_IT+0x74>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d10a      	bne.n	800a930 <UART_Receive_IT+0x82>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d106      	bne.n	800a930 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92c:	701a      	strb	r2, [r3, #0]
 800a92e:	e008      	b.n	800a942 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	b2db      	uxtb	r3, r3
 800a938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a940:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a946:	1c5a      	adds	r2, r3, #1
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a950:	b29b      	uxth	r3, r3
 800a952:	3b01      	subs	r3, #1
 800a954:	b29b      	uxth	r3, r3
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	4619      	mov	r1, r3
 800a95a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d15a      	bne.n	800aa16 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68da      	ldr	r2, [r3, #12]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f022 0220 	bic.w	r2, r2, #32
 800a96e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	68da      	ldr	r2, [r3, #12]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a97e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	695a      	ldr	r2, [r3, #20]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f022 0201 	bic.w	r2, r2, #1
 800a98e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2220      	movs	r2, #32
 800a994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d135      	bne.n	800aa0c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	330c      	adds	r3, #12
 800a9ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	e853 3f00 	ldrex	r3, [r3]
 800a9b4:	613b      	str	r3, [r7, #16]
   return(result);
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	f023 0310 	bic.w	r3, r3, #16
 800a9bc:	627b      	str	r3, [r7, #36]	; 0x24
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	330c      	adds	r3, #12
 800a9c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9c6:	623a      	str	r2, [r7, #32]
 800a9c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ca:	69f9      	ldr	r1, [r7, #28]
 800a9cc:	6a3a      	ldr	r2, [r7, #32]
 800a9ce:	e841 2300 	strex	r3, r2, [r1]
 800a9d2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1e5      	bne.n	800a9a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 0310 	and.w	r3, r3, #16
 800a9e4:	2b10      	cmp	r3, #16
 800a9e6:	d10a      	bne.n	800a9fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	60fb      	str	r3, [r7, #12]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	60fb      	str	r3, [r7, #12]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	60fb      	str	r3, [r7, #12]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa02:	4619      	mov	r1, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7ff fdbb 	bl	800a580 <HAL_UARTEx_RxEventCallback>
 800aa0a:	e002      	b.n	800aa12 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f7f9 fc05 	bl	800421c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	e002      	b.n	800aa1c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	e000      	b.n	800aa1c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800aa1a:	2302      	movs	r3, #2
  }
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3730      	adds	r7, #48	; 0x30
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa28:	b0c0      	sub	sp, #256	; 0x100
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aa3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa40:	68d9      	ldr	r1, [r3, #12]
 800aa42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	ea40 0301 	orr.w	r3, r0, r1
 800aa4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aa4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa52:	689a      	ldr	r2, [r3, #8]
 800aa54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	431a      	orrs	r2, r3
 800aa5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa60:	695b      	ldr	r3, [r3, #20]
 800aa62:	431a      	orrs	r2, r3
 800aa64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa68:	69db      	ldr	r3, [r3, #28]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aa70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aa7c:	f021 010c 	bic.w	r1, r1, #12
 800aa80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa8a:	430b      	orrs	r3, r1
 800aa8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aa8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	695b      	ldr	r3, [r3, #20]
 800aa96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aa9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa9e:	6999      	ldr	r1, [r3, #24]
 800aaa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	ea40 0301 	orr.w	r3, r0, r1
 800aaaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aaac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	4b8f      	ldr	r3, [pc, #572]	; (800acf0 <UART_SetConfig+0x2cc>)
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d005      	beq.n	800aac4 <UART_SetConfig+0xa0>
 800aab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	4b8d      	ldr	r3, [pc, #564]	; (800acf4 <UART_SetConfig+0x2d0>)
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d104      	bne.n	800aace <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aac4:	f7fe f8a0 	bl	8008c08 <HAL_RCC_GetPCLK2Freq>
 800aac8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800aacc:	e003      	b.n	800aad6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aace:	f7fe f887 	bl	8008be0 <HAL_RCC_GetPCLK1Freq>
 800aad2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aada:	69db      	ldr	r3, [r3, #28]
 800aadc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aae0:	f040 810c 	bne.w	800acfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aae8:	2200      	movs	r2, #0
 800aaea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aaee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800aaf2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800aaf6:	4622      	mov	r2, r4
 800aaf8:	462b      	mov	r3, r5
 800aafa:	1891      	adds	r1, r2, r2
 800aafc:	65b9      	str	r1, [r7, #88]	; 0x58
 800aafe:	415b      	adcs	r3, r3
 800ab00:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ab06:	4621      	mov	r1, r4
 800ab08:	eb12 0801 	adds.w	r8, r2, r1
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	eb43 0901 	adc.w	r9, r3, r1
 800ab12:	f04f 0200 	mov.w	r2, #0
 800ab16:	f04f 0300 	mov.w	r3, #0
 800ab1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ab1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ab22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ab26:	4690      	mov	r8, r2
 800ab28:	4699      	mov	r9, r3
 800ab2a:	4623      	mov	r3, r4
 800ab2c:	eb18 0303 	adds.w	r3, r8, r3
 800ab30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab34:	462b      	mov	r3, r5
 800ab36:	eb49 0303 	adc.w	r3, r9, r3
 800ab3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ab3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ab4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ab4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ab52:	460b      	mov	r3, r1
 800ab54:	18db      	adds	r3, r3, r3
 800ab56:	653b      	str	r3, [r7, #80]	; 0x50
 800ab58:	4613      	mov	r3, r2
 800ab5a:	eb42 0303 	adc.w	r3, r2, r3
 800ab5e:	657b      	str	r3, [r7, #84]	; 0x54
 800ab60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ab64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ab68:	f7f6 f89e 	bl	8000ca8 <__aeabi_uldivmod>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	460b      	mov	r3, r1
 800ab70:	4b61      	ldr	r3, [pc, #388]	; (800acf8 <UART_SetConfig+0x2d4>)
 800ab72:	fba3 2302 	umull	r2, r3, r3, r2
 800ab76:	095b      	lsrs	r3, r3, #5
 800ab78:	011c      	lsls	r4, r3, #4
 800ab7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ab88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ab8c:	4642      	mov	r2, r8
 800ab8e:	464b      	mov	r3, r9
 800ab90:	1891      	adds	r1, r2, r2
 800ab92:	64b9      	str	r1, [r7, #72]	; 0x48
 800ab94:	415b      	adcs	r3, r3
 800ab96:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ab9c:	4641      	mov	r1, r8
 800ab9e:	eb12 0a01 	adds.w	sl, r2, r1
 800aba2:	4649      	mov	r1, r9
 800aba4:	eb43 0b01 	adc.w	fp, r3, r1
 800aba8:	f04f 0200 	mov.w	r2, #0
 800abac:	f04f 0300 	mov.w	r3, #0
 800abb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800abb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800abb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800abbc:	4692      	mov	sl, r2
 800abbe:	469b      	mov	fp, r3
 800abc0:	4643      	mov	r3, r8
 800abc2:	eb1a 0303 	adds.w	r3, sl, r3
 800abc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800abca:	464b      	mov	r3, r9
 800abcc:	eb4b 0303 	adc.w	r3, fp, r3
 800abd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800abd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800abe0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800abe4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800abe8:	460b      	mov	r3, r1
 800abea:	18db      	adds	r3, r3, r3
 800abec:	643b      	str	r3, [r7, #64]	; 0x40
 800abee:	4613      	mov	r3, r2
 800abf0:	eb42 0303 	adc.w	r3, r2, r3
 800abf4:	647b      	str	r3, [r7, #68]	; 0x44
 800abf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800abfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800abfe:	f7f6 f853 	bl	8000ca8 <__aeabi_uldivmod>
 800ac02:	4602      	mov	r2, r0
 800ac04:	460b      	mov	r3, r1
 800ac06:	4611      	mov	r1, r2
 800ac08:	4b3b      	ldr	r3, [pc, #236]	; (800acf8 <UART_SetConfig+0x2d4>)
 800ac0a:	fba3 2301 	umull	r2, r3, r3, r1
 800ac0e:	095b      	lsrs	r3, r3, #5
 800ac10:	2264      	movs	r2, #100	; 0x64
 800ac12:	fb02 f303 	mul.w	r3, r2, r3
 800ac16:	1acb      	subs	r3, r1, r3
 800ac18:	00db      	lsls	r3, r3, #3
 800ac1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ac1e:	4b36      	ldr	r3, [pc, #216]	; (800acf8 <UART_SetConfig+0x2d4>)
 800ac20:	fba3 2302 	umull	r2, r3, r3, r2
 800ac24:	095b      	lsrs	r3, r3, #5
 800ac26:	005b      	lsls	r3, r3, #1
 800ac28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ac2c:	441c      	add	r4, r3
 800ac2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac32:	2200      	movs	r2, #0
 800ac34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ac3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ac40:	4642      	mov	r2, r8
 800ac42:	464b      	mov	r3, r9
 800ac44:	1891      	adds	r1, r2, r2
 800ac46:	63b9      	str	r1, [r7, #56]	; 0x38
 800ac48:	415b      	adcs	r3, r3
 800ac4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ac50:	4641      	mov	r1, r8
 800ac52:	1851      	adds	r1, r2, r1
 800ac54:	6339      	str	r1, [r7, #48]	; 0x30
 800ac56:	4649      	mov	r1, r9
 800ac58:	414b      	adcs	r3, r1
 800ac5a:	637b      	str	r3, [r7, #52]	; 0x34
 800ac5c:	f04f 0200 	mov.w	r2, #0
 800ac60:	f04f 0300 	mov.w	r3, #0
 800ac64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ac68:	4659      	mov	r1, fp
 800ac6a:	00cb      	lsls	r3, r1, #3
 800ac6c:	4651      	mov	r1, sl
 800ac6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac72:	4651      	mov	r1, sl
 800ac74:	00ca      	lsls	r2, r1, #3
 800ac76:	4610      	mov	r0, r2
 800ac78:	4619      	mov	r1, r3
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	4642      	mov	r2, r8
 800ac7e:	189b      	adds	r3, r3, r2
 800ac80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac84:	464b      	mov	r3, r9
 800ac86:	460a      	mov	r2, r1
 800ac88:	eb42 0303 	adc.w	r3, r2, r3
 800ac8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ac9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aca0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aca4:	460b      	mov	r3, r1
 800aca6:	18db      	adds	r3, r3, r3
 800aca8:	62bb      	str	r3, [r7, #40]	; 0x28
 800acaa:	4613      	mov	r3, r2
 800acac:	eb42 0303 	adc.w	r3, r2, r3
 800acb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800acb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800acba:	f7f5 fff5 	bl	8000ca8 <__aeabi_uldivmod>
 800acbe:	4602      	mov	r2, r0
 800acc0:	460b      	mov	r3, r1
 800acc2:	4b0d      	ldr	r3, [pc, #52]	; (800acf8 <UART_SetConfig+0x2d4>)
 800acc4:	fba3 1302 	umull	r1, r3, r3, r2
 800acc8:	095b      	lsrs	r3, r3, #5
 800acca:	2164      	movs	r1, #100	; 0x64
 800accc:	fb01 f303 	mul.w	r3, r1, r3
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	00db      	lsls	r3, r3, #3
 800acd4:	3332      	adds	r3, #50	; 0x32
 800acd6:	4a08      	ldr	r2, [pc, #32]	; (800acf8 <UART_SetConfig+0x2d4>)
 800acd8:	fba2 2303 	umull	r2, r3, r2, r3
 800acdc:	095b      	lsrs	r3, r3, #5
 800acde:	f003 0207 	and.w	r2, r3, #7
 800ace2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4422      	add	r2, r4
 800acea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800acec:	e105      	b.n	800aefa <UART_SetConfig+0x4d6>
 800acee:	bf00      	nop
 800acf0:	40011000 	.word	0x40011000
 800acf4:	40011400 	.word	0x40011400
 800acf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800acfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad00:	2200      	movs	r2, #0
 800ad02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ad06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ad0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ad0e:	4642      	mov	r2, r8
 800ad10:	464b      	mov	r3, r9
 800ad12:	1891      	adds	r1, r2, r2
 800ad14:	6239      	str	r1, [r7, #32]
 800ad16:	415b      	adcs	r3, r3
 800ad18:	627b      	str	r3, [r7, #36]	; 0x24
 800ad1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ad1e:	4641      	mov	r1, r8
 800ad20:	1854      	adds	r4, r2, r1
 800ad22:	4649      	mov	r1, r9
 800ad24:	eb43 0501 	adc.w	r5, r3, r1
 800ad28:	f04f 0200 	mov.w	r2, #0
 800ad2c:	f04f 0300 	mov.w	r3, #0
 800ad30:	00eb      	lsls	r3, r5, #3
 800ad32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad36:	00e2      	lsls	r2, r4, #3
 800ad38:	4614      	mov	r4, r2
 800ad3a:	461d      	mov	r5, r3
 800ad3c:	4643      	mov	r3, r8
 800ad3e:	18e3      	adds	r3, r4, r3
 800ad40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ad44:	464b      	mov	r3, r9
 800ad46:	eb45 0303 	adc.w	r3, r5, r3
 800ad4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ad4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ad5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ad5e:	f04f 0200 	mov.w	r2, #0
 800ad62:	f04f 0300 	mov.w	r3, #0
 800ad66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ad6a:	4629      	mov	r1, r5
 800ad6c:	008b      	lsls	r3, r1, #2
 800ad6e:	4621      	mov	r1, r4
 800ad70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad74:	4621      	mov	r1, r4
 800ad76:	008a      	lsls	r2, r1, #2
 800ad78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ad7c:	f7f5 ff94 	bl	8000ca8 <__aeabi_uldivmod>
 800ad80:	4602      	mov	r2, r0
 800ad82:	460b      	mov	r3, r1
 800ad84:	4b60      	ldr	r3, [pc, #384]	; (800af08 <UART_SetConfig+0x4e4>)
 800ad86:	fba3 2302 	umull	r2, r3, r3, r2
 800ad8a:	095b      	lsrs	r3, r3, #5
 800ad8c:	011c      	lsls	r4, r3, #4
 800ad8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad92:	2200      	movs	r2, #0
 800ad94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ad98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ad9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ada0:	4642      	mov	r2, r8
 800ada2:	464b      	mov	r3, r9
 800ada4:	1891      	adds	r1, r2, r2
 800ada6:	61b9      	str	r1, [r7, #24]
 800ada8:	415b      	adcs	r3, r3
 800adaa:	61fb      	str	r3, [r7, #28]
 800adac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800adb0:	4641      	mov	r1, r8
 800adb2:	1851      	adds	r1, r2, r1
 800adb4:	6139      	str	r1, [r7, #16]
 800adb6:	4649      	mov	r1, r9
 800adb8:	414b      	adcs	r3, r1
 800adba:	617b      	str	r3, [r7, #20]
 800adbc:	f04f 0200 	mov.w	r2, #0
 800adc0:	f04f 0300 	mov.w	r3, #0
 800adc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800adc8:	4659      	mov	r1, fp
 800adca:	00cb      	lsls	r3, r1, #3
 800adcc:	4651      	mov	r1, sl
 800adce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800add2:	4651      	mov	r1, sl
 800add4:	00ca      	lsls	r2, r1, #3
 800add6:	4610      	mov	r0, r2
 800add8:	4619      	mov	r1, r3
 800adda:	4603      	mov	r3, r0
 800addc:	4642      	mov	r2, r8
 800adde:	189b      	adds	r3, r3, r2
 800ade0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ade4:	464b      	mov	r3, r9
 800ade6:	460a      	mov	r2, r1
 800ade8:	eb42 0303 	adc.w	r3, r2, r3
 800adec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800adf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	67bb      	str	r3, [r7, #120]	; 0x78
 800adfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800adfc:	f04f 0200 	mov.w	r2, #0
 800ae00:	f04f 0300 	mov.w	r3, #0
 800ae04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ae08:	4649      	mov	r1, r9
 800ae0a:	008b      	lsls	r3, r1, #2
 800ae0c:	4641      	mov	r1, r8
 800ae0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae12:	4641      	mov	r1, r8
 800ae14:	008a      	lsls	r2, r1, #2
 800ae16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ae1a:	f7f5 ff45 	bl	8000ca8 <__aeabi_uldivmod>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	460b      	mov	r3, r1
 800ae22:	4b39      	ldr	r3, [pc, #228]	; (800af08 <UART_SetConfig+0x4e4>)
 800ae24:	fba3 1302 	umull	r1, r3, r3, r2
 800ae28:	095b      	lsrs	r3, r3, #5
 800ae2a:	2164      	movs	r1, #100	; 0x64
 800ae2c:	fb01 f303 	mul.w	r3, r1, r3
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	011b      	lsls	r3, r3, #4
 800ae34:	3332      	adds	r3, #50	; 0x32
 800ae36:	4a34      	ldr	r2, [pc, #208]	; (800af08 <UART_SetConfig+0x4e4>)
 800ae38:	fba2 2303 	umull	r2, r3, r2, r3
 800ae3c:	095b      	lsrs	r3, r3, #5
 800ae3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae42:	441c      	add	r4, r3
 800ae44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae48:	2200      	movs	r2, #0
 800ae4a:	673b      	str	r3, [r7, #112]	; 0x70
 800ae4c:	677a      	str	r2, [r7, #116]	; 0x74
 800ae4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ae52:	4642      	mov	r2, r8
 800ae54:	464b      	mov	r3, r9
 800ae56:	1891      	adds	r1, r2, r2
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	415b      	adcs	r3, r3
 800ae5c:	60fb      	str	r3, [r7, #12]
 800ae5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae62:	4641      	mov	r1, r8
 800ae64:	1851      	adds	r1, r2, r1
 800ae66:	6039      	str	r1, [r7, #0]
 800ae68:	4649      	mov	r1, r9
 800ae6a:	414b      	adcs	r3, r1
 800ae6c:	607b      	str	r3, [r7, #4]
 800ae6e:	f04f 0200 	mov.w	r2, #0
 800ae72:	f04f 0300 	mov.w	r3, #0
 800ae76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ae7a:	4659      	mov	r1, fp
 800ae7c:	00cb      	lsls	r3, r1, #3
 800ae7e:	4651      	mov	r1, sl
 800ae80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae84:	4651      	mov	r1, sl
 800ae86:	00ca      	lsls	r2, r1, #3
 800ae88:	4610      	mov	r0, r2
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	4642      	mov	r2, r8
 800ae90:	189b      	adds	r3, r3, r2
 800ae92:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae94:	464b      	mov	r3, r9
 800ae96:	460a      	mov	r2, r1
 800ae98:	eb42 0303 	adc.w	r3, r2, r3
 800ae9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	2200      	movs	r2, #0
 800aea6:	663b      	str	r3, [r7, #96]	; 0x60
 800aea8:	667a      	str	r2, [r7, #100]	; 0x64
 800aeaa:	f04f 0200 	mov.w	r2, #0
 800aeae:	f04f 0300 	mov.w	r3, #0
 800aeb2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800aeb6:	4649      	mov	r1, r9
 800aeb8:	008b      	lsls	r3, r1, #2
 800aeba:	4641      	mov	r1, r8
 800aebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aec0:	4641      	mov	r1, r8
 800aec2:	008a      	lsls	r2, r1, #2
 800aec4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aec8:	f7f5 feee 	bl	8000ca8 <__aeabi_uldivmod>
 800aecc:	4602      	mov	r2, r0
 800aece:	460b      	mov	r3, r1
 800aed0:	4b0d      	ldr	r3, [pc, #52]	; (800af08 <UART_SetConfig+0x4e4>)
 800aed2:	fba3 1302 	umull	r1, r3, r3, r2
 800aed6:	095b      	lsrs	r3, r3, #5
 800aed8:	2164      	movs	r1, #100	; 0x64
 800aeda:	fb01 f303 	mul.w	r3, r1, r3
 800aede:	1ad3      	subs	r3, r2, r3
 800aee0:	011b      	lsls	r3, r3, #4
 800aee2:	3332      	adds	r3, #50	; 0x32
 800aee4:	4a08      	ldr	r2, [pc, #32]	; (800af08 <UART_SetConfig+0x4e4>)
 800aee6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeea:	095b      	lsrs	r3, r3, #5
 800aeec:	f003 020f 	and.w	r2, r3, #15
 800aef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4422      	add	r2, r4
 800aef8:	609a      	str	r2, [r3, #8]
}
 800aefa:	bf00      	nop
 800aefc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800af00:	46bd      	mov	sp, r7
 800af02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af06:	bf00      	nop
 800af08:	51eb851f 	.word	0x51eb851f

0800af0c <__assert_func>:
 800af0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af0e:	4614      	mov	r4, r2
 800af10:	461a      	mov	r2, r3
 800af12:	4b09      	ldr	r3, [pc, #36]	; (800af38 <__assert_func+0x2c>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4605      	mov	r5, r0
 800af18:	68d8      	ldr	r0, [r3, #12]
 800af1a:	b14c      	cbz	r4, 800af30 <__assert_func+0x24>
 800af1c:	4b07      	ldr	r3, [pc, #28]	; (800af3c <__assert_func+0x30>)
 800af1e:	9100      	str	r1, [sp, #0]
 800af20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af24:	4906      	ldr	r1, [pc, #24]	; (800af40 <__assert_func+0x34>)
 800af26:	462b      	mov	r3, r5
 800af28:	f000 f814 	bl	800af54 <fiprintf>
 800af2c:	f002 f9ca 	bl	800d2c4 <abort>
 800af30:	4b04      	ldr	r3, [pc, #16]	; (800af44 <__assert_func+0x38>)
 800af32:	461c      	mov	r4, r3
 800af34:	e7f3      	b.n	800af1e <__assert_func+0x12>
 800af36:	bf00      	nop
 800af38:	200013ec 	.word	0x200013ec
 800af3c:	080104d4 	.word	0x080104d4
 800af40:	080104e1 	.word	0x080104e1
 800af44:	0801050f 	.word	0x0801050f

0800af48 <__errno>:
 800af48:	4b01      	ldr	r3, [pc, #4]	; (800af50 <__errno+0x8>)
 800af4a:	6818      	ldr	r0, [r3, #0]
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	200013ec 	.word	0x200013ec

0800af54 <fiprintf>:
 800af54:	b40e      	push	{r1, r2, r3}
 800af56:	b503      	push	{r0, r1, lr}
 800af58:	4601      	mov	r1, r0
 800af5a:	ab03      	add	r3, sp, #12
 800af5c:	4805      	ldr	r0, [pc, #20]	; (800af74 <fiprintf+0x20>)
 800af5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af62:	6800      	ldr	r0, [r0, #0]
 800af64:	9301      	str	r3, [sp, #4]
 800af66:	f000 f94d 	bl	800b204 <_vfiprintf_r>
 800af6a:	b002      	add	sp, #8
 800af6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800af70:	b003      	add	sp, #12
 800af72:	4770      	bx	lr
 800af74:	200013ec 	.word	0x200013ec

0800af78 <__libc_init_array>:
 800af78:	b570      	push	{r4, r5, r6, lr}
 800af7a:	4d0d      	ldr	r5, [pc, #52]	; (800afb0 <__libc_init_array+0x38>)
 800af7c:	4c0d      	ldr	r4, [pc, #52]	; (800afb4 <__libc_init_array+0x3c>)
 800af7e:	1b64      	subs	r4, r4, r5
 800af80:	10a4      	asrs	r4, r4, #2
 800af82:	2600      	movs	r6, #0
 800af84:	42a6      	cmp	r6, r4
 800af86:	d109      	bne.n	800af9c <__libc_init_array+0x24>
 800af88:	4d0b      	ldr	r5, [pc, #44]	; (800afb8 <__libc_init_array+0x40>)
 800af8a:	4c0c      	ldr	r4, [pc, #48]	; (800afbc <__libc_init_array+0x44>)
 800af8c:	f005 f97a 	bl	8010284 <_init>
 800af90:	1b64      	subs	r4, r4, r5
 800af92:	10a4      	asrs	r4, r4, #2
 800af94:	2600      	movs	r6, #0
 800af96:	42a6      	cmp	r6, r4
 800af98:	d105      	bne.n	800afa6 <__libc_init_array+0x2e>
 800af9a:	bd70      	pop	{r4, r5, r6, pc}
 800af9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800afa0:	4798      	blx	r3
 800afa2:	3601      	adds	r6, #1
 800afa4:	e7ee      	b.n	800af84 <__libc_init_array+0xc>
 800afa6:	f855 3b04 	ldr.w	r3, [r5], #4
 800afaa:	4798      	blx	r3
 800afac:	3601      	adds	r6, #1
 800afae:	e7f2      	b.n	800af96 <__libc_init_array+0x1e>
 800afb0:	080109f8 	.word	0x080109f8
 800afb4:	080109f8 	.word	0x080109f8
 800afb8:	080109f8 	.word	0x080109f8
 800afbc:	080109fc 	.word	0x080109fc

0800afc0 <malloc>:
 800afc0:	4b02      	ldr	r3, [pc, #8]	; (800afcc <malloc+0xc>)
 800afc2:	4601      	mov	r1, r0
 800afc4:	6818      	ldr	r0, [r3, #0]
 800afc6:	f000 b87f 	b.w	800b0c8 <_malloc_r>
 800afca:	bf00      	nop
 800afcc:	200013ec 	.word	0x200013ec

0800afd0 <free>:
 800afd0:	4b02      	ldr	r3, [pc, #8]	; (800afdc <free+0xc>)
 800afd2:	4601      	mov	r1, r0
 800afd4:	6818      	ldr	r0, [r3, #0]
 800afd6:	f000 b80b 	b.w	800aff0 <_free_r>
 800afda:	bf00      	nop
 800afdc:	200013ec 	.word	0x200013ec

0800afe0 <memset>:
 800afe0:	4402      	add	r2, r0
 800afe2:	4603      	mov	r3, r0
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d100      	bne.n	800afea <memset+0xa>
 800afe8:	4770      	bx	lr
 800afea:	f803 1b01 	strb.w	r1, [r3], #1
 800afee:	e7f9      	b.n	800afe4 <memset+0x4>

0800aff0 <_free_r>:
 800aff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aff2:	2900      	cmp	r1, #0
 800aff4:	d044      	beq.n	800b080 <_free_r+0x90>
 800aff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800affa:	9001      	str	r0, [sp, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	f1a1 0404 	sub.w	r4, r1, #4
 800b002:	bfb8      	it	lt
 800b004:	18e4      	addlt	r4, r4, r3
 800b006:	f003 fdd1 	bl	800ebac <__malloc_lock>
 800b00a:	4a1e      	ldr	r2, [pc, #120]	; (800b084 <_free_r+0x94>)
 800b00c:	9801      	ldr	r0, [sp, #4]
 800b00e:	6813      	ldr	r3, [r2, #0]
 800b010:	b933      	cbnz	r3, 800b020 <_free_r+0x30>
 800b012:	6063      	str	r3, [r4, #4]
 800b014:	6014      	str	r4, [r2, #0]
 800b016:	b003      	add	sp, #12
 800b018:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b01c:	f003 bdcc 	b.w	800ebb8 <__malloc_unlock>
 800b020:	42a3      	cmp	r3, r4
 800b022:	d908      	bls.n	800b036 <_free_r+0x46>
 800b024:	6825      	ldr	r5, [r4, #0]
 800b026:	1961      	adds	r1, r4, r5
 800b028:	428b      	cmp	r3, r1
 800b02a:	bf01      	itttt	eq
 800b02c:	6819      	ldreq	r1, [r3, #0]
 800b02e:	685b      	ldreq	r3, [r3, #4]
 800b030:	1949      	addeq	r1, r1, r5
 800b032:	6021      	streq	r1, [r4, #0]
 800b034:	e7ed      	b.n	800b012 <_free_r+0x22>
 800b036:	461a      	mov	r2, r3
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	b10b      	cbz	r3, 800b040 <_free_r+0x50>
 800b03c:	42a3      	cmp	r3, r4
 800b03e:	d9fa      	bls.n	800b036 <_free_r+0x46>
 800b040:	6811      	ldr	r1, [r2, #0]
 800b042:	1855      	adds	r5, r2, r1
 800b044:	42a5      	cmp	r5, r4
 800b046:	d10b      	bne.n	800b060 <_free_r+0x70>
 800b048:	6824      	ldr	r4, [r4, #0]
 800b04a:	4421      	add	r1, r4
 800b04c:	1854      	adds	r4, r2, r1
 800b04e:	42a3      	cmp	r3, r4
 800b050:	6011      	str	r1, [r2, #0]
 800b052:	d1e0      	bne.n	800b016 <_free_r+0x26>
 800b054:	681c      	ldr	r4, [r3, #0]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	6053      	str	r3, [r2, #4]
 800b05a:	4421      	add	r1, r4
 800b05c:	6011      	str	r1, [r2, #0]
 800b05e:	e7da      	b.n	800b016 <_free_r+0x26>
 800b060:	d902      	bls.n	800b068 <_free_r+0x78>
 800b062:	230c      	movs	r3, #12
 800b064:	6003      	str	r3, [r0, #0]
 800b066:	e7d6      	b.n	800b016 <_free_r+0x26>
 800b068:	6825      	ldr	r5, [r4, #0]
 800b06a:	1961      	adds	r1, r4, r5
 800b06c:	428b      	cmp	r3, r1
 800b06e:	bf04      	itt	eq
 800b070:	6819      	ldreq	r1, [r3, #0]
 800b072:	685b      	ldreq	r3, [r3, #4]
 800b074:	6063      	str	r3, [r4, #4]
 800b076:	bf04      	itt	eq
 800b078:	1949      	addeq	r1, r1, r5
 800b07a:	6021      	streq	r1, [r4, #0]
 800b07c:	6054      	str	r4, [r2, #4]
 800b07e:	e7ca      	b.n	800b016 <_free_r+0x26>
 800b080:	b003      	add	sp, #12
 800b082:	bd30      	pop	{r4, r5, pc}
 800b084:	20002124 	.word	0x20002124

0800b088 <sbrk_aligned>:
 800b088:	b570      	push	{r4, r5, r6, lr}
 800b08a:	4e0e      	ldr	r6, [pc, #56]	; (800b0c4 <sbrk_aligned+0x3c>)
 800b08c:	460c      	mov	r4, r1
 800b08e:	6831      	ldr	r1, [r6, #0]
 800b090:	4605      	mov	r5, r0
 800b092:	b911      	cbnz	r1, 800b09a <sbrk_aligned+0x12>
 800b094:	f001 f876 	bl	800c184 <_sbrk_r>
 800b098:	6030      	str	r0, [r6, #0]
 800b09a:	4621      	mov	r1, r4
 800b09c:	4628      	mov	r0, r5
 800b09e:	f001 f871 	bl	800c184 <_sbrk_r>
 800b0a2:	1c43      	adds	r3, r0, #1
 800b0a4:	d00a      	beq.n	800b0bc <sbrk_aligned+0x34>
 800b0a6:	1cc4      	adds	r4, r0, #3
 800b0a8:	f024 0403 	bic.w	r4, r4, #3
 800b0ac:	42a0      	cmp	r0, r4
 800b0ae:	d007      	beq.n	800b0c0 <sbrk_aligned+0x38>
 800b0b0:	1a21      	subs	r1, r4, r0
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f001 f866 	bl	800c184 <_sbrk_r>
 800b0b8:	3001      	adds	r0, #1
 800b0ba:	d101      	bne.n	800b0c0 <sbrk_aligned+0x38>
 800b0bc:	f04f 34ff 	mov.w	r4, #4294967295
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	bd70      	pop	{r4, r5, r6, pc}
 800b0c4:	20002128 	.word	0x20002128

0800b0c8 <_malloc_r>:
 800b0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0cc:	1ccd      	adds	r5, r1, #3
 800b0ce:	f025 0503 	bic.w	r5, r5, #3
 800b0d2:	3508      	adds	r5, #8
 800b0d4:	2d0c      	cmp	r5, #12
 800b0d6:	bf38      	it	cc
 800b0d8:	250c      	movcc	r5, #12
 800b0da:	2d00      	cmp	r5, #0
 800b0dc:	4607      	mov	r7, r0
 800b0de:	db01      	blt.n	800b0e4 <_malloc_r+0x1c>
 800b0e0:	42a9      	cmp	r1, r5
 800b0e2:	d905      	bls.n	800b0f0 <_malloc_r+0x28>
 800b0e4:	230c      	movs	r3, #12
 800b0e6:	603b      	str	r3, [r7, #0]
 800b0e8:	2600      	movs	r6, #0
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0f0:	4e2e      	ldr	r6, [pc, #184]	; (800b1ac <_malloc_r+0xe4>)
 800b0f2:	f003 fd5b 	bl	800ebac <__malloc_lock>
 800b0f6:	6833      	ldr	r3, [r6, #0]
 800b0f8:	461c      	mov	r4, r3
 800b0fa:	bb34      	cbnz	r4, 800b14a <_malloc_r+0x82>
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4638      	mov	r0, r7
 800b100:	f7ff ffc2 	bl	800b088 <sbrk_aligned>
 800b104:	1c43      	adds	r3, r0, #1
 800b106:	4604      	mov	r4, r0
 800b108:	d14d      	bne.n	800b1a6 <_malloc_r+0xde>
 800b10a:	6834      	ldr	r4, [r6, #0]
 800b10c:	4626      	mov	r6, r4
 800b10e:	2e00      	cmp	r6, #0
 800b110:	d140      	bne.n	800b194 <_malloc_r+0xcc>
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	4631      	mov	r1, r6
 800b116:	4638      	mov	r0, r7
 800b118:	eb04 0803 	add.w	r8, r4, r3
 800b11c:	f001 f832 	bl	800c184 <_sbrk_r>
 800b120:	4580      	cmp	r8, r0
 800b122:	d13a      	bne.n	800b19a <_malloc_r+0xd2>
 800b124:	6821      	ldr	r1, [r4, #0]
 800b126:	3503      	adds	r5, #3
 800b128:	1a6d      	subs	r5, r5, r1
 800b12a:	f025 0503 	bic.w	r5, r5, #3
 800b12e:	3508      	adds	r5, #8
 800b130:	2d0c      	cmp	r5, #12
 800b132:	bf38      	it	cc
 800b134:	250c      	movcc	r5, #12
 800b136:	4629      	mov	r1, r5
 800b138:	4638      	mov	r0, r7
 800b13a:	f7ff ffa5 	bl	800b088 <sbrk_aligned>
 800b13e:	3001      	adds	r0, #1
 800b140:	d02b      	beq.n	800b19a <_malloc_r+0xd2>
 800b142:	6823      	ldr	r3, [r4, #0]
 800b144:	442b      	add	r3, r5
 800b146:	6023      	str	r3, [r4, #0]
 800b148:	e00e      	b.n	800b168 <_malloc_r+0xa0>
 800b14a:	6822      	ldr	r2, [r4, #0]
 800b14c:	1b52      	subs	r2, r2, r5
 800b14e:	d41e      	bmi.n	800b18e <_malloc_r+0xc6>
 800b150:	2a0b      	cmp	r2, #11
 800b152:	d916      	bls.n	800b182 <_malloc_r+0xba>
 800b154:	1961      	adds	r1, r4, r5
 800b156:	42a3      	cmp	r3, r4
 800b158:	6025      	str	r5, [r4, #0]
 800b15a:	bf18      	it	ne
 800b15c:	6059      	strne	r1, [r3, #4]
 800b15e:	6863      	ldr	r3, [r4, #4]
 800b160:	bf08      	it	eq
 800b162:	6031      	streq	r1, [r6, #0]
 800b164:	5162      	str	r2, [r4, r5]
 800b166:	604b      	str	r3, [r1, #4]
 800b168:	4638      	mov	r0, r7
 800b16a:	f104 060b 	add.w	r6, r4, #11
 800b16e:	f003 fd23 	bl	800ebb8 <__malloc_unlock>
 800b172:	f026 0607 	bic.w	r6, r6, #7
 800b176:	1d23      	adds	r3, r4, #4
 800b178:	1af2      	subs	r2, r6, r3
 800b17a:	d0b6      	beq.n	800b0ea <_malloc_r+0x22>
 800b17c:	1b9b      	subs	r3, r3, r6
 800b17e:	50a3      	str	r3, [r4, r2]
 800b180:	e7b3      	b.n	800b0ea <_malloc_r+0x22>
 800b182:	6862      	ldr	r2, [r4, #4]
 800b184:	42a3      	cmp	r3, r4
 800b186:	bf0c      	ite	eq
 800b188:	6032      	streq	r2, [r6, #0]
 800b18a:	605a      	strne	r2, [r3, #4]
 800b18c:	e7ec      	b.n	800b168 <_malloc_r+0xa0>
 800b18e:	4623      	mov	r3, r4
 800b190:	6864      	ldr	r4, [r4, #4]
 800b192:	e7b2      	b.n	800b0fa <_malloc_r+0x32>
 800b194:	4634      	mov	r4, r6
 800b196:	6876      	ldr	r6, [r6, #4]
 800b198:	e7b9      	b.n	800b10e <_malloc_r+0x46>
 800b19a:	230c      	movs	r3, #12
 800b19c:	603b      	str	r3, [r7, #0]
 800b19e:	4638      	mov	r0, r7
 800b1a0:	f003 fd0a 	bl	800ebb8 <__malloc_unlock>
 800b1a4:	e7a1      	b.n	800b0ea <_malloc_r+0x22>
 800b1a6:	6025      	str	r5, [r4, #0]
 800b1a8:	e7de      	b.n	800b168 <_malloc_r+0xa0>
 800b1aa:	bf00      	nop
 800b1ac:	20002124 	.word	0x20002124

0800b1b0 <__sfputc_r>:
 800b1b0:	6893      	ldr	r3, [r2, #8]
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	b410      	push	{r4}
 800b1b8:	6093      	str	r3, [r2, #8]
 800b1ba:	da08      	bge.n	800b1ce <__sfputc_r+0x1e>
 800b1bc:	6994      	ldr	r4, [r2, #24]
 800b1be:	42a3      	cmp	r3, r4
 800b1c0:	db01      	blt.n	800b1c6 <__sfputc_r+0x16>
 800b1c2:	290a      	cmp	r1, #10
 800b1c4:	d103      	bne.n	800b1ce <__sfputc_r+0x1e>
 800b1c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1ca:	f001 bfa9 	b.w	800d120 <__swbuf_r>
 800b1ce:	6813      	ldr	r3, [r2, #0]
 800b1d0:	1c58      	adds	r0, r3, #1
 800b1d2:	6010      	str	r0, [r2, #0]
 800b1d4:	7019      	strb	r1, [r3, #0]
 800b1d6:	4608      	mov	r0, r1
 800b1d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1dc:	4770      	bx	lr

0800b1de <__sfputs_r>:
 800b1de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e0:	4606      	mov	r6, r0
 800b1e2:	460f      	mov	r7, r1
 800b1e4:	4614      	mov	r4, r2
 800b1e6:	18d5      	adds	r5, r2, r3
 800b1e8:	42ac      	cmp	r4, r5
 800b1ea:	d101      	bne.n	800b1f0 <__sfputs_r+0x12>
 800b1ec:	2000      	movs	r0, #0
 800b1ee:	e007      	b.n	800b200 <__sfputs_r+0x22>
 800b1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1f4:	463a      	mov	r2, r7
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f7ff ffda 	bl	800b1b0 <__sfputc_r>
 800b1fc:	1c43      	adds	r3, r0, #1
 800b1fe:	d1f3      	bne.n	800b1e8 <__sfputs_r+0xa>
 800b200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b204 <_vfiprintf_r>:
 800b204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b208:	460d      	mov	r5, r1
 800b20a:	b09d      	sub	sp, #116	; 0x74
 800b20c:	4614      	mov	r4, r2
 800b20e:	4698      	mov	r8, r3
 800b210:	4606      	mov	r6, r0
 800b212:	b118      	cbz	r0, 800b21c <_vfiprintf_r+0x18>
 800b214:	6983      	ldr	r3, [r0, #24]
 800b216:	b90b      	cbnz	r3, 800b21c <_vfiprintf_r+0x18>
 800b218:	f003 f802 	bl	800e220 <__sinit>
 800b21c:	4b89      	ldr	r3, [pc, #548]	; (800b444 <_vfiprintf_r+0x240>)
 800b21e:	429d      	cmp	r5, r3
 800b220:	d11b      	bne.n	800b25a <_vfiprintf_r+0x56>
 800b222:	6875      	ldr	r5, [r6, #4]
 800b224:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b226:	07d9      	lsls	r1, r3, #31
 800b228:	d405      	bmi.n	800b236 <_vfiprintf_r+0x32>
 800b22a:	89ab      	ldrh	r3, [r5, #12]
 800b22c:	059a      	lsls	r2, r3, #22
 800b22e:	d402      	bmi.n	800b236 <_vfiprintf_r+0x32>
 800b230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b232:	f003 fc06 	bl	800ea42 <__retarget_lock_acquire_recursive>
 800b236:	89ab      	ldrh	r3, [r5, #12]
 800b238:	071b      	lsls	r3, r3, #28
 800b23a:	d501      	bpl.n	800b240 <_vfiprintf_r+0x3c>
 800b23c:	692b      	ldr	r3, [r5, #16]
 800b23e:	b9eb      	cbnz	r3, 800b27c <_vfiprintf_r+0x78>
 800b240:	4629      	mov	r1, r5
 800b242:	4630      	mov	r0, r6
 800b244:	f001 ffd0 	bl	800d1e8 <__swsetup_r>
 800b248:	b1c0      	cbz	r0, 800b27c <_vfiprintf_r+0x78>
 800b24a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b24c:	07dc      	lsls	r4, r3, #31
 800b24e:	d50e      	bpl.n	800b26e <_vfiprintf_r+0x6a>
 800b250:	f04f 30ff 	mov.w	r0, #4294967295
 800b254:	b01d      	add	sp, #116	; 0x74
 800b256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b25a:	4b7b      	ldr	r3, [pc, #492]	; (800b448 <_vfiprintf_r+0x244>)
 800b25c:	429d      	cmp	r5, r3
 800b25e:	d101      	bne.n	800b264 <_vfiprintf_r+0x60>
 800b260:	68b5      	ldr	r5, [r6, #8]
 800b262:	e7df      	b.n	800b224 <_vfiprintf_r+0x20>
 800b264:	4b79      	ldr	r3, [pc, #484]	; (800b44c <_vfiprintf_r+0x248>)
 800b266:	429d      	cmp	r5, r3
 800b268:	bf08      	it	eq
 800b26a:	68f5      	ldreq	r5, [r6, #12]
 800b26c:	e7da      	b.n	800b224 <_vfiprintf_r+0x20>
 800b26e:	89ab      	ldrh	r3, [r5, #12]
 800b270:	0598      	lsls	r0, r3, #22
 800b272:	d4ed      	bmi.n	800b250 <_vfiprintf_r+0x4c>
 800b274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b276:	f003 fbe5 	bl	800ea44 <__retarget_lock_release_recursive>
 800b27a:	e7e9      	b.n	800b250 <_vfiprintf_r+0x4c>
 800b27c:	2300      	movs	r3, #0
 800b27e:	9309      	str	r3, [sp, #36]	; 0x24
 800b280:	2320      	movs	r3, #32
 800b282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b286:	f8cd 800c 	str.w	r8, [sp, #12]
 800b28a:	2330      	movs	r3, #48	; 0x30
 800b28c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b450 <_vfiprintf_r+0x24c>
 800b290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b294:	f04f 0901 	mov.w	r9, #1
 800b298:	4623      	mov	r3, r4
 800b29a:	469a      	mov	sl, r3
 800b29c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2a0:	b10a      	cbz	r2, 800b2a6 <_vfiprintf_r+0xa2>
 800b2a2:	2a25      	cmp	r2, #37	; 0x25
 800b2a4:	d1f9      	bne.n	800b29a <_vfiprintf_r+0x96>
 800b2a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b2aa:	d00b      	beq.n	800b2c4 <_vfiprintf_r+0xc0>
 800b2ac:	465b      	mov	r3, fp
 800b2ae:	4622      	mov	r2, r4
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	f7ff ff93 	bl	800b1de <__sfputs_r>
 800b2b8:	3001      	adds	r0, #1
 800b2ba:	f000 80aa 	beq.w	800b412 <_vfiprintf_r+0x20e>
 800b2be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2c0:	445a      	add	r2, fp
 800b2c2:	9209      	str	r2, [sp, #36]	; 0x24
 800b2c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f000 80a2 	beq.w	800b412 <_vfiprintf_r+0x20e>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2d8:	f10a 0a01 	add.w	sl, sl, #1
 800b2dc:	9304      	str	r3, [sp, #16]
 800b2de:	9307      	str	r3, [sp, #28]
 800b2e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2e4:	931a      	str	r3, [sp, #104]	; 0x68
 800b2e6:	4654      	mov	r4, sl
 800b2e8:	2205      	movs	r2, #5
 800b2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ee:	4858      	ldr	r0, [pc, #352]	; (800b450 <_vfiprintf_r+0x24c>)
 800b2f0:	f7f4 ff86 	bl	8000200 <memchr>
 800b2f4:	9a04      	ldr	r2, [sp, #16]
 800b2f6:	b9d8      	cbnz	r0, 800b330 <_vfiprintf_r+0x12c>
 800b2f8:	06d1      	lsls	r1, r2, #27
 800b2fa:	bf44      	itt	mi
 800b2fc:	2320      	movmi	r3, #32
 800b2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b302:	0713      	lsls	r3, r2, #28
 800b304:	bf44      	itt	mi
 800b306:	232b      	movmi	r3, #43	; 0x2b
 800b308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b30c:	f89a 3000 	ldrb.w	r3, [sl]
 800b310:	2b2a      	cmp	r3, #42	; 0x2a
 800b312:	d015      	beq.n	800b340 <_vfiprintf_r+0x13c>
 800b314:	9a07      	ldr	r2, [sp, #28]
 800b316:	4654      	mov	r4, sl
 800b318:	2000      	movs	r0, #0
 800b31a:	f04f 0c0a 	mov.w	ip, #10
 800b31e:	4621      	mov	r1, r4
 800b320:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b324:	3b30      	subs	r3, #48	; 0x30
 800b326:	2b09      	cmp	r3, #9
 800b328:	d94e      	bls.n	800b3c8 <_vfiprintf_r+0x1c4>
 800b32a:	b1b0      	cbz	r0, 800b35a <_vfiprintf_r+0x156>
 800b32c:	9207      	str	r2, [sp, #28]
 800b32e:	e014      	b.n	800b35a <_vfiprintf_r+0x156>
 800b330:	eba0 0308 	sub.w	r3, r0, r8
 800b334:	fa09 f303 	lsl.w	r3, r9, r3
 800b338:	4313      	orrs	r3, r2
 800b33a:	9304      	str	r3, [sp, #16]
 800b33c:	46a2      	mov	sl, r4
 800b33e:	e7d2      	b.n	800b2e6 <_vfiprintf_r+0xe2>
 800b340:	9b03      	ldr	r3, [sp, #12]
 800b342:	1d19      	adds	r1, r3, #4
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	9103      	str	r1, [sp, #12]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	bfbb      	ittet	lt
 800b34c:	425b      	neglt	r3, r3
 800b34e:	f042 0202 	orrlt.w	r2, r2, #2
 800b352:	9307      	strge	r3, [sp, #28]
 800b354:	9307      	strlt	r3, [sp, #28]
 800b356:	bfb8      	it	lt
 800b358:	9204      	strlt	r2, [sp, #16]
 800b35a:	7823      	ldrb	r3, [r4, #0]
 800b35c:	2b2e      	cmp	r3, #46	; 0x2e
 800b35e:	d10c      	bne.n	800b37a <_vfiprintf_r+0x176>
 800b360:	7863      	ldrb	r3, [r4, #1]
 800b362:	2b2a      	cmp	r3, #42	; 0x2a
 800b364:	d135      	bne.n	800b3d2 <_vfiprintf_r+0x1ce>
 800b366:	9b03      	ldr	r3, [sp, #12]
 800b368:	1d1a      	adds	r2, r3, #4
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	9203      	str	r2, [sp, #12]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	bfb8      	it	lt
 800b372:	f04f 33ff 	movlt.w	r3, #4294967295
 800b376:	3402      	adds	r4, #2
 800b378:	9305      	str	r3, [sp, #20]
 800b37a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b460 <_vfiprintf_r+0x25c>
 800b37e:	7821      	ldrb	r1, [r4, #0]
 800b380:	2203      	movs	r2, #3
 800b382:	4650      	mov	r0, sl
 800b384:	f7f4 ff3c 	bl	8000200 <memchr>
 800b388:	b140      	cbz	r0, 800b39c <_vfiprintf_r+0x198>
 800b38a:	2340      	movs	r3, #64	; 0x40
 800b38c:	eba0 000a 	sub.w	r0, r0, sl
 800b390:	fa03 f000 	lsl.w	r0, r3, r0
 800b394:	9b04      	ldr	r3, [sp, #16]
 800b396:	4303      	orrs	r3, r0
 800b398:	3401      	adds	r4, #1
 800b39a:	9304      	str	r3, [sp, #16]
 800b39c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3a0:	482c      	ldr	r0, [pc, #176]	; (800b454 <_vfiprintf_r+0x250>)
 800b3a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3a6:	2206      	movs	r2, #6
 800b3a8:	f7f4 ff2a 	bl	8000200 <memchr>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d03f      	beq.n	800b430 <_vfiprintf_r+0x22c>
 800b3b0:	4b29      	ldr	r3, [pc, #164]	; (800b458 <_vfiprintf_r+0x254>)
 800b3b2:	bb1b      	cbnz	r3, 800b3fc <_vfiprintf_r+0x1f8>
 800b3b4:	9b03      	ldr	r3, [sp, #12]
 800b3b6:	3307      	adds	r3, #7
 800b3b8:	f023 0307 	bic.w	r3, r3, #7
 800b3bc:	3308      	adds	r3, #8
 800b3be:	9303      	str	r3, [sp, #12]
 800b3c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c2:	443b      	add	r3, r7
 800b3c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b3c6:	e767      	b.n	800b298 <_vfiprintf_r+0x94>
 800b3c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3cc:	460c      	mov	r4, r1
 800b3ce:	2001      	movs	r0, #1
 800b3d0:	e7a5      	b.n	800b31e <_vfiprintf_r+0x11a>
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	3401      	adds	r4, #1
 800b3d6:	9305      	str	r3, [sp, #20]
 800b3d8:	4619      	mov	r1, r3
 800b3da:	f04f 0c0a 	mov.w	ip, #10
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3e4:	3a30      	subs	r2, #48	; 0x30
 800b3e6:	2a09      	cmp	r2, #9
 800b3e8:	d903      	bls.n	800b3f2 <_vfiprintf_r+0x1ee>
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d0c5      	beq.n	800b37a <_vfiprintf_r+0x176>
 800b3ee:	9105      	str	r1, [sp, #20]
 800b3f0:	e7c3      	b.n	800b37a <_vfiprintf_r+0x176>
 800b3f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e7f0      	b.n	800b3de <_vfiprintf_r+0x1da>
 800b3fc:	ab03      	add	r3, sp, #12
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	462a      	mov	r2, r5
 800b402:	4b16      	ldr	r3, [pc, #88]	; (800b45c <_vfiprintf_r+0x258>)
 800b404:	a904      	add	r1, sp, #16
 800b406:	4630      	mov	r0, r6
 800b408:	f000 f8cc 	bl	800b5a4 <_printf_float>
 800b40c:	4607      	mov	r7, r0
 800b40e:	1c78      	adds	r0, r7, #1
 800b410:	d1d6      	bne.n	800b3c0 <_vfiprintf_r+0x1bc>
 800b412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b414:	07d9      	lsls	r1, r3, #31
 800b416:	d405      	bmi.n	800b424 <_vfiprintf_r+0x220>
 800b418:	89ab      	ldrh	r3, [r5, #12]
 800b41a:	059a      	lsls	r2, r3, #22
 800b41c:	d402      	bmi.n	800b424 <_vfiprintf_r+0x220>
 800b41e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b420:	f003 fb10 	bl	800ea44 <__retarget_lock_release_recursive>
 800b424:	89ab      	ldrh	r3, [r5, #12]
 800b426:	065b      	lsls	r3, r3, #25
 800b428:	f53f af12 	bmi.w	800b250 <_vfiprintf_r+0x4c>
 800b42c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b42e:	e711      	b.n	800b254 <_vfiprintf_r+0x50>
 800b430:	ab03      	add	r3, sp, #12
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	462a      	mov	r2, r5
 800b436:	4b09      	ldr	r3, [pc, #36]	; (800b45c <_vfiprintf_r+0x258>)
 800b438:	a904      	add	r1, sp, #16
 800b43a:	4630      	mov	r0, r6
 800b43c:	f000 fb56 	bl	800baec <_printf_i>
 800b440:	e7e4      	b.n	800b40c <_vfiprintf_r+0x208>
 800b442:	bf00      	nop
 800b444:	080107c0 	.word	0x080107c0
 800b448:	080107e0 	.word	0x080107e0
 800b44c:	080107a0 	.word	0x080107a0
 800b450:	08010514 	.word	0x08010514
 800b454:	0801051e 	.word	0x0801051e
 800b458:	0800b5a5 	.word	0x0800b5a5
 800b45c:	0800b1df 	.word	0x0800b1df
 800b460:	0801051a 	.word	0x0801051a

0800b464 <__cvt>:
 800b464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b468:	ec55 4b10 	vmov	r4, r5, d0
 800b46c:	2d00      	cmp	r5, #0
 800b46e:	460e      	mov	r6, r1
 800b470:	4619      	mov	r1, r3
 800b472:	462b      	mov	r3, r5
 800b474:	bfbb      	ittet	lt
 800b476:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b47a:	461d      	movlt	r5, r3
 800b47c:	2300      	movge	r3, #0
 800b47e:	232d      	movlt	r3, #45	; 0x2d
 800b480:	700b      	strb	r3, [r1, #0]
 800b482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b484:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b488:	4691      	mov	r9, r2
 800b48a:	f023 0820 	bic.w	r8, r3, #32
 800b48e:	bfbc      	itt	lt
 800b490:	4622      	movlt	r2, r4
 800b492:	4614      	movlt	r4, r2
 800b494:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b498:	d005      	beq.n	800b4a6 <__cvt+0x42>
 800b49a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b49e:	d100      	bne.n	800b4a2 <__cvt+0x3e>
 800b4a0:	3601      	adds	r6, #1
 800b4a2:	2102      	movs	r1, #2
 800b4a4:	e000      	b.n	800b4a8 <__cvt+0x44>
 800b4a6:	2103      	movs	r1, #3
 800b4a8:	ab03      	add	r3, sp, #12
 800b4aa:	9301      	str	r3, [sp, #4]
 800b4ac:	ab02      	add	r3, sp, #8
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	ec45 4b10 	vmov	d0, r4, r5
 800b4b4:	4653      	mov	r3, sl
 800b4b6:	4632      	mov	r2, r6
 800b4b8:	f001 ffaa 	bl	800d410 <_dtoa_r>
 800b4bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b4c0:	4607      	mov	r7, r0
 800b4c2:	d102      	bne.n	800b4ca <__cvt+0x66>
 800b4c4:	f019 0f01 	tst.w	r9, #1
 800b4c8:	d022      	beq.n	800b510 <__cvt+0xac>
 800b4ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b4ce:	eb07 0906 	add.w	r9, r7, r6
 800b4d2:	d110      	bne.n	800b4f6 <__cvt+0x92>
 800b4d4:	783b      	ldrb	r3, [r7, #0]
 800b4d6:	2b30      	cmp	r3, #48	; 0x30
 800b4d8:	d10a      	bne.n	800b4f0 <__cvt+0x8c>
 800b4da:	2200      	movs	r2, #0
 800b4dc:	2300      	movs	r3, #0
 800b4de:	4620      	mov	r0, r4
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	f7f5 fb01 	bl	8000ae8 <__aeabi_dcmpeq>
 800b4e6:	b918      	cbnz	r0, 800b4f0 <__cvt+0x8c>
 800b4e8:	f1c6 0601 	rsb	r6, r6, #1
 800b4ec:	f8ca 6000 	str.w	r6, [sl]
 800b4f0:	f8da 3000 	ldr.w	r3, [sl]
 800b4f4:	4499      	add	r9, r3
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	4629      	mov	r1, r5
 800b4fe:	f7f5 faf3 	bl	8000ae8 <__aeabi_dcmpeq>
 800b502:	b108      	cbz	r0, 800b508 <__cvt+0xa4>
 800b504:	f8cd 900c 	str.w	r9, [sp, #12]
 800b508:	2230      	movs	r2, #48	; 0x30
 800b50a:	9b03      	ldr	r3, [sp, #12]
 800b50c:	454b      	cmp	r3, r9
 800b50e:	d307      	bcc.n	800b520 <__cvt+0xbc>
 800b510:	9b03      	ldr	r3, [sp, #12]
 800b512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b514:	1bdb      	subs	r3, r3, r7
 800b516:	4638      	mov	r0, r7
 800b518:	6013      	str	r3, [r2, #0]
 800b51a:	b004      	add	sp, #16
 800b51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b520:	1c59      	adds	r1, r3, #1
 800b522:	9103      	str	r1, [sp, #12]
 800b524:	701a      	strb	r2, [r3, #0]
 800b526:	e7f0      	b.n	800b50a <__cvt+0xa6>

0800b528 <__exponent>:
 800b528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b52a:	4603      	mov	r3, r0
 800b52c:	2900      	cmp	r1, #0
 800b52e:	bfb8      	it	lt
 800b530:	4249      	neglt	r1, r1
 800b532:	f803 2b02 	strb.w	r2, [r3], #2
 800b536:	bfb4      	ite	lt
 800b538:	222d      	movlt	r2, #45	; 0x2d
 800b53a:	222b      	movge	r2, #43	; 0x2b
 800b53c:	2909      	cmp	r1, #9
 800b53e:	7042      	strb	r2, [r0, #1]
 800b540:	dd2a      	ble.n	800b598 <__exponent+0x70>
 800b542:	f10d 0407 	add.w	r4, sp, #7
 800b546:	46a4      	mov	ip, r4
 800b548:	270a      	movs	r7, #10
 800b54a:	46a6      	mov	lr, r4
 800b54c:	460a      	mov	r2, r1
 800b54e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b552:	fb07 1516 	mls	r5, r7, r6, r1
 800b556:	3530      	adds	r5, #48	; 0x30
 800b558:	2a63      	cmp	r2, #99	; 0x63
 800b55a:	f104 34ff 	add.w	r4, r4, #4294967295
 800b55e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b562:	4631      	mov	r1, r6
 800b564:	dcf1      	bgt.n	800b54a <__exponent+0x22>
 800b566:	3130      	adds	r1, #48	; 0x30
 800b568:	f1ae 0502 	sub.w	r5, lr, #2
 800b56c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b570:	1c44      	adds	r4, r0, #1
 800b572:	4629      	mov	r1, r5
 800b574:	4561      	cmp	r1, ip
 800b576:	d30a      	bcc.n	800b58e <__exponent+0x66>
 800b578:	f10d 0209 	add.w	r2, sp, #9
 800b57c:	eba2 020e 	sub.w	r2, r2, lr
 800b580:	4565      	cmp	r5, ip
 800b582:	bf88      	it	hi
 800b584:	2200      	movhi	r2, #0
 800b586:	4413      	add	r3, r2
 800b588:	1a18      	subs	r0, r3, r0
 800b58a:	b003      	add	sp, #12
 800b58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b58e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b592:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b596:	e7ed      	b.n	800b574 <__exponent+0x4c>
 800b598:	2330      	movs	r3, #48	; 0x30
 800b59a:	3130      	adds	r1, #48	; 0x30
 800b59c:	7083      	strb	r3, [r0, #2]
 800b59e:	70c1      	strb	r1, [r0, #3]
 800b5a0:	1d03      	adds	r3, r0, #4
 800b5a2:	e7f1      	b.n	800b588 <__exponent+0x60>

0800b5a4 <_printf_float>:
 800b5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a8:	ed2d 8b02 	vpush	{d8}
 800b5ac:	b08d      	sub	sp, #52	; 0x34
 800b5ae:	460c      	mov	r4, r1
 800b5b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b5b4:	4616      	mov	r6, r2
 800b5b6:	461f      	mov	r7, r3
 800b5b8:	4605      	mov	r5, r0
 800b5ba:	f003 fa3d 	bl	800ea38 <_localeconv_r>
 800b5be:	f8d0 a000 	ldr.w	sl, [r0]
 800b5c2:	4650      	mov	r0, sl
 800b5c4:	f7f4 fe0e 	bl	80001e4 <strlen>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	930a      	str	r3, [sp, #40]	; 0x28
 800b5cc:	6823      	ldr	r3, [r4, #0]
 800b5ce:	9305      	str	r3, [sp, #20]
 800b5d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b5d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b5d8:	3307      	adds	r3, #7
 800b5da:	f023 0307 	bic.w	r3, r3, #7
 800b5de:	f103 0208 	add.w	r2, r3, #8
 800b5e2:	f8c8 2000 	str.w	r2, [r8]
 800b5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b5ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b5f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b5f6:	9307      	str	r3, [sp, #28]
 800b5f8:	f8cd 8018 	str.w	r8, [sp, #24]
 800b5fc:	ee08 0a10 	vmov	s16, r0
 800b600:	4b9f      	ldr	r3, [pc, #636]	; (800b880 <_printf_float+0x2dc>)
 800b602:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b606:	f04f 32ff 	mov.w	r2, #4294967295
 800b60a:	f7f5 fa9f 	bl	8000b4c <__aeabi_dcmpun>
 800b60e:	bb88      	cbnz	r0, 800b674 <_printf_float+0xd0>
 800b610:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b614:	4b9a      	ldr	r3, [pc, #616]	; (800b880 <_printf_float+0x2dc>)
 800b616:	f04f 32ff 	mov.w	r2, #4294967295
 800b61a:	f7f5 fa79 	bl	8000b10 <__aeabi_dcmple>
 800b61e:	bb48      	cbnz	r0, 800b674 <_printf_float+0xd0>
 800b620:	2200      	movs	r2, #0
 800b622:	2300      	movs	r3, #0
 800b624:	4640      	mov	r0, r8
 800b626:	4649      	mov	r1, r9
 800b628:	f7f5 fa68 	bl	8000afc <__aeabi_dcmplt>
 800b62c:	b110      	cbz	r0, 800b634 <_printf_float+0x90>
 800b62e:	232d      	movs	r3, #45	; 0x2d
 800b630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b634:	4b93      	ldr	r3, [pc, #588]	; (800b884 <_printf_float+0x2e0>)
 800b636:	4894      	ldr	r0, [pc, #592]	; (800b888 <_printf_float+0x2e4>)
 800b638:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b63c:	bf94      	ite	ls
 800b63e:	4698      	movls	r8, r3
 800b640:	4680      	movhi	r8, r0
 800b642:	2303      	movs	r3, #3
 800b644:	6123      	str	r3, [r4, #16]
 800b646:	9b05      	ldr	r3, [sp, #20]
 800b648:	f023 0204 	bic.w	r2, r3, #4
 800b64c:	6022      	str	r2, [r4, #0]
 800b64e:	f04f 0900 	mov.w	r9, #0
 800b652:	9700      	str	r7, [sp, #0]
 800b654:	4633      	mov	r3, r6
 800b656:	aa0b      	add	r2, sp, #44	; 0x2c
 800b658:	4621      	mov	r1, r4
 800b65a:	4628      	mov	r0, r5
 800b65c:	f000 f9d8 	bl	800ba10 <_printf_common>
 800b660:	3001      	adds	r0, #1
 800b662:	f040 8090 	bne.w	800b786 <_printf_float+0x1e2>
 800b666:	f04f 30ff 	mov.w	r0, #4294967295
 800b66a:	b00d      	add	sp, #52	; 0x34
 800b66c:	ecbd 8b02 	vpop	{d8}
 800b670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b674:	4642      	mov	r2, r8
 800b676:	464b      	mov	r3, r9
 800b678:	4640      	mov	r0, r8
 800b67a:	4649      	mov	r1, r9
 800b67c:	f7f5 fa66 	bl	8000b4c <__aeabi_dcmpun>
 800b680:	b140      	cbz	r0, 800b694 <_printf_float+0xf0>
 800b682:	464b      	mov	r3, r9
 800b684:	2b00      	cmp	r3, #0
 800b686:	bfbc      	itt	lt
 800b688:	232d      	movlt	r3, #45	; 0x2d
 800b68a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b68e:	487f      	ldr	r0, [pc, #508]	; (800b88c <_printf_float+0x2e8>)
 800b690:	4b7f      	ldr	r3, [pc, #508]	; (800b890 <_printf_float+0x2ec>)
 800b692:	e7d1      	b.n	800b638 <_printf_float+0x94>
 800b694:	6863      	ldr	r3, [r4, #4]
 800b696:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b69a:	9206      	str	r2, [sp, #24]
 800b69c:	1c5a      	adds	r2, r3, #1
 800b69e:	d13f      	bne.n	800b720 <_printf_float+0x17c>
 800b6a0:	2306      	movs	r3, #6
 800b6a2:	6063      	str	r3, [r4, #4]
 800b6a4:	9b05      	ldr	r3, [sp, #20]
 800b6a6:	6861      	ldr	r1, [r4, #4]
 800b6a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	9303      	str	r3, [sp, #12]
 800b6b0:	ab0a      	add	r3, sp, #40	; 0x28
 800b6b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b6b6:	ab09      	add	r3, sp, #36	; 0x24
 800b6b8:	ec49 8b10 	vmov	d0, r8, r9
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	6022      	str	r2, [r4, #0]
 800b6c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	f7ff fecd 	bl	800b464 <__cvt>
 800b6ca:	9b06      	ldr	r3, [sp, #24]
 800b6cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6ce:	2b47      	cmp	r3, #71	; 0x47
 800b6d0:	4680      	mov	r8, r0
 800b6d2:	d108      	bne.n	800b6e6 <_printf_float+0x142>
 800b6d4:	1cc8      	adds	r0, r1, #3
 800b6d6:	db02      	blt.n	800b6de <_printf_float+0x13a>
 800b6d8:	6863      	ldr	r3, [r4, #4]
 800b6da:	4299      	cmp	r1, r3
 800b6dc:	dd41      	ble.n	800b762 <_printf_float+0x1be>
 800b6de:	f1ab 0b02 	sub.w	fp, fp, #2
 800b6e2:	fa5f fb8b 	uxtb.w	fp, fp
 800b6e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b6ea:	d820      	bhi.n	800b72e <_printf_float+0x18a>
 800b6ec:	3901      	subs	r1, #1
 800b6ee:	465a      	mov	r2, fp
 800b6f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b6f4:	9109      	str	r1, [sp, #36]	; 0x24
 800b6f6:	f7ff ff17 	bl	800b528 <__exponent>
 800b6fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6fc:	1813      	adds	r3, r2, r0
 800b6fe:	2a01      	cmp	r2, #1
 800b700:	4681      	mov	r9, r0
 800b702:	6123      	str	r3, [r4, #16]
 800b704:	dc02      	bgt.n	800b70c <_printf_float+0x168>
 800b706:	6822      	ldr	r2, [r4, #0]
 800b708:	07d2      	lsls	r2, r2, #31
 800b70a:	d501      	bpl.n	800b710 <_printf_float+0x16c>
 800b70c:	3301      	adds	r3, #1
 800b70e:	6123      	str	r3, [r4, #16]
 800b710:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b714:	2b00      	cmp	r3, #0
 800b716:	d09c      	beq.n	800b652 <_printf_float+0xae>
 800b718:	232d      	movs	r3, #45	; 0x2d
 800b71a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b71e:	e798      	b.n	800b652 <_printf_float+0xae>
 800b720:	9a06      	ldr	r2, [sp, #24]
 800b722:	2a47      	cmp	r2, #71	; 0x47
 800b724:	d1be      	bne.n	800b6a4 <_printf_float+0x100>
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1bc      	bne.n	800b6a4 <_printf_float+0x100>
 800b72a:	2301      	movs	r3, #1
 800b72c:	e7b9      	b.n	800b6a2 <_printf_float+0xfe>
 800b72e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b732:	d118      	bne.n	800b766 <_printf_float+0x1c2>
 800b734:	2900      	cmp	r1, #0
 800b736:	6863      	ldr	r3, [r4, #4]
 800b738:	dd0b      	ble.n	800b752 <_printf_float+0x1ae>
 800b73a:	6121      	str	r1, [r4, #16]
 800b73c:	b913      	cbnz	r3, 800b744 <_printf_float+0x1a0>
 800b73e:	6822      	ldr	r2, [r4, #0]
 800b740:	07d0      	lsls	r0, r2, #31
 800b742:	d502      	bpl.n	800b74a <_printf_float+0x1a6>
 800b744:	3301      	adds	r3, #1
 800b746:	440b      	add	r3, r1
 800b748:	6123      	str	r3, [r4, #16]
 800b74a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b74c:	f04f 0900 	mov.w	r9, #0
 800b750:	e7de      	b.n	800b710 <_printf_float+0x16c>
 800b752:	b913      	cbnz	r3, 800b75a <_printf_float+0x1b6>
 800b754:	6822      	ldr	r2, [r4, #0]
 800b756:	07d2      	lsls	r2, r2, #31
 800b758:	d501      	bpl.n	800b75e <_printf_float+0x1ba>
 800b75a:	3302      	adds	r3, #2
 800b75c:	e7f4      	b.n	800b748 <_printf_float+0x1a4>
 800b75e:	2301      	movs	r3, #1
 800b760:	e7f2      	b.n	800b748 <_printf_float+0x1a4>
 800b762:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b768:	4299      	cmp	r1, r3
 800b76a:	db05      	blt.n	800b778 <_printf_float+0x1d4>
 800b76c:	6823      	ldr	r3, [r4, #0]
 800b76e:	6121      	str	r1, [r4, #16]
 800b770:	07d8      	lsls	r0, r3, #31
 800b772:	d5ea      	bpl.n	800b74a <_printf_float+0x1a6>
 800b774:	1c4b      	adds	r3, r1, #1
 800b776:	e7e7      	b.n	800b748 <_printf_float+0x1a4>
 800b778:	2900      	cmp	r1, #0
 800b77a:	bfd4      	ite	le
 800b77c:	f1c1 0202 	rsble	r2, r1, #2
 800b780:	2201      	movgt	r2, #1
 800b782:	4413      	add	r3, r2
 800b784:	e7e0      	b.n	800b748 <_printf_float+0x1a4>
 800b786:	6823      	ldr	r3, [r4, #0]
 800b788:	055a      	lsls	r2, r3, #21
 800b78a:	d407      	bmi.n	800b79c <_printf_float+0x1f8>
 800b78c:	6923      	ldr	r3, [r4, #16]
 800b78e:	4642      	mov	r2, r8
 800b790:	4631      	mov	r1, r6
 800b792:	4628      	mov	r0, r5
 800b794:	47b8      	blx	r7
 800b796:	3001      	adds	r0, #1
 800b798:	d12c      	bne.n	800b7f4 <_printf_float+0x250>
 800b79a:	e764      	b.n	800b666 <_printf_float+0xc2>
 800b79c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b7a0:	f240 80e0 	bls.w	800b964 <_printf_float+0x3c0>
 800b7a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	f7f5 f99c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d034      	beq.n	800b81e <_printf_float+0x27a>
 800b7b4:	4a37      	ldr	r2, [pc, #220]	; (800b894 <_printf_float+0x2f0>)
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	4631      	mov	r1, r6
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	47b8      	blx	r7
 800b7be:	3001      	adds	r0, #1
 800b7c0:	f43f af51 	beq.w	800b666 <_printf_float+0xc2>
 800b7c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	db02      	blt.n	800b7d2 <_printf_float+0x22e>
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	07d8      	lsls	r0, r3, #31
 800b7d0:	d510      	bpl.n	800b7f4 <_printf_float+0x250>
 800b7d2:	ee18 3a10 	vmov	r3, s16
 800b7d6:	4652      	mov	r2, sl
 800b7d8:	4631      	mov	r1, r6
 800b7da:	4628      	mov	r0, r5
 800b7dc:	47b8      	blx	r7
 800b7de:	3001      	adds	r0, #1
 800b7e0:	f43f af41 	beq.w	800b666 <_printf_float+0xc2>
 800b7e4:	f04f 0800 	mov.w	r8, #0
 800b7e8:	f104 091a 	add.w	r9, r4, #26
 800b7ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	4543      	cmp	r3, r8
 800b7f2:	dc09      	bgt.n	800b808 <_printf_float+0x264>
 800b7f4:	6823      	ldr	r3, [r4, #0]
 800b7f6:	079b      	lsls	r3, r3, #30
 800b7f8:	f100 8105 	bmi.w	800ba06 <_printf_float+0x462>
 800b7fc:	68e0      	ldr	r0, [r4, #12]
 800b7fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b800:	4298      	cmp	r0, r3
 800b802:	bfb8      	it	lt
 800b804:	4618      	movlt	r0, r3
 800b806:	e730      	b.n	800b66a <_printf_float+0xc6>
 800b808:	2301      	movs	r3, #1
 800b80a:	464a      	mov	r2, r9
 800b80c:	4631      	mov	r1, r6
 800b80e:	4628      	mov	r0, r5
 800b810:	47b8      	blx	r7
 800b812:	3001      	adds	r0, #1
 800b814:	f43f af27 	beq.w	800b666 <_printf_float+0xc2>
 800b818:	f108 0801 	add.w	r8, r8, #1
 800b81c:	e7e6      	b.n	800b7ec <_printf_float+0x248>
 800b81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b820:	2b00      	cmp	r3, #0
 800b822:	dc39      	bgt.n	800b898 <_printf_float+0x2f4>
 800b824:	4a1b      	ldr	r2, [pc, #108]	; (800b894 <_printf_float+0x2f0>)
 800b826:	2301      	movs	r3, #1
 800b828:	4631      	mov	r1, r6
 800b82a:	4628      	mov	r0, r5
 800b82c:	47b8      	blx	r7
 800b82e:	3001      	adds	r0, #1
 800b830:	f43f af19 	beq.w	800b666 <_printf_float+0xc2>
 800b834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b838:	4313      	orrs	r3, r2
 800b83a:	d102      	bne.n	800b842 <_printf_float+0x29e>
 800b83c:	6823      	ldr	r3, [r4, #0]
 800b83e:	07d9      	lsls	r1, r3, #31
 800b840:	d5d8      	bpl.n	800b7f4 <_printf_float+0x250>
 800b842:	ee18 3a10 	vmov	r3, s16
 800b846:	4652      	mov	r2, sl
 800b848:	4631      	mov	r1, r6
 800b84a:	4628      	mov	r0, r5
 800b84c:	47b8      	blx	r7
 800b84e:	3001      	adds	r0, #1
 800b850:	f43f af09 	beq.w	800b666 <_printf_float+0xc2>
 800b854:	f04f 0900 	mov.w	r9, #0
 800b858:	f104 0a1a 	add.w	sl, r4, #26
 800b85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b85e:	425b      	negs	r3, r3
 800b860:	454b      	cmp	r3, r9
 800b862:	dc01      	bgt.n	800b868 <_printf_float+0x2c4>
 800b864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b866:	e792      	b.n	800b78e <_printf_float+0x1ea>
 800b868:	2301      	movs	r3, #1
 800b86a:	4652      	mov	r2, sl
 800b86c:	4631      	mov	r1, r6
 800b86e:	4628      	mov	r0, r5
 800b870:	47b8      	blx	r7
 800b872:	3001      	adds	r0, #1
 800b874:	f43f aef7 	beq.w	800b666 <_printf_float+0xc2>
 800b878:	f109 0901 	add.w	r9, r9, #1
 800b87c:	e7ee      	b.n	800b85c <_printf_float+0x2b8>
 800b87e:	bf00      	nop
 800b880:	7fefffff 	.word	0x7fefffff
 800b884:	08010525 	.word	0x08010525
 800b888:	08010529 	.word	0x08010529
 800b88c:	08010531 	.word	0x08010531
 800b890:	0801052d 	.word	0x0801052d
 800b894:	080109d8 	.word	0x080109d8
 800b898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b89a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b89c:	429a      	cmp	r2, r3
 800b89e:	bfa8      	it	ge
 800b8a0:	461a      	movge	r2, r3
 800b8a2:	2a00      	cmp	r2, #0
 800b8a4:	4691      	mov	r9, r2
 800b8a6:	dc37      	bgt.n	800b918 <_printf_float+0x374>
 800b8a8:	f04f 0b00 	mov.w	fp, #0
 800b8ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8b0:	f104 021a 	add.w	r2, r4, #26
 800b8b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8b6:	9305      	str	r3, [sp, #20]
 800b8b8:	eba3 0309 	sub.w	r3, r3, r9
 800b8bc:	455b      	cmp	r3, fp
 800b8be:	dc33      	bgt.n	800b928 <_printf_float+0x384>
 800b8c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	db3b      	blt.n	800b940 <_printf_float+0x39c>
 800b8c8:	6823      	ldr	r3, [r4, #0]
 800b8ca:	07da      	lsls	r2, r3, #31
 800b8cc:	d438      	bmi.n	800b940 <_printf_float+0x39c>
 800b8ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8d0:	9a05      	ldr	r2, [sp, #20]
 800b8d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8d4:	1a9a      	subs	r2, r3, r2
 800b8d6:	eba3 0901 	sub.w	r9, r3, r1
 800b8da:	4591      	cmp	r9, r2
 800b8dc:	bfa8      	it	ge
 800b8de:	4691      	movge	r9, r2
 800b8e0:	f1b9 0f00 	cmp.w	r9, #0
 800b8e4:	dc35      	bgt.n	800b952 <_printf_float+0x3ae>
 800b8e6:	f04f 0800 	mov.w	r8, #0
 800b8ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8ee:	f104 0a1a 	add.w	sl, r4, #26
 800b8f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8f6:	1a9b      	subs	r3, r3, r2
 800b8f8:	eba3 0309 	sub.w	r3, r3, r9
 800b8fc:	4543      	cmp	r3, r8
 800b8fe:	f77f af79 	ble.w	800b7f4 <_printf_float+0x250>
 800b902:	2301      	movs	r3, #1
 800b904:	4652      	mov	r2, sl
 800b906:	4631      	mov	r1, r6
 800b908:	4628      	mov	r0, r5
 800b90a:	47b8      	blx	r7
 800b90c:	3001      	adds	r0, #1
 800b90e:	f43f aeaa 	beq.w	800b666 <_printf_float+0xc2>
 800b912:	f108 0801 	add.w	r8, r8, #1
 800b916:	e7ec      	b.n	800b8f2 <_printf_float+0x34e>
 800b918:	4613      	mov	r3, r2
 800b91a:	4631      	mov	r1, r6
 800b91c:	4642      	mov	r2, r8
 800b91e:	4628      	mov	r0, r5
 800b920:	47b8      	blx	r7
 800b922:	3001      	adds	r0, #1
 800b924:	d1c0      	bne.n	800b8a8 <_printf_float+0x304>
 800b926:	e69e      	b.n	800b666 <_printf_float+0xc2>
 800b928:	2301      	movs	r3, #1
 800b92a:	4631      	mov	r1, r6
 800b92c:	4628      	mov	r0, r5
 800b92e:	9205      	str	r2, [sp, #20]
 800b930:	47b8      	blx	r7
 800b932:	3001      	adds	r0, #1
 800b934:	f43f ae97 	beq.w	800b666 <_printf_float+0xc2>
 800b938:	9a05      	ldr	r2, [sp, #20]
 800b93a:	f10b 0b01 	add.w	fp, fp, #1
 800b93e:	e7b9      	b.n	800b8b4 <_printf_float+0x310>
 800b940:	ee18 3a10 	vmov	r3, s16
 800b944:	4652      	mov	r2, sl
 800b946:	4631      	mov	r1, r6
 800b948:	4628      	mov	r0, r5
 800b94a:	47b8      	blx	r7
 800b94c:	3001      	adds	r0, #1
 800b94e:	d1be      	bne.n	800b8ce <_printf_float+0x32a>
 800b950:	e689      	b.n	800b666 <_printf_float+0xc2>
 800b952:	9a05      	ldr	r2, [sp, #20]
 800b954:	464b      	mov	r3, r9
 800b956:	4442      	add	r2, r8
 800b958:	4631      	mov	r1, r6
 800b95a:	4628      	mov	r0, r5
 800b95c:	47b8      	blx	r7
 800b95e:	3001      	adds	r0, #1
 800b960:	d1c1      	bne.n	800b8e6 <_printf_float+0x342>
 800b962:	e680      	b.n	800b666 <_printf_float+0xc2>
 800b964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b966:	2a01      	cmp	r2, #1
 800b968:	dc01      	bgt.n	800b96e <_printf_float+0x3ca>
 800b96a:	07db      	lsls	r3, r3, #31
 800b96c:	d538      	bpl.n	800b9e0 <_printf_float+0x43c>
 800b96e:	2301      	movs	r3, #1
 800b970:	4642      	mov	r2, r8
 800b972:	4631      	mov	r1, r6
 800b974:	4628      	mov	r0, r5
 800b976:	47b8      	blx	r7
 800b978:	3001      	adds	r0, #1
 800b97a:	f43f ae74 	beq.w	800b666 <_printf_float+0xc2>
 800b97e:	ee18 3a10 	vmov	r3, s16
 800b982:	4652      	mov	r2, sl
 800b984:	4631      	mov	r1, r6
 800b986:	4628      	mov	r0, r5
 800b988:	47b8      	blx	r7
 800b98a:	3001      	adds	r0, #1
 800b98c:	f43f ae6b 	beq.w	800b666 <_printf_float+0xc2>
 800b990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b994:	2200      	movs	r2, #0
 800b996:	2300      	movs	r3, #0
 800b998:	f7f5 f8a6 	bl	8000ae8 <__aeabi_dcmpeq>
 800b99c:	b9d8      	cbnz	r0, 800b9d6 <_printf_float+0x432>
 800b99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9a0:	f108 0201 	add.w	r2, r8, #1
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	4631      	mov	r1, r6
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	47b8      	blx	r7
 800b9ac:	3001      	adds	r0, #1
 800b9ae:	d10e      	bne.n	800b9ce <_printf_float+0x42a>
 800b9b0:	e659      	b.n	800b666 <_printf_float+0xc2>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	4652      	mov	r2, sl
 800b9b6:	4631      	mov	r1, r6
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	47b8      	blx	r7
 800b9bc:	3001      	adds	r0, #1
 800b9be:	f43f ae52 	beq.w	800b666 <_printf_float+0xc2>
 800b9c2:	f108 0801 	add.w	r8, r8, #1
 800b9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	4543      	cmp	r3, r8
 800b9cc:	dcf1      	bgt.n	800b9b2 <_printf_float+0x40e>
 800b9ce:	464b      	mov	r3, r9
 800b9d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b9d4:	e6dc      	b.n	800b790 <_printf_float+0x1ec>
 800b9d6:	f04f 0800 	mov.w	r8, #0
 800b9da:	f104 0a1a 	add.w	sl, r4, #26
 800b9de:	e7f2      	b.n	800b9c6 <_printf_float+0x422>
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	4642      	mov	r2, r8
 800b9e4:	e7df      	b.n	800b9a6 <_printf_float+0x402>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	464a      	mov	r2, r9
 800b9ea:	4631      	mov	r1, r6
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	47b8      	blx	r7
 800b9f0:	3001      	adds	r0, #1
 800b9f2:	f43f ae38 	beq.w	800b666 <_printf_float+0xc2>
 800b9f6:	f108 0801 	add.w	r8, r8, #1
 800b9fa:	68e3      	ldr	r3, [r4, #12]
 800b9fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b9fe:	1a5b      	subs	r3, r3, r1
 800ba00:	4543      	cmp	r3, r8
 800ba02:	dcf0      	bgt.n	800b9e6 <_printf_float+0x442>
 800ba04:	e6fa      	b.n	800b7fc <_printf_float+0x258>
 800ba06:	f04f 0800 	mov.w	r8, #0
 800ba0a:	f104 0919 	add.w	r9, r4, #25
 800ba0e:	e7f4      	b.n	800b9fa <_printf_float+0x456>

0800ba10 <_printf_common>:
 800ba10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba14:	4616      	mov	r6, r2
 800ba16:	4699      	mov	r9, r3
 800ba18:	688a      	ldr	r2, [r1, #8]
 800ba1a:	690b      	ldr	r3, [r1, #16]
 800ba1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba20:	4293      	cmp	r3, r2
 800ba22:	bfb8      	it	lt
 800ba24:	4613      	movlt	r3, r2
 800ba26:	6033      	str	r3, [r6, #0]
 800ba28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba2c:	4607      	mov	r7, r0
 800ba2e:	460c      	mov	r4, r1
 800ba30:	b10a      	cbz	r2, 800ba36 <_printf_common+0x26>
 800ba32:	3301      	adds	r3, #1
 800ba34:	6033      	str	r3, [r6, #0]
 800ba36:	6823      	ldr	r3, [r4, #0]
 800ba38:	0699      	lsls	r1, r3, #26
 800ba3a:	bf42      	ittt	mi
 800ba3c:	6833      	ldrmi	r3, [r6, #0]
 800ba3e:	3302      	addmi	r3, #2
 800ba40:	6033      	strmi	r3, [r6, #0]
 800ba42:	6825      	ldr	r5, [r4, #0]
 800ba44:	f015 0506 	ands.w	r5, r5, #6
 800ba48:	d106      	bne.n	800ba58 <_printf_common+0x48>
 800ba4a:	f104 0a19 	add.w	sl, r4, #25
 800ba4e:	68e3      	ldr	r3, [r4, #12]
 800ba50:	6832      	ldr	r2, [r6, #0]
 800ba52:	1a9b      	subs	r3, r3, r2
 800ba54:	42ab      	cmp	r3, r5
 800ba56:	dc26      	bgt.n	800baa6 <_printf_common+0x96>
 800ba58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba5c:	1e13      	subs	r3, r2, #0
 800ba5e:	6822      	ldr	r2, [r4, #0]
 800ba60:	bf18      	it	ne
 800ba62:	2301      	movne	r3, #1
 800ba64:	0692      	lsls	r2, r2, #26
 800ba66:	d42b      	bmi.n	800bac0 <_printf_common+0xb0>
 800ba68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba6c:	4649      	mov	r1, r9
 800ba6e:	4638      	mov	r0, r7
 800ba70:	47c0      	blx	r8
 800ba72:	3001      	adds	r0, #1
 800ba74:	d01e      	beq.n	800bab4 <_printf_common+0xa4>
 800ba76:	6823      	ldr	r3, [r4, #0]
 800ba78:	68e5      	ldr	r5, [r4, #12]
 800ba7a:	6832      	ldr	r2, [r6, #0]
 800ba7c:	f003 0306 	and.w	r3, r3, #6
 800ba80:	2b04      	cmp	r3, #4
 800ba82:	bf08      	it	eq
 800ba84:	1aad      	subeq	r5, r5, r2
 800ba86:	68a3      	ldr	r3, [r4, #8]
 800ba88:	6922      	ldr	r2, [r4, #16]
 800ba8a:	bf0c      	ite	eq
 800ba8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba90:	2500      	movne	r5, #0
 800ba92:	4293      	cmp	r3, r2
 800ba94:	bfc4      	itt	gt
 800ba96:	1a9b      	subgt	r3, r3, r2
 800ba98:	18ed      	addgt	r5, r5, r3
 800ba9a:	2600      	movs	r6, #0
 800ba9c:	341a      	adds	r4, #26
 800ba9e:	42b5      	cmp	r5, r6
 800baa0:	d11a      	bne.n	800bad8 <_printf_common+0xc8>
 800baa2:	2000      	movs	r0, #0
 800baa4:	e008      	b.n	800bab8 <_printf_common+0xa8>
 800baa6:	2301      	movs	r3, #1
 800baa8:	4652      	mov	r2, sl
 800baaa:	4649      	mov	r1, r9
 800baac:	4638      	mov	r0, r7
 800baae:	47c0      	blx	r8
 800bab0:	3001      	adds	r0, #1
 800bab2:	d103      	bne.n	800babc <_printf_common+0xac>
 800bab4:	f04f 30ff 	mov.w	r0, #4294967295
 800bab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800babc:	3501      	adds	r5, #1
 800babe:	e7c6      	b.n	800ba4e <_printf_common+0x3e>
 800bac0:	18e1      	adds	r1, r4, r3
 800bac2:	1c5a      	adds	r2, r3, #1
 800bac4:	2030      	movs	r0, #48	; 0x30
 800bac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800baca:	4422      	add	r2, r4
 800bacc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bad0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bad4:	3302      	adds	r3, #2
 800bad6:	e7c7      	b.n	800ba68 <_printf_common+0x58>
 800bad8:	2301      	movs	r3, #1
 800bada:	4622      	mov	r2, r4
 800badc:	4649      	mov	r1, r9
 800bade:	4638      	mov	r0, r7
 800bae0:	47c0      	blx	r8
 800bae2:	3001      	adds	r0, #1
 800bae4:	d0e6      	beq.n	800bab4 <_printf_common+0xa4>
 800bae6:	3601      	adds	r6, #1
 800bae8:	e7d9      	b.n	800ba9e <_printf_common+0x8e>
	...

0800baec <_printf_i>:
 800baec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800baf0:	7e0f      	ldrb	r7, [r1, #24]
 800baf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800baf4:	2f78      	cmp	r7, #120	; 0x78
 800baf6:	4691      	mov	r9, r2
 800baf8:	4680      	mov	r8, r0
 800bafa:	460c      	mov	r4, r1
 800bafc:	469a      	mov	sl, r3
 800bafe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb02:	d807      	bhi.n	800bb14 <_printf_i+0x28>
 800bb04:	2f62      	cmp	r7, #98	; 0x62
 800bb06:	d80a      	bhi.n	800bb1e <_printf_i+0x32>
 800bb08:	2f00      	cmp	r7, #0
 800bb0a:	f000 80d8 	beq.w	800bcbe <_printf_i+0x1d2>
 800bb0e:	2f58      	cmp	r7, #88	; 0x58
 800bb10:	f000 80a3 	beq.w	800bc5a <_printf_i+0x16e>
 800bb14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb1c:	e03a      	b.n	800bb94 <_printf_i+0xa8>
 800bb1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb22:	2b15      	cmp	r3, #21
 800bb24:	d8f6      	bhi.n	800bb14 <_printf_i+0x28>
 800bb26:	a101      	add	r1, pc, #4	; (adr r1, 800bb2c <_printf_i+0x40>)
 800bb28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb2c:	0800bb85 	.word	0x0800bb85
 800bb30:	0800bb99 	.word	0x0800bb99
 800bb34:	0800bb15 	.word	0x0800bb15
 800bb38:	0800bb15 	.word	0x0800bb15
 800bb3c:	0800bb15 	.word	0x0800bb15
 800bb40:	0800bb15 	.word	0x0800bb15
 800bb44:	0800bb99 	.word	0x0800bb99
 800bb48:	0800bb15 	.word	0x0800bb15
 800bb4c:	0800bb15 	.word	0x0800bb15
 800bb50:	0800bb15 	.word	0x0800bb15
 800bb54:	0800bb15 	.word	0x0800bb15
 800bb58:	0800bca5 	.word	0x0800bca5
 800bb5c:	0800bbc9 	.word	0x0800bbc9
 800bb60:	0800bc87 	.word	0x0800bc87
 800bb64:	0800bb15 	.word	0x0800bb15
 800bb68:	0800bb15 	.word	0x0800bb15
 800bb6c:	0800bcc7 	.word	0x0800bcc7
 800bb70:	0800bb15 	.word	0x0800bb15
 800bb74:	0800bbc9 	.word	0x0800bbc9
 800bb78:	0800bb15 	.word	0x0800bb15
 800bb7c:	0800bb15 	.word	0x0800bb15
 800bb80:	0800bc8f 	.word	0x0800bc8f
 800bb84:	682b      	ldr	r3, [r5, #0]
 800bb86:	1d1a      	adds	r2, r3, #4
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	602a      	str	r2, [r5, #0]
 800bb8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb94:	2301      	movs	r3, #1
 800bb96:	e0a3      	b.n	800bce0 <_printf_i+0x1f4>
 800bb98:	6820      	ldr	r0, [r4, #0]
 800bb9a:	6829      	ldr	r1, [r5, #0]
 800bb9c:	0606      	lsls	r6, r0, #24
 800bb9e:	f101 0304 	add.w	r3, r1, #4
 800bba2:	d50a      	bpl.n	800bbba <_printf_i+0xce>
 800bba4:	680e      	ldr	r6, [r1, #0]
 800bba6:	602b      	str	r3, [r5, #0]
 800bba8:	2e00      	cmp	r6, #0
 800bbaa:	da03      	bge.n	800bbb4 <_printf_i+0xc8>
 800bbac:	232d      	movs	r3, #45	; 0x2d
 800bbae:	4276      	negs	r6, r6
 800bbb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbb4:	485e      	ldr	r0, [pc, #376]	; (800bd30 <_printf_i+0x244>)
 800bbb6:	230a      	movs	r3, #10
 800bbb8:	e019      	b.n	800bbee <_printf_i+0x102>
 800bbba:	680e      	ldr	r6, [r1, #0]
 800bbbc:	602b      	str	r3, [r5, #0]
 800bbbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bbc2:	bf18      	it	ne
 800bbc4:	b236      	sxthne	r6, r6
 800bbc6:	e7ef      	b.n	800bba8 <_printf_i+0xbc>
 800bbc8:	682b      	ldr	r3, [r5, #0]
 800bbca:	6820      	ldr	r0, [r4, #0]
 800bbcc:	1d19      	adds	r1, r3, #4
 800bbce:	6029      	str	r1, [r5, #0]
 800bbd0:	0601      	lsls	r1, r0, #24
 800bbd2:	d501      	bpl.n	800bbd8 <_printf_i+0xec>
 800bbd4:	681e      	ldr	r6, [r3, #0]
 800bbd6:	e002      	b.n	800bbde <_printf_i+0xf2>
 800bbd8:	0646      	lsls	r6, r0, #25
 800bbda:	d5fb      	bpl.n	800bbd4 <_printf_i+0xe8>
 800bbdc:	881e      	ldrh	r6, [r3, #0]
 800bbde:	4854      	ldr	r0, [pc, #336]	; (800bd30 <_printf_i+0x244>)
 800bbe0:	2f6f      	cmp	r7, #111	; 0x6f
 800bbe2:	bf0c      	ite	eq
 800bbe4:	2308      	moveq	r3, #8
 800bbe6:	230a      	movne	r3, #10
 800bbe8:	2100      	movs	r1, #0
 800bbea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbee:	6865      	ldr	r5, [r4, #4]
 800bbf0:	60a5      	str	r5, [r4, #8]
 800bbf2:	2d00      	cmp	r5, #0
 800bbf4:	bfa2      	ittt	ge
 800bbf6:	6821      	ldrge	r1, [r4, #0]
 800bbf8:	f021 0104 	bicge.w	r1, r1, #4
 800bbfc:	6021      	strge	r1, [r4, #0]
 800bbfe:	b90e      	cbnz	r6, 800bc04 <_printf_i+0x118>
 800bc00:	2d00      	cmp	r5, #0
 800bc02:	d04d      	beq.n	800bca0 <_printf_i+0x1b4>
 800bc04:	4615      	mov	r5, r2
 800bc06:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc0a:	fb03 6711 	mls	r7, r3, r1, r6
 800bc0e:	5dc7      	ldrb	r7, [r0, r7]
 800bc10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc14:	4637      	mov	r7, r6
 800bc16:	42bb      	cmp	r3, r7
 800bc18:	460e      	mov	r6, r1
 800bc1a:	d9f4      	bls.n	800bc06 <_printf_i+0x11a>
 800bc1c:	2b08      	cmp	r3, #8
 800bc1e:	d10b      	bne.n	800bc38 <_printf_i+0x14c>
 800bc20:	6823      	ldr	r3, [r4, #0]
 800bc22:	07de      	lsls	r6, r3, #31
 800bc24:	d508      	bpl.n	800bc38 <_printf_i+0x14c>
 800bc26:	6923      	ldr	r3, [r4, #16]
 800bc28:	6861      	ldr	r1, [r4, #4]
 800bc2a:	4299      	cmp	r1, r3
 800bc2c:	bfde      	ittt	le
 800bc2e:	2330      	movle	r3, #48	; 0x30
 800bc30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc34:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc38:	1b52      	subs	r2, r2, r5
 800bc3a:	6122      	str	r2, [r4, #16]
 800bc3c:	f8cd a000 	str.w	sl, [sp]
 800bc40:	464b      	mov	r3, r9
 800bc42:	aa03      	add	r2, sp, #12
 800bc44:	4621      	mov	r1, r4
 800bc46:	4640      	mov	r0, r8
 800bc48:	f7ff fee2 	bl	800ba10 <_printf_common>
 800bc4c:	3001      	adds	r0, #1
 800bc4e:	d14c      	bne.n	800bcea <_printf_i+0x1fe>
 800bc50:	f04f 30ff 	mov.w	r0, #4294967295
 800bc54:	b004      	add	sp, #16
 800bc56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc5a:	4835      	ldr	r0, [pc, #212]	; (800bd30 <_printf_i+0x244>)
 800bc5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bc60:	6829      	ldr	r1, [r5, #0]
 800bc62:	6823      	ldr	r3, [r4, #0]
 800bc64:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc68:	6029      	str	r1, [r5, #0]
 800bc6a:	061d      	lsls	r5, r3, #24
 800bc6c:	d514      	bpl.n	800bc98 <_printf_i+0x1ac>
 800bc6e:	07df      	lsls	r7, r3, #31
 800bc70:	bf44      	itt	mi
 800bc72:	f043 0320 	orrmi.w	r3, r3, #32
 800bc76:	6023      	strmi	r3, [r4, #0]
 800bc78:	b91e      	cbnz	r6, 800bc82 <_printf_i+0x196>
 800bc7a:	6823      	ldr	r3, [r4, #0]
 800bc7c:	f023 0320 	bic.w	r3, r3, #32
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	2310      	movs	r3, #16
 800bc84:	e7b0      	b.n	800bbe8 <_printf_i+0xfc>
 800bc86:	6823      	ldr	r3, [r4, #0]
 800bc88:	f043 0320 	orr.w	r3, r3, #32
 800bc8c:	6023      	str	r3, [r4, #0]
 800bc8e:	2378      	movs	r3, #120	; 0x78
 800bc90:	4828      	ldr	r0, [pc, #160]	; (800bd34 <_printf_i+0x248>)
 800bc92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc96:	e7e3      	b.n	800bc60 <_printf_i+0x174>
 800bc98:	0659      	lsls	r1, r3, #25
 800bc9a:	bf48      	it	mi
 800bc9c:	b2b6      	uxthmi	r6, r6
 800bc9e:	e7e6      	b.n	800bc6e <_printf_i+0x182>
 800bca0:	4615      	mov	r5, r2
 800bca2:	e7bb      	b.n	800bc1c <_printf_i+0x130>
 800bca4:	682b      	ldr	r3, [r5, #0]
 800bca6:	6826      	ldr	r6, [r4, #0]
 800bca8:	6961      	ldr	r1, [r4, #20]
 800bcaa:	1d18      	adds	r0, r3, #4
 800bcac:	6028      	str	r0, [r5, #0]
 800bcae:	0635      	lsls	r5, r6, #24
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	d501      	bpl.n	800bcb8 <_printf_i+0x1cc>
 800bcb4:	6019      	str	r1, [r3, #0]
 800bcb6:	e002      	b.n	800bcbe <_printf_i+0x1d2>
 800bcb8:	0670      	lsls	r0, r6, #25
 800bcba:	d5fb      	bpl.n	800bcb4 <_printf_i+0x1c8>
 800bcbc:	8019      	strh	r1, [r3, #0]
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	6123      	str	r3, [r4, #16]
 800bcc2:	4615      	mov	r5, r2
 800bcc4:	e7ba      	b.n	800bc3c <_printf_i+0x150>
 800bcc6:	682b      	ldr	r3, [r5, #0]
 800bcc8:	1d1a      	adds	r2, r3, #4
 800bcca:	602a      	str	r2, [r5, #0]
 800bccc:	681d      	ldr	r5, [r3, #0]
 800bcce:	6862      	ldr	r2, [r4, #4]
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	4628      	mov	r0, r5
 800bcd4:	f7f4 fa94 	bl	8000200 <memchr>
 800bcd8:	b108      	cbz	r0, 800bcde <_printf_i+0x1f2>
 800bcda:	1b40      	subs	r0, r0, r5
 800bcdc:	6060      	str	r0, [r4, #4]
 800bcde:	6863      	ldr	r3, [r4, #4]
 800bce0:	6123      	str	r3, [r4, #16]
 800bce2:	2300      	movs	r3, #0
 800bce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bce8:	e7a8      	b.n	800bc3c <_printf_i+0x150>
 800bcea:	6923      	ldr	r3, [r4, #16]
 800bcec:	462a      	mov	r2, r5
 800bcee:	4649      	mov	r1, r9
 800bcf0:	4640      	mov	r0, r8
 800bcf2:	47d0      	blx	sl
 800bcf4:	3001      	adds	r0, #1
 800bcf6:	d0ab      	beq.n	800bc50 <_printf_i+0x164>
 800bcf8:	6823      	ldr	r3, [r4, #0]
 800bcfa:	079b      	lsls	r3, r3, #30
 800bcfc:	d413      	bmi.n	800bd26 <_printf_i+0x23a>
 800bcfe:	68e0      	ldr	r0, [r4, #12]
 800bd00:	9b03      	ldr	r3, [sp, #12]
 800bd02:	4298      	cmp	r0, r3
 800bd04:	bfb8      	it	lt
 800bd06:	4618      	movlt	r0, r3
 800bd08:	e7a4      	b.n	800bc54 <_printf_i+0x168>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	4632      	mov	r2, r6
 800bd0e:	4649      	mov	r1, r9
 800bd10:	4640      	mov	r0, r8
 800bd12:	47d0      	blx	sl
 800bd14:	3001      	adds	r0, #1
 800bd16:	d09b      	beq.n	800bc50 <_printf_i+0x164>
 800bd18:	3501      	adds	r5, #1
 800bd1a:	68e3      	ldr	r3, [r4, #12]
 800bd1c:	9903      	ldr	r1, [sp, #12]
 800bd1e:	1a5b      	subs	r3, r3, r1
 800bd20:	42ab      	cmp	r3, r5
 800bd22:	dcf2      	bgt.n	800bd0a <_printf_i+0x21e>
 800bd24:	e7eb      	b.n	800bcfe <_printf_i+0x212>
 800bd26:	2500      	movs	r5, #0
 800bd28:	f104 0619 	add.w	r6, r4, #25
 800bd2c:	e7f5      	b.n	800bd1a <_printf_i+0x22e>
 800bd2e:	bf00      	nop
 800bd30:	08010535 	.word	0x08010535
 800bd34:	08010546 	.word	0x08010546

0800bd38 <_scanf_float>:
 800bd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd3c:	b087      	sub	sp, #28
 800bd3e:	4617      	mov	r7, r2
 800bd40:	9303      	str	r3, [sp, #12]
 800bd42:	688b      	ldr	r3, [r1, #8]
 800bd44:	1e5a      	subs	r2, r3, #1
 800bd46:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bd4a:	bf83      	ittte	hi
 800bd4c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bd50:	195b      	addhi	r3, r3, r5
 800bd52:	9302      	strhi	r3, [sp, #8]
 800bd54:	2300      	movls	r3, #0
 800bd56:	bf86      	itte	hi
 800bd58:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bd5c:	608b      	strhi	r3, [r1, #8]
 800bd5e:	9302      	strls	r3, [sp, #8]
 800bd60:	680b      	ldr	r3, [r1, #0]
 800bd62:	468b      	mov	fp, r1
 800bd64:	2500      	movs	r5, #0
 800bd66:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bd6a:	f84b 3b1c 	str.w	r3, [fp], #28
 800bd6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bd72:	4680      	mov	r8, r0
 800bd74:	460c      	mov	r4, r1
 800bd76:	465e      	mov	r6, fp
 800bd78:	46aa      	mov	sl, r5
 800bd7a:	46a9      	mov	r9, r5
 800bd7c:	9501      	str	r5, [sp, #4]
 800bd7e:	68a2      	ldr	r2, [r4, #8]
 800bd80:	b152      	cbz	r2, 800bd98 <_scanf_float+0x60>
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	2b4e      	cmp	r3, #78	; 0x4e
 800bd88:	d864      	bhi.n	800be54 <_scanf_float+0x11c>
 800bd8a:	2b40      	cmp	r3, #64	; 0x40
 800bd8c:	d83c      	bhi.n	800be08 <_scanf_float+0xd0>
 800bd8e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800bd92:	b2c8      	uxtb	r0, r1
 800bd94:	280e      	cmp	r0, #14
 800bd96:	d93a      	bls.n	800be0e <_scanf_float+0xd6>
 800bd98:	f1b9 0f00 	cmp.w	r9, #0
 800bd9c:	d003      	beq.n	800bda6 <_scanf_float+0x6e>
 800bd9e:	6823      	ldr	r3, [r4, #0]
 800bda0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bda4:	6023      	str	r3, [r4, #0]
 800bda6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdaa:	f1ba 0f01 	cmp.w	sl, #1
 800bdae:	f200 8113 	bhi.w	800bfd8 <_scanf_float+0x2a0>
 800bdb2:	455e      	cmp	r6, fp
 800bdb4:	f200 8105 	bhi.w	800bfc2 <_scanf_float+0x28a>
 800bdb8:	2501      	movs	r5, #1
 800bdba:	4628      	mov	r0, r5
 800bdbc:	b007      	add	sp, #28
 800bdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800bdc6:	2a0d      	cmp	r2, #13
 800bdc8:	d8e6      	bhi.n	800bd98 <_scanf_float+0x60>
 800bdca:	a101      	add	r1, pc, #4	; (adr r1, 800bdd0 <_scanf_float+0x98>)
 800bdcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bdd0:	0800bf0f 	.word	0x0800bf0f
 800bdd4:	0800bd99 	.word	0x0800bd99
 800bdd8:	0800bd99 	.word	0x0800bd99
 800bddc:	0800bd99 	.word	0x0800bd99
 800bde0:	0800bf6f 	.word	0x0800bf6f
 800bde4:	0800bf47 	.word	0x0800bf47
 800bde8:	0800bd99 	.word	0x0800bd99
 800bdec:	0800bd99 	.word	0x0800bd99
 800bdf0:	0800bf1d 	.word	0x0800bf1d
 800bdf4:	0800bd99 	.word	0x0800bd99
 800bdf8:	0800bd99 	.word	0x0800bd99
 800bdfc:	0800bd99 	.word	0x0800bd99
 800be00:	0800bd99 	.word	0x0800bd99
 800be04:	0800bed5 	.word	0x0800bed5
 800be08:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800be0c:	e7db      	b.n	800bdc6 <_scanf_float+0x8e>
 800be0e:	290e      	cmp	r1, #14
 800be10:	d8c2      	bhi.n	800bd98 <_scanf_float+0x60>
 800be12:	a001      	add	r0, pc, #4	; (adr r0, 800be18 <_scanf_float+0xe0>)
 800be14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800be18:	0800bec7 	.word	0x0800bec7
 800be1c:	0800bd99 	.word	0x0800bd99
 800be20:	0800bec7 	.word	0x0800bec7
 800be24:	0800bf5b 	.word	0x0800bf5b
 800be28:	0800bd99 	.word	0x0800bd99
 800be2c:	0800be75 	.word	0x0800be75
 800be30:	0800beb1 	.word	0x0800beb1
 800be34:	0800beb1 	.word	0x0800beb1
 800be38:	0800beb1 	.word	0x0800beb1
 800be3c:	0800beb1 	.word	0x0800beb1
 800be40:	0800beb1 	.word	0x0800beb1
 800be44:	0800beb1 	.word	0x0800beb1
 800be48:	0800beb1 	.word	0x0800beb1
 800be4c:	0800beb1 	.word	0x0800beb1
 800be50:	0800beb1 	.word	0x0800beb1
 800be54:	2b6e      	cmp	r3, #110	; 0x6e
 800be56:	d809      	bhi.n	800be6c <_scanf_float+0x134>
 800be58:	2b60      	cmp	r3, #96	; 0x60
 800be5a:	d8b2      	bhi.n	800bdc2 <_scanf_float+0x8a>
 800be5c:	2b54      	cmp	r3, #84	; 0x54
 800be5e:	d077      	beq.n	800bf50 <_scanf_float+0x218>
 800be60:	2b59      	cmp	r3, #89	; 0x59
 800be62:	d199      	bne.n	800bd98 <_scanf_float+0x60>
 800be64:	2d07      	cmp	r5, #7
 800be66:	d197      	bne.n	800bd98 <_scanf_float+0x60>
 800be68:	2508      	movs	r5, #8
 800be6a:	e029      	b.n	800bec0 <_scanf_float+0x188>
 800be6c:	2b74      	cmp	r3, #116	; 0x74
 800be6e:	d06f      	beq.n	800bf50 <_scanf_float+0x218>
 800be70:	2b79      	cmp	r3, #121	; 0x79
 800be72:	e7f6      	b.n	800be62 <_scanf_float+0x12a>
 800be74:	6821      	ldr	r1, [r4, #0]
 800be76:	05c8      	lsls	r0, r1, #23
 800be78:	d51a      	bpl.n	800beb0 <_scanf_float+0x178>
 800be7a:	9b02      	ldr	r3, [sp, #8]
 800be7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800be80:	6021      	str	r1, [r4, #0]
 800be82:	f109 0901 	add.w	r9, r9, #1
 800be86:	b11b      	cbz	r3, 800be90 <_scanf_float+0x158>
 800be88:	3b01      	subs	r3, #1
 800be8a:	3201      	adds	r2, #1
 800be8c:	9302      	str	r3, [sp, #8]
 800be8e:	60a2      	str	r2, [r4, #8]
 800be90:	68a3      	ldr	r3, [r4, #8]
 800be92:	3b01      	subs	r3, #1
 800be94:	60a3      	str	r3, [r4, #8]
 800be96:	6923      	ldr	r3, [r4, #16]
 800be98:	3301      	adds	r3, #1
 800be9a:	6123      	str	r3, [r4, #16]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	3b01      	subs	r3, #1
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	607b      	str	r3, [r7, #4]
 800bea4:	f340 8084 	ble.w	800bfb0 <_scanf_float+0x278>
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	3301      	adds	r3, #1
 800beac:	603b      	str	r3, [r7, #0]
 800beae:	e766      	b.n	800bd7e <_scanf_float+0x46>
 800beb0:	eb1a 0f05 	cmn.w	sl, r5
 800beb4:	f47f af70 	bne.w	800bd98 <_scanf_float+0x60>
 800beb8:	6822      	ldr	r2, [r4, #0]
 800beba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bebe:	6022      	str	r2, [r4, #0]
 800bec0:	f806 3b01 	strb.w	r3, [r6], #1
 800bec4:	e7e4      	b.n	800be90 <_scanf_float+0x158>
 800bec6:	6822      	ldr	r2, [r4, #0]
 800bec8:	0610      	lsls	r0, r2, #24
 800beca:	f57f af65 	bpl.w	800bd98 <_scanf_float+0x60>
 800bece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bed2:	e7f4      	b.n	800bebe <_scanf_float+0x186>
 800bed4:	f1ba 0f00 	cmp.w	sl, #0
 800bed8:	d10e      	bne.n	800bef8 <_scanf_float+0x1c0>
 800beda:	f1b9 0f00 	cmp.w	r9, #0
 800bede:	d10e      	bne.n	800befe <_scanf_float+0x1c6>
 800bee0:	6822      	ldr	r2, [r4, #0]
 800bee2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bee6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800beea:	d108      	bne.n	800befe <_scanf_float+0x1c6>
 800beec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bef0:	6022      	str	r2, [r4, #0]
 800bef2:	f04f 0a01 	mov.w	sl, #1
 800bef6:	e7e3      	b.n	800bec0 <_scanf_float+0x188>
 800bef8:	f1ba 0f02 	cmp.w	sl, #2
 800befc:	d055      	beq.n	800bfaa <_scanf_float+0x272>
 800befe:	2d01      	cmp	r5, #1
 800bf00:	d002      	beq.n	800bf08 <_scanf_float+0x1d0>
 800bf02:	2d04      	cmp	r5, #4
 800bf04:	f47f af48 	bne.w	800bd98 <_scanf_float+0x60>
 800bf08:	3501      	adds	r5, #1
 800bf0a:	b2ed      	uxtb	r5, r5
 800bf0c:	e7d8      	b.n	800bec0 <_scanf_float+0x188>
 800bf0e:	f1ba 0f01 	cmp.w	sl, #1
 800bf12:	f47f af41 	bne.w	800bd98 <_scanf_float+0x60>
 800bf16:	f04f 0a02 	mov.w	sl, #2
 800bf1a:	e7d1      	b.n	800bec0 <_scanf_float+0x188>
 800bf1c:	b97d      	cbnz	r5, 800bf3e <_scanf_float+0x206>
 800bf1e:	f1b9 0f00 	cmp.w	r9, #0
 800bf22:	f47f af3c 	bne.w	800bd9e <_scanf_float+0x66>
 800bf26:	6822      	ldr	r2, [r4, #0]
 800bf28:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bf2c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bf30:	f47f af39 	bne.w	800bda6 <_scanf_float+0x6e>
 800bf34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bf38:	6022      	str	r2, [r4, #0]
 800bf3a:	2501      	movs	r5, #1
 800bf3c:	e7c0      	b.n	800bec0 <_scanf_float+0x188>
 800bf3e:	2d03      	cmp	r5, #3
 800bf40:	d0e2      	beq.n	800bf08 <_scanf_float+0x1d0>
 800bf42:	2d05      	cmp	r5, #5
 800bf44:	e7de      	b.n	800bf04 <_scanf_float+0x1cc>
 800bf46:	2d02      	cmp	r5, #2
 800bf48:	f47f af26 	bne.w	800bd98 <_scanf_float+0x60>
 800bf4c:	2503      	movs	r5, #3
 800bf4e:	e7b7      	b.n	800bec0 <_scanf_float+0x188>
 800bf50:	2d06      	cmp	r5, #6
 800bf52:	f47f af21 	bne.w	800bd98 <_scanf_float+0x60>
 800bf56:	2507      	movs	r5, #7
 800bf58:	e7b2      	b.n	800bec0 <_scanf_float+0x188>
 800bf5a:	6822      	ldr	r2, [r4, #0]
 800bf5c:	0591      	lsls	r1, r2, #22
 800bf5e:	f57f af1b 	bpl.w	800bd98 <_scanf_float+0x60>
 800bf62:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bf66:	6022      	str	r2, [r4, #0]
 800bf68:	f8cd 9004 	str.w	r9, [sp, #4]
 800bf6c:	e7a8      	b.n	800bec0 <_scanf_float+0x188>
 800bf6e:	6822      	ldr	r2, [r4, #0]
 800bf70:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bf74:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bf78:	d006      	beq.n	800bf88 <_scanf_float+0x250>
 800bf7a:	0550      	lsls	r0, r2, #21
 800bf7c:	f57f af0c 	bpl.w	800bd98 <_scanf_float+0x60>
 800bf80:	f1b9 0f00 	cmp.w	r9, #0
 800bf84:	f43f af0f 	beq.w	800bda6 <_scanf_float+0x6e>
 800bf88:	0591      	lsls	r1, r2, #22
 800bf8a:	bf58      	it	pl
 800bf8c:	9901      	ldrpl	r1, [sp, #4]
 800bf8e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bf92:	bf58      	it	pl
 800bf94:	eba9 0101 	subpl.w	r1, r9, r1
 800bf98:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bf9c:	bf58      	it	pl
 800bf9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bfa2:	6022      	str	r2, [r4, #0]
 800bfa4:	f04f 0900 	mov.w	r9, #0
 800bfa8:	e78a      	b.n	800bec0 <_scanf_float+0x188>
 800bfaa:	f04f 0a03 	mov.w	sl, #3
 800bfae:	e787      	b.n	800bec0 <_scanf_float+0x188>
 800bfb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bfb4:	4639      	mov	r1, r7
 800bfb6:	4640      	mov	r0, r8
 800bfb8:	4798      	blx	r3
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	f43f aedf 	beq.w	800bd7e <_scanf_float+0x46>
 800bfc0:	e6ea      	b.n	800bd98 <_scanf_float+0x60>
 800bfc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bfc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bfca:	463a      	mov	r2, r7
 800bfcc:	4640      	mov	r0, r8
 800bfce:	4798      	blx	r3
 800bfd0:	6923      	ldr	r3, [r4, #16]
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	6123      	str	r3, [r4, #16]
 800bfd6:	e6ec      	b.n	800bdb2 <_scanf_float+0x7a>
 800bfd8:	1e6b      	subs	r3, r5, #1
 800bfda:	2b06      	cmp	r3, #6
 800bfdc:	d825      	bhi.n	800c02a <_scanf_float+0x2f2>
 800bfde:	2d02      	cmp	r5, #2
 800bfe0:	d836      	bhi.n	800c050 <_scanf_float+0x318>
 800bfe2:	455e      	cmp	r6, fp
 800bfe4:	f67f aee8 	bls.w	800bdb8 <_scanf_float+0x80>
 800bfe8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bfec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bff0:	463a      	mov	r2, r7
 800bff2:	4640      	mov	r0, r8
 800bff4:	4798      	blx	r3
 800bff6:	6923      	ldr	r3, [r4, #16]
 800bff8:	3b01      	subs	r3, #1
 800bffa:	6123      	str	r3, [r4, #16]
 800bffc:	e7f1      	b.n	800bfe2 <_scanf_float+0x2aa>
 800bffe:	9802      	ldr	r0, [sp, #8]
 800c000:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c004:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c008:	9002      	str	r0, [sp, #8]
 800c00a:	463a      	mov	r2, r7
 800c00c:	4640      	mov	r0, r8
 800c00e:	4798      	blx	r3
 800c010:	6923      	ldr	r3, [r4, #16]
 800c012:	3b01      	subs	r3, #1
 800c014:	6123      	str	r3, [r4, #16]
 800c016:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c01a:	fa5f fa8a 	uxtb.w	sl, sl
 800c01e:	f1ba 0f02 	cmp.w	sl, #2
 800c022:	d1ec      	bne.n	800bffe <_scanf_float+0x2c6>
 800c024:	3d03      	subs	r5, #3
 800c026:	b2ed      	uxtb	r5, r5
 800c028:	1b76      	subs	r6, r6, r5
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	05da      	lsls	r2, r3, #23
 800c02e:	d52f      	bpl.n	800c090 <_scanf_float+0x358>
 800c030:	055b      	lsls	r3, r3, #21
 800c032:	d510      	bpl.n	800c056 <_scanf_float+0x31e>
 800c034:	455e      	cmp	r6, fp
 800c036:	f67f aebf 	bls.w	800bdb8 <_scanf_float+0x80>
 800c03a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c03e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c042:	463a      	mov	r2, r7
 800c044:	4640      	mov	r0, r8
 800c046:	4798      	blx	r3
 800c048:	6923      	ldr	r3, [r4, #16]
 800c04a:	3b01      	subs	r3, #1
 800c04c:	6123      	str	r3, [r4, #16]
 800c04e:	e7f1      	b.n	800c034 <_scanf_float+0x2fc>
 800c050:	46aa      	mov	sl, r5
 800c052:	9602      	str	r6, [sp, #8]
 800c054:	e7df      	b.n	800c016 <_scanf_float+0x2de>
 800c056:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c05a:	6923      	ldr	r3, [r4, #16]
 800c05c:	2965      	cmp	r1, #101	; 0x65
 800c05e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c062:	f106 35ff 	add.w	r5, r6, #4294967295
 800c066:	6123      	str	r3, [r4, #16]
 800c068:	d00c      	beq.n	800c084 <_scanf_float+0x34c>
 800c06a:	2945      	cmp	r1, #69	; 0x45
 800c06c:	d00a      	beq.n	800c084 <_scanf_float+0x34c>
 800c06e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c072:	463a      	mov	r2, r7
 800c074:	4640      	mov	r0, r8
 800c076:	4798      	blx	r3
 800c078:	6923      	ldr	r3, [r4, #16]
 800c07a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c07e:	3b01      	subs	r3, #1
 800c080:	1eb5      	subs	r5, r6, #2
 800c082:	6123      	str	r3, [r4, #16]
 800c084:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c088:	463a      	mov	r2, r7
 800c08a:	4640      	mov	r0, r8
 800c08c:	4798      	blx	r3
 800c08e:	462e      	mov	r6, r5
 800c090:	6825      	ldr	r5, [r4, #0]
 800c092:	f015 0510 	ands.w	r5, r5, #16
 800c096:	d159      	bne.n	800c14c <_scanf_float+0x414>
 800c098:	7035      	strb	r5, [r6, #0]
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c0a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0a4:	d11b      	bne.n	800c0de <_scanf_float+0x3a6>
 800c0a6:	9b01      	ldr	r3, [sp, #4]
 800c0a8:	454b      	cmp	r3, r9
 800c0aa:	eba3 0209 	sub.w	r2, r3, r9
 800c0ae:	d123      	bne.n	800c0f8 <_scanf_float+0x3c0>
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	4659      	mov	r1, fp
 800c0b4:	4640      	mov	r0, r8
 800c0b6:	f000 ff4d 	bl	800cf54 <_strtod_r>
 800c0ba:	6822      	ldr	r2, [r4, #0]
 800c0bc:	9b03      	ldr	r3, [sp, #12]
 800c0be:	f012 0f02 	tst.w	r2, #2
 800c0c2:	ec57 6b10 	vmov	r6, r7, d0
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	d021      	beq.n	800c10e <_scanf_float+0x3d6>
 800c0ca:	9903      	ldr	r1, [sp, #12]
 800c0cc:	1d1a      	adds	r2, r3, #4
 800c0ce:	600a      	str	r2, [r1, #0]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	e9c3 6700 	strd	r6, r7, [r3]
 800c0d6:	68e3      	ldr	r3, [r4, #12]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	60e3      	str	r3, [r4, #12]
 800c0dc:	e66d      	b.n	800bdba <_scanf_float+0x82>
 800c0de:	9b04      	ldr	r3, [sp, #16]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d0e5      	beq.n	800c0b0 <_scanf_float+0x378>
 800c0e4:	9905      	ldr	r1, [sp, #20]
 800c0e6:	230a      	movs	r3, #10
 800c0e8:	462a      	mov	r2, r5
 800c0ea:	3101      	adds	r1, #1
 800c0ec:	4640      	mov	r0, r8
 800c0ee:	f001 f815 	bl	800d11c <_strtol_r>
 800c0f2:	9b04      	ldr	r3, [sp, #16]
 800c0f4:	9e05      	ldr	r6, [sp, #20]
 800c0f6:	1ac2      	subs	r2, r0, r3
 800c0f8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c0fc:	429e      	cmp	r6, r3
 800c0fe:	bf28      	it	cs
 800c100:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c104:	4912      	ldr	r1, [pc, #72]	; (800c150 <_scanf_float+0x418>)
 800c106:	4630      	mov	r0, r6
 800c108:	f000 f852 	bl	800c1b0 <siprintf>
 800c10c:	e7d0      	b.n	800c0b0 <_scanf_float+0x378>
 800c10e:	9903      	ldr	r1, [sp, #12]
 800c110:	f012 0f04 	tst.w	r2, #4
 800c114:	f103 0204 	add.w	r2, r3, #4
 800c118:	600a      	str	r2, [r1, #0]
 800c11a:	d1d9      	bne.n	800c0d0 <_scanf_float+0x398>
 800c11c:	f8d3 8000 	ldr.w	r8, [r3]
 800c120:	ee10 2a10 	vmov	r2, s0
 800c124:	ee10 0a10 	vmov	r0, s0
 800c128:	463b      	mov	r3, r7
 800c12a:	4639      	mov	r1, r7
 800c12c:	f7f4 fd0e 	bl	8000b4c <__aeabi_dcmpun>
 800c130:	b128      	cbz	r0, 800c13e <_scanf_float+0x406>
 800c132:	4808      	ldr	r0, [pc, #32]	; (800c154 <_scanf_float+0x41c>)
 800c134:	f000 f836 	bl	800c1a4 <nanf>
 800c138:	ed88 0a00 	vstr	s0, [r8]
 800c13c:	e7cb      	b.n	800c0d6 <_scanf_float+0x39e>
 800c13e:	4630      	mov	r0, r6
 800c140:	4639      	mov	r1, r7
 800c142:	f7f4 fd61 	bl	8000c08 <__aeabi_d2f>
 800c146:	f8c8 0000 	str.w	r0, [r8]
 800c14a:	e7c4      	b.n	800c0d6 <_scanf_float+0x39e>
 800c14c:	2500      	movs	r5, #0
 800c14e:	e634      	b.n	800bdba <_scanf_float+0x82>
 800c150:	08010557 	.word	0x08010557
 800c154:	0801050f 	.word	0x0801050f

0800c158 <putchar>:
 800c158:	4b09      	ldr	r3, [pc, #36]	; (800c180 <putchar+0x28>)
 800c15a:	b513      	push	{r0, r1, r4, lr}
 800c15c:	681c      	ldr	r4, [r3, #0]
 800c15e:	4601      	mov	r1, r0
 800c160:	b134      	cbz	r4, 800c170 <putchar+0x18>
 800c162:	69a3      	ldr	r3, [r4, #24]
 800c164:	b923      	cbnz	r3, 800c170 <putchar+0x18>
 800c166:	9001      	str	r0, [sp, #4]
 800c168:	4620      	mov	r0, r4
 800c16a:	f002 f859 	bl	800e220 <__sinit>
 800c16e:	9901      	ldr	r1, [sp, #4]
 800c170:	68a2      	ldr	r2, [r4, #8]
 800c172:	4620      	mov	r0, r4
 800c174:	b002      	add	sp, #8
 800c176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c17a:	f003 bea9 	b.w	800fed0 <_putc_r>
 800c17e:	bf00      	nop
 800c180:	200013ec 	.word	0x200013ec

0800c184 <_sbrk_r>:
 800c184:	b538      	push	{r3, r4, r5, lr}
 800c186:	4d06      	ldr	r5, [pc, #24]	; (800c1a0 <_sbrk_r+0x1c>)
 800c188:	2300      	movs	r3, #0
 800c18a:	4604      	mov	r4, r0
 800c18c:	4608      	mov	r0, r1
 800c18e:	602b      	str	r3, [r5, #0]
 800c190:	f7fa f8e8 	bl	8006364 <_sbrk>
 800c194:	1c43      	adds	r3, r0, #1
 800c196:	d102      	bne.n	800c19e <_sbrk_r+0x1a>
 800c198:	682b      	ldr	r3, [r5, #0]
 800c19a:	b103      	cbz	r3, 800c19e <_sbrk_r+0x1a>
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	bd38      	pop	{r3, r4, r5, pc}
 800c1a0:	20002130 	.word	0x20002130

0800c1a4 <nanf>:
 800c1a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c1ac <nanf+0x8>
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop
 800c1ac:	7fc00000 	.word	0x7fc00000

0800c1b0 <siprintf>:
 800c1b0:	b40e      	push	{r1, r2, r3}
 800c1b2:	b500      	push	{lr}
 800c1b4:	b09c      	sub	sp, #112	; 0x70
 800c1b6:	ab1d      	add	r3, sp, #116	; 0x74
 800c1b8:	9002      	str	r0, [sp, #8]
 800c1ba:	9006      	str	r0, [sp, #24]
 800c1bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1c0:	4809      	ldr	r0, [pc, #36]	; (800c1e8 <siprintf+0x38>)
 800c1c2:	9107      	str	r1, [sp, #28]
 800c1c4:	9104      	str	r1, [sp, #16]
 800c1c6:	4909      	ldr	r1, [pc, #36]	; (800c1ec <siprintf+0x3c>)
 800c1c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1cc:	9105      	str	r1, [sp, #20]
 800c1ce:	6800      	ldr	r0, [r0, #0]
 800c1d0:	9301      	str	r3, [sp, #4]
 800c1d2:	a902      	add	r1, sp, #8
 800c1d4:	f003 fa58 	bl	800f688 <_svfiprintf_r>
 800c1d8:	9b02      	ldr	r3, [sp, #8]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	701a      	strb	r2, [r3, #0]
 800c1de:	b01c      	add	sp, #112	; 0x70
 800c1e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1e4:	b003      	add	sp, #12
 800c1e6:	4770      	bx	lr
 800c1e8:	200013ec 	.word	0x200013ec
 800c1ec:	ffff0208 	.word	0xffff0208

0800c1f0 <siscanf>:
 800c1f0:	b40e      	push	{r1, r2, r3}
 800c1f2:	b510      	push	{r4, lr}
 800c1f4:	b09f      	sub	sp, #124	; 0x7c
 800c1f6:	ac21      	add	r4, sp, #132	; 0x84
 800c1f8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c1fc:	f854 2b04 	ldr.w	r2, [r4], #4
 800c200:	9201      	str	r2, [sp, #4]
 800c202:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c206:	9004      	str	r0, [sp, #16]
 800c208:	9008      	str	r0, [sp, #32]
 800c20a:	f7f3 ffeb 	bl	80001e4 <strlen>
 800c20e:	4b0c      	ldr	r3, [pc, #48]	; (800c240 <siscanf+0x50>)
 800c210:	9005      	str	r0, [sp, #20]
 800c212:	9009      	str	r0, [sp, #36]	; 0x24
 800c214:	930d      	str	r3, [sp, #52]	; 0x34
 800c216:	480b      	ldr	r0, [pc, #44]	; (800c244 <siscanf+0x54>)
 800c218:	9a01      	ldr	r2, [sp, #4]
 800c21a:	6800      	ldr	r0, [r0, #0]
 800c21c:	9403      	str	r4, [sp, #12]
 800c21e:	2300      	movs	r3, #0
 800c220:	9311      	str	r3, [sp, #68]	; 0x44
 800c222:	9316      	str	r3, [sp, #88]	; 0x58
 800c224:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c228:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c22c:	a904      	add	r1, sp, #16
 800c22e:	4623      	mov	r3, r4
 800c230:	f003 fb84 	bl	800f93c <__ssvfiscanf_r>
 800c234:	b01f      	add	sp, #124	; 0x7c
 800c236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c23a:	b003      	add	sp, #12
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop
 800c240:	0800c26b 	.word	0x0800c26b
 800c244:	200013ec 	.word	0x200013ec

0800c248 <__sread>:
 800c248:	b510      	push	{r4, lr}
 800c24a:	460c      	mov	r4, r1
 800c24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c250:	f003 fe86 	bl	800ff60 <_read_r>
 800c254:	2800      	cmp	r0, #0
 800c256:	bfab      	itete	ge
 800c258:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c25a:	89a3      	ldrhlt	r3, [r4, #12]
 800c25c:	181b      	addge	r3, r3, r0
 800c25e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c262:	bfac      	ite	ge
 800c264:	6563      	strge	r3, [r4, #84]	; 0x54
 800c266:	81a3      	strhlt	r3, [r4, #12]
 800c268:	bd10      	pop	{r4, pc}

0800c26a <__seofread>:
 800c26a:	2000      	movs	r0, #0
 800c26c:	4770      	bx	lr

0800c26e <__swrite>:
 800c26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c272:	461f      	mov	r7, r3
 800c274:	898b      	ldrh	r3, [r1, #12]
 800c276:	05db      	lsls	r3, r3, #23
 800c278:	4605      	mov	r5, r0
 800c27a:	460c      	mov	r4, r1
 800c27c:	4616      	mov	r6, r2
 800c27e:	d505      	bpl.n	800c28c <__swrite+0x1e>
 800c280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c284:	2302      	movs	r3, #2
 800c286:	2200      	movs	r2, #0
 800c288:	f002 fbde 	bl	800ea48 <_lseek_r>
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c296:	81a3      	strh	r3, [r4, #12]
 800c298:	4632      	mov	r2, r6
 800c29a:	463b      	mov	r3, r7
 800c29c:	4628      	mov	r0, r5
 800c29e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a2:	f000 bf8f 	b.w	800d1c4 <_write_r>

0800c2a6 <__sseek>:
 800c2a6:	b510      	push	{r4, lr}
 800c2a8:	460c      	mov	r4, r1
 800c2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ae:	f002 fbcb 	bl	800ea48 <_lseek_r>
 800c2b2:	1c43      	adds	r3, r0, #1
 800c2b4:	89a3      	ldrh	r3, [r4, #12]
 800c2b6:	bf15      	itete	ne
 800c2b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2c2:	81a3      	strheq	r3, [r4, #12]
 800c2c4:	bf18      	it	ne
 800c2c6:	81a3      	strhne	r3, [r4, #12]
 800c2c8:	bd10      	pop	{r4, pc}

0800c2ca <__sclose>:
 800c2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ce:	f001 b801 	b.w	800d2d4 <_close_r>
	...

0800c2d4 <strdup>:
 800c2d4:	4b02      	ldr	r3, [pc, #8]	; (800c2e0 <strdup+0xc>)
 800c2d6:	4601      	mov	r1, r0
 800c2d8:	6818      	ldr	r0, [r3, #0]
 800c2da:	f000 b803 	b.w	800c2e4 <_strdup_r>
 800c2de:	bf00      	nop
 800c2e0:	200013ec 	.word	0x200013ec

0800c2e4 <_strdup_r>:
 800c2e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	4608      	mov	r0, r1
 800c2ea:	460d      	mov	r5, r1
 800c2ec:	f7f3 ff7a 	bl	80001e4 <strlen>
 800c2f0:	1c42      	adds	r2, r0, #1
 800c2f2:	4611      	mov	r1, r2
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	9201      	str	r2, [sp, #4]
 800c2f8:	f7fe fee6 	bl	800b0c8 <_malloc_r>
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	b118      	cbz	r0, 800c308 <_strdup_r+0x24>
 800c300:	9a01      	ldr	r2, [sp, #4]
 800c302:	4629      	mov	r1, r5
 800c304:	f002 fc2a 	bl	800eb5c <memcpy>
 800c308:	4620      	mov	r0, r4
 800c30a:	b003      	add	sp, #12
 800c30c:	bd30      	pop	{r4, r5, pc}

0800c30e <sulp>:
 800c30e:	b570      	push	{r4, r5, r6, lr}
 800c310:	4604      	mov	r4, r0
 800c312:	460d      	mov	r5, r1
 800c314:	ec45 4b10 	vmov	d0, r4, r5
 800c318:	4616      	mov	r6, r2
 800c31a:	f002 ffc5 	bl	800f2a8 <__ulp>
 800c31e:	ec51 0b10 	vmov	r0, r1, d0
 800c322:	b17e      	cbz	r6, 800c344 <sulp+0x36>
 800c324:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c328:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	dd09      	ble.n	800c344 <sulp+0x36>
 800c330:	051b      	lsls	r3, r3, #20
 800c332:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c336:	2400      	movs	r4, #0
 800c338:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c33c:	4622      	mov	r2, r4
 800c33e:	462b      	mov	r3, r5
 800c340:	f7f4 f96a 	bl	8000618 <__aeabi_dmul>
 800c344:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c348 <_strtod_l>:
 800c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34c:	ed2d 8b02 	vpush	{d8}
 800c350:	b09d      	sub	sp, #116	; 0x74
 800c352:	461f      	mov	r7, r3
 800c354:	2300      	movs	r3, #0
 800c356:	9318      	str	r3, [sp, #96]	; 0x60
 800c358:	4ba2      	ldr	r3, [pc, #648]	; (800c5e4 <_strtod_l+0x29c>)
 800c35a:	9213      	str	r2, [sp, #76]	; 0x4c
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	9305      	str	r3, [sp, #20]
 800c360:	4604      	mov	r4, r0
 800c362:	4618      	mov	r0, r3
 800c364:	4688      	mov	r8, r1
 800c366:	f7f3 ff3d 	bl	80001e4 <strlen>
 800c36a:	f04f 0a00 	mov.w	sl, #0
 800c36e:	4605      	mov	r5, r0
 800c370:	f04f 0b00 	mov.w	fp, #0
 800c374:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c378:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c37a:	781a      	ldrb	r2, [r3, #0]
 800c37c:	2a2b      	cmp	r2, #43	; 0x2b
 800c37e:	d04e      	beq.n	800c41e <_strtod_l+0xd6>
 800c380:	d83b      	bhi.n	800c3fa <_strtod_l+0xb2>
 800c382:	2a0d      	cmp	r2, #13
 800c384:	d834      	bhi.n	800c3f0 <_strtod_l+0xa8>
 800c386:	2a08      	cmp	r2, #8
 800c388:	d834      	bhi.n	800c3f4 <_strtod_l+0xac>
 800c38a:	2a00      	cmp	r2, #0
 800c38c:	d03e      	beq.n	800c40c <_strtod_l+0xc4>
 800c38e:	2300      	movs	r3, #0
 800c390:	930a      	str	r3, [sp, #40]	; 0x28
 800c392:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c394:	7833      	ldrb	r3, [r6, #0]
 800c396:	2b30      	cmp	r3, #48	; 0x30
 800c398:	f040 80b0 	bne.w	800c4fc <_strtod_l+0x1b4>
 800c39c:	7873      	ldrb	r3, [r6, #1]
 800c39e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c3a2:	2b58      	cmp	r3, #88	; 0x58
 800c3a4:	d168      	bne.n	800c478 <_strtod_l+0x130>
 800c3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3a8:	9301      	str	r3, [sp, #4]
 800c3aa:	ab18      	add	r3, sp, #96	; 0x60
 800c3ac:	9702      	str	r7, [sp, #8]
 800c3ae:	9300      	str	r3, [sp, #0]
 800c3b0:	4a8d      	ldr	r2, [pc, #564]	; (800c5e8 <_strtod_l+0x2a0>)
 800c3b2:	ab19      	add	r3, sp, #100	; 0x64
 800c3b4:	a917      	add	r1, sp, #92	; 0x5c
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f002 f836 	bl	800e428 <__gethex>
 800c3bc:	f010 0707 	ands.w	r7, r0, #7
 800c3c0:	4605      	mov	r5, r0
 800c3c2:	d005      	beq.n	800c3d0 <_strtod_l+0x88>
 800c3c4:	2f06      	cmp	r7, #6
 800c3c6:	d12c      	bne.n	800c422 <_strtod_l+0xda>
 800c3c8:	3601      	adds	r6, #1
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	9617      	str	r6, [sp, #92]	; 0x5c
 800c3ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c3d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f040 8590 	bne.w	800cef8 <_strtod_l+0xbb0>
 800c3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3da:	b1eb      	cbz	r3, 800c418 <_strtod_l+0xd0>
 800c3dc:	4652      	mov	r2, sl
 800c3de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c3e2:	ec43 2b10 	vmov	d0, r2, r3
 800c3e6:	b01d      	add	sp, #116	; 0x74
 800c3e8:	ecbd 8b02 	vpop	{d8}
 800c3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f0:	2a20      	cmp	r2, #32
 800c3f2:	d1cc      	bne.n	800c38e <_strtod_l+0x46>
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	9317      	str	r3, [sp, #92]	; 0x5c
 800c3f8:	e7be      	b.n	800c378 <_strtod_l+0x30>
 800c3fa:	2a2d      	cmp	r2, #45	; 0x2d
 800c3fc:	d1c7      	bne.n	800c38e <_strtod_l+0x46>
 800c3fe:	2201      	movs	r2, #1
 800c400:	920a      	str	r2, [sp, #40]	; 0x28
 800c402:	1c5a      	adds	r2, r3, #1
 800c404:	9217      	str	r2, [sp, #92]	; 0x5c
 800c406:	785b      	ldrb	r3, [r3, #1]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1c2      	bne.n	800c392 <_strtod_l+0x4a>
 800c40c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c40e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c412:	2b00      	cmp	r3, #0
 800c414:	f040 856e 	bne.w	800cef4 <_strtod_l+0xbac>
 800c418:	4652      	mov	r2, sl
 800c41a:	465b      	mov	r3, fp
 800c41c:	e7e1      	b.n	800c3e2 <_strtod_l+0x9a>
 800c41e:	2200      	movs	r2, #0
 800c420:	e7ee      	b.n	800c400 <_strtod_l+0xb8>
 800c422:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c424:	b13a      	cbz	r2, 800c436 <_strtod_l+0xee>
 800c426:	2135      	movs	r1, #53	; 0x35
 800c428:	a81a      	add	r0, sp, #104	; 0x68
 800c42a:	f003 f848 	bl	800f4be <__copybits>
 800c42e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c430:	4620      	mov	r0, r4
 800c432:	f002 fc07 	bl	800ec44 <_Bfree>
 800c436:	3f01      	subs	r7, #1
 800c438:	2f04      	cmp	r7, #4
 800c43a:	d806      	bhi.n	800c44a <_strtod_l+0x102>
 800c43c:	e8df f007 	tbb	[pc, r7]
 800c440:	1714030a 	.word	0x1714030a
 800c444:	0a          	.byte	0x0a
 800c445:	00          	.byte	0x00
 800c446:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c44a:	0728      	lsls	r0, r5, #28
 800c44c:	d5c0      	bpl.n	800c3d0 <_strtod_l+0x88>
 800c44e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c452:	e7bd      	b.n	800c3d0 <_strtod_l+0x88>
 800c454:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c458:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c45a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c45e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c462:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c466:	e7f0      	b.n	800c44a <_strtod_l+0x102>
 800c468:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c5ec <_strtod_l+0x2a4>
 800c46c:	e7ed      	b.n	800c44a <_strtod_l+0x102>
 800c46e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c472:	f04f 3aff 	mov.w	sl, #4294967295
 800c476:	e7e8      	b.n	800c44a <_strtod_l+0x102>
 800c478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c47a:	1c5a      	adds	r2, r3, #1
 800c47c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c47e:	785b      	ldrb	r3, [r3, #1]
 800c480:	2b30      	cmp	r3, #48	; 0x30
 800c482:	d0f9      	beq.n	800c478 <_strtod_l+0x130>
 800c484:	2b00      	cmp	r3, #0
 800c486:	d0a3      	beq.n	800c3d0 <_strtod_l+0x88>
 800c488:	2301      	movs	r3, #1
 800c48a:	f04f 0900 	mov.w	r9, #0
 800c48e:	9304      	str	r3, [sp, #16]
 800c490:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c492:	9308      	str	r3, [sp, #32]
 800c494:	f8cd 901c 	str.w	r9, [sp, #28]
 800c498:	464f      	mov	r7, r9
 800c49a:	220a      	movs	r2, #10
 800c49c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c49e:	7806      	ldrb	r6, [r0, #0]
 800c4a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c4a4:	b2d9      	uxtb	r1, r3
 800c4a6:	2909      	cmp	r1, #9
 800c4a8:	d92a      	bls.n	800c500 <_strtod_l+0x1b8>
 800c4aa:	9905      	ldr	r1, [sp, #20]
 800c4ac:	462a      	mov	r2, r5
 800c4ae:	f003 fdef 	bl	8010090 <strncmp>
 800c4b2:	b398      	cbz	r0, 800c51c <_strtod_l+0x1d4>
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	4632      	mov	r2, r6
 800c4b8:	463d      	mov	r5, r7
 800c4ba:	9005      	str	r0, [sp, #20]
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2a65      	cmp	r2, #101	; 0x65
 800c4c0:	d001      	beq.n	800c4c6 <_strtod_l+0x17e>
 800c4c2:	2a45      	cmp	r2, #69	; 0x45
 800c4c4:	d118      	bne.n	800c4f8 <_strtod_l+0x1b0>
 800c4c6:	b91d      	cbnz	r5, 800c4d0 <_strtod_l+0x188>
 800c4c8:	9a04      	ldr	r2, [sp, #16]
 800c4ca:	4302      	orrs	r2, r0
 800c4cc:	d09e      	beq.n	800c40c <_strtod_l+0xc4>
 800c4ce:	2500      	movs	r5, #0
 800c4d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c4d4:	f108 0201 	add.w	r2, r8, #1
 800c4d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800c4da:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c4de:	2a2b      	cmp	r2, #43	; 0x2b
 800c4e0:	d075      	beq.n	800c5ce <_strtod_l+0x286>
 800c4e2:	2a2d      	cmp	r2, #45	; 0x2d
 800c4e4:	d07b      	beq.n	800c5de <_strtod_l+0x296>
 800c4e6:	f04f 0c00 	mov.w	ip, #0
 800c4ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c4ee:	2909      	cmp	r1, #9
 800c4f0:	f240 8082 	bls.w	800c5f8 <_strtod_l+0x2b0>
 800c4f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c4f8:	2600      	movs	r6, #0
 800c4fa:	e09d      	b.n	800c638 <_strtod_l+0x2f0>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	e7c4      	b.n	800c48a <_strtod_l+0x142>
 800c500:	2f08      	cmp	r7, #8
 800c502:	bfd8      	it	le
 800c504:	9907      	ldrle	r1, [sp, #28]
 800c506:	f100 0001 	add.w	r0, r0, #1
 800c50a:	bfda      	itte	le
 800c50c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c510:	9307      	strle	r3, [sp, #28]
 800c512:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c516:	3701      	adds	r7, #1
 800c518:	9017      	str	r0, [sp, #92]	; 0x5c
 800c51a:	e7bf      	b.n	800c49c <_strtod_l+0x154>
 800c51c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c51e:	195a      	adds	r2, r3, r5
 800c520:	9217      	str	r2, [sp, #92]	; 0x5c
 800c522:	5d5a      	ldrb	r2, [r3, r5]
 800c524:	2f00      	cmp	r7, #0
 800c526:	d037      	beq.n	800c598 <_strtod_l+0x250>
 800c528:	9005      	str	r0, [sp, #20]
 800c52a:	463d      	mov	r5, r7
 800c52c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c530:	2b09      	cmp	r3, #9
 800c532:	d912      	bls.n	800c55a <_strtod_l+0x212>
 800c534:	2301      	movs	r3, #1
 800c536:	e7c2      	b.n	800c4be <_strtod_l+0x176>
 800c538:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c53a:	1c5a      	adds	r2, r3, #1
 800c53c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c53e:	785a      	ldrb	r2, [r3, #1]
 800c540:	3001      	adds	r0, #1
 800c542:	2a30      	cmp	r2, #48	; 0x30
 800c544:	d0f8      	beq.n	800c538 <_strtod_l+0x1f0>
 800c546:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c54a:	2b08      	cmp	r3, #8
 800c54c:	f200 84d9 	bhi.w	800cf02 <_strtod_l+0xbba>
 800c550:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c552:	9005      	str	r0, [sp, #20]
 800c554:	2000      	movs	r0, #0
 800c556:	9308      	str	r3, [sp, #32]
 800c558:	4605      	mov	r5, r0
 800c55a:	3a30      	subs	r2, #48	; 0x30
 800c55c:	f100 0301 	add.w	r3, r0, #1
 800c560:	d014      	beq.n	800c58c <_strtod_l+0x244>
 800c562:	9905      	ldr	r1, [sp, #20]
 800c564:	4419      	add	r1, r3
 800c566:	9105      	str	r1, [sp, #20]
 800c568:	462b      	mov	r3, r5
 800c56a:	eb00 0e05 	add.w	lr, r0, r5
 800c56e:	210a      	movs	r1, #10
 800c570:	4573      	cmp	r3, lr
 800c572:	d113      	bne.n	800c59c <_strtod_l+0x254>
 800c574:	182b      	adds	r3, r5, r0
 800c576:	2b08      	cmp	r3, #8
 800c578:	f105 0501 	add.w	r5, r5, #1
 800c57c:	4405      	add	r5, r0
 800c57e:	dc1c      	bgt.n	800c5ba <_strtod_l+0x272>
 800c580:	9907      	ldr	r1, [sp, #28]
 800c582:	230a      	movs	r3, #10
 800c584:	fb03 2301 	mla	r3, r3, r1, r2
 800c588:	9307      	str	r3, [sp, #28]
 800c58a:	2300      	movs	r3, #0
 800c58c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c58e:	1c51      	adds	r1, r2, #1
 800c590:	9117      	str	r1, [sp, #92]	; 0x5c
 800c592:	7852      	ldrb	r2, [r2, #1]
 800c594:	4618      	mov	r0, r3
 800c596:	e7c9      	b.n	800c52c <_strtod_l+0x1e4>
 800c598:	4638      	mov	r0, r7
 800c59a:	e7d2      	b.n	800c542 <_strtod_l+0x1fa>
 800c59c:	2b08      	cmp	r3, #8
 800c59e:	dc04      	bgt.n	800c5aa <_strtod_l+0x262>
 800c5a0:	9e07      	ldr	r6, [sp, #28]
 800c5a2:	434e      	muls	r6, r1
 800c5a4:	9607      	str	r6, [sp, #28]
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	e7e2      	b.n	800c570 <_strtod_l+0x228>
 800c5aa:	f103 0c01 	add.w	ip, r3, #1
 800c5ae:	f1bc 0f10 	cmp.w	ip, #16
 800c5b2:	bfd8      	it	le
 800c5b4:	fb01 f909 	mulle.w	r9, r1, r9
 800c5b8:	e7f5      	b.n	800c5a6 <_strtod_l+0x25e>
 800c5ba:	2d10      	cmp	r5, #16
 800c5bc:	bfdc      	itt	le
 800c5be:	230a      	movle	r3, #10
 800c5c0:	fb03 2909 	mlale	r9, r3, r9, r2
 800c5c4:	e7e1      	b.n	800c58a <_strtod_l+0x242>
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	9305      	str	r3, [sp, #20]
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e77c      	b.n	800c4c8 <_strtod_l+0x180>
 800c5ce:	f04f 0c00 	mov.w	ip, #0
 800c5d2:	f108 0202 	add.w	r2, r8, #2
 800c5d6:	9217      	str	r2, [sp, #92]	; 0x5c
 800c5d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c5dc:	e785      	b.n	800c4ea <_strtod_l+0x1a2>
 800c5de:	f04f 0c01 	mov.w	ip, #1
 800c5e2:	e7f6      	b.n	800c5d2 <_strtod_l+0x28a>
 800c5e4:	08010868 	.word	0x08010868
 800c5e8:	0801055c 	.word	0x0801055c
 800c5ec:	7ff00000 	.word	0x7ff00000
 800c5f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c5f2:	1c51      	adds	r1, r2, #1
 800c5f4:	9117      	str	r1, [sp, #92]	; 0x5c
 800c5f6:	7852      	ldrb	r2, [r2, #1]
 800c5f8:	2a30      	cmp	r2, #48	; 0x30
 800c5fa:	d0f9      	beq.n	800c5f0 <_strtod_l+0x2a8>
 800c5fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c600:	2908      	cmp	r1, #8
 800c602:	f63f af79 	bhi.w	800c4f8 <_strtod_l+0x1b0>
 800c606:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c60a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c60c:	9206      	str	r2, [sp, #24]
 800c60e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c610:	1c51      	adds	r1, r2, #1
 800c612:	9117      	str	r1, [sp, #92]	; 0x5c
 800c614:	7852      	ldrb	r2, [r2, #1]
 800c616:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c61a:	2e09      	cmp	r6, #9
 800c61c:	d937      	bls.n	800c68e <_strtod_l+0x346>
 800c61e:	9e06      	ldr	r6, [sp, #24]
 800c620:	1b89      	subs	r1, r1, r6
 800c622:	2908      	cmp	r1, #8
 800c624:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c628:	dc02      	bgt.n	800c630 <_strtod_l+0x2e8>
 800c62a:	4576      	cmp	r6, lr
 800c62c:	bfa8      	it	ge
 800c62e:	4676      	movge	r6, lr
 800c630:	f1bc 0f00 	cmp.w	ip, #0
 800c634:	d000      	beq.n	800c638 <_strtod_l+0x2f0>
 800c636:	4276      	negs	r6, r6
 800c638:	2d00      	cmp	r5, #0
 800c63a:	d14d      	bne.n	800c6d8 <_strtod_l+0x390>
 800c63c:	9904      	ldr	r1, [sp, #16]
 800c63e:	4301      	orrs	r1, r0
 800c640:	f47f aec6 	bne.w	800c3d0 <_strtod_l+0x88>
 800c644:	2b00      	cmp	r3, #0
 800c646:	f47f aee1 	bne.w	800c40c <_strtod_l+0xc4>
 800c64a:	2a69      	cmp	r2, #105	; 0x69
 800c64c:	d027      	beq.n	800c69e <_strtod_l+0x356>
 800c64e:	dc24      	bgt.n	800c69a <_strtod_l+0x352>
 800c650:	2a49      	cmp	r2, #73	; 0x49
 800c652:	d024      	beq.n	800c69e <_strtod_l+0x356>
 800c654:	2a4e      	cmp	r2, #78	; 0x4e
 800c656:	f47f aed9 	bne.w	800c40c <_strtod_l+0xc4>
 800c65a:	499f      	ldr	r1, [pc, #636]	; (800c8d8 <_strtod_l+0x590>)
 800c65c:	a817      	add	r0, sp, #92	; 0x5c
 800c65e:	f002 f93b 	bl	800e8d8 <__match>
 800c662:	2800      	cmp	r0, #0
 800c664:	f43f aed2 	beq.w	800c40c <_strtod_l+0xc4>
 800c668:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	2b28      	cmp	r3, #40	; 0x28
 800c66e:	d12d      	bne.n	800c6cc <_strtod_l+0x384>
 800c670:	499a      	ldr	r1, [pc, #616]	; (800c8dc <_strtod_l+0x594>)
 800c672:	aa1a      	add	r2, sp, #104	; 0x68
 800c674:	a817      	add	r0, sp, #92	; 0x5c
 800c676:	f002 f943 	bl	800e900 <__hexnan>
 800c67a:	2805      	cmp	r0, #5
 800c67c:	d126      	bne.n	800c6cc <_strtod_l+0x384>
 800c67e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c680:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c684:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c688:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c68c:	e6a0      	b.n	800c3d0 <_strtod_l+0x88>
 800c68e:	210a      	movs	r1, #10
 800c690:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c694:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c698:	e7b9      	b.n	800c60e <_strtod_l+0x2c6>
 800c69a:	2a6e      	cmp	r2, #110	; 0x6e
 800c69c:	e7db      	b.n	800c656 <_strtod_l+0x30e>
 800c69e:	4990      	ldr	r1, [pc, #576]	; (800c8e0 <_strtod_l+0x598>)
 800c6a0:	a817      	add	r0, sp, #92	; 0x5c
 800c6a2:	f002 f919 	bl	800e8d8 <__match>
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	f43f aeb0 	beq.w	800c40c <_strtod_l+0xc4>
 800c6ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6ae:	498d      	ldr	r1, [pc, #564]	; (800c8e4 <_strtod_l+0x59c>)
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	a817      	add	r0, sp, #92	; 0x5c
 800c6b4:	9317      	str	r3, [sp, #92]	; 0x5c
 800c6b6:	f002 f90f 	bl	800e8d8 <__match>
 800c6ba:	b910      	cbnz	r0, 800c6c2 <_strtod_l+0x37a>
 800c6bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6be:	3301      	adds	r3, #1
 800c6c0:	9317      	str	r3, [sp, #92]	; 0x5c
 800c6c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c8f4 <_strtod_l+0x5ac>
 800c6c6:	f04f 0a00 	mov.w	sl, #0
 800c6ca:	e681      	b.n	800c3d0 <_strtod_l+0x88>
 800c6cc:	4886      	ldr	r0, [pc, #536]	; (800c8e8 <_strtod_l+0x5a0>)
 800c6ce:	f003 fc5b 	bl	800ff88 <nan>
 800c6d2:	ec5b ab10 	vmov	sl, fp, d0
 800c6d6:	e67b      	b.n	800c3d0 <_strtod_l+0x88>
 800c6d8:	9b05      	ldr	r3, [sp, #20]
 800c6da:	9807      	ldr	r0, [sp, #28]
 800c6dc:	1af3      	subs	r3, r6, r3
 800c6de:	2f00      	cmp	r7, #0
 800c6e0:	bf08      	it	eq
 800c6e2:	462f      	moveq	r7, r5
 800c6e4:	2d10      	cmp	r5, #16
 800c6e6:	9306      	str	r3, [sp, #24]
 800c6e8:	46a8      	mov	r8, r5
 800c6ea:	bfa8      	it	ge
 800c6ec:	f04f 0810 	movge.w	r8, #16
 800c6f0:	f7f3 ff18 	bl	8000524 <__aeabi_ui2d>
 800c6f4:	2d09      	cmp	r5, #9
 800c6f6:	4682      	mov	sl, r0
 800c6f8:	468b      	mov	fp, r1
 800c6fa:	dd13      	ble.n	800c724 <_strtod_l+0x3dc>
 800c6fc:	4b7b      	ldr	r3, [pc, #492]	; (800c8ec <_strtod_l+0x5a4>)
 800c6fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c702:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c706:	f7f3 ff87 	bl	8000618 <__aeabi_dmul>
 800c70a:	4682      	mov	sl, r0
 800c70c:	4648      	mov	r0, r9
 800c70e:	468b      	mov	fp, r1
 800c710:	f7f3 ff08 	bl	8000524 <__aeabi_ui2d>
 800c714:	4602      	mov	r2, r0
 800c716:	460b      	mov	r3, r1
 800c718:	4650      	mov	r0, sl
 800c71a:	4659      	mov	r1, fp
 800c71c:	f7f3 fdc6 	bl	80002ac <__adddf3>
 800c720:	4682      	mov	sl, r0
 800c722:	468b      	mov	fp, r1
 800c724:	2d0f      	cmp	r5, #15
 800c726:	dc38      	bgt.n	800c79a <_strtod_l+0x452>
 800c728:	9b06      	ldr	r3, [sp, #24]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f43f ae50 	beq.w	800c3d0 <_strtod_l+0x88>
 800c730:	dd24      	ble.n	800c77c <_strtod_l+0x434>
 800c732:	2b16      	cmp	r3, #22
 800c734:	dc0b      	bgt.n	800c74e <_strtod_l+0x406>
 800c736:	496d      	ldr	r1, [pc, #436]	; (800c8ec <_strtod_l+0x5a4>)
 800c738:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c73c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c740:	4652      	mov	r2, sl
 800c742:	465b      	mov	r3, fp
 800c744:	f7f3 ff68 	bl	8000618 <__aeabi_dmul>
 800c748:	4682      	mov	sl, r0
 800c74a:	468b      	mov	fp, r1
 800c74c:	e640      	b.n	800c3d0 <_strtod_l+0x88>
 800c74e:	9a06      	ldr	r2, [sp, #24]
 800c750:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c754:	4293      	cmp	r3, r2
 800c756:	db20      	blt.n	800c79a <_strtod_l+0x452>
 800c758:	4c64      	ldr	r4, [pc, #400]	; (800c8ec <_strtod_l+0x5a4>)
 800c75a:	f1c5 050f 	rsb	r5, r5, #15
 800c75e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c762:	4652      	mov	r2, sl
 800c764:	465b      	mov	r3, fp
 800c766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c76a:	f7f3 ff55 	bl	8000618 <__aeabi_dmul>
 800c76e:	9b06      	ldr	r3, [sp, #24]
 800c770:	1b5d      	subs	r5, r3, r5
 800c772:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c776:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c77a:	e7e3      	b.n	800c744 <_strtod_l+0x3fc>
 800c77c:	9b06      	ldr	r3, [sp, #24]
 800c77e:	3316      	adds	r3, #22
 800c780:	db0b      	blt.n	800c79a <_strtod_l+0x452>
 800c782:	9b05      	ldr	r3, [sp, #20]
 800c784:	1b9e      	subs	r6, r3, r6
 800c786:	4b59      	ldr	r3, [pc, #356]	; (800c8ec <_strtod_l+0x5a4>)
 800c788:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c78c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c790:	4650      	mov	r0, sl
 800c792:	4659      	mov	r1, fp
 800c794:	f7f4 f86a 	bl	800086c <__aeabi_ddiv>
 800c798:	e7d6      	b.n	800c748 <_strtod_l+0x400>
 800c79a:	9b06      	ldr	r3, [sp, #24]
 800c79c:	eba5 0808 	sub.w	r8, r5, r8
 800c7a0:	4498      	add	r8, r3
 800c7a2:	f1b8 0f00 	cmp.w	r8, #0
 800c7a6:	dd74      	ble.n	800c892 <_strtod_l+0x54a>
 800c7a8:	f018 030f 	ands.w	r3, r8, #15
 800c7ac:	d00a      	beq.n	800c7c4 <_strtod_l+0x47c>
 800c7ae:	494f      	ldr	r1, [pc, #316]	; (800c8ec <_strtod_l+0x5a4>)
 800c7b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c7b4:	4652      	mov	r2, sl
 800c7b6:	465b      	mov	r3, fp
 800c7b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7bc:	f7f3 ff2c 	bl	8000618 <__aeabi_dmul>
 800c7c0:	4682      	mov	sl, r0
 800c7c2:	468b      	mov	fp, r1
 800c7c4:	f038 080f 	bics.w	r8, r8, #15
 800c7c8:	d04f      	beq.n	800c86a <_strtod_l+0x522>
 800c7ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c7ce:	dd22      	ble.n	800c816 <_strtod_l+0x4ce>
 800c7d0:	2500      	movs	r5, #0
 800c7d2:	462e      	mov	r6, r5
 800c7d4:	9507      	str	r5, [sp, #28]
 800c7d6:	9505      	str	r5, [sp, #20]
 800c7d8:	2322      	movs	r3, #34	; 0x22
 800c7da:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c8f4 <_strtod_l+0x5ac>
 800c7de:	6023      	str	r3, [r4, #0]
 800c7e0:	f04f 0a00 	mov.w	sl, #0
 800c7e4:	9b07      	ldr	r3, [sp, #28]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	f43f adf2 	beq.w	800c3d0 <_strtod_l+0x88>
 800c7ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	f002 fa28 	bl	800ec44 <_Bfree>
 800c7f4:	9905      	ldr	r1, [sp, #20]
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	f002 fa24 	bl	800ec44 <_Bfree>
 800c7fc:	4631      	mov	r1, r6
 800c7fe:	4620      	mov	r0, r4
 800c800:	f002 fa20 	bl	800ec44 <_Bfree>
 800c804:	9907      	ldr	r1, [sp, #28]
 800c806:	4620      	mov	r0, r4
 800c808:	f002 fa1c 	bl	800ec44 <_Bfree>
 800c80c:	4629      	mov	r1, r5
 800c80e:	4620      	mov	r0, r4
 800c810:	f002 fa18 	bl	800ec44 <_Bfree>
 800c814:	e5dc      	b.n	800c3d0 <_strtod_l+0x88>
 800c816:	4b36      	ldr	r3, [pc, #216]	; (800c8f0 <_strtod_l+0x5a8>)
 800c818:	9304      	str	r3, [sp, #16]
 800c81a:	2300      	movs	r3, #0
 800c81c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c820:	4650      	mov	r0, sl
 800c822:	4659      	mov	r1, fp
 800c824:	4699      	mov	r9, r3
 800c826:	f1b8 0f01 	cmp.w	r8, #1
 800c82a:	dc21      	bgt.n	800c870 <_strtod_l+0x528>
 800c82c:	b10b      	cbz	r3, 800c832 <_strtod_l+0x4ea>
 800c82e:	4682      	mov	sl, r0
 800c830:	468b      	mov	fp, r1
 800c832:	4b2f      	ldr	r3, [pc, #188]	; (800c8f0 <_strtod_l+0x5a8>)
 800c834:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c838:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c83c:	4652      	mov	r2, sl
 800c83e:	465b      	mov	r3, fp
 800c840:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c844:	f7f3 fee8 	bl	8000618 <__aeabi_dmul>
 800c848:	4b2a      	ldr	r3, [pc, #168]	; (800c8f4 <_strtod_l+0x5ac>)
 800c84a:	460a      	mov	r2, r1
 800c84c:	400b      	ands	r3, r1
 800c84e:	492a      	ldr	r1, [pc, #168]	; (800c8f8 <_strtod_l+0x5b0>)
 800c850:	428b      	cmp	r3, r1
 800c852:	4682      	mov	sl, r0
 800c854:	d8bc      	bhi.n	800c7d0 <_strtod_l+0x488>
 800c856:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c85a:	428b      	cmp	r3, r1
 800c85c:	bf86      	itte	hi
 800c85e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c8fc <_strtod_l+0x5b4>
 800c862:	f04f 3aff 	movhi.w	sl, #4294967295
 800c866:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c86a:	2300      	movs	r3, #0
 800c86c:	9304      	str	r3, [sp, #16]
 800c86e:	e084      	b.n	800c97a <_strtod_l+0x632>
 800c870:	f018 0f01 	tst.w	r8, #1
 800c874:	d005      	beq.n	800c882 <_strtod_l+0x53a>
 800c876:	9b04      	ldr	r3, [sp, #16]
 800c878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87c:	f7f3 fecc 	bl	8000618 <__aeabi_dmul>
 800c880:	2301      	movs	r3, #1
 800c882:	9a04      	ldr	r2, [sp, #16]
 800c884:	3208      	adds	r2, #8
 800c886:	f109 0901 	add.w	r9, r9, #1
 800c88a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c88e:	9204      	str	r2, [sp, #16]
 800c890:	e7c9      	b.n	800c826 <_strtod_l+0x4de>
 800c892:	d0ea      	beq.n	800c86a <_strtod_l+0x522>
 800c894:	f1c8 0800 	rsb	r8, r8, #0
 800c898:	f018 020f 	ands.w	r2, r8, #15
 800c89c:	d00a      	beq.n	800c8b4 <_strtod_l+0x56c>
 800c89e:	4b13      	ldr	r3, [pc, #76]	; (800c8ec <_strtod_l+0x5a4>)
 800c8a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8a4:	4650      	mov	r0, sl
 800c8a6:	4659      	mov	r1, fp
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	f7f3 ffde 	bl	800086c <__aeabi_ddiv>
 800c8b0:	4682      	mov	sl, r0
 800c8b2:	468b      	mov	fp, r1
 800c8b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c8b8:	d0d7      	beq.n	800c86a <_strtod_l+0x522>
 800c8ba:	f1b8 0f1f 	cmp.w	r8, #31
 800c8be:	dd1f      	ble.n	800c900 <_strtod_l+0x5b8>
 800c8c0:	2500      	movs	r5, #0
 800c8c2:	462e      	mov	r6, r5
 800c8c4:	9507      	str	r5, [sp, #28]
 800c8c6:	9505      	str	r5, [sp, #20]
 800c8c8:	2322      	movs	r3, #34	; 0x22
 800c8ca:	f04f 0a00 	mov.w	sl, #0
 800c8ce:	f04f 0b00 	mov.w	fp, #0
 800c8d2:	6023      	str	r3, [r4, #0]
 800c8d4:	e786      	b.n	800c7e4 <_strtod_l+0x49c>
 800c8d6:	bf00      	nop
 800c8d8:	08010532 	.word	0x08010532
 800c8dc:	08010570 	.word	0x08010570
 800c8e0:	0801052a 	.word	0x0801052a
 800c8e4:	08010728 	.word	0x08010728
 800c8e8:	0801050f 	.word	0x0801050f
 800c8ec:	08010900 	.word	0x08010900
 800c8f0:	080108d8 	.word	0x080108d8
 800c8f4:	7ff00000 	.word	0x7ff00000
 800c8f8:	7ca00000 	.word	0x7ca00000
 800c8fc:	7fefffff 	.word	0x7fefffff
 800c900:	f018 0310 	ands.w	r3, r8, #16
 800c904:	bf18      	it	ne
 800c906:	236a      	movne	r3, #106	; 0x6a
 800c908:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ccb8 <_strtod_l+0x970>
 800c90c:	9304      	str	r3, [sp, #16]
 800c90e:	4650      	mov	r0, sl
 800c910:	4659      	mov	r1, fp
 800c912:	2300      	movs	r3, #0
 800c914:	f018 0f01 	tst.w	r8, #1
 800c918:	d004      	beq.n	800c924 <_strtod_l+0x5dc>
 800c91a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c91e:	f7f3 fe7b 	bl	8000618 <__aeabi_dmul>
 800c922:	2301      	movs	r3, #1
 800c924:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c928:	f109 0908 	add.w	r9, r9, #8
 800c92c:	d1f2      	bne.n	800c914 <_strtod_l+0x5cc>
 800c92e:	b10b      	cbz	r3, 800c934 <_strtod_l+0x5ec>
 800c930:	4682      	mov	sl, r0
 800c932:	468b      	mov	fp, r1
 800c934:	9b04      	ldr	r3, [sp, #16]
 800c936:	b1c3      	cbz	r3, 800c96a <_strtod_l+0x622>
 800c938:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c93c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c940:	2b00      	cmp	r3, #0
 800c942:	4659      	mov	r1, fp
 800c944:	dd11      	ble.n	800c96a <_strtod_l+0x622>
 800c946:	2b1f      	cmp	r3, #31
 800c948:	f340 8124 	ble.w	800cb94 <_strtod_l+0x84c>
 800c94c:	2b34      	cmp	r3, #52	; 0x34
 800c94e:	bfde      	ittt	le
 800c950:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c954:	f04f 33ff 	movle.w	r3, #4294967295
 800c958:	fa03 f202 	lslle.w	r2, r3, r2
 800c95c:	f04f 0a00 	mov.w	sl, #0
 800c960:	bfcc      	ite	gt
 800c962:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c966:	ea02 0b01 	andle.w	fp, r2, r1
 800c96a:	2200      	movs	r2, #0
 800c96c:	2300      	movs	r3, #0
 800c96e:	4650      	mov	r0, sl
 800c970:	4659      	mov	r1, fp
 800c972:	f7f4 f8b9 	bl	8000ae8 <__aeabi_dcmpeq>
 800c976:	2800      	cmp	r0, #0
 800c978:	d1a2      	bne.n	800c8c0 <_strtod_l+0x578>
 800c97a:	9b07      	ldr	r3, [sp, #28]
 800c97c:	9300      	str	r3, [sp, #0]
 800c97e:	9908      	ldr	r1, [sp, #32]
 800c980:	462b      	mov	r3, r5
 800c982:	463a      	mov	r2, r7
 800c984:	4620      	mov	r0, r4
 800c986:	f002 f9c5 	bl	800ed14 <__s2b>
 800c98a:	9007      	str	r0, [sp, #28]
 800c98c:	2800      	cmp	r0, #0
 800c98e:	f43f af1f 	beq.w	800c7d0 <_strtod_l+0x488>
 800c992:	9b05      	ldr	r3, [sp, #20]
 800c994:	1b9e      	subs	r6, r3, r6
 800c996:	9b06      	ldr	r3, [sp, #24]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	bfb4      	ite	lt
 800c99c:	4633      	movlt	r3, r6
 800c99e:	2300      	movge	r3, #0
 800c9a0:	930c      	str	r3, [sp, #48]	; 0x30
 800c9a2:	9b06      	ldr	r3, [sp, #24]
 800c9a4:	2500      	movs	r5, #0
 800c9a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c9aa:	9312      	str	r3, [sp, #72]	; 0x48
 800c9ac:	462e      	mov	r6, r5
 800c9ae:	9b07      	ldr	r3, [sp, #28]
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	6859      	ldr	r1, [r3, #4]
 800c9b4:	f002 f906 	bl	800ebc4 <_Balloc>
 800c9b8:	9005      	str	r0, [sp, #20]
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	f43f af0c 	beq.w	800c7d8 <_strtod_l+0x490>
 800c9c0:	9b07      	ldr	r3, [sp, #28]
 800c9c2:	691a      	ldr	r2, [r3, #16]
 800c9c4:	3202      	adds	r2, #2
 800c9c6:	f103 010c 	add.w	r1, r3, #12
 800c9ca:	0092      	lsls	r2, r2, #2
 800c9cc:	300c      	adds	r0, #12
 800c9ce:	f002 f8c5 	bl	800eb5c <memcpy>
 800c9d2:	ec4b ab10 	vmov	d0, sl, fp
 800c9d6:	aa1a      	add	r2, sp, #104	; 0x68
 800c9d8:	a919      	add	r1, sp, #100	; 0x64
 800c9da:	4620      	mov	r0, r4
 800c9dc:	f002 fce0 	bl	800f3a0 <__d2b>
 800c9e0:	ec4b ab18 	vmov	d8, sl, fp
 800c9e4:	9018      	str	r0, [sp, #96]	; 0x60
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	f43f aef6 	beq.w	800c7d8 <_strtod_l+0x490>
 800c9ec:	2101      	movs	r1, #1
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f002 fa2a 	bl	800ee48 <__i2b>
 800c9f4:	4606      	mov	r6, r0
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	f43f aeee 	beq.w	800c7d8 <_strtod_l+0x490>
 800c9fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c9fe:	9904      	ldr	r1, [sp, #16]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	bfab      	itete	ge
 800ca04:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ca06:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ca08:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ca0a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ca0e:	bfac      	ite	ge
 800ca10:	eb03 0902 	addge.w	r9, r3, r2
 800ca14:	1ad7      	sublt	r7, r2, r3
 800ca16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ca18:	eba3 0801 	sub.w	r8, r3, r1
 800ca1c:	4490      	add	r8, r2
 800ca1e:	4ba1      	ldr	r3, [pc, #644]	; (800cca4 <_strtod_l+0x95c>)
 800ca20:	f108 38ff 	add.w	r8, r8, #4294967295
 800ca24:	4598      	cmp	r8, r3
 800ca26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ca2a:	f280 80c7 	bge.w	800cbbc <_strtod_l+0x874>
 800ca2e:	eba3 0308 	sub.w	r3, r3, r8
 800ca32:	2b1f      	cmp	r3, #31
 800ca34:	eba2 0203 	sub.w	r2, r2, r3
 800ca38:	f04f 0101 	mov.w	r1, #1
 800ca3c:	f300 80b1 	bgt.w	800cba2 <_strtod_l+0x85a>
 800ca40:	fa01 f303 	lsl.w	r3, r1, r3
 800ca44:	930d      	str	r3, [sp, #52]	; 0x34
 800ca46:	2300      	movs	r3, #0
 800ca48:	9308      	str	r3, [sp, #32]
 800ca4a:	eb09 0802 	add.w	r8, r9, r2
 800ca4e:	9b04      	ldr	r3, [sp, #16]
 800ca50:	45c1      	cmp	r9, r8
 800ca52:	4417      	add	r7, r2
 800ca54:	441f      	add	r7, r3
 800ca56:	464b      	mov	r3, r9
 800ca58:	bfa8      	it	ge
 800ca5a:	4643      	movge	r3, r8
 800ca5c:	42bb      	cmp	r3, r7
 800ca5e:	bfa8      	it	ge
 800ca60:	463b      	movge	r3, r7
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	bfc2      	ittt	gt
 800ca66:	eba8 0803 	subgt.w	r8, r8, r3
 800ca6a:	1aff      	subgt	r7, r7, r3
 800ca6c:	eba9 0903 	subgt.w	r9, r9, r3
 800ca70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	dd17      	ble.n	800caa6 <_strtod_l+0x75e>
 800ca76:	4631      	mov	r1, r6
 800ca78:	461a      	mov	r2, r3
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f002 faa4 	bl	800efc8 <__pow5mult>
 800ca80:	4606      	mov	r6, r0
 800ca82:	2800      	cmp	r0, #0
 800ca84:	f43f aea8 	beq.w	800c7d8 <_strtod_l+0x490>
 800ca88:	4601      	mov	r1, r0
 800ca8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f002 f9f1 	bl	800ee74 <__multiply>
 800ca92:	900b      	str	r0, [sp, #44]	; 0x2c
 800ca94:	2800      	cmp	r0, #0
 800ca96:	f43f ae9f 	beq.w	800c7d8 <_strtod_l+0x490>
 800ca9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	f002 f8d1 	bl	800ec44 <_Bfree>
 800caa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800caa4:	9318      	str	r3, [sp, #96]	; 0x60
 800caa6:	f1b8 0f00 	cmp.w	r8, #0
 800caaa:	f300 808c 	bgt.w	800cbc6 <_strtod_l+0x87e>
 800caae:	9b06      	ldr	r3, [sp, #24]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	dd08      	ble.n	800cac6 <_strtod_l+0x77e>
 800cab4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cab6:	9905      	ldr	r1, [sp, #20]
 800cab8:	4620      	mov	r0, r4
 800caba:	f002 fa85 	bl	800efc8 <__pow5mult>
 800cabe:	9005      	str	r0, [sp, #20]
 800cac0:	2800      	cmp	r0, #0
 800cac2:	f43f ae89 	beq.w	800c7d8 <_strtod_l+0x490>
 800cac6:	2f00      	cmp	r7, #0
 800cac8:	dd08      	ble.n	800cadc <_strtod_l+0x794>
 800caca:	9905      	ldr	r1, [sp, #20]
 800cacc:	463a      	mov	r2, r7
 800cace:	4620      	mov	r0, r4
 800cad0:	f002 fad4 	bl	800f07c <__lshift>
 800cad4:	9005      	str	r0, [sp, #20]
 800cad6:	2800      	cmp	r0, #0
 800cad8:	f43f ae7e 	beq.w	800c7d8 <_strtod_l+0x490>
 800cadc:	f1b9 0f00 	cmp.w	r9, #0
 800cae0:	dd08      	ble.n	800caf4 <_strtod_l+0x7ac>
 800cae2:	4631      	mov	r1, r6
 800cae4:	464a      	mov	r2, r9
 800cae6:	4620      	mov	r0, r4
 800cae8:	f002 fac8 	bl	800f07c <__lshift>
 800caec:	4606      	mov	r6, r0
 800caee:	2800      	cmp	r0, #0
 800caf0:	f43f ae72 	beq.w	800c7d8 <_strtod_l+0x490>
 800caf4:	9a05      	ldr	r2, [sp, #20]
 800caf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800caf8:	4620      	mov	r0, r4
 800cafa:	f002 fb4b 	bl	800f194 <__mdiff>
 800cafe:	4605      	mov	r5, r0
 800cb00:	2800      	cmp	r0, #0
 800cb02:	f43f ae69 	beq.w	800c7d8 <_strtod_l+0x490>
 800cb06:	68c3      	ldr	r3, [r0, #12]
 800cb08:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	60c3      	str	r3, [r0, #12]
 800cb0e:	4631      	mov	r1, r6
 800cb10:	f002 fb24 	bl	800f15c <__mcmp>
 800cb14:	2800      	cmp	r0, #0
 800cb16:	da60      	bge.n	800cbda <_strtod_l+0x892>
 800cb18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb1a:	ea53 030a 	orrs.w	r3, r3, sl
 800cb1e:	f040 8082 	bne.w	800cc26 <_strtod_l+0x8de>
 800cb22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d17d      	bne.n	800cc26 <_strtod_l+0x8de>
 800cb2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cb2e:	0d1b      	lsrs	r3, r3, #20
 800cb30:	051b      	lsls	r3, r3, #20
 800cb32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cb36:	d976      	bls.n	800cc26 <_strtod_l+0x8de>
 800cb38:	696b      	ldr	r3, [r5, #20]
 800cb3a:	b913      	cbnz	r3, 800cb42 <_strtod_l+0x7fa>
 800cb3c:	692b      	ldr	r3, [r5, #16]
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	dd71      	ble.n	800cc26 <_strtod_l+0x8de>
 800cb42:	4629      	mov	r1, r5
 800cb44:	2201      	movs	r2, #1
 800cb46:	4620      	mov	r0, r4
 800cb48:	f002 fa98 	bl	800f07c <__lshift>
 800cb4c:	4631      	mov	r1, r6
 800cb4e:	4605      	mov	r5, r0
 800cb50:	f002 fb04 	bl	800f15c <__mcmp>
 800cb54:	2800      	cmp	r0, #0
 800cb56:	dd66      	ble.n	800cc26 <_strtod_l+0x8de>
 800cb58:	9904      	ldr	r1, [sp, #16]
 800cb5a:	4a53      	ldr	r2, [pc, #332]	; (800cca8 <_strtod_l+0x960>)
 800cb5c:	465b      	mov	r3, fp
 800cb5e:	2900      	cmp	r1, #0
 800cb60:	f000 8081 	beq.w	800cc66 <_strtod_l+0x91e>
 800cb64:	ea02 010b 	and.w	r1, r2, fp
 800cb68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cb6c:	dc7b      	bgt.n	800cc66 <_strtod_l+0x91e>
 800cb6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cb72:	f77f aea9 	ble.w	800c8c8 <_strtod_l+0x580>
 800cb76:	4b4d      	ldr	r3, [pc, #308]	; (800ccac <_strtod_l+0x964>)
 800cb78:	4650      	mov	r0, sl
 800cb7a:	4659      	mov	r1, fp
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f7f3 fd4b 	bl	8000618 <__aeabi_dmul>
 800cb82:	460b      	mov	r3, r1
 800cb84:	4303      	orrs	r3, r0
 800cb86:	bf08      	it	eq
 800cb88:	2322      	moveq	r3, #34	; 0x22
 800cb8a:	4682      	mov	sl, r0
 800cb8c:	468b      	mov	fp, r1
 800cb8e:	bf08      	it	eq
 800cb90:	6023      	streq	r3, [r4, #0]
 800cb92:	e62b      	b.n	800c7ec <_strtod_l+0x4a4>
 800cb94:	f04f 32ff 	mov.w	r2, #4294967295
 800cb98:	fa02 f303 	lsl.w	r3, r2, r3
 800cb9c:	ea03 0a0a 	and.w	sl, r3, sl
 800cba0:	e6e3      	b.n	800c96a <_strtod_l+0x622>
 800cba2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cba6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cbaa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cbae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800cbb2:	fa01 f308 	lsl.w	r3, r1, r8
 800cbb6:	9308      	str	r3, [sp, #32]
 800cbb8:	910d      	str	r1, [sp, #52]	; 0x34
 800cbba:	e746      	b.n	800ca4a <_strtod_l+0x702>
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	9308      	str	r3, [sp, #32]
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	930d      	str	r3, [sp, #52]	; 0x34
 800cbc4:	e741      	b.n	800ca4a <_strtod_l+0x702>
 800cbc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cbc8:	4642      	mov	r2, r8
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f002 fa56 	bl	800f07c <__lshift>
 800cbd0:	9018      	str	r0, [sp, #96]	; 0x60
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	f47f af6b 	bne.w	800caae <_strtod_l+0x766>
 800cbd8:	e5fe      	b.n	800c7d8 <_strtod_l+0x490>
 800cbda:	465f      	mov	r7, fp
 800cbdc:	d16e      	bne.n	800ccbc <_strtod_l+0x974>
 800cbde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cbe0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cbe4:	b342      	cbz	r2, 800cc38 <_strtod_l+0x8f0>
 800cbe6:	4a32      	ldr	r2, [pc, #200]	; (800ccb0 <_strtod_l+0x968>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d128      	bne.n	800cc3e <_strtod_l+0x8f6>
 800cbec:	9b04      	ldr	r3, [sp, #16]
 800cbee:	4651      	mov	r1, sl
 800cbf0:	b1eb      	cbz	r3, 800cc2e <_strtod_l+0x8e6>
 800cbf2:	4b2d      	ldr	r3, [pc, #180]	; (800cca8 <_strtod_l+0x960>)
 800cbf4:	403b      	ands	r3, r7
 800cbf6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cbfa:	f04f 32ff 	mov.w	r2, #4294967295
 800cbfe:	d819      	bhi.n	800cc34 <_strtod_l+0x8ec>
 800cc00:	0d1b      	lsrs	r3, r3, #20
 800cc02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cc06:	fa02 f303 	lsl.w	r3, r2, r3
 800cc0a:	4299      	cmp	r1, r3
 800cc0c:	d117      	bne.n	800cc3e <_strtod_l+0x8f6>
 800cc0e:	4b29      	ldr	r3, [pc, #164]	; (800ccb4 <_strtod_l+0x96c>)
 800cc10:	429f      	cmp	r7, r3
 800cc12:	d102      	bne.n	800cc1a <_strtod_l+0x8d2>
 800cc14:	3101      	adds	r1, #1
 800cc16:	f43f addf 	beq.w	800c7d8 <_strtod_l+0x490>
 800cc1a:	4b23      	ldr	r3, [pc, #140]	; (800cca8 <_strtod_l+0x960>)
 800cc1c:	403b      	ands	r3, r7
 800cc1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cc22:	f04f 0a00 	mov.w	sl, #0
 800cc26:	9b04      	ldr	r3, [sp, #16]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d1a4      	bne.n	800cb76 <_strtod_l+0x82e>
 800cc2c:	e5de      	b.n	800c7ec <_strtod_l+0x4a4>
 800cc2e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc32:	e7ea      	b.n	800cc0a <_strtod_l+0x8c2>
 800cc34:	4613      	mov	r3, r2
 800cc36:	e7e8      	b.n	800cc0a <_strtod_l+0x8c2>
 800cc38:	ea53 030a 	orrs.w	r3, r3, sl
 800cc3c:	d08c      	beq.n	800cb58 <_strtod_l+0x810>
 800cc3e:	9b08      	ldr	r3, [sp, #32]
 800cc40:	b1db      	cbz	r3, 800cc7a <_strtod_l+0x932>
 800cc42:	423b      	tst	r3, r7
 800cc44:	d0ef      	beq.n	800cc26 <_strtod_l+0x8de>
 800cc46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc48:	9a04      	ldr	r2, [sp, #16]
 800cc4a:	4650      	mov	r0, sl
 800cc4c:	4659      	mov	r1, fp
 800cc4e:	b1c3      	cbz	r3, 800cc82 <_strtod_l+0x93a>
 800cc50:	f7ff fb5d 	bl	800c30e <sulp>
 800cc54:	4602      	mov	r2, r0
 800cc56:	460b      	mov	r3, r1
 800cc58:	ec51 0b18 	vmov	r0, r1, d8
 800cc5c:	f7f3 fb26 	bl	80002ac <__adddf3>
 800cc60:	4682      	mov	sl, r0
 800cc62:	468b      	mov	fp, r1
 800cc64:	e7df      	b.n	800cc26 <_strtod_l+0x8de>
 800cc66:	4013      	ands	r3, r2
 800cc68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cc6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cc70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cc74:	f04f 3aff 	mov.w	sl, #4294967295
 800cc78:	e7d5      	b.n	800cc26 <_strtod_l+0x8de>
 800cc7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc7c:	ea13 0f0a 	tst.w	r3, sl
 800cc80:	e7e0      	b.n	800cc44 <_strtod_l+0x8fc>
 800cc82:	f7ff fb44 	bl	800c30e <sulp>
 800cc86:	4602      	mov	r2, r0
 800cc88:	460b      	mov	r3, r1
 800cc8a:	ec51 0b18 	vmov	r0, r1, d8
 800cc8e:	f7f3 fb0b 	bl	80002a8 <__aeabi_dsub>
 800cc92:	2200      	movs	r2, #0
 800cc94:	2300      	movs	r3, #0
 800cc96:	4682      	mov	sl, r0
 800cc98:	468b      	mov	fp, r1
 800cc9a:	f7f3 ff25 	bl	8000ae8 <__aeabi_dcmpeq>
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	d0c1      	beq.n	800cc26 <_strtod_l+0x8de>
 800cca2:	e611      	b.n	800c8c8 <_strtod_l+0x580>
 800cca4:	fffffc02 	.word	0xfffffc02
 800cca8:	7ff00000 	.word	0x7ff00000
 800ccac:	39500000 	.word	0x39500000
 800ccb0:	000fffff 	.word	0x000fffff
 800ccb4:	7fefffff 	.word	0x7fefffff
 800ccb8:	08010588 	.word	0x08010588
 800ccbc:	4631      	mov	r1, r6
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	f002 fbca 	bl	800f458 <__ratio>
 800ccc4:	ec59 8b10 	vmov	r8, r9, d0
 800ccc8:	ee10 0a10 	vmov	r0, s0
 800cccc:	2200      	movs	r2, #0
 800ccce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ccd2:	4649      	mov	r1, r9
 800ccd4:	f7f3 ff1c 	bl	8000b10 <__aeabi_dcmple>
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	d07a      	beq.n	800cdd2 <_strtod_l+0xa8a>
 800ccdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d04a      	beq.n	800cd78 <_strtod_l+0xa30>
 800cce2:	4b95      	ldr	r3, [pc, #596]	; (800cf38 <_strtod_l+0xbf0>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ccea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cf38 <_strtod_l+0xbf0>
 800ccee:	f04f 0800 	mov.w	r8, #0
 800ccf2:	4b92      	ldr	r3, [pc, #584]	; (800cf3c <_strtod_l+0xbf4>)
 800ccf4:	403b      	ands	r3, r7
 800ccf6:	930d      	str	r3, [sp, #52]	; 0x34
 800ccf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ccfa:	4b91      	ldr	r3, [pc, #580]	; (800cf40 <_strtod_l+0xbf8>)
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	f040 80b0 	bne.w	800ce62 <_strtod_l+0xb1a>
 800cd02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cd06:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cd0a:	ec4b ab10 	vmov	d0, sl, fp
 800cd0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cd12:	f002 fac9 	bl	800f2a8 <__ulp>
 800cd16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cd1a:	ec53 2b10 	vmov	r2, r3, d0
 800cd1e:	f7f3 fc7b 	bl	8000618 <__aeabi_dmul>
 800cd22:	4652      	mov	r2, sl
 800cd24:	465b      	mov	r3, fp
 800cd26:	f7f3 fac1 	bl	80002ac <__adddf3>
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	4983      	ldr	r1, [pc, #524]	; (800cf3c <_strtod_l+0xbf4>)
 800cd2e:	4a85      	ldr	r2, [pc, #532]	; (800cf44 <_strtod_l+0xbfc>)
 800cd30:	4019      	ands	r1, r3
 800cd32:	4291      	cmp	r1, r2
 800cd34:	4682      	mov	sl, r0
 800cd36:	d960      	bls.n	800cdfa <_strtod_l+0xab2>
 800cd38:	ee18 3a90 	vmov	r3, s17
 800cd3c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d104      	bne.n	800cd4e <_strtod_l+0xa06>
 800cd44:	ee18 3a10 	vmov	r3, s16
 800cd48:	3301      	adds	r3, #1
 800cd4a:	f43f ad45 	beq.w	800c7d8 <_strtod_l+0x490>
 800cd4e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800cf50 <_strtod_l+0xc08>
 800cd52:	f04f 3aff 	mov.w	sl, #4294967295
 800cd56:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f001 ff73 	bl	800ec44 <_Bfree>
 800cd5e:	9905      	ldr	r1, [sp, #20]
 800cd60:	4620      	mov	r0, r4
 800cd62:	f001 ff6f 	bl	800ec44 <_Bfree>
 800cd66:	4631      	mov	r1, r6
 800cd68:	4620      	mov	r0, r4
 800cd6a:	f001 ff6b 	bl	800ec44 <_Bfree>
 800cd6e:	4629      	mov	r1, r5
 800cd70:	4620      	mov	r0, r4
 800cd72:	f001 ff67 	bl	800ec44 <_Bfree>
 800cd76:	e61a      	b.n	800c9ae <_strtod_l+0x666>
 800cd78:	f1ba 0f00 	cmp.w	sl, #0
 800cd7c:	d11b      	bne.n	800cdb6 <_strtod_l+0xa6e>
 800cd7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd82:	b9f3      	cbnz	r3, 800cdc2 <_strtod_l+0xa7a>
 800cd84:	4b6c      	ldr	r3, [pc, #432]	; (800cf38 <_strtod_l+0xbf0>)
 800cd86:	2200      	movs	r2, #0
 800cd88:	4640      	mov	r0, r8
 800cd8a:	4649      	mov	r1, r9
 800cd8c:	f7f3 feb6 	bl	8000afc <__aeabi_dcmplt>
 800cd90:	b9d0      	cbnz	r0, 800cdc8 <_strtod_l+0xa80>
 800cd92:	4640      	mov	r0, r8
 800cd94:	4649      	mov	r1, r9
 800cd96:	4b6c      	ldr	r3, [pc, #432]	; (800cf48 <_strtod_l+0xc00>)
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f7f3 fc3d 	bl	8000618 <__aeabi_dmul>
 800cd9e:	4680      	mov	r8, r0
 800cda0:	4689      	mov	r9, r1
 800cda2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cda6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800cdaa:	9315      	str	r3, [sp, #84]	; 0x54
 800cdac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cdb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cdb4:	e79d      	b.n	800ccf2 <_strtod_l+0x9aa>
 800cdb6:	f1ba 0f01 	cmp.w	sl, #1
 800cdba:	d102      	bne.n	800cdc2 <_strtod_l+0xa7a>
 800cdbc:	2f00      	cmp	r7, #0
 800cdbe:	f43f ad83 	beq.w	800c8c8 <_strtod_l+0x580>
 800cdc2:	4b62      	ldr	r3, [pc, #392]	; (800cf4c <_strtod_l+0xc04>)
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	e78e      	b.n	800cce6 <_strtod_l+0x99e>
 800cdc8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800cf48 <_strtod_l+0xc00>
 800cdcc:	f04f 0800 	mov.w	r8, #0
 800cdd0:	e7e7      	b.n	800cda2 <_strtod_l+0xa5a>
 800cdd2:	4b5d      	ldr	r3, [pc, #372]	; (800cf48 <_strtod_l+0xc00>)
 800cdd4:	4640      	mov	r0, r8
 800cdd6:	4649      	mov	r1, r9
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f7f3 fc1d 	bl	8000618 <__aeabi_dmul>
 800cdde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cde0:	4680      	mov	r8, r0
 800cde2:	4689      	mov	r9, r1
 800cde4:	b933      	cbnz	r3, 800cdf4 <_strtod_l+0xaac>
 800cde6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdea:	900e      	str	r0, [sp, #56]	; 0x38
 800cdec:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cdf2:	e7dd      	b.n	800cdb0 <_strtod_l+0xa68>
 800cdf4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800cdf8:	e7f9      	b.n	800cdee <_strtod_l+0xaa6>
 800cdfa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cdfe:	9b04      	ldr	r3, [sp, #16]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d1a8      	bne.n	800cd56 <_strtod_l+0xa0e>
 800ce04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce0a:	0d1b      	lsrs	r3, r3, #20
 800ce0c:	051b      	lsls	r3, r3, #20
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d1a1      	bne.n	800cd56 <_strtod_l+0xa0e>
 800ce12:	4640      	mov	r0, r8
 800ce14:	4649      	mov	r1, r9
 800ce16:	f7f3 ff5f 	bl	8000cd8 <__aeabi_d2lz>
 800ce1a:	f7f3 fbcf 	bl	80005bc <__aeabi_l2d>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	460b      	mov	r3, r1
 800ce22:	4640      	mov	r0, r8
 800ce24:	4649      	mov	r1, r9
 800ce26:	f7f3 fa3f 	bl	80002a8 <__aeabi_dsub>
 800ce2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce30:	ea43 030a 	orr.w	r3, r3, sl
 800ce34:	4313      	orrs	r3, r2
 800ce36:	4680      	mov	r8, r0
 800ce38:	4689      	mov	r9, r1
 800ce3a:	d055      	beq.n	800cee8 <_strtod_l+0xba0>
 800ce3c:	a336      	add	r3, pc, #216	; (adr r3, 800cf18 <_strtod_l+0xbd0>)
 800ce3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce42:	f7f3 fe5b 	bl	8000afc <__aeabi_dcmplt>
 800ce46:	2800      	cmp	r0, #0
 800ce48:	f47f acd0 	bne.w	800c7ec <_strtod_l+0x4a4>
 800ce4c:	a334      	add	r3, pc, #208	; (adr r3, 800cf20 <_strtod_l+0xbd8>)
 800ce4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce52:	4640      	mov	r0, r8
 800ce54:	4649      	mov	r1, r9
 800ce56:	f7f3 fe6f 	bl	8000b38 <__aeabi_dcmpgt>
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	f43f af7b 	beq.w	800cd56 <_strtod_l+0xa0e>
 800ce60:	e4c4      	b.n	800c7ec <_strtod_l+0x4a4>
 800ce62:	9b04      	ldr	r3, [sp, #16]
 800ce64:	b333      	cbz	r3, 800ceb4 <_strtod_l+0xb6c>
 800ce66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce68:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ce6c:	d822      	bhi.n	800ceb4 <_strtod_l+0xb6c>
 800ce6e:	a32e      	add	r3, pc, #184	; (adr r3, 800cf28 <_strtod_l+0xbe0>)
 800ce70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce74:	4640      	mov	r0, r8
 800ce76:	4649      	mov	r1, r9
 800ce78:	f7f3 fe4a 	bl	8000b10 <__aeabi_dcmple>
 800ce7c:	b1a0      	cbz	r0, 800cea8 <_strtod_l+0xb60>
 800ce7e:	4649      	mov	r1, r9
 800ce80:	4640      	mov	r0, r8
 800ce82:	f7f3 fea1 	bl	8000bc8 <__aeabi_d2uiz>
 800ce86:	2801      	cmp	r0, #1
 800ce88:	bf38      	it	cc
 800ce8a:	2001      	movcc	r0, #1
 800ce8c:	f7f3 fb4a 	bl	8000524 <__aeabi_ui2d>
 800ce90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce92:	4680      	mov	r8, r0
 800ce94:	4689      	mov	r9, r1
 800ce96:	bb23      	cbnz	r3, 800cee2 <_strtod_l+0xb9a>
 800ce98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce9c:	9010      	str	r0, [sp, #64]	; 0x40
 800ce9e:	9311      	str	r3, [sp, #68]	; 0x44
 800cea0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cea4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ceac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ceb0:	1a9b      	subs	r3, r3, r2
 800ceb2:	9309      	str	r3, [sp, #36]	; 0x24
 800ceb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ceb8:	eeb0 0a48 	vmov.f32	s0, s16
 800cebc:	eef0 0a68 	vmov.f32	s1, s17
 800cec0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cec4:	f002 f9f0 	bl	800f2a8 <__ulp>
 800cec8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cecc:	ec53 2b10 	vmov	r2, r3, d0
 800ced0:	f7f3 fba2 	bl	8000618 <__aeabi_dmul>
 800ced4:	ec53 2b18 	vmov	r2, r3, d8
 800ced8:	f7f3 f9e8 	bl	80002ac <__adddf3>
 800cedc:	4682      	mov	sl, r0
 800cede:	468b      	mov	fp, r1
 800cee0:	e78d      	b.n	800cdfe <_strtod_l+0xab6>
 800cee2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800cee6:	e7db      	b.n	800cea0 <_strtod_l+0xb58>
 800cee8:	a311      	add	r3, pc, #68	; (adr r3, 800cf30 <_strtod_l+0xbe8>)
 800ceea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceee:	f7f3 fe05 	bl	8000afc <__aeabi_dcmplt>
 800cef2:	e7b2      	b.n	800ce5a <_strtod_l+0xb12>
 800cef4:	2300      	movs	r3, #0
 800cef6:	930a      	str	r3, [sp, #40]	; 0x28
 800cef8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cefa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cefc:	6013      	str	r3, [r2, #0]
 800cefe:	f7ff ba6b 	b.w	800c3d8 <_strtod_l+0x90>
 800cf02:	2a65      	cmp	r2, #101	; 0x65
 800cf04:	f43f ab5f 	beq.w	800c5c6 <_strtod_l+0x27e>
 800cf08:	2a45      	cmp	r2, #69	; 0x45
 800cf0a:	f43f ab5c 	beq.w	800c5c6 <_strtod_l+0x27e>
 800cf0e:	2301      	movs	r3, #1
 800cf10:	f7ff bb94 	b.w	800c63c <_strtod_l+0x2f4>
 800cf14:	f3af 8000 	nop.w
 800cf18:	94a03595 	.word	0x94a03595
 800cf1c:	3fdfffff 	.word	0x3fdfffff
 800cf20:	35afe535 	.word	0x35afe535
 800cf24:	3fe00000 	.word	0x3fe00000
 800cf28:	ffc00000 	.word	0xffc00000
 800cf2c:	41dfffff 	.word	0x41dfffff
 800cf30:	94a03595 	.word	0x94a03595
 800cf34:	3fcfffff 	.word	0x3fcfffff
 800cf38:	3ff00000 	.word	0x3ff00000
 800cf3c:	7ff00000 	.word	0x7ff00000
 800cf40:	7fe00000 	.word	0x7fe00000
 800cf44:	7c9fffff 	.word	0x7c9fffff
 800cf48:	3fe00000 	.word	0x3fe00000
 800cf4c:	bff00000 	.word	0xbff00000
 800cf50:	7fefffff 	.word	0x7fefffff

0800cf54 <_strtod_r>:
 800cf54:	4b01      	ldr	r3, [pc, #4]	; (800cf5c <_strtod_r+0x8>)
 800cf56:	f7ff b9f7 	b.w	800c348 <_strtod_l>
 800cf5a:	bf00      	nop
 800cf5c:	20001454 	.word	0x20001454

0800cf60 <strtok>:
 800cf60:	4b16      	ldr	r3, [pc, #88]	; (800cfbc <strtok+0x5c>)
 800cf62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf64:	681e      	ldr	r6, [r3, #0]
 800cf66:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800cf68:	4605      	mov	r5, r0
 800cf6a:	b9fc      	cbnz	r4, 800cfac <strtok+0x4c>
 800cf6c:	2050      	movs	r0, #80	; 0x50
 800cf6e:	9101      	str	r1, [sp, #4]
 800cf70:	f7fe f826 	bl	800afc0 <malloc>
 800cf74:	9901      	ldr	r1, [sp, #4]
 800cf76:	65b0      	str	r0, [r6, #88]	; 0x58
 800cf78:	4602      	mov	r2, r0
 800cf7a:	b920      	cbnz	r0, 800cf86 <strtok+0x26>
 800cf7c:	4b10      	ldr	r3, [pc, #64]	; (800cfc0 <strtok+0x60>)
 800cf7e:	4811      	ldr	r0, [pc, #68]	; (800cfc4 <strtok+0x64>)
 800cf80:	2157      	movs	r1, #87	; 0x57
 800cf82:	f7fd ffc3 	bl	800af0c <__assert_func>
 800cf86:	e9c0 4400 	strd	r4, r4, [r0]
 800cf8a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800cf8e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800cf92:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800cf96:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800cf9a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800cf9e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800cfa2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800cfa6:	6184      	str	r4, [r0, #24]
 800cfa8:	7704      	strb	r4, [r0, #28]
 800cfaa:	6244      	str	r4, [r0, #36]	; 0x24
 800cfac:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800cfae:	2301      	movs	r3, #1
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	b002      	add	sp, #8
 800cfb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cfb8:	f000 b806 	b.w	800cfc8 <__strtok_r>
 800cfbc:	200013ec 	.word	0x200013ec
 800cfc0:	080105b0 	.word	0x080105b0
 800cfc4:	080105c7 	.word	0x080105c7

0800cfc8 <__strtok_r>:
 800cfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfca:	b908      	cbnz	r0, 800cfd0 <__strtok_r+0x8>
 800cfcc:	6810      	ldr	r0, [r2, #0]
 800cfce:	b188      	cbz	r0, 800cff4 <__strtok_r+0x2c>
 800cfd0:	4604      	mov	r4, r0
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cfd8:	460f      	mov	r7, r1
 800cfda:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cfde:	b91e      	cbnz	r6, 800cfe8 <__strtok_r+0x20>
 800cfe0:	b965      	cbnz	r5, 800cffc <__strtok_r+0x34>
 800cfe2:	6015      	str	r5, [r2, #0]
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	e005      	b.n	800cff4 <__strtok_r+0x2c>
 800cfe8:	42b5      	cmp	r5, r6
 800cfea:	d1f6      	bne.n	800cfda <__strtok_r+0x12>
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d1f0      	bne.n	800cfd2 <__strtok_r+0xa>
 800cff0:	6014      	str	r4, [r2, #0]
 800cff2:	7003      	strb	r3, [r0, #0]
 800cff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cff6:	461c      	mov	r4, r3
 800cff8:	e00c      	b.n	800d014 <__strtok_r+0x4c>
 800cffa:	b915      	cbnz	r5, 800d002 <__strtok_r+0x3a>
 800cffc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d000:	460e      	mov	r6, r1
 800d002:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d006:	42ab      	cmp	r3, r5
 800d008:	d1f7      	bne.n	800cffa <__strtok_r+0x32>
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d0f3      	beq.n	800cff6 <__strtok_r+0x2e>
 800d00e:	2300      	movs	r3, #0
 800d010:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d014:	6014      	str	r4, [r2, #0]
 800d016:	e7ed      	b.n	800cff4 <__strtok_r+0x2c>

0800d018 <_strtol_l.constprop.0>:
 800d018:	2b01      	cmp	r3, #1
 800d01a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d01e:	d001      	beq.n	800d024 <_strtol_l.constprop.0+0xc>
 800d020:	2b24      	cmp	r3, #36	; 0x24
 800d022:	d906      	bls.n	800d032 <_strtol_l.constprop.0+0x1a>
 800d024:	f7fd ff90 	bl	800af48 <__errno>
 800d028:	2316      	movs	r3, #22
 800d02a:	6003      	str	r3, [r0, #0]
 800d02c:	2000      	movs	r0, #0
 800d02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d032:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d118 <_strtol_l.constprop.0+0x100>
 800d036:	460d      	mov	r5, r1
 800d038:	462e      	mov	r6, r5
 800d03a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d03e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d042:	f017 0708 	ands.w	r7, r7, #8
 800d046:	d1f7      	bne.n	800d038 <_strtol_l.constprop.0+0x20>
 800d048:	2c2d      	cmp	r4, #45	; 0x2d
 800d04a:	d132      	bne.n	800d0b2 <_strtol_l.constprop.0+0x9a>
 800d04c:	782c      	ldrb	r4, [r5, #0]
 800d04e:	2701      	movs	r7, #1
 800d050:	1cb5      	adds	r5, r6, #2
 800d052:	2b00      	cmp	r3, #0
 800d054:	d05b      	beq.n	800d10e <_strtol_l.constprop.0+0xf6>
 800d056:	2b10      	cmp	r3, #16
 800d058:	d109      	bne.n	800d06e <_strtol_l.constprop.0+0x56>
 800d05a:	2c30      	cmp	r4, #48	; 0x30
 800d05c:	d107      	bne.n	800d06e <_strtol_l.constprop.0+0x56>
 800d05e:	782c      	ldrb	r4, [r5, #0]
 800d060:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d064:	2c58      	cmp	r4, #88	; 0x58
 800d066:	d14d      	bne.n	800d104 <_strtol_l.constprop.0+0xec>
 800d068:	786c      	ldrb	r4, [r5, #1]
 800d06a:	2310      	movs	r3, #16
 800d06c:	3502      	adds	r5, #2
 800d06e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d072:	f108 38ff 	add.w	r8, r8, #4294967295
 800d076:	f04f 0c00 	mov.w	ip, #0
 800d07a:	fbb8 f9f3 	udiv	r9, r8, r3
 800d07e:	4666      	mov	r6, ip
 800d080:	fb03 8a19 	mls	sl, r3, r9, r8
 800d084:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d088:	f1be 0f09 	cmp.w	lr, #9
 800d08c:	d816      	bhi.n	800d0bc <_strtol_l.constprop.0+0xa4>
 800d08e:	4674      	mov	r4, lr
 800d090:	42a3      	cmp	r3, r4
 800d092:	dd24      	ble.n	800d0de <_strtol_l.constprop.0+0xc6>
 800d094:	f1bc 0f00 	cmp.w	ip, #0
 800d098:	db1e      	blt.n	800d0d8 <_strtol_l.constprop.0+0xc0>
 800d09a:	45b1      	cmp	r9, r6
 800d09c:	d31c      	bcc.n	800d0d8 <_strtol_l.constprop.0+0xc0>
 800d09e:	d101      	bne.n	800d0a4 <_strtol_l.constprop.0+0x8c>
 800d0a0:	45a2      	cmp	sl, r4
 800d0a2:	db19      	blt.n	800d0d8 <_strtol_l.constprop.0+0xc0>
 800d0a4:	fb06 4603 	mla	r6, r6, r3, r4
 800d0a8:	f04f 0c01 	mov.w	ip, #1
 800d0ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0b0:	e7e8      	b.n	800d084 <_strtol_l.constprop.0+0x6c>
 800d0b2:	2c2b      	cmp	r4, #43	; 0x2b
 800d0b4:	bf04      	itt	eq
 800d0b6:	782c      	ldrbeq	r4, [r5, #0]
 800d0b8:	1cb5      	addeq	r5, r6, #2
 800d0ba:	e7ca      	b.n	800d052 <_strtol_l.constprop.0+0x3a>
 800d0bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d0c0:	f1be 0f19 	cmp.w	lr, #25
 800d0c4:	d801      	bhi.n	800d0ca <_strtol_l.constprop.0+0xb2>
 800d0c6:	3c37      	subs	r4, #55	; 0x37
 800d0c8:	e7e2      	b.n	800d090 <_strtol_l.constprop.0+0x78>
 800d0ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d0ce:	f1be 0f19 	cmp.w	lr, #25
 800d0d2:	d804      	bhi.n	800d0de <_strtol_l.constprop.0+0xc6>
 800d0d4:	3c57      	subs	r4, #87	; 0x57
 800d0d6:	e7db      	b.n	800d090 <_strtol_l.constprop.0+0x78>
 800d0d8:	f04f 3cff 	mov.w	ip, #4294967295
 800d0dc:	e7e6      	b.n	800d0ac <_strtol_l.constprop.0+0x94>
 800d0de:	f1bc 0f00 	cmp.w	ip, #0
 800d0e2:	da05      	bge.n	800d0f0 <_strtol_l.constprop.0+0xd8>
 800d0e4:	2322      	movs	r3, #34	; 0x22
 800d0e6:	6003      	str	r3, [r0, #0]
 800d0e8:	4646      	mov	r6, r8
 800d0ea:	b942      	cbnz	r2, 800d0fe <_strtol_l.constprop.0+0xe6>
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	e79e      	b.n	800d02e <_strtol_l.constprop.0+0x16>
 800d0f0:	b107      	cbz	r7, 800d0f4 <_strtol_l.constprop.0+0xdc>
 800d0f2:	4276      	negs	r6, r6
 800d0f4:	2a00      	cmp	r2, #0
 800d0f6:	d0f9      	beq.n	800d0ec <_strtol_l.constprop.0+0xd4>
 800d0f8:	f1bc 0f00 	cmp.w	ip, #0
 800d0fc:	d000      	beq.n	800d100 <_strtol_l.constprop.0+0xe8>
 800d0fe:	1e69      	subs	r1, r5, #1
 800d100:	6011      	str	r1, [r2, #0]
 800d102:	e7f3      	b.n	800d0ec <_strtol_l.constprop.0+0xd4>
 800d104:	2430      	movs	r4, #48	; 0x30
 800d106:	2b00      	cmp	r3, #0
 800d108:	d1b1      	bne.n	800d06e <_strtol_l.constprop.0+0x56>
 800d10a:	2308      	movs	r3, #8
 800d10c:	e7af      	b.n	800d06e <_strtol_l.constprop.0+0x56>
 800d10e:	2c30      	cmp	r4, #48	; 0x30
 800d110:	d0a5      	beq.n	800d05e <_strtol_l.constprop.0+0x46>
 800d112:	230a      	movs	r3, #10
 800d114:	e7ab      	b.n	800d06e <_strtol_l.constprop.0+0x56>
 800d116:	bf00      	nop
 800d118:	08010625 	.word	0x08010625

0800d11c <_strtol_r>:
 800d11c:	f7ff bf7c 	b.w	800d018 <_strtol_l.constprop.0>

0800d120 <__swbuf_r>:
 800d120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d122:	460e      	mov	r6, r1
 800d124:	4614      	mov	r4, r2
 800d126:	4605      	mov	r5, r0
 800d128:	b118      	cbz	r0, 800d132 <__swbuf_r+0x12>
 800d12a:	6983      	ldr	r3, [r0, #24]
 800d12c:	b90b      	cbnz	r3, 800d132 <__swbuf_r+0x12>
 800d12e:	f001 f877 	bl	800e220 <__sinit>
 800d132:	4b21      	ldr	r3, [pc, #132]	; (800d1b8 <__swbuf_r+0x98>)
 800d134:	429c      	cmp	r4, r3
 800d136:	d12b      	bne.n	800d190 <__swbuf_r+0x70>
 800d138:	686c      	ldr	r4, [r5, #4]
 800d13a:	69a3      	ldr	r3, [r4, #24]
 800d13c:	60a3      	str	r3, [r4, #8]
 800d13e:	89a3      	ldrh	r3, [r4, #12]
 800d140:	071a      	lsls	r2, r3, #28
 800d142:	d52f      	bpl.n	800d1a4 <__swbuf_r+0x84>
 800d144:	6923      	ldr	r3, [r4, #16]
 800d146:	b36b      	cbz	r3, 800d1a4 <__swbuf_r+0x84>
 800d148:	6923      	ldr	r3, [r4, #16]
 800d14a:	6820      	ldr	r0, [r4, #0]
 800d14c:	1ac0      	subs	r0, r0, r3
 800d14e:	6963      	ldr	r3, [r4, #20]
 800d150:	b2f6      	uxtb	r6, r6
 800d152:	4283      	cmp	r3, r0
 800d154:	4637      	mov	r7, r6
 800d156:	dc04      	bgt.n	800d162 <__swbuf_r+0x42>
 800d158:	4621      	mov	r1, r4
 800d15a:	4628      	mov	r0, r5
 800d15c:	f000 ffcc 	bl	800e0f8 <_fflush_r>
 800d160:	bb30      	cbnz	r0, 800d1b0 <__swbuf_r+0x90>
 800d162:	68a3      	ldr	r3, [r4, #8]
 800d164:	3b01      	subs	r3, #1
 800d166:	60a3      	str	r3, [r4, #8]
 800d168:	6823      	ldr	r3, [r4, #0]
 800d16a:	1c5a      	adds	r2, r3, #1
 800d16c:	6022      	str	r2, [r4, #0]
 800d16e:	701e      	strb	r6, [r3, #0]
 800d170:	6963      	ldr	r3, [r4, #20]
 800d172:	3001      	adds	r0, #1
 800d174:	4283      	cmp	r3, r0
 800d176:	d004      	beq.n	800d182 <__swbuf_r+0x62>
 800d178:	89a3      	ldrh	r3, [r4, #12]
 800d17a:	07db      	lsls	r3, r3, #31
 800d17c:	d506      	bpl.n	800d18c <__swbuf_r+0x6c>
 800d17e:	2e0a      	cmp	r6, #10
 800d180:	d104      	bne.n	800d18c <__swbuf_r+0x6c>
 800d182:	4621      	mov	r1, r4
 800d184:	4628      	mov	r0, r5
 800d186:	f000 ffb7 	bl	800e0f8 <_fflush_r>
 800d18a:	b988      	cbnz	r0, 800d1b0 <__swbuf_r+0x90>
 800d18c:	4638      	mov	r0, r7
 800d18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d190:	4b0a      	ldr	r3, [pc, #40]	; (800d1bc <__swbuf_r+0x9c>)
 800d192:	429c      	cmp	r4, r3
 800d194:	d101      	bne.n	800d19a <__swbuf_r+0x7a>
 800d196:	68ac      	ldr	r4, [r5, #8]
 800d198:	e7cf      	b.n	800d13a <__swbuf_r+0x1a>
 800d19a:	4b09      	ldr	r3, [pc, #36]	; (800d1c0 <__swbuf_r+0xa0>)
 800d19c:	429c      	cmp	r4, r3
 800d19e:	bf08      	it	eq
 800d1a0:	68ec      	ldreq	r4, [r5, #12]
 800d1a2:	e7ca      	b.n	800d13a <__swbuf_r+0x1a>
 800d1a4:	4621      	mov	r1, r4
 800d1a6:	4628      	mov	r0, r5
 800d1a8:	f000 f81e 	bl	800d1e8 <__swsetup_r>
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d0cb      	beq.n	800d148 <__swbuf_r+0x28>
 800d1b0:	f04f 37ff 	mov.w	r7, #4294967295
 800d1b4:	e7ea      	b.n	800d18c <__swbuf_r+0x6c>
 800d1b6:	bf00      	nop
 800d1b8:	080107c0 	.word	0x080107c0
 800d1bc:	080107e0 	.word	0x080107e0
 800d1c0:	080107a0 	.word	0x080107a0

0800d1c4 <_write_r>:
 800d1c4:	b538      	push	{r3, r4, r5, lr}
 800d1c6:	4d07      	ldr	r5, [pc, #28]	; (800d1e4 <_write_r+0x20>)
 800d1c8:	4604      	mov	r4, r0
 800d1ca:	4608      	mov	r0, r1
 800d1cc:	4611      	mov	r1, r2
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	602a      	str	r2, [r5, #0]
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	f7f9 f875 	bl	80062c2 <_write>
 800d1d8:	1c43      	adds	r3, r0, #1
 800d1da:	d102      	bne.n	800d1e2 <_write_r+0x1e>
 800d1dc:	682b      	ldr	r3, [r5, #0]
 800d1de:	b103      	cbz	r3, 800d1e2 <_write_r+0x1e>
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	bd38      	pop	{r3, r4, r5, pc}
 800d1e4:	20002130 	.word	0x20002130

0800d1e8 <__swsetup_r>:
 800d1e8:	4b32      	ldr	r3, [pc, #200]	; (800d2b4 <__swsetup_r+0xcc>)
 800d1ea:	b570      	push	{r4, r5, r6, lr}
 800d1ec:	681d      	ldr	r5, [r3, #0]
 800d1ee:	4606      	mov	r6, r0
 800d1f0:	460c      	mov	r4, r1
 800d1f2:	b125      	cbz	r5, 800d1fe <__swsetup_r+0x16>
 800d1f4:	69ab      	ldr	r3, [r5, #24]
 800d1f6:	b913      	cbnz	r3, 800d1fe <__swsetup_r+0x16>
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	f001 f811 	bl	800e220 <__sinit>
 800d1fe:	4b2e      	ldr	r3, [pc, #184]	; (800d2b8 <__swsetup_r+0xd0>)
 800d200:	429c      	cmp	r4, r3
 800d202:	d10f      	bne.n	800d224 <__swsetup_r+0x3c>
 800d204:	686c      	ldr	r4, [r5, #4]
 800d206:	89a3      	ldrh	r3, [r4, #12]
 800d208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d20c:	0719      	lsls	r1, r3, #28
 800d20e:	d42c      	bmi.n	800d26a <__swsetup_r+0x82>
 800d210:	06dd      	lsls	r5, r3, #27
 800d212:	d411      	bmi.n	800d238 <__swsetup_r+0x50>
 800d214:	2309      	movs	r3, #9
 800d216:	6033      	str	r3, [r6, #0]
 800d218:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d21c:	81a3      	strh	r3, [r4, #12]
 800d21e:	f04f 30ff 	mov.w	r0, #4294967295
 800d222:	e03e      	b.n	800d2a2 <__swsetup_r+0xba>
 800d224:	4b25      	ldr	r3, [pc, #148]	; (800d2bc <__swsetup_r+0xd4>)
 800d226:	429c      	cmp	r4, r3
 800d228:	d101      	bne.n	800d22e <__swsetup_r+0x46>
 800d22a:	68ac      	ldr	r4, [r5, #8]
 800d22c:	e7eb      	b.n	800d206 <__swsetup_r+0x1e>
 800d22e:	4b24      	ldr	r3, [pc, #144]	; (800d2c0 <__swsetup_r+0xd8>)
 800d230:	429c      	cmp	r4, r3
 800d232:	bf08      	it	eq
 800d234:	68ec      	ldreq	r4, [r5, #12]
 800d236:	e7e6      	b.n	800d206 <__swsetup_r+0x1e>
 800d238:	0758      	lsls	r0, r3, #29
 800d23a:	d512      	bpl.n	800d262 <__swsetup_r+0x7a>
 800d23c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d23e:	b141      	cbz	r1, 800d252 <__swsetup_r+0x6a>
 800d240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d244:	4299      	cmp	r1, r3
 800d246:	d002      	beq.n	800d24e <__swsetup_r+0x66>
 800d248:	4630      	mov	r0, r6
 800d24a:	f7fd fed1 	bl	800aff0 <_free_r>
 800d24e:	2300      	movs	r3, #0
 800d250:	6363      	str	r3, [r4, #52]	; 0x34
 800d252:	89a3      	ldrh	r3, [r4, #12]
 800d254:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d258:	81a3      	strh	r3, [r4, #12]
 800d25a:	2300      	movs	r3, #0
 800d25c:	6063      	str	r3, [r4, #4]
 800d25e:	6923      	ldr	r3, [r4, #16]
 800d260:	6023      	str	r3, [r4, #0]
 800d262:	89a3      	ldrh	r3, [r4, #12]
 800d264:	f043 0308 	orr.w	r3, r3, #8
 800d268:	81a3      	strh	r3, [r4, #12]
 800d26a:	6923      	ldr	r3, [r4, #16]
 800d26c:	b94b      	cbnz	r3, 800d282 <__swsetup_r+0x9a>
 800d26e:	89a3      	ldrh	r3, [r4, #12]
 800d270:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d278:	d003      	beq.n	800d282 <__swsetup_r+0x9a>
 800d27a:	4621      	mov	r1, r4
 800d27c:	4630      	mov	r0, r6
 800d27e:	f001 fc1b 	bl	800eab8 <__smakebuf_r>
 800d282:	89a0      	ldrh	r0, [r4, #12]
 800d284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d288:	f010 0301 	ands.w	r3, r0, #1
 800d28c:	d00a      	beq.n	800d2a4 <__swsetup_r+0xbc>
 800d28e:	2300      	movs	r3, #0
 800d290:	60a3      	str	r3, [r4, #8]
 800d292:	6963      	ldr	r3, [r4, #20]
 800d294:	425b      	negs	r3, r3
 800d296:	61a3      	str	r3, [r4, #24]
 800d298:	6923      	ldr	r3, [r4, #16]
 800d29a:	b943      	cbnz	r3, 800d2ae <__swsetup_r+0xc6>
 800d29c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d2a0:	d1ba      	bne.n	800d218 <__swsetup_r+0x30>
 800d2a2:	bd70      	pop	{r4, r5, r6, pc}
 800d2a4:	0781      	lsls	r1, r0, #30
 800d2a6:	bf58      	it	pl
 800d2a8:	6963      	ldrpl	r3, [r4, #20]
 800d2aa:	60a3      	str	r3, [r4, #8]
 800d2ac:	e7f4      	b.n	800d298 <__swsetup_r+0xb0>
 800d2ae:	2000      	movs	r0, #0
 800d2b0:	e7f7      	b.n	800d2a2 <__swsetup_r+0xba>
 800d2b2:	bf00      	nop
 800d2b4:	200013ec 	.word	0x200013ec
 800d2b8:	080107c0 	.word	0x080107c0
 800d2bc:	080107e0 	.word	0x080107e0
 800d2c0:	080107a0 	.word	0x080107a0

0800d2c4 <abort>:
 800d2c4:	b508      	push	{r3, lr}
 800d2c6:	2006      	movs	r0, #6
 800d2c8:	f002 fec6 	bl	8010058 <raise>
 800d2cc:	2001      	movs	r0, #1
 800d2ce:	f7f8 ffd1 	bl	8006274 <_exit>
	...

0800d2d4 <_close_r>:
 800d2d4:	b538      	push	{r3, r4, r5, lr}
 800d2d6:	4d06      	ldr	r5, [pc, #24]	; (800d2f0 <_close_r+0x1c>)
 800d2d8:	2300      	movs	r3, #0
 800d2da:	4604      	mov	r4, r0
 800d2dc:	4608      	mov	r0, r1
 800d2de:	602b      	str	r3, [r5, #0]
 800d2e0:	f7f9 f80b 	bl	80062fa <_close>
 800d2e4:	1c43      	adds	r3, r0, #1
 800d2e6:	d102      	bne.n	800d2ee <_close_r+0x1a>
 800d2e8:	682b      	ldr	r3, [r5, #0]
 800d2ea:	b103      	cbz	r3, 800d2ee <_close_r+0x1a>
 800d2ec:	6023      	str	r3, [r4, #0]
 800d2ee:	bd38      	pop	{r3, r4, r5, pc}
 800d2f0:	20002130 	.word	0x20002130

0800d2f4 <quorem>:
 800d2f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2f8:	6903      	ldr	r3, [r0, #16]
 800d2fa:	690c      	ldr	r4, [r1, #16]
 800d2fc:	42a3      	cmp	r3, r4
 800d2fe:	4607      	mov	r7, r0
 800d300:	f2c0 8081 	blt.w	800d406 <quorem+0x112>
 800d304:	3c01      	subs	r4, #1
 800d306:	f101 0814 	add.w	r8, r1, #20
 800d30a:	f100 0514 	add.w	r5, r0, #20
 800d30e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d312:	9301      	str	r3, [sp, #4]
 800d314:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d318:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d31c:	3301      	adds	r3, #1
 800d31e:	429a      	cmp	r2, r3
 800d320:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d324:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d328:	fbb2 f6f3 	udiv	r6, r2, r3
 800d32c:	d331      	bcc.n	800d392 <quorem+0x9e>
 800d32e:	f04f 0e00 	mov.w	lr, #0
 800d332:	4640      	mov	r0, r8
 800d334:	46ac      	mov	ip, r5
 800d336:	46f2      	mov	sl, lr
 800d338:	f850 2b04 	ldr.w	r2, [r0], #4
 800d33c:	b293      	uxth	r3, r2
 800d33e:	fb06 e303 	mla	r3, r6, r3, lr
 800d342:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d346:	b29b      	uxth	r3, r3
 800d348:	ebaa 0303 	sub.w	r3, sl, r3
 800d34c:	f8dc a000 	ldr.w	sl, [ip]
 800d350:	0c12      	lsrs	r2, r2, #16
 800d352:	fa13 f38a 	uxtah	r3, r3, sl
 800d356:	fb06 e202 	mla	r2, r6, r2, lr
 800d35a:	9300      	str	r3, [sp, #0]
 800d35c:	9b00      	ldr	r3, [sp, #0]
 800d35e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d362:	b292      	uxth	r2, r2
 800d364:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d368:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d36c:	f8bd 3000 	ldrh.w	r3, [sp]
 800d370:	4581      	cmp	r9, r0
 800d372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d376:	f84c 3b04 	str.w	r3, [ip], #4
 800d37a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d37e:	d2db      	bcs.n	800d338 <quorem+0x44>
 800d380:	f855 300b 	ldr.w	r3, [r5, fp]
 800d384:	b92b      	cbnz	r3, 800d392 <quorem+0x9e>
 800d386:	9b01      	ldr	r3, [sp, #4]
 800d388:	3b04      	subs	r3, #4
 800d38a:	429d      	cmp	r5, r3
 800d38c:	461a      	mov	r2, r3
 800d38e:	d32e      	bcc.n	800d3ee <quorem+0xfa>
 800d390:	613c      	str	r4, [r7, #16]
 800d392:	4638      	mov	r0, r7
 800d394:	f001 fee2 	bl	800f15c <__mcmp>
 800d398:	2800      	cmp	r0, #0
 800d39a:	db24      	blt.n	800d3e6 <quorem+0xf2>
 800d39c:	3601      	adds	r6, #1
 800d39e:	4628      	mov	r0, r5
 800d3a0:	f04f 0c00 	mov.w	ip, #0
 800d3a4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d3a8:	f8d0 e000 	ldr.w	lr, [r0]
 800d3ac:	b293      	uxth	r3, r2
 800d3ae:	ebac 0303 	sub.w	r3, ip, r3
 800d3b2:	0c12      	lsrs	r2, r2, #16
 800d3b4:	fa13 f38e 	uxtah	r3, r3, lr
 800d3b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d3bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3c6:	45c1      	cmp	r9, r8
 800d3c8:	f840 3b04 	str.w	r3, [r0], #4
 800d3cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d3d0:	d2e8      	bcs.n	800d3a4 <quorem+0xb0>
 800d3d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3da:	b922      	cbnz	r2, 800d3e6 <quorem+0xf2>
 800d3dc:	3b04      	subs	r3, #4
 800d3de:	429d      	cmp	r5, r3
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	d30a      	bcc.n	800d3fa <quorem+0x106>
 800d3e4:	613c      	str	r4, [r7, #16]
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	b003      	add	sp, #12
 800d3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ee:	6812      	ldr	r2, [r2, #0]
 800d3f0:	3b04      	subs	r3, #4
 800d3f2:	2a00      	cmp	r2, #0
 800d3f4:	d1cc      	bne.n	800d390 <quorem+0x9c>
 800d3f6:	3c01      	subs	r4, #1
 800d3f8:	e7c7      	b.n	800d38a <quorem+0x96>
 800d3fa:	6812      	ldr	r2, [r2, #0]
 800d3fc:	3b04      	subs	r3, #4
 800d3fe:	2a00      	cmp	r2, #0
 800d400:	d1f0      	bne.n	800d3e4 <quorem+0xf0>
 800d402:	3c01      	subs	r4, #1
 800d404:	e7eb      	b.n	800d3de <quorem+0xea>
 800d406:	2000      	movs	r0, #0
 800d408:	e7ee      	b.n	800d3e8 <quorem+0xf4>
 800d40a:	0000      	movs	r0, r0
 800d40c:	0000      	movs	r0, r0
	...

0800d410 <_dtoa_r>:
 800d410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d414:	ed2d 8b04 	vpush	{d8-d9}
 800d418:	ec57 6b10 	vmov	r6, r7, d0
 800d41c:	b093      	sub	sp, #76	; 0x4c
 800d41e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d420:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d424:	9106      	str	r1, [sp, #24]
 800d426:	ee10 aa10 	vmov	sl, s0
 800d42a:	4604      	mov	r4, r0
 800d42c:	9209      	str	r2, [sp, #36]	; 0x24
 800d42e:	930c      	str	r3, [sp, #48]	; 0x30
 800d430:	46bb      	mov	fp, r7
 800d432:	b975      	cbnz	r5, 800d452 <_dtoa_r+0x42>
 800d434:	2010      	movs	r0, #16
 800d436:	f7fd fdc3 	bl	800afc0 <malloc>
 800d43a:	4602      	mov	r2, r0
 800d43c:	6260      	str	r0, [r4, #36]	; 0x24
 800d43e:	b920      	cbnz	r0, 800d44a <_dtoa_r+0x3a>
 800d440:	4ba7      	ldr	r3, [pc, #668]	; (800d6e0 <_dtoa_r+0x2d0>)
 800d442:	21ea      	movs	r1, #234	; 0xea
 800d444:	48a7      	ldr	r0, [pc, #668]	; (800d6e4 <_dtoa_r+0x2d4>)
 800d446:	f7fd fd61 	bl	800af0c <__assert_func>
 800d44a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d44e:	6005      	str	r5, [r0, #0]
 800d450:	60c5      	str	r5, [r0, #12]
 800d452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d454:	6819      	ldr	r1, [r3, #0]
 800d456:	b151      	cbz	r1, 800d46e <_dtoa_r+0x5e>
 800d458:	685a      	ldr	r2, [r3, #4]
 800d45a:	604a      	str	r2, [r1, #4]
 800d45c:	2301      	movs	r3, #1
 800d45e:	4093      	lsls	r3, r2
 800d460:	608b      	str	r3, [r1, #8]
 800d462:	4620      	mov	r0, r4
 800d464:	f001 fbee 	bl	800ec44 <_Bfree>
 800d468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d46a:	2200      	movs	r2, #0
 800d46c:	601a      	str	r2, [r3, #0]
 800d46e:	1e3b      	subs	r3, r7, #0
 800d470:	bfaa      	itet	ge
 800d472:	2300      	movge	r3, #0
 800d474:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d478:	f8c8 3000 	strge.w	r3, [r8]
 800d47c:	4b9a      	ldr	r3, [pc, #616]	; (800d6e8 <_dtoa_r+0x2d8>)
 800d47e:	bfbc      	itt	lt
 800d480:	2201      	movlt	r2, #1
 800d482:	f8c8 2000 	strlt.w	r2, [r8]
 800d486:	ea33 030b 	bics.w	r3, r3, fp
 800d48a:	d11b      	bne.n	800d4c4 <_dtoa_r+0xb4>
 800d48c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d48e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d492:	6013      	str	r3, [r2, #0]
 800d494:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d498:	4333      	orrs	r3, r6
 800d49a:	f000 8592 	beq.w	800dfc2 <_dtoa_r+0xbb2>
 800d49e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4a0:	b963      	cbnz	r3, 800d4bc <_dtoa_r+0xac>
 800d4a2:	4b92      	ldr	r3, [pc, #584]	; (800d6ec <_dtoa_r+0x2dc>)
 800d4a4:	e022      	b.n	800d4ec <_dtoa_r+0xdc>
 800d4a6:	4b92      	ldr	r3, [pc, #584]	; (800d6f0 <_dtoa_r+0x2e0>)
 800d4a8:	9301      	str	r3, [sp, #4]
 800d4aa:	3308      	adds	r3, #8
 800d4ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d4ae:	6013      	str	r3, [r2, #0]
 800d4b0:	9801      	ldr	r0, [sp, #4]
 800d4b2:	b013      	add	sp, #76	; 0x4c
 800d4b4:	ecbd 8b04 	vpop	{d8-d9}
 800d4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4bc:	4b8b      	ldr	r3, [pc, #556]	; (800d6ec <_dtoa_r+0x2dc>)
 800d4be:	9301      	str	r3, [sp, #4]
 800d4c0:	3303      	adds	r3, #3
 800d4c2:	e7f3      	b.n	800d4ac <_dtoa_r+0x9c>
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	4650      	mov	r0, sl
 800d4ca:	4659      	mov	r1, fp
 800d4cc:	f7f3 fb0c 	bl	8000ae8 <__aeabi_dcmpeq>
 800d4d0:	ec4b ab19 	vmov	d9, sl, fp
 800d4d4:	4680      	mov	r8, r0
 800d4d6:	b158      	cbz	r0, 800d4f0 <_dtoa_r+0xe0>
 800d4d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d4da:	2301      	movs	r3, #1
 800d4dc:	6013      	str	r3, [r2, #0]
 800d4de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f000 856b 	beq.w	800dfbc <_dtoa_r+0xbac>
 800d4e6:	4883      	ldr	r0, [pc, #524]	; (800d6f4 <_dtoa_r+0x2e4>)
 800d4e8:	6018      	str	r0, [r3, #0]
 800d4ea:	1e43      	subs	r3, r0, #1
 800d4ec:	9301      	str	r3, [sp, #4]
 800d4ee:	e7df      	b.n	800d4b0 <_dtoa_r+0xa0>
 800d4f0:	ec4b ab10 	vmov	d0, sl, fp
 800d4f4:	aa10      	add	r2, sp, #64	; 0x40
 800d4f6:	a911      	add	r1, sp, #68	; 0x44
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	f001 ff51 	bl	800f3a0 <__d2b>
 800d4fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d502:	ee08 0a10 	vmov	s16, r0
 800d506:	2d00      	cmp	r5, #0
 800d508:	f000 8084 	beq.w	800d614 <_dtoa_r+0x204>
 800d50c:	ee19 3a90 	vmov	r3, s19
 800d510:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d514:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d518:	4656      	mov	r6, sl
 800d51a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d51e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d522:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d526:	4b74      	ldr	r3, [pc, #464]	; (800d6f8 <_dtoa_r+0x2e8>)
 800d528:	2200      	movs	r2, #0
 800d52a:	4630      	mov	r0, r6
 800d52c:	4639      	mov	r1, r7
 800d52e:	f7f2 febb 	bl	80002a8 <__aeabi_dsub>
 800d532:	a365      	add	r3, pc, #404	; (adr r3, 800d6c8 <_dtoa_r+0x2b8>)
 800d534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d538:	f7f3 f86e 	bl	8000618 <__aeabi_dmul>
 800d53c:	a364      	add	r3, pc, #400	; (adr r3, 800d6d0 <_dtoa_r+0x2c0>)
 800d53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d542:	f7f2 feb3 	bl	80002ac <__adddf3>
 800d546:	4606      	mov	r6, r0
 800d548:	4628      	mov	r0, r5
 800d54a:	460f      	mov	r7, r1
 800d54c:	f7f2 fffa 	bl	8000544 <__aeabi_i2d>
 800d550:	a361      	add	r3, pc, #388	; (adr r3, 800d6d8 <_dtoa_r+0x2c8>)
 800d552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d556:	f7f3 f85f 	bl	8000618 <__aeabi_dmul>
 800d55a:	4602      	mov	r2, r0
 800d55c:	460b      	mov	r3, r1
 800d55e:	4630      	mov	r0, r6
 800d560:	4639      	mov	r1, r7
 800d562:	f7f2 fea3 	bl	80002ac <__adddf3>
 800d566:	4606      	mov	r6, r0
 800d568:	460f      	mov	r7, r1
 800d56a:	f7f3 fb05 	bl	8000b78 <__aeabi_d2iz>
 800d56e:	2200      	movs	r2, #0
 800d570:	9000      	str	r0, [sp, #0]
 800d572:	2300      	movs	r3, #0
 800d574:	4630      	mov	r0, r6
 800d576:	4639      	mov	r1, r7
 800d578:	f7f3 fac0 	bl	8000afc <__aeabi_dcmplt>
 800d57c:	b150      	cbz	r0, 800d594 <_dtoa_r+0x184>
 800d57e:	9800      	ldr	r0, [sp, #0]
 800d580:	f7f2 ffe0 	bl	8000544 <__aeabi_i2d>
 800d584:	4632      	mov	r2, r6
 800d586:	463b      	mov	r3, r7
 800d588:	f7f3 faae 	bl	8000ae8 <__aeabi_dcmpeq>
 800d58c:	b910      	cbnz	r0, 800d594 <_dtoa_r+0x184>
 800d58e:	9b00      	ldr	r3, [sp, #0]
 800d590:	3b01      	subs	r3, #1
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	9b00      	ldr	r3, [sp, #0]
 800d596:	2b16      	cmp	r3, #22
 800d598:	d85a      	bhi.n	800d650 <_dtoa_r+0x240>
 800d59a:	9a00      	ldr	r2, [sp, #0]
 800d59c:	4b57      	ldr	r3, [pc, #348]	; (800d6fc <_dtoa_r+0x2ec>)
 800d59e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a6:	ec51 0b19 	vmov	r0, r1, d9
 800d5aa:	f7f3 faa7 	bl	8000afc <__aeabi_dcmplt>
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	d050      	beq.n	800d654 <_dtoa_r+0x244>
 800d5b2:	9b00      	ldr	r3, [sp, #0]
 800d5b4:	3b01      	subs	r3, #1
 800d5b6:	9300      	str	r3, [sp, #0]
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5be:	1b5d      	subs	r5, r3, r5
 800d5c0:	1e6b      	subs	r3, r5, #1
 800d5c2:	9305      	str	r3, [sp, #20]
 800d5c4:	bf45      	ittet	mi
 800d5c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800d5ca:	9304      	strmi	r3, [sp, #16]
 800d5cc:	2300      	movpl	r3, #0
 800d5ce:	2300      	movmi	r3, #0
 800d5d0:	bf4c      	ite	mi
 800d5d2:	9305      	strmi	r3, [sp, #20]
 800d5d4:	9304      	strpl	r3, [sp, #16]
 800d5d6:	9b00      	ldr	r3, [sp, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	db3d      	blt.n	800d658 <_dtoa_r+0x248>
 800d5dc:	9b05      	ldr	r3, [sp, #20]
 800d5de:	9a00      	ldr	r2, [sp, #0]
 800d5e0:	920a      	str	r2, [sp, #40]	; 0x28
 800d5e2:	4413      	add	r3, r2
 800d5e4:	9305      	str	r3, [sp, #20]
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	9307      	str	r3, [sp, #28]
 800d5ea:	9b06      	ldr	r3, [sp, #24]
 800d5ec:	2b09      	cmp	r3, #9
 800d5ee:	f200 8089 	bhi.w	800d704 <_dtoa_r+0x2f4>
 800d5f2:	2b05      	cmp	r3, #5
 800d5f4:	bfc4      	itt	gt
 800d5f6:	3b04      	subgt	r3, #4
 800d5f8:	9306      	strgt	r3, [sp, #24]
 800d5fa:	9b06      	ldr	r3, [sp, #24]
 800d5fc:	f1a3 0302 	sub.w	r3, r3, #2
 800d600:	bfcc      	ite	gt
 800d602:	2500      	movgt	r5, #0
 800d604:	2501      	movle	r5, #1
 800d606:	2b03      	cmp	r3, #3
 800d608:	f200 8087 	bhi.w	800d71a <_dtoa_r+0x30a>
 800d60c:	e8df f003 	tbb	[pc, r3]
 800d610:	59383a2d 	.word	0x59383a2d
 800d614:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d618:	441d      	add	r5, r3
 800d61a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d61e:	2b20      	cmp	r3, #32
 800d620:	bfc1      	itttt	gt
 800d622:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d626:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d62a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d62e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d632:	bfda      	itte	le
 800d634:	f1c3 0320 	rsble	r3, r3, #32
 800d638:	fa06 f003 	lslle.w	r0, r6, r3
 800d63c:	4318      	orrgt	r0, r3
 800d63e:	f7f2 ff71 	bl	8000524 <__aeabi_ui2d>
 800d642:	2301      	movs	r3, #1
 800d644:	4606      	mov	r6, r0
 800d646:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d64a:	3d01      	subs	r5, #1
 800d64c:	930e      	str	r3, [sp, #56]	; 0x38
 800d64e:	e76a      	b.n	800d526 <_dtoa_r+0x116>
 800d650:	2301      	movs	r3, #1
 800d652:	e7b2      	b.n	800d5ba <_dtoa_r+0x1aa>
 800d654:	900b      	str	r0, [sp, #44]	; 0x2c
 800d656:	e7b1      	b.n	800d5bc <_dtoa_r+0x1ac>
 800d658:	9b04      	ldr	r3, [sp, #16]
 800d65a:	9a00      	ldr	r2, [sp, #0]
 800d65c:	1a9b      	subs	r3, r3, r2
 800d65e:	9304      	str	r3, [sp, #16]
 800d660:	4253      	negs	r3, r2
 800d662:	9307      	str	r3, [sp, #28]
 800d664:	2300      	movs	r3, #0
 800d666:	930a      	str	r3, [sp, #40]	; 0x28
 800d668:	e7bf      	b.n	800d5ea <_dtoa_r+0x1da>
 800d66a:	2300      	movs	r3, #0
 800d66c:	9308      	str	r3, [sp, #32]
 800d66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d670:	2b00      	cmp	r3, #0
 800d672:	dc55      	bgt.n	800d720 <_dtoa_r+0x310>
 800d674:	2301      	movs	r3, #1
 800d676:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d67a:	461a      	mov	r2, r3
 800d67c:	9209      	str	r2, [sp, #36]	; 0x24
 800d67e:	e00c      	b.n	800d69a <_dtoa_r+0x28a>
 800d680:	2301      	movs	r3, #1
 800d682:	e7f3      	b.n	800d66c <_dtoa_r+0x25c>
 800d684:	2300      	movs	r3, #0
 800d686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d688:	9308      	str	r3, [sp, #32]
 800d68a:	9b00      	ldr	r3, [sp, #0]
 800d68c:	4413      	add	r3, r2
 800d68e:	9302      	str	r3, [sp, #8]
 800d690:	3301      	adds	r3, #1
 800d692:	2b01      	cmp	r3, #1
 800d694:	9303      	str	r3, [sp, #12]
 800d696:	bfb8      	it	lt
 800d698:	2301      	movlt	r3, #1
 800d69a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d69c:	2200      	movs	r2, #0
 800d69e:	6042      	str	r2, [r0, #4]
 800d6a0:	2204      	movs	r2, #4
 800d6a2:	f102 0614 	add.w	r6, r2, #20
 800d6a6:	429e      	cmp	r6, r3
 800d6a8:	6841      	ldr	r1, [r0, #4]
 800d6aa:	d93d      	bls.n	800d728 <_dtoa_r+0x318>
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	f001 fa89 	bl	800ebc4 <_Balloc>
 800d6b2:	9001      	str	r0, [sp, #4]
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d13b      	bne.n	800d730 <_dtoa_r+0x320>
 800d6b8:	4b11      	ldr	r3, [pc, #68]	; (800d700 <_dtoa_r+0x2f0>)
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d6c0:	e6c0      	b.n	800d444 <_dtoa_r+0x34>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e7df      	b.n	800d686 <_dtoa_r+0x276>
 800d6c6:	bf00      	nop
 800d6c8:	636f4361 	.word	0x636f4361
 800d6cc:	3fd287a7 	.word	0x3fd287a7
 800d6d0:	8b60c8b3 	.word	0x8b60c8b3
 800d6d4:	3fc68a28 	.word	0x3fc68a28
 800d6d8:	509f79fb 	.word	0x509f79fb
 800d6dc:	3fd34413 	.word	0x3fd34413
 800d6e0:	080105b0 	.word	0x080105b0
 800d6e4:	08010732 	.word	0x08010732
 800d6e8:	7ff00000 	.word	0x7ff00000
 800d6ec:	0801072e 	.word	0x0801072e
 800d6f0:	08010725 	.word	0x08010725
 800d6f4:	080109d9 	.word	0x080109d9
 800d6f8:	3ff80000 	.word	0x3ff80000
 800d6fc:	08010900 	.word	0x08010900
 800d700:	0801078d 	.word	0x0801078d
 800d704:	2501      	movs	r5, #1
 800d706:	2300      	movs	r3, #0
 800d708:	9306      	str	r3, [sp, #24]
 800d70a:	9508      	str	r5, [sp, #32]
 800d70c:	f04f 33ff 	mov.w	r3, #4294967295
 800d710:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d714:	2200      	movs	r2, #0
 800d716:	2312      	movs	r3, #18
 800d718:	e7b0      	b.n	800d67c <_dtoa_r+0x26c>
 800d71a:	2301      	movs	r3, #1
 800d71c:	9308      	str	r3, [sp, #32]
 800d71e:	e7f5      	b.n	800d70c <_dtoa_r+0x2fc>
 800d720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d722:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d726:	e7b8      	b.n	800d69a <_dtoa_r+0x28a>
 800d728:	3101      	adds	r1, #1
 800d72a:	6041      	str	r1, [r0, #4]
 800d72c:	0052      	lsls	r2, r2, #1
 800d72e:	e7b8      	b.n	800d6a2 <_dtoa_r+0x292>
 800d730:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d732:	9a01      	ldr	r2, [sp, #4]
 800d734:	601a      	str	r2, [r3, #0]
 800d736:	9b03      	ldr	r3, [sp, #12]
 800d738:	2b0e      	cmp	r3, #14
 800d73a:	f200 809d 	bhi.w	800d878 <_dtoa_r+0x468>
 800d73e:	2d00      	cmp	r5, #0
 800d740:	f000 809a 	beq.w	800d878 <_dtoa_r+0x468>
 800d744:	9b00      	ldr	r3, [sp, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	dd32      	ble.n	800d7b0 <_dtoa_r+0x3a0>
 800d74a:	4ab7      	ldr	r2, [pc, #732]	; (800da28 <_dtoa_r+0x618>)
 800d74c:	f003 030f 	and.w	r3, r3, #15
 800d750:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d754:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d758:	9b00      	ldr	r3, [sp, #0]
 800d75a:	05d8      	lsls	r0, r3, #23
 800d75c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d760:	d516      	bpl.n	800d790 <_dtoa_r+0x380>
 800d762:	4bb2      	ldr	r3, [pc, #712]	; (800da2c <_dtoa_r+0x61c>)
 800d764:	ec51 0b19 	vmov	r0, r1, d9
 800d768:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d76c:	f7f3 f87e 	bl	800086c <__aeabi_ddiv>
 800d770:	f007 070f 	and.w	r7, r7, #15
 800d774:	4682      	mov	sl, r0
 800d776:	468b      	mov	fp, r1
 800d778:	2503      	movs	r5, #3
 800d77a:	4eac      	ldr	r6, [pc, #688]	; (800da2c <_dtoa_r+0x61c>)
 800d77c:	b957      	cbnz	r7, 800d794 <_dtoa_r+0x384>
 800d77e:	4642      	mov	r2, r8
 800d780:	464b      	mov	r3, r9
 800d782:	4650      	mov	r0, sl
 800d784:	4659      	mov	r1, fp
 800d786:	f7f3 f871 	bl	800086c <__aeabi_ddiv>
 800d78a:	4682      	mov	sl, r0
 800d78c:	468b      	mov	fp, r1
 800d78e:	e028      	b.n	800d7e2 <_dtoa_r+0x3d2>
 800d790:	2502      	movs	r5, #2
 800d792:	e7f2      	b.n	800d77a <_dtoa_r+0x36a>
 800d794:	07f9      	lsls	r1, r7, #31
 800d796:	d508      	bpl.n	800d7aa <_dtoa_r+0x39a>
 800d798:	4640      	mov	r0, r8
 800d79a:	4649      	mov	r1, r9
 800d79c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d7a0:	f7f2 ff3a 	bl	8000618 <__aeabi_dmul>
 800d7a4:	3501      	adds	r5, #1
 800d7a6:	4680      	mov	r8, r0
 800d7a8:	4689      	mov	r9, r1
 800d7aa:	107f      	asrs	r7, r7, #1
 800d7ac:	3608      	adds	r6, #8
 800d7ae:	e7e5      	b.n	800d77c <_dtoa_r+0x36c>
 800d7b0:	f000 809b 	beq.w	800d8ea <_dtoa_r+0x4da>
 800d7b4:	9b00      	ldr	r3, [sp, #0]
 800d7b6:	4f9d      	ldr	r7, [pc, #628]	; (800da2c <_dtoa_r+0x61c>)
 800d7b8:	425e      	negs	r6, r3
 800d7ba:	4b9b      	ldr	r3, [pc, #620]	; (800da28 <_dtoa_r+0x618>)
 800d7bc:	f006 020f 	and.w	r2, r6, #15
 800d7c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c8:	ec51 0b19 	vmov	r0, r1, d9
 800d7cc:	f7f2 ff24 	bl	8000618 <__aeabi_dmul>
 800d7d0:	1136      	asrs	r6, r6, #4
 800d7d2:	4682      	mov	sl, r0
 800d7d4:	468b      	mov	fp, r1
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	2502      	movs	r5, #2
 800d7da:	2e00      	cmp	r6, #0
 800d7dc:	d17a      	bne.n	800d8d4 <_dtoa_r+0x4c4>
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d1d3      	bne.n	800d78a <_dtoa_r+0x37a>
 800d7e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	f000 8082 	beq.w	800d8ee <_dtoa_r+0x4de>
 800d7ea:	4b91      	ldr	r3, [pc, #580]	; (800da30 <_dtoa_r+0x620>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	4650      	mov	r0, sl
 800d7f0:	4659      	mov	r1, fp
 800d7f2:	f7f3 f983 	bl	8000afc <__aeabi_dcmplt>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	d079      	beq.n	800d8ee <_dtoa_r+0x4de>
 800d7fa:	9b03      	ldr	r3, [sp, #12]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d076      	beq.n	800d8ee <_dtoa_r+0x4de>
 800d800:	9b02      	ldr	r3, [sp, #8]
 800d802:	2b00      	cmp	r3, #0
 800d804:	dd36      	ble.n	800d874 <_dtoa_r+0x464>
 800d806:	9b00      	ldr	r3, [sp, #0]
 800d808:	4650      	mov	r0, sl
 800d80a:	4659      	mov	r1, fp
 800d80c:	1e5f      	subs	r7, r3, #1
 800d80e:	2200      	movs	r2, #0
 800d810:	4b88      	ldr	r3, [pc, #544]	; (800da34 <_dtoa_r+0x624>)
 800d812:	f7f2 ff01 	bl	8000618 <__aeabi_dmul>
 800d816:	9e02      	ldr	r6, [sp, #8]
 800d818:	4682      	mov	sl, r0
 800d81a:	468b      	mov	fp, r1
 800d81c:	3501      	adds	r5, #1
 800d81e:	4628      	mov	r0, r5
 800d820:	f7f2 fe90 	bl	8000544 <__aeabi_i2d>
 800d824:	4652      	mov	r2, sl
 800d826:	465b      	mov	r3, fp
 800d828:	f7f2 fef6 	bl	8000618 <__aeabi_dmul>
 800d82c:	4b82      	ldr	r3, [pc, #520]	; (800da38 <_dtoa_r+0x628>)
 800d82e:	2200      	movs	r2, #0
 800d830:	f7f2 fd3c 	bl	80002ac <__adddf3>
 800d834:	46d0      	mov	r8, sl
 800d836:	46d9      	mov	r9, fp
 800d838:	4682      	mov	sl, r0
 800d83a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d83e:	2e00      	cmp	r6, #0
 800d840:	d158      	bne.n	800d8f4 <_dtoa_r+0x4e4>
 800d842:	4b7e      	ldr	r3, [pc, #504]	; (800da3c <_dtoa_r+0x62c>)
 800d844:	2200      	movs	r2, #0
 800d846:	4640      	mov	r0, r8
 800d848:	4649      	mov	r1, r9
 800d84a:	f7f2 fd2d 	bl	80002a8 <__aeabi_dsub>
 800d84e:	4652      	mov	r2, sl
 800d850:	465b      	mov	r3, fp
 800d852:	4680      	mov	r8, r0
 800d854:	4689      	mov	r9, r1
 800d856:	f7f3 f96f 	bl	8000b38 <__aeabi_dcmpgt>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	f040 8295 	bne.w	800dd8a <_dtoa_r+0x97a>
 800d860:	4652      	mov	r2, sl
 800d862:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d866:	4640      	mov	r0, r8
 800d868:	4649      	mov	r1, r9
 800d86a:	f7f3 f947 	bl	8000afc <__aeabi_dcmplt>
 800d86e:	2800      	cmp	r0, #0
 800d870:	f040 8289 	bne.w	800dd86 <_dtoa_r+0x976>
 800d874:	ec5b ab19 	vmov	sl, fp, d9
 800d878:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	f2c0 8148 	blt.w	800db10 <_dtoa_r+0x700>
 800d880:	9a00      	ldr	r2, [sp, #0]
 800d882:	2a0e      	cmp	r2, #14
 800d884:	f300 8144 	bgt.w	800db10 <_dtoa_r+0x700>
 800d888:	4b67      	ldr	r3, [pc, #412]	; (800da28 <_dtoa_r+0x618>)
 800d88a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d88e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d894:	2b00      	cmp	r3, #0
 800d896:	f280 80d5 	bge.w	800da44 <_dtoa_r+0x634>
 800d89a:	9b03      	ldr	r3, [sp, #12]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	f300 80d1 	bgt.w	800da44 <_dtoa_r+0x634>
 800d8a2:	f040 826f 	bne.w	800dd84 <_dtoa_r+0x974>
 800d8a6:	4b65      	ldr	r3, [pc, #404]	; (800da3c <_dtoa_r+0x62c>)
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	4640      	mov	r0, r8
 800d8ac:	4649      	mov	r1, r9
 800d8ae:	f7f2 feb3 	bl	8000618 <__aeabi_dmul>
 800d8b2:	4652      	mov	r2, sl
 800d8b4:	465b      	mov	r3, fp
 800d8b6:	f7f3 f935 	bl	8000b24 <__aeabi_dcmpge>
 800d8ba:	9e03      	ldr	r6, [sp, #12]
 800d8bc:	4637      	mov	r7, r6
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	f040 8245 	bne.w	800dd4e <_dtoa_r+0x93e>
 800d8c4:	9d01      	ldr	r5, [sp, #4]
 800d8c6:	2331      	movs	r3, #49	; 0x31
 800d8c8:	f805 3b01 	strb.w	r3, [r5], #1
 800d8cc:	9b00      	ldr	r3, [sp, #0]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	9300      	str	r3, [sp, #0]
 800d8d2:	e240      	b.n	800dd56 <_dtoa_r+0x946>
 800d8d4:	07f2      	lsls	r2, r6, #31
 800d8d6:	d505      	bpl.n	800d8e4 <_dtoa_r+0x4d4>
 800d8d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8dc:	f7f2 fe9c 	bl	8000618 <__aeabi_dmul>
 800d8e0:	3501      	adds	r5, #1
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	1076      	asrs	r6, r6, #1
 800d8e6:	3708      	adds	r7, #8
 800d8e8:	e777      	b.n	800d7da <_dtoa_r+0x3ca>
 800d8ea:	2502      	movs	r5, #2
 800d8ec:	e779      	b.n	800d7e2 <_dtoa_r+0x3d2>
 800d8ee:	9f00      	ldr	r7, [sp, #0]
 800d8f0:	9e03      	ldr	r6, [sp, #12]
 800d8f2:	e794      	b.n	800d81e <_dtoa_r+0x40e>
 800d8f4:	9901      	ldr	r1, [sp, #4]
 800d8f6:	4b4c      	ldr	r3, [pc, #304]	; (800da28 <_dtoa_r+0x618>)
 800d8f8:	4431      	add	r1, r6
 800d8fa:	910d      	str	r1, [sp, #52]	; 0x34
 800d8fc:	9908      	ldr	r1, [sp, #32]
 800d8fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d902:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d906:	2900      	cmp	r1, #0
 800d908:	d043      	beq.n	800d992 <_dtoa_r+0x582>
 800d90a:	494d      	ldr	r1, [pc, #308]	; (800da40 <_dtoa_r+0x630>)
 800d90c:	2000      	movs	r0, #0
 800d90e:	f7f2 ffad 	bl	800086c <__aeabi_ddiv>
 800d912:	4652      	mov	r2, sl
 800d914:	465b      	mov	r3, fp
 800d916:	f7f2 fcc7 	bl	80002a8 <__aeabi_dsub>
 800d91a:	9d01      	ldr	r5, [sp, #4]
 800d91c:	4682      	mov	sl, r0
 800d91e:	468b      	mov	fp, r1
 800d920:	4649      	mov	r1, r9
 800d922:	4640      	mov	r0, r8
 800d924:	f7f3 f928 	bl	8000b78 <__aeabi_d2iz>
 800d928:	4606      	mov	r6, r0
 800d92a:	f7f2 fe0b 	bl	8000544 <__aeabi_i2d>
 800d92e:	4602      	mov	r2, r0
 800d930:	460b      	mov	r3, r1
 800d932:	4640      	mov	r0, r8
 800d934:	4649      	mov	r1, r9
 800d936:	f7f2 fcb7 	bl	80002a8 <__aeabi_dsub>
 800d93a:	3630      	adds	r6, #48	; 0x30
 800d93c:	f805 6b01 	strb.w	r6, [r5], #1
 800d940:	4652      	mov	r2, sl
 800d942:	465b      	mov	r3, fp
 800d944:	4680      	mov	r8, r0
 800d946:	4689      	mov	r9, r1
 800d948:	f7f3 f8d8 	bl	8000afc <__aeabi_dcmplt>
 800d94c:	2800      	cmp	r0, #0
 800d94e:	d163      	bne.n	800da18 <_dtoa_r+0x608>
 800d950:	4642      	mov	r2, r8
 800d952:	464b      	mov	r3, r9
 800d954:	4936      	ldr	r1, [pc, #216]	; (800da30 <_dtoa_r+0x620>)
 800d956:	2000      	movs	r0, #0
 800d958:	f7f2 fca6 	bl	80002a8 <__aeabi_dsub>
 800d95c:	4652      	mov	r2, sl
 800d95e:	465b      	mov	r3, fp
 800d960:	f7f3 f8cc 	bl	8000afc <__aeabi_dcmplt>
 800d964:	2800      	cmp	r0, #0
 800d966:	f040 80b5 	bne.w	800dad4 <_dtoa_r+0x6c4>
 800d96a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d96c:	429d      	cmp	r5, r3
 800d96e:	d081      	beq.n	800d874 <_dtoa_r+0x464>
 800d970:	4b30      	ldr	r3, [pc, #192]	; (800da34 <_dtoa_r+0x624>)
 800d972:	2200      	movs	r2, #0
 800d974:	4650      	mov	r0, sl
 800d976:	4659      	mov	r1, fp
 800d978:	f7f2 fe4e 	bl	8000618 <__aeabi_dmul>
 800d97c:	4b2d      	ldr	r3, [pc, #180]	; (800da34 <_dtoa_r+0x624>)
 800d97e:	4682      	mov	sl, r0
 800d980:	468b      	mov	fp, r1
 800d982:	4640      	mov	r0, r8
 800d984:	4649      	mov	r1, r9
 800d986:	2200      	movs	r2, #0
 800d988:	f7f2 fe46 	bl	8000618 <__aeabi_dmul>
 800d98c:	4680      	mov	r8, r0
 800d98e:	4689      	mov	r9, r1
 800d990:	e7c6      	b.n	800d920 <_dtoa_r+0x510>
 800d992:	4650      	mov	r0, sl
 800d994:	4659      	mov	r1, fp
 800d996:	f7f2 fe3f 	bl	8000618 <__aeabi_dmul>
 800d99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d99c:	9d01      	ldr	r5, [sp, #4]
 800d99e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9a0:	4682      	mov	sl, r0
 800d9a2:	468b      	mov	fp, r1
 800d9a4:	4649      	mov	r1, r9
 800d9a6:	4640      	mov	r0, r8
 800d9a8:	f7f3 f8e6 	bl	8000b78 <__aeabi_d2iz>
 800d9ac:	4606      	mov	r6, r0
 800d9ae:	f7f2 fdc9 	bl	8000544 <__aeabi_i2d>
 800d9b2:	3630      	adds	r6, #48	; 0x30
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	4640      	mov	r0, r8
 800d9ba:	4649      	mov	r1, r9
 800d9bc:	f7f2 fc74 	bl	80002a8 <__aeabi_dsub>
 800d9c0:	f805 6b01 	strb.w	r6, [r5], #1
 800d9c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9c6:	429d      	cmp	r5, r3
 800d9c8:	4680      	mov	r8, r0
 800d9ca:	4689      	mov	r9, r1
 800d9cc:	f04f 0200 	mov.w	r2, #0
 800d9d0:	d124      	bne.n	800da1c <_dtoa_r+0x60c>
 800d9d2:	4b1b      	ldr	r3, [pc, #108]	; (800da40 <_dtoa_r+0x630>)
 800d9d4:	4650      	mov	r0, sl
 800d9d6:	4659      	mov	r1, fp
 800d9d8:	f7f2 fc68 	bl	80002ac <__adddf3>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	460b      	mov	r3, r1
 800d9e0:	4640      	mov	r0, r8
 800d9e2:	4649      	mov	r1, r9
 800d9e4:	f7f3 f8a8 	bl	8000b38 <__aeabi_dcmpgt>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	d173      	bne.n	800dad4 <_dtoa_r+0x6c4>
 800d9ec:	4652      	mov	r2, sl
 800d9ee:	465b      	mov	r3, fp
 800d9f0:	4913      	ldr	r1, [pc, #76]	; (800da40 <_dtoa_r+0x630>)
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	f7f2 fc58 	bl	80002a8 <__aeabi_dsub>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	4640      	mov	r0, r8
 800d9fe:	4649      	mov	r1, r9
 800da00:	f7f3 f87c 	bl	8000afc <__aeabi_dcmplt>
 800da04:	2800      	cmp	r0, #0
 800da06:	f43f af35 	beq.w	800d874 <_dtoa_r+0x464>
 800da0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800da0c:	1e6b      	subs	r3, r5, #1
 800da0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800da10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800da14:	2b30      	cmp	r3, #48	; 0x30
 800da16:	d0f8      	beq.n	800da0a <_dtoa_r+0x5fa>
 800da18:	9700      	str	r7, [sp, #0]
 800da1a:	e049      	b.n	800dab0 <_dtoa_r+0x6a0>
 800da1c:	4b05      	ldr	r3, [pc, #20]	; (800da34 <_dtoa_r+0x624>)
 800da1e:	f7f2 fdfb 	bl	8000618 <__aeabi_dmul>
 800da22:	4680      	mov	r8, r0
 800da24:	4689      	mov	r9, r1
 800da26:	e7bd      	b.n	800d9a4 <_dtoa_r+0x594>
 800da28:	08010900 	.word	0x08010900
 800da2c:	080108d8 	.word	0x080108d8
 800da30:	3ff00000 	.word	0x3ff00000
 800da34:	40240000 	.word	0x40240000
 800da38:	401c0000 	.word	0x401c0000
 800da3c:	40140000 	.word	0x40140000
 800da40:	3fe00000 	.word	0x3fe00000
 800da44:	9d01      	ldr	r5, [sp, #4]
 800da46:	4656      	mov	r6, sl
 800da48:	465f      	mov	r7, fp
 800da4a:	4642      	mov	r2, r8
 800da4c:	464b      	mov	r3, r9
 800da4e:	4630      	mov	r0, r6
 800da50:	4639      	mov	r1, r7
 800da52:	f7f2 ff0b 	bl	800086c <__aeabi_ddiv>
 800da56:	f7f3 f88f 	bl	8000b78 <__aeabi_d2iz>
 800da5a:	4682      	mov	sl, r0
 800da5c:	f7f2 fd72 	bl	8000544 <__aeabi_i2d>
 800da60:	4642      	mov	r2, r8
 800da62:	464b      	mov	r3, r9
 800da64:	f7f2 fdd8 	bl	8000618 <__aeabi_dmul>
 800da68:	4602      	mov	r2, r0
 800da6a:	460b      	mov	r3, r1
 800da6c:	4630      	mov	r0, r6
 800da6e:	4639      	mov	r1, r7
 800da70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800da74:	f7f2 fc18 	bl	80002a8 <__aeabi_dsub>
 800da78:	f805 6b01 	strb.w	r6, [r5], #1
 800da7c:	9e01      	ldr	r6, [sp, #4]
 800da7e:	9f03      	ldr	r7, [sp, #12]
 800da80:	1bae      	subs	r6, r5, r6
 800da82:	42b7      	cmp	r7, r6
 800da84:	4602      	mov	r2, r0
 800da86:	460b      	mov	r3, r1
 800da88:	d135      	bne.n	800daf6 <_dtoa_r+0x6e6>
 800da8a:	f7f2 fc0f 	bl	80002ac <__adddf3>
 800da8e:	4642      	mov	r2, r8
 800da90:	464b      	mov	r3, r9
 800da92:	4606      	mov	r6, r0
 800da94:	460f      	mov	r7, r1
 800da96:	f7f3 f84f 	bl	8000b38 <__aeabi_dcmpgt>
 800da9a:	b9d0      	cbnz	r0, 800dad2 <_dtoa_r+0x6c2>
 800da9c:	4642      	mov	r2, r8
 800da9e:	464b      	mov	r3, r9
 800daa0:	4630      	mov	r0, r6
 800daa2:	4639      	mov	r1, r7
 800daa4:	f7f3 f820 	bl	8000ae8 <__aeabi_dcmpeq>
 800daa8:	b110      	cbz	r0, 800dab0 <_dtoa_r+0x6a0>
 800daaa:	f01a 0f01 	tst.w	sl, #1
 800daae:	d110      	bne.n	800dad2 <_dtoa_r+0x6c2>
 800dab0:	4620      	mov	r0, r4
 800dab2:	ee18 1a10 	vmov	r1, s16
 800dab6:	f001 f8c5 	bl	800ec44 <_Bfree>
 800daba:	2300      	movs	r3, #0
 800dabc:	9800      	ldr	r0, [sp, #0]
 800dabe:	702b      	strb	r3, [r5, #0]
 800dac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dac2:	3001      	adds	r0, #1
 800dac4:	6018      	str	r0, [r3, #0]
 800dac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f43f acf1 	beq.w	800d4b0 <_dtoa_r+0xa0>
 800dace:	601d      	str	r5, [r3, #0]
 800dad0:	e4ee      	b.n	800d4b0 <_dtoa_r+0xa0>
 800dad2:	9f00      	ldr	r7, [sp, #0]
 800dad4:	462b      	mov	r3, r5
 800dad6:	461d      	mov	r5, r3
 800dad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dadc:	2a39      	cmp	r2, #57	; 0x39
 800dade:	d106      	bne.n	800daee <_dtoa_r+0x6de>
 800dae0:	9a01      	ldr	r2, [sp, #4]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d1f7      	bne.n	800dad6 <_dtoa_r+0x6c6>
 800dae6:	9901      	ldr	r1, [sp, #4]
 800dae8:	2230      	movs	r2, #48	; 0x30
 800daea:	3701      	adds	r7, #1
 800daec:	700a      	strb	r2, [r1, #0]
 800daee:	781a      	ldrb	r2, [r3, #0]
 800daf0:	3201      	adds	r2, #1
 800daf2:	701a      	strb	r2, [r3, #0]
 800daf4:	e790      	b.n	800da18 <_dtoa_r+0x608>
 800daf6:	4ba6      	ldr	r3, [pc, #664]	; (800dd90 <_dtoa_r+0x980>)
 800daf8:	2200      	movs	r2, #0
 800dafa:	f7f2 fd8d 	bl	8000618 <__aeabi_dmul>
 800dafe:	2200      	movs	r2, #0
 800db00:	2300      	movs	r3, #0
 800db02:	4606      	mov	r6, r0
 800db04:	460f      	mov	r7, r1
 800db06:	f7f2 ffef 	bl	8000ae8 <__aeabi_dcmpeq>
 800db0a:	2800      	cmp	r0, #0
 800db0c:	d09d      	beq.n	800da4a <_dtoa_r+0x63a>
 800db0e:	e7cf      	b.n	800dab0 <_dtoa_r+0x6a0>
 800db10:	9a08      	ldr	r2, [sp, #32]
 800db12:	2a00      	cmp	r2, #0
 800db14:	f000 80d7 	beq.w	800dcc6 <_dtoa_r+0x8b6>
 800db18:	9a06      	ldr	r2, [sp, #24]
 800db1a:	2a01      	cmp	r2, #1
 800db1c:	f300 80ba 	bgt.w	800dc94 <_dtoa_r+0x884>
 800db20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db22:	2a00      	cmp	r2, #0
 800db24:	f000 80b2 	beq.w	800dc8c <_dtoa_r+0x87c>
 800db28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800db2c:	9e07      	ldr	r6, [sp, #28]
 800db2e:	9d04      	ldr	r5, [sp, #16]
 800db30:	9a04      	ldr	r2, [sp, #16]
 800db32:	441a      	add	r2, r3
 800db34:	9204      	str	r2, [sp, #16]
 800db36:	9a05      	ldr	r2, [sp, #20]
 800db38:	2101      	movs	r1, #1
 800db3a:	441a      	add	r2, r3
 800db3c:	4620      	mov	r0, r4
 800db3e:	9205      	str	r2, [sp, #20]
 800db40:	f001 f982 	bl	800ee48 <__i2b>
 800db44:	4607      	mov	r7, r0
 800db46:	2d00      	cmp	r5, #0
 800db48:	dd0c      	ble.n	800db64 <_dtoa_r+0x754>
 800db4a:	9b05      	ldr	r3, [sp, #20]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	dd09      	ble.n	800db64 <_dtoa_r+0x754>
 800db50:	42ab      	cmp	r3, r5
 800db52:	9a04      	ldr	r2, [sp, #16]
 800db54:	bfa8      	it	ge
 800db56:	462b      	movge	r3, r5
 800db58:	1ad2      	subs	r2, r2, r3
 800db5a:	9204      	str	r2, [sp, #16]
 800db5c:	9a05      	ldr	r2, [sp, #20]
 800db5e:	1aed      	subs	r5, r5, r3
 800db60:	1ad3      	subs	r3, r2, r3
 800db62:	9305      	str	r3, [sp, #20]
 800db64:	9b07      	ldr	r3, [sp, #28]
 800db66:	b31b      	cbz	r3, 800dbb0 <_dtoa_r+0x7a0>
 800db68:	9b08      	ldr	r3, [sp, #32]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	f000 80af 	beq.w	800dcce <_dtoa_r+0x8be>
 800db70:	2e00      	cmp	r6, #0
 800db72:	dd13      	ble.n	800db9c <_dtoa_r+0x78c>
 800db74:	4639      	mov	r1, r7
 800db76:	4632      	mov	r2, r6
 800db78:	4620      	mov	r0, r4
 800db7a:	f001 fa25 	bl	800efc8 <__pow5mult>
 800db7e:	ee18 2a10 	vmov	r2, s16
 800db82:	4601      	mov	r1, r0
 800db84:	4607      	mov	r7, r0
 800db86:	4620      	mov	r0, r4
 800db88:	f001 f974 	bl	800ee74 <__multiply>
 800db8c:	ee18 1a10 	vmov	r1, s16
 800db90:	4680      	mov	r8, r0
 800db92:	4620      	mov	r0, r4
 800db94:	f001 f856 	bl	800ec44 <_Bfree>
 800db98:	ee08 8a10 	vmov	s16, r8
 800db9c:	9b07      	ldr	r3, [sp, #28]
 800db9e:	1b9a      	subs	r2, r3, r6
 800dba0:	d006      	beq.n	800dbb0 <_dtoa_r+0x7a0>
 800dba2:	ee18 1a10 	vmov	r1, s16
 800dba6:	4620      	mov	r0, r4
 800dba8:	f001 fa0e 	bl	800efc8 <__pow5mult>
 800dbac:	ee08 0a10 	vmov	s16, r0
 800dbb0:	2101      	movs	r1, #1
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	f001 f948 	bl	800ee48 <__i2b>
 800dbb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	4606      	mov	r6, r0
 800dbbe:	f340 8088 	ble.w	800dcd2 <_dtoa_r+0x8c2>
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	4601      	mov	r1, r0
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f001 f9fe 	bl	800efc8 <__pow5mult>
 800dbcc:	9b06      	ldr	r3, [sp, #24]
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	4606      	mov	r6, r0
 800dbd2:	f340 8081 	ble.w	800dcd8 <_dtoa_r+0x8c8>
 800dbd6:	f04f 0800 	mov.w	r8, #0
 800dbda:	6933      	ldr	r3, [r6, #16]
 800dbdc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dbe0:	6918      	ldr	r0, [r3, #16]
 800dbe2:	f001 f8e1 	bl	800eda8 <__hi0bits>
 800dbe6:	f1c0 0020 	rsb	r0, r0, #32
 800dbea:	9b05      	ldr	r3, [sp, #20]
 800dbec:	4418      	add	r0, r3
 800dbee:	f010 001f 	ands.w	r0, r0, #31
 800dbf2:	f000 8092 	beq.w	800dd1a <_dtoa_r+0x90a>
 800dbf6:	f1c0 0320 	rsb	r3, r0, #32
 800dbfa:	2b04      	cmp	r3, #4
 800dbfc:	f340 808a 	ble.w	800dd14 <_dtoa_r+0x904>
 800dc00:	f1c0 001c 	rsb	r0, r0, #28
 800dc04:	9b04      	ldr	r3, [sp, #16]
 800dc06:	4403      	add	r3, r0
 800dc08:	9304      	str	r3, [sp, #16]
 800dc0a:	9b05      	ldr	r3, [sp, #20]
 800dc0c:	4403      	add	r3, r0
 800dc0e:	4405      	add	r5, r0
 800dc10:	9305      	str	r3, [sp, #20]
 800dc12:	9b04      	ldr	r3, [sp, #16]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	dd07      	ble.n	800dc28 <_dtoa_r+0x818>
 800dc18:	ee18 1a10 	vmov	r1, s16
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	4620      	mov	r0, r4
 800dc20:	f001 fa2c 	bl	800f07c <__lshift>
 800dc24:	ee08 0a10 	vmov	s16, r0
 800dc28:	9b05      	ldr	r3, [sp, #20]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	dd05      	ble.n	800dc3a <_dtoa_r+0x82a>
 800dc2e:	4631      	mov	r1, r6
 800dc30:	461a      	mov	r2, r3
 800dc32:	4620      	mov	r0, r4
 800dc34:	f001 fa22 	bl	800f07c <__lshift>
 800dc38:	4606      	mov	r6, r0
 800dc3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d06e      	beq.n	800dd1e <_dtoa_r+0x90e>
 800dc40:	ee18 0a10 	vmov	r0, s16
 800dc44:	4631      	mov	r1, r6
 800dc46:	f001 fa89 	bl	800f15c <__mcmp>
 800dc4a:	2800      	cmp	r0, #0
 800dc4c:	da67      	bge.n	800dd1e <_dtoa_r+0x90e>
 800dc4e:	9b00      	ldr	r3, [sp, #0]
 800dc50:	3b01      	subs	r3, #1
 800dc52:	ee18 1a10 	vmov	r1, s16
 800dc56:	9300      	str	r3, [sp, #0]
 800dc58:	220a      	movs	r2, #10
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	f001 f813 	bl	800ec88 <__multadd>
 800dc62:	9b08      	ldr	r3, [sp, #32]
 800dc64:	ee08 0a10 	vmov	s16, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	f000 81b1 	beq.w	800dfd0 <_dtoa_r+0xbc0>
 800dc6e:	2300      	movs	r3, #0
 800dc70:	4639      	mov	r1, r7
 800dc72:	220a      	movs	r2, #10
 800dc74:	4620      	mov	r0, r4
 800dc76:	f001 f807 	bl	800ec88 <__multadd>
 800dc7a:	9b02      	ldr	r3, [sp, #8]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	4607      	mov	r7, r0
 800dc80:	f300 808e 	bgt.w	800dda0 <_dtoa_r+0x990>
 800dc84:	9b06      	ldr	r3, [sp, #24]
 800dc86:	2b02      	cmp	r3, #2
 800dc88:	dc51      	bgt.n	800dd2e <_dtoa_r+0x91e>
 800dc8a:	e089      	b.n	800dda0 <_dtoa_r+0x990>
 800dc8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dc92:	e74b      	b.n	800db2c <_dtoa_r+0x71c>
 800dc94:	9b03      	ldr	r3, [sp, #12]
 800dc96:	1e5e      	subs	r6, r3, #1
 800dc98:	9b07      	ldr	r3, [sp, #28]
 800dc9a:	42b3      	cmp	r3, r6
 800dc9c:	bfbf      	itttt	lt
 800dc9e:	9b07      	ldrlt	r3, [sp, #28]
 800dca0:	9607      	strlt	r6, [sp, #28]
 800dca2:	1af2      	sublt	r2, r6, r3
 800dca4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dca6:	bfb6      	itet	lt
 800dca8:	189b      	addlt	r3, r3, r2
 800dcaa:	1b9e      	subge	r6, r3, r6
 800dcac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dcae:	9b03      	ldr	r3, [sp, #12]
 800dcb0:	bfb8      	it	lt
 800dcb2:	2600      	movlt	r6, #0
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	bfb7      	itett	lt
 800dcb8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dcbc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dcc0:	1a9d      	sublt	r5, r3, r2
 800dcc2:	2300      	movlt	r3, #0
 800dcc4:	e734      	b.n	800db30 <_dtoa_r+0x720>
 800dcc6:	9e07      	ldr	r6, [sp, #28]
 800dcc8:	9d04      	ldr	r5, [sp, #16]
 800dcca:	9f08      	ldr	r7, [sp, #32]
 800dccc:	e73b      	b.n	800db46 <_dtoa_r+0x736>
 800dcce:	9a07      	ldr	r2, [sp, #28]
 800dcd0:	e767      	b.n	800dba2 <_dtoa_r+0x792>
 800dcd2:	9b06      	ldr	r3, [sp, #24]
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	dc18      	bgt.n	800dd0a <_dtoa_r+0x8fa>
 800dcd8:	f1ba 0f00 	cmp.w	sl, #0
 800dcdc:	d115      	bne.n	800dd0a <_dtoa_r+0x8fa>
 800dcde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dce2:	b993      	cbnz	r3, 800dd0a <_dtoa_r+0x8fa>
 800dce4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dce8:	0d1b      	lsrs	r3, r3, #20
 800dcea:	051b      	lsls	r3, r3, #20
 800dcec:	b183      	cbz	r3, 800dd10 <_dtoa_r+0x900>
 800dcee:	9b04      	ldr	r3, [sp, #16]
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	9304      	str	r3, [sp, #16]
 800dcf4:	9b05      	ldr	r3, [sp, #20]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	9305      	str	r3, [sp, #20]
 800dcfa:	f04f 0801 	mov.w	r8, #1
 800dcfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	f47f af6a 	bne.w	800dbda <_dtoa_r+0x7ca>
 800dd06:	2001      	movs	r0, #1
 800dd08:	e76f      	b.n	800dbea <_dtoa_r+0x7da>
 800dd0a:	f04f 0800 	mov.w	r8, #0
 800dd0e:	e7f6      	b.n	800dcfe <_dtoa_r+0x8ee>
 800dd10:	4698      	mov	r8, r3
 800dd12:	e7f4      	b.n	800dcfe <_dtoa_r+0x8ee>
 800dd14:	f43f af7d 	beq.w	800dc12 <_dtoa_r+0x802>
 800dd18:	4618      	mov	r0, r3
 800dd1a:	301c      	adds	r0, #28
 800dd1c:	e772      	b.n	800dc04 <_dtoa_r+0x7f4>
 800dd1e:	9b03      	ldr	r3, [sp, #12]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	dc37      	bgt.n	800dd94 <_dtoa_r+0x984>
 800dd24:	9b06      	ldr	r3, [sp, #24]
 800dd26:	2b02      	cmp	r3, #2
 800dd28:	dd34      	ble.n	800dd94 <_dtoa_r+0x984>
 800dd2a:	9b03      	ldr	r3, [sp, #12]
 800dd2c:	9302      	str	r3, [sp, #8]
 800dd2e:	9b02      	ldr	r3, [sp, #8]
 800dd30:	b96b      	cbnz	r3, 800dd4e <_dtoa_r+0x93e>
 800dd32:	4631      	mov	r1, r6
 800dd34:	2205      	movs	r2, #5
 800dd36:	4620      	mov	r0, r4
 800dd38:	f000 ffa6 	bl	800ec88 <__multadd>
 800dd3c:	4601      	mov	r1, r0
 800dd3e:	4606      	mov	r6, r0
 800dd40:	ee18 0a10 	vmov	r0, s16
 800dd44:	f001 fa0a 	bl	800f15c <__mcmp>
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	f73f adbb 	bgt.w	800d8c4 <_dtoa_r+0x4b4>
 800dd4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd50:	9d01      	ldr	r5, [sp, #4]
 800dd52:	43db      	mvns	r3, r3
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	f04f 0800 	mov.w	r8, #0
 800dd5a:	4631      	mov	r1, r6
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	f000 ff71 	bl	800ec44 <_Bfree>
 800dd62:	2f00      	cmp	r7, #0
 800dd64:	f43f aea4 	beq.w	800dab0 <_dtoa_r+0x6a0>
 800dd68:	f1b8 0f00 	cmp.w	r8, #0
 800dd6c:	d005      	beq.n	800dd7a <_dtoa_r+0x96a>
 800dd6e:	45b8      	cmp	r8, r7
 800dd70:	d003      	beq.n	800dd7a <_dtoa_r+0x96a>
 800dd72:	4641      	mov	r1, r8
 800dd74:	4620      	mov	r0, r4
 800dd76:	f000 ff65 	bl	800ec44 <_Bfree>
 800dd7a:	4639      	mov	r1, r7
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	f000 ff61 	bl	800ec44 <_Bfree>
 800dd82:	e695      	b.n	800dab0 <_dtoa_r+0x6a0>
 800dd84:	2600      	movs	r6, #0
 800dd86:	4637      	mov	r7, r6
 800dd88:	e7e1      	b.n	800dd4e <_dtoa_r+0x93e>
 800dd8a:	9700      	str	r7, [sp, #0]
 800dd8c:	4637      	mov	r7, r6
 800dd8e:	e599      	b.n	800d8c4 <_dtoa_r+0x4b4>
 800dd90:	40240000 	.word	0x40240000
 800dd94:	9b08      	ldr	r3, [sp, #32]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	f000 80ca 	beq.w	800df30 <_dtoa_r+0xb20>
 800dd9c:	9b03      	ldr	r3, [sp, #12]
 800dd9e:	9302      	str	r3, [sp, #8]
 800dda0:	2d00      	cmp	r5, #0
 800dda2:	dd05      	ble.n	800ddb0 <_dtoa_r+0x9a0>
 800dda4:	4639      	mov	r1, r7
 800dda6:	462a      	mov	r2, r5
 800dda8:	4620      	mov	r0, r4
 800ddaa:	f001 f967 	bl	800f07c <__lshift>
 800ddae:	4607      	mov	r7, r0
 800ddb0:	f1b8 0f00 	cmp.w	r8, #0
 800ddb4:	d05b      	beq.n	800de6e <_dtoa_r+0xa5e>
 800ddb6:	6879      	ldr	r1, [r7, #4]
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f000 ff03 	bl	800ebc4 <_Balloc>
 800ddbe:	4605      	mov	r5, r0
 800ddc0:	b928      	cbnz	r0, 800ddce <_dtoa_r+0x9be>
 800ddc2:	4b87      	ldr	r3, [pc, #540]	; (800dfe0 <_dtoa_r+0xbd0>)
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ddca:	f7ff bb3b 	b.w	800d444 <_dtoa_r+0x34>
 800ddce:	693a      	ldr	r2, [r7, #16]
 800ddd0:	3202      	adds	r2, #2
 800ddd2:	0092      	lsls	r2, r2, #2
 800ddd4:	f107 010c 	add.w	r1, r7, #12
 800ddd8:	300c      	adds	r0, #12
 800ddda:	f000 febf 	bl	800eb5c <memcpy>
 800ddde:	2201      	movs	r2, #1
 800dde0:	4629      	mov	r1, r5
 800dde2:	4620      	mov	r0, r4
 800dde4:	f001 f94a 	bl	800f07c <__lshift>
 800dde8:	9b01      	ldr	r3, [sp, #4]
 800ddea:	f103 0901 	add.w	r9, r3, #1
 800ddee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	9305      	str	r3, [sp, #20]
 800ddf6:	f00a 0301 	and.w	r3, sl, #1
 800ddfa:	46b8      	mov	r8, r7
 800ddfc:	9304      	str	r3, [sp, #16]
 800ddfe:	4607      	mov	r7, r0
 800de00:	4631      	mov	r1, r6
 800de02:	ee18 0a10 	vmov	r0, s16
 800de06:	f7ff fa75 	bl	800d2f4 <quorem>
 800de0a:	4641      	mov	r1, r8
 800de0c:	9002      	str	r0, [sp, #8]
 800de0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800de12:	ee18 0a10 	vmov	r0, s16
 800de16:	f001 f9a1 	bl	800f15c <__mcmp>
 800de1a:	463a      	mov	r2, r7
 800de1c:	9003      	str	r0, [sp, #12]
 800de1e:	4631      	mov	r1, r6
 800de20:	4620      	mov	r0, r4
 800de22:	f001 f9b7 	bl	800f194 <__mdiff>
 800de26:	68c2      	ldr	r2, [r0, #12]
 800de28:	f109 3bff 	add.w	fp, r9, #4294967295
 800de2c:	4605      	mov	r5, r0
 800de2e:	bb02      	cbnz	r2, 800de72 <_dtoa_r+0xa62>
 800de30:	4601      	mov	r1, r0
 800de32:	ee18 0a10 	vmov	r0, s16
 800de36:	f001 f991 	bl	800f15c <__mcmp>
 800de3a:	4602      	mov	r2, r0
 800de3c:	4629      	mov	r1, r5
 800de3e:	4620      	mov	r0, r4
 800de40:	9207      	str	r2, [sp, #28]
 800de42:	f000 feff 	bl	800ec44 <_Bfree>
 800de46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800de4a:	ea43 0102 	orr.w	r1, r3, r2
 800de4e:	9b04      	ldr	r3, [sp, #16]
 800de50:	430b      	orrs	r3, r1
 800de52:	464d      	mov	r5, r9
 800de54:	d10f      	bne.n	800de76 <_dtoa_r+0xa66>
 800de56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800de5a:	d02a      	beq.n	800deb2 <_dtoa_r+0xaa2>
 800de5c:	9b03      	ldr	r3, [sp, #12]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	dd02      	ble.n	800de68 <_dtoa_r+0xa58>
 800de62:	9b02      	ldr	r3, [sp, #8]
 800de64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800de68:	f88b a000 	strb.w	sl, [fp]
 800de6c:	e775      	b.n	800dd5a <_dtoa_r+0x94a>
 800de6e:	4638      	mov	r0, r7
 800de70:	e7ba      	b.n	800dde8 <_dtoa_r+0x9d8>
 800de72:	2201      	movs	r2, #1
 800de74:	e7e2      	b.n	800de3c <_dtoa_r+0xa2c>
 800de76:	9b03      	ldr	r3, [sp, #12]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	db04      	blt.n	800de86 <_dtoa_r+0xa76>
 800de7c:	9906      	ldr	r1, [sp, #24]
 800de7e:	430b      	orrs	r3, r1
 800de80:	9904      	ldr	r1, [sp, #16]
 800de82:	430b      	orrs	r3, r1
 800de84:	d122      	bne.n	800decc <_dtoa_r+0xabc>
 800de86:	2a00      	cmp	r2, #0
 800de88:	ddee      	ble.n	800de68 <_dtoa_r+0xa58>
 800de8a:	ee18 1a10 	vmov	r1, s16
 800de8e:	2201      	movs	r2, #1
 800de90:	4620      	mov	r0, r4
 800de92:	f001 f8f3 	bl	800f07c <__lshift>
 800de96:	4631      	mov	r1, r6
 800de98:	ee08 0a10 	vmov	s16, r0
 800de9c:	f001 f95e 	bl	800f15c <__mcmp>
 800dea0:	2800      	cmp	r0, #0
 800dea2:	dc03      	bgt.n	800deac <_dtoa_r+0xa9c>
 800dea4:	d1e0      	bne.n	800de68 <_dtoa_r+0xa58>
 800dea6:	f01a 0f01 	tst.w	sl, #1
 800deaa:	d0dd      	beq.n	800de68 <_dtoa_r+0xa58>
 800deac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800deb0:	d1d7      	bne.n	800de62 <_dtoa_r+0xa52>
 800deb2:	2339      	movs	r3, #57	; 0x39
 800deb4:	f88b 3000 	strb.w	r3, [fp]
 800deb8:	462b      	mov	r3, r5
 800deba:	461d      	mov	r5, r3
 800debc:	3b01      	subs	r3, #1
 800debe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dec2:	2a39      	cmp	r2, #57	; 0x39
 800dec4:	d071      	beq.n	800dfaa <_dtoa_r+0xb9a>
 800dec6:	3201      	adds	r2, #1
 800dec8:	701a      	strb	r2, [r3, #0]
 800deca:	e746      	b.n	800dd5a <_dtoa_r+0x94a>
 800decc:	2a00      	cmp	r2, #0
 800dece:	dd07      	ble.n	800dee0 <_dtoa_r+0xad0>
 800ded0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ded4:	d0ed      	beq.n	800deb2 <_dtoa_r+0xaa2>
 800ded6:	f10a 0301 	add.w	r3, sl, #1
 800deda:	f88b 3000 	strb.w	r3, [fp]
 800dede:	e73c      	b.n	800dd5a <_dtoa_r+0x94a>
 800dee0:	9b05      	ldr	r3, [sp, #20]
 800dee2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dee6:	4599      	cmp	r9, r3
 800dee8:	d047      	beq.n	800df7a <_dtoa_r+0xb6a>
 800deea:	ee18 1a10 	vmov	r1, s16
 800deee:	2300      	movs	r3, #0
 800def0:	220a      	movs	r2, #10
 800def2:	4620      	mov	r0, r4
 800def4:	f000 fec8 	bl	800ec88 <__multadd>
 800def8:	45b8      	cmp	r8, r7
 800defa:	ee08 0a10 	vmov	s16, r0
 800defe:	f04f 0300 	mov.w	r3, #0
 800df02:	f04f 020a 	mov.w	r2, #10
 800df06:	4641      	mov	r1, r8
 800df08:	4620      	mov	r0, r4
 800df0a:	d106      	bne.n	800df1a <_dtoa_r+0xb0a>
 800df0c:	f000 febc 	bl	800ec88 <__multadd>
 800df10:	4680      	mov	r8, r0
 800df12:	4607      	mov	r7, r0
 800df14:	f109 0901 	add.w	r9, r9, #1
 800df18:	e772      	b.n	800de00 <_dtoa_r+0x9f0>
 800df1a:	f000 feb5 	bl	800ec88 <__multadd>
 800df1e:	4639      	mov	r1, r7
 800df20:	4680      	mov	r8, r0
 800df22:	2300      	movs	r3, #0
 800df24:	220a      	movs	r2, #10
 800df26:	4620      	mov	r0, r4
 800df28:	f000 feae 	bl	800ec88 <__multadd>
 800df2c:	4607      	mov	r7, r0
 800df2e:	e7f1      	b.n	800df14 <_dtoa_r+0xb04>
 800df30:	9b03      	ldr	r3, [sp, #12]
 800df32:	9302      	str	r3, [sp, #8]
 800df34:	9d01      	ldr	r5, [sp, #4]
 800df36:	ee18 0a10 	vmov	r0, s16
 800df3a:	4631      	mov	r1, r6
 800df3c:	f7ff f9da 	bl	800d2f4 <quorem>
 800df40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800df44:	9b01      	ldr	r3, [sp, #4]
 800df46:	f805 ab01 	strb.w	sl, [r5], #1
 800df4a:	1aea      	subs	r2, r5, r3
 800df4c:	9b02      	ldr	r3, [sp, #8]
 800df4e:	4293      	cmp	r3, r2
 800df50:	dd09      	ble.n	800df66 <_dtoa_r+0xb56>
 800df52:	ee18 1a10 	vmov	r1, s16
 800df56:	2300      	movs	r3, #0
 800df58:	220a      	movs	r2, #10
 800df5a:	4620      	mov	r0, r4
 800df5c:	f000 fe94 	bl	800ec88 <__multadd>
 800df60:	ee08 0a10 	vmov	s16, r0
 800df64:	e7e7      	b.n	800df36 <_dtoa_r+0xb26>
 800df66:	9b02      	ldr	r3, [sp, #8]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	bfc8      	it	gt
 800df6c:	461d      	movgt	r5, r3
 800df6e:	9b01      	ldr	r3, [sp, #4]
 800df70:	bfd8      	it	le
 800df72:	2501      	movle	r5, #1
 800df74:	441d      	add	r5, r3
 800df76:	f04f 0800 	mov.w	r8, #0
 800df7a:	ee18 1a10 	vmov	r1, s16
 800df7e:	2201      	movs	r2, #1
 800df80:	4620      	mov	r0, r4
 800df82:	f001 f87b 	bl	800f07c <__lshift>
 800df86:	4631      	mov	r1, r6
 800df88:	ee08 0a10 	vmov	s16, r0
 800df8c:	f001 f8e6 	bl	800f15c <__mcmp>
 800df90:	2800      	cmp	r0, #0
 800df92:	dc91      	bgt.n	800deb8 <_dtoa_r+0xaa8>
 800df94:	d102      	bne.n	800df9c <_dtoa_r+0xb8c>
 800df96:	f01a 0f01 	tst.w	sl, #1
 800df9a:	d18d      	bne.n	800deb8 <_dtoa_r+0xaa8>
 800df9c:	462b      	mov	r3, r5
 800df9e:	461d      	mov	r5, r3
 800dfa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfa4:	2a30      	cmp	r2, #48	; 0x30
 800dfa6:	d0fa      	beq.n	800df9e <_dtoa_r+0xb8e>
 800dfa8:	e6d7      	b.n	800dd5a <_dtoa_r+0x94a>
 800dfaa:	9a01      	ldr	r2, [sp, #4]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d184      	bne.n	800deba <_dtoa_r+0xaaa>
 800dfb0:	9b00      	ldr	r3, [sp, #0]
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	9300      	str	r3, [sp, #0]
 800dfb6:	2331      	movs	r3, #49	; 0x31
 800dfb8:	7013      	strb	r3, [r2, #0]
 800dfba:	e6ce      	b.n	800dd5a <_dtoa_r+0x94a>
 800dfbc:	4b09      	ldr	r3, [pc, #36]	; (800dfe4 <_dtoa_r+0xbd4>)
 800dfbe:	f7ff ba95 	b.w	800d4ec <_dtoa_r+0xdc>
 800dfc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	f47f aa6e 	bne.w	800d4a6 <_dtoa_r+0x96>
 800dfca:	4b07      	ldr	r3, [pc, #28]	; (800dfe8 <_dtoa_r+0xbd8>)
 800dfcc:	f7ff ba8e 	b.w	800d4ec <_dtoa_r+0xdc>
 800dfd0:	9b02      	ldr	r3, [sp, #8]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	dcae      	bgt.n	800df34 <_dtoa_r+0xb24>
 800dfd6:	9b06      	ldr	r3, [sp, #24]
 800dfd8:	2b02      	cmp	r3, #2
 800dfda:	f73f aea8 	bgt.w	800dd2e <_dtoa_r+0x91e>
 800dfde:	e7a9      	b.n	800df34 <_dtoa_r+0xb24>
 800dfe0:	0801078d 	.word	0x0801078d
 800dfe4:	080109d8 	.word	0x080109d8
 800dfe8:	08010725 	.word	0x08010725

0800dfec <__sflush_r>:
 800dfec:	898a      	ldrh	r2, [r1, #12]
 800dfee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff2:	4605      	mov	r5, r0
 800dff4:	0710      	lsls	r0, r2, #28
 800dff6:	460c      	mov	r4, r1
 800dff8:	d458      	bmi.n	800e0ac <__sflush_r+0xc0>
 800dffa:	684b      	ldr	r3, [r1, #4]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	dc05      	bgt.n	800e00c <__sflush_r+0x20>
 800e000:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e002:	2b00      	cmp	r3, #0
 800e004:	dc02      	bgt.n	800e00c <__sflush_r+0x20>
 800e006:	2000      	movs	r0, #0
 800e008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e00c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e00e:	2e00      	cmp	r6, #0
 800e010:	d0f9      	beq.n	800e006 <__sflush_r+0x1a>
 800e012:	2300      	movs	r3, #0
 800e014:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e018:	682f      	ldr	r7, [r5, #0]
 800e01a:	602b      	str	r3, [r5, #0]
 800e01c:	d032      	beq.n	800e084 <__sflush_r+0x98>
 800e01e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e020:	89a3      	ldrh	r3, [r4, #12]
 800e022:	075a      	lsls	r2, r3, #29
 800e024:	d505      	bpl.n	800e032 <__sflush_r+0x46>
 800e026:	6863      	ldr	r3, [r4, #4]
 800e028:	1ac0      	subs	r0, r0, r3
 800e02a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e02c:	b10b      	cbz	r3, 800e032 <__sflush_r+0x46>
 800e02e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e030:	1ac0      	subs	r0, r0, r3
 800e032:	2300      	movs	r3, #0
 800e034:	4602      	mov	r2, r0
 800e036:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e038:	6a21      	ldr	r1, [r4, #32]
 800e03a:	4628      	mov	r0, r5
 800e03c:	47b0      	blx	r6
 800e03e:	1c43      	adds	r3, r0, #1
 800e040:	89a3      	ldrh	r3, [r4, #12]
 800e042:	d106      	bne.n	800e052 <__sflush_r+0x66>
 800e044:	6829      	ldr	r1, [r5, #0]
 800e046:	291d      	cmp	r1, #29
 800e048:	d82c      	bhi.n	800e0a4 <__sflush_r+0xb8>
 800e04a:	4a2a      	ldr	r2, [pc, #168]	; (800e0f4 <__sflush_r+0x108>)
 800e04c:	40ca      	lsrs	r2, r1
 800e04e:	07d6      	lsls	r6, r2, #31
 800e050:	d528      	bpl.n	800e0a4 <__sflush_r+0xb8>
 800e052:	2200      	movs	r2, #0
 800e054:	6062      	str	r2, [r4, #4]
 800e056:	04d9      	lsls	r1, r3, #19
 800e058:	6922      	ldr	r2, [r4, #16]
 800e05a:	6022      	str	r2, [r4, #0]
 800e05c:	d504      	bpl.n	800e068 <__sflush_r+0x7c>
 800e05e:	1c42      	adds	r2, r0, #1
 800e060:	d101      	bne.n	800e066 <__sflush_r+0x7a>
 800e062:	682b      	ldr	r3, [r5, #0]
 800e064:	b903      	cbnz	r3, 800e068 <__sflush_r+0x7c>
 800e066:	6560      	str	r0, [r4, #84]	; 0x54
 800e068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e06a:	602f      	str	r7, [r5, #0]
 800e06c:	2900      	cmp	r1, #0
 800e06e:	d0ca      	beq.n	800e006 <__sflush_r+0x1a>
 800e070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e074:	4299      	cmp	r1, r3
 800e076:	d002      	beq.n	800e07e <__sflush_r+0x92>
 800e078:	4628      	mov	r0, r5
 800e07a:	f7fc ffb9 	bl	800aff0 <_free_r>
 800e07e:	2000      	movs	r0, #0
 800e080:	6360      	str	r0, [r4, #52]	; 0x34
 800e082:	e7c1      	b.n	800e008 <__sflush_r+0x1c>
 800e084:	6a21      	ldr	r1, [r4, #32]
 800e086:	2301      	movs	r3, #1
 800e088:	4628      	mov	r0, r5
 800e08a:	47b0      	blx	r6
 800e08c:	1c41      	adds	r1, r0, #1
 800e08e:	d1c7      	bne.n	800e020 <__sflush_r+0x34>
 800e090:	682b      	ldr	r3, [r5, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d0c4      	beq.n	800e020 <__sflush_r+0x34>
 800e096:	2b1d      	cmp	r3, #29
 800e098:	d001      	beq.n	800e09e <__sflush_r+0xb2>
 800e09a:	2b16      	cmp	r3, #22
 800e09c:	d101      	bne.n	800e0a2 <__sflush_r+0xb6>
 800e09e:	602f      	str	r7, [r5, #0]
 800e0a0:	e7b1      	b.n	800e006 <__sflush_r+0x1a>
 800e0a2:	89a3      	ldrh	r3, [r4, #12]
 800e0a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0a8:	81a3      	strh	r3, [r4, #12]
 800e0aa:	e7ad      	b.n	800e008 <__sflush_r+0x1c>
 800e0ac:	690f      	ldr	r7, [r1, #16]
 800e0ae:	2f00      	cmp	r7, #0
 800e0b0:	d0a9      	beq.n	800e006 <__sflush_r+0x1a>
 800e0b2:	0793      	lsls	r3, r2, #30
 800e0b4:	680e      	ldr	r6, [r1, #0]
 800e0b6:	bf08      	it	eq
 800e0b8:	694b      	ldreq	r3, [r1, #20]
 800e0ba:	600f      	str	r7, [r1, #0]
 800e0bc:	bf18      	it	ne
 800e0be:	2300      	movne	r3, #0
 800e0c0:	eba6 0807 	sub.w	r8, r6, r7
 800e0c4:	608b      	str	r3, [r1, #8]
 800e0c6:	f1b8 0f00 	cmp.w	r8, #0
 800e0ca:	dd9c      	ble.n	800e006 <__sflush_r+0x1a>
 800e0cc:	6a21      	ldr	r1, [r4, #32]
 800e0ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e0d0:	4643      	mov	r3, r8
 800e0d2:	463a      	mov	r2, r7
 800e0d4:	4628      	mov	r0, r5
 800e0d6:	47b0      	blx	r6
 800e0d8:	2800      	cmp	r0, #0
 800e0da:	dc06      	bgt.n	800e0ea <__sflush_r+0xfe>
 800e0dc:	89a3      	ldrh	r3, [r4, #12]
 800e0de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0e2:	81a3      	strh	r3, [r4, #12]
 800e0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0e8:	e78e      	b.n	800e008 <__sflush_r+0x1c>
 800e0ea:	4407      	add	r7, r0
 800e0ec:	eba8 0800 	sub.w	r8, r8, r0
 800e0f0:	e7e9      	b.n	800e0c6 <__sflush_r+0xda>
 800e0f2:	bf00      	nop
 800e0f4:	20400001 	.word	0x20400001

0800e0f8 <_fflush_r>:
 800e0f8:	b538      	push	{r3, r4, r5, lr}
 800e0fa:	690b      	ldr	r3, [r1, #16]
 800e0fc:	4605      	mov	r5, r0
 800e0fe:	460c      	mov	r4, r1
 800e100:	b913      	cbnz	r3, 800e108 <_fflush_r+0x10>
 800e102:	2500      	movs	r5, #0
 800e104:	4628      	mov	r0, r5
 800e106:	bd38      	pop	{r3, r4, r5, pc}
 800e108:	b118      	cbz	r0, 800e112 <_fflush_r+0x1a>
 800e10a:	6983      	ldr	r3, [r0, #24]
 800e10c:	b90b      	cbnz	r3, 800e112 <_fflush_r+0x1a>
 800e10e:	f000 f887 	bl	800e220 <__sinit>
 800e112:	4b14      	ldr	r3, [pc, #80]	; (800e164 <_fflush_r+0x6c>)
 800e114:	429c      	cmp	r4, r3
 800e116:	d11b      	bne.n	800e150 <_fflush_r+0x58>
 800e118:	686c      	ldr	r4, [r5, #4]
 800e11a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d0ef      	beq.n	800e102 <_fflush_r+0xa>
 800e122:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e124:	07d0      	lsls	r0, r2, #31
 800e126:	d404      	bmi.n	800e132 <_fflush_r+0x3a>
 800e128:	0599      	lsls	r1, r3, #22
 800e12a:	d402      	bmi.n	800e132 <_fflush_r+0x3a>
 800e12c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e12e:	f000 fc88 	bl	800ea42 <__retarget_lock_acquire_recursive>
 800e132:	4628      	mov	r0, r5
 800e134:	4621      	mov	r1, r4
 800e136:	f7ff ff59 	bl	800dfec <__sflush_r>
 800e13a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e13c:	07da      	lsls	r2, r3, #31
 800e13e:	4605      	mov	r5, r0
 800e140:	d4e0      	bmi.n	800e104 <_fflush_r+0xc>
 800e142:	89a3      	ldrh	r3, [r4, #12]
 800e144:	059b      	lsls	r3, r3, #22
 800e146:	d4dd      	bmi.n	800e104 <_fflush_r+0xc>
 800e148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e14a:	f000 fc7b 	bl	800ea44 <__retarget_lock_release_recursive>
 800e14e:	e7d9      	b.n	800e104 <_fflush_r+0xc>
 800e150:	4b05      	ldr	r3, [pc, #20]	; (800e168 <_fflush_r+0x70>)
 800e152:	429c      	cmp	r4, r3
 800e154:	d101      	bne.n	800e15a <_fflush_r+0x62>
 800e156:	68ac      	ldr	r4, [r5, #8]
 800e158:	e7df      	b.n	800e11a <_fflush_r+0x22>
 800e15a:	4b04      	ldr	r3, [pc, #16]	; (800e16c <_fflush_r+0x74>)
 800e15c:	429c      	cmp	r4, r3
 800e15e:	bf08      	it	eq
 800e160:	68ec      	ldreq	r4, [r5, #12]
 800e162:	e7da      	b.n	800e11a <_fflush_r+0x22>
 800e164:	080107c0 	.word	0x080107c0
 800e168:	080107e0 	.word	0x080107e0
 800e16c:	080107a0 	.word	0x080107a0

0800e170 <std>:
 800e170:	2300      	movs	r3, #0
 800e172:	b510      	push	{r4, lr}
 800e174:	4604      	mov	r4, r0
 800e176:	e9c0 3300 	strd	r3, r3, [r0]
 800e17a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e17e:	6083      	str	r3, [r0, #8]
 800e180:	8181      	strh	r1, [r0, #12]
 800e182:	6643      	str	r3, [r0, #100]	; 0x64
 800e184:	81c2      	strh	r2, [r0, #14]
 800e186:	6183      	str	r3, [r0, #24]
 800e188:	4619      	mov	r1, r3
 800e18a:	2208      	movs	r2, #8
 800e18c:	305c      	adds	r0, #92	; 0x5c
 800e18e:	f7fc ff27 	bl	800afe0 <memset>
 800e192:	4b05      	ldr	r3, [pc, #20]	; (800e1a8 <std+0x38>)
 800e194:	6263      	str	r3, [r4, #36]	; 0x24
 800e196:	4b05      	ldr	r3, [pc, #20]	; (800e1ac <std+0x3c>)
 800e198:	62a3      	str	r3, [r4, #40]	; 0x28
 800e19a:	4b05      	ldr	r3, [pc, #20]	; (800e1b0 <std+0x40>)
 800e19c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e19e:	4b05      	ldr	r3, [pc, #20]	; (800e1b4 <std+0x44>)
 800e1a0:	6224      	str	r4, [r4, #32]
 800e1a2:	6323      	str	r3, [r4, #48]	; 0x30
 800e1a4:	bd10      	pop	{r4, pc}
 800e1a6:	bf00      	nop
 800e1a8:	0800c249 	.word	0x0800c249
 800e1ac:	0800c26f 	.word	0x0800c26f
 800e1b0:	0800c2a7 	.word	0x0800c2a7
 800e1b4:	0800c2cb 	.word	0x0800c2cb

0800e1b8 <_cleanup_r>:
 800e1b8:	4901      	ldr	r1, [pc, #4]	; (800e1c0 <_cleanup_r+0x8>)
 800e1ba:	f000 b8af 	b.w	800e31c <_fwalk_reent>
 800e1be:	bf00      	nop
 800e1c0:	0800e0f9 	.word	0x0800e0f9

0800e1c4 <__sfmoreglue>:
 800e1c4:	b570      	push	{r4, r5, r6, lr}
 800e1c6:	2268      	movs	r2, #104	; 0x68
 800e1c8:	1e4d      	subs	r5, r1, #1
 800e1ca:	4355      	muls	r5, r2
 800e1cc:	460e      	mov	r6, r1
 800e1ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e1d2:	f7fc ff79 	bl	800b0c8 <_malloc_r>
 800e1d6:	4604      	mov	r4, r0
 800e1d8:	b140      	cbz	r0, 800e1ec <__sfmoreglue+0x28>
 800e1da:	2100      	movs	r1, #0
 800e1dc:	e9c0 1600 	strd	r1, r6, [r0]
 800e1e0:	300c      	adds	r0, #12
 800e1e2:	60a0      	str	r0, [r4, #8]
 800e1e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e1e8:	f7fc fefa 	bl	800afe0 <memset>
 800e1ec:	4620      	mov	r0, r4
 800e1ee:	bd70      	pop	{r4, r5, r6, pc}

0800e1f0 <__sfp_lock_acquire>:
 800e1f0:	4801      	ldr	r0, [pc, #4]	; (800e1f8 <__sfp_lock_acquire+0x8>)
 800e1f2:	f000 bc26 	b.w	800ea42 <__retarget_lock_acquire_recursive>
 800e1f6:	bf00      	nop
 800e1f8:	2000212d 	.word	0x2000212d

0800e1fc <__sfp_lock_release>:
 800e1fc:	4801      	ldr	r0, [pc, #4]	; (800e204 <__sfp_lock_release+0x8>)
 800e1fe:	f000 bc21 	b.w	800ea44 <__retarget_lock_release_recursive>
 800e202:	bf00      	nop
 800e204:	2000212d 	.word	0x2000212d

0800e208 <__sinit_lock_acquire>:
 800e208:	4801      	ldr	r0, [pc, #4]	; (800e210 <__sinit_lock_acquire+0x8>)
 800e20a:	f000 bc1a 	b.w	800ea42 <__retarget_lock_acquire_recursive>
 800e20e:	bf00      	nop
 800e210:	2000212e 	.word	0x2000212e

0800e214 <__sinit_lock_release>:
 800e214:	4801      	ldr	r0, [pc, #4]	; (800e21c <__sinit_lock_release+0x8>)
 800e216:	f000 bc15 	b.w	800ea44 <__retarget_lock_release_recursive>
 800e21a:	bf00      	nop
 800e21c:	2000212e 	.word	0x2000212e

0800e220 <__sinit>:
 800e220:	b510      	push	{r4, lr}
 800e222:	4604      	mov	r4, r0
 800e224:	f7ff fff0 	bl	800e208 <__sinit_lock_acquire>
 800e228:	69a3      	ldr	r3, [r4, #24]
 800e22a:	b11b      	cbz	r3, 800e234 <__sinit+0x14>
 800e22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e230:	f7ff bff0 	b.w	800e214 <__sinit_lock_release>
 800e234:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e238:	6523      	str	r3, [r4, #80]	; 0x50
 800e23a:	4b13      	ldr	r3, [pc, #76]	; (800e288 <__sinit+0x68>)
 800e23c:	4a13      	ldr	r2, [pc, #76]	; (800e28c <__sinit+0x6c>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	62a2      	str	r2, [r4, #40]	; 0x28
 800e242:	42a3      	cmp	r3, r4
 800e244:	bf04      	itt	eq
 800e246:	2301      	moveq	r3, #1
 800e248:	61a3      	streq	r3, [r4, #24]
 800e24a:	4620      	mov	r0, r4
 800e24c:	f000 f820 	bl	800e290 <__sfp>
 800e250:	6060      	str	r0, [r4, #4]
 800e252:	4620      	mov	r0, r4
 800e254:	f000 f81c 	bl	800e290 <__sfp>
 800e258:	60a0      	str	r0, [r4, #8]
 800e25a:	4620      	mov	r0, r4
 800e25c:	f000 f818 	bl	800e290 <__sfp>
 800e260:	2200      	movs	r2, #0
 800e262:	60e0      	str	r0, [r4, #12]
 800e264:	2104      	movs	r1, #4
 800e266:	6860      	ldr	r0, [r4, #4]
 800e268:	f7ff ff82 	bl	800e170 <std>
 800e26c:	68a0      	ldr	r0, [r4, #8]
 800e26e:	2201      	movs	r2, #1
 800e270:	2109      	movs	r1, #9
 800e272:	f7ff ff7d 	bl	800e170 <std>
 800e276:	68e0      	ldr	r0, [r4, #12]
 800e278:	2202      	movs	r2, #2
 800e27a:	2112      	movs	r1, #18
 800e27c:	f7ff ff78 	bl	800e170 <std>
 800e280:	2301      	movs	r3, #1
 800e282:	61a3      	str	r3, [r4, #24]
 800e284:	e7d2      	b.n	800e22c <__sinit+0xc>
 800e286:	bf00      	nop
 800e288:	08010510 	.word	0x08010510
 800e28c:	0800e1b9 	.word	0x0800e1b9

0800e290 <__sfp>:
 800e290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e292:	4607      	mov	r7, r0
 800e294:	f7ff ffac 	bl	800e1f0 <__sfp_lock_acquire>
 800e298:	4b1e      	ldr	r3, [pc, #120]	; (800e314 <__sfp+0x84>)
 800e29a:	681e      	ldr	r6, [r3, #0]
 800e29c:	69b3      	ldr	r3, [r6, #24]
 800e29e:	b913      	cbnz	r3, 800e2a6 <__sfp+0x16>
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	f7ff ffbd 	bl	800e220 <__sinit>
 800e2a6:	3648      	adds	r6, #72	; 0x48
 800e2a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e2ac:	3b01      	subs	r3, #1
 800e2ae:	d503      	bpl.n	800e2b8 <__sfp+0x28>
 800e2b0:	6833      	ldr	r3, [r6, #0]
 800e2b2:	b30b      	cbz	r3, 800e2f8 <__sfp+0x68>
 800e2b4:	6836      	ldr	r6, [r6, #0]
 800e2b6:	e7f7      	b.n	800e2a8 <__sfp+0x18>
 800e2b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e2bc:	b9d5      	cbnz	r5, 800e2f4 <__sfp+0x64>
 800e2be:	4b16      	ldr	r3, [pc, #88]	; (800e318 <__sfp+0x88>)
 800e2c0:	60e3      	str	r3, [r4, #12]
 800e2c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e2c6:	6665      	str	r5, [r4, #100]	; 0x64
 800e2c8:	f000 fbba 	bl	800ea40 <__retarget_lock_init_recursive>
 800e2cc:	f7ff ff96 	bl	800e1fc <__sfp_lock_release>
 800e2d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e2d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e2d8:	6025      	str	r5, [r4, #0]
 800e2da:	61a5      	str	r5, [r4, #24]
 800e2dc:	2208      	movs	r2, #8
 800e2de:	4629      	mov	r1, r5
 800e2e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e2e4:	f7fc fe7c 	bl	800afe0 <memset>
 800e2e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e2ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2f4:	3468      	adds	r4, #104	; 0x68
 800e2f6:	e7d9      	b.n	800e2ac <__sfp+0x1c>
 800e2f8:	2104      	movs	r1, #4
 800e2fa:	4638      	mov	r0, r7
 800e2fc:	f7ff ff62 	bl	800e1c4 <__sfmoreglue>
 800e300:	4604      	mov	r4, r0
 800e302:	6030      	str	r0, [r6, #0]
 800e304:	2800      	cmp	r0, #0
 800e306:	d1d5      	bne.n	800e2b4 <__sfp+0x24>
 800e308:	f7ff ff78 	bl	800e1fc <__sfp_lock_release>
 800e30c:	230c      	movs	r3, #12
 800e30e:	603b      	str	r3, [r7, #0]
 800e310:	e7ee      	b.n	800e2f0 <__sfp+0x60>
 800e312:	bf00      	nop
 800e314:	08010510 	.word	0x08010510
 800e318:	ffff0001 	.word	0xffff0001

0800e31c <_fwalk_reent>:
 800e31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e320:	4606      	mov	r6, r0
 800e322:	4688      	mov	r8, r1
 800e324:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e328:	2700      	movs	r7, #0
 800e32a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e32e:	f1b9 0901 	subs.w	r9, r9, #1
 800e332:	d505      	bpl.n	800e340 <_fwalk_reent+0x24>
 800e334:	6824      	ldr	r4, [r4, #0]
 800e336:	2c00      	cmp	r4, #0
 800e338:	d1f7      	bne.n	800e32a <_fwalk_reent+0xe>
 800e33a:	4638      	mov	r0, r7
 800e33c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e340:	89ab      	ldrh	r3, [r5, #12]
 800e342:	2b01      	cmp	r3, #1
 800e344:	d907      	bls.n	800e356 <_fwalk_reent+0x3a>
 800e346:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e34a:	3301      	adds	r3, #1
 800e34c:	d003      	beq.n	800e356 <_fwalk_reent+0x3a>
 800e34e:	4629      	mov	r1, r5
 800e350:	4630      	mov	r0, r6
 800e352:	47c0      	blx	r8
 800e354:	4307      	orrs	r7, r0
 800e356:	3568      	adds	r5, #104	; 0x68
 800e358:	e7e9      	b.n	800e32e <_fwalk_reent+0x12>

0800e35a <rshift>:
 800e35a:	6903      	ldr	r3, [r0, #16]
 800e35c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e364:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e368:	f100 0414 	add.w	r4, r0, #20
 800e36c:	dd45      	ble.n	800e3fa <rshift+0xa0>
 800e36e:	f011 011f 	ands.w	r1, r1, #31
 800e372:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e376:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e37a:	d10c      	bne.n	800e396 <rshift+0x3c>
 800e37c:	f100 0710 	add.w	r7, r0, #16
 800e380:	4629      	mov	r1, r5
 800e382:	42b1      	cmp	r1, r6
 800e384:	d334      	bcc.n	800e3f0 <rshift+0x96>
 800e386:	1a9b      	subs	r3, r3, r2
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	1eea      	subs	r2, r5, #3
 800e38c:	4296      	cmp	r6, r2
 800e38e:	bf38      	it	cc
 800e390:	2300      	movcc	r3, #0
 800e392:	4423      	add	r3, r4
 800e394:	e015      	b.n	800e3c2 <rshift+0x68>
 800e396:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e39a:	f1c1 0820 	rsb	r8, r1, #32
 800e39e:	40cf      	lsrs	r7, r1
 800e3a0:	f105 0e04 	add.w	lr, r5, #4
 800e3a4:	46a1      	mov	r9, r4
 800e3a6:	4576      	cmp	r6, lr
 800e3a8:	46f4      	mov	ip, lr
 800e3aa:	d815      	bhi.n	800e3d8 <rshift+0x7e>
 800e3ac:	1a9a      	subs	r2, r3, r2
 800e3ae:	0092      	lsls	r2, r2, #2
 800e3b0:	3a04      	subs	r2, #4
 800e3b2:	3501      	adds	r5, #1
 800e3b4:	42ae      	cmp	r6, r5
 800e3b6:	bf38      	it	cc
 800e3b8:	2200      	movcc	r2, #0
 800e3ba:	18a3      	adds	r3, r4, r2
 800e3bc:	50a7      	str	r7, [r4, r2]
 800e3be:	b107      	cbz	r7, 800e3c2 <rshift+0x68>
 800e3c0:	3304      	adds	r3, #4
 800e3c2:	1b1a      	subs	r2, r3, r4
 800e3c4:	42a3      	cmp	r3, r4
 800e3c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e3ca:	bf08      	it	eq
 800e3cc:	2300      	moveq	r3, #0
 800e3ce:	6102      	str	r2, [r0, #16]
 800e3d0:	bf08      	it	eq
 800e3d2:	6143      	streq	r3, [r0, #20]
 800e3d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3d8:	f8dc c000 	ldr.w	ip, [ip]
 800e3dc:	fa0c fc08 	lsl.w	ip, ip, r8
 800e3e0:	ea4c 0707 	orr.w	r7, ip, r7
 800e3e4:	f849 7b04 	str.w	r7, [r9], #4
 800e3e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e3ec:	40cf      	lsrs	r7, r1
 800e3ee:	e7da      	b.n	800e3a6 <rshift+0x4c>
 800e3f0:	f851 cb04 	ldr.w	ip, [r1], #4
 800e3f4:	f847 cf04 	str.w	ip, [r7, #4]!
 800e3f8:	e7c3      	b.n	800e382 <rshift+0x28>
 800e3fa:	4623      	mov	r3, r4
 800e3fc:	e7e1      	b.n	800e3c2 <rshift+0x68>

0800e3fe <__hexdig_fun>:
 800e3fe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e402:	2b09      	cmp	r3, #9
 800e404:	d802      	bhi.n	800e40c <__hexdig_fun+0xe>
 800e406:	3820      	subs	r0, #32
 800e408:	b2c0      	uxtb	r0, r0
 800e40a:	4770      	bx	lr
 800e40c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e410:	2b05      	cmp	r3, #5
 800e412:	d801      	bhi.n	800e418 <__hexdig_fun+0x1a>
 800e414:	3847      	subs	r0, #71	; 0x47
 800e416:	e7f7      	b.n	800e408 <__hexdig_fun+0xa>
 800e418:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e41c:	2b05      	cmp	r3, #5
 800e41e:	d801      	bhi.n	800e424 <__hexdig_fun+0x26>
 800e420:	3827      	subs	r0, #39	; 0x27
 800e422:	e7f1      	b.n	800e408 <__hexdig_fun+0xa>
 800e424:	2000      	movs	r0, #0
 800e426:	4770      	bx	lr

0800e428 <__gethex>:
 800e428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e42c:	ed2d 8b02 	vpush	{d8}
 800e430:	b089      	sub	sp, #36	; 0x24
 800e432:	ee08 0a10 	vmov	s16, r0
 800e436:	9304      	str	r3, [sp, #16]
 800e438:	4bb4      	ldr	r3, [pc, #720]	; (800e70c <__gethex+0x2e4>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	9301      	str	r3, [sp, #4]
 800e43e:	4618      	mov	r0, r3
 800e440:	468b      	mov	fp, r1
 800e442:	4690      	mov	r8, r2
 800e444:	f7f1 fece 	bl	80001e4 <strlen>
 800e448:	9b01      	ldr	r3, [sp, #4]
 800e44a:	f8db 2000 	ldr.w	r2, [fp]
 800e44e:	4403      	add	r3, r0
 800e450:	4682      	mov	sl, r0
 800e452:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e456:	9305      	str	r3, [sp, #20]
 800e458:	1c93      	adds	r3, r2, #2
 800e45a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e45e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e462:	32fe      	adds	r2, #254	; 0xfe
 800e464:	18d1      	adds	r1, r2, r3
 800e466:	461f      	mov	r7, r3
 800e468:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e46c:	9100      	str	r1, [sp, #0]
 800e46e:	2830      	cmp	r0, #48	; 0x30
 800e470:	d0f8      	beq.n	800e464 <__gethex+0x3c>
 800e472:	f7ff ffc4 	bl	800e3fe <__hexdig_fun>
 800e476:	4604      	mov	r4, r0
 800e478:	2800      	cmp	r0, #0
 800e47a:	d13a      	bne.n	800e4f2 <__gethex+0xca>
 800e47c:	9901      	ldr	r1, [sp, #4]
 800e47e:	4652      	mov	r2, sl
 800e480:	4638      	mov	r0, r7
 800e482:	f001 fe05 	bl	8010090 <strncmp>
 800e486:	4605      	mov	r5, r0
 800e488:	2800      	cmp	r0, #0
 800e48a:	d168      	bne.n	800e55e <__gethex+0x136>
 800e48c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e490:	eb07 060a 	add.w	r6, r7, sl
 800e494:	f7ff ffb3 	bl	800e3fe <__hexdig_fun>
 800e498:	2800      	cmp	r0, #0
 800e49a:	d062      	beq.n	800e562 <__gethex+0x13a>
 800e49c:	4633      	mov	r3, r6
 800e49e:	7818      	ldrb	r0, [r3, #0]
 800e4a0:	2830      	cmp	r0, #48	; 0x30
 800e4a2:	461f      	mov	r7, r3
 800e4a4:	f103 0301 	add.w	r3, r3, #1
 800e4a8:	d0f9      	beq.n	800e49e <__gethex+0x76>
 800e4aa:	f7ff ffa8 	bl	800e3fe <__hexdig_fun>
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	fab0 f480 	clz	r4, r0
 800e4b4:	0964      	lsrs	r4, r4, #5
 800e4b6:	4635      	mov	r5, r6
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	463a      	mov	r2, r7
 800e4bc:	4616      	mov	r6, r2
 800e4be:	3201      	adds	r2, #1
 800e4c0:	7830      	ldrb	r0, [r6, #0]
 800e4c2:	f7ff ff9c 	bl	800e3fe <__hexdig_fun>
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	d1f8      	bne.n	800e4bc <__gethex+0x94>
 800e4ca:	9901      	ldr	r1, [sp, #4]
 800e4cc:	4652      	mov	r2, sl
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	f001 fdde 	bl	8010090 <strncmp>
 800e4d4:	b980      	cbnz	r0, 800e4f8 <__gethex+0xd0>
 800e4d6:	b94d      	cbnz	r5, 800e4ec <__gethex+0xc4>
 800e4d8:	eb06 050a 	add.w	r5, r6, sl
 800e4dc:	462a      	mov	r2, r5
 800e4de:	4616      	mov	r6, r2
 800e4e0:	3201      	adds	r2, #1
 800e4e2:	7830      	ldrb	r0, [r6, #0]
 800e4e4:	f7ff ff8b 	bl	800e3fe <__hexdig_fun>
 800e4e8:	2800      	cmp	r0, #0
 800e4ea:	d1f8      	bne.n	800e4de <__gethex+0xb6>
 800e4ec:	1bad      	subs	r5, r5, r6
 800e4ee:	00ad      	lsls	r5, r5, #2
 800e4f0:	e004      	b.n	800e4fc <__gethex+0xd4>
 800e4f2:	2400      	movs	r4, #0
 800e4f4:	4625      	mov	r5, r4
 800e4f6:	e7e0      	b.n	800e4ba <__gethex+0x92>
 800e4f8:	2d00      	cmp	r5, #0
 800e4fa:	d1f7      	bne.n	800e4ec <__gethex+0xc4>
 800e4fc:	7833      	ldrb	r3, [r6, #0]
 800e4fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e502:	2b50      	cmp	r3, #80	; 0x50
 800e504:	d13b      	bne.n	800e57e <__gethex+0x156>
 800e506:	7873      	ldrb	r3, [r6, #1]
 800e508:	2b2b      	cmp	r3, #43	; 0x2b
 800e50a:	d02c      	beq.n	800e566 <__gethex+0x13e>
 800e50c:	2b2d      	cmp	r3, #45	; 0x2d
 800e50e:	d02e      	beq.n	800e56e <__gethex+0x146>
 800e510:	1c71      	adds	r1, r6, #1
 800e512:	f04f 0900 	mov.w	r9, #0
 800e516:	7808      	ldrb	r0, [r1, #0]
 800e518:	f7ff ff71 	bl	800e3fe <__hexdig_fun>
 800e51c:	1e43      	subs	r3, r0, #1
 800e51e:	b2db      	uxtb	r3, r3
 800e520:	2b18      	cmp	r3, #24
 800e522:	d82c      	bhi.n	800e57e <__gethex+0x156>
 800e524:	f1a0 0210 	sub.w	r2, r0, #16
 800e528:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e52c:	f7ff ff67 	bl	800e3fe <__hexdig_fun>
 800e530:	1e43      	subs	r3, r0, #1
 800e532:	b2db      	uxtb	r3, r3
 800e534:	2b18      	cmp	r3, #24
 800e536:	d91d      	bls.n	800e574 <__gethex+0x14c>
 800e538:	f1b9 0f00 	cmp.w	r9, #0
 800e53c:	d000      	beq.n	800e540 <__gethex+0x118>
 800e53e:	4252      	negs	r2, r2
 800e540:	4415      	add	r5, r2
 800e542:	f8cb 1000 	str.w	r1, [fp]
 800e546:	b1e4      	cbz	r4, 800e582 <__gethex+0x15a>
 800e548:	9b00      	ldr	r3, [sp, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	bf14      	ite	ne
 800e54e:	2700      	movne	r7, #0
 800e550:	2706      	moveq	r7, #6
 800e552:	4638      	mov	r0, r7
 800e554:	b009      	add	sp, #36	; 0x24
 800e556:	ecbd 8b02 	vpop	{d8}
 800e55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e55e:	463e      	mov	r6, r7
 800e560:	4625      	mov	r5, r4
 800e562:	2401      	movs	r4, #1
 800e564:	e7ca      	b.n	800e4fc <__gethex+0xd4>
 800e566:	f04f 0900 	mov.w	r9, #0
 800e56a:	1cb1      	adds	r1, r6, #2
 800e56c:	e7d3      	b.n	800e516 <__gethex+0xee>
 800e56e:	f04f 0901 	mov.w	r9, #1
 800e572:	e7fa      	b.n	800e56a <__gethex+0x142>
 800e574:	230a      	movs	r3, #10
 800e576:	fb03 0202 	mla	r2, r3, r2, r0
 800e57a:	3a10      	subs	r2, #16
 800e57c:	e7d4      	b.n	800e528 <__gethex+0x100>
 800e57e:	4631      	mov	r1, r6
 800e580:	e7df      	b.n	800e542 <__gethex+0x11a>
 800e582:	1bf3      	subs	r3, r6, r7
 800e584:	3b01      	subs	r3, #1
 800e586:	4621      	mov	r1, r4
 800e588:	2b07      	cmp	r3, #7
 800e58a:	dc0b      	bgt.n	800e5a4 <__gethex+0x17c>
 800e58c:	ee18 0a10 	vmov	r0, s16
 800e590:	f000 fb18 	bl	800ebc4 <_Balloc>
 800e594:	4604      	mov	r4, r0
 800e596:	b940      	cbnz	r0, 800e5aa <__gethex+0x182>
 800e598:	4b5d      	ldr	r3, [pc, #372]	; (800e710 <__gethex+0x2e8>)
 800e59a:	4602      	mov	r2, r0
 800e59c:	21de      	movs	r1, #222	; 0xde
 800e59e:	485d      	ldr	r0, [pc, #372]	; (800e714 <__gethex+0x2ec>)
 800e5a0:	f7fc fcb4 	bl	800af0c <__assert_func>
 800e5a4:	3101      	adds	r1, #1
 800e5a6:	105b      	asrs	r3, r3, #1
 800e5a8:	e7ee      	b.n	800e588 <__gethex+0x160>
 800e5aa:	f100 0914 	add.w	r9, r0, #20
 800e5ae:	f04f 0b00 	mov.w	fp, #0
 800e5b2:	f1ca 0301 	rsb	r3, sl, #1
 800e5b6:	f8cd 9008 	str.w	r9, [sp, #8]
 800e5ba:	f8cd b000 	str.w	fp, [sp]
 800e5be:	9306      	str	r3, [sp, #24]
 800e5c0:	42b7      	cmp	r7, r6
 800e5c2:	d340      	bcc.n	800e646 <__gethex+0x21e>
 800e5c4:	9802      	ldr	r0, [sp, #8]
 800e5c6:	9b00      	ldr	r3, [sp, #0]
 800e5c8:	f840 3b04 	str.w	r3, [r0], #4
 800e5cc:	eba0 0009 	sub.w	r0, r0, r9
 800e5d0:	1080      	asrs	r0, r0, #2
 800e5d2:	0146      	lsls	r6, r0, #5
 800e5d4:	6120      	str	r0, [r4, #16]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f000 fbe6 	bl	800eda8 <__hi0bits>
 800e5dc:	1a30      	subs	r0, r6, r0
 800e5de:	f8d8 6000 	ldr.w	r6, [r8]
 800e5e2:	42b0      	cmp	r0, r6
 800e5e4:	dd63      	ble.n	800e6ae <__gethex+0x286>
 800e5e6:	1b87      	subs	r7, r0, r6
 800e5e8:	4639      	mov	r1, r7
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	f000 ff8a 	bl	800f504 <__any_on>
 800e5f0:	4682      	mov	sl, r0
 800e5f2:	b1a8      	cbz	r0, 800e620 <__gethex+0x1f8>
 800e5f4:	1e7b      	subs	r3, r7, #1
 800e5f6:	1159      	asrs	r1, r3, #5
 800e5f8:	f003 021f 	and.w	r2, r3, #31
 800e5fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e600:	f04f 0a01 	mov.w	sl, #1
 800e604:	fa0a f202 	lsl.w	r2, sl, r2
 800e608:	420a      	tst	r2, r1
 800e60a:	d009      	beq.n	800e620 <__gethex+0x1f8>
 800e60c:	4553      	cmp	r3, sl
 800e60e:	dd05      	ble.n	800e61c <__gethex+0x1f4>
 800e610:	1eb9      	subs	r1, r7, #2
 800e612:	4620      	mov	r0, r4
 800e614:	f000 ff76 	bl	800f504 <__any_on>
 800e618:	2800      	cmp	r0, #0
 800e61a:	d145      	bne.n	800e6a8 <__gethex+0x280>
 800e61c:	f04f 0a02 	mov.w	sl, #2
 800e620:	4639      	mov	r1, r7
 800e622:	4620      	mov	r0, r4
 800e624:	f7ff fe99 	bl	800e35a <rshift>
 800e628:	443d      	add	r5, r7
 800e62a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e62e:	42ab      	cmp	r3, r5
 800e630:	da4c      	bge.n	800e6cc <__gethex+0x2a4>
 800e632:	ee18 0a10 	vmov	r0, s16
 800e636:	4621      	mov	r1, r4
 800e638:	f000 fb04 	bl	800ec44 <_Bfree>
 800e63c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e63e:	2300      	movs	r3, #0
 800e640:	6013      	str	r3, [r2, #0]
 800e642:	27a3      	movs	r7, #163	; 0xa3
 800e644:	e785      	b.n	800e552 <__gethex+0x12a>
 800e646:	1e73      	subs	r3, r6, #1
 800e648:	9a05      	ldr	r2, [sp, #20]
 800e64a:	9303      	str	r3, [sp, #12]
 800e64c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e650:	4293      	cmp	r3, r2
 800e652:	d019      	beq.n	800e688 <__gethex+0x260>
 800e654:	f1bb 0f20 	cmp.w	fp, #32
 800e658:	d107      	bne.n	800e66a <__gethex+0x242>
 800e65a:	9b02      	ldr	r3, [sp, #8]
 800e65c:	9a00      	ldr	r2, [sp, #0]
 800e65e:	f843 2b04 	str.w	r2, [r3], #4
 800e662:	9302      	str	r3, [sp, #8]
 800e664:	2300      	movs	r3, #0
 800e666:	9300      	str	r3, [sp, #0]
 800e668:	469b      	mov	fp, r3
 800e66a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e66e:	f7ff fec6 	bl	800e3fe <__hexdig_fun>
 800e672:	9b00      	ldr	r3, [sp, #0]
 800e674:	f000 000f 	and.w	r0, r0, #15
 800e678:	fa00 f00b 	lsl.w	r0, r0, fp
 800e67c:	4303      	orrs	r3, r0
 800e67e:	9300      	str	r3, [sp, #0]
 800e680:	f10b 0b04 	add.w	fp, fp, #4
 800e684:	9b03      	ldr	r3, [sp, #12]
 800e686:	e00d      	b.n	800e6a4 <__gethex+0x27c>
 800e688:	9b03      	ldr	r3, [sp, #12]
 800e68a:	9a06      	ldr	r2, [sp, #24]
 800e68c:	4413      	add	r3, r2
 800e68e:	42bb      	cmp	r3, r7
 800e690:	d3e0      	bcc.n	800e654 <__gethex+0x22c>
 800e692:	4618      	mov	r0, r3
 800e694:	9901      	ldr	r1, [sp, #4]
 800e696:	9307      	str	r3, [sp, #28]
 800e698:	4652      	mov	r2, sl
 800e69a:	f001 fcf9 	bl	8010090 <strncmp>
 800e69e:	9b07      	ldr	r3, [sp, #28]
 800e6a0:	2800      	cmp	r0, #0
 800e6a2:	d1d7      	bne.n	800e654 <__gethex+0x22c>
 800e6a4:	461e      	mov	r6, r3
 800e6a6:	e78b      	b.n	800e5c0 <__gethex+0x198>
 800e6a8:	f04f 0a03 	mov.w	sl, #3
 800e6ac:	e7b8      	b.n	800e620 <__gethex+0x1f8>
 800e6ae:	da0a      	bge.n	800e6c6 <__gethex+0x29e>
 800e6b0:	1a37      	subs	r7, r6, r0
 800e6b2:	4621      	mov	r1, r4
 800e6b4:	ee18 0a10 	vmov	r0, s16
 800e6b8:	463a      	mov	r2, r7
 800e6ba:	f000 fcdf 	bl	800f07c <__lshift>
 800e6be:	1bed      	subs	r5, r5, r7
 800e6c0:	4604      	mov	r4, r0
 800e6c2:	f100 0914 	add.w	r9, r0, #20
 800e6c6:	f04f 0a00 	mov.w	sl, #0
 800e6ca:	e7ae      	b.n	800e62a <__gethex+0x202>
 800e6cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e6d0:	42a8      	cmp	r0, r5
 800e6d2:	dd72      	ble.n	800e7ba <__gethex+0x392>
 800e6d4:	1b45      	subs	r5, r0, r5
 800e6d6:	42ae      	cmp	r6, r5
 800e6d8:	dc36      	bgt.n	800e748 <__gethex+0x320>
 800e6da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e6de:	2b02      	cmp	r3, #2
 800e6e0:	d02a      	beq.n	800e738 <__gethex+0x310>
 800e6e2:	2b03      	cmp	r3, #3
 800e6e4:	d02c      	beq.n	800e740 <__gethex+0x318>
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d11c      	bne.n	800e724 <__gethex+0x2fc>
 800e6ea:	42ae      	cmp	r6, r5
 800e6ec:	d11a      	bne.n	800e724 <__gethex+0x2fc>
 800e6ee:	2e01      	cmp	r6, #1
 800e6f0:	d112      	bne.n	800e718 <__gethex+0x2f0>
 800e6f2:	9a04      	ldr	r2, [sp, #16]
 800e6f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e6f8:	6013      	str	r3, [r2, #0]
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	6123      	str	r3, [r4, #16]
 800e6fe:	f8c9 3000 	str.w	r3, [r9]
 800e702:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e704:	2762      	movs	r7, #98	; 0x62
 800e706:	601c      	str	r4, [r3, #0]
 800e708:	e723      	b.n	800e552 <__gethex+0x12a>
 800e70a:	bf00      	nop
 800e70c:	08010868 	.word	0x08010868
 800e710:	0801078d 	.word	0x0801078d
 800e714:	08010800 	.word	0x08010800
 800e718:	1e71      	subs	r1, r6, #1
 800e71a:	4620      	mov	r0, r4
 800e71c:	f000 fef2 	bl	800f504 <__any_on>
 800e720:	2800      	cmp	r0, #0
 800e722:	d1e6      	bne.n	800e6f2 <__gethex+0x2ca>
 800e724:	ee18 0a10 	vmov	r0, s16
 800e728:	4621      	mov	r1, r4
 800e72a:	f000 fa8b 	bl	800ec44 <_Bfree>
 800e72e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e730:	2300      	movs	r3, #0
 800e732:	6013      	str	r3, [r2, #0]
 800e734:	2750      	movs	r7, #80	; 0x50
 800e736:	e70c      	b.n	800e552 <__gethex+0x12a>
 800e738:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1f2      	bne.n	800e724 <__gethex+0x2fc>
 800e73e:	e7d8      	b.n	800e6f2 <__gethex+0x2ca>
 800e740:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e742:	2b00      	cmp	r3, #0
 800e744:	d1d5      	bne.n	800e6f2 <__gethex+0x2ca>
 800e746:	e7ed      	b.n	800e724 <__gethex+0x2fc>
 800e748:	1e6f      	subs	r7, r5, #1
 800e74a:	f1ba 0f00 	cmp.w	sl, #0
 800e74e:	d131      	bne.n	800e7b4 <__gethex+0x38c>
 800e750:	b127      	cbz	r7, 800e75c <__gethex+0x334>
 800e752:	4639      	mov	r1, r7
 800e754:	4620      	mov	r0, r4
 800e756:	f000 fed5 	bl	800f504 <__any_on>
 800e75a:	4682      	mov	sl, r0
 800e75c:	117b      	asrs	r3, r7, #5
 800e75e:	2101      	movs	r1, #1
 800e760:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e764:	f007 071f 	and.w	r7, r7, #31
 800e768:	fa01 f707 	lsl.w	r7, r1, r7
 800e76c:	421f      	tst	r7, r3
 800e76e:	4629      	mov	r1, r5
 800e770:	4620      	mov	r0, r4
 800e772:	bf18      	it	ne
 800e774:	f04a 0a02 	orrne.w	sl, sl, #2
 800e778:	1b76      	subs	r6, r6, r5
 800e77a:	f7ff fdee 	bl	800e35a <rshift>
 800e77e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e782:	2702      	movs	r7, #2
 800e784:	f1ba 0f00 	cmp.w	sl, #0
 800e788:	d048      	beq.n	800e81c <__gethex+0x3f4>
 800e78a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e78e:	2b02      	cmp	r3, #2
 800e790:	d015      	beq.n	800e7be <__gethex+0x396>
 800e792:	2b03      	cmp	r3, #3
 800e794:	d017      	beq.n	800e7c6 <__gethex+0x39e>
 800e796:	2b01      	cmp	r3, #1
 800e798:	d109      	bne.n	800e7ae <__gethex+0x386>
 800e79a:	f01a 0f02 	tst.w	sl, #2
 800e79e:	d006      	beq.n	800e7ae <__gethex+0x386>
 800e7a0:	f8d9 0000 	ldr.w	r0, [r9]
 800e7a4:	ea4a 0a00 	orr.w	sl, sl, r0
 800e7a8:	f01a 0f01 	tst.w	sl, #1
 800e7ac:	d10e      	bne.n	800e7cc <__gethex+0x3a4>
 800e7ae:	f047 0710 	orr.w	r7, r7, #16
 800e7b2:	e033      	b.n	800e81c <__gethex+0x3f4>
 800e7b4:	f04f 0a01 	mov.w	sl, #1
 800e7b8:	e7d0      	b.n	800e75c <__gethex+0x334>
 800e7ba:	2701      	movs	r7, #1
 800e7bc:	e7e2      	b.n	800e784 <__gethex+0x35c>
 800e7be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7c0:	f1c3 0301 	rsb	r3, r3, #1
 800e7c4:	9315      	str	r3, [sp, #84]	; 0x54
 800e7c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d0f0      	beq.n	800e7ae <__gethex+0x386>
 800e7cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e7d0:	f104 0314 	add.w	r3, r4, #20
 800e7d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e7d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e7dc:	f04f 0c00 	mov.w	ip, #0
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e7ea:	d01c      	beq.n	800e826 <__gethex+0x3fe>
 800e7ec:	3201      	adds	r2, #1
 800e7ee:	6002      	str	r2, [r0, #0]
 800e7f0:	2f02      	cmp	r7, #2
 800e7f2:	f104 0314 	add.w	r3, r4, #20
 800e7f6:	d13f      	bne.n	800e878 <__gethex+0x450>
 800e7f8:	f8d8 2000 	ldr.w	r2, [r8]
 800e7fc:	3a01      	subs	r2, #1
 800e7fe:	42b2      	cmp	r2, r6
 800e800:	d10a      	bne.n	800e818 <__gethex+0x3f0>
 800e802:	1171      	asrs	r1, r6, #5
 800e804:	2201      	movs	r2, #1
 800e806:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e80a:	f006 061f 	and.w	r6, r6, #31
 800e80e:	fa02 f606 	lsl.w	r6, r2, r6
 800e812:	421e      	tst	r6, r3
 800e814:	bf18      	it	ne
 800e816:	4617      	movne	r7, r2
 800e818:	f047 0720 	orr.w	r7, r7, #32
 800e81c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e81e:	601c      	str	r4, [r3, #0]
 800e820:	9b04      	ldr	r3, [sp, #16]
 800e822:	601d      	str	r5, [r3, #0]
 800e824:	e695      	b.n	800e552 <__gethex+0x12a>
 800e826:	4299      	cmp	r1, r3
 800e828:	f843 cc04 	str.w	ip, [r3, #-4]
 800e82c:	d8d8      	bhi.n	800e7e0 <__gethex+0x3b8>
 800e82e:	68a3      	ldr	r3, [r4, #8]
 800e830:	459b      	cmp	fp, r3
 800e832:	db19      	blt.n	800e868 <__gethex+0x440>
 800e834:	6861      	ldr	r1, [r4, #4]
 800e836:	ee18 0a10 	vmov	r0, s16
 800e83a:	3101      	adds	r1, #1
 800e83c:	f000 f9c2 	bl	800ebc4 <_Balloc>
 800e840:	4681      	mov	r9, r0
 800e842:	b918      	cbnz	r0, 800e84c <__gethex+0x424>
 800e844:	4b1a      	ldr	r3, [pc, #104]	; (800e8b0 <__gethex+0x488>)
 800e846:	4602      	mov	r2, r0
 800e848:	2184      	movs	r1, #132	; 0x84
 800e84a:	e6a8      	b.n	800e59e <__gethex+0x176>
 800e84c:	6922      	ldr	r2, [r4, #16]
 800e84e:	3202      	adds	r2, #2
 800e850:	f104 010c 	add.w	r1, r4, #12
 800e854:	0092      	lsls	r2, r2, #2
 800e856:	300c      	adds	r0, #12
 800e858:	f000 f980 	bl	800eb5c <memcpy>
 800e85c:	4621      	mov	r1, r4
 800e85e:	ee18 0a10 	vmov	r0, s16
 800e862:	f000 f9ef 	bl	800ec44 <_Bfree>
 800e866:	464c      	mov	r4, r9
 800e868:	6923      	ldr	r3, [r4, #16]
 800e86a:	1c5a      	adds	r2, r3, #1
 800e86c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e870:	6122      	str	r2, [r4, #16]
 800e872:	2201      	movs	r2, #1
 800e874:	615a      	str	r2, [r3, #20]
 800e876:	e7bb      	b.n	800e7f0 <__gethex+0x3c8>
 800e878:	6922      	ldr	r2, [r4, #16]
 800e87a:	455a      	cmp	r2, fp
 800e87c:	dd0b      	ble.n	800e896 <__gethex+0x46e>
 800e87e:	2101      	movs	r1, #1
 800e880:	4620      	mov	r0, r4
 800e882:	f7ff fd6a 	bl	800e35a <rshift>
 800e886:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e88a:	3501      	adds	r5, #1
 800e88c:	42ab      	cmp	r3, r5
 800e88e:	f6ff aed0 	blt.w	800e632 <__gethex+0x20a>
 800e892:	2701      	movs	r7, #1
 800e894:	e7c0      	b.n	800e818 <__gethex+0x3f0>
 800e896:	f016 061f 	ands.w	r6, r6, #31
 800e89a:	d0fa      	beq.n	800e892 <__gethex+0x46a>
 800e89c:	4453      	add	r3, sl
 800e89e:	f1c6 0620 	rsb	r6, r6, #32
 800e8a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e8a6:	f000 fa7f 	bl	800eda8 <__hi0bits>
 800e8aa:	42b0      	cmp	r0, r6
 800e8ac:	dbe7      	blt.n	800e87e <__gethex+0x456>
 800e8ae:	e7f0      	b.n	800e892 <__gethex+0x46a>
 800e8b0:	0801078d 	.word	0x0801078d

0800e8b4 <L_shift>:
 800e8b4:	f1c2 0208 	rsb	r2, r2, #8
 800e8b8:	0092      	lsls	r2, r2, #2
 800e8ba:	b570      	push	{r4, r5, r6, lr}
 800e8bc:	f1c2 0620 	rsb	r6, r2, #32
 800e8c0:	6843      	ldr	r3, [r0, #4]
 800e8c2:	6804      	ldr	r4, [r0, #0]
 800e8c4:	fa03 f506 	lsl.w	r5, r3, r6
 800e8c8:	432c      	orrs	r4, r5
 800e8ca:	40d3      	lsrs	r3, r2
 800e8cc:	6004      	str	r4, [r0, #0]
 800e8ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800e8d2:	4288      	cmp	r0, r1
 800e8d4:	d3f4      	bcc.n	800e8c0 <L_shift+0xc>
 800e8d6:	bd70      	pop	{r4, r5, r6, pc}

0800e8d8 <__match>:
 800e8d8:	b530      	push	{r4, r5, lr}
 800e8da:	6803      	ldr	r3, [r0, #0]
 800e8dc:	3301      	adds	r3, #1
 800e8de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8e2:	b914      	cbnz	r4, 800e8ea <__match+0x12>
 800e8e4:	6003      	str	r3, [r0, #0]
 800e8e6:	2001      	movs	r0, #1
 800e8e8:	bd30      	pop	{r4, r5, pc}
 800e8ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e8f2:	2d19      	cmp	r5, #25
 800e8f4:	bf98      	it	ls
 800e8f6:	3220      	addls	r2, #32
 800e8f8:	42a2      	cmp	r2, r4
 800e8fa:	d0f0      	beq.n	800e8de <__match+0x6>
 800e8fc:	2000      	movs	r0, #0
 800e8fe:	e7f3      	b.n	800e8e8 <__match+0x10>

0800e900 <__hexnan>:
 800e900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e904:	680b      	ldr	r3, [r1, #0]
 800e906:	115e      	asrs	r6, r3, #5
 800e908:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e90c:	f013 031f 	ands.w	r3, r3, #31
 800e910:	b087      	sub	sp, #28
 800e912:	bf18      	it	ne
 800e914:	3604      	addne	r6, #4
 800e916:	2500      	movs	r5, #0
 800e918:	1f37      	subs	r7, r6, #4
 800e91a:	4690      	mov	r8, r2
 800e91c:	6802      	ldr	r2, [r0, #0]
 800e91e:	9301      	str	r3, [sp, #4]
 800e920:	4682      	mov	sl, r0
 800e922:	f846 5c04 	str.w	r5, [r6, #-4]
 800e926:	46b9      	mov	r9, r7
 800e928:	463c      	mov	r4, r7
 800e92a:	9502      	str	r5, [sp, #8]
 800e92c:	46ab      	mov	fp, r5
 800e92e:	7851      	ldrb	r1, [r2, #1]
 800e930:	1c53      	adds	r3, r2, #1
 800e932:	9303      	str	r3, [sp, #12]
 800e934:	b341      	cbz	r1, 800e988 <__hexnan+0x88>
 800e936:	4608      	mov	r0, r1
 800e938:	9205      	str	r2, [sp, #20]
 800e93a:	9104      	str	r1, [sp, #16]
 800e93c:	f7ff fd5f 	bl	800e3fe <__hexdig_fun>
 800e940:	2800      	cmp	r0, #0
 800e942:	d14f      	bne.n	800e9e4 <__hexnan+0xe4>
 800e944:	9904      	ldr	r1, [sp, #16]
 800e946:	9a05      	ldr	r2, [sp, #20]
 800e948:	2920      	cmp	r1, #32
 800e94a:	d818      	bhi.n	800e97e <__hexnan+0x7e>
 800e94c:	9b02      	ldr	r3, [sp, #8]
 800e94e:	459b      	cmp	fp, r3
 800e950:	dd13      	ble.n	800e97a <__hexnan+0x7a>
 800e952:	454c      	cmp	r4, r9
 800e954:	d206      	bcs.n	800e964 <__hexnan+0x64>
 800e956:	2d07      	cmp	r5, #7
 800e958:	dc04      	bgt.n	800e964 <__hexnan+0x64>
 800e95a:	462a      	mov	r2, r5
 800e95c:	4649      	mov	r1, r9
 800e95e:	4620      	mov	r0, r4
 800e960:	f7ff ffa8 	bl	800e8b4 <L_shift>
 800e964:	4544      	cmp	r4, r8
 800e966:	d950      	bls.n	800ea0a <__hexnan+0x10a>
 800e968:	2300      	movs	r3, #0
 800e96a:	f1a4 0904 	sub.w	r9, r4, #4
 800e96e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e972:	f8cd b008 	str.w	fp, [sp, #8]
 800e976:	464c      	mov	r4, r9
 800e978:	461d      	mov	r5, r3
 800e97a:	9a03      	ldr	r2, [sp, #12]
 800e97c:	e7d7      	b.n	800e92e <__hexnan+0x2e>
 800e97e:	2929      	cmp	r1, #41	; 0x29
 800e980:	d156      	bne.n	800ea30 <__hexnan+0x130>
 800e982:	3202      	adds	r2, #2
 800e984:	f8ca 2000 	str.w	r2, [sl]
 800e988:	f1bb 0f00 	cmp.w	fp, #0
 800e98c:	d050      	beq.n	800ea30 <__hexnan+0x130>
 800e98e:	454c      	cmp	r4, r9
 800e990:	d206      	bcs.n	800e9a0 <__hexnan+0xa0>
 800e992:	2d07      	cmp	r5, #7
 800e994:	dc04      	bgt.n	800e9a0 <__hexnan+0xa0>
 800e996:	462a      	mov	r2, r5
 800e998:	4649      	mov	r1, r9
 800e99a:	4620      	mov	r0, r4
 800e99c:	f7ff ff8a 	bl	800e8b4 <L_shift>
 800e9a0:	4544      	cmp	r4, r8
 800e9a2:	d934      	bls.n	800ea0e <__hexnan+0x10e>
 800e9a4:	f1a8 0204 	sub.w	r2, r8, #4
 800e9a8:	4623      	mov	r3, r4
 800e9aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800e9ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800e9b2:	429f      	cmp	r7, r3
 800e9b4:	d2f9      	bcs.n	800e9aa <__hexnan+0xaa>
 800e9b6:	1b3b      	subs	r3, r7, r4
 800e9b8:	f023 0303 	bic.w	r3, r3, #3
 800e9bc:	3304      	adds	r3, #4
 800e9be:	3401      	adds	r4, #1
 800e9c0:	3e03      	subs	r6, #3
 800e9c2:	42b4      	cmp	r4, r6
 800e9c4:	bf88      	it	hi
 800e9c6:	2304      	movhi	r3, #4
 800e9c8:	4443      	add	r3, r8
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f843 2b04 	str.w	r2, [r3], #4
 800e9d0:	429f      	cmp	r7, r3
 800e9d2:	d2fb      	bcs.n	800e9cc <__hexnan+0xcc>
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	b91b      	cbnz	r3, 800e9e0 <__hexnan+0xe0>
 800e9d8:	4547      	cmp	r7, r8
 800e9da:	d127      	bne.n	800ea2c <__hexnan+0x12c>
 800e9dc:	2301      	movs	r3, #1
 800e9de:	603b      	str	r3, [r7, #0]
 800e9e0:	2005      	movs	r0, #5
 800e9e2:	e026      	b.n	800ea32 <__hexnan+0x132>
 800e9e4:	3501      	adds	r5, #1
 800e9e6:	2d08      	cmp	r5, #8
 800e9e8:	f10b 0b01 	add.w	fp, fp, #1
 800e9ec:	dd06      	ble.n	800e9fc <__hexnan+0xfc>
 800e9ee:	4544      	cmp	r4, r8
 800e9f0:	d9c3      	bls.n	800e97a <__hexnan+0x7a>
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	f844 3c04 	str.w	r3, [r4, #-4]
 800e9f8:	2501      	movs	r5, #1
 800e9fa:	3c04      	subs	r4, #4
 800e9fc:	6822      	ldr	r2, [r4, #0]
 800e9fe:	f000 000f 	and.w	r0, r0, #15
 800ea02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ea06:	6022      	str	r2, [r4, #0]
 800ea08:	e7b7      	b.n	800e97a <__hexnan+0x7a>
 800ea0a:	2508      	movs	r5, #8
 800ea0c:	e7b5      	b.n	800e97a <__hexnan+0x7a>
 800ea0e:	9b01      	ldr	r3, [sp, #4]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d0df      	beq.n	800e9d4 <__hexnan+0xd4>
 800ea14:	f04f 32ff 	mov.w	r2, #4294967295
 800ea18:	f1c3 0320 	rsb	r3, r3, #32
 800ea1c:	fa22 f303 	lsr.w	r3, r2, r3
 800ea20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ea24:	401a      	ands	r2, r3
 800ea26:	f846 2c04 	str.w	r2, [r6, #-4]
 800ea2a:	e7d3      	b.n	800e9d4 <__hexnan+0xd4>
 800ea2c:	3f04      	subs	r7, #4
 800ea2e:	e7d1      	b.n	800e9d4 <__hexnan+0xd4>
 800ea30:	2004      	movs	r0, #4
 800ea32:	b007      	add	sp, #28
 800ea34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea38 <_localeconv_r>:
 800ea38:	4800      	ldr	r0, [pc, #0]	; (800ea3c <_localeconv_r+0x4>)
 800ea3a:	4770      	bx	lr
 800ea3c:	20001544 	.word	0x20001544

0800ea40 <__retarget_lock_init_recursive>:
 800ea40:	4770      	bx	lr

0800ea42 <__retarget_lock_acquire_recursive>:
 800ea42:	4770      	bx	lr

0800ea44 <__retarget_lock_release_recursive>:
 800ea44:	4770      	bx	lr
	...

0800ea48 <_lseek_r>:
 800ea48:	b538      	push	{r3, r4, r5, lr}
 800ea4a:	4d07      	ldr	r5, [pc, #28]	; (800ea68 <_lseek_r+0x20>)
 800ea4c:	4604      	mov	r4, r0
 800ea4e:	4608      	mov	r0, r1
 800ea50:	4611      	mov	r1, r2
 800ea52:	2200      	movs	r2, #0
 800ea54:	602a      	str	r2, [r5, #0]
 800ea56:	461a      	mov	r2, r3
 800ea58:	f7f7 fc76 	bl	8006348 <_lseek>
 800ea5c:	1c43      	adds	r3, r0, #1
 800ea5e:	d102      	bne.n	800ea66 <_lseek_r+0x1e>
 800ea60:	682b      	ldr	r3, [r5, #0]
 800ea62:	b103      	cbz	r3, 800ea66 <_lseek_r+0x1e>
 800ea64:	6023      	str	r3, [r4, #0]
 800ea66:	bd38      	pop	{r3, r4, r5, pc}
 800ea68:	20002130 	.word	0x20002130

0800ea6c <__swhatbuf_r>:
 800ea6c:	b570      	push	{r4, r5, r6, lr}
 800ea6e:	460e      	mov	r6, r1
 800ea70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea74:	2900      	cmp	r1, #0
 800ea76:	b096      	sub	sp, #88	; 0x58
 800ea78:	4614      	mov	r4, r2
 800ea7a:	461d      	mov	r5, r3
 800ea7c:	da08      	bge.n	800ea90 <__swhatbuf_r+0x24>
 800ea7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ea82:	2200      	movs	r2, #0
 800ea84:	602a      	str	r2, [r5, #0]
 800ea86:	061a      	lsls	r2, r3, #24
 800ea88:	d410      	bmi.n	800eaac <__swhatbuf_r+0x40>
 800ea8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea8e:	e00e      	b.n	800eaae <__swhatbuf_r+0x42>
 800ea90:	466a      	mov	r2, sp
 800ea92:	f001 fbcd 	bl	8010230 <_fstat_r>
 800ea96:	2800      	cmp	r0, #0
 800ea98:	dbf1      	blt.n	800ea7e <__swhatbuf_r+0x12>
 800ea9a:	9a01      	ldr	r2, [sp, #4]
 800ea9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eaa0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eaa4:	425a      	negs	r2, r3
 800eaa6:	415a      	adcs	r2, r3
 800eaa8:	602a      	str	r2, [r5, #0]
 800eaaa:	e7ee      	b.n	800ea8a <__swhatbuf_r+0x1e>
 800eaac:	2340      	movs	r3, #64	; 0x40
 800eaae:	2000      	movs	r0, #0
 800eab0:	6023      	str	r3, [r4, #0]
 800eab2:	b016      	add	sp, #88	; 0x58
 800eab4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eab8 <__smakebuf_r>:
 800eab8:	898b      	ldrh	r3, [r1, #12]
 800eaba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eabc:	079d      	lsls	r5, r3, #30
 800eabe:	4606      	mov	r6, r0
 800eac0:	460c      	mov	r4, r1
 800eac2:	d507      	bpl.n	800ead4 <__smakebuf_r+0x1c>
 800eac4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eac8:	6023      	str	r3, [r4, #0]
 800eaca:	6123      	str	r3, [r4, #16]
 800eacc:	2301      	movs	r3, #1
 800eace:	6163      	str	r3, [r4, #20]
 800ead0:	b002      	add	sp, #8
 800ead2:	bd70      	pop	{r4, r5, r6, pc}
 800ead4:	ab01      	add	r3, sp, #4
 800ead6:	466a      	mov	r2, sp
 800ead8:	f7ff ffc8 	bl	800ea6c <__swhatbuf_r>
 800eadc:	9900      	ldr	r1, [sp, #0]
 800eade:	4605      	mov	r5, r0
 800eae0:	4630      	mov	r0, r6
 800eae2:	f7fc faf1 	bl	800b0c8 <_malloc_r>
 800eae6:	b948      	cbnz	r0, 800eafc <__smakebuf_r+0x44>
 800eae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaec:	059a      	lsls	r2, r3, #22
 800eaee:	d4ef      	bmi.n	800ead0 <__smakebuf_r+0x18>
 800eaf0:	f023 0303 	bic.w	r3, r3, #3
 800eaf4:	f043 0302 	orr.w	r3, r3, #2
 800eaf8:	81a3      	strh	r3, [r4, #12]
 800eafa:	e7e3      	b.n	800eac4 <__smakebuf_r+0xc>
 800eafc:	4b0d      	ldr	r3, [pc, #52]	; (800eb34 <__smakebuf_r+0x7c>)
 800eafe:	62b3      	str	r3, [r6, #40]	; 0x28
 800eb00:	89a3      	ldrh	r3, [r4, #12]
 800eb02:	6020      	str	r0, [r4, #0]
 800eb04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb08:	81a3      	strh	r3, [r4, #12]
 800eb0a:	9b00      	ldr	r3, [sp, #0]
 800eb0c:	6163      	str	r3, [r4, #20]
 800eb0e:	9b01      	ldr	r3, [sp, #4]
 800eb10:	6120      	str	r0, [r4, #16]
 800eb12:	b15b      	cbz	r3, 800eb2c <__smakebuf_r+0x74>
 800eb14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb18:	4630      	mov	r0, r6
 800eb1a:	f001 fb9b 	bl	8010254 <_isatty_r>
 800eb1e:	b128      	cbz	r0, 800eb2c <__smakebuf_r+0x74>
 800eb20:	89a3      	ldrh	r3, [r4, #12]
 800eb22:	f023 0303 	bic.w	r3, r3, #3
 800eb26:	f043 0301 	orr.w	r3, r3, #1
 800eb2a:	81a3      	strh	r3, [r4, #12]
 800eb2c:	89a0      	ldrh	r0, [r4, #12]
 800eb2e:	4305      	orrs	r5, r0
 800eb30:	81a5      	strh	r5, [r4, #12]
 800eb32:	e7cd      	b.n	800ead0 <__smakebuf_r+0x18>
 800eb34:	0800e1b9 	.word	0x0800e1b9

0800eb38 <__ascii_mbtowc>:
 800eb38:	b082      	sub	sp, #8
 800eb3a:	b901      	cbnz	r1, 800eb3e <__ascii_mbtowc+0x6>
 800eb3c:	a901      	add	r1, sp, #4
 800eb3e:	b142      	cbz	r2, 800eb52 <__ascii_mbtowc+0x1a>
 800eb40:	b14b      	cbz	r3, 800eb56 <__ascii_mbtowc+0x1e>
 800eb42:	7813      	ldrb	r3, [r2, #0]
 800eb44:	600b      	str	r3, [r1, #0]
 800eb46:	7812      	ldrb	r2, [r2, #0]
 800eb48:	1e10      	subs	r0, r2, #0
 800eb4a:	bf18      	it	ne
 800eb4c:	2001      	movne	r0, #1
 800eb4e:	b002      	add	sp, #8
 800eb50:	4770      	bx	lr
 800eb52:	4610      	mov	r0, r2
 800eb54:	e7fb      	b.n	800eb4e <__ascii_mbtowc+0x16>
 800eb56:	f06f 0001 	mvn.w	r0, #1
 800eb5a:	e7f8      	b.n	800eb4e <__ascii_mbtowc+0x16>

0800eb5c <memcpy>:
 800eb5c:	440a      	add	r2, r1
 800eb5e:	4291      	cmp	r1, r2
 800eb60:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb64:	d100      	bne.n	800eb68 <memcpy+0xc>
 800eb66:	4770      	bx	lr
 800eb68:	b510      	push	{r4, lr}
 800eb6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb72:	4291      	cmp	r1, r2
 800eb74:	d1f9      	bne.n	800eb6a <memcpy+0xe>
 800eb76:	bd10      	pop	{r4, pc}

0800eb78 <memmove>:
 800eb78:	4288      	cmp	r0, r1
 800eb7a:	b510      	push	{r4, lr}
 800eb7c:	eb01 0402 	add.w	r4, r1, r2
 800eb80:	d902      	bls.n	800eb88 <memmove+0x10>
 800eb82:	4284      	cmp	r4, r0
 800eb84:	4623      	mov	r3, r4
 800eb86:	d807      	bhi.n	800eb98 <memmove+0x20>
 800eb88:	1e43      	subs	r3, r0, #1
 800eb8a:	42a1      	cmp	r1, r4
 800eb8c:	d008      	beq.n	800eba0 <memmove+0x28>
 800eb8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb96:	e7f8      	b.n	800eb8a <memmove+0x12>
 800eb98:	4402      	add	r2, r0
 800eb9a:	4601      	mov	r1, r0
 800eb9c:	428a      	cmp	r2, r1
 800eb9e:	d100      	bne.n	800eba2 <memmove+0x2a>
 800eba0:	bd10      	pop	{r4, pc}
 800eba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eba6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ebaa:	e7f7      	b.n	800eb9c <memmove+0x24>

0800ebac <__malloc_lock>:
 800ebac:	4801      	ldr	r0, [pc, #4]	; (800ebb4 <__malloc_lock+0x8>)
 800ebae:	f7ff bf48 	b.w	800ea42 <__retarget_lock_acquire_recursive>
 800ebb2:	bf00      	nop
 800ebb4:	2000212c 	.word	0x2000212c

0800ebb8 <__malloc_unlock>:
 800ebb8:	4801      	ldr	r0, [pc, #4]	; (800ebc0 <__malloc_unlock+0x8>)
 800ebba:	f7ff bf43 	b.w	800ea44 <__retarget_lock_release_recursive>
 800ebbe:	bf00      	nop
 800ebc0:	2000212c 	.word	0x2000212c

0800ebc4 <_Balloc>:
 800ebc4:	b570      	push	{r4, r5, r6, lr}
 800ebc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ebc8:	4604      	mov	r4, r0
 800ebca:	460d      	mov	r5, r1
 800ebcc:	b976      	cbnz	r6, 800ebec <_Balloc+0x28>
 800ebce:	2010      	movs	r0, #16
 800ebd0:	f7fc f9f6 	bl	800afc0 <malloc>
 800ebd4:	4602      	mov	r2, r0
 800ebd6:	6260      	str	r0, [r4, #36]	; 0x24
 800ebd8:	b920      	cbnz	r0, 800ebe4 <_Balloc+0x20>
 800ebda:	4b18      	ldr	r3, [pc, #96]	; (800ec3c <_Balloc+0x78>)
 800ebdc:	4818      	ldr	r0, [pc, #96]	; (800ec40 <_Balloc+0x7c>)
 800ebde:	2166      	movs	r1, #102	; 0x66
 800ebe0:	f7fc f994 	bl	800af0c <__assert_func>
 800ebe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ebe8:	6006      	str	r6, [r0, #0]
 800ebea:	60c6      	str	r6, [r0, #12]
 800ebec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ebee:	68f3      	ldr	r3, [r6, #12]
 800ebf0:	b183      	cbz	r3, 800ec14 <_Balloc+0x50>
 800ebf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ebfa:	b9b8      	cbnz	r0, 800ec2c <_Balloc+0x68>
 800ebfc:	2101      	movs	r1, #1
 800ebfe:	fa01 f605 	lsl.w	r6, r1, r5
 800ec02:	1d72      	adds	r2, r6, #5
 800ec04:	0092      	lsls	r2, r2, #2
 800ec06:	4620      	mov	r0, r4
 800ec08:	f000 fc9d 	bl	800f546 <_calloc_r>
 800ec0c:	b160      	cbz	r0, 800ec28 <_Balloc+0x64>
 800ec0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ec12:	e00e      	b.n	800ec32 <_Balloc+0x6e>
 800ec14:	2221      	movs	r2, #33	; 0x21
 800ec16:	2104      	movs	r1, #4
 800ec18:	4620      	mov	r0, r4
 800ec1a:	f000 fc94 	bl	800f546 <_calloc_r>
 800ec1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec20:	60f0      	str	r0, [r6, #12]
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d1e4      	bne.n	800ebf2 <_Balloc+0x2e>
 800ec28:	2000      	movs	r0, #0
 800ec2a:	bd70      	pop	{r4, r5, r6, pc}
 800ec2c:	6802      	ldr	r2, [r0, #0]
 800ec2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ec32:	2300      	movs	r3, #0
 800ec34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec38:	e7f7      	b.n	800ec2a <_Balloc+0x66>
 800ec3a:	bf00      	nop
 800ec3c:	080105b0 	.word	0x080105b0
 800ec40:	0801087c 	.word	0x0801087c

0800ec44 <_Bfree>:
 800ec44:	b570      	push	{r4, r5, r6, lr}
 800ec46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ec48:	4605      	mov	r5, r0
 800ec4a:	460c      	mov	r4, r1
 800ec4c:	b976      	cbnz	r6, 800ec6c <_Bfree+0x28>
 800ec4e:	2010      	movs	r0, #16
 800ec50:	f7fc f9b6 	bl	800afc0 <malloc>
 800ec54:	4602      	mov	r2, r0
 800ec56:	6268      	str	r0, [r5, #36]	; 0x24
 800ec58:	b920      	cbnz	r0, 800ec64 <_Bfree+0x20>
 800ec5a:	4b09      	ldr	r3, [pc, #36]	; (800ec80 <_Bfree+0x3c>)
 800ec5c:	4809      	ldr	r0, [pc, #36]	; (800ec84 <_Bfree+0x40>)
 800ec5e:	218a      	movs	r1, #138	; 0x8a
 800ec60:	f7fc f954 	bl	800af0c <__assert_func>
 800ec64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec68:	6006      	str	r6, [r0, #0]
 800ec6a:	60c6      	str	r6, [r0, #12]
 800ec6c:	b13c      	cbz	r4, 800ec7e <_Bfree+0x3a>
 800ec6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ec70:	6862      	ldr	r2, [r4, #4]
 800ec72:	68db      	ldr	r3, [r3, #12]
 800ec74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec78:	6021      	str	r1, [r4, #0]
 800ec7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ec7e:	bd70      	pop	{r4, r5, r6, pc}
 800ec80:	080105b0 	.word	0x080105b0
 800ec84:	0801087c 	.word	0x0801087c

0800ec88 <__multadd>:
 800ec88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec8c:	690d      	ldr	r5, [r1, #16]
 800ec8e:	4607      	mov	r7, r0
 800ec90:	460c      	mov	r4, r1
 800ec92:	461e      	mov	r6, r3
 800ec94:	f101 0c14 	add.w	ip, r1, #20
 800ec98:	2000      	movs	r0, #0
 800ec9a:	f8dc 3000 	ldr.w	r3, [ip]
 800ec9e:	b299      	uxth	r1, r3
 800eca0:	fb02 6101 	mla	r1, r2, r1, r6
 800eca4:	0c1e      	lsrs	r6, r3, #16
 800eca6:	0c0b      	lsrs	r3, r1, #16
 800eca8:	fb02 3306 	mla	r3, r2, r6, r3
 800ecac:	b289      	uxth	r1, r1
 800ecae:	3001      	adds	r0, #1
 800ecb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ecb4:	4285      	cmp	r5, r0
 800ecb6:	f84c 1b04 	str.w	r1, [ip], #4
 800ecba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ecbe:	dcec      	bgt.n	800ec9a <__multadd+0x12>
 800ecc0:	b30e      	cbz	r6, 800ed06 <__multadd+0x7e>
 800ecc2:	68a3      	ldr	r3, [r4, #8]
 800ecc4:	42ab      	cmp	r3, r5
 800ecc6:	dc19      	bgt.n	800ecfc <__multadd+0x74>
 800ecc8:	6861      	ldr	r1, [r4, #4]
 800ecca:	4638      	mov	r0, r7
 800eccc:	3101      	adds	r1, #1
 800ecce:	f7ff ff79 	bl	800ebc4 <_Balloc>
 800ecd2:	4680      	mov	r8, r0
 800ecd4:	b928      	cbnz	r0, 800ece2 <__multadd+0x5a>
 800ecd6:	4602      	mov	r2, r0
 800ecd8:	4b0c      	ldr	r3, [pc, #48]	; (800ed0c <__multadd+0x84>)
 800ecda:	480d      	ldr	r0, [pc, #52]	; (800ed10 <__multadd+0x88>)
 800ecdc:	21b5      	movs	r1, #181	; 0xb5
 800ecde:	f7fc f915 	bl	800af0c <__assert_func>
 800ece2:	6922      	ldr	r2, [r4, #16]
 800ece4:	3202      	adds	r2, #2
 800ece6:	f104 010c 	add.w	r1, r4, #12
 800ecea:	0092      	lsls	r2, r2, #2
 800ecec:	300c      	adds	r0, #12
 800ecee:	f7ff ff35 	bl	800eb5c <memcpy>
 800ecf2:	4621      	mov	r1, r4
 800ecf4:	4638      	mov	r0, r7
 800ecf6:	f7ff ffa5 	bl	800ec44 <_Bfree>
 800ecfa:	4644      	mov	r4, r8
 800ecfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed00:	3501      	adds	r5, #1
 800ed02:	615e      	str	r6, [r3, #20]
 800ed04:	6125      	str	r5, [r4, #16]
 800ed06:	4620      	mov	r0, r4
 800ed08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed0c:	0801078d 	.word	0x0801078d
 800ed10:	0801087c 	.word	0x0801087c

0800ed14 <__s2b>:
 800ed14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed18:	460c      	mov	r4, r1
 800ed1a:	4615      	mov	r5, r2
 800ed1c:	461f      	mov	r7, r3
 800ed1e:	2209      	movs	r2, #9
 800ed20:	3308      	adds	r3, #8
 800ed22:	4606      	mov	r6, r0
 800ed24:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed28:	2100      	movs	r1, #0
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	db09      	blt.n	800ed44 <__s2b+0x30>
 800ed30:	4630      	mov	r0, r6
 800ed32:	f7ff ff47 	bl	800ebc4 <_Balloc>
 800ed36:	b940      	cbnz	r0, 800ed4a <__s2b+0x36>
 800ed38:	4602      	mov	r2, r0
 800ed3a:	4b19      	ldr	r3, [pc, #100]	; (800eda0 <__s2b+0x8c>)
 800ed3c:	4819      	ldr	r0, [pc, #100]	; (800eda4 <__s2b+0x90>)
 800ed3e:	21ce      	movs	r1, #206	; 0xce
 800ed40:	f7fc f8e4 	bl	800af0c <__assert_func>
 800ed44:	0052      	lsls	r2, r2, #1
 800ed46:	3101      	adds	r1, #1
 800ed48:	e7f0      	b.n	800ed2c <__s2b+0x18>
 800ed4a:	9b08      	ldr	r3, [sp, #32]
 800ed4c:	6143      	str	r3, [r0, #20]
 800ed4e:	2d09      	cmp	r5, #9
 800ed50:	f04f 0301 	mov.w	r3, #1
 800ed54:	6103      	str	r3, [r0, #16]
 800ed56:	dd16      	ble.n	800ed86 <__s2b+0x72>
 800ed58:	f104 0909 	add.w	r9, r4, #9
 800ed5c:	46c8      	mov	r8, r9
 800ed5e:	442c      	add	r4, r5
 800ed60:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ed64:	4601      	mov	r1, r0
 800ed66:	3b30      	subs	r3, #48	; 0x30
 800ed68:	220a      	movs	r2, #10
 800ed6a:	4630      	mov	r0, r6
 800ed6c:	f7ff ff8c 	bl	800ec88 <__multadd>
 800ed70:	45a0      	cmp	r8, r4
 800ed72:	d1f5      	bne.n	800ed60 <__s2b+0x4c>
 800ed74:	f1a5 0408 	sub.w	r4, r5, #8
 800ed78:	444c      	add	r4, r9
 800ed7a:	1b2d      	subs	r5, r5, r4
 800ed7c:	1963      	adds	r3, r4, r5
 800ed7e:	42bb      	cmp	r3, r7
 800ed80:	db04      	blt.n	800ed8c <__s2b+0x78>
 800ed82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed86:	340a      	adds	r4, #10
 800ed88:	2509      	movs	r5, #9
 800ed8a:	e7f6      	b.n	800ed7a <__s2b+0x66>
 800ed8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ed90:	4601      	mov	r1, r0
 800ed92:	3b30      	subs	r3, #48	; 0x30
 800ed94:	220a      	movs	r2, #10
 800ed96:	4630      	mov	r0, r6
 800ed98:	f7ff ff76 	bl	800ec88 <__multadd>
 800ed9c:	e7ee      	b.n	800ed7c <__s2b+0x68>
 800ed9e:	bf00      	nop
 800eda0:	0801078d 	.word	0x0801078d
 800eda4:	0801087c 	.word	0x0801087c

0800eda8 <__hi0bits>:
 800eda8:	0c03      	lsrs	r3, r0, #16
 800edaa:	041b      	lsls	r3, r3, #16
 800edac:	b9d3      	cbnz	r3, 800ede4 <__hi0bits+0x3c>
 800edae:	0400      	lsls	r0, r0, #16
 800edb0:	2310      	movs	r3, #16
 800edb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800edb6:	bf04      	itt	eq
 800edb8:	0200      	lsleq	r0, r0, #8
 800edba:	3308      	addeq	r3, #8
 800edbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800edc0:	bf04      	itt	eq
 800edc2:	0100      	lsleq	r0, r0, #4
 800edc4:	3304      	addeq	r3, #4
 800edc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800edca:	bf04      	itt	eq
 800edcc:	0080      	lsleq	r0, r0, #2
 800edce:	3302      	addeq	r3, #2
 800edd0:	2800      	cmp	r0, #0
 800edd2:	db05      	blt.n	800ede0 <__hi0bits+0x38>
 800edd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800edd8:	f103 0301 	add.w	r3, r3, #1
 800eddc:	bf08      	it	eq
 800edde:	2320      	moveq	r3, #32
 800ede0:	4618      	mov	r0, r3
 800ede2:	4770      	bx	lr
 800ede4:	2300      	movs	r3, #0
 800ede6:	e7e4      	b.n	800edb2 <__hi0bits+0xa>

0800ede8 <__lo0bits>:
 800ede8:	6803      	ldr	r3, [r0, #0]
 800edea:	f013 0207 	ands.w	r2, r3, #7
 800edee:	4601      	mov	r1, r0
 800edf0:	d00b      	beq.n	800ee0a <__lo0bits+0x22>
 800edf2:	07da      	lsls	r2, r3, #31
 800edf4:	d423      	bmi.n	800ee3e <__lo0bits+0x56>
 800edf6:	0798      	lsls	r0, r3, #30
 800edf8:	bf49      	itett	mi
 800edfa:	085b      	lsrmi	r3, r3, #1
 800edfc:	089b      	lsrpl	r3, r3, #2
 800edfe:	2001      	movmi	r0, #1
 800ee00:	600b      	strmi	r3, [r1, #0]
 800ee02:	bf5c      	itt	pl
 800ee04:	600b      	strpl	r3, [r1, #0]
 800ee06:	2002      	movpl	r0, #2
 800ee08:	4770      	bx	lr
 800ee0a:	b298      	uxth	r0, r3
 800ee0c:	b9a8      	cbnz	r0, 800ee3a <__lo0bits+0x52>
 800ee0e:	0c1b      	lsrs	r3, r3, #16
 800ee10:	2010      	movs	r0, #16
 800ee12:	b2da      	uxtb	r2, r3
 800ee14:	b90a      	cbnz	r2, 800ee1a <__lo0bits+0x32>
 800ee16:	3008      	adds	r0, #8
 800ee18:	0a1b      	lsrs	r3, r3, #8
 800ee1a:	071a      	lsls	r2, r3, #28
 800ee1c:	bf04      	itt	eq
 800ee1e:	091b      	lsreq	r3, r3, #4
 800ee20:	3004      	addeq	r0, #4
 800ee22:	079a      	lsls	r2, r3, #30
 800ee24:	bf04      	itt	eq
 800ee26:	089b      	lsreq	r3, r3, #2
 800ee28:	3002      	addeq	r0, #2
 800ee2a:	07da      	lsls	r2, r3, #31
 800ee2c:	d403      	bmi.n	800ee36 <__lo0bits+0x4e>
 800ee2e:	085b      	lsrs	r3, r3, #1
 800ee30:	f100 0001 	add.w	r0, r0, #1
 800ee34:	d005      	beq.n	800ee42 <__lo0bits+0x5a>
 800ee36:	600b      	str	r3, [r1, #0]
 800ee38:	4770      	bx	lr
 800ee3a:	4610      	mov	r0, r2
 800ee3c:	e7e9      	b.n	800ee12 <__lo0bits+0x2a>
 800ee3e:	2000      	movs	r0, #0
 800ee40:	4770      	bx	lr
 800ee42:	2020      	movs	r0, #32
 800ee44:	4770      	bx	lr
	...

0800ee48 <__i2b>:
 800ee48:	b510      	push	{r4, lr}
 800ee4a:	460c      	mov	r4, r1
 800ee4c:	2101      	movs	r1, #1
 800ee4e:	f7ff feb9 	bl	800ebc4 <_Balloc>
 800ee52:	4602      	mov	r2, r0
 800ee54:	b928      	cbnz	r0, 800ee62 <__i2b+0x1a>
 800ee56:	4b05      	ldr	r3, [pc, #20]	; (800ee6c <__i2b+0x24>)
 800ee58:	4805      	ldr	r0, [pc, #20]	; (800ee70 <__i2b+0x28>)
 800ee5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ee5e:	f7fc f855 	bl	800af0c <__assert_func>
 800ee62:	2301      	movs	r3, #1
 800ee64:	6144      	str	r4, [r0, #20]
 800ee66:	6103      	str	r3, [r0, #16]
 800ee68:	bd10      	pop	{r4, pc}
 800ee6a:	bf00      	nop
 800ee6c:	0801078d 	.word	0x0801078d
 800ee70:	0801087c 	.word	0x0801087c

0800ee74 <__multiply>:
 800ee74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee78:	4691      	mov	r9, r2
 800ee7a:	690a      	ldr	r2, [r1, #16]
 800ee7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	bfb8      	it	lt
 800ee84:	460b      	movlt	r3, r1
 800ee86:	460c      	mov	r4, r1
 800ee88:	bfbc      	itt	lt
 800ee8a:	464c      	movlt	r4, r9
 800ee8c:	4699      	movlt	r9, r3
 800ee8e:	6927      	ldr	r7, [r4, #16]
 800ee90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ee94:	68a3      	ldr	r3, [r4, #8]
 800ee96:	6861      	ldr	r1, [r4, #4]
 800ee98:	eb07 060a 	add.w	r6, r7, sl
 800ee9c:	42b3      	cmp	r3, r6
 800ee9e:	b085      	sub	sp, #20
 800eea0:	bfb8      	it	lt
 800eea2:	3101      	addlt	r1, #1
 800eea4:	f7ff fe8e 	bl	800ebc4 <_Balloc>
 800eea8:	b930      	cbnz	r0, 800eeb8 <__multiply+0x44>
 800eeaa:	4602      	mov	r2, r0
 800eeac:	4b44      	ldr	r3, [pc, #272]	; (800efc0 <__multiply+0x14c>)
 800eeae:	4845      	ldr	r0, [pc, #276]	; (800efc4 <__multiply+0x150>)
 800eeb0:	f240 115d 	movw	r1, #349	; 0x15d
 800eeb4:	f7fc f82a 	bl	800af0c <__assert_func>
 800eeb8:	f100 0514 	add.w	r5, r0, #20
 800eebc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eec0:	462b      	mov	r3, r5
 800eec2:	2200      	movs	r2, #0
 800eec4:	4543      	cmp	r3, r8
 800eec6:	d321      	bcc.n	800ef0c <__multiply+0x98>
 800eec8:	f104 0314 	add.w	r3, r4, #20
 800eecc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800eed0:	f109 0314 	add.w	r3, r9, #20
 800eed4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800eed8:	9202      	str	r2, [sp, #8]
 800eeda:	1b3a      	subs	r2, r7, r4
 800eedc:	3a15      	subs	r2, #21
 800eede:	f022 0203 	bic.w	r2, r2, #3
 800eee2:	3204      	adds	r2, #4
 800eee4:	f104 0115 	add.w	r1, r4, #21
 800eee8:	428f      	cmp	r7, r1
 800eeea:	bf38      	it	cc
 800eeec:	2204      	movcc	r2, #4
 800eeee:	9201      	str	r2, [sp, #4]
 800eef0:	9a02      	ldr	r2, [sp, #8]
 800eef2:	9303      	str	r3, [sp, #12]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d80c      	bhi.n	800ef12 <__multiply+0x9e>
 800eef8:	2e00      	cmp	r6, #0
 800eefa:	dd03      	ble.n	800ef04 <__multiply+0x90>
 800eefc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d05a      	beq.n	800efba <__multiply+0x146>
 800ef04:	6106      	str	r6, [r0, #16]
 800ef06:	b005      	add	sp, #20
 800ef08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef0c:	f843 2b04 	str.w	r2, [r3], #4
 800ef10:	e7d8      	b.n	800eec4 <__multiply+0x50>
 800ef12:	f8b3 a000 	ldrh.w	sl, [r3]
 800ef16:	f1ba 0f00 	cmp.w	sl, #0
 800ef1a:	d024      	beq.n	800ef66 <__multiply+0xf2>
 800ef1c:	f104 0e14 	add.w	lr, r4, #20
 800ef20:	46a9      	mov	r9, r5
 800ef22:	f04f 0c00 	mov.w	ip, #0
 800ef26:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ef2a:	f8d9 1000 	ldr.w	r1, [r9]
 800ef2e:	fa1f fb82 	uxth.w	fp, r2
 800ef32:	b289      	uxth	r1, r1
 800ef34:	fb0a 110b 	mla	r1, sl, fp, r1
 800ef38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ef3c:	f8d9 2000 	ldr.w	r2, [r9]
 800ef40:	4461      	add	r1, ip
 800ef42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ef46:	fb0a c20b 	mla	r2, sl, fp, ip
 800ef4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ef4e:	b289      	uxth	r1, r1
 800ef50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ef54:	4577      	cmp	r7, lr
 800ef56:	f849 1b04 	str.w	r1, [r9], #4
 800ef5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ef5e:	d8e2      	bhi.n	800ef26 <__multiply+0xb2>
 800ef60:	9a01      	ldr	r2, [sp, #4]
 800ef62:	f845 c002 	str.w	ip, [r5, r2]
 800ef66:	9a03      	ldr	r2, [sp, #12]
 800ef68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ef6c:	3304      	adds	r3, #4
 800ef6e:	f1b9 0f00 	cmp.w	r9, #0
 800ef72:	d020      	beq.n	800efb6 <__multiply+0x142>
 800ef74:	6829      	ldr	r1, [r5, #0]
 800ef76:	f104 0c14 	add.w	ip, r4, #20
 800ef7a:	46ae      	mov	lr, r5
 800ef7c:	f04f 0a00 	mov.w	sl, #0
 800ef80:	f8bc b000 	ldrh.w	fp, [ip]
 800ef84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ef88:	fb09 220b 	mla	r2, r9, fp, r2
 800ef8c:	4492      	add	sl, r2
 800ef8e:	b289      	uxth	r1, r1
 800ef90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ef94:	f84e 1b04 	str.w	r1, [lr], #4
 800ef98:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ef9c:	f8be 1000 	ldrh.w	r1, [lr]
 800efa0:	0c12      	lsrs	r2, r2, #16
 800efa2:	fb09 1102 	mla	r1, r9, r2, r1
 800efa6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800efaa:	4567      	cmp	r7, ip
 800efac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800efb0:	d8e6      	bhi.n	800ef80 <__multiply+0x10c>
 800efb2:	9a01      	ldr	r2, [sp, #4]
 800efb4:	50a9      	str	r1, [r5, r2]
 800efb6:	3504      	adds	r5, #4
 800efb8:	e79a      	b.n	800eef0 <__multiply+0x7c>
 800efba:	3e01      	subs	r6, #1
 800efbc:	e79c      	b.n	800eef8 <__multiply+0x84>
 800efbe:	bf00      	nop
 800efc0:	0801078d 	.word	0x0801078d
 800efc4:	0801087c 	.word	0x0801087c

0800efc8 <__pow5mult>:
 800efc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efcc:	4615      	mov	r5, r2
 800efce:	f012 0203 	ands.w	r2, r2, #3
 800efd2:	4606      	mov	r6, r0
 800efd4:	460f      	mov	r7, r1
 800efd6:	d007      	beq.n	800efe8 <__pow5mult+0x20>
 800efd8:	4c25      	ldr	r4, [pc, #148]	; (800f070 <__pow5mult+0xa8>)
 800efda:	3a01      	subs	r2, #1
 800efdc:	2300      	movs	r3, #0
 800efde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800efe2:	f7ff fe51 	bl	800ec88 <__multadd>
 800efe6:	4607      	mov	r7, r0
 800efe8:	10ad      	asrs	r5, r5, #2
 800efea:	d03d      	beq.n	800f068 <__pow5mult+0xa0>
 800efec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800efee:	b97c      	cbnz	r4, 800f010 <__pow5mult+0x48>
 800eff0:	2010      	movs	r0, #16
 800eff2:	f7fb ffe5 	bl	800afc0 <malloc>
 800eff6:	4602      	mov	r2, r0
 800eff8:	6270      	str	r0, [r6, #36]	; 0x24
 800effa:	b928      	cbnz	r0, 800f008 <__pow5mult+0x40>
 800effc:	4b1d      	ldr	r3, [pc, #116]	; (800f074 <__pow5mult+0xac>)
 800effe:	481e      	ldr	r0, [pc, #120]	; (800f078 <__pow5mult+0xb0>)
 800f000:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f004:	f7fb ff82 	bl	800af0c <__assert_func>
 800f008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f00c:	6004      	str	r4, [r0, #0]
 800f00e:	60c4      	str	r4, [r0, #12]
 800f010:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f018:	b94c      	cbnz	r4, 800f02e <__pow5mult+0x66>
 800f01a:	f240 2171 	movw	r1, #625	; 0x271
 800f01e:	4630      	mov	r0, r6
 800f020:	f7ff ff12 	bl	800ee48 <__i2b>
 800f024:	2300      	movs	r3, #0
 800f026:	f8c8 0008 	str.w	r0, [r8, #8]
 800f02a:	4604      	mov	r4, r0
 800f02c:	6003      	str	r3, [r0, #0]
 800f02e:	f04f 0900 	mov.w	r9, #0
 800f032:	07eb      	lsls	r3, r5, #31
 800f034:	d50a      	bpl.n	800f04c <__pow5mult+0x84>
 800f036:	4639      	mov	r1, r7
 800f038:	4622      	mov	r2, r4
 800f03a:	4630      	mov	r0, r6
 800f03c:	f7ff ff1a 	bl	800ee74 <__multiply>
 800f040:	4639      	mov	r1, r7
 800f042:	4680      	mov	r8, r0
 800f044:	4630      	mov	r0, r6
 800f046:	f7ff fdfd 	bl	800ec44 <_Bfree>
 800f04a:	4647      	mov	r7, r8
 800f04c:	106d      	asrs	r5, r5, #1
 800f04e:	d00b      	beq.n	800f068 <__pow5mult+0xa0>
 800f050:	6820      	ldr	r0, [r4, #0]
 800f052:	b938      	cbnz	r0, 800f064 <__pow5mult+0x9c>
 800f054:	4622      	mov	r2, r4
 800f056:	4621      	mov	r1, r4
 800f058:	4630      	mov	r0, r6
 800f05a:	f7ff ff0b 	bl	800ee74 <__multiply>
 800f05e:	6020      	str	r0, [r4, #0]
 800f060:	f8c0 9000 	str.w	r9, [r0]
 800f064:	4604      	mov	r4, r0
 800f066:	e7e4      	b.n	800f032 <__pow5mult+0x6a>
 800f068:	4638      	mov	r0, r7
 800f06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f06e:	bf00      	nop
 800f070:	080109c8 	.word	0x080109c8
 800f074:	080105b0 	.word	0x080105b0
 800f078:	0801087c 	.word	0x0801087c

0800f07c <__lshift>:
 800f07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f080:	460c      	mov	r4, r1
 800f082:	6849      	ldr	r1, [r1, #4]
 800f084:	6923      	ldr	r3, [r4, #16]
 800f086:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f08a:	68a3      	ldr	r3, [r4, #8]
 800f08c:	4607      	mov	r7, r0
 800f08e:	4691      	mov	r9, r2
 800f090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f094:	f108 0601 	add.w	r6, r8, #1
 800f098:	42b3      	cmp	r3, r6
 800f09a:	db0b      	blt.n	800f0b4 <__lshift+0x38>
 800f09c:	4638      	mov	r0, r7
 800f09e:	f7ff fd91 	bl	800ebc4 <_Balloc>
 800f0a2:	4605      	mov	r5, r0
 800f0a4:	b948      	cbnz	r0, 800f0ba <__lshift+0x3e>
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	4b2a      	ldr	r3, [pc, #168]	; (800f154 <__lshift+0xd8>)
 800f0aa:	482b      	ldr	r0, [pc, #172]	; (800f158 <__lshift+0xdc>)
 800f0ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f0b0:	f7fb ff2c 	bl	800af0c <__assert_func>
 800f0b4:	3101      	adds	r1, #1
 800f0b6:	005b      	lsls	r3, r3, #1
 800f0b8:	e7ee      	b.n	800f098 <__lshift+0x1c>
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	f100 0114 	add.w	r1, r0, #20
 800f0c0:	f100 0210 	add.w	r2, r0, #16
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	4553      	cmp	r3, sl
 800f0c8:	db37      	blt.n	800f13a <__lshift+0xbe>
 800f0ca:	6920      	ldr	r0, [r4, #16]
 800f0cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f0d0:	f104 0314 	add.w	r3, r4, #20
 800f0d4:	f019 091f 	ands.w	r9, r9, #31
 800f0d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f0dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f0e0:	d02f      	beq.n	800f142 <__lshift+0xc6>
 800f0e2:	f1c9 0e20 	rsb	lr, r9, #32
 800f0e6:	468a      	mov	sl, r1
 800f0e8:	f04f 0c00 	mov.w	ip, #0
 800f0ec:	681a      	ldr	r2, [r3, #0]
 800f0ee:	fa02 f209 	lsl.w	r2, r2, r9
 800f0f2:	ea42 020c 	orr.w	r2, r2, ip
 800f0f6:	f84a 2b04 	str.w	r2, [sl], #4
 800f0fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0fe:	4298      	cmp	r0, r3
 800f100:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f104:	d8f2      	bhi.n	800f0ec <__lshift+0x70>
 800f106:	1b03      	subs	r3, r0, r4
 800f108:	3b15      	subs	r3, #21
 800f10a:	f023 0303 	bic.w	r3, r3, #3
 800f10e:	3304      	adds	r3, #4
 800f110:	f104 0215 	add.w	r2, r4, #21
 800f114:	4290      	cmp	r0, r2
 800f116:	bf38      	it	cc
 800f118:	2304      	movcc	r3, #4
 800f11a:	f841 c003 	str.w	ip, [r1, r3]
 800f11e:	f1bc 0f00 	cmp.w	ip, #0
 800f122:	d001      	beq.n	800f128 <__lshift+0xac>
 800f124:	f108 0602 	add.w	r6, r8, #2
 800f128:	3e01      	subs	r6, #1
 800f12a:	4638      	mov	r0, r7
 800f12c:	612e      	str	r6, [r5, #16]
 800f12e:	4621      	mov	r1, r4
 800f130:	f7ff fd88 	bl	800ec44 <_Bfree>
 800f134:	4628      	mov	r0, r5
 800f136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f13a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f13e:	3301      	adds	r3, #1
 800f140:	e7c1      	b.n	800f0c6 <__lshift+0x4a>
 800f142:	3904      	subs	r1, #4
 800f144:	f853 2b04 	ldr.w	r2, [r3], #4
 800f148:	f841 2f04 	str.w	r2, [r1, #4]!
 800f14c:	4298      	cmp	r0, r3
 800f14e:	d8f9      	bhi.n	800f144 <__lshift+0xc8>
 800f150:	e7ea      	b.n	800f128 <__lshift+0xac>
 800f152:	bf00      	nop
 800f154:	0801078d 	.word	0x0801078d
 800f158:	0801087c 	.word	0x0801087c

0800f15c <__mcmp>:
 800f15c:	b530      	push	{r4, r5, lr}
 800f15e:	6902      	ldr	r2, [r0, #16]
 800f160:	690c      	ldr	r4, [r1, #16]
 800f162:	1b12      	subs	r2, r2, r4
 800f164:	d10e      	bne.n	800f184 <__mcmp+0x28>
 800f166:	f100 0314 	add.w	r3, r0, #20
 800f16a:	3114      	adds	r1, #20
 800f16c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f170:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f174:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f178:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f17c:	42a5      	cmp	r5, r4
 800f17e:	d003      	beq.n	800f188 <__mcmp+0x2c>
 800f180:	d305      	bcc.n	800f18e <__mcmp+0x32>
 800f182:	2201      	movs	r2, #1
 800f184:	4610      	mov	r0, r2
 800f186:	bd30      	pop	{r4, r5, pc}
 800f188:	4283      	cmp	r3, r0
 800f18a:	d3f3      	bcc.n	800f174 <__mcmp+0x18>
 800f18c:	e7fa      	b.n	800f184 <__mcmp+0x28>
 800f18e:	f04f 32ff 	mov.w	r2, #4294967295
 800f192:	e7f7      	b.n	800f184 <__mcmp+0x28>

0800f194 <__mdiff>:
 800f194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f198:	460c      	mov	r4, r1
 800f19a:	4606      	mov	r6, r0
 800f19c:	4611      	mov	r1, r2
 800f19e:	4620      	mov	r0, r4
 800f1a0:	4690      	mov	r8, r2
 800f1a2:	f7ff ffdb 	bl	800f15c <__mcmp>
 800f1a6:	1e05      	subs	r5, r0, #0
 800f1a8:	d110      	bne.n	800f1cc <__mdiff+0x38>
 800f1aa:	4629      	mov	r1, r5
 800f1ac:	4630      	mov	r0, r6
 800f1ae:	f7ff fd09 	bl	800ebc4 <_Balloc>
 800f1b2:	b930      	cbnz	r0, 800f1c2 <__mdiff+0x2e>
 800f1b4:	4b3a      	ldr	r3, [pc, #232]	; (800f2a0 <__mdiff+0x10c>)
 800f1b6:	4602      	mov	r2, r0
 800f1b8:	f240 2132 	movw	r1, #562	; 0x232
 800f1bc:	4839      	ldr	r0, [pc, #228]	; (800f2a4 <__mdiff+0x110>)
 800f1be:	f7fb fea5 	bl	800af0c <__assert_func>
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f1c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1cc:	bfa4      	itt	ge
 800f1ce:	4643      	movge	r3, r8
 800f1d0:	46a0      	movge	r8, r4
 800f1d2:	4630      	mov	r0, r6
 800f1d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f1d8:	bfa6      	itte	ge
 800f1da:	461c      	movge	r4, r3
 800f1dc:	2500      	movge	r5, #0
 800f1de:	2501      	movlt	r5, #1
 800f1e0:	f7ff fcf0 	bl	800ebc4 <_Balloc>
 800f1e4:	b920      	cbnz	r0, 800f1f0 <__mdiff+0x5c>
 800f1e6:	4b2e      	ldr	r3, [pc, #184]	; (800f2a0 <__mdiff+0x10c>)
 800f1e8:	4602      	mov	r2, r0
 800f1ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f1ee:	e7e5      	b.n	800f1bc <__mdiff+0x28>
 800f1f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f1f4:	6926      	ldr	r6, [r4, #16]
 800f1f6:	60c5      	str	r5, [r0, #12]
 800f1f8:	f104 0914 	add.w	r9, r4, #20
 800f1fc:	f108 0514 	add.w	r5, r8, #20
 800f200:	f100 0e14 	add.w	lr, r0, #20
 800f204:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f208:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f20c:	f108 0210 	add.w	r2, r8, #16
 800f210:	46f2      	mov	sl, lr
 800f212:	2100      	movs	r1, #0
 800f214:	f859 3b04 	ldr.w	r3, [r9], #4
 800f218:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f21c:	fa1f f883 	uxth.w	r8, r3
 800f220:	fa11 f18b 	uxtah	r1, r1, fp
 800f224:	0c1b      	lsrs	r3, r3, #16
 800f226:	eba1 0808 	sub.w	r8, r1, r8
 800f22a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f22e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f232:	fa1f f888 	uxth.w	r8, r8
 800f236:	1419      	asrs	r1, r3, #16
 800f238:	454e      	cmp	r6, r9
 800f23a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f23e:	f84a 3b04 	str.w	r3, [sl], #4
 800f242:	d8e7      	bhi.n	800f214 <__mdiff+0x80>
 800f244:	1b33      	subs	r3, r6, r4
 800f246:	3b15      	subs	r3, #21
 800f248:	f023 0303 	bic.w	r3, r3, #3
 800f24c:	3304      	adds	r3, #4
 800f24e:	3415      	adds	r4, #21
 800f250:	42a6      	cmp	r6, r4
 800f252:	bf38      	it	cc
 800f254:	2304      	movcc	r3, #4
 800f256:	441d      	add	r5, r3
 800f258:	4473      	add	r3, lr
 800f25a:	469e      	mov	lr, r3
 800f25c:	462e      	mov	r6, r5
 800f25e:	4566      	cmp	r6, ip
 800f260:	d30e      	bcc.n	800f280 <__mdiff+0xec>
 800f262:	f10c 0203 	add.w	r2, ip, #3
 800f266:	1b52      	subs	r2, r2, r5
 800f268:	f022 0203 	bic.w	r2, r2, #3
 800f26c:	3d03      	subs	r5, #3
 800f26e:	45ac      	cmp	ip, r5
 800f270:	bf38      	it	cc
 800f272:	2200      	movcc	r2, #0
 800f274:	441a      	add	r2, r3
 800f276:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f27a:	b17b      	cbz	r3, 800f29c <__mdiff+0x108>
 800f27c:	6107      	str	r7, [r0, #16]
 800f27e:	e7a3      	b.n	800f1c8 <__mdiff+0x34>
 800f280:	f856 8b04 	ldr.w	r8, [r6], #4
 800f284:	fa11 f288 	uxtah	r2, r1, r8
 800f288:	1414      	asrs	r4, r2, #16
 800f28a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f28e:	b292      	uxth	r2, r2
 800f290:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f294:	f84e 2b04 	str.w	r2, [lr], #4
 800f298:	1421      	asrs	r1, r4, #16
 800f29a:	e7e0      	b.n	800f25e <__mdiff+0xca>
 800f29c:	3f01      	subs	r7, #1
 800f29e:	e7ea      	b.n	800f276 <__mdiff+0xe2>
 800f2a0:	0801078d 	.word	0x0801078d
 800f2a4:	0801087c 	.word	0x0801087c

0800f2a8 <__ulp>:
 800f2a8:	b082      	sub	sp, #8
 800f2aa:	ed8d 0b00 	vstr	d0, [sp]
 800f2ae:	9b01      	ldr	r3, [sp, #4]
 800f2b0:	4912      	ldr	r1, [pc, #72]	; (800f2fc <__ulp+0x54>)
 800f2b2:	4019      	ands	r1, r3
 800f2b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f2b8:	2900      	cmp	r1, #0
 800f2ba:	dd05      	ble.n	800f2c8 <__ulp+0x20>
 800f2bc:	2200      	movs	r2, #0
 800f2be:	460b      	mov	r3, r1
 800f2c0:	ec43 2b10 	vmov	d0, r2, r3
 800f2c4:	b002      	add	sp, #8
 800f2c6:	4770      	bx	lr
 800f2c8:	4249      	negs	r1, r1
 800f2ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f2ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f2d2:	f04f 0200 	mov.w	r2, #0
 800f2d6:	f04f 0300 	mov.w	r3, #0
 800f2da:	da04      	bge.n	800f2e6 <__ulp+0x3e>
 800f2dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f2e0:	fa41 f300 	asr.w	r3, r1, r0
 800f2e4:	e7ec      	b.n	800f2c0 <__ulp+0x18>
 800f2e6:	f1a0 0114 	sub.w	r1, r0, #20
 800f2ea:	291e      	cmp	r1, #30
 800f2ec:	bfda      	itte	le
 800f2ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f2f2:	fa20 f101 	lsrle.w	r1, r0, r1
 800f2f6:	2101      	movgt	r1, #1
 800f2f8:	460a      	mov	r2, r1
 800f2fa:	e7e1      	b.n	800f2c0 <__ulp+0x18>
 800f2fc:	7ff00000 	.word	0x7ff00000

0800f300 <__b2d>:
 800f300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f302:	6905      	ldr	r5, [r0, #16]
 800f304:	f100 0714 	add.w	r7, r0, #20
 800f308:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f30c:	1f2e      	subs	r6, r5, #4
 800f30e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f312:	4620      	mov	r0, r4
 800f314:	f7ff fd48 	bl	800eda8 <__hi0bits>
 800f318:	f1c0 0320 	rsb	r3, r0, #32
 800f31c:	280a      	cmp	r0, #10
 800f31e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f39c <__b2d+0x9c>
 800f322:	600b      	str	r3, [r1, #0]
 800f324:	dc14      	bgt.n	800f350 <__b2d+0x50>
 800f326:	f1c0 0e0b 	rsb	lr, r0, #11
 800f32a:	fa24 f10e 	lsr.w	r1, r4, lr
 800f32e:	42b7      	cmp	r7, r6
 800f330:	ea41 030c 	orr.w	r3, r1, ip
 800f334:	bf34      	ite	cc
 800f336:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f33a:	2100      	movcs	r1, #0
 800f33c:	3015      	adds	r0, #21
 800f33e:	fa04 f000 	lsl.w	r0, r4, r0
 800f342:	fa21 f10e 	lsr.w	r1, r1, lr
 800f346:	ea40 0201 	orr.w	r2, r0, r1
 800f34a:	ec43 2b10 	vmov	d0, r2, r3
 800f34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f350:	42b7      	cmp	r7, r6
 800f352:	bf3a      	itte	cc
 800f354:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f358:	f1a5 0608 	subcc.w	r6, r5, #8
 800f35c:	2100      	movcs	r1, #0
 800f35e:	380b      	subs	r0, #11
 800f360:	d017      	beq.n	800f392 <__b2d+0x92>
 800f362:	f1c0 0c20 	rsb	ip, r0, #32
 800f366:	fa04 f500 	lsl.w	r5, r4, r0
 800f36a:	42be      	cmp	r6, r7
 800f36c:	fa21 f40c 	lsr.w	r4, r1, ip
 800f370:	ea45 0504 	orr.w	r5, r5, r4
 800f374:	bf8c      	ite	hi
 800f376:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f37a:	2400      	movls	r4, #0
 800f37c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f380:	fa01 f000 	lsl.w	r0, r1, r0
 800f384:	fa24 f40c 	lsr.w	r4, r4, ip
 800f388:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f38c:	ea40 0204 	orr.w	r2, r0, r4
 800f390:	e7db      	b.n	800f34a <__b2d+0x4a>
 800f392:	ea44 030c 	orr.w	r3, r4, ip
 800f396:	460a      	mov	r2, r1
 800f398:	e7d7      	b.n	800f34a <__b2d+0x4a>
 800f39a:	bf00      	nop
 800f39c:	3ff00000 	.word	0x3ff00000

0800f3a0 <__d2b>:
 800f3a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3a4:	4689      	mov	r9, r1
 800f3a6:	2101      	movs	r1, #1
 800f3a8:	ec57 6b10 	vmov	r6, r7, d0
 800f3ac:	4690      	mov	r8, r2
 800f3ae:	f7ff fc09 	bl	800ebc4 <_Balloc>
 800f3b2:	4604      	mov	r4, r0
 800f3b4:	b930      	cbnz	r0, 800f3c4 <__d2b+0x24>
 800f3b6:	4602      	mov	r2, r0
 800f3b8:	4b25      	ldr	r3, [pc, #148]	; (800f450 <__d2b+0xb0>)
 800f3ba:	4826      	ldr	r0, [pc, #152]	; (800f454 <__d2b+0xb4>)
 800f3bc:	f240 310a 	movw	r1, #778	; 0x30a
 800f3c0:	f7fb fda4 	bl	800af0c <__assert_func>
 800f3c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f3c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f3cc:	bb35      	cbnz	r5, 800f41c <__d2b+0x7c>
 800f3ce:	2e00      	cmp	r6, #0
 800f3d0:	9301      	str	r3, [sp, #4]
 800f3d2:	d028      	beq.n	800f426 <__d2b+0x86>
 800f3d4:	4668      	mov	r0, sp
 800f3d6:	9600      	str	r6, [sp, #0]
 800f3d8:	f7ff fd06 	bl	800ede8 <__lo0bits>
 800f3dc:	9900      	ldr	r1, [sp, #0]
 800f3de:	b300      	cbz	r0, 800f422 <__d2b+0x82>
 800f3e0:	9a01      	ldr	r2, [sp, #4]
 800f3e2:	f1c0 0320 	rsb	r3, r0, #32
 800f3e6:	fa02 f303 	lsl.w	r3, r2, r3
 800f3ea:	430b      	orrs	r3, r1
 800f3ec:	40c2      	lsrs	r2, r0
 800f3ee:	6163      	str	r3, [r4, #20]
 800f3f0:	9201      	str	r2, [sp, #4]
 800f3f2:	9b01      	ldr	r3, [sp, #4]
 800f3f4:	61a3      	str	r3, [r4, #24]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	bf14      	ite	ne
 800f3fa:	2202      	movne	r2, #2
 800f3fc:	2201      	moveq	r2, #1
 800f3fe:	6122      	str	r2, [r4, #16]
 800f400:	b1d5      	cbz	r5, 800f438 <__d2b+0x98>
 800f402:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f406:	4405      	add	r5, r0
 800f408:	f8c9 5000 	str.w	r5, [r9]
 800f40c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f410:	f8c8 0000 	str.w	r0, [r8]
 800f414:	4620      	mov	r0, r4
 800f416:	b003      	add	sp, #12
 800f418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f41c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f420:	e7d5      	b.n	800f3ce <__d2b+0x2e>
 800f422:	6161      	str	r1, [r4, #20]
 800f424:	e7e5      	b.n	800f3f2 <__d2b+0x52>
 800f426:	a801      	add	r0, sp, #4
 800f428:	f7ff fcde 	bl	800ede8 <__lo0bits>
 800f42c:	9b01      	ldr	r3, [sp, #4]
 800f42e:	6163      	str	r3, [r4, #20]
 800f430:	2201      	movs	r2, #1
 800f432:	6122      	str	r2, [r4, #16]
 800f434:	3020      	adds	r0, #32
 800f436:	e7e3      	b.n	800f400 <__d2b+0x60>
 800f438:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f43c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f440:	f8c9 0000 	str.w	r0, [r9]
 800f444:	6918      	ldr	r0, [r3, #16]
 800f446:	f7ff fcaf 	bl	800eda8 <__hi0bits>
 800f44a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f44e:	e7df      	b.n	800f410 <__d2b+0x70>
 800f450:	0801078d 	.word	0x0801078d
 800f454:	0801087c 	.word	0x0801087c

0800f458 <__ratio>:
 800f458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f45c:	4688      	mov	r8, r1
 800f45e:	4669      	mov	r1, sp
 800f460:	4681      	mov	r9, r0
 800f462:	f7ff ff4d 	bl	800f300 <__b2d>
 800f466:	a901      	add	r1, sp, #4
 800f468:	4640      	mov	r0, r8
 800f46a:	ec55 4b10 	vmov	r4, r5, d0
 800f46e:	f7ff ff47 	bl	800f300 <__b2d>
 800f472:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f476:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f47a:	eba3 0c02 	sub.w	ip, r3, r2
 800f47e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f482:	1a9b      	subs	r3, r3, r2
 800f484:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f488:	ec51 0b10 	vmov	r0, r1, d0
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	bfd6      	itet	le
 800f490:	460a      	movle	r2, r1
 800f492:	462a      	movgt	r2, r5
 800f494:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f498:	468b      	mov	fp, r1
 800f49a:	462f      	mov	r7, r5
 800f49c:	bfd4      	ite	le
 800f49e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f4a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	ee10 2a10 	vmov	r2, s0
 800f4ac:	465b      	mov	r3, fp
 800f4ae:	4639      	mov	r1, r7
 800f4b0:	f7f1 f9dc 	bl	800086c <__aeabi_ddiv>
 800f4b4:	ec41 0b10 	vmov	d0, r0, r1
 800f4b8:	b003      	add	sp, #12
 800f4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4be <__copybits>:
 800f4be:	3901      	subs	r1, #1
 800f4c0:	b570      	push	{r4, r5, r6, lr}
 800f4c2:	1149      	asrs	r1, r1, #5
 800f4c4:	6914      	ldr	r4, [r2, #16]
 800f4c6:	3101      	adds	r1, #1
 800f4c8:	f102 0314 	add.w	r3, r2, #20
 800f4cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f4d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f4d4:	1f05      	subs	r5, r0, #4
 800f4d6:	42a3      	cmp	r3, r4
 800f4d8:	d30c      	bcc.n	800f4f4 <__copybits+0x36>
 800f4da:	1aa3      	subs	r3, r4, r2
 800f4dc:	3b11      	subs	r3, #17
 800f4de:	f023 0303 	bic.w	r3, r3, #3
 800f4e2:	3211      	adds	r2, #17
 800f4e4:	42a2      	cmp	r2, r4
 800f4e6:	bf88      	it	hi
 800f4e8:	2300      	movhi	r3, #0
 800f4ea:	4418      	add	r0, r3
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	4288      	cmp	r0, r1
 800f4f0:	d305      	bcc.n	800f4fe <__copybits+0x40>
 800f4f2:	bd70      	pop	{r4, r5, r6, pc}
 800f4f4:	f853 6b04 	ldr.w	r6, [r3], #4
 800f4f8:	f845 6f04 	str.w	r6, [r5, #4]!
 800f4fc:	e7eb      	b.n	800f4d6 <__copybits+0x18>
 800f4fe:	f840 3b04 	str.w	r3, [r0], #4
 800f502:	e7f4      	b.n	800f4ee <__copybits+0x30>

0800f504 <__any_on>:
 800f504:	f100 0214 	add.w	r2, r0, #20
 800f508:	6900      	ldr	r0, [r0, #16]
 800f50a:	114b      	asrs	r3, r1, #5
 800f50c:	4298      	cmp	r0, r3
 800f50e:	b510      	push	{r4, lr}
 800f510:	db11      	blt.n	800f536 <__any_on+0x32>
 800f512:	dd0a      	ble.n	800f52a <__any_on+0x26>
 800f514:	f011 011f 	ands.w	r1, r1, #31
 800f518:	d007      	beq.n	800f52a <__any_on+0x26>
 800f51a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f51e:	fa24 f001 	lsr.w	r0, r4, r1
 800f522:	fa00 f101 	lsl.w	r1, r0, r1
 800f526:	428c      	cmp	r4, r1
 800f528:	d10b      	bne.n	800f542 <__any_on+0x3e>
 800f52a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f52e:	4293      	cmp	r3, r2
 800f530:	d803      	bhi.n	800f53a <__any_on+0x36>
 800f532:	2000      	movs	r0, #0
 800f534:	bd10      	pop	{r4, pc}
 800f536:	4603      	mov	r3, r0
 800f538:	e7f7      	b.n	800f52a <__any_on+0x26>
 800f53a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f53e:	2900      	cmp	r1, #0
 800f540:	d0f5      	beq.n	800f52e <__any_on+0x2a>
 800f542:	2001      	movs	r0, #1
 800f544:	e7f6      	b.n	800f534 <__any_on+0x30>

0800f546 <_calloc_r>:
 800f546:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f548:	fba1 2402 	umull	r2, r4, r1, r2
 800f54c:	b94c      	cbnz	r4, 800f562 <_calloc_r+0x1c>
 800f54e:	4611      	mov	r1, r2
 800f550:	9201      	str	r2, [sp, #4]
 800f552:	f7fb fdb9 	bl	800b0c8 <_malloc_r>
 800f556:	9a01      	ldr	r2, [sp, #4]
 800f558:	4605      	mov	r5, r0
 800f55a:	b930      	cbnz	r0, 800f56a <_calloc_r+0x24>
 800f55c:	4628      	mov	r0, r5
 800f55e:	b003      	add	sp, #12
 800f560:	bd30      	pop	{r4, r5, pc}
 800f562:	220c      	movs	r2, #12
 800f564:	6002      	str	r2, [r0, #0]
 800f566:	2500      	movs	r5, #0
 800f568:	e7f8      	b.n	800f55c <_calloc_r+0x16>
 800f56a:	4621      	mov	r1, r4
 800f56c:	f7fb fd38 	bl	800afe0 <memset>
 800f570:	e7f4      	b.n	800f55c <_calloc_r+0x16>

0800f572 <_realloc_r>:
 800f572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f576:	4680      	mov	r8, r0
 800f578:	4614      	mov	r4, r2
 800f57a:	460e      	mov	r6, r1
 800f57c:	b921      	cbnz	r1, 800f588 <_realloc_r+0x16>
 800f57e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f582:	4611      	mov	r1, r2
 800f584:	f7fb bda0 	b.w	800b0c8 <_malloc_r>
 800f588:	b92a      	cbnz	r2, 800f596 <_realloc_r+0x24>
 800f58a:	f7fb fd31 	bl	800aff0 <_free_r>
 800f58e:	4625      	mov	r5, r4
 800f590:	4628      	mov	r0, r5
 800f592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f596:	f000 fe6d 	bl	8010274 <_malloc_usable_size_r>
 800f59a:	4284      	cmp	r4, r0
 800f59c:	4607      	mov	r7, r0
 800f59e:	d802      	bhi.n	800f5a6 <_realloc_r+0x34>
 800f5a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f5a4:	d812      	bhi.n	800f5cc <_realloc_r+0x5a>
 800f5a6:	4621      	mov	r1, r4
 800f5a8:	4640      	mov	r0, r8
 800f5aa:	f7fb fd8d 	bl	800b0c8 <_malloc_r>
 800f5ae:	4605      	mov	r5, r0
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	d0ed      	beq.n	800f590 <_realloc_r+0x1e>
 800f5b4:	42bc      	cmp	r4, r7
 800f5b6:	4622      	mov	r2, r4
 800f5b8:	4631      	mov	r1, r6
 800f5ba:	bf28      	it	cs
 800f5bc:	463a      	movcs	r2, r7
 800f5be:	f7ff facd 	bl	800eb5c <memcpy>
 800f5c2:	4631      	mov	r1, r6
 800f5c4:	4640      	mov	r0, r8
 800f5c6:	f7fb fd13 	bl	800aff0 <_free_r>
 800f5ca:	e7e1      	b.n	800f590 <_realloc_r+0x1e>
 800f5cc:	4635      	mov	r5, r6
 800f5ce:	e7df      	b.n	800f590 <_realloc_r+0x1e>

0800f5d0 <__ssputs_r>:
 800f5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5d4:	688e      	ldr	r6, [r1, #8]
 800f5d6:	429e      	cmp	r6, r3
 800f5d8:	4682      	mov	sl, r0
 800f5da:	460c      	mov	r4, r1
 800f5dc:	4690      	mov	r8, r2
 800f5de:	461f      	mov	r7, r3
 800f5e0:	d838      	bhi.n	800f654 <__ssputs_r+0x84>
 800f5e2:	898a      	ldrh	r2, [r1, #12]
 800f5e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f5e8:	d032      	beq.n	800f650 <__ssputs_r+0x80>
 800f5ea:	6825      	ldr	r5, [r4, #0]
 800f5ec:	6909      	ldr	r1, [r1, #16]
 800f5ee:	eba5 0901 	sub.w	r9, r5, r1
 800f5f2:	6965      	ldr	r5, [r4, #20]
 800f5f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	444b      	add	r3, r9
 800f600:	106d      	asrs	r5, r5, #1
 800f602:	429d      	cmp	r5, r3
 800f604:	bf38      	it	cc
 800f606:	461d      	movcc	r5, r3
 800f608:	0553      	lsls	r3, r2, #21
 800f60a:	d531      	bpl.n	800f670 <__ssputs_r+0xa0>
 800f60c:	4629      	mov	r1, r5
 800f60e:	f7fb fd5b 	bl	800b0c8 <_malloc_r>
 800f612:	4606      	mov	r6, r0
 800f614:	b950      	cbnz	r0, 800f62c <__ssputs_r+0x5c>
 800f616:	230c      	movs	r3, #12
 800f618:	f8ca 3000 	str.w	r3, [sl]
 800f61c:	89a3      	ldrh	r3, [r4, #12]
 800f61e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f622:	81a3      	strh	r3, [r4, #12]
 800f624:	f04f 30ff 	mov.w	r0, #4294967295
 800f628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f62c:	6921      	ldr	r1, [r4, #16]
 800f62e:	464a      	mov	r2, r9
 800f630:	f7ff fa94 	bl	800eb5c <memcpy>
 800f634:	89a3      	ldrh	r3, [r4, #12]
 800f636:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f63a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f63e:	81a3      	strh	r3, [r4, #12]
 800f640:	6126      	str	r6, [r4, #16]
 800f642:	6165      	str	r5, [r4, #20]
 800f644:	444e      	add	r6, r9
 800f646:	eba5 0509 	sub.w	r5, r5, r9
 800f64a:	6026      	str	r6, [r4, #0]
 800f64c:	60a5      	str	r5, [r4, #8]
 800f64e:	463e      	mov	r6, r7
 800f650:	42be      	cmp	r6, r7
 800f652:	d900      	bls.n	800f656 <__ssputs_r+0x86>
 800f654:	463e      	mov	r6, r7
 800f656:	6820      	ldr	r0, [r4, #0]
 800f658:	4632      	mov	r2, r6
 800f65a:	4641      	mov	r1, r8
 800f65c:	f7ff fa8c 	bl	800eb78 <memmove>
 800f660:	68a3      	ldr	r3, [r4, #8]
 800f662:	1b9b      	subs	r3, r3, r6
 800f664:	60a3      	str	r3, [r4, #8]
 800f666:	6823      	ldr	r3, [r4, #0]
 800f668:	4433      	add	r3, r6
 800f66a:	6023      	str	r3, [r4, #0]
 800f66c:	2000      	movs	r0, #0
 800f66e:	e7db      	b.n	800f628 <__ssputs_r+0x58>
 800f670:	462a      	mov	r2, r5
 800f672:	f7ff ff7e 	bl	800f572 <_realloc_r>
 800f676:	4606      	mov	r6, r0
 800f678:	2800      	cmp	r0, #0
 800f67a:	d1e1      	bne.n	800f640 <__ssputs_r+0x70>
 800f67c:	6921      	ldr	r1, [r4, #16]
 800f67e:	4650      	mov	r0, sl
 800f680:	f7fb fcb6 	bl	800aff0 <_free_r>
 800f684:	e7c7      	b.n	800f616 <__ssputs_r+0x46>
	...

0800f688 <_svfiprintf_r>:
 800f688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f68c:	4698      	mov	r8, r3
 800f68e:	898b      	ldrh	r3, [r1, #12]
 800f690:	061b      	lsls	r3, r3, #24
 800f692:	b09d      	sub	sp, #116	; 0x74
 800f694:	4607      	mov	r7, r0
 800f696:	460d      	mov	r5, r1
 800f698:	4614      	mov	r4, r2
 800f69a:	d50e      	bpl.n	800f6ba <_svfiprintf_r+0x32>
 800f69c:	690b      	ldr	r3, [r1, #16]
 800f69e:	b963      	cbnz	r3, 800f6ba <_svfiprintf_r+0x32>
 800f6a0:	2140      	movs	r1, #64	; 0x40
 800f6a2:	f7fb fd11 	bl	800b0c8 <_malloc_r>
 800f6a6:	6028      	str	r0, [r5, #0]
 800f6a8:	6128      	str	r0, [r5, #16]
 800f6aa:	b920      	cbnz	r0, 800f6b6 <_svfiprintf_r+0x2e>
 800f6ac:	230c      	movs	r3, #12
 800f6ae:	603b      	str	r3, [r7, #0]
 800f6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6b4:	e0d1      	b.n	800f85a <_svfiprintf_r+0x1d2>
 800f6b6:	2340      	movs	r3, #64	; 0x40
 800f6b8:	616b      	str	r3, [r5, #20]
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f6be:	2320      	movs	r3, #32
 800f6c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6c8:	2330      	movs	r3, #48	; 0x30
 800f6ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f874 <_svfiprintf_r+0x1ec>
 800f6ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6d2:	f04f 0901 	mov.w	r9, #1
 800f6d6:	4623      	mov	r3, r4
 800f6d8:	469a      	mov	sl, r3
 800f6da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6de:	b10a      	cbz	r2, 800f6e4 <_svfiprintf_r+0x5c>
 800f6e0:	2a25      	cmp	r2, #37	; 0x25
 800f6e2:	d1f9      	bne.n	800f6d8 <_svfiprintf_r+0x50>
 800f6e4:	ebba 0b04 	subs.w	fp, sl, r4
 800f6e8:	d00b      	beq.n	800f702 <_svfiprintf_r+0x7a>
 800f6ea:	465b      	mov	r3, fp
 800f6ec:	4622      	mov	r2, r4
 800f6ee:	4629      	mov	r1, r5
 800f6f0:	4638      	mov	r0, r7
 800f6f2:	f7ff ff6d 	bl	800f5d0 <__ssputs_r>
 800f6f6:	3001      	adds	r0, #1
 800f6f8:	f000 80aa 	beq.w	800f850 <_svfiprintf_r+0x1c8>
 800f6fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6fe:	445a      	add	r2, fp
 800f700:	9209      	str	r2, [sp, #36]	; 0x24
 800f702:	f89a 3000 	ldrb.w	r3, [sl]
 800f706:	2b00      	cmp	r3, #0
 800f708:	f000 80a2 	beq.w	800f850 <_svfiprintf_r+0x1c8>
 800f70c:	2300      	movs	r3, #0
 800f70e:	f04f 32ff 	mov.w	r2, #4294967295
 800f712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f716:	f10a 0a01 	add.w	sl, sl, #1
 800f71a:	9304      	str	r3, [sp, #16]
 800f71c:	9307      	str	r3, [sp, #28]
 800f71e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f722:	931a      	str	r3, [sp, #104]	; 0x68
 800f724:	4654      	mov	r4, sl
 800f726:	2205      	movs	r2, #5
 800f728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f72c:	4851      	ldr	r0, [pc, #324]	; (800f874 <_svfiprintf_r+0x1ec>)
 800f72e:	f7f0 fd67 	bl	8000200 <memchr>
 800f732:	9a04      	ldr	r2, [sp, #16]
 800f734:	b9d8      	cbnz	r0, 800f76e <_svfiprintf_r+0xe6>
 800f736:	06d0      	lsls	r0, r2, #27
 800f738:	bf44      	itt	mi
 800f73a:	2320      	movmi	r3, #32
 800f73c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f740:	0711      	lsls	r1, r2, #28
 800f742:	bf44      	itt	mi
 800f744:	232b      	movmi	r3, #43	; 0x2b
 800f746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f74a:	f89a 3000 	ldrb.w	r3, [sl]
 800f74e:	2b2a      	cmp	r3, #42	; 0x2a
 800f750:	d015      	beq.n	800f77e <_svfiprintf_r+0xf6>
 800f752:	9a07      	ldr	r2, [sp, #28]
 800f754:	4654      	mov	r4, sl
 800f756:	2000      	movs	r0, #0
 800f758:	f04f 0c0a 	mov.w	ip, #10
 800f75c:	4621      	mov	r1, r4
 800f75e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f762:	3b30      	subs	r3, #48	; 0x30
 800f764:	2b09      	cmp	r3, #9
 800f766:	d94e      	bls.n	800f806 <_svfiprintf_r+0x17e>
 800f768:	b1b0      	cbz	r0, 800f798 <_svfiprintf_r+0x110>
 800f76a:	9207      	str	r2, [sp, #28]
 800f76c:	e014      	b.n	800f798 <_svfiprintf_r+0x110>
 800f76e:	eba0 0308 	sub.w	r3, r0, r8
 800f772:	fa09 f303 	lsl.w	r3, r9, r3
 800f776:	4313      	orrs	r3, r2
 800f778:	9304      	str	r3, [sp, #16]
 800f77a:	46a2      	mov	sl, r4
 800f77c:	e7d2      	b.n	800f724 <_svfiprintf_r+0x9c>
 800f77e:	9b03      	ldr	r3, [sp, #12]
 800f780:	1d19      	adds	r1, r3, #4
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	9103      	str	r1, [sp, #12]
 800f786:	2b00      	cmp	r3, #0
 800f788:	bfbb      	ittet	lt
 800f78a:	425b      	neglt	r3, r3
 800f78c:	f042 0202 	orrlt.w	r2, r2, #2
 800f790:	9307      	strge	r3, [sp, #28]
 800f792:	9307      	strlt	r3, [sp, #28]
 800f794:	bfb8      	it	lt
 800f796:	9204      	strlt	r2, [sp, #16]
 800f798:	7823      	ldrb	r3, [r4, #0]
 800f79a:	2b2e      	cmp	r3, #46	; 0x2e
 800f79c:	d10c      	bne.n	800f7b8 <_svfiprintf_r+0x130>
 800f79e:	7863      	ldrb	r3, [r4, #1]
 800f7a0:	2b2a      	cmp	r3, #42	; 0x2a
 800f7a2:	d135      	bne.n	800f810 <_svfiprintf_r+0x188>
 800f7a4:	9b03      	ldr	r3, [sp, #12]
 800f7a6:	1d1a      	adds	r2, r3, #4
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	9203      	str	r2, [sp, #12]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	bfb8      	it	lt
 800f7b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f7b4:	3402      	adds	r4, #2
 800f7b6:	9305      	str	r3, [sp, #20]
 800f7b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f884 <_svfiprintf_r+0x1fc>
 800f7bc:	7821      	ldrb	r1, [r4, #0]
 800f7be:	2203      	movs	r2, #3
 800f7c0:	4650      	mov	r0, sl
 800f7c2:	f7f0 fd1d 	bl	8000200 <memchr>
 800f7c6:	b140      	cbz	r0, 800f7da <_svfiprintf_r+0x152>
 800f7c8:	2340      	movs	r3, #64	; 0x40
 800f7ca:	eba0 000a 	sub.w	r0, r0, sl
 800f7ce:	fa03 f000 	lsl.w	r0, r3, r0
 800f7d2:	9b04      	ldr	r3, [sp, #16]
 800f7d4:	4303      	orrs	r3, r0
 800f7d6:	3401      	adds	r4, #1
 800f7d8:	9304      	str	r3, [sp, #16]
 800f7da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7de:	4826      	ldr	r0, [pc, #152]	; (800f878 <_svfiprintf_r+0x1f0>)
 800f7e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7e4:	2206      	movs	r2, #6
 800f7e6:	f7f0 fd0b 	bl	8000200 <memchr>
 800f7ea:	2800      	cmp	r0, #0
 800f7ec:	d038      	beq.n	800f860 <_svfiprintf_r+0x1d8>
 800f7ee:	4b23      	ldr	r3, [pc, #140]	; (800f87c <_svfiprintf_r+0x1f4>)
 800f7f0:	bb1b      	cbnz	r3, 800f83a <_svfiprintf_r+0x1b2>
 800f7f2:	9b03      	ldr	r3, [sp, #12]
 800f7f4:	3307      	adds	r3, #7
 800f7f6:	f023 0307 	bic.w	r3, r3, #7
 800f7fa:	3308      	adds	r3, #8
 800f7fc:	9303      	str	r3, [sp, #12]
 800f7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f800:	4433      	add	r3, r6
 800f802:	9309      	str	r3, [sp, #36]	; 0x24
 800f804:	e767      	b.n	800f6d6 <_svfiprintf_r+0x4e>
 800f806:	fb0c 3202 	mla	r2, ip, r2, r3
 800f80a:	460c      	mov	r4, r1
 800f80c:	2001      	movs	r0, #1
 800f80e:	e7a5      	b.n	800f75c <_svfiprintf_r+0xd4>
 800f810:	2300      	movs	r3, #0
 800f812:	3401      	adds	r4, #1
 800f814:	9305      	str	r3, [sp, #20]
 800f816:	4619      	mov	r1, r3
 800f818:	f04f 0c0a 	mov.w	ip, #10
 800f81c:	4620      	mov	r0, r4
 800f81e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f822:	3a30      	subs	r2, #48	; 0x30
 800f824:	2a09      	cmp	r2, #9
 800f826:	d903      	bls.n	800f830 <_svfiprintf_r+0x1a8>
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d0c5      	beq.n	800f7b8 <_svfiprintf_r+0x130>
 800f82c:	9105      	str	r1, [sp, #20]
 800f82e:	e7c3      	b.n	800f7b8 <_svfiprintf_r+0x130>
 800f830:	fb0c 2101 	mla	r1, ip, r1, r2
 800f834:	4604      	mov	r4, r0
 800f836:	2301      	movs	r3, #1
 800f838:	e7f0      	b.n	800f81c <_svfiprintf_r+0x194>
 800f83a:	ab03      	add	r3, sp, #12
 800f83c:	9300      	str	r3, [sp, #0]
 800f83e:	462a      	mov	r2, r5
 800f840:	4b0f      	ldr	r3, [pc, #60]	; (800f880 <_svfiprintf_r+0x1f8>)
 800f842:	a904      	add	r1, sp, #16
 800f844:	4638      	mov	r0, r7
 800f846:	f7fb fead 	bl	800b5a4 <_printf_float>
 800f84a:	1c42      	adds	r2, r0, #1
 800f84c:	4606      	mov	r6, r0
 800f84e:	d1d6      	bne.n	800f7fe <_svfiprintf_r+0x176>
 800f850:	89ab      	ldrh	r3, [r5, #12]
 800f852:	065b      	lsls	r3, r3, #25
 800f854:	f53f af2c 	bmi.w	800f6b0 <_svfiprintf_r+0x28>
 800f858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f85a:	b01d      	add	sp, #116	; 0x74
 800f85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f860:	ab03      	add	r3, sp, #12
 800f862:	9300      	str	r3, [sp, #0]
 800f864:	462a      	mov	r2, r5
 800f866:	4b06      	ldr	r3, [pc, #24]	; (800f880 <_svfiprintf_r+0x1f8>)
 800f868:	a904      	add	r1, sp, #16
 800f86a:	4638      	mov	r0, r7
 800f86c:	f7fc f93e 	bl	800baec <_printf_i>
 800f870:	e7eb      	b.n	800f84a <_svfiprintf_r+0x1c2>
 800f872:	bf00      	nop
 800f874:	08010514 	.word	0x08010514
 800f878:	0801051e 	.word	0x0801051e
 800f87c:	0800b5a5 	.word	0x0800b5a5
 800f880:	0800f5d1 	.word	0x0800f5d1
 800f884:	0801051a 	.word	0x0801051a

0800f888 <_sungetc_r>:
 800f888:	b538      	push	{r3, r4, r5, lr}
 800f88a:	1c4b      	adds	r3, r1, #1
 800f88c:	4614      	mov	r4, r2
 800f88e:	d103      	bne.n	800f898 <_sungetc_r+0x10>
 800f890:	f04f 35ff 	mov.w	r5, #4294967295
 800f894:	4628      	mov	r0, r5
 800f896:	bd38      	pop	{r3, r4, r5, pc}
 800f898:	8993      	ldrh	r3, [r2, #12]
 800f89a:	f023 0320 	bic.w	r3, r3, #32
 800f89e:	8193      	strh	r3, [r2, #12]
 800f8a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8a2:	6852      	ldr	r2, [r2, #4]
 800f8a4:	b2cd      	uxtb	r5, r1
 800f8a6:	b18b      	cbz	r3, 800f8cc <_sungetc_r+0x44>
 800f8a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	dd08      	ble.n	800f8c0 <_sungetc_r+0x38>
 800f8ae:	6823      	ldr	r3, [r4, #0]
 800f8b0:	1e5a      	subs	r2, r3, #1
 800f8b2:	6022      	str	r2, [r4, #0]
 800f8b4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f8b8:	6863      	ldr	r3, [r4, #4]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	6063      	str	r3, [r4, #4]
 800f8be:	e7e9      	b.n	800f894 <_sungetc_r+0xc>
 800f8c0:	4621      	mov	r1, r4
 800f8c2:	f000 fc6d 	bl	80101a0 <__submore>
 800f8c6:	2800      	cmp	r0, #0
 800f8c8:	d0f1      	beq.n	800f8ae <_sungetc_r+0x26>
 800f8ca:	e7e1      	b.n	800f890 <_sungetc_r+0x8>
 800f8cc:	6921      	ldr	r1, [r4, #16]
 800f8ce:	6823      	ldr	r3, [r4, #0]
 800f8d0:	b151      	cbz	r1, 800f8e8 <_sungetc_r+0x60>
 800f8d2:	4299      	cmp	r1, r3
 800f8d4:	d208      	bcs.n	800f8e8 <_sungetc_r+0x60>
 800f8d6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f8da:	42a9      	cmp	r1, r5
 800f8dc:	d104      	bne.n	800f8e8 <_sungetc_r+0x60>
 800f8de:	3b01      	subs	r3, #1
 800f8e0:	3201      	adds	r2, #1
 800f8e2:	6023      	str	r3, [r4, #0]
 800f8e4:	6062      	str	r2, [r4, #4]
 800f8e6:	e7d5      	b.n	800f894 <_sungetc_r+0xc>
 800f8e8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f8ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f8f0:	6363      	str	r3, [r4, #52]	; 0x34
 800f8f2:	2303      	movs	r3, #3
 800f8f4:	63a3      	str	r3, [r4, #56]	; 0x38
 800f8f6:	4623      	mov	r3, r4
 800f8f8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f8fc:	6023      	str	r3, [r4, #0]
 800f8fe:	2301      	movs	r3, #1
 800f900:	e7dc      	b.n	800f8bc <_sungetc_r+0x34>

0800f902 <__ssrefill_r>:
 800f902:	b510      	push	{r4, lr}
 800f904:	460c      	mov	r4, r1
 800f906:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f908:	b169      	cbz	r1, 800f926 <__ssrefill_r+0x24>
 800f90a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f90e:	4299      	cmp	r1, r3
 800f910:	d001      	beq.n	800f916 <__ssrefill_r+0x14>
 800f912:	f7fb fb6d 	bl	800aff0 <_free_r>
 800f916:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f918:	6063      	str	r3, [r4, #4]
 800f91a:	2000      	movs	r0, #0
 800f91c:	6360      	str	r0, [r4, #52]	; 0x34
 800f91e:	b113      	cbz	r3, 800f926 <__ssrefill_r+0x24>
 800f920:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f922:	6023      	str	r3, [r4, #0]
 800f924:	bd10      	pop	{r4, pc}
 800f926:	6923      	ldr	r3, [r4, #16]
 800f928:	6023      	str	r3, [r4, #0]
 800f92a:	2300      	movs	r3, #0
 800f92c:	6063      	str	r3, [r4, #4]
 800f92e:	89a3      	ldrh	r3, [r4, #12]
 800f930:	f043 0320 	orr.w	r3, r3, #32
 800f934:	81a3      	strh	r3, [r4, #12]
 800f936:	f04f 30ff 	mov.w	r0, #4294967295
 800f93a:	e7f3      	b.n	800f924 <__ssrefill_r+0x22>

0800f93c <__ssvfiscanf_r>:
 800f93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f940:	460c      	mov	r4, r1
 800f942:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f946:	2100      	movs	r1, #0
 800f948:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f94c:	49a6      	ldr	r1, [pc, #664]	; (800fbe8 <__ssvfiscanf_r+0x2ac>)
 800f94e:	91a0      	str	r1, [sp, #640]	; 0x280
 800f950:	f10d 0804 	add.w	r8, sp, #4
 800f954:	49a5      	ldr	r1, [pc, #660]	; (800fbec <__ssvfiscanf_r+0x2b0>)
 800f956:	4fa6      	ldr	r7, [pc, #664]	; (800fbf0 <__ssvfiscanf_r+0x2b4>)
 800f958:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800fbf4 <__ssvfiscanf_r+0x2b8>
 800f95c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f960:	4606      	mov	r6, r0
 800f962:	91a1      	str	r1, [sp, #644]	; 0x284
 800f964:	9300      	str	r3, [sp, #0]
 800f966:	7813      	ldrb	r3, [r2, #0]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	f000 815a 	beq.w	800fc22 <__ssvfiscanf_r+0x2e6>
 800f96e:	5dd9      	ldrb	r1, [r3, r7]
 800f970:	f011 0108 	ands.w	r1, r1, #8
 800f974:	f102 0501 	add.w	r5, r2, #1
 800f978:	d019      	beq.n	800f9ae <__ssvfiscanf_r+0x72>
 800f97a:	6863      	ldr	r3, [r4, #4]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	dd0f      	ble.n	800f9a0 <__ssvfiscanf_r+0x64>
 800f980:	6823      	ldr	r3, [r4, #0]
 800f982:	781a      	ldrb	r2, [r3, #0]
 800f984:	5cba      	ldrb	r2, [r7, r2]
 800f986:	0712      	lsls	r2, r2, #28
 800f988:	d401      	bmi.n	800f98e <__ssvfiscanf_r+0x52>
 800f98a:	462a      	mov	r2, r5
 800f98c:	e7eb      	b.n	800f966 <__ssvfiscanf_r+0x2a>
 800f98e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f990:	3201      	adds	r2, #1
 800f992:	9245      	str	r2, [sp, #276]	; 0x114
 800f994:	6862      	ldr	r2, [r4, #4]
 800f996:	3301      	adds	r3, #1
 800f998:	3a01      	subs	r2, #1
 800f99a:	6062      	str	r2, [r4, #4]
 800f99c:	6023      	str	r3, [r4, #0]
 800f99e:	e7ec      	b.n	800f97a <__ssvfiscanf_r+0x3e>
 800f9a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f9a2:	4621      	mov	r1, r4
 800f9a4:	4630      	mov	r0, r6
 800f9a6:	4798      	blx	r3
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	d0e9      	beq.n	800f980 <__ssvfiscanf_r+0x44>
 800f9ac:	e7ed      	b.n	800f98a <__ssvfiscanf_r+0x4e>
 800f9ae:	2b25      	cmp	r3, #37	; 0x25
 800f9b0:	d012      	beq.n	800f9d8 <__ssvfiscanf_r+0x9c>
 800f9b2:	469a      	mov	sl, r3
 800f9b4:	6863      	ldr	r3, [r4, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	f340 8091 	ble.w	800fade <__ssvfiscanf_r+0x1a2>
 800f9bc:	6822      	ldr	r2, [r4, #0]
 800f9be:	7813      	ldrb	r3, [r2, #0]
 800f9c0:	4553      	cmp	r3, sl
 800f9c2:	f040 812e 	bne.w	800fc22 <__ssvfiscanf_r+0x2e6>
 800f9c6:	6863      	ldr	r3, [r4, #4]
 800f9c8:	3b01      	subs	r3, #1
 800f9ca:	6063      	str	r3, [r4, #4]
 800f9cc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f9ce:	3201      	adds	r2, #1
 800f9d0:	3301      	adds	r3, #1
 800f9d2:	6022      	str	r2, [r4, #0]
 800f9d4:	9345      	str	r3, [sp, #276]	; 0x114
 800f9d6:	e7d8      	b.n	800f98a <__ssvfiscanf_r+0x4e>
 800f9d8:	9141      	str	r1, [sp, #260]	; 0x104
 800f9da:	9143      	str	r1, [sp, #268]	; 0x10c
 800f9dc:	7853      	ldrb	r3, [r2, #1]
 800f9de:	2b2a      	cmp	r3, #42	; 0x2a
 800f9e0:	bf02      	ittt	eq
 800f9e2:	2310      	moveq	r3, #16
 800f9e4:	1c95      	addeq	r5, r2, #2
 800f9e6:	9341      	streq	r3, [sp, #260]	; 0x104
 800f9e8:	220a      	movs	r2, #10
 800f9ea:	46aa      	mov	sl, r5
 800f9ec:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f9f0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f9f4:	2b09      	cmp	r3, #9
 800f9f6:	d91d      	bls.n	800fa34 <__ssvfiscanf_r+0xf8>
 800f9f8:	487e      	ldr	r0, [pc, #504]	; (800fbf4 <__ssvfiscanf_r+0x2b8>)
 800f9fa:	2203      	movs	r2, #3
 800f9fc:	f7f0 fc00 	bl	8000200 <memchr>
 800fa00:	b140      	cbz	r0, 800fa14 <__ssvfiscanf_r+0xd8>
 800fa02:	2301      	movs	r3, #1
 800fa04:	eba0 0009 	sub.w	r0, r0, r9
 800fa08:	fa03 f000 	lsl.w	r0, r3, r0
 800fa0c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fa0e:	4318      	orrs	r0, r3
 800fa10:	9041      	str	r0, [sp, #260]	; 0x104
 800fa12:	4655      	mov	r5, sl
 800fa14:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fa18:	2b78      	cmp	r3, #120	; 0x78
 800fa1a:	d806      	bhi.n	800fa2a <__ssvfiscanf_r+0xee>
 800fa1c:	2b57      	cmp	r3, #87	; 0x57
 800fa1e:	d810      	bhi.n	800fa42 <__ssvfiscanf_r+0x106>
 800fa20:	2b25      	cmp	r3, #37	; 0x25
 800fa22:	d0c6      	beq.n	800f9b2 <__ssvfiscanf_r+0x76>
 800fa24:	d856      	bhi.n	800fad4 <__ssvfiscanf_r+0x198>
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d064      	beq.n	800faf4 <__ssvfiscanf_r+0x1b8>
 800fa2a:	2303      	movs	r3, #3
 800fa2c:	9347      	str	r3, [sp, #284]	; 0x11c
 800fa2e:	230a      	movs	r3, #10
 800fa30:	9342      	str	r3, [sp, #264]	; 0x108
 800fa32:	e071      	b.n	800fb18 <__ssvfiscanf_r+0x1dc>
 800fa34:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fa36:	fb02 1103 	mla	r1, r2, r3, r1
 800fa3a:	3930      	subs	r1, #48	; 0x30
 800fa3c:	9143      	str	r1, [sp, #268]	; 0x10c
 800fa3e:	4655      	mov	r5, sl
 800fa40:	e7d3      	b.n	800f9ea <__ssvfiscanf_r+0xae>
 800fa42:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800fa46:	2a20      	cmp	r2, #32
 800fa48:	d8ef      	bhi.n	800fa2a <__ssvfiscanf_r+0xee>
 800fa4a:	a101      	add	r1, pc, #4	; (adr r1, 800fa50 <__ssvfiscanf_r+0x114>)
 800fa4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fa50:	0800fb03 	.word	0x0800fb03
 800fa54:	0800fa2b 	.word	0x0800fa2b
 800fa58:	0800fa2b 	.word	0x0800fa2b
 800fa5c:	0800fb61 	.word	0x0800fb61
 800fa60:	0800fa2b 	.word	0x0800fa2b
 800fa64:	0800fa2b 	.word	0x0800fa2b
 800fa68:	0800fa2b 	.word	0x0800fa2b
 800fa6c:	0800fa2b 	.word	0x0800fa2b
 800fa70:	0800fa2b 	.word	0x0800fa2b
 800fa74:	0800fa2b 	.word	0x0800fa2b
 800fa78:	0800fa2b 	.word	0x0800fa2b
 800fa7c:	0800fb77 	.word	0x0800fb77
 800fa80:	0800fb4d 	.word	0x0800fb4d
 800fa84:	0800fadb 	.word	0x0800fadb
 800fa88:	0800fadb 	.word	0x0800fadb
 800fa8c:	0800fadb 	.word	0x0800fadb
 800fa90:	0800fa2b 	.word	0x0800fa2b
 800fa94:	0800fb51 	.word	0x0800fb51
 800fa98:	0800fa2b 	.word	0x0800fa2b
 800fa9c:	0800fa2b 	.word	0x0800fa2b
 800faa0:	0800fa2b 	.word	0x0800fa2b
 800faa4:	0800fa2b 	.word	0x0800fa2b
 800faa8:	0800fb87 	.word	0x0800fb87
 800faac:	0800fb59 	.word	0x0800fb59
 800fab0:	0800fafb 	.word	0x0800fafb
 800fab4:	0800fa2b 	.word	0x0800fa2b
 800fab8:	0800fa2b 	.word	0x0800fa2b
 800fabc:	0800fb83 	.word	0x0800fb83
 800fac0:	0800fa2b 	.word	0x0800fa2b
 800fac4:	0800fb4d 	.word	0x0800fb4d
 800fac8:	0800fa2b 	.word	0x0800fa2b
 800facc:	0800fa2b 	.word	0x0800fa2b
 800fad0:	0800fb03 	.word	0x0800fb03
 800fad4:	3b45      	subs	r3, #69	; 0x45
 800fad6:	2b02      	cmp	r3, #2
 800fad8:	d8a7      	bhi.n	800fa2a <__ssvfiscanf_r+0xee>
 800fada:	2305      	movs	r3, #5
 800fadc:	e01b      	b.n	800fb16 <__ssvfiscanf_r+0x1da>
 800fade:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fae0:	4621      	mov	r1, r4
 800fae2:	4630      	mov	r0, r6
 800fae4:	4798      	blx	r3
 800fae6:	2800      	cmp	r0, #0
 800fae8:	f43f af68 	beq.w	800f9bc <__ssvfiscanf_r+0x80>
 800faec:	9844      	ldr	r0, [sp, #272]	; 0x110
 800faee:	2800      	cmp	r0, #0
 800faf0:	f040 808d 	bne.w	800fc0e <__ssvfiscanf_r+0x2d2>
 800faf4:	f04f 30ff 	mov.w	r0, #4294967295
 800faf8:	e08f      	b.n	800fc1a <__ssvfiscanf_r+0x2de>
 800fafa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fafc:	f042 0220 	orr.w	r2, r2, #32
 800fb00:	9241      	str	r2, [sp, #260]	; 0x104
 800fb02:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fb04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fb08:	9241      	str	r2, [sp, #260]	; 0x104
 800fb0a:	2210      	movs	r2, #16
 800fb0c:	2b6f      	cmp	r3, #111	; 0x6f
 800fb0e:	9242      	str	r2, [sp, #264]	; 0x108
 800fb10:	bf34      	ite	cc
 800fb12:	2303      	movcc	r3, #3
 800fb14:	2304      	movcs	r3, #4
 800fb16:	9347      	str	r3, [sp, #284]	; 0x11c
 800fb18:	6863      	ldr	r3, [r4, #4]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	dd42      	ble.n	800fba4 <__ssvfiscanf_r+0x268>
 800fb1e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fb20:	0659      	lsls	r1, r3, #25
 800fb22:	d404      	bmi.n	800fb2e <__ssvfiscanf_r+0x1f2>
 800fb24:	6823      	ldr	r3, [r4, #0]
 800fb26:	781a      	ldrb	r2, [r3, #0]
 800fb28:	5cba      	ldrb	r2, [r7, r2]
 800fb2a:	0712      	lsls	r2, r2, #28
 800fb2c:	d441      	bmi.n	800fbb2 <__ssvfiscanf_r+0x276>
 800fb2e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800fb30:	2b02      	cmp	r3, #2
 800fb32:	dc50      	bgt.n	800fbd6 <__ssvfiscanf_r+0x29a>
 800fb34:	466b      	mov	r3, sp
 800fb36:	4622      	mov	r2, r4
 800fb38:	a941      	add	r1, sp, #260	; 0x104
 800fb3a:	4630      	mov	r0, r6
 800fb3c:	f000 f876 	bl	800fc2c <_scanf_chars>
 800fb40:	2801      	cmp	r0, #1
 800fb42:	d06e      	beq.n	800fc22 <__ssvfiscanf_r+0x2e6>
 800fb44:	2802      	cmp	r0, #2
 800fb46:	f47f af20 	bne.w	800f98a <__ssvfiscanf_r+0x4e>
 800fb4a:	e7cf      	b.n	800faec <__ssvfiscanf_r+0x1b0>
 800fb4c:	220a      	movs	r2, #10
 800fb4e:	e7dd      	b.n	800fb0c <__ssvfiscanf_r+0x1d0>
 800fb50:	2300      	movs	r3, #0
 800fb52:	9342      	str	r3, [sp, #264]	; 0x108
 800fb54:	2303      	movs	r3, #3
 800fb56:	e7de      	b.n	800fb16 <__ssvfiscanf_r+0x1da>
 800fb58:	2308      	movs	r3, #8
 800fb5a:	9342      	str	r3, [sp, #264]	; 0x108
 800fb5c:	2304      	movs	r3, #4
 800fb5e:	e7da      	b.n	800fb16 <__ssvfiscanf_r+0x1da>
 800fb60:	4629      	mov	r1, r5
 800fb62:	4640      	mov	r0, r8
 800fb64:	f000 fa18 	bl	800ff98 <__sccl>
 800fb68:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fb6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb6e:	9341      	str	r3, [sp, #260]	; 0x104
 800fb70:	4605      	mov	r5, r0
 800fb72:	2301      	movs	r3, #1
 800fb74:	e7cf      	b.n	800fb16 <__ssvfiscanf_r+0x1da>
 800fb76:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fb78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb7c:	9341      	str	r3, [sp, #260]	; 0x104
 800fb7e:	2300      	movs	r3, #0
 800fb80:	e7c9      	b.n	800fb16 <__ssvfiscanf_r+0x1da>
 800fb82:	2302      	movs	r3, #2
 800fb84:	e7c7      	b.n	800fb16 <__ssvfiscanf_r+0x1da>
 800fb86:	9841      	ldr	r0, [sp, #260]	; 0x104
 800fb88:	06c3      	lsls	r3, r0, #27
 800fb8a:	f53f aefe 	bmi.w	800f98a <__ssvfiscanf_r+0x4e>
 800fb8e:	9b00      	ldr	r3, [sp, #0]
 800fb90:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fb92:	1d19      	adds	r1, r3, #4
 800fb94:	9100      	str	r1, [sp, #0]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f010 0f01 	tst.w	r0, #1
 800fb9c:	bf14      	ite	ne
 800fb9e:	801a      	strhne	r2, [r3, #0]
 800fba0:	601a      	streq	r2, [r3, #0]
 800fba2:	e6f2      	b.n	800f98a <__ssvfiscanf_r+0x4e>
 800fba4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fba6:	4621      	mov	r1, r4
 800fba8:	4630      	mov	r0, r6
 800fbaa:	4798      	blx	r3
 800fbac:	2800      	cmp	r0, #0
 800fbae:	d0b6      	beq.n	800fb1e <__ssvfiscanf_r+0x1e2>
 800fbb0:	e79c      	b.n	800faec <__ssvfiscanf_r+0x1b0>
 800fbb2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fbb4:	3201      	adds	r2, #1
 800fbb6:	9245      	str	r2, [sp, #276]	; 0x114
 800fbb8:	6862      	ldr	r2, [r4, #4]
 800fbba:	3a01      	subs	r2, #1
 800fbbc:	2a00      	cmp	r2, #0
 800fbbe:	6062      	str	r2, [r4, #4]
 800fbc0:	dd02      	ble.n	800fbc8 <__ssvfiscanf_r+0x28c>
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	6023      	str	r3, [r4, #0]
 800fbc6:	e7ad      	b.n	800fb24 <__ssvfiscanf_r+0x1e8>
 800fbc8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fbca:	4621      	mov	r1, r4
 800fbcc:	4630      	mov	r0, r6
 800fbce:	4798      	blx	r3
 800fbd0:	2800      	cmp	r0, #0
 800fbd2:	d0a7      	beq.n	800fb24 <__ssvfiscanf_r+0x1e8>
 800fbd4:	e78a      	b.n	800faec <__ssvfiscanf_r+0x1b0>
 800fbd6:	2b04      	cmp	r3, #4
 800fbd8:	dc0e      	bgt.n	800fbf8 <__ssvfiscanf_r+0x2bc>
 800fbda:	466b      	mov	r3, sp
 800fbdc:	4622      	mov	r2, r4
 800fbde:	a941      	add	r1, sp, #260	; 0x104
 800fbe0:	4630      	mov	r0, r6
 800fbe2:	f000 f87d 	bl	800fce0 <_scanf_i>
 800fbe6:	e7ab      	b.n	800fb40 <__ssvfiscanf_r+0x204>
 800fbe8:	0800f889 	.word	0x0800f889
 800fbec:	0800f903 	.word	0x0800f903
 800fbf0:	08010625 	.word	0x08010625
 800fbf4:	0801051a 	.word	0x0801051a
 800fbf8:	4b0b      	ldr	r3, [pc, #44]	; (800fc28 <__ssvfiscanf_r+0x2ec>)
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	f43f aec5 	beq.w	800f98a <__ssvfiscanf_r+0x4e>
 800fc00:	466b      	mov	r3, sp
 800fc02:	4622      	mov	r2, r4
 800fc04:	a941      	add	r1, sp, #260	; 0x104
 800fc06:	4630      	mov	r0, r6
 800fc08:	f7fc f896 	bl	800bd38 <_scanf_float>
 800fc0c:	e798      	b.n	800fb40 <__ssvfiscanf_r+0x204>
 800fc0e:	89a3      	ldrh	r3, [r4, #12]
 800fc10:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fc14:	bf18      	it	ne
 800fc16:	f04f 30ff 	movne.w	r0, #4294967295
 800fc1a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800fc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc22:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fc24:	e7f9      	b.n	800fc1a <__ssvfiscanf_r+0x2de>
 800fc26:	bf00      	nop
 800fc28:	0800bd39 	.word	0x0800bd39

0800fc2c <_scanf_chars>:
 800fc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc30:	4615      	mov	r5, r2
 800fc32:	688a      	ldr	r2, [r1, #8]
 800fc34:	4680      	mov	r8, r0
 800fc36:	460c      	mov	r4, r1
 800fc38:	b932      	cbnz	r2, 800fc48 <_scanf_chars+0x1c>
 800fc3a:	698a      	ldr	r2, [r1, #24]
 800fc3c:	2a00      	cmp	r2, #0
 800fc3e:	bf0c      	ite	eq
 800fc40:	2201      	moveq	r2, #1
 800fc42:	f04f 32ff 	movne.w	r2, #4294967295
 800fc46:	608a      	str	r2, [r1, #8]
 800fc48:	6822      	ldr	r2, [r4, #0]
 800fc4a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800fcdc <_scanf_chars+0xb0>
 800fc4e:	06d1      	lsls	r1, r2, #27
 800fc50:	bf5f      	itttt	pl
 800fc52:	681a      	ldrpl	r2, [r3, #0]
 800fc54:	1d11      	addpl	r1, r2, #4
 800fc56:	6019      	strpl	r1, [r3, #0]
 800fc58:	6816      	ldrpl	r6, [r2, #0]
 800fc5a:	2700      	movs	r7, #0
 800fc5c:	69a0      	ldr	r0, [r4, #24]
 800fc5e:	b188      	cbz	r0, 800fc84 <_scanf_chars+0x58>
 800fc60:	2801      	cmp	r0, #1
 800fc62:	d107      	bne.n	800fc74 <_scanf_chars+0x48>
 800fc64:	682a      	ldr	r2, [r5, #0]
 800fc66:	7811      	ldrb	r1, [r2, #0]
 800fc68:	6962      	ldr	r2, [r4, #20]
 800fc6a:	5c52      	ldrb	r2, [r2, r1]
 800fc6c:	b952      	cbnz	r2, 800fc84 <_scanf_chars+0x58>
 800fc6e:	2f00      	cmp	r7, #0
 800fc70:	d031      	beq.n	800fcd6 <_scanf_chars+0xaa>
 800fc72:	e022      	b.n	800fcba <_scanf_chars+0x8e>
 800fc74:	2802      	cmp	r0, #2
 800fc76:	d120      	bne.n	800fcba <_scanf_chars+0x8e>
 800fc78:	682b      	ldr	r3, [r5, #0]
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800fc80:	071b      	lsls	r3, r3, #28
 800fc82:	d41a      	bmi.n	800fcba <_scanf_chars+0x8e>
 800fc84:	6823      	ldr	r3, [r4, #0]
 800fc86:	06da      	lsls	r2, r3, #27
 800fc88:	bf5e      	ittt	pl
 800fc8a:	682b      	ldrpl	r3, [r5, #0]
 800fc8c:	781b      	ldrbpl	r3, [r3, #0]
 800fc8e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fc92:	682a      	ldr	r2, [r5, #0]
 800fc94:	686b      	ldr	r3, [r5, #4]
 800fc96:	3201      	adds	r2, #1
 800fc98:	602a      	str	r2, [r5, #0]
 800fc9a:	68a2      	ldr	r2, [r4, #8]
 800fc9c:	3b01      	subs	r3, #1
 800fc9e:	3a01      	subs	r2, #1
 800fca0:	606b      	str	r3, [r5, #4]
 800fca2:	3701      	adds	r7, #1
 800fca4:	60a2      	str	r2, [r4, #8]
 800fca6:	b142      	cbz	r2, 800fcba <_scanf_chars+0x8e>
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	dcd7      	bgt.n	800fc5c <_scanf_chars+0x30>
 800fcac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fcb0:	4629      	mov	r1, r5
 800fcb2:	4640      	mov	r0, r8
 800fcb4:	4798      	blx	r3
 800fcb6:	2800      	cmp	r0, #0
 800fcb8:	d0d0      	beq.n	800fc5c <_scanf_chars+0x30>
 800fcba:	6823      	ldr	r3, [r4, #0]
 800fcbc:	f013 0310 	ands.w	r3, r3, #16
 800fcc0:	d105      	bne.n	800fcce <_scanf_chars+0xa2>
 800fcc2:	68e2      	ldr	r2, [r4, #12]
 800fcc4:	3201      	adds	r2, #1
 800fcc6:	60e2      	str	r2, [r4, #12]
 800fcc8:	69a2      	ldr	r2, [r4, #24]
 800fcca:	b102      	cbz	r2, 800fcce <_scanf_chars+0xa2>
 800fccc:	7033      	strb	r3, [r6, #0]
 800fcce:	6923      	ldr	r3, [r4, #16]
 800fcd0:	443b      	add	r3, r7
 800fcd2:	6123      	str	r3, [r4, #16]
 800fcd4:	2000      	movs	r0, #0
 800fcd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcda:	bf00      	nop
 800fcdc:	08010625 	.word	0x08010625

0800fce0 <_scanf_i>:
 800fce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce4:	4698      	mov	r8, r3
 800fce6:	4b76      	ldr	r3, [pc, #472]	; (800fec0 <_scanf_i+0x1e0>)
 800fce8:	460c      	mov	r4, r1
 800fcea:	4682      	mov	sl, r0
 800fcec:	4616      	mov	r6, r2
 800fcee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fcf2:	b087      	sub	sp, #28
 800fcf4:	ab03      	add	r3, sp, #12
 800fcf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fcfa:	4b72      	ldr	r3, [pc, #456]	; (800fec4 <_scanf_i+0x1e4>)
 800fcfc:	69a1      	ldr	r1, [r4, #24]
 800fcfe:	4a72      	ldr	r2, [pc, #456]	; (800fec8 <_scanf_i+0x1e8>)
 800fd00:	2903      	cmp	r1, #3
 800fd02:	bf18      	it	ne
 800fd04:	461a      	movne	r2, r3
 800fd06:	68a3      	ldr	r3, [r4, #8]
 800fd08:	9201      	str	r2, [sp, #4]
 800fd0a:	1e5a      	subs	r2, r3, #1
 800fd0c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fd10:	bf88      	it	hi
 800fd12:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fd16:	4627      	mov	r7, r4
 800fd18:	bf82      	ittt	hi
 800fd1a:	eb03 0905 	addhi.w	r9, r3, r5
 800fd1e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fd22:	60a3      	strhi	r3, [r4, #8]
 800fd24:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fd28:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800fd2c:	bf98      	it	ls
 800fd2e:	f04f 0900 	movls.w	r9, #0
 800fd32:	6023      	str	r3, [r4, #0]
 800fd34:	463d      	mov	r5, r7
 800fd36:	f04f 0b00 	mov.w	fp, #0
 800fd3a:	6831      	ldr	r1, [r6, #0]
 800fd3c:	ab03      	add	r3, sp, #12
 800fd3e:	7809      	ldrb	r1, [r1, #0]
 800fd40:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fd44:	2202      	movs	r2, #2
 800fd46:	f7f0 fa5b 	bl	8000200 <memchr>
 800fd4a:	b328      	cbz	r0, 800fd98 <_scanf_i+0xb8>
 800fd4c:	f1bb 0f01 	cmp.w	fp, #1
 800fd50:	d159      	bne.n	800fe06 <_scanf_i+0x126>
 800fd52:	6862      	ldr	r2, [r4, #4]
 800fd54:	b92a      	cbnz	r2, 800fd62 <_scanf_i+0x82>
 800fd56:	6822      	ldr	r2, [r4, #0]
 800fd58:	2308      	movs	r3, #8
 800fd5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd5e:	6063      	str	r3, [r4, #4]
 800fd60:	6022      	str	r2, [r4, #0]
 800fd62:	6822      	ldr	r2, [r4, #0]
 800fd64:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800fd68:	6022      	str	r2, [r4, #0]
 800fd6a:	68a2      	ldr	r2, [r4, #8]
 800fd6c:	1e51      	subs	r1, r2, #1
 800fd6e:	60a1      	str	r1, [r4, #8]
 800fd70:	b192      	cbz	r2, 800fd98 <_scanf_i+0xb8>
 800fd72:	6832      	ldr	r2, [r6, #0]
 800fd74:	1c51      	adds	r1, r2, #1
 800fd76:	6031      	str	r1, [r6, #0]
 800fd78:	7812      	ldrb	r2, [r2, #0]
 800fd7a:	f805 2b01 	strb.w	r2, [r5], #1
 800fd7e:	6872      	ldr	r2, [r6, #4]
 800fd80:	3a01      	subs	r2, #1
 800fd82:	2a00      	cmp	r2, #0
 800fd84:	6072      	str	r2, [r6, #4]
 800fd86:	dc07      	bgt.n	800fd98 <_scanf_i+0xb8>
 800fd88:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800fd8c:	4631      	mov	r1, r6
 800fd8e:	4650      	mov	r0, sl
 800fd90:	4790      	blx	r2
 800fd92:	2800      	cmp	r0, #0
 800fd94:	f040 8085 	bne.w	800fea2 <_scanf_i+0x1c2>
 800fd98:	f10b 0b01 	add.w	fp, fp, #1
 800fd9c:	f1bb 0f03 	cmp.w	fp, #3
 800fda0:	d1cb      	bne.n	800fd3a <_scanf_i+0x5a>
 800fda2:	6863      	ldr	r3, [r4, #4]
 800fda4:	b90b      	cbnz	r3, 800fdaa <_scanf_i+0xca>
 800fda6:	230a      	movs	r3, #10
 800fda8:	6063      	str	r3, [r4, #4]
 800fdaa:	6863      	ldr	r3, [r4, #4]
 800fdac:	4947      	ldr	r1, [pc, #284]	; (800fecc <_scanf_i+0x1ec>)
 800fdae:	6960      	ldr	r0, [r4, #20]
 800fdb0:	1ac9      	subs	r1, r1, r3
 800fdb2:	f000 f8f1 	bl	800ff98 <__sccl>
 800fdb6:	f04f 0b00 	mov.w	fp, #0
 800fdba:	68a3      	ldr	r3, [r4, #8]
 800fdbc:	6822      	ldr	r2, [r4, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d03d      	beq.n	800fe3e <_scanf_i+0x15e>
 800fdc2:	6831      	ldr	r1, [r6, #0]
 800fdc4:	6960      	ldr	r0, [r4, #20]
 800fdc6:	f891 c000 	ldrb.w	ip, [r1]
 800fdca:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fdce:	2800      	cmp	r0, #0
 800fdd0:	d035      	beq.n	800fe3e <_scanf_i+0x15e>
 800fdd2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800fdd6:	d124      	bne.n	800fe22 <_scanf_i+0x142>
 800fdd8:	0510      	lsls	r0, r2, #20
 800fdda:	d522      	bpl.n	800fe22 <_scanf_i+0x142>
 800fddc:	f10b 0b01 	add.w	fp, fp, #1
 800fde0:	f1b9 0f00 	cmp.w	r9, #0
 800fde4:	d003      	beq.n	800fdee <_scanf_i+0x10e>
 800fde6:	3301      	adds	r3, #1
 800fde8:	f109 39ff 	add.w	r9, r9, #4294967295
 800fdec:	60a3      	str	r3, [r4, #8]
 800fdee:	6873      	ldr	r3, [r6, #4]
 800fdf0:	3b01      	subs	r3, #1
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	6073      	str	r3, [r6, #4]
 800fdf6:	dd1b      	ble.n	800fe30 <_scanf_i+0x150>
 800fdf8:	6833      	ldr	r3, [r6, #0]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	6033      	str	r3, [r6, #0]
 800fdfe:	68a3      	ldr	r3, [r4, #8]
 800fe00:	3b01      	subs	r3, #1
 800fe02:	60a3      	str	r3, [r4, #8]
 800fe04:	e7d9      	b.n	800fdba <_scanf_i+0xda>
 800fe06:	f1bb 0f02 	cmp.w	fp, #2
 800fe0a:	d1ae      	bne.n	800fd6a <_scanf_i+0x8a>
 800fe0c:	6822      	ldr	r2, [r4, #0]
 800fe0e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800fe12:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fe16:	d1bf      	bne.n	800fd98 <_scanf_i+0xb8>
 800fe18:	2310      	movs	r3, #16
 800fe1a:	6063      	str	r3, [r4, #4]
 800fe1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fe20:	e7a2      	b.n	800fd68 <_scanf_i+0x88>
 800fe22:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800fe26:	6022      	str	r2, [r4, #0]
 800fe28:	780b      	ldrb	r3, [r1, #0]
 800fe2a:	f805 3b01 	strb.w	r3, [r5], #1
 800fe2e:	e7de      	b.n	800fdee <_scanf_i+0x10e>
 800fe30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fe34:	4631      	mov	r1, r6
 800fe36:	4650      	mov	r0, sl
 800fe38:	4798      	blx	r3
 800fe3a:	2800      	cmp	r0, #0
 800fe3c:	d0df      	beq.n	800fdfe <_scanf_i+0x11e>
 800fe3e:	6823      	ldr	r3, [r4, #0]
 800fe40:	05db      	lsls	r3, r3, #23
 800fe42:	d50d      	bpl.n	800fe60 <_scanf_i+0x180>
 800fe44:	42bd      	cmp	r5, r7
 800fe46:	d909      	bls.n	800fe5c <_scanf_i+0x17c>
 800fe48:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fe4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe50:	4632      	mov	r2, r6
 800fe52:	4650      	mov	r0, sl
 800fe54:	4798      	blx	r3
 800fe56:	f105 39ff 	add.w	r9, r5, #4294967295
 800fe5a:	464d      	mov	r5, r9
 800fe5c:	42bd      	cmp	r5, r7
 800fe5e:	d02d      	beq.n	800febc <_scanf_i+0x1dc>
 800fe60:	6822      	ldr	r2, [r4, #0]
 800fe62:	f012 0210 	ands.w	r2, r2, #16
 800fe66:	d113      	bne.n	800fe90 <_scanf_i+0x1b0>
 800fe68:	702a      	strb	r2, [r5, #0]
 800fe6a:	6863      	ldr	r3, [r4, #4]
 800fe6c:	9e01      	ldr	r6, [sp, #4]
 800fe6e:	4639      	mov	r1, r7
 800fe70:	4650      	mov	r0, sl
 800fe72:	47b0      	blx	r6
 800fe74:	6821      	ldr	r1, [r4, #0]
 800fe76:	f8d8 3000 	ldr.w	r3, [r8]
 800fe7a:	f011 0f20 	tst.w	r1, #32
 800fe7e:	d013      	beq.n	800fea8 <_scanf_i+0x1c8>
 800fe80:	1d1a      	adds	r2, r3, #4
 800fe82:	f8c8 2000 	str.w	r2, [r8]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	6018      	str	r0, [r3, #0]
 800fe8a:	68e3      	ldr	r3, [r4, #12]
 800fe8c:	3301      	adds	r3, #1
 800fe8e:	60e3      	str	r3, [r4, #12]
 800fe90:	1bed      	subs	r5, r5, r7
 800fe92:	44ab      	add	fp, r5
 800fe94:	6925      	ldr	r5, [r4, #16]
 800fe96:	445d      	add	r5, fp
 800fe98:	6125      	str	r5, [r4, #16]
 800fe9a:	2000      	movs	r0, #0
 800fe9c:	b007      	add	sp, #28
 800fe9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fea2:	f04f 0b00 	mov.w	fp, #0
 800fea6:	e7ca      	b.n	800fe3e <_scanf_i+0x15e>
 800fea8:	1d1a      	adds	r2, r3, #4
 800feaa:	f8c8 2000 	str.w	r2, [r8]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	f011 0f01 	tst.w	r1, #1
 800feb4:	bf14      	ite	ne
 800feb6:	8018      	strhne	r0, [r3, #0]
 800feb8:	6018      	streq	r0, [r3, #0]
 800feba:	e7e6      	b.n	800fe8a <_scanf_i+0x1aa>
 800febc:	2001      	movs	r0, #1
 800febe:	e7ed      	b.n	800fe9c <_scanf_i+0x1bc>
 800fec0:	0801049c 	.word	0x0801049c
 800fec4:	0801019d 	.word	0x0801019d
 800fec8:	0800d11d 	.word	0x0800d11d
 800fecc:	080109ed 	.word	0x080109ed

0800fed0 <_putc_r>:
 800fed0:	b570      	push	{r4, r5, r6, lr}
 800fed2:	460d      	mov	r5, r1
 800fed4:	4614      	mov	r4, r2
 800fed6:	4606      	mov	r6, r0
 800fed8:	b118      	cbz	r0, 800fee2 <_putc_r+0x12>
 800feda:	6983      	ldr	r3, [r0, #24]
 800fedc:	b90b      	cbnz	r3, 800fee2 <_putc_r+0x12>
 800fede:	f7fe f99f 	bl	800e220 <__sinit>
 800fee2:	4b1c      	ldr	r3, [pc, #112]	; (800ff54 <_putc_r+0x84>)
 800fee4:	429c      	cmp	r4, r3
 800fee6:	d124      	bne.n	800ff32 <_putc_r+0x62>
 800fee8:	6874      	ldr	r4, [r6, #4]
 800feea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800feec:	07d8      	lsls	r0, r3, #31
 800feee:	d405      	bmi.n	800fefc <_putc_r+0x2c>
 800fef0:	89a3      	ldrh	r3, [r4, #12]
 800fef2:	0599      	lsls	r1, r3, #22
 800fef4:	d402      	bmi.n	800fefc <_putc_r+0x2c>
 800fef6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fef8:	f7fe fda3 	bl	800ea42 <__retarget_lock_acquire_recursive>
 800fefc:	68a3      	ldr	r3, [r4, #8]
 800fefe:	3b01      	subs	r3, #1
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	60a3      	str	r3, [r4, #8]
 800ff04:	da05      	bge.n	800ff12 <_putc_r+0x42>
 800ff06:	69a2      	ldr	r2, [r4, #24]
 800ff08:	4293      	cmp	r3, r2
 800ff0a:	db1c      	blt.n	800ff46 <_putc_r+0x76>
 800ff0c:	b2eb      	uxtb	r3, r5
 800ff0e:	2b0a      	cmp	r3, #10
 800ff10:	d019      	beq.n	800ff46 <_putc_r+0x76>
 800ff12:	6823      	ldr	r3, [r4, #0]
 800ff14:	1c5a      	adds	r2, r3, #1
 800ff16:	6022      	str	r2, [r4, #0]
 800ff18:	701d      	strb	r5, [r3, #0]
 800ff1a:	b2ed      	uxtb	r5, r5
 800ff1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff1e:	07da      	lsls	r2, r3, #31
 800ff20:	d405      	bmi.n	800ff2e <_putc_r+0x5e>
 800ff22:	89a3      	ldrh	r3, [r4, #12]
 800ff24:	059b      	lsls	r3, r3, #22
 800ff26:	d402      	bmi.n	800ff2e <_putc_r+0x5e>
 800ff28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff2a:	f7fe fd8b 	bl	800ea44 <__retarget_lock_release_recursive>
 800ff2e:	4628      	mov	r0, r5
 800ff30:	bd70      	pop	{r4, r5, r6, pc}
 800ff32:	4b09      	ldr	r3, [pc, #36]	; (800ff58 <_putc_r+0x88>)
 800ff34:	429c      	cmp	r4, r3
 800ff36:	d101      	bne.n	800ff3c <_putc_r+0x6c>
 800ff38:	68b4      	ldr	r4, [r6, #8]
 800ff3a:	e7d6      	b.n	800feea <_putc_r+0x1a>
 800ff3c:	4b07      	ldr	r3, [pc, #28]	; (800ff5c <_putc_r+0x8c>)
 800ff3e:	429c      	cmp	r4, r3
 800ff40:	bf08      	it	eq
 800ff42:	68f4      	ldreq	r4, [r6, #12]
 800ff44:	e7d1      	b.n	800feea <_putc_r+0x1a>
 800ff46:	4629      	mov	r1, r5
 800ff48:	4622      	mov	r2, r4
 800ff4a:	4630      	mov	r0, r6
 800ff4c:	f7fd f8e8 	bl	800d120 <__swbuf_r>
 800ff50:	4605      	mov	r5, r0
 800ff52:	e7e3      	b.n	800ff1c <_putc_r+0x4c>
 800ff54:	080107c0 	.word	0x080107c0
 800ff58:	080107e0 	.word	0x080107e0
 800ff5c:	080107a0 	.word	0x080107a0

0800ff60 <_read_r>:
 800ff60:	b538      	push	{r3, r4, r5, lr}
 800ff62:	4d07      	ldr	r5, [pc, #28]	; (800ff80 <_read_r+0x20>)
 800ff64:	4604      	mov	r4, r0
 800ff66:	4608      	mov	r0, r1
 800ff68:	4611      	mov	r1, r2
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	602a      	str	r2, [r5, #0]
 800ff6e:	461a      	mov	r2, r3
 800ff70:	f7f6 f98a 	bl	8006288 <_read>
 800ff74:	1c43      	adds	r3, r0, #1
 800ff76:	d102      	bne.n	800ff7e <_read_r+0x1e>
 800ff78:	682b      	ldr	r3, [r5, #0]
 800ff7a:	b103      	cbz	r3, 800ff7e <_read_r+0x1e>
 800ff7c:	6023      	str	r3, [r4, #0]
 800ff7e:	bd38      	pop	{r3, r4, r5, pc}
 800ff80:	20002130 	.word	0x20002130
 800ff84:	00000000 	.word	0x00000000

0800ff88 <nan>:
 800ff88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ff90 <nan+0x8>
 800ff8c:	4770      	bx	lr
 800ff8e:	bf00      	nop
 800ff90:	00000000 	.word	0x00000000
 800ff94:	7ff80000 	.word	0x7ff80000

0800ff98 <__sccl>:
 800ff98:	b570      	push	{r4, r5, r6, lr}
 800ff9a:	780b      	ldrb	r3, [r1, #0]
 800ff9c:	4604      	mov	r4, r0
 800ff9e:	2b5e      	cmp	r3, #94	; 0x5e
 800ffa0:	bf0b      	itete	eq
 800ffa2:	784b      	ldrbeq	r3, [r1, #1]
 800ffa4:	1c48      	addne	r0, r1, #1
 800ffa6:	1c88      	addeq	r0, r1, #2
 800ffa8:	2200      	movne	r2, #0
 800ffaa:	bf08      	it	eq
 800ffac:	2201      	moveq	r2, #1
 800ffae:	1e61      	subs	r1, r4, #1
 800ffb0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ffb4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ffb8:	42a9      	cmp	r1, r5
 800ffba:	d1fb      	bne.n	800ffb4 <__sccl+0x1c>
 800ffbc:	b90b      	cbnz	r3, 800ffc2 <__sccl+0x2a>
 800ffbe:	3801      	subs	r0, #1
 800ffc0:	bd70      	pop	{r4, r5, r6, pc}
 800ffc2:	f082 0201 	eor.w	r2, r2, #1
 800ffc6:	54e2      	strb	r2, [r4, r3]
 800ffc8:	4605      	mov	r5, r0
 800ffca:	4628      	mov	r0, r5
 800ffcc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ffd0:	292d      	cmp	r1, #45	; 0x2d
 800ffd2:	d006      	beq.n	800ffe2 <__sccl+0x4a>
 800ffd4:	295d      	cmp	r1, #93	; 0x5d
 800ffd6:	d0f3      	beq.n	800ffc0 <__sccl+0x28>
 800ffd8:	b909      	cbnz	r1, 800ffde <__sccl+0x46>
 800ffda:	4628      	mov	r0, r5
 800ffdc:	e7f0      	b.n	800ffc0 <__sccl+0x28>
 800ffde:	460b      	mov	r3, r1
 800ffe0:	e7f1      	b.n	800ffc6 <__sccl+0x2e>
 800ffe2:	786e      	ldrb	r6, [r5, #1]
 800ffe4:	2e5d      	cmp	r6, #93	; 0x5d
 800ffe6:	d0fa      	beq.n	800ffde <__sccl+0x46>
 800ffe8:	42b3      	cmp	r3, r6
 800ffea:	dcf8      	bgt.n	800ffde <__sccl+0x46>
 800ffec:	3502      	adds	r5, #2
 800ffee:	4619      	mov	r1, r3
 800fff0:	3101      	adds	r1, #1
 800fff2:	428e      	cmp	r6, r1
 800fff4:	5462      	strb	r2, [r4, r1]
 800fff6:	dcfb      	bgt.n	800fff0 <__sccl+0x58>
 800fff8:	1af1      	subs	r1, r6, r3
 800fffa:	3901      	subs	r1, #1
 800fffc:	1c58      	adds	r0, r3, #1
 800fffe:	42b3      	cmp	r3, r6
 8010000:	bfa8      	it	ge
 8010002:	2100      	movge	r1, #0
 8010004:	1843      	adds	r3, r0, r1
 8010006:	e7e0      	b.n	800ffca <__sccl+0x32>

08010008 <_raise_r>:
 8010008:	291f      	cmp	r1, #31
 801000a:	b538      	push	{r3, r4, r5, lr}
 801000c:	4604      	mov	r4, r0
 801000e:	460d      	mov	r5, r1
 8010010:	d904      	bls.n	801001c <_raise_r+0x14>
 8010012:	2316      	movs	r3, #22
 8010014:	6003      	str	r3, [r0, #0]
 8010016:	f04f 30ff 	mov.w	r0, #4294967295
 801001a:	bd38      	pop	{r3, r4, r5, pc}
 801001c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801001e:	b112      	cbz	r2, 8010026 <_raise_r+0x1e>
 8010020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010024:	b94b      	cbnz	r3, 801003a <_raise_r+0x32>
 8010026:	4620      	mov	r0, r4
 8010028:	f000 f830 	bl	801008c <_getpid_r>
 801002c:	462a      	mov	r2, r5
 801002e:	4601      	mov	r1, r0
 8010030:	4620      	mov	r0, r4
 8010032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010036:	f000 b817 	b.w	8010068 <_kill_r>
 801003a:	2b01      	cmp	r3, #1
 801003c:	d00a      	beq.n	8010054 <_raise_r+0x4c>
 801003e:	1c59      	adds	r1, r3, #1
 8010040:	d103      	bne.n	801004a <_raise_r+0x42>
 8010042:	2316      	movs	r3, #22
 8010044:	6003      	str	r3, [r0, #0]
 8010046:	2001      	movs	r0, #1
 8010048:	e7e7      	b.n	801001a <_raise_r+0x12>
 801004a:	2400      	movs	r4, #0
 801004c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010050:	4628      	mov	r0, r5
 8010052:	4798      	blx	r3
 8010054:	2000      	movs	r0, #0
 8010056:	e7e0      	b.n	801001a <_raise_r+0x12>

08010058 <raise>:
 8010058:	4b02      	ldr	r3, [pc, #8]	; (8010064 <raise+0xc>)
 801005a:	4601      	mov	r1, r0
 801005c:	6818      	ldr	r0, [r3, #0]
 801005e:	f7ff bfd3 	b.w	8010008 <_raise_r>
 8010062:	bf00      	nop
 8010064:	200013ec 	.word	0x200013ec

08010068 <_kill_r>:
 8010068:	b538      	push	{r3, r4, r5, lr}
 801006a:	4d07      	ldr	r5, [pc, #28]	; (8010088 <_kill_r+0x20>)
 801006c:	2300      	movs	r3, #0
 801006e:	4604      	mov	r4, r0
 8010070:	4608      	mov	r0, r1
 8010072:	4611      	mov	r1, r2
 8010074:	602b      	str	r3, [r5, #0]
 8010076:	f7f6 f8ed 	bl	8006254 <_kill>
 801007a:	1c43      	adds	r3, r0, #1
 801007c:	d102      	bne.n	8010084 <_kill_r+0x1c>
 801007e:	682b      	ldr	r3, [r5, #0]
 8010080:	b103      	cbz	r3, 8010084 <_kill_r+0x1c>
 8010082:	6023      	str	r3, [r4, #0]
 8010084:	bd38      	pop	{r3, r4, r5, pc}
 8010086:	bf00      	nop
 8010088:	20002130 	.word	0x20002130

0801008c <_getpid_r>:
 801008c:	f7f6 b8da 	b.w	8006244 <_getpid>

08010090 <strncmp>:
 8010090:	b510      	push	{r4, lr}
 8010092:	b17a      	cbz	r2, 80100b4 <strncmp+0x24>
 8010094:	4603      	mov	r3, r0
 8010096:	3901      	subs	r1, #1
 8010098:	1884      	adds	r4, r0, r2
 801009a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801009e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80100a2:	4290      	cmp	r0, r2
 80100a4:	d101      	bne.n	80100aa <strncmp+0x1a>
 80100a6:	42a3      	cmp	r3, r4
 80100a8:	d101      	bne.n	80100ae <strncmp+0x1e>
 80100aa:	1a80      	subs	r0, r0, r2
 80100ac:	bd10      	pop	{r4, pc}
 80100ae:	2800      	cmp	r0, #0
 80100b0:	d1f3      	bne.n	801009a <strncmp+0xa>
 80100b2:	e7fa      	b.n	80100aa <strncmp+0x1a>
 80100b4:	4610      	mov	r0, r2
 80100b6:	e7f9      	b.n	80100ac <strncmp+0x1c>

080100b8 <_strtoul_l.constprop.0>:
 80100b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100bc:	4f36      	ldr	r7, [pc, #216]	; (8010198 <_strtoul_l.constprop.0+0xe0>)
 80100be:	4686      	mov	lr, r0
 80100c0:	460d      	mov	r5, r1
 80100c2:	4628      	mov	r0, r5
 80100c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80100c8:	5de6      	ldrb	r6, [r4, r7]
 80100ca:	f016 0608 	ands.w	r6, r6, #8
 80100ce:	d1f8      	bne.n	80100c2 <_strtoul_l.constprop.0+0xa>
 80100d0:	2c2d      	cmp	r4, #45	; 0x2d
 80100d2:	d12f      	bne.n	8010134 <_strtoul_l.constprop.0+0x7c>
 80100d4:	782c      	ldrb	r4, [r5, #0]
 80100d6:	2601      	movs	r6, #1
 80100d8:	1c85      	adds	r5, r0, #2
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d057      	beq.n	801018e <_strtoul_l.constprop.0+0xd6>
 80100de:	2b10      	cmp	r3, #16
 80100e0:	d109      	bne.n	80100f6 <_strtoul_l.constprop.0+0x3e>
 80100e2:	2c30      	cmp	r4, #48	; 0x30
 80100e4:	d107      	bne.n	80100f6 <_strtoul_l.constprop.0+0x3e>
 80100e6:	7828      	ldrb	r0, [r5, #0]
 80100e8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80100ec:	2858      	cmp	r0, #88	; 0x58
 80100ee:	d149      	bne.n	8010184 <_strtoul_l.constprop.0+0xcc>
 80100f0:	786c      	ldrb	r4, [r5, #1]
 80100f2:	2310      	movs	r3, #16
 80100f4:	3502      	adds	r5, #2
 80100f6:	f04f 38ff 	mov.w	r8, #4294967295
 80100fa:	2700      	movs	r7, #0
 80100fc:	fbb8 f8f3 	udiv	r8, r8, r3
 8010100:	fb03 f908 	mul.w	r9, r3, r8
 8010104:	ea6f 0909 	mvn.w	r9, r9
 8010108:	4638      	mov	r0, r7
 801010a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801010e:	f1bc 0f09 	cmp.w	ip, #9
 8010112:	d814      	bhi.n	801013e <_strtoul_l.constprop.0+0x86>
 8010114:	4664      	mov	r4, ip
 8010116:	42a3      	cmp	r3, r4
 8010118:	dd22      	ble.n	8010160 <_strtoul_l.constprop.0+0xa8>
 801011a:	2f00      	cmp	r7, #0
 801011c:	db1d      	blt.n	801015a <_strtoul_l.constprop.0+0xa2>
 801011e:	4580      	cmp	r8, r0
 8010120:	d31b      	bcc.n	801015a <_strtoul_l.constprop.0+0xa2>
 8010122:	d101      	bne.n	8010128 <_strtoul_l.constprop.0+0x70>
 8010124:	45a1      	cmp	r9, r4
 8010126:	db18      	blt.n	801015a <_strtoul_l.constprop.0+0xa2>
 8010128:	fb00 4003 	mla	r0, r0, r3, r4
 801012c:	2701      	movs	r7, #1
 801012e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010132:	e7ea      	b.n	801010a <_strtoul_l.constprop.0+0x52>
 8010134:	2c2b      	cmp	r4, #43	; 0x2b
 8010136:	bf04      	itt	eq
 8010138:	782c      	ldrbeq	r4, [r5, #0]
 801013a:	1c85      	addeq	r5, r0, #2
 801013c:	e7cd      	b.n	80100da <_strtoul_l.constprop.0+0x22>
 801013e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010142:	f1bc 0f19 	cmp.w	ip, #25
 8010146:	d801      	bhi.n	801014c <_strtoul_l.constprop.0+0x94>
 8010148:	3c37      	subs	r4, #55	; 0x37
 801014a:	e7e4      	b.n	8010116 <_strtoul_l.constprop.0+0x5e>
 801014c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010150:	f1bc 0f19 	cmp.w	ip, #25
 8010154:	d804      	bhi.n	8010160 <_strtoul_l.constprop.0+0xa8>
 8010156:	3c57      	subs	r4, #87	; 0x57
 8010158:	e7dd      	b.n	8010116 <_strtoul_l.constprop.0+0x5e>
 801015a:	f04f 37ff 	mov.w	r7, #4294967295
 801015e:	e7e6      	b.n	801012e <_strtoul_l.constprop.0+0x76>
 8010160:	2f00      	cmp	r7, #0
 8010162:	da07      	bge.n	8010174 <_strtoul_l.constprop.0+0xbc>
 8010164:	2322      	movs	r3, #34	; 0x22
 8010166:	f8ce 3000 	str.w	r3, [lr]
 801016a:	f04f 30ff 	mov.w	r0, #4294967295
 801016e:	b932      	cbnz	r2, 801017e <_strtoul_l.constprop.0+0xc6>
 8010170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010174:	b106      	cbz	r6, 8010178 <_strtoul_l.constprop.0+0xc0>
 8010176:	4240      	negs	r0, r0
 8010178:	2a00      	cmp	r2, #0
 801017a:	d0f9      	beq.n	8010170 <_strtoul_l.constprop.0+0xb8>
 801017c:	b107      	cbz	r7, 8010180 <_strtoul_l.constprop.0+0xc8>
 801017e:	1e69      	subs	r1, r5, #1
 8010180:	6011      	str	r1, [r2, #0]
 8010182:	e7f5      	b.n	8010170 <_strtoul_l.constprop.0+0xb8>
 8010184:	2430      	movs	r4, #48	; 0x30
 8010186:	2b00      	cmp	r3, #0
 8010188:	d1b5      	bne.n	80100f6 <_strtoul_l.constprop.0+0x3e>
 801018a:	2308      	movs	r3, #8
 801018c:	e7b3      	b.n	80100f6 <_strtoul_l.constprop.0+0x3e>
 801018e:	2c30      	cmp	r4, #48	; 0x30
 8010190:	d0a9      	beq.n	80100e6 <_strtoul_l.constprop.0+0x2e>
 8010192:	230a      	movs	r3, #10
 8010194:	e7af      	b.n	80100f6 <_strtoul_l.constprop.0+0x3e>
 8010196:	bf00      	nop
 8010198:	08010625 	.word	0x08010625

0801019c <_strtoul_r>:
 801019c:	f7ff bf8c 	b.w	80100b8 <_strtoul_l.constprop.0>

080101a0 <__submore>:
 80101a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101a4:	460c      	mov	r4, r1
 80101a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80101a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101ac:	4299      	cmp	r1, r3
 80101ae:	d11d      	bne.n	80101ec <__submore+0x4c>
 80101b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80101b4:	f7fa ff88 	bl	800b0c8 <_malloc_r>
 80101b8:	b918      	cbnz	r0, 80101c2 <__submore+0x22>
 80101ba:	f04f 30ff 	mov.w	r0, #4294967295
 80101be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101c6:	63a3      	str	r3, [r4, #56]	; 0x38
 80101c8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80101cc:	6360      	str	r0, [r4, #52]	; 0x34
 80101ce:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80101d2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80101d6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80101da:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80101de:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80101e2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80101e6:	6020      	str	r0, [r4, #0]
 80101e8:	2000      	movs	r0, #0
 80101ea:	e7e8      	b.n	80101be <__submore+0x1e>
 80101ec:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80101ee:	0077      	lsls	r7, r6, #1
 80101f0:	463a      	mov	r2, r7
 80101f2:	f7ff f9be 	bl	800f572 <_realloc_r>
 80101f6:	4605      	mov	r5, r0
 80101f8:	2800      	cmp	r0, #0
 80101fa:	d0de      	beq.n	80101ba <__submore+0x1a>
 80101fc:	eb00 0806 	add.w	r8, r0, r6
 8010200:	4601      	mov	r1, r0
 8010202:	4632      	mov	r2, r6
 8010204:	4640      	mov	r0, r8
 8010206:	f7fe fca9 	bl	800eb5c <memcpy>
 801020a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801020e:	f8c4 8000 	str.w	r8, [r4]
 8010212:	e7e9      	b.n	80101e8 <__submore+0x48>

08010214 <__ascii_wctomb>:
 8010214:	b149      	cbz	r1, 801022a <__ascii_wctomb+0x16>
 8010216:	2aff      	cmp	r2, #255	; 0xff
 8010218:	bf85      	ittet	hi
 801021a:	238a      	movhi	r3, #138	; 0x8a
 801021c:	6003      	strhi	r3, [r0, #0]
 801021e:	700a      	strbls	r2, [r1, #0]
 8010220:	f04f 30ff 	movhi.w	r0, #4294967295
 8010224:	bf98      	it	ls
 8010226:	2001      	movls	r0, #1
 8010228:	4770      	bx	lr
 801022a:	4608      	mov	r0, r1
 801022c:	4770      	bx	lr
	...

08010230 <_fstat_r>:
 8010230:	b538      	push	{r3, r4, r5, lr}
 8010232:	4d07      	ldr	r5, [pc, #28]	; (8010250 <_fstat_r+0x20>)
 8010234:	2300      	movs	r3, #0
 8010236:	4604      	mov	r4, r0
 8010238:	4608      	mov	r0, r1
 801023a:	4611      	mov	r1, r2
 801023c:	602b      	str	r3, [r5, #0]
 801023e:	f7f6 f868 	bl	8006312 <_fstat>
 8010242:	1c43      	adds	r3, r0, #1
 8010244:	d102      	bne.n	801024c <_fstat_r+0x1c>
 8010246:	682b      	ldr	r3, [r5, #0]
 8010248:	b103      	cbz	r3, 801024c <_fstat_r+0x1c>
 801024a:	6023      	str	r3, [r4, #0]
 801024c:	bd38      	pop	{r3, r4, r5, pc}
 801024e:	bf00      	nop
 8010250:	20002130 	.word	0x20002130

08010254 <_isatty_r>:
 8010254:	b538      	push	{r3, r4, r5, lr}
 8010256:	4d06      	ldr	r5, [pc, #24]	; (8010270 <_isatty_r+0x1c>)
 8010258:	2300      	movs	r3, #0
 801025a:	4604      	mov	r4, r0
 801025c:	4608      	mov	r0, r1
 801025e:	602b      	str	r3, [r5, #0]
 8010260:	f7f6 f867 	bl	8006332 <_isatty>
 8010264:	1c43      	adds	r3, r0, #1
 8010266:	d102      	bne.n	801026e <_isatty_r+0x1a>
 8010268:	682b      	ldr	r3, [r5, #0]
 801026a:	b103      	cbz	r3, 801026e <_isatty_r+0x1a>
 801026c:	6023      	str	r3, [r4, #0]
 801026e:	bd38      	pop	{r3, r4, r5, pc}
 8010270:	20002130 	.word	0x20002130

08010274 <_malloc_usable_size_r>:
 8010274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010278:	1f18      	subs	r0, r3, #4
 801027a:	2b00      	cmp	r3, #0
 801027c:	bfbc      	itt	lt
 801027e:	580b      	ldrlt	r3, [r1, r0]
 8010280:	18c0      	addlt	r0, r0, r3
 8010282:	4770      	bx	lr

08010284 <_init>:
 8010284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010286:	bf00      	nop
 8010288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801028a:	bc08      	pop	{r3}
 801028c:	469e      	mov	lr, r3
 801028e:	4770      	bx	lr

08010290 <_fini>:
 8010290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010292:	bf00      	nop
 8010294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010296:	bc08      	pop	{r3}
 8010298:	469e      	mov	lr, r3
 801029a:	4770      	bx	lr
